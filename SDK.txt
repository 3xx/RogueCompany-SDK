Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 1]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 1]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 1]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 1]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 1]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 1]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 1]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 1]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 1]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x98, Size: 1]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0xa8, Size: 1]
	FString StreamingLevelsPrefix;//[Offset: 0xd0, Size: 1]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xe0, Size: 1]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xe8, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xf0, Size: 1]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xf8, Size: 1]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x100, Size: 1]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11e, Size: 1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x120, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x128, Size: 1]
	GameStateBase* GameState;//[Offset: 0x130, Size: 1]
	AISystemBase* AISystem;//[Offset: 0x138, Size: 1]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x140, Size: 1]
	Level*[] Levels;//[Offset: 0x148, Size: 1]
	LevelCollection[] LevelCollections;//[Offset: 0x158, Size: 1]
	GameInstance* OwningGameInstance;//[Offset: 0x188, Size: 1]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x190, Size: 1]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a0, Size: 1]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a8, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x200, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x210, Size: 1]
	WorldComposition* WorldComposition;//[Offset: 0x560, Size: 1]
	WorldPSCPool PSCPool;//[Offset: 0x5f0, Size: 1]
	HirezObjectPool HirezObjectPool;//[Offset: 0x710, Size: 1]
	WorldSettings* K2_GetWorldSettings();// 0x45ac8a0
	void HandleTimelineScrubbed();// 0x45ac880

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x2cbecb0

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 1]
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 1]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 1]
	float WorldToMeters;//[Offset: 0x240, Size: 1]
	float KillZ;//[Offset: 0x244, Size: 1]
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 1]
	float WorldGravityZ;//[Offset: 0x250, Size: 1]
	float GlobalGravityZ;//[Offset: 0x254, Size: 1]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 1]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 1]
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 1]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 1]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 1]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 1]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 1]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 1]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 1]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 1]
	float MonoCullingDistance;//[Offset: 0x2dc, Size: 1]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 1]
	float TimeDilation;//[Offset: 0x2e8, Size: 1]
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 1]
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 1]
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 1]
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 1]
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 1]
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 1]
	PlayerState* Pauser;//[Offset: 0x348, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 1]
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 1]
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 1]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 1]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 1]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 1]
	void OnRep_WorldGravityZ();// 0x1ef3000

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 1]
	byte RemoteRole;//[Offset: 0x5f, Size: 1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 1]
	float InitialLifeSpan;//[Offset: 0x94, Size: 1]
	float CustomTimeDilation;//[Offset: 0x98, Size: 1]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 1]
	Actor* Owner;//[Offset: 0xe0, Size: 1]
	FName NetDriverName;//[Offset: 0xe8, Size: 1]
	byte Role;//[Offset: 0xf0, Size: 1]
	byte NetDormancy;//[Offset: 0xf1, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 1]
	int InputPriority;//[Offset: 0xf4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 1]
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 1]
	int NetTag;//[Offset: 0x104, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x108, Size: 1]
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 1]
	float NetPriority;//[Offset: 0x110, Size: 1]
	Pawn* Instigator;//[Offset: 0x118, Size: 1]
	Actor*[] Children;//[Offset: 0x120, Size: 1]
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 1]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 1]
	FName[] Layers;//[Offset: 0x150, Size: 1]
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 1]
	FName[] Tags;//[Offset: 0x170, Size: 1]
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 1]
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 1]
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 1]
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 1]
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 1]
	delegate OnClicked;//[Offset: 0x187, Size: 1]
	delegate OnReleased;//[Offset: 0x188, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 1]
	delegate OnActorHit;//[Offset: 0x18d, Size: 1]
	delegate OnDestroyed;//[Offset: 0x18e, Size: 1]
	delegate OnEndPlay;//[Offset: 0x18f, Size: 1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 1]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x4445a30
	void UserConstructionScript();// 0x2cbecb0
	void TearOff();// 0x26fff70
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x4445970
	void SetTickGroup(byte NewTickGroup);// 0x4445860
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x44458e0
	void SetReplicates(bool bInReplicates);// 0x44457d0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x4445740
	void SetOwner(Actor* NewOwner);// 0x44456b0
	void SetNetDormancy(byte NewDormancy);// 0x4445630
	void SetLifeSpan(float InLifespan);// 0x44455b0
	void SetAutoDestroyWhenFinished(bool bVal);// 0x4445520
	void SetActorTickInterval(float TickInterval);// 0x44454a0
	void SetActorTickEnabled(bool bEnabled);// 0x4445410
	void SetActorScale3D(Vector NewScale3D);// 0x4445380
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x44452f0
	void SetActorHiddenInGame(bool bNewHidden);// 0x4445260
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x44451d0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4445140
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x44450b0
	void ReceiveTick(float DeltaSeconds);// 0x2cbecb0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x2cbecb0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x2cbecb0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x2cbecb0
	void ReceiveEndPlay(byte EndPlayReason);// 0x2cbecb0
	void ReceiveDestroyed();// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2cbecb0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x2cbecb0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x2cbecb0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x2cbecb0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x2cbecb0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x2cbecb0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x2cbecb0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x2cbecb0
	void ReceiveActorEndCursorOver();// 0x2cbecb0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x2cbecb0
	void ReceiveActorBeginCursorOver();// 0x2cbecb0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x4444fa0
	void OnRep_ReplicateMovement();// 0x2601810
	void OnRep_ReplicatedMovement();// 0x27cb0c0
	void OnRep_Owner();// 0xe706d0
	void OnRep_Instigator();// 0x2966ab0
	void OnRep_AttachmentReplication();// 0x2673a70
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x4444e10
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x4444d80
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x4444c90
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4444aa0
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x44449c0
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44447d0
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4444620
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4444470
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4444280
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44440d0
	void K2_OnReset();// 0x2cbecb0
	void K2_OnEndViewTarget(PlayerController* PC);// 0x2cbecb0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x2cbecb0
	SceneComponent* K2_GetRootComponent();// 0x2746530
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x4443ff0
	Rotator K2_GetActorRotation();// 0x4443f30
	Vector K2_GetActorLocation();// 0x4443eb0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4443db0
	void K2_DestroyComponent(ActorComponent* Component);// 0x4443d30
	void K2_DestroyActor();// 0xde4410
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4443b70
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x44439b0
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4443860
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4443710
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4443520
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4443370
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44431c0
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4442fd0
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4442e20
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4442c70
	bool IsOverlappingActor(const Actor* Other);// 0x4442be0
	bool IsNeutral(const Actor* pOther);// 0x4442b50
	bool IsFriendly(const Actor* pOther);// 0x4442ac0
	bool IsEnemy(const Actor* pOther);// 0x4442a30
	bool IsChildActor();// 0x4442a00
	bool IsActorTickEnabled();// 0x27df510
	bool IsActorBeingDestroyed();// 0x44429d0
	bool HasAuthority();// 0x44429a0
	bool HasATeam();// 0x4442960
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x44428c0
	Vector GetVelocity();// 0x4442880
	Transform GetTransform();// 0x4442830
	bool GetTickableWhenPaused();// 0x4442800
	int GetTeamNum();// 0x44427d0
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x4442730
	byte GetRemoteRole();// 0x4442710
	ChildActorComponent* GetParentComponent();// 0x44426e0
	Actor* GetParentActor();// 0x44426b0
	Actor* GetOwner();// 0x26de5d0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x4442600
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4442510
	byte GetLocalRole();// 0x44424f0
	float GetLifeSpan();// 0x44424b0
	Controller* GetInstigatorController();// 0x4442480
	Pawn* GetInstigator();// 0x4442450
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x4442350
	float GetInputAxisValue(const FName InputAxisName);// 0x44422b0
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x44421c0
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x4442120
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x4442080
	float GetGameTimeSinceCreation();// 0x4442050
	float GetDotProductTo(const Actor* OtherActor);// 0x4441fb0
	float GetDistanceTo(const Actor* OtherActor);// 0x4441f10
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x4441e10
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x4441d30
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x4441ca0
	FName GetAttachParentSocketName();// 0x4441b60
	Actor* GetAttachParentActor();// 0x4441b30
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x4441ba0
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x4441a30
	Vector GetActorUpVector();// 0x44419c0
	float GetActorTimeDilation();// 0x4441990
	float GetActorTickInterval();// 0x4441960
	Vector GetActorScale3D();// 0x4441920
	Vector GetActorRightVector();// 0x44418b0
	Vector GetActorRelativeScale3D();// 0x4441870
	Vector GetActorForwardVector();// 0x4441800
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x4441710
	bool GetActorEnableCollision();// 0x44416e0
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x4441560
	void ForceNetUpdate();// 0x291f750
	void FlushNetDormancy();// 0x4441540
	void EnableInput(PlayerController* PlayerController);// 0x3b5e170
	void DisableInput(PlayerController* PlayerController);// 0x44414b0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x4441420
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4441390
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4441300
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x4441140
	bool ActorHasTag(FName Tag);// 0x44410b0

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 1]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 1]
	FName DefaultAgentName;//[Offset: 0x44, Size: 1]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 1]
	FString SubPathString;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 1]
	float DestructibleImpulse;//[Offset: 0x30, Size: 1]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 1]
	float DamageFalloff;//[Offset: 0x38, Size: 1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 1]
	int Priority;//[Offset: 0x25c, Size: 1]
	float FluidFriction;//[Offset: 0x260, Size: 1]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 1]
	Color BrushColor;//[Offset: 0x224, Size: 1]
	int PolyFlags;//[Offset: 0x228, Size: 1]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 1]
	Model* Brush;//[Offset: 0x230, Size: 1]
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 1]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 1]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x430, Size: 1]
	BodySetup* BrushBodySetup;//[Offset: 0x438, Size: 1]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x210, Size: 1]
	float LDMaxDrawDistance;//[Offset: 0x214, Size: 1]
	float CachedMaxDrawDistance;//[Offset: 0x218, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x21c, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x21d, Size: 1]
	byte IndirectLightingCacheQuality;//[Offset: 0x21e, Size: 1]
	enum LightmapType;//[Offset: 0x21f, Size: 1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 1]
	bool bForceLocalLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x220, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x221, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x221, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x221, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x221, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x221, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x221, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x221, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x221, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x222, Size: 1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x222, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x222, Size: 1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x222, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x222, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x222, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x222, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x222, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x223, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x223, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x223, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x223, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x223, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x223, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x223, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x223, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 1]
	bool bShouldNotReceiveCapsuleShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x225, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x225, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x225, Size: 1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x225, Size: 1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x225, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x225, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x225, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x225, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x226, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x226, Size: 1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x226, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x226, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x226, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x226, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x226, Size: 1]
	bool bExcludeFromContributionCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x226, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x228, Size: 1]
	byte OutlineDepthMode;//[Offset: 0x229, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x22b, Size: 1]
	byte ForwardDirectionalLightIndex;//[Offset: 0x22c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x22d, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x22e, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x230, Size: 1]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x238, Size: 1]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x248, Size: 1]
	int TranslucencySortPriority;//[Offset: 0x260, Size: 1]
	int VisibilityId;//[Offset: 0x264, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x268, Size: 1]
	int8 VirtualTextureLodBias;//[Offset: 0x278, Size: 1]
	int8 VirtualTextureCullMips;//[Offset: 0x279, Size: 1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x27a, Size: 1]
	enum VirtualTextureRenderPassType;//[Offset: 0x27b, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x280, Size: 1]
	float OutlineThicknessMultiplier;//[Offset: 0x284, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x288, Size: 1]
	float OutlineZFadeMin;//[Offset: 0x298, Size: 1]
	float OutlineZFadeMax;//[Offset: 0x29c, Size: 1]
	float BoundsScale;//[Offset: 0x2a8, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x2b8, Size: 1]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2c8, Size: 1]
	BodyInstance BodyInstance;//[Offset: 0x2e8, Size: 1]
	delegate OnComponentHit;//[Offset: 0x3f8, Size: 1]
	delegate OnComponentBeginOverlap;//[Offset: 0x3f9, Size: 1]
	delegate OnComponentEndOverlap;//[Offset: 0x3fa, Size: 1]
	delegate OnComponentWake;//[Offset: 0x3fb, Size: 1]
	delegate OnComponentSleep;//[Offset: 0x3fc, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x3fe, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x3ff, Size: 1]
	delegate OnClicked;//[Offset: 0x400, Size: 1]
	delegate OnReleased;//[Offset: 0x401, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x402, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x403, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x404, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x405, Size: 1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x420, Size: 1]
	float CustomFOV;//[Offset: 0x428, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x456c640
	void WakeRigidBody(FName BoneName);// 0x29362c0
	void WakeAllRigidBodies();// 0x1f121c0
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x456c590
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x456c4c0
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x456c440
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x456c3b0
	void SetSimulatePhysics(bool bSimulate);// 0x456c320
	void SetRenderInMainPass(bool bValue);// 0x456c290
	void SetRenderCustomDepth(bool bValue);// 0x456c200
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x456c170
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x456bb30
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x456c060
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x456bf50
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x456bf50
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x456be30
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x456bd10
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x456bbc0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x456bbc0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x456baa0
	void SetOutlineZFadeMin(const float InOutlineZFadeMin);// 0x456ba20
	void SetOutlineZFadeMax(const float InOutlineZFadeMax);// 0x456b9a0
	void SetOutlineThicknessMultiplier(const float InThicknessMultiplier);// 0x456b920
	void SetOutlineDepthMode(byte InOutlineDepthMode);// 0x456b8a0
	void SetOutlineColor(out const LinearColor InColor);// 0x456b810
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x456b780
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x1efd820
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x456b6b0
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xe7eb50
	void SetMassScale(FName BoneName, float InMassScale);// 0x456b5e0
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x456b4e0
	void SetLinearDamping(float InDamping);// 0x27a61b0
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x456b3c0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x456b330
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x456b2a0
	void SetForwardDirectionalLightIndex(byte Index);// 0x456b220
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x456b190
	void SetEnableGravity(bool bGravityEnabled);// 0x456b100
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x456b030
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x456af60
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x456aea0
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x456add0
	void SetCustomFOV(float NewFOV);// 0x2767d70
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x456ad50
	void SetCustomDepthStencilValue(int Value);// 0x456acd0
	void SetCullDistance(float NewCullDistance);// 0x456ac50
	void SetConstraintMode(byte ConstraintMode);// 0x456abd0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x456ab10
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x456aa90
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x456a9c0
	void SetCollisionObjectType(byte Channel);// 0x456a940
	void SetCollisionEnabled(byte NewType);// 0x456a8c0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x456a7f0
	void SetCastShadow(bool NewCastShadow);// 0x456a760
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x456a6d0
	void SetBoundsScale(float NewBoundsScale);// 0x456a650
	void SetAngularDamping(float InDamping);// 0x2791cc0
	void SetAllUseCCD(bool InUseCCD);// 0x45555f0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x456a570
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x456a490
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x456a370
	void SetAllMassScale(float InMassScale);// 0x456a2f0
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x456a1f0
	void PutRigidBodyToSleep(FName BoneName);// 0x456a170
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4569e00
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4569ad0
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x45697a0
	bool K2_IsQueryCollisionEnabled();// 0x4569760
	bool K2_IsPhysicsCollisionEnabled();// 0x4569720
	bool K2_IsCollisionEnabled();// 0x45696e0
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x45693a0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x4569310
	bool IsOverlappingActor(const Actor* Other);// 0x4569280
	bool IsGravityEnabled();// 0x275b250
	bool IsAnyRigidBodyAwake();// 0x26c0650
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x45691b0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x45690e0
	void HideOutline();// 0x45690c0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x4569090
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x4568fa0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x4568f00
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x4568e60
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x4568d90
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x4568d90
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x4568ce0
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4568bf0
	int GetNumMaterials();// 0x4568bc0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x4568ae0
	MaterialInterface* GetMaterial(int ElementIndex);// 0x4568a40
	float GetMassScale(FName BoneName);// 0x45689a0
	float GetMass();// 0x4568960
	float GetLinearDamping();// 0x4568920
	Vector GetInertiaTensor(FName BoneName);// 0x4568870
	bool GetGenerateOverlapEvents();// 0x4568840
	byte GetCollisionResponseToChannel(byte Channel);// 0x45687b0
	FName GetCollisionProfileName();// 0x4568770
	byte GetCollisionObjectType();// 0xe7edc0
	byte GetCollisionEnabled();// 0xe7ee90
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x4568630
	Vector GetCenterOfMass(FName BoneName);// 0x4568590
	float GetAngularDamping();// 0x4568550
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x4568440
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x4568370
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x45682d0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x4568250
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x45681d0
	void ClearMoveIgnoreComponents();// 0x45681a0
	void ClearMoveIgnoreActors();// 0x4568180
	bool CanCharacterStepUp(Pawn* Pawn);// 0x45680e0
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x4567e70
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x4567f90
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x4567e70
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4567cb0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x4567af0
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x45679c0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x45678a0
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x4567770
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x4567640
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x4567520
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x4567400
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x45672b0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4567190

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 1]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 1]
	FName AttachSocketName;//[Offset: 0xc8, Size: 1]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 1]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 1]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 1]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 1]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 1]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 1]
	byte Mobility;//[Offset: 0x14f, Size: 1]
	byte DetailMode;//[Offset: 0x150, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x4579b40
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x4579a80
	void SetWorldScale3D(Vector NewScale);// 0x45798a0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x45797d0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x4579740
	void SetRelativeScale3D(Vector NewScale3D);// 0x45796b0
	void SetMobility(byte NewMobility);// 0x4579630
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x4579560
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x45793c0
	void ResetRelativeTransform();// 0x45793a0
	void OnRep_Visibility(bool OldValue);// 0x45791c0
	void OnRep_Transform();// 0x45791a0
	void OnRep_AttachSocketName();// 0x4579180
	void OnRep_AttachParent();// 0x4579180
	void OnRep_AttachChildren();// 0x4579160
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4578f70
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4578dc0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4578be0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4578a30
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4578840
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4578690
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x45784b0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4578300
	Transform K2_GetComponentToWorld();// 0x45782a0
	Vector K2_GetComponentScale();// 0x4578260
	Rotator K2_GetComponentRotation();// 0x4578220
	Vector K2_GetComponentLocation();// 0x45781e0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x4578090
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4577ee0
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x4577d90
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4577ba0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x45779f0
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4577840
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4577690
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x45774e0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x45772f0
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4577140
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4576f90
	bool IsVisible();// 0x4576f60
	bool IsSimulatingPhysics(FName BoneName);// 0x27676b0
	bool IsAnySimulatingPhysics();// 0x4576f30
	Vector GetUpVector();// 0x4576da0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x4576ca0
	Rotator GetSocketRotation(FName InSocketName);// 0x4576bf0
	Quat GetSocketQuaternion(FName InSocketName);// 0x4576b50
	Vector GetSocketLocation(FName InSocketName);// 0x4576aa0
	bool GetShouldUpdatePhysicsVolume();// 0x4576a70
	Vector GetRightVector();// 0x4576a30
	Transform GetRelativeTransform();// 0x45769d0
	PhysicsVolume* GetPhysicsVolume();// 0x45769a0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x45768f0
	int GetNumChildrenComponents();// 0x45768c0
	Vector GetForwardVector();// 0x45549a0
	Vector GetComponentVelocity();// 0x4576880
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x4576780
	SceneComponent* GetChildComponent(int ChildIndex);// 0x45766f0
	FName GetAttachSocketName();// 0x2688840
	SceneComponent* GetAttachParent();// 0x26c7810
	FName[] GetAllSocketNames();// 0x4576670
	bool DoesSocketExist(FName InSocketName);// 0x45765d0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x4576500

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 1]
	enum CreationMethod;//[Offset: 0x8c, Size: 1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 1]
	void ToggleActive();// 0xe706d0
	void SetTickGroup(byte NewTickGroup);// 0x4449320
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x44493a0
	void SetIsReplicated(bool ShouldReplicate);// 0x4449290
	void SetComponentTickInterval(float TickInterval);// 0x4449210
	void SetComponentTickEnabled(bool bEnabled);// 0x4449180
	void SetAutoActivate(bool bNewAutoActivate);// 0x4445740
	void SetActive(bool bNewActive, bool bReset);// 0x44490b0
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4449020
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4448f90
	void ReceiveTick(float DeltaSeconds);// 0x2cbecb0
	void ReceiveEndPlay(byte EndPlayReason);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void OnRep_IsActive();// 0x2601810
	void K2_DestroyComponent(Object* Object);// 0x4448e90
	bool IsComponentTickEnabled();// 0x4448e60
	bool IsBeingDestroyed();// 0x4448e30
	bool IsActive();// 0x4448e00
	Actor* GetOwner();// 0x27d4cf0
	float GetComponentTickInterval();// 0x4448dd0
	void Deactivate();// 0x2791ca0
	bool ComponentHasTag(FName Tag);// 0x4448bc0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4448a70
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x44489e0
	void Activate(bool bReset);// 0x3b75b80

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x80, Size: 1]
	byte PhysicsType;//[Offset: 0x88, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 1]
	Vector BuildScale3D;//[Offset: 0x238, Size: 1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 1]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 1]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 1]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 1]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	float Radius;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 1]
	FName Name;//[Offset: 0xc, Size: 1]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float X;//[Offset: 0x48, Size: 1]
	float Y;//[Offset: 0x4c, Size: 1]
	float Z;//[Offset: 0x50, Size: 1]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 1]
	float Yaw;//[Offset: 0x4, Size: 1]
	float Roll;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius;//[Offset: 0x48, Size: 1]
	float Length;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 1]
	int[] IndexData;//[Offset: 0x40, Size: 1]
	Box ElemBox;//[Offset: 0x50, Size: 1]
	Transform Transform;//[Offset: 0x70, Size: 1]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 1]
	Vector Max;//[Offset: 0xc, Size: 1]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 1]
	Vector Translation;//[Offset: 0x10, Size: 1]
	Vector Scale3D;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius0;//[Offset: 0x48, Size: 1]
	float Radius1;//[Offset: 0x4c, Size: 1]
	float Length;//[Offset: 0x50, Size: 1]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 1]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float Restitution;//[Offset: 0x30, Size: 1]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float Density;//[Offset: 0x38, Size: 1]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 1]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 1]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 1]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	float TireFrictionScale;//[Offset: 0x54, Size: 1]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 1]
	float FrictionScale;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 1]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 1]
	enum SleepFamily;//[Offset: 0xa, Size: 1]
	byte DOFMode;//[Offset: 0xb, Size: 1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 1]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 1]
	float MassInKgOverride;//[Offset: 0x5c, Size: 1]
	float LinearDamping;//[Offset: 0x68, Size: 1]
	float AngularDamping;//[Offset: 0x6c, Size: 1]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 1]
	Vector COMNudge;//[Offset: 0x7c, Size: 1]
	float MassScale;//[Offset: 0x88, Size: 1]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 1]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 1]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 1]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 1]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 1]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 1]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 1]
	float G;//[Offset: 0x4, Size: 1]
	float B;//[Offset: 0x8, Size: 1]
	float A;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 1]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 1]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x45356a0
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x125c220
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0xe78bc0
	PhysicalMaterial* GetPhysicalMaterial();// 0x3b75300
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x45353e0
	Material* GetBaseMaterial();// 0x4535210

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 1]
	byte AddressX;//[Offset: 0x2c, Size: 1]
	byte AddressY;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 1]
	int B;//[Offset: 0x4, Size: 1]
	int C;//[Offset: 0x8, Size: 1]
	int D;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 1]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 1]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 1]
	float WorldUnitScale;//[Offset: 0x24, Size: 1]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ScatterRadius;//[Offset: 0x2c, Size: 1]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 1]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 1]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 1]
	float ExtinctionScale;//[Offset: 0x60, Size: 1]
	float NormalScale;//[Offset: 0x64, Size: 1]
	float ScatteringDistribution;//[Offset: 0x68, Size: 1]
	float IOR;//[Offset: 0x6c, Size: 1]
	float Roughness0;//[Offset: 0x70, Size: 1]
	float Roughness1;//[Offset: 0x74, Size: 1]
	float LobeMix;//[Offset: 0x78, Size: 1]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 1]
	byte Association;//[Offset: 0x8, Size: 1]
	int Index;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 1]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 1]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 1]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 1]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 1]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 1]
	byte MaterialDomain;//[Offset: 0x150, Size: 1]
	byte BlendMode;//[Offset: 0x151, Size: 1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 1]
	byte ShadingModel;//[Offset: 0x154, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 1]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 1]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 1]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 1]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 1]
	bool bEnableTranslucencyAfterRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c8, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c8, Size: 1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c8, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c8, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c8, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c8, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c8, Size: 1]
	byte TranslucencyLightingMode;//[Offset: 0x1c9, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ca, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x1cc, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1d0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x1d4, Size: 1]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d8, Size: 1]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1dc, Size: 1]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1e0, Size: 1]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e4, Size: 1]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e8, Size: 1]
	float TranslucentShadowStartOffset;//[Offset: 0x1f8, Size: 1]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bShouldRenderTranslucentOutline;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fd, Size: 1]
	bool bUsedWithVertexCurvature;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fd, Size: 1]
	bool bUsedWithBlurredNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fd, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ff, Size: 1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 1]
	bool bUseHalfRateCheckerboardRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 1]
	bool bOnlyDirectionalLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bUseHQForwardReflectionsOnLowEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x215, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 1]
	byte ShadingRate;//[Offset: 0x217, Size: 1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x219, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x219, Size: 1]
	byte BlendableLocation;//[Offset: 0x21a, Size: 1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21b, Size: 1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21b, Size: 1]
	byte StencilCompare;//[Offset: 0x21c, Size: 1]
	byte StencilRefValue;//[Offset: 0x21d, Size: 1]
	byte RefractionMode;//[Offset: 0x21e, Size: 1]
	int BlendablePriority;//[Offset: 0x220, Size: 1]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x228, Size: 1]
	float RefractionDepthBias;//[Offset: 0x22c, Size: 1]
	Guid StateId;//[Offset: 0x230, Size: 1]
	float MaxDisplacement;//[Offset: 0x240, Size: 1]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2d0, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName ExpressionName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName ExpressionName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 1]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 1]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 1]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 1]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 1]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 1]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 1]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 1]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 5]
	float[] ScalarValues;//[Offset: 0x140, Size: 1]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 1]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 1]
	Font*[] FontValues;//[Offset: 0x170, Size: 1]
	int[] FontPageValues;//[Offset: 0x180, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 1]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 1]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 1]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 1]
	bool[] Overrides;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 1]
	int LODBias;//[Offset: 0x58, Size: 1]
	byte CompressionSettings;//[Offset: 0x5c, Size: 1]
	byte Filter;//[Offset: 0x5d, Size: 1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 1]
	byte LODGroup;//[Offset: 0x5f, Size: 1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 1]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 1]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 1]
	int StreamingIndex;//[Offset: 0x34, Size: 1]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 1]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 1]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 1]
	int IsRemapped;//[Offset: 0x58, Size: 1]
	float EmScale;//[Offset: 0x5c, Size: 1]
	float Ascent;//[Offset: 0x60, Size: 1]
	float Descent;//[Offset: 0x64, Size: 1]
	float Leading;//[Offset: 0x68, Size: 1]
	int Kerning;//[Offset: 0x6c, Size: 1]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 1]
	int NumCharacters;//[Offset: 0x120, Size: 1]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 1]
	float ScalingFactor;//[Offset: 0x138, Size: 1]
	int LegacyFontSize;//[Offset: 0x13c, Size: 1]
	FName LegacyFontName;//[Offset: 0x140, Size: 1]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 1]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 1]
	int StartV;//[Offset: 0x4, Size: 1]
	int USize;//[Offset: 0x8, Size: 1]
	int VSize;//[Offset: 0xc, Size: 1]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 1]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 1]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	byte AddressX;//[Offset: 0xc1, Size: 1]
	byte AddressY;//[Offset: 0xc2, Size: 1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 1]
	int Blueprint_GetSizeY();// 0x45a1cb0
	int Blueprint_GetSizeX();// 0x45a1c80

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 1]
	float Height;//[Offset: 0x10, Size: 1]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x18, Size: 1]
	FString Chars;//[Offset: 0x20, Size: 1]
	FString UnicodeRange;//[Offset: 0x30, Size: 1]
	FString CharsFilePath;//[Offset: 0x40, Size: 1]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 1]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 1]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	int TexturePageWidth;//[Offset: 0x78, Size: 1]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 1]
	int XPadding;//[Offset: 0x80, Size: 1]
	int YPadding;//[Offset: 0x84, Size: 1]
	int ExtendBoxTop;//[Offset: 0x88, Size: 1]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 1]
	int ExtendBoxRight;//[Offset: 0x90, Size: 1]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 1]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int Kerning;//[Offset: 0x9c, Size: 1]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 1]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 1]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 1]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 1]
	FontData Font;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 1]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	int SubFaceIndex;//[Offset: 0x14, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 1]
	float ScalingFactor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 1]
	FString Cultures;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 1]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	int Size;//[Offset: 0x30, Size: 1]
	int TileCount;//[Offset: 0x34, Size: 1]
	int TileSize;//[Offset: 0x38, Size: 1]
	int TileBorderSize;//[Offset: 0x3c, Size: 1]
	int StreamLowMips;//[Offset: 0x40, Size: 1]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int RemoveLowMips;//[Offset: 0x54, Size: 1]
	int GetTileSize();// 0x4573f80
	int GetTileCount();// 0x4573f40
	int GetTileBorderSize();// 0x4573f00
	int GetSize();// 0x4573e90

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xe8, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	uint32 BuildHash;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 1]
	int TileBorderSize;//[Offset: 0x4, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 1]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 1]
	Guid ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 1]
	float GrassDensity;//[Offset: 0x48, Size: 1]
	float PlacementJitter;//[Offset: 0x4c, Size: 1]
	int StartCullDistance;//[Offset: 0x50, Size: 1]
	int EndCullDistance;//[Offset: 0x54, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 1]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 1]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float PlacementJitter;//[Offset: 0x10, Size: 1]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 1]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 1]
	int MinLOD;//[Offset: 0x1c, Size: 1]
	enum Scaling;//[Offset: 0x20, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 1]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 1]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x60, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x64, Size: 1]
	StaticMaterial[] StaticMaterials;//[Offset: 0x68, Size: 1]
	float LightmapUVDensity;//[Offset: 0x78, Size: 1]
	int LightMapResolution;//[Offset: 0x7c, Size: 1]
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0x84, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 1]
	FName DefaultCreationCollisionProfileName;//[Offset: 0x90, Size: 1]
	int LODForCollision;//[Offset: 0x98, Size: 1]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9c, Size: 1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xc0, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xe0, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0xec, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xf8, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x114, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x118, Size: 1]
	Object* EditableMesh;//[Offset: 0x130, Size: 1]
	NavCollisionBase* NavCollision;//[Offset: 0x138, Size: 1]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x459a8e0
	int GetNumSections(int InLOD);// 0x459a630
	int GetNumLODs();// 0x459a600
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x459a4e0
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x459a460
	int GetMaterialIndex(FName MaterialSlotName);// 0x459a3d0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x459a340
	BoxSphereBounds GetBounds();// 0x459a190
	Box GetBoundingBox();// 0x459a140
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x459a050
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x4599fd0
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x4599ed0
	void AddSocket(StaticMeshSocket* Socket);// 0x4599e50
	FName AddMaterial(MaterialInterface* Material);// 0x4599dc0

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	Vector RelativeLocation;//[Offset: 0x30, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 1]
	Vector RelativeScale;//[Offset: 0x48, Size: 1]
	FString Tag;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 1]
	Vector BoxExtent;//[Offset: 0xc, Size: 1]
	float SphereRadius;//[Offset: 0x18, Size: 1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x3c6b440
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x3c6b360
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x3c6b290
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x3c6af60

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x3c62da0
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x3c62c90
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x3c62bd0
	void ReversePolygonFacing(PolygonID PolygonID);// 0x3c62b50
	void ReserveNewVertices(int NumberOfNewVertices);// 0x3c62ad0
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x3c628d0
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x3c62a50
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x3c629d0
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x3c62950
	void ReserveNewEdges(int NumberOfNewEdges);// 0x3c628d0
	bool IsVertexValid(VertexID VertexID);// 0x3c62840
	bool IsVertexOrphaned(VertexID VertexID);// 0x3c627b0
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x3c62720
	bool IsTriangleValid(const TriangleID TriangleID);// 0x3c62690
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x3c62600
	bool IsPolygonValid(PolygonID PolygonID);// 0x3c62570
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x3c624e0
	bool IsEmpty();// 0x3c624b0
	bool IsEdgeValid(EdgeID EdgeID);// 0x3c62420
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x3c62350
	bool IsEdgeInternal(EdgeID EdgeID);// 0x3c622c0
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3c621d0
	Vector GetVertexPosition(VertexID VertexID);// 0x3c62130
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x3c62060
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x3c61fc0
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x3c61ef0
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x3c61e20
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x3c61d50
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x3c61c60
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x3c61b70
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x3c61a80
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x3c61990
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x3c618a0
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x3c617b0
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x3c616c0
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3c615d0
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x3c61500
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x3c61460
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x3c613c0
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x3c612d0
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x3c611e0
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x3c610f0
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3c61000
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x3c60f10
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x3c60e70
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x3c60d80
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x3c60c90
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x3c60ba0
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x3c60ab0
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x3c60a20
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x3c60990
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x3c60900
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x3c60870
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x3c607e0
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x3c60750
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x3c606c0
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x3c60630
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x3c605a0
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x3c60510
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x3c60480
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x3c603f0
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x3c60300
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x3c60230
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x3c60140
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x3c60050
	void Empty();// 0x3c60030
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x3c5ff40
	void DeleteVertex(VertexID VertexID);// 0x3c5fec0
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x3c5fd00
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x3c5fc80
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x3c5fac0
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x3c5f9d0
	void CreateVertexWithID(VertexID VertexID);// 0x3c5f950
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x3c5f890
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x3c5f7f0
	VertexID CreateVertex();// 0x3c5f7b0
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3c5f610
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3c5f4a0
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3c5f300
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x3c5f280
	PolygonGroupID CreatePolygonGroup();// 0x3c5f240
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3c5f0d0
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x3c5efc0
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x3c5eef0
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x3c5ee70

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 1]
	float DiffuseBoost;//[Offset: 0x4, Size: 1]
	float ExportResolutionScale;//[Offset: 0x8, Size: 1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 1]
	int UVChannelIndex;//[Offset: 0x4, Size: 1]
	FName TextureName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	float TickInterval;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 1]
	FName MemberName;//[Offset: 0x8, Size: 1]
	Guid MemberGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	int FaceIndex;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]
	float Distance;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 1]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 1]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 1]
	float PenetrationDepth;//[Offset: 0x58, Size: 1]
	int Item;//[Offset: 0x5c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 1]
	Actor* Actor;//[Offset: 0x68, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 1]
	FName BoneName;//[Offset: 0x78, Size: 1]
	FName MyBoneName;//[Offset: 0x80, Size: 1]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x4532b50
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x4532a80
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x4532990
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x45328d0
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x45327d0
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x4532700
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x45325f0
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x4532530
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x4532490
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x4532340
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x45322b0
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x4532160
	float K2_GetScalarParameterValue(FName ParameterName);// 0x45320c0
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x4531f50
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x4531ed0
	void CopyInterpParameters(MaterialInstance* Source);// 0x4531e50

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 1]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 1]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 1]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 1]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 1]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 1]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 1]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 1]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	float ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Texture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Font* FontValue;//[Offset: 0x10, Size: 1]
	int FontPage;//[Offset: 0x18, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_MaterialSSR;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool MaterialSSR;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_HQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool HQForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	byte BlendMode;//[Offset: 0x2, Size: 1]
	byte ShadingModel;//[Offset: 0x3, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 1]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 1]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 1]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 1]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 1]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 1]
	bool[] LayerStates;//[Offset: 0x20, Size: 1]
	FString KeyString;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 1]
	float BaseEyeHeight;//[Offset: 0x22c, Size: 1]
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 1]
	enum AutoPossessAI;//[Offset: 0x231, Size: 1]
	byte RemoteViewPitch;//[Offset: 0x232, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x240, Size: 1]
	Controller* LastHitBy;//[Offset: 0x250, Size: 1]
	Controller* Controller;//[Offset: 0x258, Size: 1]
	Vector ControlInputVector;//[Offset: 0x264, Size: 1]
	Vector LastControlInputVector;//[Offset: 0x270, Size: 1]
	void SpawnDefaultController();// 0x1f2b150
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x454ea10
	void ReceiveUnpossessed(Controller* OldController);// 0x2cbecb0
	void ReceivePossessed(Controller* NewController);// 0x2cbecb0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x454e8a0
	void OnRep_PlayerState();// 0xcf5e70
	void OnRep_Controller();// 0x1efdc40
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x454e660
	Vector K2_GetMovementInputVector();// 0x454e560
	bool IsPlayerControlled();// 0x26bc230
	bool IsPawnControlled();// 0x454e630
	bool IsMoveInputIgnored();// 0x454e5d0
	bool IsLocallyControlled();// 0x26bc260
	bool IsControlled();// 0x454e5a0
	bool IsBotControlled();// 0x2683f00
	Vector GetPendingMovementInputVector();// 0x454e560
	Vector GetNavAgentLocation();// 0x454e4a0
	PawnMovementComponent* GetMovementComponent();// 0x448aeb0
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x454e420
	Vector GetLastMovementInputVector();// 0x266e8d0
	Rotator GetControlRotation();// 0x454e380
	Controller* GetController();// 0x454e3c0
	Rotator GetBaseAimRotation();// 0x454e280
	void DetachFromControllerPendingDestroy();// 0x1f125c0
	Vector ConsumeMovementInputVector();// 0x454e240
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x454dd80
	void AddControllerYawInput(float Val);// 0x454dc20
	void AddControllerRollInput(float Val);// 0x454dba0
	void AddControllerPitchInput(float Val);// 0x2767420

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnInstigatedAnyDamage;//[Size: 1]
	FName StateName;//[Offset: 0x248, Size: 1]
	Pawn* Pawn;//[Offset: 0x250, Size: 1]
	Character* Character;//[Offset: 0x260, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 1]
	Rotator ControlRotation;//[Offset: 0x288, Size: 1]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	void UnPossess();// 0x4487e80
	void StopMovement();// 0x1f12820
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x4487d90
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x275f290
	void SetIgnoreLookInput(bool bNewLookInput);// 0x4487d00
	void SetControlRotation(out const Rotator NewRotation);// 0x4487c70
	void ResetIgnoreMoveInput();// 0x1f11f70
	void ResetIgnoreLookInput();// 0x1f12780
	void ResetIgnoreInputFlags();// 0x1f2b430
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x2cbecb0
	void ReceivePossess(Pawn* PossessedPawn);// 0x2cbecb0
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x2cbecb0
	void Possess(Pawn* InPawn);// 0x4487bf0
	void OnRep_PlayerState();// 0x1ef3f90
	void OnRep_Pawn();// 0xcf5e70
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x4487ad0
	Pawn* K2_GetPawn();// 0x4487aa0
	bool IsPlayerController();// 0x4487a70
	bool IsMoveInputIgnored();// 0x27af830
	bool IsLookInputIgnored();// 0x4487a40
	bool IsLocalPlayerController();// 0x44879f0
	bool IsLocalController();// 0x44879c0
	Actor* GetViewTarget();// 0x4487990
	Rotator GetDesiredRotation();// 0x44875c0
	Rotator GetControlRotation();// 0x4487350
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x44871d0
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x44870f0
	PlayerController* CastToPlayerController();// 0x44870c0

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 1]
	int PlayerId;//[Offset: 0x224, Size: 1]
	byte Ping;//[Offset: 0x228, Size: 1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 1]
	int StartTime;//[Offset: 0x22c, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 1]
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 1]
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 1]
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 1]
	FString PlayerNamePrivate;//[Offset: 0x300, Size: 1]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x2cbecb0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x2cbecb0
	void OnRep_UniqueId();// 0xcf5d10
	void OnRep_Score();// 0x1ef3000
	void OnRep_PlayerName();// 0x1eef160
	void OnRep_PlayerId();// 0x1ef10a0
	void OnRep_bIsInactive();// 0x1ef10c0
	FString GetPlayerName();// 0x4563d20

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 1]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 1]
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 1]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 1]
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 1]
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 1]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 1]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 1]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 1]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 1]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 1]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 1]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 1]
	int JumpMaxCount;//[Offset: 0x344, Size: 1]
	int JumpCurrentCount;//[Offset: 0x348, Size: 1]
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 1]
	MulticastInlineDelegateProperty OnReachedJumpApex;//[Size: 1]
	MulticastInlineDelegateProperty MovementModeChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterMovementUpdated;//[Size: 1]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 1]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 1]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 1]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 1]
	void UnCrouch(bool bClientSimulation);// 0x447d9a0
	void StopJumping();// 0x1f2b8d0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x447d910
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x447d470
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x447d1f0
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x447ce30
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x447c9e0
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x447c590
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x447c280
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x447c1e0
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x447c050
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x447be90
	void OnRep_RootMotion();// 0x447be70
	void OnRep_ReplicatedBasedMovement();// 0x1ef40d0
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x447be50
	void OnRep_IsCrouched();// 0x1f2b9b0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2cbecb0
	void OnLanded(out const HitResult Hit);// 0x2cbecb0
	void OnJumped();// 0x1f2b690
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x447bd30
	void K2_UpdateCustomMovement(float DeltaTime);// 0x2cbecb0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2cbecb0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x2cbecb0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2cbecb0
	void Jump();// 0x1f2b930
	bool IsPlayingRootMotion();// 0x447a660
	bool IsPlayingNetworkedRootMotionMontage();// 0x447a630
	bool IsJumpProvidingForce();// 0x447a600
	bool HasAnyRootMotion();// 0x447a5d0
	AnimMontage* GetCurrentMontage();// 0x4479f60
	Vector GetBaseTranslationOffset();// 0x4479f30
	Rotator GetBaseRotationOffsetRotator();// 0x4479ee0
	float GetAnimRootMotionTranslationScale();// 0x4479e10
	void Crouch(bool bClientSimulation);// 0x4479d80
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4479a30
	void ClientCheatWalk();// 0x1ef3f10
	void ClientCheatGhost();// 0x1eef180
	void ClientCheatFly();// 0x1ef3940
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4479590
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x44792a0
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4479030
	void ClientAckGoodMove(float Timestamp);// 0x4478fb0
	bool CanJumpInternal();// 0x4478f80
	bool CanJump();// 0x4478f50
	bool CanCrouch();// 0x4478f20
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x4478e40

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x670, Size: 1]
	class AnimInstance* AnimClass;//[Offset: 0x678, Size: 1]
	AnimInstance* AnimScriptInstance;//[Offset: 0x680, Size: 1]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x688, Size: 1]
	SingleAnimationPlayData AnimationData;//[Offset: 0x690, Size: 1]
	Vector RootBoneTranslation;//[Offset: 0x6b8, Size: 1]
	Vector LineCheckBoundsScale;//[Offset: 0x6c4, Size: 1]
	AnimInstance*[] LinkedInstances;//[Offset: 0x710, Size: 1]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x720, Size: 1]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x730, Size: 1]
	float GlobalAnimRateScale;//[Offset: 0x760, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x764, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x765, Size: 1]
	byte AnimationMode;//[Offset: 0x767, Size: 1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x769, Size: 1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x769, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x769, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x769, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x769, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76a, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76a, Size: 1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76a, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76a, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76a, Size: 1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76b, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76b, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76b, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76b, Size: 1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x76b, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76b, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x76b, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76c, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76c, Size: 1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76c, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76c, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76c, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x76c, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76c, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x76c, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76d, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76d, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76d, Size: 1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76d, Size: 1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76d, Size: 1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x76d, Size: 1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76d, Size: 1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x76d, Size: 1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76e, Size: 1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76e, Size: 1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76e, Size: 1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76e, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x770, Size: 1]
	enum MassMode;//[Offset: 0x772, Size: 1]
	float UniformMass;//[Offset: 0x774, Size: 1]
	float TotalMass;//[Offset: 0x778, Size: 1]
	float Density;//[Offset: 0x77c, Size: 1]
	float MinPerParticleMass;//[Offset: 0x780, Size: 1]
	float ClothBlendWeight;//[Offset: 0x784, Size: 1]
	float EdgeStiffness;//[Offset: 0x788, Size: 1]
	float BendingStiffness;//[Offset: 0x78c, Size: 1]
	float AreaStiffness;//[Offset: 0x790, Size: 1]
	float VolumeStiffness;//[Offset: 0x794, Size: 1]
	float StrainLimitingStiffness;//[Offset: 0x798, Size: 1]
	float ShapeTargetStiffness;//[Offset: 0x79c, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x7a0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x7b0, Size: 1]
	MulticastInlineDelegateProperty OnConstraintBroken;//[Size: 1]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x7d0, Size: 1]
	float TeleportDistanceThreshold;//[Offset: 0x8a8, Size: 1]
	float TeleportRotationThreshold;//[Offset: 0x8ac, Size: 1]
	uint32 LastPoseTickFrame;//[Offset: 0x8b8, Size: 1]
	bool bDelayedAnimTaskValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bDisableDelayedAnimTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x920, Size: 1]
	MulticastInlineDelegateProperty OnAnimInitialized;//[Size: 1]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x4582630
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x45825a0
	void ToggleDisablePostProcessBlueprint();// 0x4582580
	void TermBodiesBelow(FName ParentBoneName);// 0x4582500
	void SuspendClothingSimulation();// 0x45824e0
	void Stop();// 0x45824c0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x45823f0
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x4582360
	void SetTeleportRotationThreshold(float Threshold);// 0x45822e0
	void SetTeleportDistanceThreshold(float Threshold);// 0x4582260
	void SetPosition(float InPos, bool bFireNotifies);// 0x4582190
	void SetPlayRate(float Rate);// 0x4582110
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x4582090
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x4581f80
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x4581e70
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x4581de0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x4581cd0
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x4581c10
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x4581b80
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x4581af0
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x4581a20
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x4581910
	void SetClothMaxDistanceScale(float Scale);// 0x4581890
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x45817c0
	void SetAnimClass(class Object NewClass);// 0x4581630
	void SetAnimationMode(byte InAnimationMode);// 0x4581740
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x45816c0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x45814e0
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x4581310
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x45813e0
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x4581280
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4581160
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4581040
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x4580ee0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x4580e50
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4580d80
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x4580c60
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x4580af0
	void ResumeClothingSimulation();// 0x4580ad0
	void ResetClothTeleportMode();// 0x4580ab0
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x4580a30
	void ResetAllowedAnimCurveEvaluation();// 0x4580a10
	void ResetAllBodiesSimulatePhysics();// 0x45809f0
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x4580920
	void Play(bool bLooping);// 0x4580890
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x45806f0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x4580630
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x45805b0
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x45803b0
	bool IsPlaying();// 0x4580380
	bool IsClothingSimulationSuspended();// 0x4580350
	bool IsBodyGravityEnabled(FName BoneName);// 0x45802c0
	bool HasValidAnimationInstance();// 0x4580290
	float GetTeleportRotationThreshold();// 0x4580260
	float GetTeleportDistanceThreshold();// 0x4580230
	Vector GetSkeletalCenterOfMass();// 0x45801f0
	AnimInstance* GetPostProcessInstance();// 0x45801c0
	float GetPosition();// 0x4580190
	float GetPlayRate();// 0x4580160
	float GetMorphTarget(FName MorphTargetName);// 0x45800c0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x4580030
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x457ffa0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x457feb0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x457fe20
	bool GetDisablePostProcessBlueprint();// 0x457fdf0
	bool GetDisableAnimCurves();// 0x457fdc0
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x457fc40
	float GetClothMaxDistanceScale();// 0x457fbe0
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x457fc10
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x457fb10
	AnimInstance* GetAnimInstance();// 0x457fab0
	class Object GetAnimClass();// 0x457fa80
	byte GetAnimationMode();// 0x457fae0
	bool GetAllowRigidBodyAnimNode();// 0x457fa20
	bool GetAllowedAnimCurveEvaluate();// 0x457fa50
	void ForceClothNextUpdateTeleportAndReset();// 0x457fa00
	void ForceClothNextUpdateTeleport();// 0x457f9e0
	FName FindConstraintBoneName(int ConstraintIndex);// 0x457f950
	void ClearMorphTargets();// 0x457f930
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x457f800
	void BindClothToMasterPoseComponent();// 0x457f7e0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x457f710
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x457f5a0
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x457f430
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x457f310

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x458, Size: 1]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x460, Size: 1]
	enum[] SkinCacheUsage;//[Offset: 0x468, Size: 1]
	bool bSuppressSocketByNameWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x578, Size: 1]
	int ForcedLodModel;//[Offset: 0x580, Size: 1]
	int MinLodModel;//[Offset: 0x584, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x590, Size: 1]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5a0, Size: 1]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5d4, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d6, Size: 1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d6, Size: 1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d6, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5d6, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5d6, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d6, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d7, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d7, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d7, Size: 1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d7, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d7, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5d7, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5d7, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d7, Size: 1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d8, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d8, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d8, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d8, Size: 1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d8, Size: 1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d8, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d9, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5dc, Size: 1]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x5f0, Size: 1]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x610, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x4587a20
	void UnHideBoneByName(FName BoneName);// 0x45879a0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x45877e0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4587620
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x45874e0
	void ShowAllMaterialSections(int LODIndex);// 0x4587460
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x4587380
	bool SetSkinWeightProfile(FName InProfileName);// 0x45872f0
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x4587210
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x4587140
	void SetRenderStatic(bool bNewValue);// 0x45870b0
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x4586fe0
	void SetMinLOD(int InNewMinLOD);// 0x4586ee0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x4586e10
	void SetForcedLOD(int InNewForcedLOD);// 0x4586d90
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x4586d00
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x4586c70
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x4586bf0
	bool IsUsingSkinWeightProfile();// 0x4586bc0
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x4586b00
	bool IsBoneHiddenByName(FName BoneName);// 0x4586a70
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x4586890
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x4586770
	FName GetSocketBoneName(FName InSocketName);// 0x4586640
	Vector GetRefPosePosition(int BoneIndex);// 0x45865a0
	FName GetParentBone(FName BoneName);// 0x4586510
	int GetNumLODs();// 0x45864e0
	int GetNumBones();// 0x45864b0
	int GetForcedLOD();// 0x4586480
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x4586380
	FName GetCurrentSkinWeightProfileName();// 0x4586360
	FName GetBoneName(int BoneIndex);// 0x45862d0
	int GetBoneIndex(FName BoneName);// 0x4586240
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x45860b0
	void ClearVertexColorOverride(int LODIndex);// 0x4586030
	void ClearSkinWeightProfile();// 0x4586010
	void ClearSkinWeightOverride(int LODIndex);// 0x4585f90
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x4585ed0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x430, Size: 1]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x45359e0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x4535910
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x4535590
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x45354f0
	FName[] GetMaterialSlotNames();// 0x45352e0
	MaterialInterface*[] GetMaterials();// 0x4535360
	int GetMaterialIndex(FName MaterialSlotName);// 0x4535240

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 1]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 1]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 1]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 1]
	PerPlatformInt MaxLod;//[Offset: 0x13c, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x140, Size: 1]
	byte SkelMirrorAxis;//[Offset: 0x141, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x142, Size: 1]
	bool bWillNeverMergeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x143, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x143, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x143, Size: 1]
	bool bSmoothNormalsInVertexColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x143, Size: 1]
	bool bVertexCurvature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x143, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x143, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x143, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 1]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 1]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 1]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 1]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 1]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 1]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 1]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 1]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x270dba0
	int NumSockets();// 0x457d6e0
	FString[] K2_GetAllMorphTargetNames();// 0x457d600
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x457d540
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x457d4b0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x457d420
	BoxSphereBounds GetImportedBounds();// 0x457d3d0
	BoxSphereBounds GetBounds();// 0x457d380
	void GenerateClothingLODs(int MaxClothLODIndex);// 0xe701f0
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x457d1b0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x457d0e0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x457d050

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 1]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 1]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 1]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 1]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 1]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 1]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 1]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 1]
	int ParentIndex;//[Offset: 0x8, Size: 1]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 1]
	FName TargetBoneName;//[Offset: 0x8, Size: 1]
	FName VirtualBoneName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x30, Size: 1]
	Vector RelativeLocation;//[Offset: 0x38, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 1]
	Vector RelativeScale;//[Offset: 0x50, Size: 1]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x4586950
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x45866d0

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 1]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float BlendScale;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 1]
	FName[] SlotNames;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 1]
	PerPlatformInt MaxLod;//[Offset: 0x34, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x38, Size: 1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x39, Size: 1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x3c, Size: 1]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x40, Size: 1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x48, Size: 1]
	bool bOverrideWillNeverMergeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bWillNeverMergeMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	void SetMinMaxLodToMesh(SkeletalMesh* InMesh);// 0x4586f60

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 1]
	PerPlatformBool bUseExtraBonesToRemove;//[Offset: 0x20, Size: 1]
	BoneFilter[] ExtraBonesToRemove;//[Offset: 0x28, Size: 1]
	FName[] BonesToPrioritize;//[Offset: 0x38, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x48, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x50, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 1]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 1]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 1]
	byte RefPoseType;//[Offset: 0x151, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 1]
	int RefFrameIndex;//[Offset: 0x160, Size: 1]
	FName RetargetSource;//[Offset: 0x164, Size: 1]
	enum Interpolation;//[Offset: 0x16c, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 1]
	float SequenceLength;//[Offset: 0x90, Size: 1]
	float RateScale;//[Offset: 0x94, Size: 1]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 1]
	float GetPlayLength();// 0x445aef0

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 1]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 1]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 1]
	FName NotifyName;//[Offset: 0x40, Size: 1]
	AnimNotify* Notify;//[Offset: 0x48, Size: 1]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 1]
	float Duration;//[Offset: 0x58, Size: 1]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 1]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 1]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 1]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 1]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 1]
	int SlotIndex;//[Offset: 0x10, Size: 1]
	int SegmentIndex;//[Offset: 0x14, Size: 1]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 1]
	float SegmentLength;//[Offset: 0x20, Size: 1]
	float LinkValue;//[Offset: 0x24, Size: 1]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2cbecb0
	FString GetNotifyName();// 0xe73a80

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x2cbecb0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2cbecb0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x2cbecb0
	FString GetNotifyName();// 0xe73a80

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 1]
	float BlendInTime;//[Offset: 0xd8, Size: 1]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 1]
	float BlendOutTime;//[Offset: 0x110, Size: 1]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 1]
	FName SyncGroup;//[Offset: 0x118, Size: 1]
	int SyncSlotIndex;//[Offset: 0x120, Size: 1]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 1]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 1]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 1]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 1]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 1]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 1]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 1]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 1]
	float GetDefaultBlendOutTime();// 0xe73c40

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 1]
	float BlendTime;//[Offset: 0x8, Size: 1]
	enum BlendOption;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 1]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float GetFloatValue(float InTime);// 0x4487600

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x4487810
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x4487730

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 1]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 1]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]
	float ArriveTangent;//[Offset: 0xc, Size: 1]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 1]
	float LeaveTangent;//[Offset: 0x14, Size: 1]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 1]
	float StartTime;//[Offset: 0x38, Size: 1]
	FName NextSectionName;//[Offset: 0x3c, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 1]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 1]
	float StartPos;//[Offset: 0x8, Size: 1]
	float AnimStartTime;//[Offset: 0xc, Size: 1]
	float AnimEndTime;//[Offset: 0x10, Size: 1]
	float AnimPlayRate;//[Offset: 0x14, Size: 1]
	int LoopingCount;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 1]
	float DisplayTime;//[Offset: 0x38, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 1]
	float TriggerTime;//[Offset: 0x4, Size: 1]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 1]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 1]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 1]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 3]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 3]
	float Alpha;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 1]
	SmartName Name;//[Offset: 0x8, Size: 1]
	int CurveTypeFlags;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 1]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 1]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 1]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 1]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 1]
	byte ReductionMethod;//[Offset: 0x18, Size: 1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 1]
	byte TextureImportance;//[Offset: 0x1a, Size: 1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	float WeldingThreshold;//[Offset: 0x20, Size: 1]
	float NormalsThreshold;//[Offset: 0x24, Size: 1]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 1]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	float VolumeImportance;//[Offset: 0x30, Size: 1]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	int BaseLOD;//[Offset: 0x38, Size: 1]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 1]
	byte BlueprintType;//[Offset: 0x58, Size: 1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 1]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 1]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 1]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 1]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 1]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 1]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 1]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 1]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 1]
	FName AttachToName;//[Offset: 0x80, Size: 1]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 1]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 1]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 1]
	Guid VariableGuid;//[Offset: 0xc0, Size: 1]
	FName InternalVariableName;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 1]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* PropertyScope;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 1]
	FString DataValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 1]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 1]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 1]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 1]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 1]
	Guid TimelineGuid;//[Offset: 0x80, Size: 1]
	FName VariableName;//[Offset: 0x90, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 1]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 1]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x18, Size: 1]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 1]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 3]
	Vector GetVectorValue(float InTime);// 0x44878f0

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 4]
	float AdjustHue;//[Offset: 0x230, Size: 1]
	float AdjustSaturation;//[Offset: 0x234, Size: 1]
	float AdjustBrightness;//[Offset: 0x238, Size: 1]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 1]
	float AdjustVibrance;//[Offset: 0x240, Size: 1]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 1]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 1]
	LinearColor GetLinearColorValue(float InTime);// 0x4487690
	LinearColor GetClampedLinearColorValue(float InTime);// 0x44872b0

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 1]
	class Object* ComponentClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 1]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 1]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 1]
	FName SCSVariableName;//[Offset: 0x8, Size: 1]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 1]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 1]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 1]
	Object* SourceAsset;//[Offset: 0x118, Size: 1]
	Object* TargetAsset;//[Offset: 0x140, Size: 1]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 1]
	Transform Transform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 1]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 1]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 1]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 1]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 1]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 1]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bBuildVertexCurvature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	float ThresholdPosition;//[Offset: 0x4, Size: 1]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 1]
	float ThresholdUV;//[Offset: 0xc, Size: 1]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 1]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 1]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 1]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 1]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 1]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x258, Size: 1]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 1]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 1]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 1]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 1]
	float PositionStrength;//[Offset: 0x14, Size: 1]
	float VelocityStrength;//[Offset: 0x18, Size: 1]
	float MaxLinearForce;//[Offset: 0x1c, Size: 1]
	float MaxAngularForce;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 1]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 1]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 1]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 1]
	FName ConstraintBone1;//[Offset: 0x20, Size: 1]
	FName ConstraintBone2;//[Offset: 0x28, Size: 1]
	Vector Pos1;//[Offset: 0x30, Size: 1]
	Vector PriAxis1;//[Offset: 0x3c, Size: 1]
	Vector SecAxis1;//[Offset: 0x48, Size: 1]
	Vector Pos2;//[Offset: 0x54, Size: 1]
	Vector PriAxis2;//[Offset: 0x60, Size: 1]
	Vector SecAxis2;//[Offset: 0x6c, Size: 1]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 1]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 1]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 1]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 1]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 1]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 1]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 1]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 1]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 1]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 1]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float Restitution;//[Offset: 0x8, Size: 1]
	float ContactDistance;//[Offset: 0xc, Size: 1]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 1]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 1]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 1]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 1]
	Vector VelocityTarget;//[Offset: 0xc, Size: 1]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 1]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 1]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float MaxForce;//[Offset: 0x8, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 1]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 1]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 1]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 1]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 1]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 1]
	FName ProfileName;//[Offset: 0x104, Size: 1]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 1]
	int JointIterations;//[Offset: 0x4, Size: 1]
	int CollisionIterations;//[Offset: 0x8, Size: 1]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 1]
	int JointPushOutIterations;//[Offset: 0x10, Size: 1]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 1]
	byte RootMotionMode;//[Offset: 0x30, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 1]
	MulticastInlineDelegateProperty OnMontageBlendingOut;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnAllMontageInstancesEnded;//[Size: 1]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 1]
	float SubAnimInstanceWeight;//[Offset: 0x180, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x4451260
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x44511e0
	Pawn* TryGetPawnOwner();// 0x44511b0
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x44510e0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4451010
	void SetRootMotionMode(byte Value);// 0x4445860
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x4450f80
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x4450ef0
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x4450e20
	void SavePoseSnapshot(FName SnapshotName);// 0x4450d90
	void ResetDynamics(enum InTeleportType);// 0x4450d10
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x4450ad0
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x4450910
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x4450770
	void Montage_Stop_By_Instance_ID(float InBlendOutTime, int InInstanceID);// 0x4450840
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x44506a0
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x44505d0
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x4450500
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x4450400
	void Montage_Resume(const AnimMontage* Montage);// 0x4450380
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x44501f0
	void Montage_Pause(const AnimMontage* Montage);// 0x4450170
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x44500b0
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x444fff0
	bool Montage_IsPlaying_By_Instance_ID(int InInstanceID);// 0x444ff60
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x444fed0
	bool Montage_IsActive(const AnimMontage* Montage);// 0x444fe40
	float Montage_GetPosition(const AnimMontage* Montage);// 0x444fda0
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x444fd00
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x444fc70
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x444fbe0
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x444fb40
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x444fa70
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x444f9b0
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x444f930
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x444f7e0
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x444f720
	bool IsAnyMontagePlaying();// 0x444f6f0
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x444f630
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x444f490
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x444f3f0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x444f330
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x444f270
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x444f1b0
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x444f0f0
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x444f030
	bool GetReceiveNotifiesFromLinkedInstances();// 0x444f000
	bool GetPropagateNotifiesToLinkedInstances();// 0x444efd0
	SkeletalMeshComponent* GetOwningComponent();// 0x444efa0
	Actor* GetOwningActor();// 0x444ef70
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x444eee0
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x444ee50
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x444ed60
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x444ecd0
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x444ec10
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x444eb50
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x444ea90
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x444e9d0
	float GetInstanceMachineWeight(int MachineIndex);// 0x444e940
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x444e8b0
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x444e820
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x444e790
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x444e700
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x444e670
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x444e5e0
	float GetCurveValue(FName CurveName);// 0x444e540
	FName GetCurrentStateName(int MachineIndex);// 0x444e4b0
	AnimMontage* GetCurrentActiveMontage();// 0x444e480
	void GetAllCurveNames(out FName[] OutNames);// 0x444e3d0
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x444e2e0
	AnimMontage* Get_Montage_By_Instance_ID(int InInstanceID);// 0x444f5a0
	void ClearMorphTargets();// 0x444e2c0
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x444e1c0
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x2cbecb0
	void BlueprintPostEvaluateAnimation();// 0x2cbecb0
	void BlueprintLinkedAnimationLayersInitialized();// 0x2cbecb0
	void BlueprintInitializeAnimation();// 0x2cbecb0
	void BlueprintBeginPlay();// 0x2cbecb0

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 1]
	FName[] BoneNames;//[Offset: 0x10, Size: 1]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 1]
	FName SnapshotName;//[Offset: 0x28, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 1]
	FName NextMarkerName;//[Offset: 0x8, Size: 1]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 1]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 1]
	Guid AssetGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 1]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 1]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 1]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 1]
	float SavedPlayRate;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x3cbc8c0
	void PhysicsAssetUpdated();// 0x2601810
	void EnableGravityOverride(out const Vector InVector);// 0x3cbc830
	void DisableGravityOverride();// 0xe6f840
	void ClothConfigUpdated();// 0x26fff70

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 1]
	Plane YPlane;//[Offset: 0x10, Size: 1]
	Plane ZPlane;//[Offset: 0x20, Size: 1]
	Plane WPlane;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 12]
	byte Weights;//[Offset: 0x30, Size: 12]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 1]
	float GravityScale;//[Offset: 0x150, Size: 1]
	float MaxStepHeight;//[Offset: 0x154, Size: 1]
	float JumpZVelocity;//[Offset: 0x158, Size: 1]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 1]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 1]
	float WalkableFloorZ;//[Offset: 0x164, Size: 1]
	byte MovementMode;//[Offset: 0x168, Size: 1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 1]
	float GroundFriction;//[Offset: 0x16c, Size: 1]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 1]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 1]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 1]
	float MaxFlySpeed;//[Offset: 0x198, Size: 1]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 1]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 1]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 1]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 1]
	float BrakingFriction;//[Offset: 0x1ac, Size: 1]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 1]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 1]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 1]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 1]
	float AirControl;//[Offset: 0x1c4, Size: 1]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 1]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 1]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 1]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 1]
	float Buoyancy;//[Offset: 0x1d8, Size: 1]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 1]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 1]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 1]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 1]
	bool bPreventMeshDoubleMode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 1]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 1]
	float OutofWaterZ;//[Offset: 0x204, Size: 1]
	float Mass;//[Offset: 0x208, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 1]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 1]
	float PushForceFactor;//[Offset: 0x214, Size: 1]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 1]
	float TouchForceFactor;//[Offset: 0x21c, Size: 1]
	float MinTouchForce;//[Offset: 0x220, Size: 1]
	float MaxTouchForce;//[Offset: 0x224, Size: 1]
	float RepulsionForce;//[Offset: 0x228, Size: 1]
	Vector Acceleration;//[Offset: 0x22c, Size: 1]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 1]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 1]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 1]
	bool bHasQueuedServerMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	Vector QueuedServerLocation;//[Offset: 0x26c, Size: 1]
	Quat QueuedServerRotation;//[Offset: 0x280, Size: 1]
	byte ParallelUpdateMoveMode;//[Offset: 0x298, Size: 1]
	Transform ParallelUpdateTransform;//[Offset: 0x2a0, Size: 1]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2d0, Size: 1]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x2d4, Size: 1]
	float ServerLastClientAdjustmentTime;//[Offset: 0x2d8, Size: 1]
	Vector PendingImpulseToApply;//[Offset: 0x2dc, Size: 1]
	Vector PendingForceToApply;//[Offset: 0x2e8, Size: 1]
	float AnalogInputModifier;//[Offset: 0x2f4, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x304, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x308, Size: 1]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x30c, Size: 1]
	float MaxDepenetrationWithGeometry;//[Offset: 0x310, Size: 1]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x314, Size: 1]
	float MaxDepenetrationWithPawn;//[Offset: 0x318, Size: 1]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x31c, Size: 1]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x320, Size: 1]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x324, Size: 1]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x328, Size: 1]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x32c, Size: 1]
	float NetProxyShrinkRadius;//[Offset: 0x330, Size: 1]
	float NetProxyShrinkHalfHeight;//[Offset: 0x334, Size: 1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x338, Size: 1]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x33c, Size: 1]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x340, Size: 1]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x344, Size: 1]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x348, Size: 1]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x34c, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x350, Size: 1]
	float JumpOutOfWaterPitch;//[Offset: 0x354, Size: 1]
	FindFloorResult CurrentFloor;//[Offset: 0x358, Size: 1]
	byte DefaultLandMovementMode;//[Offset: 0x3ec, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x3ed, Size: 1]
	byte GroundMovementMode;//[Offset: 0x3ee, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ef, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ef, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ef, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ef, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ef, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ef, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ef, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ef, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f0, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f0, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f0, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f0, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f1, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f1, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f1, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f1, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f1, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f1, Size: 1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f1, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f2, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f2, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f2, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f2, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f2, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f2, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x408, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x40c, Size: 1]
	int AvoidanceUID;//[Offset: 0x418, Size: 1]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x41c, Size: 1]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x420, Size: 1]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x424, Size: 1]
	float AvoidanceWeight;//[Offset: 0x428, Size: 1]
	Vector PendingLaunchVelocity;//[Offset: 0x42c, Size: 1]
	float NavMeshProjectionInterval;//[Offset: 0x4d8, Size: 1]
	float NavMeshProjectionTimer;//[Offset: 0x4dc, Size: 1]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4e0, Size: 1]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4e4, Size: 1]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4e8, Size: 1]
	float NavWalkingFloorDistTolerance;//[Offset: 0x4ec, Size: 1]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4f0, Size: 1]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x538, Size: 1]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x540, Size: 1]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x610, Size: 1]
	Vector AnimRootMotionVelocity;//[Offset: 0x650, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x447fb10
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x447fa90
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x447f9d0
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x447f940
	void SetGroupsToIgnore(int GroupFlags);// 0x447f8c0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x447f830
	void SetGroupsToAvoid(int GroupFlags);// 0x447f7b0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x447f720
	void SetAvoidanceGroup(int GroupFlags);// 0x447f6a0
	void SetAvoidanceEnabled(bool bEnable);// 0x447f610
	float K2_GetWalkableFloorZ();// 0x447f5e0
	float K2_GetWalkableFloorAngle();// 0x447f5b0
	float K2_GetModifiedMaxAcceleration();// 0x447f570
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x447f430
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x447f240
	bool IsWalking();// 0x447f210
	bool IsWalkable(out const HitResult Hit);// 0x447f140
	float GetValidPerchRadius();// 0x447f110
	float GetPerchRadiusThreshold();// 0x447f0e0
	PrimitiveComponent* GetMovementBase();// 0x447f0b0
	float GetMinAnalogSpeed();// 0x447f070
	float GetMaxJumpHeightWithJumpTime();// 0x447f030
	float GetMaxJumpHeight();// 0x447eff0
	float GetMaxBrakingDeceleration();// 0x447efb0
	float GetMaxAcceleration();// 0x447ef70
	Vector GetLastUpdateVelocity();// 0x447ef40
	Rotator GetLastUpdateRotation();// 0x447eef0
	Vector GetLastUpdateLocation();// 0x447eec0
	Vector GetImpartedMovementBaseVelocity();// 0x447ee80
	Vector GetCurrentAcceleration();// 0x447ee40
	float GetCrouchedHalfHeight();// 0x447ee00
	Character* GetCharacterOwner();// 0x27d4940
	float GetAnalogInputModifier();// 0x447edd0
	void DisableMovement();// 0x447edb0
	void ClearAccumulatedForces();// 0x1f125c0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x447ebc0
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x447ea60
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x447e980
	void AddForce(Vector Force);// 0x447e8f0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 1]
	Vector K2_GetInputVector();// 0x454e520
	bool IsMoveInputIgnored();// 0x454e600
	Vector GetPendingInputVector();// 0x454e520
	Pawn* GetPawnOwner();// 0x454e4f0
	Vector GetLastInputVector();// 0x454e3e0
	Vector ConsumeInputVector();// 0x454e200
	void AddInputVector(Vector WorldVector, bool bForce);// 0x454dca0

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 1]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 1]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 1]
	void StopMovementKeepPathing();// 0x453af90
	void StopActiveMovement();// 0xe7e630
	bool IsSwimming();// 0x26fff40
	bool IsMovingOnGround();// 0x447f210
	bool IsFlying();// 0x453af60
	bool IsFalling();// 0x26fc530
	bool IsCrouching();// 0x4461ae0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 1]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 1]
	Vector Velocity;//[Offset: 0xc4, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 1]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 1]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 1]
	void StopMovementImmediately();// 0x2746060
	void SnapUpdatedComponentToPlane();// 0x1eb9310
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x27472d0
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x4538aa0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x4538a10
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x4538930
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x45388a0
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x2929540
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x2747360
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x4538380
	float K2_GetModifiedMaxSpeed();// 0x4538340
	float K2_GetMaxSpeedModifier();// 0x4538300
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x4538270
	Vector GetPlaneConstraintOrigin();// 0x4538230
	Vector GetPlaneConstraintNormal();// 0x45381f0
	enum GetPlaneConstraintAxisSetting();// 0x45381d0
	PhysicsVolume* GetPhysicsVolume();// 0x45381a0
	float GetMaxSpeed();// 0x2795910
	float GetGravityZ();// 0x4538160
	Vector ConstrainNormalToPlane(Vector Normal);// 0x45380b0
	Vector ConstrainLocationToPlane(Vector Location);// 0x4538000
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x4537f50

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 1]
	float LineDist;//[Offset: 0x8, Size: 1]
	HitResult HitResult;//[Offset: 0xc, Size: 1]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 1]
	float AgentHeight;//[Offset: 0x8, Size: 1]
	float AgentStepHeight;//[Offset: 0xc, Size: 1]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 1]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 1]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x448, Size: 1]
	float CapsuleRadius;//[Offset: 0x44c, Size: 1]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x447d770
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x447d6a0
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x447d5d0
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x447a4e0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x447a3f0
	float GetUnscaledCapsuleRadius();// 0x27bf0c0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x447a3c0
	float GetUnscaledCapsuleHalfHeight();// 0x447a3a0
	float GetShapeScale();// 0x447a280
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x447a160
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x447a050
	float GetScaledCapsuleRadius();// 0x447a010
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x4479fc0
	float GetScaledCapsuleHalfHeight();// 0x4479f90

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x430, Size: 1]
	class NavAreaBase* AreaClass;//[Offset: 0x438, Size: 1]
	Color ShapeColor;//[Offset: 0x440, Size: 1]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x444, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x444, Size: 1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 1]
	Rotator Rotation;//[Offset: 0x1c, Size: 1]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 1]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 1]
	float Position;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 1]
	Rotator Rotation;//[Offset: 0x20, Size: 1]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 1]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 1]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 1]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 1]
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 1]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 1]
	HUD* MyHud;//[Offset: 0x2b0, Size: 1]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 1]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 1]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 1]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 1]
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 1]
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 1]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 1]
	int ClientCap;//[Offset: 0x330, Size: 1]
	CheatManager* CheatManager;//[Offset: 0x338, Size: 1]
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 1]
	class PlayerInput* PlayerInputClass;//[Offset: 0x348, Size: 1]
	PlayerInput* PlayerInput;//[Offset: 0x350, Size: 1]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x358, Size: 1]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d8, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x3dc, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x418, Size: 1]
	NetConnection* NetConnection;//[Offset: 0x420, Size: 1]
	float InputYawScale;//[Offset: 0x440, Size: 1]
	float InputPitchScale;//[Offset: 0x444, Size: 1]
	float InputRollScale;//[Offset: 0x448, Size: 1]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44c, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44c, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44c, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44c, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44c, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44c, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x450, Size: 1]
	Key[] ClickEventKeys;//[Offset: 0x458, Size: 1]
	byte DefaultMouseCursor;//[Offset: 0x468, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x469, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x46a, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x46b, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x46c, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x470, Size: 1]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x472, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4e8, Size: 1]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f0, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x508, Size: 1]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x560, Size: 1]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	Vector SpawnLocation;//[Offset: 0x570, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x455f890
	bool WasInputKeyJustPressed(Key Key);// 0x455f7a0
	void ToggleSpeaking(bool bInSpeaking);// 0x455f710
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x26a22a0
	void SwitchLevel(FString URL);// 0x455f670
	void StopHapticEffect(enum Hand);// 0x455f5f0
	void StartFire(byte FireModeNum);// 0x455f570
	void SetVirtualJoystickVisibility(bool bVisible);// 0x455f4e0
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x455f360
	void SetShowMouseCursor(bool bShouldShow);// 0x455f2d0
	void SetName(FString S);// 0x455f230
	void SetMouseLocation(const int X, const int Y);// 0x455f170
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x455f0b0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x455efb0
	void SetDisableHaptics(bool bNewDisabled);// 0x455ef20
	void SetControllerLightColor(Color Color);// 0x455eeb0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x455ecf0
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x455ebd0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x455eb00
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x455ea10
	void ServerViewPrevPlayer();// 0x455e9c0
	void ServerViewNextPlayer();// 0x455e970
	void ServerVerifyViewTarget();// 0x455e920
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x455e860
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x455e7a0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x455e680
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x455e520
	void ServerToggleAILogging();// 0x455e4d0
	void ServerShortTimeout();// 0x455e480
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x455e3c0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x455e290
	void ServerRestartPlayer();// 0x455e240
	void ServerPause();// 0x455e1f0
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x455e140
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x455dfe0
	void ServerExecRPC(FString Msg);// 0x455df20
	void ServerExec(FString Msg);// 0xd780f0
	void ServerCheckClientPossessionReliable();// 0x455ded0
	void ServerCheckClientPossession();// 0x455de80
	void ServerChangeName(FString S);// 0x455ddc0
	void ServerCamera(FName NewMode);// 0x455dd00
	void ServerAcknowledgePossession(Pawn* P);// 0x455dc40
	void SendToConsole(FString Command);// 0x455dba0
	void RestartLevel();// 0x1f12b60
	void ResetControllerLightColor();// 0x455db80
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x455da50
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x455d900
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x455d680
	void Pause();// 0x1f12920
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x455d5f0
	void LocalTravel(FString URL);// 0x455d550
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x455d3a0
	bool IsInputKeyDown(Key Key);// 0x455d2b0
	void GetViewportSize(out int SizeX, out int SizeY);// 0x455d1d0
	SpectatorPawn* GetSpectatorPawn();// 0x295cc00
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x455d0e0
	Vector GetInputVectorKeyState(Key Key);// 0x455cfe0
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x455ce60
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x455cd80
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x455cbf0
	float GetInputKeyTimeDown(Key Key);// 0x455cb00
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x455c9e0
	float GetInputAnalogKeyState(Key Key);// 0x455c8f0
	HUD* GetHUD();// 0x455bf80
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x455c730
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x455c590
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x455c3f0
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x455c270
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x455c110
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x455bfb0
	Vector GetFocalLocation();// 0x455bf40
	void FOV(float NewFOV);// 0x455bec0
	void EnableCheats();// 0x1f12b00
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x455bd40
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x455bc40
	void ConsoleKey(Key Key);// 0x455bb60
	void ClientWasKicked(const FText KickReason);// 0x455baa0
	void ClientVoiceHandshakeComplete();// 0x1f12840
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x455ba00
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x455b850
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x455b730
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x455b5c0
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x455b450
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x455b2f0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x455b220
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x455b150
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x455b080
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x3b7f6f0
	void ClientStartOnlineSession();// 0xd76eb0
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x455aff0
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x455af00
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x455ae70
	void ClientSetHUD(class HUD NewHUDClass);// 0x455ade0
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x455ace0
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x455ab70
	void ClientSetCameraMode(FName NewCamMode);// 0x455aae0
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x455a950
	void ClientSetBlockOnAsyncLoading();// 0x1eefba0
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x455a890
	void ClientReturnToMainMenu(FString ReturnReason);// 0x455a7f0
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x455a760
	void ClientRestart(Pawn* NewPawn);// 0x455a6d0
	void ClientReset();// 0x1f12260
	void ClientRepObjRef(Object* Object);// 0x455a640
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x455a4c0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x455a370
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x455a260
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x455a110
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x455a010
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x4559f20
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x4559e60
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4559d00
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x4559a60
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x4559940
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x4559820
	void ClientIgnoreMoveInput(bool bIgnore);// 0x4559790
	void ClientIgnoreLookInput(bool bIgnore);// 0x4559700
	void ClientGotoState(FName NewState);// 0x4559670
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x45595a0
	void ClientForceGarbageCollection();// 0x1f121a0
	void ClientFlushLevelStreaming();// 0x4559580
	void ClientEndOnlineSession();// 0xd76fa0
	void ClientEnableNetworkVoice(bool bEnable);// 0x45594f0
	void ClientCommitMapChange();// 0x1f123a0
	void ClientClearCameraLensEffects();// 0x1f12200
	void ClientCapBandwidth(int Cap);// 0x4559460
	void ClientCancelPendingMapChange();// 0x1f12be0
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x4559340
	void ClearAudioListenerOverride();// 0x4559320
	void ClearAudioListenerAttenuationOverride();// 0x4559300
	bool CanRestartPlayer();// 0x266f7b0
	void Camera(FName NewMode);// 0x4559270
	void AddYawInput(float Val);// 0x45591f0
	void AddRollInput(float Val);// 0x4559170
	void AddPitchInput(float Val);// 0x45590f0
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x4559060

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 1]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 1]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 1]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 1]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 1]
	FName[] DebugDisplay;//[Offset: 0x250, Size: 1]
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 1]
	Canvas* Canvas;//[Offset: 0x270, Size: 1]
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 1]
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 1]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 1]
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 1]
	void ShowHUD();// 0x1ef3000
	void ShowDebugToggleSubCategory(FName Category);// 0x44b4780
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x44b4700
	void ShowDebug(FName DebugType);// 0x279b790
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x44b44e0
	void RemoveAllDebugStrings();// 0x44b44c0
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2cbecb0
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x2cbecb0
	void ReceiveHitBoxClick(const FName BoxName);// 0x2cbecb0
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2cbecb0
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2cbecb0
	Vector Project(Vector Location);// 0x44b4040
	void PreviousDebugTarget();// 0x1ef2f10
	void NextDebugTarget();// 0xcf5e50
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x44b3560
	PlayerController* GetOwningPlayerController();// 0xe69730
	Pawn* GetOwningPawn();// 0x44b3530
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x44b3320
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x44b3190
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x44b2d70
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x44b2b50
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x44b29a0
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x44b26e0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x44b24e0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x44b2150
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x44b1f70
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x44b1e00
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x44b1af0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x44b1770

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 1]
	float OrgY;//[Offset: 0x2c, Size: 1]
	float ClipX;//[Offset: 0x30, Size: 1]
	float ClipY;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 1]
	int SizeY;//[Offset: 0x44, Size: 1]
	Plane ColorModulate;//[Offset: 0x50, Size: 1]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 1]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 1]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 1]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x447bc10
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x447bb30
	Vector K2_Project(Vector WorldLocation);// 0x447ba80
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x447b960
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x447b6e0
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x447b360
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x447b1d0
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x447b0b0
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x447ae90
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x447ad40
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x447abf0
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x447a7b0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x447a690

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 1]
	Vector2D V0_UV;//[Offset: 0x8, Size: 1]
	LinearColor V0_Color;//[Offset: 0x10, Size: 1]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 1]
	Vector2D V1_UV;//[Offset: 0x28, Size: 1]
	LinearColor V1_Color;//[Offset: 0x30, Size: 1]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 1]
	Vector2D V2_UV;//[Offset: 0x48, Size: 1]
	LinearColor V2_Color;//[Offset: 0x50, Size: 1]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 1]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 1]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 1]
	FString DebugText;//[Offset: 0x20, Size: 1]
	float TimeRemaining;//[Offset: 0x30, Size: 1]
	float Duration;//[Offset: 0x34, Size: 1]
	Color TextColor;//[Offset: 0x38, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 1]
	Font* Font;//[Offset: 0x50, Size: 1]
	float FontScale;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 1]
	float DefaultFOV;//[Offset: 0x238, Size: 1]
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 1]
	float DefaultAspectRatio;//[Offset: 0x248, Size: 1]
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 1]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x880, Size: 1]
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 1]
	TViewTarget PendingViewTarget;//[Offset: 0x1470, Size: 1]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1aa0, Size: 1]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2090, Size: 1]
	CameraModifier*[] ModifierList;//[Offset: 0x2680, Size: 1]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2690, Size: 1]
	float FreeCamDistance;//[Offset: 0x26a0, Size: 1]
	Vector FreeCamOffset;//[Offset: 0x26a4, Size: 1]
	Vector ViewTargetOffset;//[Offset: 0x26b0, Size: 1]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x26d0, Size: 1]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x26e0, Size: 1]
	CameraAnimInst* AnimInstPool;//[Offset: 0x26e8, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2728, Size: 1]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2748, Size: 1]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2758, Size: 1]
	CameraActor* AnimCameraActor;//[Offset: 0x2768, Size: 1]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2770, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2770, Size: 1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2770, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2770, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2771, Size: 1]
	bool bForceLocalSpaceForInterpolatedRendering;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2771, Size: 1]
	float ViewPitchMin;//[Offset: 0x2774, Size: 1]
	float ViewPitchMax;//[Offset: 0x2778, Size: 1]
	float ViewYawMin;//[Offset: 0x277c, Size: 1]
	float ViewYawMax;//[Offset: 0x2780, Size: 1]
	float ViewRollMin;//[Offset: 0x2784, Size: 1]
	float ViewRollMax;//[Offset: 0x2788, Size: 1]
	float ServerUpdateCameraTimeout;//[Offset: 0x2790, Size: 1]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4555a50
	void StopCameraFade();// 0x1f2baf0
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x4555980
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x45558b0
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x45557e0
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x4555710
	void StopAllCameraShakes(bool bImmediately);// 0x4555680
	void StopAllCameraAnims(bool bImmediate);// 0x45555f0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x4555420
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x4555300
	void SetGameCameraCutThisFrame();// 0x45552e0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x4555240
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x45551b0
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x45550e0
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4554f70
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4554c90
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x4554b10
	void OnPhotographySessionStart();// 0x1ef10a0
	void OnPhotographySessionEnd();// 0x1ef10c0
	void OnPhotographyMultiPartCaptureStart();// 0x1eef160
	void OnPhotographyMultiPartCaptureEnd();// 0x1ef3000
	PlayerController* GetOwningPlayerController();// 0x270d6c0
	float GetFOVAngle();// 0x447f570
	Rotator GetCameraRotation();// 0x45546a0
	Vector GetCameraLocation();// 0x4554660
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x45545c0
	void ClearCameraLensEffects();// 0x1eefb80
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x2cbecb0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x44a45a0
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4554520

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float OscillationDuration;//[Offset: 0x2c, Size: 1]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 1]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 1]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 1]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 1]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 1]
	float AnimPlayRate;//[Offset: 0x8c, Size: 1]
	float AnimScale;//[Offset: 0x90, Size: 1]
	float AnimBlendInTime;//[Offset: 0x94, Size: 1]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 1]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 1]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 1]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xc0, Size: 1]
	float ShakeScale;//[Offset: 0x148, Size: 1]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 1]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 1]
	void ReceiveStopShake(bool bImmediately);// 0x2cbecb0
	void ReceivePlayShake(float Scale);// 0x2cbecb0
	bool ReceiveIsFinished();// 0x2015570
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x2cbecb0

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	float FOV;//[Offset: 0x18, Size: 1]
	float DesiredFOV;//[Offset: 0x1c, Size: 1]
	float OrthoWidth;//[Offset: 0x20, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 1]
	float AspectRatio;//[Offset: 0x2c, Size: 1]
	float MaxAspectRatio;//[Offset: 0x30, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	byte ProjectionMode;//[Offset: 0x38, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x590, Size: 1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_HirezAmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_HirezAmbientOcclusionRejectionFalloff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_HirezAmbientOcclusionAccentuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	byte BloomMethod;//[Offset: 0x21, Size: 1]
	byte AutoExposureMethod;//[Offset: 0x22, Size: 1]
	float WhiteTemp;//[Offset: 0x24, Size: 1]
	float WhiteTint;//[Offset: 0x28, Size: 1]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 1]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 1]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 1]
	Vector4 ColorGain;//[Offset: 0x60, Size: 1]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 1]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 1]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 1]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 1]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 1]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 1]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 1]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 1]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 1]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 1]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 1]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 1]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 1]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 1]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 1]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 1]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 1]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 1]
	float BlueCorrection;//[Offset: 0x178, Size: 1]
	float ExpandGamut;//[Offset: 0x17c, Size: 1]
	float FilmSlope;//[Offset: 0x180, Size: 1]
	float FilmToe;//[Offset: 0x184, Size: 1]
	float FilmShoulder;//[Offset: 0x188, Size: 1]
	float FilmBlackClip;//[Offset: 0x18c, Size: 1]
	float FilmWhiteClip;//[Offset: 0x190, Size: 1]
	LinearColor FilmWhitePoint;//[Offset: 0x194, Size: 1]
	LinearColor FilmShadowTint;//[Offset: 0x1a4, Size: 1]
	float FilmShadowTintBlend;//[Offset: 0x1b4, Size: 1]
	float FilmShadowTintAmount;//[Offset: 0x1b8, Size: 1]
	float FilmSaturation;//[Offset: 0x1bc, Size: 1]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c0, Size: 1]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d0, Size: 1]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e0, Size: 1]
	float FilmContrast;//[Offset: 0x1f0, Size: 1]
	float FilmToeAmount;//[Offset: 0x1f4, Size: 1]
	float FilmHealAmount;//[Offset: 0x1f8, Size: 1]
	float FilmDynamicRange;//[Offset: 0x1fc, Size: 1]
	LinearColor SceneColorTint;//[Offset: 0x200, Size: 1]
	float SceneFringeIntensity;//[Offset: 0x210, Size: 1]
	float ChromaticAberrationStartOffset;//[Offset: 0x214, Size: 1]
	float BloomIntensity;//[Offset: 0x218, Size: 1]
	float BloomThreshold;//[Offset: 0x21c, Size: 1]
	float BloomSizeScale;//[Offset: 0x220, Size: 1]
	float Bloom1Size;//[Offset: 0x224, Size: 1]
	float Bloom2Size;//[Offset: 0x228, Size: 1]
	float Bloom3Size;//[Offset: 0x22c, Size: 1]
	float Bloom4Size;//[Offset: 0x230, Size: 1]
	float Bloom5Size;//[Offset: 0x234, Size: 1]
	float Bloom6Size;//[Offset: 0x238, Size: 1]
	LinearColor Bloom1Tint;//[Offset: 0x23c, Size: 1]
	LinearColor Bloom2Tint;//[Offset: 0x24c, Size: 1]
	LinearColor Bloom3Tint;//[Offset: 0x25c, Size: 1]
	LinearColor Bloom4Tint;//[Offset: 0x26c, Size: 1]
	LinearColor Bloom5Tint;//[Offset: 0x27c, Size: 1]
	LinearColor Bloom6Tint;//[Offset: 0x28c, Size: 1]
	float BloomConvolutionSize;//[Offset: 0x29c, Size: 1]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a0, Size: 1]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2a8, Size: 1]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b0, Size: 1]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b4, Size: 1]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b8, Size: 1]
	float BloomConvolutionBufferScale;//[Offset: 0x2bc, Size: 1]
	Texture* BloomDirtMask;//[Offset: 0x2c0, Size: 1]
	float BloomDirtMaskIntensity;//[Offset: 0x2c8, Size: 1]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2cc, Size: 1]
	LinearColor AmbientCubemapTint;//[Offset: 0x2dc, Size: 1]
	float AmbientCubemapIntensity;//[Offset: 0x2ec, Size: 1]
	TextureCube* AmbientCubemap;//[Offset: 0x2f0, Size: 1]
	float CameraShutterSpeed;//[Offset: 0x2f8, Size: 1]
	float CameraISO;//[Offset: 0x2fc, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x300, Size: 1]
	float DepthOfFieldMinFstop;//[Offset: 0x304, Size: 1]
	int DepthOfFieldBladeCount;//[Offset: 0x308, Size: 1]
	float AutoExposureBias;//[Offset: 0x30c, Size: 1]
	float AutoExposureBiasBackup;//[Offset: 0x310, Size: 1]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x320, Size: 1]
	Texture* AutoExposureMeterMask;//[Offset: 0x328, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x330, Size: 1]
	float AutoExposureHighPercent;//[Offset: 0x334, Size: 1]
	float AutoExposureMinBrightness;//[Offset: 0x338, Size: 1]
	float AutoExposureMaxBrightness;//[Offset: 0x33c, Size: 1]
	float AutoExposureSpeedUp;//[Offset: 0x340, Size: 1]
	float AutoExposureSpeedDown;//[Offset: 0x344, Size: 1]
	float HistogramLogMin;//[Offset: 0x348, Size: 1]
	float HistogramLogMax;//[Offset: 0x34c, Size: 1]
	float AutoExposureCalibrationConstant;//[Offset: 0x350, Size: 1]
	float LensFlareIntensity;//[Offset: 0x354, Size: 1]
	LinearColor LensFlareTint;//[Offset: 0x358, Size: 1]
	float LensFlareBokehSize;//[Offset: 0x368, Size: 1]
	float LensFlareThreshold;//[Offset: 0x36c, Size: 1]
	Texture* LensFlareBokehShape;//[Offset: 0x370, Size: 1]
	LinearColor LensFlareTints;//[Offset: 0x378, Size: 8]
	float VignetteIntensity;//[Offset: 0x3f8, Size: 1]
	float GrainJitter;//[Offset: 0x3fc, Size: 1]
	float GrainIntensity;//[Offset: 0x400, Size: 1]
	float AmbientOcclusionIntensity;//[Offset: 0x404, Size: 1]
	float AmbientOcclusionStaticFraction;//[Offset: 0x408, Size: 1]
	float AmbientOcclusionRadius;//[Offset: 0x40c, Size: 1]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x414, Size: 1]
	float AmbientOcclusionFadeRadius;//[Offset: 0x418, Size: 1]
	float AmbientOcclusionDistance;//[Offset: 0x41c, Size: 1]
	float AmbientOcclusionPower;//[Offset: 0x420, Size: 1]
	float AmbientOcclusionBias;//[Offset: 0x424, Size: 1]
	float AmbientOcclusionQuality;//[Offset: 0x428, Size: 1]
	float AmbientOcclusionMipBlend;//[Offset: 0x42c, Size: 1]
	float AmbientOcclusionMipScale;//[Offset: 0x430, Size: 1]
	float AmbientOcclusionMipThreshold;//[Offset: 0x434, Size: 1]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x438, Size: 1]
	float HirezAmbientOcclusionIntensity;//[Offset: 0x43c, Size: 1]
	float HirezAmbientOcclusionRejectionFalloff;//[Offset: 0x440, Size: 1]
	float HirezAmbientOcclusionAccentuation;//[Offset: 0x444, Size: 1]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x44c, Size: 1]
	LinearColor IndirectLightingColor;//[Offset: 0x450, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x460, Size: 1]
	enum RayTracingGIType;//[Offset: 0x464, Size: 1]
	int RayTracingGIMaxBounces;//[Offset: 0x468, Size: 1]
	int RayTracingGISamplesPerPixel;//[Offset: 0x46c, Size: 1]
	float ColorGradingIntensity;//[Offset: 0x470, Size: 1]
	Texture* ColorGradingLUT;//[Offset: 0x478, Size: 1]
	float DepthOfFieldSensorWidth;//[Offset: 0x480, Size: 1]
	float DepthOfFieldFocalDistance;//[Offset: 0x484, Size: 1]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x488, Size: 1]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x48c, Size: 1]
	float DepthOfFieldFocalRegion;//[Offset: 0x490, Size: 1]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x494, Size: 1]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x498, Size: 1]
	float DepthOfFieldScale;//[Offset: 0x49c, Size: 1]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4a0, Size: 1]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a4, Size: 1]
	float DepthOfFieldOcclusion;//[Offset: 0x4a8, Size: 1]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4ac, Size: 1]
	float DepthOfFieldVignetteSize;//[Offset: 0x4b0, Size: 1]
	float MotionBlurAmount;//[Offset: 0x4b4, Size: 1]
	float MotionBlurMax;//[Offset: 0x4b8, Size: 1]
	int MotionBlurTargetFPS;//[Offset: 0x4bc, Size: 1]
	float MotionBlurPerObjectSize;//[Offset: 0x4c0, Size: 1]
	float LPVIntensity;//[Offset: 0x4c4, Size: 1]
	float LPVVplInjectionBias;//[Offset: 0x4c8, Size: 1]
	float LPVSize;//[Offset: 0x4cc, Size: 1]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4d0, Size: 1]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4d4, Size: 1]
	float LPVGeometryVolumeBias;//[Offset: 0x4d8, Size: 1]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4dc, Size: 1]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4e0, Size: 1]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4e4, Size: 1]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e8, Size: 1]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4ec, Size: 1]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4f0, Size: 1]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4f4, Size: 1]
	enum ReflectionsType;//[Offset: 0x4f8, Size: 1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4fc, Size: 1]
	float ScreenSpaceReflectionQuality;//[Offset: 0x500, Size: 1]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x504, Size: 1]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x508, Size: 1]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x50c, Size: 1]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x510, Size: 1]
	enum RayTracingReflectionsShadows;//[Offset: 0x514, Size: 1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x515, Size: 1]
	enum TranslucencyType;//[Offset: 0x516, Size: 1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x518, Size: 1]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x51c, Size: 1]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x520, Size: 1]
	enum RayTracingTranslucencyShadows;//[Offset: 0x524, Size: 1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x525, Size: 1]
	int PathTracingMaxBounces;//[Offset: 0x528, Size: 1]
	int PathTracingSamplesPerPixel;//[Offset: 0x52c, Size: 1]
	float LPVFadeRange;//[Offset: 0x530, Size: 1]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x534, Size: 1]
	float ScreenPercentage;//[Offset: 0x538, Size: 1]
	WeightedBlendables WeightedBlendables;//[Offset: 0x540, Size: 1]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 1]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 1]
	FOscillator Yaw;//[Offset: 0xc, Size: 1]
	FOscillator Roll;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 1]
	float Frequency;//[Offset: 0x4, Size: 1]
	byte InitialOffset;//[Offset: 0x8, Size: 1]
	enum Waveform;//[Offset: 0x9, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 1]
	FOscillator Y;//[Offset: 0xc, Size: 1]
	FOscillator Z;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 1]
	float AnimLength;//[Offset: 0x30, Size: 1]
	Box BoundingBox;//[Offset: 0x34, Size: 1]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 1]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1]
	float BasePostProcessBlendWeight;//[Offset: 0x5b0, Size: 1]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 1]
	FName GroupName;//[Offset: 0x40, Size: 1]
	Color GroupColor;//[Offset: 0x48, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 1]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 1]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 1]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 1]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 1]
	float PlayRate;//[Offset: 0x50, Size: 1]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 1]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 1]
	byte PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x4475590
	void SetScale(float NewDuration);// 0x4475480
	void SetDuration(float NewDuration);// 0x4475100

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 1]
	Actor* GroupActor;//[Offset: 0x30, Size: 1]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 1]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 1]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 1]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 1]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 1]
	float LinCurveTension;//[Offset: 0xb8, Size: 1]
	float AngCurveTension;//[Offset: 0xbc, Size: 1]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 1]
	Vector OutVal;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 1]
	Rotator ResetRotation;//[Offset: 0x34, Size: 1]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x208, Size: 1]
	float InnerAttenuationRadius;//[Offset: 0x20c, Size: 1]
	float OuterAttenuationRadius;//[Offset: 0x210, Size: 1]
	class CameraShake* CameraShake;//[Offset: 0x218, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	void StopAllCameraShakes(bool bImmediately);// 0x447d880
	void PlayCameraShake(class CameraShake InCameraShake);// 0x447c160
	void Play();// 0x447c030
	float GetAttenuationFactor(out const Vector Location);// 0x4479e40

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x2c, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 1]
	float AlphaInTime;//[Offset: 0x38, Size: 1]
	float AlphaOutTime;//[Offset: 0x3c, Size: 1]
	float Alpha;//[Offset: 0x40, Size: 1]
	bool IsDisabled();// 0xe79550
	Actor* GetViewTarget();// 0x3b75300
	void EnableModifier();// 0x4474d00
	void DisableModifier(bool bImmediate);// 0x4474c70
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x2cbecb0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x2cbecb0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 1]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 1]
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 1]
	Transform RelativeTransform;//[Offset: 0x290, Size: 1]
	float BaseFOV;//[Offset: 0x2c0, Size: 1]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 1]
	float DistFromCamera;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 1]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	void ToggleActive();// 0x44922f0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4492220
	void SetTemplate(ParticleSystem* NewTemplate);// 0x2764f70
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4492160
	void SetFloatParameter(FName ParameterName, float Param);// 0x4492090
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4491fc0
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4491f00
	void OnRep_bCurrentlyActive();// 0x1eef160
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x279b820
	bool IsActive();// 0x4491ed0
	void Deactivate();// 0x4491eb0
	void Activate();// 0x4491e90

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x430, Size: 1]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x438, Size: 1]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x448, Size: 1]
	bool bRenderAfterDLSS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 1]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x459, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x459, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x459, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x459, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x459, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45a, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45a, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x45a, Size: 1]
	byte LODMethod;//[Offset: 0x465, Size: 1]
	enum RequiredSignificance;//[Offset: 0x466, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x468, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollidePacked;//[Size: 1]
	ParticleChannelContainer m_ParticleChannels;//[Offset: 0x4c8, Size: 1]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 1]
	Vector OldPosition;//[Offset: 0x4d0, Size: 1]
	Vector PartSysVelocity;//[Offset: 0x4dc, Size: 1]
	float WarmupTime;//[Offset: 0x4e8, Size: 1]
	float WarmupTickRate;//[Offset: 0x4ec, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0x4f4, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x4fc, Size: 1]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x520, Size: 1]
	float CustomTimeDilation;//[Offset: 0x538, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x590, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x598, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x5a0, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x5a1, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x5a2, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 1]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x454b2f0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x454b270
	void SetParticleChannels(out const ParticleChannelContainer Channels);// 0x454b1d0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x454b110
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x454acc0
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x454abc0
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x454aab0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x454a9a0
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x454a8a0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x454a790
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x454a6c0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x454a420
	int GetNumActiveParticles();// 0x454a320
	MaterialInterface* GetNamedMaterial(FName InName);// 0x454a280
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x454a140
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x454a020
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x4549f10
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x4549e00
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x4549ce0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x4549bd0
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x4549af0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x4549940
	void EndTrails();// 0x4549920
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x4549850
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4549670

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x454b4d0
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x454b440
	void SetFloatParameter(FName ParameterName, float Param);// 0x454b040
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x454af70
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x454aea0
	void SetBoolParameter(FName ParameterName, bool Param);// 0x454add0
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x454a540
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x454a350
	void ReleaseToPool();// 0x1f12240
	FXSystemAsset* GetFXSystemAsset();// 0x454a250

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 1]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 1]
	float WarmupTime;//[Offset: 0x38, Size: 1]
	float WarmupTickRate;//[Offset: 0x3c, Size: 1]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 1]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 1]
	float MacroUVRadius;//[Offset: 0x64, Size: 1]
	float[] LODDistances;//[Offset: 0x68, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 1]
	float Delay;//[Offset: 0xa8, Size: 1]
	float DelayLow;//[Offset: 0xac, Size: 1]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 1]
	byte LODMethod;//[Offset: 0xb3, Size: 1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 1]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 1]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 1]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 1]
	bool ContainsEmitterType(class Object TypeData);// 0x45497c0

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 1]
	int SubUVDataOffset;//[Offset: 0x30, Size: 1]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 1]
	int PeakActiveParticles;//[Offset: 0x50, Size: 1]
	int InitialAllocationCount;//[Offset: 0x54, Size: 1]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 1]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 1]
	ParticleChannelContainer m_ParticleChannels;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 1]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 1]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 1]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 1]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 1]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 1]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 1]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 1]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 1]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 1]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 1]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 1]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 1]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 1]
	byte ScreenAlignment;//[Offset: 0x58, Size: 1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	byte SortMode;//[Offset: 0x5a, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	float EmitterDuration;//[Offset: 0x5c, Size: 1]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 1]
	float EmitterDelay;//[Offset: 0xa0, Size: 1]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 1]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 1]
	float RandomImageTime;//[Offset: 0xb8, Size: 1]
	int RandomImageChanges;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	float MacroUVRadius;//[Offset: 0xcc, Size: 1]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	byte BoundingMode;//[Offset: 0xd1, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 1]
	float AlphaThreshold;//[Offset: 0xe0, Size: 1]
	int EmitterLoops;//[Offset: 0xe4, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 1]
	int MaxDrawCount;//[Offset: 0xf0, Size: 1]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 1]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 1]
	float TimeBias;//[Offset: 0x4, Size: 1]
	float[] Values;//[Offset: 0x8, Size: 1]
	byte Op;//[Offset: 0x18, Size: 1]
	byte EntryCount;//[Offset: 0x19, Size: 1]
	byte EntryStride;//[Offset: 0x1a, Size: 1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 1]
	byte LockFlag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 1]
	int CountLow;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 1]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0x98, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xa0, Size: 1]
	RawDistributionFloat BurstScale;//[Offset: 0xb0, Size: 1]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 1]
	int ParticleFrequency;//[Offset: 0x8, Size: 1]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 1]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 1]
	OrbitOptions OffsetOptions;//[Offset: 0x88, Size: 1]
	RawDistributionVector RotationAmount;//[Offset: 0x90, Size: 1]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 1]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 1]
	OrbitOptions RotationRateOptions;//[Offset: 0x128, Size: 1]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	Vector MinValueVec;//[Offset: 0x28, Size: 1]
	Vector MaxValueVec;//[Offset: 0x34, Size: 1]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 1]
	FName EventName;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ParticleChannelContainer
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool Friendly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool Enemy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool TaskForce1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool TaskForce2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool VerticalTargeter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool LocalOwner;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool NotLocalOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool CustomFilter1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool CustomFilter2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool CustomFilter3;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool CustomFilter4;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool CustomFilter5;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 1]
	int ActiveTab;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 1]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 1]
	float ViewStartInput;//[Offset: 0x20, Size: 1]
	float ViewEndInput;//[Offset: 0x24, Size: 1]
	float ViewStartOutput;//[Offset: 0x28, Size: 1]
	float ViewEndOutput;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 1]
	Color CurveColor;//[Offset: 0x8, Size: 1]
	FString CurveName;//[Offset: 0x10, Size: 1]
	int bHideCurve;//[Offset: 0x20, Size: 1]
	int bColorCurve;//[Offset: 0x24, Size: 1]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 1]
	int bClamp;//[Offset: 0x2c, Size: 1]
	float ClampLow;//[Offset: 0x30, Size: 1]
	float ClampHigh;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 1]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 1]
	float Scalar_Low;//[Offset: 0x10, Size: 1]
	Vector Vector;//[Offset: 0x14, Size: 1]
	Vector Vector_Low;//[Offset: 0x20, Size: 1]
	Color Color;//[Offset: 0x2c, Size: 1]
	Actor* Actor;//[Offset: 0x30, Size: 1]
	MaterialInterface* Material;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x5f0, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 1]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 1]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 1]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 1]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	float AspectRatio;//[Offset: 0x244, Size: 1]
	float FOVAngle;//[Offset: 0x248, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 1]
	int GetAutoActivatePlayerIndex();// 0x4474d20

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x208, Size: 1]
	float OrthoWidth;//[Offset: 0x20c, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x210, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x214, Size: 1]
	float AspectRatio;//[Offset: 0x218, Size: 1]
	float MaxAspectRatio;//[Offset: 0x21c, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x220, Size: 1]
	byte ProjectionMode;//[Offset: 0x221, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x260, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x290, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x4475500
	void SetProjectionMode(byte InProjectionMode);// 0x4475400
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4475380
	void SetOrthoWidth(float InOrthoWidth);// 0x4475300
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4475280
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4475200
	void SetFieldOfView(float InFieldOfView);// 0x4475180
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x4475070
	void SetAspectRatio(float InAspectRatio);// 0x4474ff0
	void RemoveBlendable(interface classNone InBlendableObject);// 0x4474ec0
	void OnCameraMeshHiddenChanged();// 0xd76f80
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x4474d50
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4474b20

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 1]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 1]
	void Walk();// 0x2673a70
	void ViewSelf();// 0x2967ee0
	void ViewPlayer(FString S);// 0x4483e60
	void ViewClass(class Actor DesiredClass);// 0x4483dd0
	void ViewActor(FName ActorName);// 0x4483d40
	void UpdateSafeArea();// 0x4483d20
	void ToggleServerStatReplicatorUpdateStatNet();// 0x4483d00
	void ToggleServerStatReplicatorClientOverwrite();// 0x4483ce0
	void ToggleDebugCamera();// 0x4483cc0
	void ToggleAILogging();// 0xe65380
	void TestCollisionDistance();// 0x4483ca0
	void Teleport();// 0x27df290
	void Summon(FString ClassName);// 0x4483c00
	void StreamLevelOut(FName PackageName);// 0x4441390
	void StreamLevelIn(FName PackageName);// 0x4483b70
	void SpawnServerStatReplicator();// 0x4483b50
	void Slomo(float NewTimeDilation);// 0x4483ad0
	void SetWorldOrigin();// 0x4483ab0
	void SetMouseSensitivityToDefault();// 0x1ef9a50
	void ServerToggleAILogging();// 0x44839d0
	void ReceiveInitCheatManager();// 0x2cbecb0
	void ReceiveEndPlay();// 0x2cbecb0
	void PlayersOnly();// 0x2966ab0
	void OnlyLoadLevel(FName PackageName);// 0x4441300
	void LogLoc();// 0x44839b0
	void InvertMouse();// 0x1ef9a30
	void God();// 0x4483990
	void Ghost();// 0x4474d00
	void FreezeFrame(float Delay);// 0x4483910
	void Fly();// 0xe6f840
	void FlushLog();// 0x44838f0
	void EnableDebugCamera();// 0x1ec4710
	void DumpVoiceMutingState();// 0x44838d0
	void DumpPartyState();// 0x44838b0
	void DumpOnlineSessionState();// 0x4483890
	void DumpChatState();// 0x4483870
	void DisableDebugCamera();// 0x4483850
	void DestroyTarget();// 0x27df6b0
	void DestroyServerStatReplicator();// 0x4483830
	void DestroyPawns(class Pawn aClass);// 0xe6f9f0
	void DestroyAllPawnsExceptTarget();// 0xe6fa80
	void DestroyAll(class Actor aClass);// 0x44837a0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x44836d0
	void DebugCapsuleSweepPawn();// 0x44836b0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4483620
	void DebugCapsuleSweepClear();// 0x4483600
	void DebugCapsuleSweepChannel(byte Channel);// 0x4483580
	void DebugCapsuleSweepCapture();// 0x4483560
	void DebugCapsuleSweep();// 0x4483540
	void DamageTarget(float DamageAmount);// 0x44834c0
	void CheatScript(FString ScriptName);// 0x44833e0
	void ChangeSize(float F);// 0x4483360
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x44831a0
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4482fd0
	void BugIt(FString ScreenShotDescription);// 0x4482f30

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x588, Size: 1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x588, Size: 1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x588, Size: 1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x588, Size: 1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x588, Size: 1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x588, Size: 1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x588, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x590, Size: 1]
	Actor* SelectedActor;//[Offset: 0x598, Size: 1]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5a0, Size: 1]
	HitResult SelectedHitPoint;//[Offset: 0x5a8, Size: 1]
	PlayerController* OriginalControllerRef;//[Offset: 0x630, Size: 1]
	Player* OriginalPlayer;//[Offset: 0x638, Size: 1]
	float SpeedScale;//[Offset: 0x640, Size: 1]
	float InitialMaxSpeed;//[Offset: 0x644, Size: 1]
	float InitialAccel;//[Offset: 0x648, Size: 1]
	float InitialDecel;//[Offset: 0x64c, Size: 1]
	void ToggleDisplay();// 0x448bea0
	void ShowDebugSelectedInfo();// 0x26abbb0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x448bda0
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x2cbecb0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x2cbecb0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x2cbecb0
	Actor* GetSelectedActor();// 0x448b8a0

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x430, Size: 1]
	float FrustumAngle;//[Offset: 0x434, Size: 1]
	float FrustumAspectRatio;//[Offset: 0x438, Size: 1]
	float FrustumStartDist;//[Offset: 0x43c, Size: 1]
	float FrustumEndDist;//[Offset: 0x440, Size: 1]
	Texture* Texture;//[Offset: 0x448, Size: 1]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 1]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 1]
	TouchRegionState[] TouchRegionStates;//[Offset: 0x12b0, Size: 1]
	void SetMouseSensitivity(const float Sensitivity);// 0x45645f0
	void SetBind(FName BindName, FString Command);// 0x4563f80
	void InvertAxisKey(const Key AxisKey);// 0x4563e20
	void InvertAxis(const FName AxisName);// 0x4563da0
	void ClearSmoothing();// 0x4563910

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 1]
	FString Command;//[Offset: 0x18, Size: 1]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: TouchRegionState

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x118, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x128, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x138, Size: 1]
	delegate ForegroundColorDelegate;//[Offset: 0x160, Size: 1]
	Margin Padding;//[Offset: 0x170, Size: 1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x180, Size: 1]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x190, Size: 1]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1a0, Size: 1]
	WidgetTree* WidgetTree;//[Offset: 0x1b0, Size: 1]
	int Priority;//[Offset: 0x1b8, Size: 1]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bc, Size: 1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bc, Size: 1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bc, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bc, Size: 1]
	enum TickFrequency;//[Offset: 0x1c8, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1d0, Size: 1]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1d8, Size: 1]
	void UnregisterInputComponent();// 0x27d5b60
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3b73140
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3b73060
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x3b72fe0
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x3b72f60
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x3b72ea0
	void StopListeningForAllInputActions();// 0x3b72e80
	void StopAnimationsAndLatentActions();// 0x3b72e60
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x3b72de0
	void StopAllAnimations();// 0x3b72dc0
	void SetZOrderInViewport(int ZOrder);// 0x3b72d40
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x3b72a70
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3b729a0
	void SetPadding(Margin InPadding);// 0x3b72910
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x3b72890
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x3b727d0
	void SetInputActionPriority(int NewPriority);// 0x3b72650
	void SetInputActionBlocking(bool bShouldBlock);// 0x3b725c0
	void SetForegroundColor(SlateColor InForegroundColor);// 0x3b72450
	void SetDesiredSizeInViewport(Vector2D Size);// 0x3b723d0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3b722d0
	void SetAnchorsInViewport(Anchors Anchors);// 0x3b72240
	void SetAlignmentInViewport(Vector2D Alignment);// 0x3b721c0
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x3b72140
	void RemoveFromViewport();// 0x3b72120
	void RegisterInputComponent();// 0x3b72100
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void PlaySound(SoundBase* SoundToPlay);// 0x3b72080
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x3b71e90
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x3b71d80
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x3b71c70
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState, bool bEvaluateFirstFrame);// 0x3b71a60
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x3b719c0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2cbecb0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2cbecb0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x2cbecb0
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2cbecb0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2cbecb0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x2cbecb0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2cbecb0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2cbecb0
	void OnPaint(out PaintContext Context);// 0x2cbecb0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2cbecb0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2cbecb0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x2cbecb0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2cbecb0
	void OnMouseCaptureLost();// 0x2cbecb0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2cbecb0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2cbecb0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x2cbecb0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x2cbecb0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2cbecb0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2cbecb0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x2cbecb0
	void OnInitialized();// 0x2cbecb0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x2cbecb0
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2cbecb0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2cbecb0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2cbecb0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2cbecb0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2cbecb0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x2cbecb0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2cbecb0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x3b71930
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x3b718a0
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x2cbecb0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x2cbecb0
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x3b71720
	bool IsPlayingAnimation();// 0x3b716f0
	bool IsListeningForInputAction(FName ActionName);// 0x3b71660
	bool IsInViewport();// 0x3b71490
	bool IsInteractable();// 0x2cbecb0
	bool IsAnyAnimationPlaying();// 0x3b71630
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x3b715a0
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3b71510
	Pawn* GetOwningPlayerPawn();// 0x3b714c0
	bool GetIsVisible();// 0x3b71490
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x3b713f0
	Anchors GetAnchorsInViewport();// 0x3b713b0
	Vector2D GetAlignmentInViewport();// 0x3b71370
	void Destruct();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void CancelLatentActions();// 0x3b71350
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3b71270
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3b71190
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x3b71020
	void AddToViewport(int ZOrder);// 0x3b70fa0
	bool AddToPlayerScreen(int ZOrder);// 0x3b70f10

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 1]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 1]
	FText ToolTipText;//[Offset: 0x40, Size: 1]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 1]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 1]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 1]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 1]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 1]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 1]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bAllowRenderInterpolation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bIssueGlobalInvalidateOnVisible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	byte DebugWidgetIndex;//[Offset: 0xc1, Size: 1]
	byte Cursor;//[Offset: 0xc2, Size: 1]
	enum Clipping;//[Offset: 0xc3, Size: 1]
	enum Visibility;//[Offset: 0xc4, Size: 1]
	float RenderOpacity;//[Offset: 0xc8, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xd0, Size: 1]
	enum FlowDirectionPreference;//[Offset: 0xd8, Size: 1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x100, Size: 1]
	void SetVisibility(enum InVisibility);// 0x3b768f0
	void SetUserFocus(PlayerController* PlayerController);// 0x3b766d0
	void SetToolTipText(out const FText InToolTipText);// 0x3b76600
	void SetToolTip(Widget* Widget);// 0x3b76580
	void SetRenderTranslation(Vector2D Translation);// 0x3b76470
	void SetRenderTransformPivot(Vector2D Pivot);// 0x3b763f0
	void SetRenderTransformAngle(float Angle);// 0x3b76370
	void SetRenderTransform(WidgetTransform InTransform);// 0x3b76290
	void SetRenderShear(Vector2D Shear);// 0x3b76210
	void SetRenderScale(Vector2D Scale);// 0x3b76190
	void SetRenderOpacity(float InOpacity);// 0x3b76110
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x3b75fc0
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x3b75ee0
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x3b75e00
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x3b75d40
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x3b75c30
	void SetKeyboardFocus();// 0x3b75c10
	void SetIsEnabled(bool bInIsEnabled);// 0x3b75b80
	void SetFocus();// 0x3b75ae0
	void SetCursor(byte InCursor);// 0x3b75a60
	void SetClipping(enum InClipping);// 0x3b759e0
	void SetAllowRenderInterpolation(bool bInAllowInterpolation);// 0x3b75950
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x3b75890
	void ResetCursor();// 0x3b75870
	void RemoveFromParent();// 0xe706d0
	EventReply OnReply__DelegateSignature();// 0x2cbecb0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2cbecb0
	bool IsVisible();// 0x3b75840
	bool IsHovered();// 0x372b970
	void InvalidateLayoutAndVolatility();// 0x3b75820
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x3b75790
	bool HasUserFocus(PlayerController* PlayerController);// 0x3b75700
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x3b75640
	bool HasMouseCapture();// 0x3b75610
	bool HasKeyboardFocus();// 0x3b755e0
	bool HasFocusedDescendants();// 0x3b755b0
	bool HasAnyUserFocus();// 0x3b75580
	Widget* GetWidget__DelegateSignature();// 0x2cbecb0
	enum GetVisibility();// 0x3b75550
	Geometry GetTickSpaceGeometry();// 0x3b75430
	FText GetText__DelegateSignature();// 0x2cbecb0
	enum GetSlateVisibility__DelegateSignature();// 0x2cbecb0
	SlateColor GetSlateColor__DelegateSignature();// 0x2cbecb0
	SlateBrush GetSlateBrush__DelegateSignature();// 0x2cbecb0
	float GetRenderTransformAngle();// 0x3b753d0
	float GetRenderOpacity();// 0x3b753a0
	PanelWidget* GetParent();// 0x3b75370
	Geometry GetPaintSpaceGeometry();// 0x3b75330
	PlayerController* GetOwningPlayer();// 0x3b75300
	LocalPlayer* GetOwningLocalPlayer();// 0x125c220
	byte GetMouseCursor__DelegateSignature();// 0x2cbecb0
	LinearColor GetLinearColor__DelegateSignature();// 0x2cbecb0
	bool GetIsEnabled();// 0x3b752d0
	int GetInt32__DelegateSignature();// 0x2cbecb0
	GameInstance* GetGameInstance();// 0x3b752a0
	float GetFloat__DelegateSignature();// 0x2cbecb0
	Vector2D GetDesiredSize();// 0x3b75230
	enum GetClipping();// 0x3b75200
	enum GetCheckBoxState__DelegateSignature();// 0x2cbecb0
	Geometry GetCachedGeometry();// 0x3b751c0
	bool GetBool__DelegateSignature();// 0x2cbecb0
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x2cbecb0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x2cbecb0
	void ForceVolatile(bool bForce);// 0x3b75130
	void ForceLayoutPrepass();// 0x3b75110

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 1]
	Widget* Content;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x110, Size: 1]
	bool RemoveChildAt(int Index);// 0x3b62b80
	bool RemoveChild(Widget* Content);// 0x3b62af0
	bool HasChild(Widget* Content);// 0x3b62970
	bool HasAnyChildren();// 0x3b62940
	int GetChildrenCount();// 0x3b625f0
	int GetChildIndex(const Widget* Content);// 0x3b62560
	Widget* GetChildAt(int Index);// 0x3b624d0
	Widget*[] GetAllChildren();// 0x3b62450
	void ClearChildren();// 0xe6f8a0
	PanelSlot* AddChild(Widget* Content);// 0x3b62280

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 1]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 1]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	FString DisplayLabel;//[Offset: 0x368, Size: 1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3b76be0
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3b76b00
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x3b76a80
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x3b76a00
	float GetStartTime();// 0x3b75400
	float GetEndTime();// 0x3b75270
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3b75030
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3b74f50

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 1]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x39e4090
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x39e3fe0

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 1]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 1]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 1]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 1]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 1]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 1]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 1]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 1]
	FrameRate TickResolution;//[Offset: 0x108, Size: 1]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 1]
	enum EvaluationType;//[Offset: 0x118, Size: 1]
	enum ClockSource;//[Offset: 0x119, Size: 1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 1]
	FName[] Tags;//[Offset: 0x30, Size: 1]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Guid Guid;//[Offset: 0x44, Size: 1]
	FString Name;//[Offset: 0x58, Size: 1]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 1]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 1]
	enum Ownership;//[Offset: 0x80, Size: 1]
	FName LevelName;//[Offset: 0x84, Size: 1]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 1]
	Guid Guid;//[Offset: 0x10, Size: 1]
	FString Name;//[Offset: 0x20, Size: 1]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 1]
	Guid ParentGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 1]
	FString BindingName;//[Offset: 0x10, Size: 1]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 1]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 1]
	int Denominator;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	FString Label;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 1]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 1]
	Guid SequenceSignature;//[Offset: 0x170, Size: 1]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 1]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 1]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 1]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 1]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 1]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 1]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 1]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 1]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 1]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 1]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 1]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 1]
	int NumInitPtrs;//[Offset: 0x4, Size: 1]
	int NumEvalPtrs;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 1]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 1]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 1]
	uint16 SetupIndex;//[Offset: 0xc, Size: 1]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 1]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]
	uint32 SectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 1]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 1]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 1]
	FrameRate TickResolution;//[Offset: 0x38, Size: 1]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 1]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 1]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 1]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 1]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 1]
	int HierarchicalBias;//[Offset: 0x94, Size: 1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 1]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 1]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 1]
	FrameTime Offset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	float SubFrame;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber start;//[Offset: 0x0, Size: 1]
	FrameNumber end;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 1]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 1]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 1]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 1]
	FName SlotWidgetName;//[Offset: 0x8, Size: 1]
	Guid AnimationGuid;//[Offset: 0x10, Size: 1]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 1]
	Vector2D Scale;//[Offset: 0x8, Size: 1]
	Vector2D Shear;//[Offset: 0x10, Size: 1]
	float Angle;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 1]
	FText AccessibleText;//[Offset: 0x30, Size: 1]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 1]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 1]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 1]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 1]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 1]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 1]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 1]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 1]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 1]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 1]
	Widget* Widget;//[Offset: 0xc, Size: 1]
	delegate CustomDelegate;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 1]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 1]
	FName DestinationProperty;//[Offset: 0x58, Size: 1]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 1]
	Function* CachedFunction;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* Struct;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: EventReply

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 1]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 1]
	float Top;//[Offset: 0x4, Size: 1]
	float Right;//[Offset: 0x8, Size: 1]
	float Bottom;//[Offset: 0xc, Size: 1]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 1]
	void SetUserTag(FName InUserTag);// 0x3b72c40
	FName GetUserTag();// 0x3b714f0

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 1]
	Margin Margin;//[Offset: 0x10, Size: 1]
	SlateColor TintColor;//[Offset: 0x20, Size: 1]
	Object* ResourceObject;//[Offset: 0x48, Size: 1]
	FName ResourceName;//[Offset: 0x50, Size: 1]
	Box2D UVRegion;//[Offset: 0x58, Size: 1]
	byte DrawAs;//[Offset: 0x6c, Size: 1]
	byte Tiling;//[Offset: 0x6d, Size: 1]
	byte Mirroring;//[Offset: 0x6e, Size: 1]
	byte ImageType;//[Offset: 0x6f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 1]
	Vector2D Max;//[Offset: 0x8, Size: 1]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 1]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int ControllerId;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 1]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 1]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 1]
	World* World;//[Offset: 0x78, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 1]
	void SSSwapControllers();// 0x2601810
	void ShowTitleSafeArea();// 0x26fff70
	void SetConsoleTarget(int PlayerIndex);// 0x44b4670

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 1]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 1]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 1]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 1]
	float DefaultHeight;//[Offset: 0x130, Size: 1]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 1]
	class Object* WithinClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 1]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 1]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 1]
	void ReceiveShutdown();// 0x2cbecb0
	void ReceiveInit();// 0x2cbecb0
	void HandleTravelError(byte FailureType);// 0x2cbecb0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x2cbecb0
	void DebugRemovePlayer(int ControllerId);// 0x449c960
	void DebugCreatePlayer(int ControllerId);// 0x449c8d0

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 1]
	Widget* Content;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 1]
	bool WasControllerKeyJustReleased(Key Key);// 0x44b9790
	bool WasControllerKeyJustPressed(Key Key);// 0x44b9790
	bool IsControllerKeyDown(Key Key);// 0x44b9790
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x44b9610
	Vector GetControllerVectorKeyState(Key Key);// 0x44b90b0
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x44b8fd0
	float GetControllerKeyTimeDown(Key Key);// 0x44b8dc0
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x44b8eb0
	float GetControllerAnalogKeyState(Key Key);// 0x44b8dc0

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 1]
	delegate Delegate;//[Offset: 0x8, Size: 1]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 1]
	Vector2D Maximum;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 1]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 1]
	float Duration;//[Offset: 0xf8, Size: 1]
	float MaxDistance;//[Offset: 0xfc, Size: 1]
	float TotalSamples;//[Offset: 0x100, Size: 1]
	float Priority;//[Offset: 0x104, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 1]
	SoundModulation Modulation;//[Offset: 0x110, Size: 1]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 1]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 1]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 1]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 1]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 1]
	SoundClass*[] ChildClasses;//[Offset: 0x88, Size: 1]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x98, Size: 1]
	SoundModulation Modulation;//[Offset: 0xa8, Size: 1]
	SoundClass* ParentClass;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 1]
	float Pitch;//[Offset: 0x4, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 1]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 1]
	float StereoBleed;//[Offset: 0x10, Size: 1]
	float LFEBleed;//[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 1]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 1]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 1]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 1]
	bool bApplyInsulationVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	byte OutputTarget;//[Offset: 0x30, Size: 1]
	enum LoadingBehavior;//[Offset: 0x31, Size: 1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 1]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 1]
	float OutputVolume;//[Offset: 0x68, Size: 1]
	MulticastInlineDelegateProperty OnSubmixRecordedFileDone;//[Size: 1]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x4597dd0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x4597d50
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x4597c80
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x4597c00
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x45975d0
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x45928d0

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 1]
	int StreamingPriority;//[Offset: 0x164, Size: 1]
	enum SampleRateQuality;//[Offset: 0x168, Size: 1]
	byte SoundGroup;//[Offset: 0x16a, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 1]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 1]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 1]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 1]
	FString SpokenText;//[Offset: 0x1e8, Size: 1]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 1]
	float Volume;//[Offset: 0x1fc, Size: 1]
	float Pitch;//[Offset: 0x200, Size: 1]
	int NumChannels;//[Offset: 0x204, Size: 1]
	int SampleRate;//[Offset: 0x208, Size: 1]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 1]
	CurveTable* Curves;//[Offset: 0x228, Size: 1]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 1]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 1]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 1]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 1]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 1]
	float InitialDelay;//[Offset: 0x80, Size: 1]
	float FadeInTime;//[Offset: 0x84, Size: 1]
	float Duration;//[Offset: 0x88, Size: 1]
	float FadeOutTime;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 1]
	float Gain0;//[Offset: 0x14, Size: 1]
	float Bandwidth0;//[Offset: 0x18, Size: 1]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 1]
	float Gain1;//[Offset: 0x20, Size: 1]
	float Bandwidth1;//[Offset: 0x24, Size: 1]
	float FrequencyCenter2;//[Offset: 0x28, Size: 1]
	float Gain2;//[Offset: 0x2c, Size: 1]
	float Bandwidth2;//[Offset: 0x30, Size: 1]
	float FrequencyCenter3;//[Offset: 0x34, Size: 1]
	float Gain3;//[Offset: 0x38, Size: 1]
	float Bandwidth3;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 1]
	float VolumeAdjuster;//[Offset: 0x8, Size: 1]
	float PitchAdjuster;//[Offset: 0xc, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 1]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x8, Size: 1]
	float VolumeScale;//[Offset: 0xc, Size: 1]
	float VolumeScaleAttackTime;//[Offset: 0x10, Size: 1]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VolumeScaleReleaseTime;//[Offset: 0x18, Size: 1]
	float VoiceStealReleaseTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 1]
	float BinauralRadius;//[Offset: 0xb4, Size: 1]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 1]
	float OmniRadius;//[Offset: 0xbc, Size: 1]
	float StereoSpread;//[Offset: 0xc0, Size: 1]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 1]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 1]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 1]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 1]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 1]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 1]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 1]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 1]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 1]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 1]
	float FocusPriorityScale;//[Offset: 0x200, Size: 1]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 1]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 1]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 1]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 1]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 1]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 1]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 1]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 1]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 1]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 1]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 1]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 1]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 1]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 1]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 1]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 1]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 1]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 1]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 1]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 1]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 1]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	byte AttenuationShape;//[Offset: 0x9, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 1]
	enum FalloffMode;//[Offset: 0x10, Size: 1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 1]
	float ConeOffset;//[Offset: 0x20, Size: 1]
	float FalloffDistance;//[Offset: 0x24, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 1]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 1]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 1]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 1]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 1]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 1]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 1]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 1]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 1]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 1]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 1]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 1]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x310, Size: 1]
	float SourceBusDuration;//[Offset: 0x314, Size: 1]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 1]
	Object* Payload;//[Offset: 0x38, Size: 1]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 1]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 1]
	MulticastInlineDelegateProperty OnDrop;//[Size: 1]
	MulticastInlineDelegateProperty OnDragCancelled;//[Size: 1]
	MulticastInlineDelegateProperty OnDragged;//[Size: 1]
	void Drop(out const PointerEvent PointerEvent);// 0x3b59550
	void Dragged(out const PointerEvent PointerEvent);// 0x3b59420
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3b592f0

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 1]
	float Duration;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 1]
	NetDriver* Driver;//[Offset: 0x58, Size: 1]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 1]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 1]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 1]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 1]
	Actor* ViewTarget;//[Offset: 0x90, Size: 1]
	Actor* OwningActor;//[Offset: 0x98, Size: 1]
	int MaxPacket;//[Offset: 0xa0, Size: 1]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 1]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 1]
	Channel*[] ChannelsToTick;//[Offset: 0x1520, Size: 1]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1a90, Size: 1]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 1]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 1]
	int MaxDownloadSize;//[Offset: 0x50, Size: 1]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 1]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 1]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 1]
	int MaxClientRate;//[Offset: 0x64, Size: 1]
	float ServerTravelPause;//[Offset: 0x68, Size: 1]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 1]
	float RelevantTimeout;//[Offset: 0x70, Size: 1]
	float KeepAliveTime;//[Offset: 0x74, Size: 1]
	float LossyConnectionThreshold;//[Offset: 0x78, Size: 1]
	float HandshakeTimeout;//[Offset: 0x7c, Size: 1]
	float InitialConnectTimeout;//[Offset: 0x80, Size: 1]
	float ConnectionTimeout;//[Offset: 0x84, Size: 1]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x88, Size: 1]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x90, Size: 1]
	NetConnection*[] ClientConnections;//[Offset: 0x98, Size: 1]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x108, Size: 1]
	World* World;//[Offset: 0x148, Size: 1]
	Package* WorldPackage;//[Offset: 0x150, Size: 1]
	class Object* NetConnectionClass;//[Offset: 0x178, Size: 1]
	class Object* ReplicationDriverClass;//[Offset: 0x180, Size: 1]
	FName NetDriverName;//[Offset: 0x198, Size: 1]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x1a0, Size: 1]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1b0, Size: 1]
	NetThrottleSpawnDefinition[] ThrottleSpawnDefinitions;//[Offset: 0x200, Size: 1]
	int[] ThrottleSpawnsRemaining;//[Offset: 0x210, Size: 1]
	uint32 ThrottleSpawnPausedFrameNumber;//[Offset: 0x220, Size: 1]
	Channel*[] ActorChannelPool;//[Offset: 0x228, Size: 1]
	float Time;//[Offset: 0x240, Size: 1]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x718, Size: 1]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 1]
	FName ClassName;//[Offset: 0x8, Size: 1]
	class Object* ChannelClass;//[Offset: 0x10, Size: 1]
	int StaticChannelIndex;//[Offset: 0x18, Size: 1]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NetThrottleSpawnDefinition
	FName SpawnBucketIdentifier;//[Offset: 0x0, Size: 1]
	int NumSpawnsPerFrame;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 1]
	float ActiveOpacity;//[Offset: 0x38, Size: 1]
	float InactiveOpacity;//[Offset: 0x3c, Size: 1]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 1]
	float TimeUntilReset;//[Offset: 0x44, Size: 1]
	float ActivationDelay;//[Offset: 0x48, Size: 1]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 1]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 1]
	Texture2D* Image2;//[Offset: 0x8, Size: 1]
	Vector2D Center;//[Offset: 0x10, Size: 1]
	Vector2D VisualSize;//[Offset: 0x18, Size: 1]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 1]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 1]
	Vector2D InputScale;//[Offset: 0x30, Size: 1]
	Key MainInputKey;//[Offset: 0x38, Size: 1]
	Key AltInputKey;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x280, Size: 1]
	float BaseLookUpRate;//[Offset: 0x284, Size: 1]
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 1]
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 1]
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 1]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	void TurnAtRate(float Rate);// 0x27a61b0
	void MoveUp_World(float Val);// 0x448b9d0
	void MoveRight(float Val);// 0x448b950
	void MoveForward(float Val);// 0x448b8d0
	void LookUpAtRate(float Rate);// 0x27a6130

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x448, Size: 1]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x4597170
	float GetUnscaledSphereRadius();// 0x447a3a0
	float GetShapeScale();// 0x4595650
	float GetScaledSphereRadius();// 0x4595600

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid StaticMeshGuid;//[Offset: 0x458, Size: 1]
	int ForcedLodModel;//[Offset: 0x468, Size: 1]
	int PreviousLODLevel;//[Offset: 0x46c, Size: 1]
	int MinLOD;//[Offset: 0x470, Size: 1]
	int SubDivisionStepSize;//[Offset: 0x474, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x478, Size: 1]
	Color WireframeColorOverride;//[Offset: 0x480, Size: 1]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x484, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x484, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x484, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x484, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x484, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x484, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x485, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x485, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x485, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x485, Size: 1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x485, Size: 1]
	bool bHasReflectionCaptureOverrideLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x485, Size: 1]
	Vector ReflectionCaptureOverrideLocation;//[Offset: 0x488, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x494, Size: 1]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x498, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0x49c, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x4a0, Size: 1]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4a8, Size: 1]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4b8, Size: 1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4c8, Size: 1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x459f5e0
	void SetReverseCulling(bool ReverseCulling);// 0x459f3b0
	void SetForcedLodModel(int NewForcedLodModel);// 0x459efb0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x459ed30
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x459ecb0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x459eb30

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 1]
	int TextureLevelIndex;//[Offset: 0x4, Size: 1]
	float TexelFactor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 1]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 1]
	float EmissiveBoost;//[Offset: 0xc, Size: 1]
	float DiffuseBoost;//[Offset: 0x10, Size: 1]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 1]
	bool bAllowShadowInShadowOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 1]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 1]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 1]
	FName Filename;//[Offset: 0x8, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 1]
	int UUID;//[Offset: 0x4, Size: 1]
	FName ExecutionFunction;//[Offset: 0x8, Size: 1]
	Object* CallbackTarget;//[Offset: 0x10, Size: 1]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 1]
	int Index;//[Offset: 0x4, Size: 1]
	int SelectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 1]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 1]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 1]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 1]
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 1]
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 1]
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 1]
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 1]
	class HUD* HUDClass;//[Offset: 0x250, Size: 1]
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 1]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 1]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 1]
	GameSession* GameSession;//[Offset: 0x278, Size: 1]
	GameStateBase* GameState;//[Offset: 0x280, Size: 1]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 1]
	FText DefaultPlayerName;//[Offset: 0x290, Size: 1]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	void StartPlay();// 0x1ef1120
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x44a9580
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x44a9460
	bool ShouldReset(Actor* ActorToReset);// 0x44a8f80
	void ReturnToMainMenuHost();// 0xe69990
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x44a7e90
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x44a7dc0
	void RestartPlayer(Controller* NewPlayer);// 0x44a7d30
	void ResetLevel();// 0xe6a500
	bool PlayerCanRestart(PlayerController* Player);// 0x26197d0
	bool MustSpectate(PlayerController* NewPlayerController);// 0x2765000
	void K2_PostLogin(PlayerController* NewPlayer);// 0x2cbecb0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x2cbecb0
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x2cbecb0
	void K2_OnLogout(Controller* ExitingController);// 0x2cbecb0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x2cbecb0
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x44a5e30
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x27177d0
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x279b820
	bool HasMatchStarted();// 0x26bc230
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x1ef3020
	int GetNumSpectators();// 0x44a4c30
	int GetNumPlayers();// 0x44a4c00
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x44a45a0
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x44a3660
	Actor* ChoosePlayerStart(Controller* Player);// 0x44a2ae0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x44a29c0
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x44a28d0

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 1]
	int MaxPlayers;//[Offset: 0x224, Size: 1]
	int MaxPartySize;//[Offset: 0x228, Size: 1]
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	FName SessionName;//[Offset: 0x230, Size: 1]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 1]
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 1]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 1]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 1]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 1]
	void OnRep_SpectatorClass();// 0x1efdc20
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1ef2f10
	void OnRep_ReplicatedHasBegunPlay();// 0x1ef10e0
	void OnRep_GameModeClass();// 0x1ef3f90
	bool HasMatchStarted();// 0x44ae2d0
	bool HasBegunPlay();// 0x2699320
	float GetServerWorldTimeSeconds();// 0x44ae170
	float GetPlayerStartTime(Controller* Controller);// 0x44adc80
	float GetPlayerRespawnDelay(Controller* Controller);// 0x44adbe0

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	uint32 Channels;//[Offset: 0x224, Size: 1]
	uint32 InRate;//[Offset: 0x228, Size: 1]
	uint32 OutRate;//[Offset: 0x22c, Size: 1]
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 1]
	uint32 InRateClientMax;//[Offset: 0x238, Size: 1]
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 1]
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 1]
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 1]
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 1]
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 1]
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 1]
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 1]
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 1]
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 1]
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 1]
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 1]
	uint32 NetNumClients;//[Offset: 0x268, Size: 1]
	uint32 InPackets;//[Offset: 0x26c, Size: 1]
	uint32 OutPackets;//[Offset: 0x270, Size: 1]
	uint32 InBunches;//[Offset: 0x274, Size: 1]
	uint32 OutBunches;//[Offset: 0x278, Size: 1]
	uint32 OutLoss;//[Offset: 0x27c, Size: 1]
	uint32 InLoss;//[Offset: 0x280, Size: 1]
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 1]
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 1]
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 1]
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 1]
	uint32 PercentInVoice;//[Offset: 0x294, Size: 1]
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 1]
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 1]
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 1]
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 1]
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 1]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 1]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 1]
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 1]
	uint32 NumActors;//[Offset: 0x2b8, Size: 1]
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 1]
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 1]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 1]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 1]
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 1]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 1]
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 1]
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 1]
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 1]
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 1]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 1]
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 1]
	int BadPingThreshold;//[Offset: 0x228, Size: 1]
	int SeverePingThreshold;//[Offset: 0x22c, Size: 1]
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 1]
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 1]
	int TotalNetBandwidth;//[Offset: 0x238, Size: 1]
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 1]
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 1]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 1]
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 1]
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 1]
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 1]
	float PercentForBadPing;//[Offset: 0x258, Size: 1]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 1]
	float MoveRepSize;//[Offset: 0x260, Size: 1]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 1]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 1]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 1]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 1]
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 1]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 1]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 1]
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 1]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 1]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 1]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 1]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 1]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 1]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 1]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 1]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 1]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 1]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 1]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 1]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 1]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 1]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x208, Size: 1]
	Actor* ChildActor;//[Offset: 0x210, Size: 1]
	Actor* ChildActorTemplate;//[Offset: 0x218, Size: 1]
	void SetChildActorClass(class Actor InClass);// 0x4483a20

--------------------------------
Class: Interface.Object

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 1]
	Vector AngularVelocity;//[Offset: 0xc, Size: 1]
	Vector Location;//[Offset: 0x18, Size: 1]
	Rotator Rotation;//[Offset: 0x24, Size: 1]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 1]
	Rotator RotationOffset;//[Offset: 0x20, Size: 1]
	FName AttachSocket;//[Offset: 0x2c, Size: 1]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 1]
	FName MatineeControllerName;//[Offset: 0x228, Size: 1]
	float PlayRate;//[Offset: 0x230, Size: 1]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 1]
	float ForceStartPosition;//[Offset: 0x238, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 1]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 1]
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	float InterpPosition;//[Offset: 0x284, Size: 1]
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 1]
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	void Stop();// 0x1ef10c0
	void SetPosition(float NewPosition, bool bJump);// 0x4535840
	void SetLoopingState(bool bNewLooping);// 0x26def10
	void Reverse();// 0x1ef10a0
	void Play();// 0x1eef160
	void Pause();// 0xcf5d10
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x45350e0
	void ChangePlaybackDirection();// 0x268d7b0

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 1]
	float PathBuildTime;//[Offset: 0x2c, Size: 1]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 1]
	float EdSectionStart;//[Offset: 0x48, Size: 1]
	float EdSectionEnd;//[Offset: 0x4c, Size: 1]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 1]
	FName[] AllEventNames;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 1]
	Actor*[] Actors;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	float Timestamp;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 1]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 1]
	float Volume;//[Offset: 0x18, Size: 1]
	float FadeTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 1]
	float Diffusion;//[Offset: 0x2c, Size: 1]
	float Gain;//[Offset: 0x30, Size: 1]
	float GainHF;//[Offset: 0x34, Size: 1]
	float DecayTime;//[Offset: 0x38, Size: 1]
	float DecayHFRatio;//[Offset: 0x3c, Size: 1]
	float ReflectionsGain;//[Offset: 0x40, Size: 1]
	float ReflectionsDelay;//[Offset: 0x44, Size: 1]
	float LateGain;//[Offset: 0x48, Size: 1]
	float LateDelay;//[Offset: 0x4c, Size: 1]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 1]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 1]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 1]
	float ExteriorTime;//[Offset: 0x8, Size: 1]
	float ExteriorLPF;//[Offset: 0xc, Size: 1]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 1]
	float InteriorVolume;//[Offset: 0x14, Size: 1]
	float InteriorTime;//[Offset: 0x18, Size: 1]
	float InteriorLPF;//[Offset: 0x1c, Size: 1]
	float InteriorLPFTime;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Box MBPBounds;//[Offset: 0x4, Size: 1]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 1]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 1]
	Actor* InViewer;//[Offset: 0x8, Size: 1]
	Actor* ViewTarget;//[Offset: 0x10, Size: 1]
	Vector ViewLocation;//[Offset: 0x18, Size: 1]
	Vector ViewDir;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 1]
	Model* Model;//[Offset: 0xc0, Size: 1]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 1]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 1]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 1]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 1]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 1]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 1]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 1]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 1]
	float LightmapTotalSize;//[Offset: 0x110, Size: 1]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 1]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 1]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 1]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 1]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 1]
	byte LightingScenarioQuality;//[Offset: 0x1f4, Size: 1]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f5, Size: 1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f5, Size: 1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f5, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f5, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 1]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 1]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x448, Size: 1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x2cbecb0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x451d380
	bool RemoteEvent(FName EventName);// 0x451cad0
	void LevelReset();// 0x2cbecb0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]
	int Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 1]
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 1]
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 1]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x430, Size: 1]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	float ScreenSize;//[Offset: 0x43c, Size: 1]
	float U;//[Offset: 0x440, Size: 1]
	float UL;//[Offset: 0x444, Size: 1]
	float V;//[Offset: 0x448, Size: 1]
	float VL;//[Offset: 0x44c, Size: 1]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x4466930
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x44667b0
	void SetSprite(Texture2D* NewSprite);// 0x4466720

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]
	byte LightingScenarioQuality;//[Offset: 0x29, Size: 1]
	bool bIsDataStripped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 1]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 1]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 1]
	Transform LevelTransform;//[Offset: 0x80, Size: 1]
	int LevelLODIndex;//[Offset: 0xb4, Size: 1]
	int StreamingPriority;//[Offset: 0xb8, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbe, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbe, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xbe, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xbe, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xbe, Size: 1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbf, Size: 1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbf, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbf, Size: 1]
	LinearColor LevelColor;//[Offset: 0xc0, Size: 1]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 1]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 1]
	bool bExcludeFromAutomatedLightBake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	MulticastInlineDelegateProperty OnLevelLoaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelUnloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelShown;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelHidden;//[Size: 1]
	Level* LoadedLevel;//[Offset: 0x130, Size: 1]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 1]
	bool ShouldBeLoaded();// 0x3cdda90
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x451e180
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x44ad600
	void SetPriority(int NewPriority);// 0x451df80
	void SetLevelLODIndex(int LODIndex);// 0x451d8f0
	bool IsStreamingStatePending();// 0x451c6b0
	bool IsLevelVisible();// 0x451c680
	bool IsLevelLoaded();// 0x451c650
	FName GetWorldAssetPackageFName();// 0x451c5e0
	Level* GetLoadedLevel();// 0x2746530
	LevelScriptActor* GetLevelScriptActor();// 0x451c530
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x451c450

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 1]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 1]
	byte StreamingUsage;//[Offset: 0x26c, Size: 1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x870, Size: 1]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc84, Size: 1]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xcb8, Size: 1]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xd20, Size: 1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 1]
	Level* Level;//[Offset: 0x38, Size: 1]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 1]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 1]
	FName AISystemModuleName;//[Offset: 0x40, Size: 1]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 1]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 1]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 1]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 1]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 1]
	float TestHeightDifference;//[Offset: 0x44, Size: 1]
	float HeightCheckMargin;//[Offset: 0x48, Size: 1]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x44663f0
	int GetObjectCount();// 0x4466300
	int GetNewAvoidanceUID();// 0x44662d0
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x4466230

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 1]
	Level* PersistentLevel;//[Offset: 0x20, Size: 1]
	<Level*> Levels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 1]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 1]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 1]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 1]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 1]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 1]

--------------------------------
Class: HirezObjectPool
	<class Object,HirezObjectPoolItem> PoolsByClass;//[Offset: 0x0, Size: 1]
	HirezObjectPoolQueuedEntry[] QueuedEntries;//[Offset: 0x50, Size: 1]

--------------------------------
Class: HirezObjectPoolItem
	FName[] FreeNames;//[Offset: 0x0, Size: 1]

--------------------------------
Class: HirezObjectPoolQueuedEntry
	int FramesLeft;//[Offset: 0x0, Size: 1]
	class Object* MyClass;//[Offset: 0x8, Size: 1]
	FName MyName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSWorldSettings.PGame_WorldSettings.WorldSettings.Info.Actor.Object
	bool bUseLowDrainBatteryMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	ParticleSystemPoolComponent* ParticleSystemPoolComponent;//[Offset: 0x3e8, Size: 1]
	DecalPoolComponent* DecalPoolComponent;//[Offset: 0x3f0, Size: 1]
	GunshotDecalPoolComponent* GunshotDecalPoolComponent;//[Offset: 0x3f8, Size: 1]
	FootprintDecalPoolComponent* FootprintDecalPoolComponent;//[Offset: 0x400, Size: 1]
	SkeletalMeshPoolComponent* SkeletalMeshPoolComponent;//[Offset: 0x408, Size: 1]
	StaticMeshPoolComponent* StaticMeshPoolComponent;//[Offset: 0x410, Size: 1]
	TracerParticlePoolComponent* TracerParticlePoolComponent;//[Offset: 0x418, Size: 1]
	TracerStaticMeshPoolComponent* TracerStaticMeshPoolComponent;//[Offset: 0x420, Size: 1]
	AkPoolComponent* AkPoolComponent;//[Offset: 0x428, Size: 1]
	int EchoRequestCount;//[Offset: 0x430, Size: 1]
	FString FriendlyAudioName;//[Offset: 0x448, Size: 1]
	FString FriendlyAchievementName;//[Offset: 0x458, Size: 1]
	GameplayTag[] MapTags;//[Offset: 0x468, Size: 1]
	class KSAudioPlayer* AudioPlayerToSpawn;//[Offset: 0x478, Size: 1]
	BakedOcclusionLUT* AudioOcclusionLUT;//[Offset: 0x4a0, Size: 1]
	<FName,bool> BoolPropertyMap;//[Offset: 0x4a8, Size: 1]
	<FName,int> IntPropertyMap;//[Offset: 0x4f8, Size: 1]
	<FName,float> FloatPropertyMap;//[Offset: 0x548, Size: 1]
	void LevelActorDestroyed(Actor* TheActor);// 0x27df560

--------------------------------
Class: PGame_WorldSettings.WorldSettings.Info.Actor.Object
	class Actor[] ActorsToAlwaysSpawn;//[Offset: 0x3a0, Size: 1]
	FString[] HighMemorySublevelSuffixes;//[Offset: 0x3b0, Size: 1]
	FString[] LowMemorySublevelSuffixes;//[Offset: 0x3c0, Size: 1]

--------------------------------
Class: ParticleSystemPoolComponent.ParticleSystemPoolComponentBase.BasePoolComponent.ActorComponent.Object

--------------------------------
Class: ParticleSystemPoolComponentBase.BasePoolComponent.ActorComponent.Object
	class ParticleSystemComponent* PooledParticleSystemComponentClass;//[Offset: 0xd8, Size: 1]
	ParticleSystemComponent*[] UnusedComponentsArray;//[Offset: 0xe0, Size: 1]
	<ParticleSystemComponent*> UsedComponentsSet;//[Offset: 0xf0, Size: 1]
	ParticleSystemComponent* PeekedParticleSystemComponent;//[Offset: 0x140, Size: 1]
	bool bClearTemplateWhenReturnedToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	void OnPSCFinished(ParticleSystemComponent* InPSC);// 0xfb2060

--------------------------------
Class: BasePoolComponent.ActorComponent.Object
	int MaxPoolSize;//[Offset: 0xb0, Size: 1]
	int StartingPoolSize;//[Offset: 0xb4, Size: 1]
	FString ComponentClassName;//[Offset: 0xb8, Size: 1]
	enum OverflowType;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: DecalPoolComponent.BasePoolComponent.ActorComponent.Object
	class PoolableDecalComponent* PooledDecalComponentClass;//[Offset: 0xd8, Size: 1]
	PoolableDecalComponent*[] UnusedComponentsArray;//[Offset: 0xe0, Size: 1]
	<PoolableDecalComponent*> UsedComponentsSet;//[Offset: 0xf0, Size: 1]
	PoolableDecalComponent* PeekedDecalComponent;//[Offset: 0x140, Size: 1]

--------------------------------
Class: PoolableDecalComponent.DecalComponent.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnDecalReturnedToPoolDelegate;//[Size: 1]
	bool bInUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	void ForceReturnToPool();// 0xfb1dc0

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x208, Size: 1]
	int SortOrder;//[Offset: 0x210, Size: 1]
	float FadeScreenSize;//[Offset: 0x214, Size: 1]
	float FadeStartDelay;//[Offset: 0x218, Size: 1]
	float FadeDuration;//[Offset: 0x21c, Size: 1]
	float FadeInDuration;//[Offset: 0x220, Size: 1]
	float FadeInStartDelay;//[Offset: 0x224, Size: 1]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	Vector DecalSize;//[Offset: 0x22c, Size: 1]
	void SetSortOrder(int Value);// 0x448be20
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x448bd20
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x448bc10
	void SetFadeIn(float StartDelay, float Duaration);// 0x448bb50
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x448bad0
	float GetFadeStartDelay();// 0x448b870
	float GetFadeInStartDelay();// 0x448b840
	float GetFadeInDuration();// 0x448b810
	float GetFadeDuration();// 0x448b7e0
	MaterialInterface* GetDecalMaterial();// 0x448b7b0
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x448aee0

--------------------------------
Class: GunshotDecalPoolComponent.DecalPoolComponent.BasePoolComponent.ActorComponent.Object

--------------------------------
Class: FootprintDecalPoolComponent.DecalPoolComponent.BasePoolComponent.ActorComponent.Object

--------------------------------
Class: SkeletalMeshPoolComponent.BasePoolComponent.ActorComponent.Object
	SkeletalMeshComponent*[] UnusedComponentsArray;//[Offset: 0xd8, Size: 1]
	<SkeletalMeshComponent*> UsedComponentsSet;//[Offset: 0xe8, Size: 1]
	SkeletalMeshComponent* PeekedSkeletalMeshComponent;//[Offset: 0x138, Size: 1]
	class SkeletalMeshComponent* PooledSkeletalMeshComponentClass;//[Offset: 0x140, Size: 1]

--------------------------------
Class: StaticMeshPoolComponent.BasePoolComponent.ActorComponent.Object
	StaticMeshComponent*[] UnusedComponentsArray;//[Offset: 0xd8, Size: 1]
	<StaticMeshComponent*> UsedComponentsSet;//[Offset: 0xe8, Size: 1]
	StaticMeshComponent* PeekedStaticMeshComponent;//[Offset: 0x138, Size: 1]
	class StaticMeshComponent* PooledStaticMeshComponentClass;//[Offset: 0x140, Size: 1]

--------------------------------
Class: TracerParticlePoolComponent.ParticleSystemPoolComponentBase.BasePoolComponent.ActorComponent.Object
	void OnTracerDestinationReached(SceneComponent* TracerComponent);// 0x27a9140

--------------------------------
Class: TracerStaticMeshPoolComponent.BasePoolComponent.ActorComponent.Object
	class TracerStaticMeshComponent* PooledTraceStaticMeshComponentClass;//[Offset: 0xd8, Size: 1]
	TracerStaticMeshComponent*[] UnusedComponentsArray;//[Offset: 0xe0, Size: 1]
	<TracerStaticMeshComponent*> UsedComponentsSet;//[Offset: 0xf0, Size: 1]
	TracerStaticMeshComponent* PeekedTracerStaticMeshComponent;//[Offset: 0x140, Size: 1]
	void OnTracerDestinationReached(SceneComponent* TracerComponent);// 0xfb2060

--------------------------------
Class: TracerStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector start;//[Offset: 0x4f0, Size: 1]
	Vector end;//[Offset: 0x4fc, Size: 1]
	float TravelSpeed;//[Offset: 0x508, Size: 1]
	bool bDestroyOnDestinationReached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool bEnableTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	MulticastInlineDelegateProperty OnTracerParticleReachedDestiniationDel;//[Size: 1]

--------------------------------
Class: AkPoolComponent.BasePoolComponent.ActorComponent.Object
	class AkComponent* PooledAkComponentClass;//[Offset: 0xd8, Size: 1]
	AkComponent*[] UnusedComponentsArray;//[Offset: 0xe0, Size: 1]
	<AkComponent*> UsedComponentsSet;//[Offset: 0xf0, Size: 1]
	AkComponent* PeekedAkComponent;//[Offset: 0x140, Size: 1]

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	byte OcclusionCollisionChannel;//[Offset: 0x230, Size: 1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x238, Size: 1]
	FString EarlyReflectionAuxBusName;//[Offset: 0x240, Size: 1]
	int EarlyReflectionOrder;//[Offset: 0x250, Size: 1]
	float EarlyReflectionBusSendGain;//[Offset: 0x254, Size: 1]
	float EarlyReflectionMaxPathLength;//[Offset: 0x258, Size: 1]
	float roomReverbAuxBusGain;//[Offset: 0x25c, Size: 1]
	int diffractionMaxEdges;//[Offset: 0x260, Size: 1]
	int diffractionMaxPaths;//[Offset: 0x264, Size: 1]
	float diffractionMaxPathLength;//[Offset: 0x268, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	float CurrentMaxAttenuation;//[Offset: 0x274, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x278, Size: 1]
	float OcclusionRefreshInterval;//[Offset: 0x27c, Size: 1]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0xf1e420
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0xf1e240
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0xf1e060
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0xf1dfd0
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0xf1de70
	void SetOutputBusVolume(float BusVolume);// 0xf1ddf0
	void SetListeners(out const AkComponent*[] Listeners);// 0xf1dd40
	void SetEarlyReflectionsVolume(float SendVolume);// 0xf1dc30
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0xf1db90
	void SetAttenuationScalingFactor(float Value);// 0xf1da90
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0xf1d830
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf1d670
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf1d510
	int PostAkEventByName(FString in_EventName);// 0xf1d460
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf1d290
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf1d0b0
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0xf1ccb0
	float GetAttenuationRadius();// 0xf1cbf0

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x208, Size: 1]
	FString EventName;//[Offset: 0x210, Size: 1]
	void Stop();// 0xf22f00
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0xf20e80
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0xf20cf0
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf205b0
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0xf20390

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x58, Size: 1]

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 1]
	Object*[] UserData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x60, Size: 1]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AkAssetData.Object

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	float AutomaticMaxAttenuationRadius;//[Offset: 0x58, Size: 1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x60, Size: 1]
	AkAudioBank* RequiredBank;//[Offset: 0xb0, Size: 1]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb8, Size: 1]
	float MinimumDuration();// 0xf1d060
	float MaximumDuration();// 0xf1cfb0
	float MaxAttenuationRadius();// 0xf1cf80
	bool IsInfinite();// 0xf1cf20
	float GetMaxAttenuationRadius();// 0xf1cc80

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	uint32 GroupShortID;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 1]
	enum CodecID;//[Offset: 0x10, Size: 1]
	FString Filename;//[Offset: 0x18, Size: 1]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 1]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 1]
	Object*[] UserData;//[Offset: 0x30, Size: 1]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSAudioPlayer.Info.Actor.Object
	<enum,KSAudioPlayerEventActionData*> GameplayEventActionMap;//[Offset: 0x220, Size: 1]
	<FString,KSAudioPlayerEventActionData*> CustomEventActionMap;//[Offset: 0x270, Size: 1]
	ViewRouteChangeAction[] ViewRouteChangedActionMap;//[Offset: 0x2c0, Size: 1]
	<FString,KSAudioPlayerEventActionData*> MapLevelStartEventActionMap;//[Offset: 0x2d0, Size: 1]
	<FString,KSAudioPlayerEventActionData*> MapLevelEndEventActionMap;//[Offset: 0x320, Size: 1]
	<FString,KSAudioPlayerEventActionData*> CinematicSubLevelStartEventActionMap;//[Offset: 0x370, Size: 1]
	<FString,KSAudioPlayerEventActionData*> CinematicSubLevelEndEventActionMap;//[Offset: 0x3c0, Size: 1]
	<FString,KSAudioPlayerEventActionData*> GameModeStartEventActionMap;//[Offset: 0x410, Size: 1]
	<FString,KSAudioPlayerEventActionData*> GameModeEndEventActionMap;//[Offset: 0x460, Size: 1]
	<FString,KSAudioPlayerEventActionData*> PlayerCharacterStartEventActionMap;//[Offset: 0x4b0, Size: 1]
	<FString,KSAudioPlayerEventActionData*> PlayerCharacterEndEventActionMap;//[Offset: 0x500, Size: 1]
	<FString,KSAudioPlayerEventActionData*> MusicPackStartEventActionMap;//[Offset: 0x550, Size: 1]
	<FString,KSAudioPlayerEventActionData*> MusicPackEndEventActionMap;//[Offset: 0x5a0, Size: 1]
	KSAudioPlayerEventActionData* AudioPlayerBeginPlayEventActionData;//[Offset: 0x5f0, Size: 1]
	KSAudioPlayerEventActionData* AudioPlayerEndPlayEventActionData;//[Offset: 0x5f8, Size: 1]
	KSAudioPlayerEventActionData*[] ExclusiveAudioEventsFired;//[Offset: 0x600, Size: 1]
	void HandleRoundHasEnded(int RoundWinner, int MatchWinner);// 0x2630010
	FString[] ComposeEventNamePriorityArray(FString EventName, KSAudioPlayerStateParameterData* CurrentStateParameters);// 0x2cbecb0
	FString[] ComposeBankNamePriorityArray(FString BankPrefix, KSAudioPlayerStateParameterData* CurrentStateParameters);// 0x2cbecb0

--------------------------------
Class: KSAudioPlayerStateParameterData.Object
	FString ActiveGameMode;//[Offset: 0x28, Size: 1]
	FString ActiveMapLevel;//[Offset: 0x38, Size: 1]
	FString[] ActiveCinematicSubLevels;//[Offset: 0x48, Size: 1]
	FString ActiveMusicPack;//[Offset: 0x58, Size: 1]
	FString ActivePlayerCharacter;//[Offset: 0x68, Size: 1]
	bool IsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	FString PreviousGameMode;//[Offset: 0x80, Size: 1]
	FString PreviousMapLevel;//[Offset: 0x90, Size: 1]
	FString[] PreviousCinematicSubLevels;//[Offset: 0xa0, Size: 1]
	FString PreviousMusicPack;//[Offset: 0xb0, Size: 1]
	FString PreviousPlayerCharacter;//[Offset: 0xc0, Size: 1]
	bool PreviousIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool HasActivePlayerCharacter();// 0x2630500
	bool HasActiveMusicPack();// 0x26304b0
	bool HasActiveMapLevel();// 0x2630460
	bool HasActiveGameMode();// 0x2630410
	FString GetPreviousPlayerCharacter();// 0x262f7b0
	FString GetPreviousMusicPack();// 0x262f6f0
	FString GetPreviousMapLevel();// 0x262f630
	bool GetPreviousIsSpectating();// 0x262f610
	FString GetPreviousGameMode();// 0x262f550
	FString[] GetPreviousCinematicSubLevels();// 0x262f520
	bool GetIsSpectating();// 0x262f4e0
	FString GetActivePlayerCharacter();// 0xe08e50
	FString GetActiveMusicPack();// 0x262f420
	FString GetActiveMapLevel();// 0x262f360
	FString GetActiveGameMode();// 0x262f2a0
	FString[] GetActiveCinematicSubLevels();// 0x262f270

--------------------------------
Class: KSAudioPlayerEventActionData.DataAsset.Object
	FString[] BanksToLoad;//[Offset: 0x30, Size: 1]
	FString[] BanksToUnload;//[Offset: 0x40, Size: 1]
	FString[] ContainersToPlay;//[Offset: 0x50, Size: 1]
	FString[] ContainersToStop;//[Offset: 0x60, Size: 1]
	FString[] TablesToLoad;//[Offset: 0x70, Size: 1]
	FString[] TablesToUnload;//[Offset: 0x80, Size: 1]
	FString[] EventsToPost;//[Offset: 0x90, Size: 1]
	<FString,GlobalRTPCData> GlobalRTPCsToSet;//[Offset: 0xa0, Size: 1]
	bool bFireOnceARound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]

--------------------------------
Class: GlobalRTPCData
	float Value;//[Offset: 0x0, Size: 1]
	int InterpTimeMS;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ViewRouteChangeAction
	FName NewRoute;//[Offset: 0x0, Size: 1]
	FName PreviousRoute;//[Offset: 0x8, Size: 1]
	KSAudioPlayerEventActionData* EventActionData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BakedOcclusionLUT.Object
	<uint32,byte> LUT;//[Offset: 0x28, Size: 1]
	uint16[] OctreeSampleMap;//[Offset: 0x78, Size: 1]
	IntVector[] OctreeLocations;//[Offset: 0x88, Size: 1]

--------------------------------
Class: MinimapRenderer_C.KSMinimapRendererBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 1]
	CameraComponent* TestCam;//[Offset: 0x228, Size: 1]
	SceneCaptureComponent2D* SceneCaptureComponent2D;//[Offset: 0x230, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 1]
	Texture2D* WorkingTexture;//[Offset: 0x240, Size: 1]
	float MapWidth;//[Offset: 0x248, Size: 1]
	Texture2D* TextureAssetPtr;//[Offset: 0x250, Size: 1]
	float HeightDifferenceThreshold;//[Offset: 0x278, Size: 1]
	int TextureSize;//[Offset: 0x27c, Size: 1]
	float GetMinimapWidth();// 0x2cbecb0
	void UserConstructionScript();// 0x2cbecb0
	void OnLoaded_1F80951A45CA8E54458A18AA362E670C(Object* Loaded);// 0x2cbecb0
	void 3_CaptureMinimap();// 0x2cbecb0
	void 1_LoadMinimapTexture();// 0x2cbecb0
	void 5_ResetVRAM();// 0x2cbecb0
	void 4_SaveToTexture();// 0x2cbecb0
	void 2_PrepareRenderTarget();// 0x2cbecb0
	void ExecuteUbergraph_MinimapRenderer(int EntryPoint, FString CallFunc_GetCurrentLevelName_ReturnValue, Texture2D* CallFunc_GetMinimapTextureForMap_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FString CallFunc_Concat_StrStr_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Object* Temp_object_Variable, Object* K2Node_CustomEvent_Loaded, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSMinimapRendererBase.Actor.Object
	bool IsLocationOnSquareMap(Vector InLocation);// 0x26ff230
	Vector2D GetNormalizedMapLocation(Vector InLocation);// 0x26fe600
	float GetMinimapWidth();// 0x26fe360

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.StreamableRenderAsset.Object
	int SizeX;//[Offset: 0xc0, Size: 1]
	int SizeY;//[Offset: 0xc4, Size: 1]
	LinearColor ClearColor;//[Offset: 0xc8, Size: 1]
	byte AddressX;//[Offset: 0xd8, Size: 1]
	byte AddressY;//[Offset: 0xd9, Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xda, Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xda, Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xda, Size: 1]
	byte RenderTargetFormat;//[Offset: 0xdb, Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc, Size: 1]
	byte MipsSamplerFilter;//[Offset: 0xdd, Size: 1]
	byte MipsAddressU;//[Offset: 0xde, Size: 1]
	byte MipsAddressV;//[Offset: 0xdf, Size: 1]
	byte OverrideFormat;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: TextureRenderTarget.Texture.StreamableRenderAsset.Object
	float TargetGamma;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2a0, Size: 1]
	float FOVAngle;//[Offset: 0x2a4, Size: 1]
	float OrthoWidth;//[Offset: 0x2a8, Size: 1]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2b0, Size: 1]
	byte CompositeMode;//[Offset: 0x2b8, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2c0, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x810, Size: 1]
	bool bOverride_CustomNearClippingPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x814, Size: 1]
	float CustomNearClippingPlane;//[Offset: 0x818, Size: 1]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c, Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x820, Size: 1]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x864, Size: 1]
	Vector ClipPlaneNormal;//[Offset: 0x870, Size: 1]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x87c, Size: 1]
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x87c, Size: 1]
	bool bDisableFlipCopyGLES;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880, Size: 1]
	void CaptureScene();// 0x45764a0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4576350

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x208, Size: 1]
	byte CaptureSource;//[Offset: 0x209, Size: 1]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20a, Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20a, Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20b, Size: 1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x210, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x220, Size: 1]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x230, Size: 1]
	Actor*[] ShowOnlyActors;//[Offset: 0x240, Size: 1]
	float LODDistanceFactor;//[Offset: 0x250, Size: 1]
	float MaxViewDistanceOverride;//[Offset: 0x254, Size: 1]
	int CaptureSortPriority;//[Offset: 0x258, Size: 1]
	bool bUseRayTracingIfEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x260, Size: 1]
	FString ProfilingEventName;//[Offset: 0x280, Size: 1]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4579a00
	void ShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x4579930
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x45794e0
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4579320
	void RemoveShowOnlyActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x4579250
	void HideComponent(PrimitiveComponent* InComponent);// 0x4576eb0
	void HideActorComponents(Actor* InActor, const bool bIncludeFromChildActors);// 0x4576de0
	void ClearShowOnlyComponents();// 0x45764e0
	void ClearHiddenComponents();// 0x45764c0

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 1]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistanceSizePair[] CullDistances;//[Offset: 0x258, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]

--------------------------------
Class: CullDistanceSizePair
	float Size;//[Offset: 0x0, Size: 1]
	float CullDistance;//[Offset: 0x4, Size: 1]

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x258, Size: 1]

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x260, Size: 1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x4694a50

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 1]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 1]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 1]

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KSNavLinkProxy.NavLinkProxy.Actor.Object

--------------------------------
Class: NavLinkProxy.Actor.Object
	NavigationLink[] PointLinks;//[Offset: 0x230, Size: 1]
	NavigationSegmentLink[] SegmentLinks;//[Offset: 0x240, Size: 1]
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x250, Size: 1]
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	MulticastInlineDelegateProperty OnSmartLinkReached;//[Size: 1]
	void SetSmartLinkEnabled(bool bEnabled);// 0x4739ed0
	void ResumePathFollowing(Actor* Agent);// 0x4739bf0
	void ReceiveSmartLinkReached(Actor* Agent, out const Vector Destination);// 0x2cbecb0
	bool IsSmartLinkEnabled();// 0x47395a0
	bool HasMovingAgents();// 0x4739570

--------------------------------
Class: NavigationLink.NavigationLinkBase
	Vector Left;//[Offset: 0x30, Size: 1]
	Vector Right;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NavigationLinkBase
	float LeftProjectHeight;//[Offset: 0x0, Size: 1]
	float MaxFallDownLength;//[Offset: 0x4, Size: 1]
	float SnapRadius;//[Offset: 0xc, Size: 1]
	float SnapHeight;//[Offset: 0x10, Size: 1]
	NavAgentSelector SupportedAgents;//[Offset: 0x14, Size: 1]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19, Size: 1]
	byte Direction;//[Offset: 0x1c, Size: 1]
	bool bUseSnapHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bSnapToCheapestArea;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bCustomFlag0;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bCustomFlag1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	bool bCustomFlag2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 1]
	bool bCustomFlag3;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 1]
	bool bCustomFlag4;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 1]
	bool bCustomFlag5;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 1]
	bool bCustomFlag6;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 1]
	bool bCustomFlag7;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1e, Size: 1]
	class NavAreaBase* AreaClass;//[Offset: 0x20, Size: 1]

--------------------------------
Class: NavigationSegmentLink.NavigationLinkBase
	Vector LeftStart;//[Offset: 0x30, Size: 1]
	Vector LeftEnd;//[Offset: 0x3c, Size: 1]
	Vector RightStart;//[Offset: 0x48, Size: 1]
	Vector RightEnd;//[Offset: 0x54, Size: 1]

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xe8, Size: 1]
	class NavArea* EnabledAreaClass;//[Offset: 0xf0, Size: 1]
	class NavArea* DisabledAreaClass;//[Offset: 0xf8, Size: 1]
	NavAgentSelector SupportedAgents;//[Offset: 0x100, Size: 1]
	Vector LinkRelativeStart;//[Offset: 0x104, Size: 1]
	Vector LinkRelativeEnd;//[Offset: 0x110, Size: 1]
	byte LinkDirection;//[Offset: 0x11c, Size: 1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120, Size: 1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x120, Size: 1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x120, Size: 1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x120, Size: 1]
	Vector ObstacleOffset;//[Offset: 0x124, Size: 1]
	Vector ObstacleExtent;//[Offset: 0x130, Size: 1]
	class NavArea* ObstacleAreaClass;//[Offset: 0x140, Size: 1]
	float BroadcastRadius;//[Offset: 0x148, Size: 1]
	float BroadcastInterval;//[Offset: 0x14c, Size: 1]
	byte BroadcastChannel;//[Offset: 0x150, Size: 1]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	Object* CachedNavParent;//[Offset: 0xd8, Size: 1]
	void SetNavigationRelevancy(bool bRelevant);// 0x4694b50

--------------------------------
Class: DropLocation_C.KSDropLocation.KSMapPoint.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x278, Size: 1]
	SceneComponent* LocationContainer;//[Offset: 0x280, Size: 1]
	BillboardComponent* Sprite Component;//[Offset: 0x288, Size: 1]
	SceneComponent* Root;//[Offset: 0x290, Size: 1]
	LinearColor DropSplineColor;//[Offset: 0x298, Size: 1]
	LinearColor LootSplineColor;//[Offset: 0x2a8, Size: 1]
	float DropLocationRadius;//[Offset: 0x2b8, Size: 1]
	SplineComponent*[] Splines;//[Offset: 0x2c0, Size: 1]
	ArrowComponent*[] Arrows;//[Offset: 0x2d0, Size: 1]
	Vector[] DropPoints;//[Offset: 0x2e0, Size: 1]
	Vector GetTargetDropLocation(Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_GetTargetDropLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_RandomInteger_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x2cbecb0
	void UserConstructionScript();// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void GenerateRandomPoints();// 0x2cbecb0
	void RegenerateSplines();// 0x2cbecb0
	void ExecuteUbergraph_DropLocation(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SplineComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, ArrowComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, ArrowComponent*[] CallFunc_K2_GetComponentsByClass_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, SplineComponent* CallFunc_Array_Get_Item, Vector CallFunc_Add_VectorVector_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, ArrowComponent* CallFunc_AddComponent_ReturnValue, const Vector[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const Transform Temp_struct_Variable, SplineComponent* CallFunc_AddComponent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSDropLocation.KSMapPoint.Actor.Object
	KSWayPointSet* WayPointSet;//[Offset: 0x258, Size: 1]
	bool ReverseWayPointSetDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	float FlightDistanceModifier;//[Offset: 0x264, Size: 1]
	float FreefallXYDistance;//[Offset: 0x268, Size: 1]
	float FreefallHeight;//[Offset: 0x26c, Size: 1]
	bool ShouldReverseWayPointSetDirection();// 0x268d780
	void IncrementSelectionCount();// 0x268d1f0
	void HandleRoundSetup(out const RoundInitState RoundInitState);// 0x268d150
	KSWayPointSet* GetWayPointSet();// 0x268d120
	int[] GetValidSides();// 0x268d060
	Vector GetTargetDropLocation();// 0x2619a50
	int GetNumTimesSelected();// 0x268cfc0
	float GetFreefallXYDistance();// 0x268cfa0
	float GetFreefallHeight();// 0x268cf80
	float GetFlightDistanceModifier();// 0x268cf60

--------------------------------
Class: KSMapPoint.Actor.Object
	GameplayTagContainer MapPointTypes;//[Offset: 0x220, Size: 1]
	int[] ValidSides;//[Offset: 0x240, Size: 1]
	bool bShouldCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool ShouldCrouch();// 0x26f8f10
	bool MatchesTags(GameplayTagContainer InMapPointTypes);// 0x26f8a50
	bool MatchesTag(GameplayTag InMapPointType);// 0x26f89b0
	bool IsFriendlyPoint(const Actor* InActor);// 0x263c5c0
	bool IsAvailable(const Actor* InActor);// 0x2619910
	bool IsActive();// 0x2685700

--------------------------------
Class: KSWayPointSet.Actor.Object
	int WayPointSet;//[Offset: 0x220, Size: 1]
	KSWayPoint*[] Waypoints;//[Offset: 0x228, Size: 1]
	int[] ForwardSides;//[Offset: 0x238, Size: 1]
	int[] ReversingSides;//[Offset: 0x248, Size: 1]
	FString[] ValidRegionIDs;//[Offset: 0x2a8, Size: 1]
	<FString,KSWayPointRegion> WayPointRegions;//[Offset: 0x2b8, Size: 1]
	void UpdateWayPointVisuals();// 0x2cbecb0
	bool ShouldSideReverseOnThisWaypointSet(int SideNum);// 0x27aa010
	KSWayPoint*[] PickPathFromBestWayPoints(Vector StartLocation, Vector EndLocation, <KSWayPoint*,int> WayPointsToAvoid);// 0x27a9970
	void LinkWayPoints();// 0x27a9830
	KSWayPoint*[] GetAllWayPointsInRegionByID(out FString InId);// 0x27a95e0
	bool CanSideUseThisWaypointSet(int SideNum);// 0x27a92f0

--------------------------------
Class: KSWayPoint.KSMapPoint.Actor.Object
	FString RegionId;//[Offset: 0x258, Size: 1]
	KSWayPoint*[] RegionChildren;//[Offset: 0x268, Size: 1]
	uint32 AutoRegionDepth;//[Offset: 0x278, Size: 1]
	<KSWayPointSet*,KSWayPointLink> WayPointSetLinks;//[Offset: 0x280, Size: 1]
	KSWayPointLink DefaultWayPointLinks;//[Offset: 0x2d0, Size: 1]
	float DefensePointProbability;//[Offset: 0x2f0, Size: 1]
	float DefensePointWaitTimeMin;//[Offset: 0x2f4, Size: 1]
	float DefensePointWaitTimeMax;//[Offset: 0x2f8, Size: 1]
	KSDefensePoint*[] DefensePointsForward;//[Offset: 0x300, Size: 1]
	KSDefensePoint*[] DefensePointsReverse;//[Offset: 0x310, Size: 1]
	float ArrivalWaitTime;//[Offset: 0x320, Size: 1]
	void SubmitRegionChanges();// 0x27aa100
	KSWayPoint*[] GetNextWayPoints(const KSWayPointSet* WayPointSet);// 0x27a9720
	void CreateAutoRegion();// 0x27a9440

--------------------------------
Class: KSWayPointLink
	KSWayPoint*[] NextWayPoints;//[Offset: 0x0, Size: 1]
	KSWayPoint*[] PrevWayPoints;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSDefensePoint.KSMapPoint.Actor.Object
	KSObjectiveBase* RelevantObjective;//[Offset: 0x258, Size: 1]
	Actor*[] AssignedDefenders;//[Offset: 0x260, Size: 1]
	bool bObjectiveDefender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	void RelevantObjectiveUpdated(KSObjectiveBase* Objective);// 0x26896a0
	Vector GetTargetDefensePoint();// 0x2619a50

--------------------------------
Class: KSObjectiveBase.Actor.Object
	MulticastInlineDelegateProperty OnObjectiveUpdate;//[Size: 1]
	enum MapIconType;//[Offset: 0x240, Size: 1]
	int DisplayId;//[Offset: 0x244, Size: 1]
	int ActiveObjectiveIndex;//[Offset: 0x248, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	ObjectiveState ObjectiveState;//[Offset: 0x250, Size: 1]
	int ObjectiveId;//[Offset: 0x264, Size: 1]
	enum ObjectiveType;//[Offset: 0x268, Size: 1]
	FName DefaultState;//[Offset: 0x26c, Size: 1]
	FName InitialActivateState;//[Offset: 0x274, Size: 1]
	FText DisplayName;//[Offset: 0x280, Size: 1]
	FString ObjectiveDisplayLabel;//[Offset: 0x298, Size: 1]
	bool bAppendActiveIndexToLabel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	int ObjectiveLootGroup;//[Offset: 0x2c8, Size: 1]
	Vector NavigationLocation;//[Offset: 0x2cc, Size: 1]
	bool UseNavLocationForDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0x2e8, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0x310, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x338, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x360, Size: 1]
	FName SoundEventName;//[Offset: 0x370, Size: 1]
	float SoundEventLoudness;//[Offset: 0x378, Size: 1]
	float RepeatTimeToNotifyBots;//[Offset: 0x37c, Size: 1]
	void SetState(FName NewState, int NewOwner);// 0x2717c60
	void ResetState(bool ClearOwner);// 0x26ec360
	void OnRep_ObjectiveState();// 0x2717a30
	void OnRep_ObjectiveId();// 0x2717a30
	void NotifyBots();// 0x2716fb0
	void HandleNewState();// 0x1ef3000
	FName GetPreviousState();// 0x2716da0
	int GetOwningTeamOrPlayer();// 0x2716d70
	float GetObjectiveMeterProgressTotal();// 0x2716d30
	float GetObjectiveMeterProgress();// 0x2716cf0
	int GetObjectiveLootGroup();// 0x2716cc0
	int GetObjectiveId();// 0x268cf60
	FText GetObjectiveDisplayName();// 0x2716c10
	FString GetObjectiveDisplayLabel();// 0x2716b90
	FName GetCurrentState();// 0x2716b50
	bool CanChangeState(FName NewState, int NewOwner);// 0x27168d0
	void CallOnTeamSidesFlipped();// 0x1efdc40
	void AssignObjectiveId(int NewId);// 0x27167d0
	void ActivateObjective(int NewOwner);// 0x2716740

--------------------------------
Class: ObjectiveState
	FName CurrentState;//[Offset: 0x0, Size: 1]
	FName PreviousState;//[Offset: 0x8, Size: 1]
	int Owner;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSItemStimuliSourceComponent.AIPerceptionStimuliSourceComponent.ActorComponent.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 1]
	void UnregisterFromSense(class AISense SenseClass);// 0x4722190
	void UnregisterFromPerceptionSystem();// 0x4722170
	void RegisterWithPerceptionSystem();// 0x4721740
	void RegisterForSense(class AISense SenseClass);// 0x47215d0

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 1]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 1]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 1]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x47217e0
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x4721760
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x4721650
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x4721510
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x47208e0

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 1]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 1]
	float AcceptanceRadius;//[Offset: 0x88, Size: 1]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 1]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 1]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 1]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 1]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 1]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 1]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 1]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 1]
	void AILoggingVerbose();// 0x2673a70
	void AIIgnorePlayers();// 0xe6f840

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 1]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 1]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 1]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 1]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 1]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 1]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 1]
	BTService*[] Services;//[Offset: 0x68, Size: 1]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 1]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 1]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 1]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 1]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 1]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 1]
	float RandomDeviation;//[Offset: 0x64, Size: 1]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 1]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 1]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 1]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 1]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 1]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 1]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x4726880
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x4726190
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x4725f20

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 1]
	AIController* AIOwner;//[Offset: 0xc0, Size: 1]
	void StopLogic(FString Reason);// 0x472b170
	void StartLogic();// 0x1ef9a90
	void RestartLogic();// 0x1ec4000
	bool IsRunning();// 0x472a7e0
	bool IsPaused();// 0x269cdb0

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 1]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 1]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 1]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x472b080
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x472af50
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x472ae60
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x472ad90
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x472acc0
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x472abf0
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x472ab20
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x472aa50
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x472a980
	void SetValueAsBool(out const FName KeyName, bool boolValue);// 0x472a8b0
	bool IsVectorValueSet(out const FName KeyName);// 0x472a810
	Vector GetValueAsVector(out const FName KeyName);// 0x472a6d0
	FString GetValueAsString(out const FName KeyName);// 0x472a5f0
	Rotator GetValueAsRotator(out const FName KeyName);// 0x472a540
	Object* GetValueAsObject(out const FName KeyName);// 0x472a4a0
	FName GetValueAsName(out const FName KeyName);// 0x472a400
	int GetValueAsInt(out const FName KeyName);// 0x472a360
	float GetValueAsFloat(out const FName KeyName);// 0x472a2c0
	byte GetValueAsEnum(out const FName KeyName);// 0x472a220
	class Object GetValueAsClass(out const FName KeyName);// 0x472a180
	bool GetValueAsBool(out const FName KeyName);// 0x472a0e0
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x4729ff0
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x4729f00
	void ClearValue(out const FName KeyName);// 0x4729e70

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 1]
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 1]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 1]
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 1]
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 1]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 1]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 1]
	MulticastInlineDelegateProperty ReceiveMoveCompleted;//[Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x4722210
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x4721fe0
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x4721b10
	void SetMoveBlockDetection(bool bEnable);// 0x4721a80
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x47218b0
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x2cbecb0
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x47212c0
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4721050
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x4720e30
	void K2_SetFocus(Actor* NewFocus);// 0x4720ca0
	void K2_SetFocalPoint(Vector FP);// 0x4720c10
	void K2_ClearFocus();// 0x4720bf0
	bool HasPartialPath();// 0x4720a10
	PathFollowingComponent* GetPathFollowingComponent();// 0x26169c0
	byte GetMoveStatus();// 0x4720710
	Vector GetImmediateMoveDestination();// 0x47205e0
	Actor* GetFocusActor();// 0x47205b0
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x4720500
	Vector GetFocalPoint();// 0x47204c0
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x47201b0
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x471fed0

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 1]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 1]
	void OnNavDataRegistered(NavigationData* NavData);// 0x4739a80
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x47398e0
	Vector GetPathDestination();// 0x4739530
	byte GetPathActionType();// 0x4739500

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 1]
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 1]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x2ac, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x2b0, Size: 1]
	uint32 DataVersion;//[Offset: 0x2b4, Size: 1]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x398, Size: 1]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 1]
	Color Color;//[Offset: 0x38, Size: 1]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 1]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 1]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 1]
	int AreaID;//[Offset: 0x10, Size: 1]
	class Object* AreaClass;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 1]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 1]
	AIController* AIOwner;//[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionUpdated;//[Size: 1]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x4721b90
	void RequestStimuliListenerUpdate();// 0x4721890
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x4721450
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x4720830
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4720740
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x4720620
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x47203d0
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x47201d0
	void ForgetAll();// 0x4720110

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 1]
	float MaxAge;//[Offset: 0x2c, Size: 1]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 1]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 1]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 1]
	float ExpirationAge;//[Offset: 0x4, Size: 1]
	float Strength;//[Offset: 0x8, Size: 1]
	Vector StimulusLocation;//[Offset: 0xc, Size: 1]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 1]
	FName Tag;//[Offset: 0x24, Size: 1]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 1]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 1]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 1]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 1]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 1]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x47397e0
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x47396f0
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x4739660
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x47395d0

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 1]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 1]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 1]
	Object* Instigator;//[Offset: 0x40, Size: 1]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 1]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x47394e0
	void Finish(byte WithResult);// 0x3b768f0
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x4739290

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 1]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 1]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 1]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 1]
	MulticastInlineDelegateProperty OnClaimedResourcesChange;//[Size: 1]
	void OnRep_SimulatedTasks();// 0x469a0e0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x4699ea0

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 1]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x60, Size: 1]
	void ReadyForActivation();// 0x469a100
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x2cbecb0
	void EndTask();// 0x4699db0

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 1]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 1]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 1]
	float TravelCostOverride;//[Offset: 0x8, Size: 1]
	float EnteringCostOverride;//[Offset: 0xc, Size: 1]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 1]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 1]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 1]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 1]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 1]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 1]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x4736600

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 1]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 1]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 1]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 1]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 1]
	byte TestPurpose;//[Offset: 0x34, Size: 1]
	FString TestComment;//[Offset: 0x38, Size: 1]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 1]
	byte FilterType;//[Offset: 0x4a, Size: 1]
	AIDataProviderBoolValue boolValue;//[Offset: 0x50, Size: 1]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 1]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 1]
	byte ScoringEquation;//[Offset: 0xf9, Size: 1]
	byte ClampMinType;//[Offset: 0xfa, Size: 1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 1]
	enum NormalizationType;//[Offset: 0xfc, Size: 1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 1]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 1]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 1]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 1]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 1]
	FName DataField;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 1]
	int OptionIndex;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnQueryFinishedEvent;//[Size: 1]
	void SetNamedParam(FName ParamName, float Value);// 0x4736780
	Vector[] GetResultsAsLocations();// 0x4736580
	Actor*[] GetResultsAsActors();// 0x4736500
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x4736440
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x4736380
	float GetItemScore(int ItemIndex);// 0x47362f0
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x2cbecb0

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	MulticastInlineDelegateProperty OnSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnFail;//[Size: 1]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x4721390

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x4739c70
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x4739b00
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector start, out const Vector end, out Vector[] PathPoints);// 0x4739350
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x47390d0
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4738f20
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4738d20
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x4738b00

--------------------------------
Class: KSWayPointRegion
	FString RegionId;//[Offset: 0x0, Size: 1]
	KSWayPoint* ParentWayPoint;//[Offset: 0x10, Size: 1]
	KSWayPoint*[] RegionWayPoints;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x430, Size: 1]
	InterpCurveVector SplineInfo;//[Offset: 0x498, Size: 1]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4b0, Size: 1]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4c8, Size: 1]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x4e0, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x4fc, Size: 1]
	float Duration;//[Offset: 0x500, Size: 1]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x507, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 1]
	float LoopPosition;//[Offset: 0x50c, Size: 1]
	Vector DefaultUpVector;//[Offset: 0x510, Size: 1]
	void UpdateSpline();// 0x4597fb0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x4597b20
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x45979c0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x45970e0
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4597800
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x45976a0
	void SetSplineWorldPoints(out const Vector[] Points);// 0x4597520
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x45972f0
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x45973f0
	void SetSplineLocalPoints(out const Vector[] Points);// 0x4597240
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x45970e0
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x4596f80
	void SetDrawDebug(bool bShow);// 0x4596ef0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x4596e10
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x4596d00
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x4596c30
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x4596b70
	bool IsClosedLoop();// 0x4596b40
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x4596a90
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x45969a0
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x45968f0
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x4596800
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x4596750
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x45966a0
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x45965b0
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x4596500
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x4596430
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x4596350
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4596230
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4596160
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4596080
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4595fa0
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x4595e10
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x4595cd0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x4595b80
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x4595a30
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4595910
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x45940f0
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4595830
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4595750
	byte GetSplinePointType(int PointIndex);// 0x45956c0
	float GetSplineLength();// 0x4595690
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x4595520
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x4595480
	Vector GetScaleAtSplineInputKey(float InKey);// 0x45953e0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x4595340
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4595220
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4595150
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4595070
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4594f90
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4594e80
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4594dc0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4594cf0
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4594c20
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4594b00
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4594a30
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4594950
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4594870
	int GetNumberOfSplineSegments();// 0x4594840
	int GetNumberOfSplinePoints();// 0x4594810
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x45946f0
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4594620
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4594540
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4594460
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x45942f0
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x45941c0
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x45940f0
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x4594060
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x4593fa0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x4593ed0
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x4593e40
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4593d20
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4593c50
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4593b70
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4593a90
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x45939f0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4593920
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4593830
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x45936e0
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x45935f0
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x4593540
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4593450
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4593370
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4593280
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4593190
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x45930f0
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4593000
	void ClearSplinePoints(bool bUpdateSpline);// 0x4592f70
	void AddSplineWorldPoint(out const Vector Position);// 0x4592ed0
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x4592d70
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x4592c60
	void AddSplineLocalPoint(out const Vector Position);// 0x4592bd0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x4592ad0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x45929c0

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 1]
	Vector Position;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	Rotator Rotation;//[Offset: 0x28, Size: 1]
	Vector Scale;//[Offset: 0x34, Size: 1]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 1]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 1]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 1]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 1]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 1]
	Quat OutVal;//[Offset: 0x10, Size: 1]
	Quat ArriveTangent;//[Offset: 0x20, Size: 1]
	Quat LeaveTangent;//[Offset: 0x30, Size: 1]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 1]
	float OutVal;//[Offset: 0x4, Size: 1]
	float ArriveTangent;//[Offset: 0x8, Size: 1]
	float LeaveTangent;//[Offset: 0xc, Size: 1]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x430, Size: 1]
	float ArrowSize;//[Offset: 0x434, Size: 1]
	float ScreenSize;//[Offset: 0x438, Size: 1]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x43c, Size: 1]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x43c, Size: 1]
	void SetArrowColor(LinearColor NewColor);// 0x445e470

--------------------------------
Class: RoundInitState
	byte RoundNumber;//[Offset: 0x0, Size: 1]
	int AttackingTeam;//[Offset: 0x4, Size: 1]
	int DefendingTeam;//[Offset: 0x8, Size: 1]
	byte LastPrepareTriggered;//[Offset: 0xc, Size: 1]
	byte LastRoundStartTriggered;//[Offset: 0xd, Size: 1]

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 1]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSOutOfBoundsRecoveryPoint.NavigationObjectBase.Actor.Object
	int SideNum;//[Offset: 0x248, Size: 1]

--------------------------------
Class: OutOfBoundsVolume_LandingZone_C.OutOfBoundsVolume_C.KSOutOfBoundsZone.Actor.Object

--------------------------------
Class: OutOfBoundsVolume_C.KSOutOfBoundsZone.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	StaticMeshComponent* StaticMesh;//[Offset: 0x240, Size: 1]
	SceneComponent* SceneRoot;//[Offset: 0x248, Size: 1]
	void TurnOnDropBoundary();// 0x2cbecb0
	void TurnOffCollision(KSGameState* GameState, out const RoundResult RoundResult);// 0x2cbecb0
	void TurnOffDropBoundary();// 0x2cbecb0
	void ExecuteUbergraph_OutOfBoundsVolume(int EntryPoint, KSGameState* K2Node_Event_GameState, const RoundResult K2Node_Event_RoundResult);// 0x2cbecb0

--------------------------------
Class: KSOutOfBoundsZone.Actor.Object
	float TickDamage;//[Offset: 0x228, Size: 1]
	float WarningDuration;//[Offset: 0x22c, Size: 1]
	bool ShouldDisableCollisionAtRoundEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	void TurnOnDropBoundary();// 0x2cbecb0
	void TurnOffDropBoundary();// 0x2cbecb0
	void TurnOffCollision(KSGameState* GameState, out const RoundResult RoundResult);// 0x2cbecb0
	void OnActorOverlapZoneEnd(Actor* OverlappedActor, Actor* OtherActor);// 0x27177d0
	void OnActorOverlapZoneBegin(Actor* OverlappedActor, Actor* OtherActor);// 0x2717630

--------------------------------
Class: KSGameState.PGame_GameState.GameState.GameStateBase.Info.Actor.Object
	int RandomSessionSeed;//[Offset: 0x2a8, Size: 1]
	MulticastInlineDelegateProperty OnTeamCinematicSequenceSkippedDel;//[Size: 1]
	bool bBackfillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	KSPlayerIdentitiesContainer PlayerIdentitiesContainer;//[Offset: 0x2f8, Size: 1]
	<uint64,KSLagCompensatedActor*> PredictedActors;//[Offset: 0x418, Size: 1]
	enum KillCamStatus;//[Offset: 0x478, Size: 1]
	float KillCamRecordingSecondsToKeep;//[Offset: 0x47c, Size: 1]
	Pawn* KillCamFocusPawn;//[Offset: 0x480, Size: 1]
	Pawn* KillCamSecondaryFocusPawn;//[Offset: 0x490, Size: 1]
	Actor* KillCamFocusSpecial;//[Offset: 0x4a0, Size: 1]
	float KillCamTime;//[Offset: 0x4ac, Size: 1]
	MulticastInlineDelegateProperty OnGameDisplayInfo;//[Size: 1]
	MulticastInlineDelegateProperty OnRemoveGameDisplayInfo;//[Size: 1]
	MulticastInlineDelegateProperty OnPhaseChangeDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSetupStartDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSetupEndDel;//[Size: 1]
	MulticastInlineDelegateProperty OnExpectedPhaseCountChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTimerSecondTick;//[Size: 1]
	MatchPhase MatchPhase;//[Offset: 0x5a0, Size: 1]
	int ExpectedPhaseCount;//[Offset: 0x5b4, Size: 1]
	float ExpectedTimeForRemainingPhases;//[Offset: 0x5b8, Size: 1]
	MatchPhase PreviousPhase;//[Offset: 0x5bc, Size: 1]
	bool bHasProcessedMatchStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	PGame_ReplicatedTimer ReplicatedMatchTimer;//[Offset: 0x620, Size: 1]
	bool bCharacterBodiesPersistAfterDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	float SecondsForCharacterBodiesToPersistAfterDeath;//[Offset: 0x668, Size: 1]
	float SecondsToViewBodyAfterDeath;//[Offset: 0x66c, Size: 1]
	MulticastInlineDelegateProperty OnPlayerDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDown;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuItemUse;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerRevive;//[Size: 1]
	MulticastInlineDelegateProperty OnWinnerSet;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerAssist;//[Size: 1]
	MulticastInlineDelegateProperty OnLastManStanding;//[Size: 1]
	MulticastInlineDelegateProperty OnUIRelevantPlayerStateChangedDel;//[Size: 1]
	float DefaultMinimapWidth;//[Offset: 0x700, Size: 1]
	MulticastInlineDelegateProperty OnTeamAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamCelebrateDel;//[Size: 1]
	class KSAccoladeTracker[] AccoladeTrackerClasses;//[Offset: 0x738, Size: 1]
	KSMiniMapAssistant* MiniMapAssistant;//[Offset: 0x760, Size: 1]
	<int,KSTeamState*> teams;//[Offset: 0x768, Size: 1]
	CombatEventList CombatEventList;//[Offset: 0x7c0, Size: 1]
	RadialMenuItemEventList RadialMenuItemEventList;//[Offset: 0x848, Size: 1]
	AssistEventList AssistEventList;//[Offset: 0x8d0, Size: 1]
	ReviveEventList ReviveEventList;//[Offset: 0x958, Size: 1]
	MulticastInlineDelegateProperty OnTeamEliminatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamEliminatedOrDownedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerEliminatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDownedChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnAttackingTeamUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnDisplayCashChanged;//[Size: 1]
	bool bDisplayCash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 1]
	int CashPerDown;//[Offset: 0xa44, Size: 1]
	FText DownDescription;//[Offset: 0xa48, Size: 1]
	int CashPerAssist;//[Offset: 0xa60, Size: 1]
	FText AssistDescription;//[Offset: 0xa68, Size: 1]
	int CashPerRevive;//[Offset: 0xa80, Size: 1]
	FText ReviveDescription;//[Offset: 0xa88, Size: 1]
	int CashPerElim;//[Offset: 0xaa0, Size: 1]
	FText EliminationDescription;//[Offset: 0xaa8, Size: 1]
	int CashPerSuicide;//[Offset: 0xac0, Size: 1]
	FText SuicideDescription;//[Offset: 0xac8, Size: 1]
	<class KSDamageTypeBase,int> CashPerDeployableDestroyed;//[Offset: 0xae0, Size: 1]
	FString MercSelectSubLevel;//[Offset: 0xb30, Size: 1]
	FString[] ActiveCinematicSubLevelNames;//[Offset: 0xb40, Size: 1]
	KSCinematicSequenceManager* ActiveCinematicSequenceManager;//[Offset: 0xb50, Size: 1]
	FString ClientGameVersion;//[Offset: 0xb58, Size: 1]
	FString ServerGameVersion;//[Offset: 0xb68, Size: 1]
	MulticastInlineDelegateProperty OnTeamSidesFlipped;//[Size: 1]
	int[] TierUnlockThresholds;//[Offset: 0xb88, Size: 1]
	float MaxMarkerDistanceForCommonLoot;//[Offset: 0xb98, Size: 1]
	enum ObjectiveTicketDisplayType;//[Offset: 0xb9c, Size: 1]
	KSLootSiteBase*[] WorldLootSites;//[Offset: 0xed0, Size: 1]
	KSObjectiveBase*[] WorldObjectives;//[Offset: 0xee0, Size: 1]
	KSFlightPoint*[] WorldFlightPoints;//[Offset: 0xef0, Size: 1]
	KSDestructibleBase*[] WorldDestructibles;//[Offset: 0xf00, Size: 1]
	KSItemDrop*[] WorldDrops;//[Offset: 0xf10, Size: 1]
	KSProjectile*[] WorldProjectiles;//[Offset: 0xf20, Size: 1]
	KSPlayerController*[] WorldPlayerControllers;//[Offset: 0xf30, Size: 1]
	KSCharacter*[] WorldCharacters;//[Offset: 0xf40, Size: 1]
	KSHeatSourceComponent*[] WorldHeatSources;//[Offset: 0xf50, Size: 1]
	interface classNone[] WorldHazards;//[Offset: 0xf60, Size: 1]
	KSWayPointSet*[] WorldWayPointSets;//[Offset: 0xf70, Size: 1]
	KSOutOfBoundsRecoveryPoint*[] WorldRecoveryPoints;//[Offset: 0xf80, Size: 1]
	KSAnnouncer*[] WorldAnnouncers;//[Offset: 0xf90, Size: 1]
	KSGameShop*[] WorldGameShops;//[Offset: 0xfa0, Size: 1]
	KSPlayerShop*[] WorldPlayerShops;//[Offset: 0xfb0, Size: 1]
	KSPlayerShopZone*[] WorldShopZones;//[Offset: 0xfc0, Size: 1]
	KSRoyaleSafeZone*[] WorldRoyaleZones;//[Offset: 0xfd0, Size: 1]
	InitialGameObjectiveInfo[] InitialGameObjectiveInfos;//[Offset: 0xfe0, Size: 1]
	MulticastInlineDelegateProperty OnHUDTimerPrioritiesChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnMarkerTimerPrioritiesChangedDel;//[Size: 1]
	KSTimerPriorityConfig HUDTimerPriorityConfig;//[Offset: 0x1010, Size: 1]
	<enum,enum> HUDTimerPriorityMap;//[Offset: 0x1018, Size: 1]
	KSTimerPriorityConfig MarkerTimerPriorityConfig;//[Offset: 0x1068, Size: 1]
	<enum,enum> MarkerTimerPriorityMap;//[Offset: 0x1070, Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveRegistered;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveTransfered;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveUnregistered;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveTimerComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveTimerTick;//[Size: 1]
	<int,interface classNone> GameObjectives;//[Offset: 0x1140, Size: 1]
	MulticastInlineDelegateProperty OnHeatSourceAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnHeatSourceRemoved;//[Size: 1]
	Actor*[] WorldDeployables;//[Offset: 0x11b0, Size: 1]
	bool bDestroyDeployableOnInstigatorDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c0, Size: 1]
	MulticastInlineDelegateProperty OnItemDropAdded;//[Size: 1]
	float ItemDropLifeSpan;//[Offset: 0x11d8, Size: 1]
	bool bShouldOffsetWeaponDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11dc, Size: 1]
	float ProjectileLifeSpan;//[Offset: 0x11e0, Size: 1]
	interface classNone[] SkyDiveListeners;//[Offset: 0x11e8, Size: 1]
	KSCharacter*[] SkyDivers;//[Offset: 0x11f8, Size: 1]
	FText PresenceDisplayText;//[Offset: 0x12b0, Size: 1]
	FString PresenceKey;//[Offset: 0x12c8, Size: 1]
	KSTimerComponent* WaveRespawnTimer;//[Offset: 0x12e0, Size: 1]
	KSLootRarityTimerPair[] LootRarityTimerPairs;//[Offset: 0x12e8, Size: 1]
	<enum,KSTimerComponent*> LootRarityTimerMap;//[Offset: 0x12f8, Size: 1]
	MulticastInlineDelegateProperty OnLootRespawnTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnLootRespawnTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnAccoladeDisplay;//[Size: 1]
	AccoladeEventList AccoladeEventList;//[Offset: 0x1378, Size: 1]
	bool bBlockWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1400, Size: 1]
	float HealthGate;//[Offset: 0x1404, Size: 1]
	bool BotsIgnoreHealthGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1408, Size: 1]
	bool bPreserveReserveAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1409, Size: 1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140a, Size: 1]
	bool bShowHUDObjectiveRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140b, Size: 1]
	bool bShowHUDObjectiveRoleBeforeJobSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140c, Size: 1]
	bool bInvertHUDObjectiveRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140d, Size: 1]
	KSGameHUDSettings GameModeHUDSettings;//[Offset: 0x1410, Size: 1]
	bool bPlayersShouldSpectateDefaultCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1448, Size: 1]
	bool bShowingPreviewActorSubLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1449, Size: 1]
	bool bPreviewActorsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144a, Size: 1]
	MulticastInlineDelegateProperty OnDynamicDestroyPreviewActorsDel;//[Size: 1]
	MulticastInlineDelegateProperty OnDynamicDisablePreviewActorsDel;//[Size: 1]
	MulticastInlineDelegateProperty OnDynamicEnablePreviewActorsDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCinematicSubLevelEnabled;//[Size: 1]
	MulticastInlineDelegateProperty OnCinematicSubLevelDisabled;//[Size: 1]
	MulticastInlineDelegateProperty OnSetNumDebugCinematicRogues;//[Size: 1]
	int NumDebugCinematicRogues;//[Offset: 0x14f8, Size: 1]
	FName[] AlwaysIncludedClientBundles;//[Offset: 0x1500, Size: 1]
	FName[] AlwaysIncludedServerBundles;//[Offset: 0x1510, Size: 1]
	ReplicatedPreloader Preloader;//[Offset: 0x1520, Size: 1]
	bool bPostSelectionCinematicDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1700, Size: 1]
	bool bForceAllowLeaveMatchButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1701, Size: 1]
	KSPersistentMinPlayerDataContainer PersistentPlayerDataContainer;//[Offset: 0x1708, Size: 1]
	MulticastInlineDelegateProperty OnPersistentPlayerDataCreatedDel;//[Size: 1]
	KSPersistentDataReplicator* PersistentDataReplicator;//[Offset: 0x1990, Size: 1]
	int FriendlyFireKillPenalty;//[Offset: 0x1998, Size: 1]
	int FriendlyFireDownPenalty;//[Offset: 0x199c, Size: 1]
	bool bCanToggleScoreboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b8, Size: 1]
	DataTable* PollAssetDataTable;//[Offset: 0x19d0, Size: 1]
	bool bMatchEndedInSurrender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d8, Size: 1]
	KSTeamState* SurrenderWinningTeam;//[Offset: 0x19e0, Size: 1]
	Actor*[] StimulusSourceObjects;//[Offset: 0x19e8, Size: 1]
	<FName,FString> HUDComponentPropMap;//[Offset: 0x19f8, Size: 1]
	class KSHUDAnnouncementComponent* HUDAnnouncementComponentClass;//[Offset: 0x1a48, Size: 1]
	class KSEmoteMusicManager* EmoteMusicManagerClass;//[Offset: 0x1a50, Size: 1]
	KSEmoteMusicManager* EmoteMusicManager;//[Offset: 0x1a58, Size: 1]
	FName[] ActiveCinematicState;//[Offset: 0x1a60, Size: 1]
	KSCinematicDataContainer* CinematicDataContainer;//[Offset: 0x1a98, Size: 1]
	KSMVPDeterminant* MVPDeterminant;//[Offset: 0x1aa0, Size: 1]
	KSPersistentPlayerData*[] CachedOrderedMVPPlayers;//[Offset: 0x1aa8, Size: 1]
	KSWayPointSetCollection* WayPointSetCollection;//[Offset: 0x1ab8, Size: 1]
	KSSquadManagerBase* AISquadManager;//[Offset: 0x1ac0, Size: 1]
	bool bAllowPlayersToReselectJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac8, Size: 1]
	<FString,float> ActivityBehaviorCache;//[Offset: 0x1ad0, Size: 1]
	KSActionRestrictor GlobalActionRestrictor;//[Offset: 0x1b20, Size: 1]
	MulticastInlineDelegateProperty OnStatChange_PlayersUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnStatChange_StatsUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnStatChange_StatValuesUpdated;//[Size: 1]
	int64[] PlayerStatOrder;//[Offset: 0x1b70, Size: 1]
	KSScoreboardStat[] StatOrder;//[Offset: 0x1b80, Size: 1]
	float[] StatData;//[Offset: 0x1b90, Size: 1]
	GameplayTag StatSortTag;//[Offset: 0x1ba0, Size: 1]
	KSHUDComponent_Objective* ObjectiveHUDComponent;//[Offset: 0x1ba8, Size: 1]
	bool WasLastPhasePrepare();// 0x26c0650
	bool UseMobileArmoryLoadouts();// 0x26c0620
	void UnregisterGameObjective(interface classNone Objective);// 0x26c0580
	void TriggerPostSelectionPhaseBeginFadeOutDel();// 0x26c0560
	void TriggerOnTeamCinematicSequenceSkippedDel();// 0x26c0540
	void TriggerOnTeamCinematicSequenceBeginDel();// 0x26c0520
	void TrackedPlayerStateDestroyed(Actor* InActor);// 0x26c04a0
	void StopWaveRespawnTimer();// 0x26c0480
	void StartWaveRespawnTimer();// 0x26c0460
	bool ShouldShowLeaveMatchButtonInHumanBackfill();// 0x26c0420
	bool ShouldForceAllowLeaveMatchButton();// 0x26c0400
	bool ShouldDestroyDeployableOnInstigatorDeath();// 0x26c03e0
	void SetWinner(const Actor* InWinner);// 0x26c0350
	void SetSideForTeam(int TeamNumber, int SideNumber);// 0x26c0290
	void SetNumDebugCinematicRogues(int NewNumDebugCinematicRogues);// 0x26c0210
	void SetMVPDeterminant(KSMVPDeterminant* InMVPDeterminant);// 0x26c0100
	void SetMarkerTimerPriorities(KSTimerPriorityConfig NewTimerPriorityConfig);// 0x26c0180
	void SetHUDTimerPriorities(KSTimerPriorityConfig NewTimerPriorityConfig);// 0x26c0070
	void SetExpectedTimeForRemainingPhases(float InExpectedTimeForRemainingPhases);// 0x26bfff0
	void SetExpectedPhaseCount(int NumPhases);// 0x26bff70
	void SetCinematicDataContainer(KSCinematicDataContainer* InCinematicDataContainer);// 0x26bfef0
	void SetCachedValueForKey(FString InKey, float InValue);// 0x26bfe10
	void SetBlockWeaponFire(bool bBlock);// 0x26bfd90
	void SetActiveCinematicSequenceManager(KSCinematicSequenceManager* NewCinematicSequenceManager);// 0x26bfd10
	void Server_RequestEmoteOnCinematicCharacter(KSPlayerState* CallingPlayerState, KSEmote* Emote);// 0x26bfc40
	void RemoveGameDisplayInfoForActor(Actor* pActor);// 0x26bfbc0
	void RemoveGameDisplayInfoById(int DisplayInfoIdToRemove);// 0x26bfb40
	void RemoveDeployable(interface classNone Deployable);// 0x26bfaa0
	void RegisterGameObjective(int ObjectiveId, interface classNone Objective);// 0x26bf9c0
	void ReceivedKillCamStatus();// 0x1f2baf0
	void PollManagerHandlePlayerDisconnect(Controller* Controller);// 0x26bf940
	void OnRep_WaveRespawnTimer();// 0xd76f80
	void OnRep_StatOrder();// 0x26bf920
	void OnRep_StatData();// 0x26bf900
	void OnRep_PlayerStatOrder();// 0x26bf8e0
	void OnRep_MatchPhase();// 0x1f12bc0
	void OnRep_MarkerTimerPriorities();// 0x26bf8c0
	void OnRep_LootRarityTimerPairs();// 0x1eef180
	void OnRep_InvertHUDObjectiveRoles();// 0x26bf8a0
	void OnRep_InfiniteAmmo();// 0x26bf880
	void OnRep_HUDTimerPriorities();// 0x26bf860
	void OnRep_GlobalActionRestrictor();// 0x26bf840
	void OnRep_ExpectedPhaseCount();// 0x1f13130
	void OnRep_EmoteMusicManagerClass();// 0x26bf820
	void OnRep_DisplayCash();// 0x26bf800
	void OnRegisteredStimulusObjectDestroyed(Actor* DestroyedActor);// 0x26bf780
	void OnObjectiveTimerTick(float Time, int ObjectiveId);// 0x26bf6b0
	void OnObjectiveTimerComplete(int ObjectiveId);// 0x26bf630
	void OnObjectiveTimerActive(bool Active, int ObjectiveId);// 0x26bf570
	void OnGameObjectiveStateChangedCallback(interface classNone Objective);// 0x26bf4d0
	void OnGameObjectiveDestroyed(Actor* ObjectiveAsActor);// 0x26bf450
	void NotifyExitDropship(KSCharacter* Jumper);// 0x26bf3d0
	void NotifyDropshipDoorOpened();// 0x26bf3b0
	void NetMulticast_RequestEmoteOnCinematicCharacter(KSPlayerState* CallingPlayerState, KSEmote* Emote);// 0x26bf2e0
	void Multicast_UnregisterGameObjective(Actor* ObjectiveAsActor);// 0x26bf250
	void Multicast_RegisterGameObjective(int ObjectiveId, Actor* ObjectiveAsActor);// 0x26bf180
	void Multicast_ObjectiveStateChanged(Actor* ObjectiveAsActor, KSObjectiveState ObjectiveState);// 0x26bf060
	void LootRespawnTimerTick(float Seconds, enum Rarity);// 0x26befa0
	void LootRespawnTimerComplete(enum Rarity);// 0x26bef20
	void LootRespawnTimerActive(bool bActive, enum Rarity);// 0x26bee50
	bool IsRoyaleMode();// 0x26bee20
	bool IsPostSelectionCinematicDisabled();// 0x26bee00
	bool IsMVPLineupCinematicActive();// 0x26bedd0
	bool IsLocalPlayerWinner();// 0x26beda0
	bool IsKillCamRecording();// 0x26bed80
	bool IsInSetup();// 0x26bed50
	bool IsInSelection();// 0x26bed20
	bool IsCinematicSubLevelActive(FString CinematicSubLevelName);// 0x26bec70
	bool IsAnyCinematicSubLevelActive();// 0x26bec40
	bool HasCompletedMatchPrePrep();// 0x26bec10
	void HandleStatUpdated(int64 PlayerId, KSScoreboardStat StatStruct, float NewTotalProgress);// 0x26bea60
	Actor*[] GetWorldDeployables();// 0x26bea30
	int GetWinningTeamNum();// 0x26bea00
	void GetUIMatchTime(out float OutTimeRemaining, out float OutTotalTime);// 0x26be910
	KSItemDrop*[] GetTrackedWorldDrops();// 0x26be880
	KSProjectile*[] GetTrackedProjectiles();// 0x26be7f0
	void GetTeamsWithObjectiveRole(enum Filter, out KSTeamState*[] OutTeams, bool bInverseFilter);// 0x26be6c0
	KSTeamState*[] GetTeams();// 0x26be630
	KSTeamState* GetTeamConst(int TeamNum);// 0x26be590
	KSStatWrapper* GetStatWrapperForTag(out const GameplayTag StatTag);// 0x26be4a0
	KSStatWrapper* GetStatWrapperForStatIndex(int StatIndex);// 0x26be410
	KSScoreboardStat[] GetStatsToDisplay();// 0x26be540
	GameplayTag GetStatSortTag();// 0x26be3d0
	float GetStatForPlayerByStatIndex(int64 PlayerId, int StatIndex);// 0x26be310
	float GetStatForPlayer(int64 PlayerId, out const GameplayTag StatTag);// 0x26be240
	int GetSideForTeam(int TeamNumber);// 0x26be1b0
	float GetSecondsFromSurrenderFailure();// 0x26be180
	float GetSecondsFromPlayerDisconnect();// 0x26be150
	float GetSecondsFromMatchStart();// 0x26be120
	KSScoreboardStat[] GetScoreboardStatsToDisplay();// 0x26be0d0
	KSHeatSourceComponent*[] GetRegisteredHeatSources();// 0x26be040
	int GetPointLead();// 0x26be010
	KSPlayerState* GetPlayerStateByPlayerId(int64 InPlayerId);// 0x26bdf80
	bool GetPlayerIdentityDataByPlayerState(KSPlayerState* PlayerState, out KSPlayerIdentityData PlayerIdentityData);// 0x26bde30
	bool GetPlayerIdentityDataByPersistentPlayer(KSPersistentPlayerData* PersistentPlayer, out KSPlayerIdentityData PlayerIdentityData);// 0x26bdce0
	KSPersistentPlayerData* GetPersistentPlayerDataById(out const KSPersistentPlayerId InId);// 0x26bdc30
	float[] GetOrderedStatsForPlayer(int64 PlayerId);// 0x26bdb50
	KSHUDComponent_Objective* GetObjectiveHUDComponent();// 0x26bdb10
	int GetNumDebugCinematicRogues();// 0x26bdaf0
	int GetNextAvailableSide();// 0x26bdac0
	KSMVPDeterminant* GetMVPDeterminant();// 0x26bd740
	KSMiniMapAssistant* GetMiniMapAssistant();// 0x26bdaa0
	enum GetMatchTimerState();// 0x26bda70
	void GetMatchTimer(out float OutPhaseTimeRemaining, out float OutTotalPhaseTime);// 0x26bd990
	FName GetMatchPhaseName();// 0x26bd950
	MatchPhase GetMatchPhase();// 0x26bd910
	FName GetMatchDescription();// 0x26bd8d0
	<enum,enum> GetMarkerTimerPriorities();// 0x26bd760
	Pawn* GetKillCamSecondaryFocusPawn(int LocalPlayerIndex);// 0x26bd670
	KSProjectile* GetKillCamFocusSpecial(int LocalPlayerIndex);// 0x26bd5a0
	Pawn* GetKillCamFocusPawn(int LocalPlayerIndex);// 0x26bd4d0
	Actor* GetKillCamActor(int Guid, int LocalPlayerIndex);// 0x26bd410
	<enum,enum> GetHUDTimerPriorities();// 0x26bd2a0
	class KSHUDAnnouncementComponent GetHUDAnnouncementComponentClass();// 0x26bd280
	void GetGameObjectives(out interface classNone[] objectives);// 0x26bd1d0
	interface classNone GetGameObjectiveById(int ID);// 0x26bd130
	KSTeamState* GetFirstTeamWithObjectiveRole(enum Filter);// 0x26bd0a0
	int GetFirstTeamForSide(int SideNumber);// 0x26bd010
	KSRoyaleSafeZone* GetFirstRoyaleZone();// 0x26bcfe0
	KSAnnouncer* GetFirstAnnouncer();// 0x26bcfb0
	float GetExpectedTimeForRemainingPhases();// 0x26bcf90
	int GetExpectedPhaseCount();// 0x26bcf70
	float GetEstimatedRemainingRoundTime();// 0x26bcf20
	KSCinematicDataContainer* GetCinematicDataContainer();// 0x26bcf00
	float GetCachedValueForKey(FString InKey);// 0x26bce50
	KSTeamState* GetAttackingTeam();// 0x26bce20
	void GetAllTeams(out KSTeamState*[] AllTeams);// 0x26bcd50
	void GetAllPersistentPlayerDataForTeamNumber(int TeamNumber, out <KSPersistentPlayerData*> OutPlayerData);// 0x26bcbe0
	void GetAllPersistentPlayerData(out <KSPersistentPlayerData*> OutPlayerData);// 0x26bcab0
	bool GetAllowPlayersToReselectJob();// 0x26bce00
	void GetAllFriendlyTeams(PlayerController* InPlayerController, out KSTeamState*[] FriendlyTeams);// 0x26bc9c0
	void GetAllEnemyTeams(PlayerController* InPlayerController, out KSTeamState*[] EnemyTeams);// 0x26bc8d0
	FString[] GetActiveCinematicSubLevelNames();// 0x26bc8a0
	KSCinematicSequenceManager* GetActiveCinematicSequenceManager();// 0x26bc880
	void FlipTeamSides();// 0x26bc860
	void FindLastTeam(out KSTeamState* outLastTeam, out int outNumTeamsRemaining);// 0x26bc780
	void EndGameInSurrender(int WinningTeamNum);// 0x26bc700
	bool DoesQueueAllowSurrender();// 0x26bc6d0
	void ClientsNotifyWinnerSet(int TeamNum);// 0x26bc640
	void ClientsNotifyLastManStanding(KSPlayerState* LastPlayer);// 0x26bc5b0
	void ClearMarkerTimerPriorities();// 0x26bc570
	void ClearHUDTimerPriorities();// 0x26bc530
	void CheatSetMatchPhase(out const FName InMatchPhaseName);// 0x26bc4a0
	bool CharacterBodiesPersistAfterDeath();// 0x26bc480
	bool CanDownPlayers();// 0x26bc450
	bool CanDownBots();// 0x26bc420
	int CalculateCashForAssist(float DamagePercent);// 0x26bc390
	void BroadcastTeamSidesFlipped();// 0x1f12980
	void BroadcastKillCamParameters(Pawn* InPawn, Pawn* InSecondaryPawn, Actor* InSpecialDamageCauser);// 0x26bc290
	bool BlueprintIsMatchInProgress();// 0x26bc260
	bool BlueprintHasMatchEnded();// 0x26bc230
	void BindGameObjectiveStateTimerCallbacks(interface classNone Objective);// 0x26bc190
	bool AllowsHumanBackfill();// 0x26bc170
	int AddGameDisplayInfo(DisplayInfo DisplayInfo);// 0x26bbea0
	void AddDeployable(interface classNone Deployable);// 0x26bbe00

--------------------------------
Class: PGame_GameState.GameState.GameStateBase.Info.Actor.Object
	FString r_SonyMatchIdForPlayerFeedback;//[Offset: 0x290, Size: 1]
	void OnRep_SonyMatchIdForPlayerFeedback();// 0xd76f80

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x270, Size: 1]
	FName PreviousMatchState;//[Offset: 0x278, Size: 1]
	int ElapsedTime;//[Offset: 0x280, Size: 1]
	void OnRep_MatchState();// 0xe6a500
	void OnRep_ElapsedTime();// 0xe69990
	bool CheckIsFriendly(const Actor* pActor1, const Actor* pActor2);// 0x44ad760
	bool CheckIsEnemy(const Actor* pActor1, const Actor* pActor2);// 0x44ad690

--------------------------------
Class: KSPlayerIdentitiesContainer.FastArraySerializer
	KSPlayerIdentityData[] ReplicatedData;//[Offset: 0x108, Size: 1]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 1]
	enum DeltaFlags;//[Offset: 0x100, Size: 1]

--------------------------------
Class: KSPlayerIdentityData.FastArraySerializerItem
	KSPersistentPlayerId ID;//[Offset: 0x10, Size: 1]
	KSItem* avatar;//[Offset: 0x20, Size: 1]
	KSItem* Banner;//[Offset: 0x48, Size: 1]
	KSItem* PreferredJob;//[Offset: 0x70, Size: 1]
	KSItem* Border;//[Offset: 0x98, Size: 1]
	KSItem* Title;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 1]
	int ReplicationKey;//[Offset: 0x4, Size: 1]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSPersistentPlayerId
	SerializedMctsNetId NetId;//[Offset: 0x0, Size: 1]
	int EngineId;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SerializedMctsNetId
	uint64 A;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSItemDrop* ItemDropClass;//[Offset: 0x1b8, Size: 1]
	int ItemPrice;//[Offset: 0x1e0, Size: 1]
	bool bShouldShowCTA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	class KSCallToActionCondition* CTAConditionClass;//[Offset: 0x1e8, Size: 1]
	enum InGameRarity;//[Offset: 0x210, Size: 1]
	GameplayTag ItemType;//[Offset: 0x214, Size: 1]
	bool bUsePreviewIconInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	ImageIconInfo* PreviewIconInfo;//[Offset: 0x220, Size: 1]
	Texture2D* DefaultItemIcon;//[Offset: 0x228, Size: 1]
	class UserWidget* SpecialItemWidgetClass;//[Offset: 0x230, Size: 1]
	Color ColorCode;//[Offset: 0x258, Size: 1]
	PrimaryAssetRules Rules;//[Offset: 0x25c, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x268, Size: 1]
	int AlsoInBundleLootId;//[Offset: 0x278, Size: 1]
	static bool SoftGiveToAsync(KSItem* Item, Actor* Owner, Actor* Instigator, GiveItemParameters InGiveItemParameters, out const delegate GivenToEvent);// 0x26d2ed0
	static bool SoftCreateDropAsync(KSItem* Item, out const Transform SpawnTransform, const Object* WorldContextObject, DropItemParameters InDropItemParameters, out const delegate ItemDroppedEvent, bool bEnablePhysics, out const Vector InSpawnLinearVelocity, out const Vector InSpawnAngularVelocity);// 0x26d2b50
	static void RemoveFromPlayerLoadout(KSItem* Item, KSPlayerState* PlayerState);// 0x26d2970
	void InitNewlyCreatedItem(int64 InItemId);// 0x26d2300
	bool HasValidPurchasePreviewIcon();// 0x26d20e0
	bool HasMobileCollectionTag();// 0x26d20b0
	static bool GiveToAsync(KSItem* Item, Actor* Owner, Actor* Instigator, GiveItemParameters InGiveItemParameters, out const delegate GivenToEvent);// 0x26d1ea0
	static bool GiveTo(KSItem* Item, Actor* Owner, Actor* Instigator, GiveItemParameters InGiveItemParameters, out Object* OutObject);// 0x26d1c90
	class UserWidget GetSpecialItemWidgetClass();// 0x26d1bf0
	int GetRarityValue();// 0x26d1af0
	IconInfo* GetPurchasePreviewIconInfo();// 0x26d1ac0
	Texture2D* GetPurchasePreviewIcon();// 0x26d1a50
	KSJobItem* GetJobItemForPreview(const Object* WorldContextObject);// 0x26d1190
	GameplayTag GetItemType();// 0x26d1170
	int GetItemPrice();// 0x26d1150
	class KSItemDrop GetItemDropClass();// 0x26d10b0
	ItemDisplayStat[] GetItemDisplayStats();// 0x26d0fd0
	FText GetItemCategoryText();// 0x26d0f30
	enum GetInGameRarity();// 0x26d0ef0
	FName[] GetCTAPath();// 0x26d0c50
	class KSCallToActionCondition GetCTAConditionClass();// 0x26d0bb0
	SoftObjectPath GetCosmeticDisplayIconPath();// 0x26d0cf0
	Color GetColorCode();// 0x26d0cd0
	static bool CreateDropAsync(KSItem* Item, out const Transform SpawnTransform, const Object* WorldContextObject, DropItemParameters InDropItemParameters, out const delegate ItemDroppedEvent, bool bEnablePhysics, out const Vector InSpawnLinearVelocity, out const Vector InSpawnAngularVelocity);// 0x26d0750
	static KSItemDrop* CreateDrop(KSItem* Item, out const Transform SpawnTransform, const Object* WorldContextObject, DropItemParameters InDropItemParameters, bool bEnablePhysics, Vector InSpawnLinearVelocity, Vector InSpawnAngularVelocity);// 0x26d04a0
	bool CanBePickedUpByCharacter(const KSCharacter* PotentialOwner);// 0x26d0400
	bool CanBePickedUpBy(const Actor* PotentialOwner);// 0x26d02e0
	static bool AddToPlayerLoadout(KSItem* Item, KSPlayerState* PlayerState, out const RestoreInfoInitParams InitParams, out const GiveItemParameters GiveParams);// 0x26cfc10

--------------------------------
Class: PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int ItemId;//[Offset: 0x30, Size: 1]
	FText ItemDisplayName;//[Offset: 0x38, Size: 1]
	FText ItemDescription;//[Offset: 0x50, Size: 1]
	FString FriendlySearchName;//[Offset: 0x68, Size: 1]
	bool OnlyDisplayAcqusitionIfWhitelisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	GameplayTagContainer CollectionContainer;//[Offset: 0x80, Size: 1]
	bool IsOwnableInventoryItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	int64[] DisplayableLootIds;//[Offset: 0xa8, Size: 1]
	Texture2D* ItemIcon;//[Offset: 0xb8, Size: 1]
	SoftObjectPath ItemIconPath;//[Offset: 0xe0, Size: 1]
	Texture2D* LegacyItemIconTexture;//[Offset: 0xf8, Size: 1]
	IconReference[] Icons;//[Offset: 0x120, Size: 1]
	<enum,FString> ExternalProductSkus;//[Offset: 0x130, Size: 1]
	int64[] BlackListedLootIds;//[Offset: 0x180, Size: 1]
	bool ShouldDisplayToUser(int64 LootId);// 0xe09ce0
	void SetItemName(FText NewItemDisplayName);// 0xe09bc0
	void SetItemDescription(FText NewItemDescription);// 0xe09aa0
	void SetFriendlySearchName(FString InFriendlyName);// 0xe09a00
	void SetCollectionContainer(out const GameplayTagContainer InContainer);// 0xe09940
	bool IsItemTempDisabled();// 0xe09910
	bool IsItemDisabled(bool bIncludeTempDisabled);// 0xe09880
	void GetTextureAsync(out Texture2D* Texture, out const delegate IconLoadedEvent);// 0xe09750
	SoftObjectPath GetSoftItemIconAsPath();// 0xe096b0
	Texture2D* GetSoftItemIcon();// 0xe09670
	bool GetSoftIconByName(FName IconType, out Texture2D* Icon);// 0xe09570
	bool GetSoftIconAsPathByName(FName IconType, out SoftObjectPath Icon, int CohortSize);// 0xe09430
	FString GetItemNameAsString();// 0xe092e0
	FText GetItemName();// 0xe09230
	int GetItemId();// 0xe09210
	FString GetItemDescriptionAsString();// 0xe090e0
	FText GetItemDescription();// 0xe09030
	static PlatformInventoryItem* GetItemByFriendlyName(FString InFriendlyName);// 0xe08f10
	FString GetFriendlySearchName();// 0xe08e50
	GameplayTagContainer GetCollectionContainer();// 0xe08e20

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: KSItemDrop.Actor.Object
	KSInteractableComponent* InteractableComponent;//[Offset: 0x240, Size: 1]
	KSCharacter*[] AllowedCharacters;//[Offset: 0x248, Size: 1]
	int Price;//[Offset: 0x258, Size: 1]
	bool bIsInstantPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bAllowManualInstantPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x260, Size: 1]
	Vector SightOffset;//[Offset: 0x268, Size: 1]
	Actor*[] ActorsSeenBy;//[Offset: 0x278, Size: 1]
	bool bCanPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int AssociatedPingID;//[Offset: 0x28c, Size: 1]
	KSPlayerState* AssociatedPingPlayerState;//[Offset: 0x290, Size: 1]
	KSItem* ItemAsset;//[Offset: 0x298, Size: 1]
	bool bDestroyOnPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	MulticastInlineDelegateProperty OnItemPickup;//[Size: 1]
	KSCharacter* PendingPickupCharacter;//[Offset: 0x2d8, Size: 1]
	KSInteractionManager* CurrentInteractionManager;//[Offset: 0x2e0, Size: 1]
	KSStaticMeshComponent* CollisionMesh;//[Offset: 0x2e8, Size: 1]
	enum InactiveStencilValue;//[Offset: 0x2f3, Size: 1]
	enum ActiveStencilValue;//[Offset: 0x2f4, Size: 1]
	Rotator LootSiteSpawnRotation;//[Offset: 0x2f8, Size: 1]
	GameplayTagContainer SkinTagContainer;//[Offset: 0x308, Size: 1]
	Controller* DropHidePlayer;//[Offset: 0x340, Size: 1]
	bool bClientDropUnhide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	int OriginalOwnerId;//[Offset: 0x34c, Size: 1]
	int OriginalOwnerTeamNum;//[Offset: 0x350, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x358, Size: 1]
	bool bIsPlayerDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	enum DropPickupConfig;//[Offset: 0x369, Size: 1]
	int ObjectiveId;//[Offset: 0x36c, Size: 1]
	AkAudioEvent* PickupSound;//[Offset: 0x370, Size: 1]
	KSNudgeComponent* NudgeComponent;//[Offset: 0x378, Size: 1]
	bool bCanBeNudged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool bOnlyVisibleIfCanPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	bool ShouldShowViewedItemLabel();// 0x26d2b20
	void SetInactiveStencilValue(enum Value);// 0x26d2aa0
	void SetActiveStencilValue(enum Value);// 0x26d2a20
	void PlayDestroyedEffects();// 0x2cbecb0
	bool PickUp(KSCharacter* Receiver, bool bActivate);// 0x26d28a0
	void OverridePickupFunction(out const delegate ItemPickupOverride);// 0x26d27e0
	void OnRootMeshDetached(KSStaticMeshComponent* ResponsibleMesh);// 0x26d2760
	void OnRep_PendingPickupCharacter();// 0x26d2740
	void OnRep_ObjectiveId();// 0xcf5e70
	void OnRep_ItemAsset();// 0x1ef10a0
	void OnRep_DropHidePlayer();// 0x26d2720
	delegate GetPickupDelegate();// 0x26d1a20
	KSCharacter* GetPendingPickupCharacter();// 0x26169c0
	Rotator GetLootSiteSpawnRotation();// 0x26d1410
	bool GetLabelInfoForSecondaryTitle(out FText LabelText);// 0x26d1320
	bool GetLabelInfoForPrimaryTitle(out FText LabelText);// 0x26d1230
	KSItem* GetItemAsset();// 0x26d0f10
	void EndOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x26d0a70
	bool CanBePickedUpByCharacterInternal(KSCharacter* Receiver);// 0x2619910
	bool CanBePickedUpByCharacter(KSCharacter* Receiver);// 0x26d0370
	void CalculateRandomImpulse(out Vector LinearImpulse, out Vector AngularImpulse);// 0x26d01f0
	void BeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x26d0000
	void AsyncItemGiveComplete(KSItem* Item, Object* GivenObject, GiveItemParameters InGiveItemParameters, bool bSuccess);// 0x26cfe40
	void ApplyRandomImpulse();// 0x26cfe20
	void AllowPickup(KSCharacter* Character);// 0x26cfda0

--------------------------------
Class: KSCharacter.KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	bool bTapRadialButtonToUseLastSelectedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159a, Size: 1]
	FName[] ReleasedInputsOnOpenUI;//[Offset: 0x1670, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenRadialMenu;//[Offset: 0x1680, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenEscapeMenu;//[Offset: 0x1690, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenScoreboard;//[Offset: 0x16a0, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenMap;//[Offset: 0x16b0, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenShop;//[Offset: 0x16c0, Size: 1]
	FName[] ReleasedInputsOnCloseRadialMenu;//[Offset: 0x16d0, Size: 1]
	MulticastInlineDelegateProperty OnPossessedBy;//[Size: 1]
	MulticastInlineDelegateProperty OnUnpossessed;//[Size: 1]
	KSPlayerController* CachedKSPlayerController;//[Offset: 0x1700, Size: 1]
	KSInteractableComponent* ArmorRepairInteractableComponent;//[Offset: 0x1708, Size: 1]
	KSInteractableComponent* ReviveInteractableComponent;//[Offset: 0x1710, Size: 1]
	Actor*[] NearbyCrateItems;//[Offset: 0x1718, Size: 1]
	KSObjectiveInfo ObjectiveInfo;//[Offset: 0x1728, Size: 1]
	KSObjectiveTimerInfo ObjectiveTimerInfo;//[Offset: 0x1790, Size: 1]
	KSObjectiveCaptureInfo ObjectiveCaptureInfo;//[Offset: 0x17c8, Size: 1]
	KSAutoPickupComponent* AutoPickupComponent;//[Offset: 0x17e0, Size: 1]
	bool bProcessingReverseFriendlyFireDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e8, Size: 1]
	AkAudioEvent* RumbleDamageAudioEvent;//[Offset: 0x1808, Size: 1]
	AkAudioEvent* RumbleJumpAudioEvent;//[Offset: 0x1810, Size: 1]
	AkAudioEvent* RumbleReviveAudioEvent;//[Offset: 0x1818, Size: 1]
	AkAudioEvent* RumbleReviveAudioEventEnd;//[Offset: 0x1820, Size: 1]
	AkAudioEvent* RumbleDownedAudioEvent;//[Offset: 0x1828, Size: 1]
	AkAudioEvent* RumbleDownedAudioEventEnd;//[Offset: 0x1830, Size: 1]
	float MinimumFlinchHeight;//[Offset: 0x1840, Size: 1]
	float MinimumFlinchDamage;//[Offset: 0x1844, Size: 1]
	float MaximumFlinchHeight;//[Offset: 0x1848, Size: 1]
	float MaximumFlinchDamage;//[Offset: 0x184c, Size: 1]
	float FlinchDuration;//[Offset: 0x1850, Size: 1]
	float FlinchRecoveryRate;//[Offset: 0x1854, Size: 1]
	bool bFlinchSnipersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1858, Size: 1]
	<KSPlayerState*,KSDamageRecord> DamageRecord;//[Offset: 0x1860, Size: 1]
	KSShotgunHitChangeList ReplicatedShotgunHits;//[Offset: 0x18b0, Size: 1]
	MulticastInlineDelegateProperty OnNewShotgunHit;//[Size: 1]
	float KillCamHitRecordTime;//[Offset: 0x1998, Size: 1]
	MulticastInlineDelegateProperty OnLocalViewChanged;//[Size: 1]
	PlayerController*[] LocalViewers;//[Offset: 0x19c8, Size: 1]
	KSRepossessState RepossessState;//[Offset: 0x19d8, Size: 1]
	MulticastInlineDelegateProperty OnCanRemoveBackPackChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterFreeFallStartedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterFreeFallCompletedDel;//[Size: 1]
	FText RemoveBackpackInteractionPromptText;//[Offset: 0x1a28, Size: 1]
	float SkyDiveMaxPitch;//[Offset: 0x1a40, Size: 1]
	float SkyDiveMinPitch;//[Offset: 0x1a44, Size: 1]
	float SkyDiveExitDistance;//[Offset: 0x1a48, Size: 1]
	float SkyDiveExitThreshold;//[Offset: 0x1a4c, Size: 1]
	float SkyDiveForceExitDistance;//[Offset: 0x1a50, Size: 1]
	bool bLeftHandMantleIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a54, Size: 1]
	bool bRightHandMantleIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a55, Size: 1]
	Vector LeftHandMantleIKLocation;//[Offset: 0x1a58, Size: 1]
	Vector RightHandMantleIKLocation;//[Offset: 0x1a64, Size: 1]
	float LeftHandMantleIKAlpha;//[Offset: 0x1a70, Size: 1]
	float RightHandMantleIKAlpha;//[Offset: 0x1a74, Size: 1]
	bool bFadeOutLeftHandMantleIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a78, Size: 1]
	bool bFadeOutRightHandMantleIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a79, Size: 1]
	SmoothedComponentInfo[] SmoothedComponents;//[Offset: 0x1a80, Size: 1]
	KSSmoothingComponent*[] RegisteredSmoothingComponents;//[Offset: 0x1a90, Size: 1]
	CurveFloat* SprintImpulseCurve;//[Offset: 0x1b38, Size: 1]
	float SprintPressLeeway;//[Offset: 0x1b44, Size: 1]
	float SprintLeewayExpire;//[Offset: 0x1b48, Size: 1]
	bool bFacingVaultWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4c, Size: 1]
	bool bWantsToAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4d, Size: 1]
	bool bAutoSprintTimerComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4e, Size: 1]
	float AutoSprintDelay;//[Offset: 0x1b50, Size: 1]
	float LeftHandMantleIKOffset;//[Offset: 0x1b60, Size: 1]
	float RightHandMantleIKOffset;//[Offset: 0x1b64, Size: 1]
	float HandMantleIKFadeTime;//[Offset: 0x1b68, Size: 1]
	float MantleIKHandsToWallForwardOffset;//[Offset: 0x1b6c, Size: 1]
	float RiseFromCrouchDelayTime;//[Offset: 0x1b70, Size: 1]
	bool bUsingEmoteCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b78, Size: 1]
	float EmoteFinishedDisableFireTimeSeconds;//[Offset: 0x1b7c, Size: 1]
	int ActiveEmoteActionRestrictorID;//[Offset: 0x1b80, Size: 1]
	TimerHandle RemoveEmoteActionRestrictorTimerHandle;//[Offset: 0x1b88, Size: 1]
	MulticastInlineDelegateProperty OnCharacterLandedNativeDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCrouchStartedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCrouchEndedDel;//[Size: 1]
	float GamepadInput;//[Offset: 0x1c08, Size: 1]
	bool HasGamepadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0c, Size: 1]
	bool bZiplineActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0d, Size: 1]
	KSModInst_Activated* AbilityMovementMod;//[Offset: 0x1c10, Size: 1]
	float ZiplineMeshHeightAdjust;//[Offset: 0x1c18, Size: 1]
	float DrownDamagePeriod;//[Offset: 0x1c1c, Size: 1]
	float DrownPerTickDamage;//[Offset: 0x1c20, Size: 1]
	class DamageType* DrownDamageType;//[Offset: 0x1c28, Size: 1]
	PGame_PositionHistoryComponent* PositionHistoryComponent;//[Offset: 0x1c38, Size: 1]
	PGame_ReplicatedTimer ReplicatedEMPLockoutTimer;//[Offset: 0x1c40, Size: 1]
	bool bIsEMPLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c90, Size: 1]
	MulticastInlineDelegateProperty OnEMPLocked;//[Size: 1]
	MulticastInlineDelegateProperty OnEMPLockoutTick;//[Size: 1]
	bool bIsOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd0, Size: 1]
	KSCharacterCameraHandler* CameraHandler;//[Offset: 0x1cd8, Size: 1]
	KSSmoothingComponent* CameraRootComponent;//[Offset: 0x1ce0, Size: 1]
	KSSpringArmComponent* MainCameraBoom;//[Offset: 0x1ce8, Size: 1]
	CameraComponent* MainCameraComponent;//[Offset: 0x1cf0, Size: 1]
	KSSpringArmComponent* SprintCameraBoom;//[Offset: 0x1cf8, Size: 1]
	CameraComponent* SprintCameraComponent;//[Offset: 0x1d00, Size: 1]
	KSSpringArmComponent* TransitionCameraBoom;//[Offset: 0x1d08, Size: 1]
	CameraComponent* TransitionCameraComponent;//[Offset: 0x1d10, Size: 1]
	KSSpringArmComponent* ShoulderCameraBoom;//[Offset: 0x1d18, Size: 1]
	CameraComponent* ShoulderCameraComponent;//[Offset: 0x1d20, Size: 1]
	CameraComponent* FirstPersonCameraComponent;//[Offset: 0x1d28, Size: 1]
	KSSpringArmComponent* TabletCameraBoom;//[Offset: 0x1d30, Size: 1]
	CameraComponent* TabletCameraComponent;//[Offset: 0x1d38, Size: 1]
	KSSpringArmComponent* ActionCameraBoom1;//[Offset: 0x1d40, Size: 1]
	CameraComponent* ActionCameraComponent;//[Offset: 0x1d48, Size: 1]
	KSSpringArmComponent* SwimCameraBoom;//[Offset: 0x1d50, Size: 1]
	CameraComponent* SwimCameraComponent;//[Offset: 0x1d58, Size: 1]
	KSSpringArmComponent* MountedCameraBoom;//[Offset: 0x1d60, Size: 1]
	CameraComponent* MountedCameraComponent;//[Offset: 0x1d68, Size: 1]
	CameraComponent* ActiveCameraComponent;//[Offset: 0x1d70, Size: 1]
	CameraComponent* PendingCameraComponent;//[Offset: 0x1d78, Size: 1]
	float CrouchAOSAimVertOffset;//[Offset: 0x1d84, Size: 1]
	float CrouchAOSCamVertOffsetBlendTime;//[Offset: 0x1d88, Size: 1]
	float CrouchAimingCapsuleHeightAdjustment;//[Offset: 0x1d8c, Size: 1]
	float AimSnapThrottleTime;//[Offset: 0x1da8, Size: 1]
	float LockoutCameraCooldownSpeed;//[Offset: 0x1db0, Size: 1]
	Vector AutoShoulderSwapExtent;//[Offset: 0x1dd0, Size: 1]
	float AutoShoulderSwapForwardCheckDist;//[Offset: 0x1ddc, Size: 1]
	float AutoShoulderSwapRightCheckDist;//[Offset: 0x1de0, Size: 1]
	float AutoShoulderSwapRightForwardCheckDist;//[Offset: 0x1de4, Size: 1]
	float LockedAutoShoulderSwapTimeThreshold;//[Offset: 0x1de8, Size: 1]
	float LockedAutoShoulderSwapWeaponFireTime;//[Offset: 0x1dec, Size: 1]
	float LockedAutoShoulderSwapDistance;//[Offset: 0x1df0, Size: 1]
	enum AimState;//[Offset: 0x1e08, Size: 1]
	enum DesiredAimState;//[Offset: 0x1e09, Size: 1]
	bool bAimPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0a, Size: 1]
	bool bWasAimDownSightsWhenAimPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0b, Size: 1]
	bool bWasAimAlternateWhenAimPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0c, Size: 1]
	float AimHoldTime;//[Offset: 0x1e10, Size: 1]
	float AimOverShoulderHoldTime;//[Offset: 0x1e14, Size: 1]
	<enum,Material*> MaterialHideTypeMap;//[Offset: 0x1e18, Size: 1]
	<int,enum> MaterialIndexesToHide;//[Offset: 0x1e68, Size: 1]
	<int,MaterialInterface*> HiddenMaterials;//[Offset: 0x1eb8, Size: 1]
	bool bIsAimLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f08, Size: 1]
	MulticastInlineDelegateProperty OnAimLockedChangedDel;//[Size: 1]
	bool bIsCrosshairHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f20, Size: 1]
	MulticastInlineDelegateProperty OnCrosshairHiddenChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCannonBonusAmmoRecieved;//[Size: 1]
	GameplayTagContainer AvailableEquipPoints_New;//[Offset: 0x1fa8, Size: 1]
	KSInitialInventoryItem[] InitialInventory;//[Offset: 0x1fc8, Size: 1]
	KSInitialAmmo[] InitialAmmo;//[Offset: 0x1fd8, Size: 1]
	KSEquipmentManagerComponent* EquipmentManagerComponent;//[Offset: 0x1fe8, Size: 1]
	bool bDropAmmoOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff0, Size: 1]
	GameplayTagContainer WeaponSlotsToDropOnDeath;//[Offset: 0x1ff8, Size: 1]
	GameplayTagContainer WeaponSlotsToDropOnDowned;//[Offset: 0x2018, Size: 1]
	GameplayTagContainer[] ActiveWeaponSlotTiers;//[Offset: 0x2038, Size: 1]
	GameplayTagContainer[] GrenadeSlotTiers;//[Offset: 0x2048, Size: 1]
	KSLootLockerItem[] LootLockerInventory;//[Offset: 0x2058, Size: 1]
	GameplayTag StartingActiveWeaponEquipPoint;//[Offset: 0x2068, Size: 1]
	KSSwapHandlerProfile* MainSwapHandlerProfile;//[Offset: 0x2070, Size: 1]
	KSSwapHandlerProfile* GadgetSwapHandlerProfile;//[Offset: 0x2078, Size: 1]
	KSSwapHandlerProfile* MedpackSwapHandlerProfile;//[Offset: 0x2080, Size: 1]
	KSSwapHandlerProfile* PassiveSwapHandlerProfile;//[Offset: 0x2088, Size: 1]
	KSSwapHandlerProfile* QuickMeleeSwapHandlerProfile;//[Offset: 0x2090, Size: 1]
	KSWeaponAsset* EmergencyWeaponAsset;//[Offset: 0x2098, Size: 1]
	FText ObjectiveWeaponDropPrompt;//[Offset: 0x20a8, Size: 1]
	FText ObjectiveWeaponDropProgressText;//[Offset: 0x20c0, Size: 1]
	float DropObjectiveWeaponInteractTime;//[Offset: 0x20d8, Size: 1]
	MulticastInlineDelegateProperty OnCharacterStartedWeaponFireNativeDel;//[Size: 1]
	bool bPreventRetrieveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f0, Size: 1]
	bool bSelfDestruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f1, Size: 1]
	<FName,int> SubTypeComponentIndexMap;//[Offset: 0x2168, Size: 1]
	float MeleeHoldTime;//[Offset: 0x21b8, Size: 1]
	int PrimaryTier;//[Offset: 0x21bc, Size: 1]
	int SecondaryTier;//[Offset: 0x21c0, Size: 1]
	int MeleeTier;//[Offset: 0x21c4, Size: 1]
	float WeaponDropHoldTime;//[Offset: 0x21c8, Size: 1]
	float WeaponDoubleTapTime;//[Offset: 0x21cc, Size: 1]
	float LastActiveWeaponFireTimestamp;//[Offset: 0x21d0, Size: 1]
	MulticastInlineDelegateProperty OnActiveWeaponChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnActiveGrenadeChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnActiveMedPackChangedDel;//[Size: 1]
	TimerHandle MeleeHoldTimer;//[Offset: 0x2250, Size: 1]
	TimerHandle DoubleTapTimer;//[Offset: 0x2258, Size: 1]
	TimerHandle DropHoldTimer;//[Offset: 0x2260, Size: 1]
	float WeaponSwapThrottleExpire;//[Offset: 0x2268, Size: 1]
	float WeaponSwapThrottlePeriod;//[Offset: 0x226c, Size: 1]
	float QuickMeleeHoldTime;//[Offset: 0x2270, Size: 1]
	KSWeapon_Melee* CurrentQuickMeleeWeapon;//[Offset: 0x2278, Size: 1]
	bool bQuickMeleeHoldCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2280, Size: 1]
	bool bSwapOffQuickMeleeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2281, Size: 1]
	MulticastInlineDelegateProperty OnStartFireFailed;//[Size: 1]
	bool IsFireWeaponHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c8, Size: 1]
	bool bStartFireAfterAnimFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c9, Size: 1]
	bool bIsThrowGrenadeHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22ca, Size: 1]
	bool IsAimDownSightsHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22cb, Size: 1]
	FString SwingMontageSection;//[Offset: 0x22d0, Size: 1]
	<uint16,KSPendingWeaponChargeValueUpdate> PendingChargeUpdates;//[Offset: 0x22f0, Size: 1]
	MulticastInlineDelegateProperty OnWeaponInventoryChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnGadgetResupplied;//[Size: 1]
	MulticastInlineDelegateProperty OnMeleeHoldStart;//[Size: 1]
	MulticastInlineDelegateProperty OnMeleeHoldEnd;//[Size: 1]
	KSWeaponComponent* ActiveWeaponComponent;//[Offset: 0x2380, Size: 11]
	uint16 ActiveEquipmentId;//[Offset: 0x23d8, Size: 11]
	KSEquipmentContainer EquipmentContainer;//[Offset: 0x2400, Size: 1]
	<uint16,KSPendingWeaponStateUpdates> PendingWeaponStateUpdates;//[Offset: 0x2628, Size: 1]
	MulticastInlineDelegateProperty OnEquipmentAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentRemovedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentBecomeActiveDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentEndActiveDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSpecialAmmoEvent;//[Size: 1]
	<enum,KSAmmoDropAsset*> AmmoDropAssets;//[Offset: 0x2728, Size: 1]
	KSAmmoManager AmmoManager;//[Offset: 0x2778, Size: 1]
	float OutOfSightWeaponPickupRange;//[Offset: 0x28a8, Size: 1]
	float LabelPickupRange;//[Offset: 0x28ac, Size: 1]
	MulticastInlineDelegateProperty OnItemPickedUp;//[Size: 1]
	float ReloadTapThreshold;//[Offset: 0x28c0, Size: 1]
	float ContextualPressTime;//[Offset: 0x28c4, Size: 1]
	bool bWantsToInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c8, Size: 1]
	float CachedMaxHealth;//[Offset: 0x28cc, Size: 1]
	float DownedHealth;//[Offset: 0x28d0, Size: 1]
	float RevivedHealth;//[Offset: 0x28d4, Size: 1]
	float MaxHealthBonus;//[Offset: 0x28d8, Size: 1]
	float MaxMaxHealthBonus;//[Offset: 0x28dc, Size: 1]
	float LocalMaxHealthBonus;//[Offset: 0x28e0, Size: 1]
	MulticastInlineDelegateProperty OnMaxHealthBonusChanged;//[Size: 1]
	bool bDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f9, Size: 1]
	KSTimerComponent* GiveUpTimer;//[Offset: 0x2900, Size: 1]
	float GiveUpHoldTime;//[Offset: 0x2908, Size: 1]
	MulticastInlineDelegateProperty OnGiveUpTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnGiveUpTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnGiveUpAllowed;//[Size: 1]
	float DownedImmuneTime;//[Offset: 0x2940, Size: 1]
	float DownedImmuneTimeStamp;//[Offset: 0x2944, Size: 1]
	bool bAllowGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294c, Size: 1]
	float BleedPeriod;//[Offset: 0x2950, Size: 1]
	float BleedDamage;//[Offset: 0x2954, Size: 1]
	class DamageType* BleedDamageType;//[Offset: 0x2958, Size: 1]
	Controller* DownInstigator;//[Offset: 0x2968, Size: 1]
	class DamageType* DownDamageType;//[Offset: 0x2970, Size: 1]
	Actor* DownDamageCauser;//[Offset: 0x2978, Size: 1]
	MulticastInlineDelegateProperty OnCharacterDownedChangedDel;//[Size: 1]
	int DownSpree;//[Offset: 0x29a8, Size: 1]
	AkAudioEvent*[] DownSpreeSounds;//[Offset: 0x29b0, Size: 1]
	float DefaultAssistDuration;//[Offset: 0x29c0, Size: 1]
	AssistTag[] DownAssistTagQueue;//[Offset: 0x29c8, Size: 1]
	PlayerState*[] DownAssists;//[Offset: 0x29d8, Size: 1]
	Controller* KillInstigator;//[Offset: 0x29e8, Size: 1]
	PlayerState*[] EliminationAssists;//[Offset: 0x29f0, Size: 1]
	PlayerState*[] PlayersWithEliminationCredit;//[Offset: 0x2a00, Size: 1]
	FText ReviveInteractionProgressText;//[Offset: 0x2a18, Size: 1]
	FText ReviveInteractionPromptText;//[Offset: 0x2a30, Size: 1]
	CameraShake* InteractionCameraShake;//[Offset: 0x2a48, Size: 1]
	float TimeToRevive;//[Offset: 0x2a50, Size: 1]
	float bForceCrouchOnRevive;//[Offset: 0x2a54, Size: 1]
	ReviveInfo ReviveInfo;//[Offset: 0x2a58, Size: 1]
	Actor* ActorTargetingMeForRevive;//[Offset: 0x2ae8, Size: 1]
	MulticastInlineDelegateProperty OnStartReviveDel;//[Size: 1]
	MulticastInlineDelegateProperty OnStartReviveOtherDel;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveInterruptedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveOtherInterruptedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveCompletedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveOtherCompletedDel;//[Size: 1]
	int NumOngoingRemoteRevives;//[Offset: 0x2be0, Size: 1]
	MulticastInlineDelegateProperty OnShoulderSwapChanged;//[Size: 1]
	KSInteractionManager* InteractionManager;//[Offset: 0x2c58, Size: 1]
	KSInteractionManager* ReceivedInteractionManager;//[Offset: 0x2c60, Size: 1]
	Actor* InteractionHoverTarget;//[Offset: 0x2c68, Size: 1]
	Actor* InteractionTarget;//[Offset: 0x2c70, Size: 1]
	bool IsInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c78, Size: 1]
	class KSInteractionType* MostRecentInteractionType;//[Offset: 0x2c80, Size: 1]
	enum MostRecentInteractionResult;//[Offset: 0x2c88, Size: 1]
	Vector MostRecentInteractionStartLocation;//[Offset: 0x2c8c, Size: 1]
	bool InteractionFacesRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c98, Size: 1]
	KSInteractableCameraTransition InteractionCameraTransition;//[Offset: 0x2ca0, Size: 1]
	class KSInteractionType* DefaultInteractionType;//[Offset: 0x2cd0, Size: 1]
	float InteractionDistance;//[Offset: 0x2cd8, Size: 1]
	float MaxInteractionAngle;//[Offset: 0x2cdc, Size: 1]
	float InteractionHoldTime;//[Offset: 0x2ce0, Size: 1]
	float InteractionPriorityBaseModifier;//[Offset: 0x2ce4, Size: 1]
	bool bUncrouchAfterInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce8, Size: 1]
	bool bInteractionCrouchLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce9, Size: 1]
	TimerHandle InstantInteractHandle;//[Offset: 0x2d08, Size: 1]
	float InstantInteractCooldownTime;//[Offset: 0x2d10, Size: 1]
	MulticastInlineDelegateProperty OnHoveredInteractableChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractStart;//[Size: 1]
	MulticastInlineDelegateProperty OnRemotePlayerInteractStart;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnRemotePlayerInteractEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractInterrupted;//[Size: 1]
	MulticastInlineDelegateProperty OnChargingActionStart;//[Size: 1]
	MulticastInlineDelegateProperty OnChargingActionEnd;//[Size: 1]
	Vector BaseLocalDropLocation;//[Offset: 0x2db8, Size: 1]
	<int,float> TierToDropYawMap;//[Offset: 0x2dc8, Size: 1]
	<GameplayTag,float> EquipPointToDropYawMap;//[Offset: 0x2e18, Size: 1]
	float AmmoDropYaw;//[Offset: 0x2e68, Size: 1]
	float DropLateralSpeed;//[Offset: 0x2e6c, Size: 1]
	float DropLateralSpeedVariance;//[Offset: 0x2e70, Size: 1]
	float CompanionAmmoHeightShift;//[Offset: 0x2e74, Size: 1]
	float DropAngleVariance;//[Offset: 0x2e78, Size: 1]
	float TryToStopRagdollInterval;//[Offset: 0x2ea4, Size: 1]
	float RagdollFreezeSpeed;//[Offset: 0x2ea8, Size: 1]
	float DeathDisplayLifespan;//[Offset: 0x2ec4, Size: 1]
	FString[] DeathWidgetPoolName;//[Offset: 0x2ec8, Size: 1]
	bool bGodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc0, Size: 1]
	KSFlashBangRecord[] FlashBangRecords;//[Offset: 0x2fc8, Size: 1]
	KSPlayerMod* FlashBangEffectMod;//[Offset: 0x2fe0, Size: 1]
	KSPlayerModInstance* FlashBangEffectModInstance;//[Offset: 0x2fe8, Size: 1]
	MulticastInlineDelegateProperty OnLightBombHitCount;//[Size: 1]
	MulticastInlineDelegateProperty OnAbleToMountChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCamouflageChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCamouflageLevelChangedDel;//[Size: 1]
	bool bCachedCamouflaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3030, Size: 1]
	enum CurrentCamouflageLevel;//[Offset: 0x3031, Size: 1]
	bool bScrambled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3040, Size: 1]
	bool bMedPackPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3041, Size: 1]
	MulticastInlineDelegateProperty OnStickDel;//[Size: 1]
	MulticastInlineDelegateProperty OnMedPackFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnGrenadeFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponPickupInventoryFull;//[Size: 1]
	MulticastInlineDelegateProperty OnItemPickupSuccess;//[Size: 1]
	bool bReplicatedActivatingMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3098, Size: 1]
	MulticastInlineDelegateProperty OnModsUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnActivatableModsUpdated;//[Size: 1]
	bool bRotationInputAllowsAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c0, Size: 1]
	float MinimumRotationInputForAimAssist;//[Offset: 0x30c4, Size: 1]
	MulticastInlineDelegateProperty OnGamepadAbilityCycle;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityActivatedEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityUsedEvent;//[Size: 1]
	float ChordDelay;//[Offset: 0x30fc, Size: 1]
	float HoldDelay;//[Offset: 0x3100, Size: 1]
	float DamageForMaxForceFeedback;//[Offset: 0x3104, Size: 1]
	float DamageForceFeedbackScale;//[Offset: 0x3108, Size: 1]
	float DamageForceFeedbackDuration;//[Offset: 0x310c, Size: 1]
	bool bDamageForceFeedbackUsesSmallMotors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3110, Size: 1]
	float ForceFeedbackOnErrorMagnitude;//[Offset: 0x3114, Size: 1]
	float ForceFeedbackOnErrorDuration;//[Offset: 0x3118, Size: 1]
	float LandingSpeedForMaxForceFeedback;//[Offset: 0x311c, Size: 1]
	ForceFeedbackComponent* LandForceFeedbackComponent;//[Offset: 0x3120, Size: 1]
	ForceFeedbackEffect* JumpForceFeedbackEffect;//[Offset: 0x3128, Size: 1]
	ForceFeedbackEffect* DownedForceFeedbackEffect;//[Offset: 0x3130, Size: 1]
	ForceFeedbackEffect* BeingRevivedForceFeedbackEffect;//[Offset: 0x3138, Size: 1]
	interface classNone[] ReplicatedFootstepOverrides;//[Offset: 0x3140, Size: 1]
	interface classNone[] AutonomousProxyFootstepOverrides;//[Offset: 0x3150, Size: 1]
	float FootprintLifetimeSeconds;//[Offset: 0x3160, Size: 1]
	float FootprintStartFadeOutTimeSeconds;//[Offset: 0x3164, Size: 1]
	Vector FootprintDecalSize;//[Offset: 0x3168, Size: 1]
	MaterialInterface* LeftFootprintDecalMaterial;//[Offset: 0x3178, Size: 1]
	MaterialInterface* RightFootprintDecalMaterial;//[Offset: 0x3180, Size: 1]
	Vector FootprintMeshSize;//[Offset: 0x3188, Size: 1]
	StaticMesh* FootprintMesh;//[Offset: 0x3198, Size: 1]
	KSFootprintInfo[] Footprints;//[Offset: 0x31a0, Size: 1]
	InstancedStaticMeshComponent* FootprintInstancedMeshComponent;//[Offset: 0x31b0, Size: 1]
	class NavArea* MovingNavAreaClass;//[Offset: 0x31c0, Size: 1]
	class NavArea* StillNavAreaClass;//[Offset: 0x31c8, Size: 1]
	KSNavModifierComponent* KSNavModifierComponent;//[Offset: 0x31d0, Size: 1]
	float NavModificationUpdateTimerPeriod;//[Offset: 0x31d8, Size: 1]
	FName DamagedHearingEventTag;//[Offset: 0x31e8, Size: 1]
	float DamageForDefaultLoudness;//[Offset: 0x31f0, Size: 1]
	FName FireHearingEventTag;//[Offset: 0x31f4, Size: 1]
	float FireRangeForDefaultLoudness;//[Offset: 0x31fc, Size: 1]
	FName FootstepHearingEventTag;//[Offset: 0x3200, Size: 1]
	float MovementSpeedForDefaultLoudness;//[Offset: 0x3208, Size: 1]
	float TeamEventRange;//[Offset: 0x320c, Size: 1]
	FName BotName;//[Offset: 0x321c, Size: 1]
	float BotADSAccuracy;//[Offset: 0x3224, Size: 1]
	bool bRandomBotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3228, Size: 1]
	bool bBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3229, Size: 1]
	enum CurrentBehaviorState;//[Offset: 0x322a, Size: 1]
	MulticastInlineDelegateProperty OnBehaviorStateChanged;//[Size: 1]
	class KSVOComponent* VOComponentClass;//[Offset: 0x3240, Size: 1]
	KSVOComponent* VOComponent;//[Offset: 0x3248, Size: 1]
	DataTable*[] PossibleVOTables;//[Offset: 0x3250, Size: 1]
	GameplayTag DownOtherVOEvent;//[Offset: 0x3264, Size: 1]
	float NameplateZOffset;//[Offset: 0x326c, Size: 1]
	float CurrentNameplateZOffset;//[Offset: 0x3270, Size: 1]
	float CurrentNameplateAimZOffset;//[Offset: 0x3274, Size: 1]
	float NameplateAimZOffset;//[Offset: 0x3278, Size: 1]
	float NameplateAimZOffsetBlendTime;//[Offset: 0x327c, Size: 1]
	float TargetNameplateAimZOffset;//[Offset: 0x3280, Size: 1]
	float CurrentNameplateCrouchZOffset;//[Offset: 0x3284, Size: 1]
	float NameplateCrouchZOffset;//[Offset: 0x3288, Size: 1]
	float NameplateCrouchZOffsetBlendTime;//[Offset: 0x328c, Size: 1]
	float TargetNameplateCrouchZOffset;//[Offset: 0x3290, Size: 1]
	enum VehicleState;//[Offset: 0x3294, Size: 1]
	KSVehicle* CurrentVehicle;//[Offset: 0x3298, Size: 1]
	MulticastInlineDelegateProperty OnVehicleStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnDestructibleSpeedOverlap;//[Size: 1]
	bool bDoDrawDebugLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d0, Size: 1]
	FName BaseVisibilityBone;//[Offset: 0x32d4, Size: 1]
	FName LeftElbowBone;//[Offset: 0x32dc, Size: 1]
	FName LeftWristBone;//[Offset: 0x32e4, Size: 1]
	FName RightElbowBone;//[Offset: 0x32ec, Size: 1]
	FName RightWristBone;//[Offset: 0x32f4, Size: 1]
	float HiddenArmScale;//[Offset: 0x32fc, Size: 1]
	float LeftArmScaleAlpha;//[Offset: 0x3300, Size: 1]
	float RightArmScaleAlpha;//[Offset: 0x3304, Size: 1]
	bool bShowWeaponWhenArmVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3308, Size: 1]
	float MaxDistancePenetrationCheck;//[Offset: 0x330c, Size: 1]
	enum LeftArmVisibility;//[Offset: 0x3810, Size: 1]
	enum RightArmVisibility;//[Offset: 0x3811, Size: 1]
	FName PelvisBone;//[Offset: 0x3814, Size: 1]
	KSApparelAsset*[] DefaultApparelSetup;//[Offset: 0x3820, Size: 1]
	<AppliedApparelKey,KSApparelAsset*> AppliedApparelMap;//[Offset: 0x3830, Size: 1]
	<FName,AppliedApparelKey> SlotToApparelKeyMap;//[Offset: 0x3880, Size: 1]
	KSApparelAsset*[] ApparelAssets;//[Offset: 0x38d0, Size: 1]
	bool bNoApparel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e0, Size: 1]
	KSApparelAsset*[] LocalApparelAssets;//[Offset: 0x38e8, Size: 1]
	bool bApparelAssetMapDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f8, Size: 1]
	TimerHandle ApparelTimeoutHandle;//[Offset: 0x3900, Size: 1]
	float ApparelTimeoutTime;//[Offset: 0x3908, Size: 1]
	bool bFirstApparelApplicationSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390c, Size: 1]
	MulticastInlineDelegateProperty OnNewApparelApplicationFinishedDel;//[Size: 1]
	bool bApparelInstancesAreLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3980, Size: 1]
	int ApparelLockCount;//[Offset: 0x3990, Size: 1]
	bool bApparelDirtiedAndLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3994, Size: 1]
	KSTranslucencyMaterialInfo[] TranslucencyMaterialInfos;//[Offset: 0x39e8, Size: 1]
	KSCharacterGender Gender;//[Offset: 0x39f8, Size: 1]
	KSCharacterGender LocalGender;//[Offset: 0x39fa, Size: 1]
	MulticastInlineDelegateProperty OnGenderChangedDel;//[Size: 1]
	SkinObjectManagerComponent* SkinsManager;//[Offset: 0x3a28, Size: 1]
	MultiSkinObject* DefaultBodyApparelSkinObject;//[Offset: 0x3a30, Size: 1]
	GameplayTagContainer SkinTagContainer;//[Offset: 0x3a38, Size: 1]
	DataTableInfo[] DefaultApparelSkinTables;//[Offset: 0x3a58, Size: 1]
	bool bUseCameraProximityFading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a80, Size: 1]
	float CameraFadeStartDistance;//[Offset: 0x3a84, Size: 1]
	float CameraFadeEndDistance;//[Offset: 0x3a88, Size: 1]
	FName FadeAlphaParamName;//[Offset: 0x3a8c, Size: 1]
	float LastCameraProximityAlpha;//[Offset: 0x3a94, Size: 1]
	enum Emotion;//[Offset: 0x3a98, Size: 1]
	enum LocalEmotion;//[Offset: 0x3a99, Size: 1]
	enum LastEmotion;//[Offset: 0x3a9a, Size: 1]
	float EmotionFloat;//[Offset: 0x3a9c, Size: 1]
	MulticastInlineDelegateProperty OnEmotionChangedDel;//[Size: 1]
	KSActiveEmotePropInfo[] ActiveEmotePropInfos;//[Offset: 0x3ab0, Size: 1]
	KSProp_Physical* CurrentEmotePhysicsProp;//[Offset: 0x3ac0, Size: 1]
	DecalComponent* CurrentEmoteDecalComponent;//[Offset: 0x3ac8, Size: 1]
	KSAnimationAuditComponent* AnimationAuditComponent;//[Offset: 0x3ad0, Size: 1]
	MaterialInstanceDynamic* ADSBlurMID;//[Offset: 0x3ad8, Size: 1]
	KSArmorComponent* ArmorComponent;//[Offset: 0x3ae0, Size: 1]
	float TimeToRepairArmor;//[Offset: 0x3ae8, Size: 1]
	FText ArmorRepairProgressText;//[Offset: 0x3af0, Size: 1]
	FText ArmorRepairPromptText;//[Offset: 0x3b08, Size: 1]
	bool bCanRepairArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b20, Size: 1]
	bool bRepairableArmorEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b21, Size: 1]
	bool bIsRepairingArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b22, Size: 1]
	MulticastInlineDelegateProperty OnRepairableArmorEquippedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnArmorInteractAvailableDel;//[Size: 1]
	Actor*[] NudgingActors;//[Offset: 0x3b50, Size: 1]
	KSNudgeComponent* NudgeComponent;//[Offset: 0x3b60, Size: 1]
	class KSNudgeComponent* NudgeComponentClass;//[Offset: 0x3b68, Size: 1]
	KSWeaponPropManagerComponent* WeaponPropManagerComponent;//[Offset: 0x3b70, Size: 1]
	SkelPropManagerComponent* SkinnableSkelPropManagerComponent;//[Offset: 0x3b78, Size: 1]
	StaticPropManagerComponent* SkinnableStaticPropManagerComponent;//[Offset: 0x3b80, Size: 1]
	<KSItem*,KSItem*> SkinMap;//[Offset: 0x3b88, Size: 1]
	bool bTouchModeAutoSprintActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c48, Size: 1]
	bool bPreventingAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c49, Size: 1]
	FName[] LeftDoubleTapActionMappings;//[Offset: 0x3c50, Size: 1]
	FName[] RightDoubleTapActionMappings;//[Offset: 0x3c60, Size: 1]
	bool WantsToCrouch();// 0x2666580
	void ViewedPawnTakeDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin);// 0x2666420
	void ViewedPawnInstigatedHeadshot(out const CombatEventInfo DamageInfo);// 0x26662f0
	void ViewedPawnInstigatedDamage(out const CombatEventInfo DamageInfo);// 0x26661c0
	void VehicleStateChanged(enum CurrentVehicleState);// 0x2cbecb0
	void UpdateTranslucencyOpacityValue(out const FName InKeyObjectName, float NewOpacityValue);// 0x26660f0
	void UpdateNavModification();// 0x26660d0
	void UpdateMantleHands(enum Hand, bool bEnable);// 0x2666000
	void UpdateHoveredInteractable();// 0x2665fe0
	void UpdateEmoteDecal(DecalComponent* InDecal);// 0x2665f60
	void UpdateAmmo(enum AmmoType, int AmmoDelta);// 0x2665ea0
	void UpdateAimStatus();// 0x2665e80
	void UnSelectToRevive(Actor* Reviver);// 0x2665cd0
	void UnregisterFootstepOverride(interface classNone ToRemove);// 0x2665de0
	void UnlockShoulderSwap(bool ForceFullUnlock);// 0x2665d50
	void UnhideZiplinePulley();// 0x2cbecb0
	void UnhideUplineDevice();// 0x2cbecb0
	void UnHideADSMaterials();// 0x2665cb0
	void TryToStopRagdoll();// 0x2665c90
	void TryToStopAiming(bool IsInterrupt);// 0x2665c00
	void TryToAimOverShoulder(bool bSkipUpdate);// 0x2665b70
	void TryToAimDownSights(bool bSkipUpdate);// 0x2665ae0
	void TryToAimAlternate(bool bSkipUpdate);// 0x2665a50
	void TryStartSprint();// 0x2665a30
	float TouchModeAutoVaultInputThreshold();// 0x2665a00
	bool TouchModeAutoVaultEnabled();// 0x26659d0
	void ToggleScopeZoomIndexUp();// 0x26659b0
	void ToggleScopeZoomIndexLoop();// 0x2665990
	void ToggleScopeZoomIndexDown();// 0x2665970
	void ToggleCrouch();// 0x2665950
	void ThrowGrenadeReleased();// 0x2665930
	void ThrowGrenadePressed();// 0x2665910
	void TagForDownAssist(PlayerState* Assistant, float Duration);// 0x2665840
	void SwapWeapon(KSWeapon* NextWeapon, bool bForce);// 0x2665770
	void SwapToSecondary();// 0x2665750
	void SwapToPrimary();// 0x2665730
	void SwapToPreviousWeaponWithLoadedClip(bool bForce);// 0x26656a0
	void SwapToPreviousWeaponWithAmmo(bool bForce);// 0x2665610
	void SwapToPreviousWeapon(bool bForce);// 0x2665580
	void SwapToNextWeaponWithLoadedClip(bool bForce);// 0x26654f0
	void SwapToNextWeaponWithAmmo(bool bForce);// 0x2665460
	void SwapToNextWeapon(bool bForce);// 0x26653d0
	void SwapToNextGrenade(bool bForce);// 0x2665340
	void SwapToMelee();// 0x2665320
	void SwapToMacGuffin();// 0x2665300
	void SwapSeatsTimerComplete();// 0x26652e0
	void SwapSeatsReleased();// 0x26652c0
	void SwapSeatsPressed();// 0x26652a0
	void SwapGrenade(KSWeapon* NextWeapon, bool bForce);// 0x26651d0
	void SwapActiveGrenade();// 0x26651b0
	void StopListeningForInputAction(int InputActionHandle);// 0x2665130
	void StopFire();// 0x2665110
	bool StopAnimEvent(FName AnimEventName, KSCharacterAnimInst* CharAnimInstance);// 0x2665050
	void StopAimDownSights();// 0x2665030
	void StartNewInteractionWithTarget(Actor* InInteractionTarget);// 0x2664fb0
	void StartLockoutCamera();// 0x2664f90
	void StartInteractionWithShield(KSWeaponComponent* ShieldWeaponComponent);// 0x2cbecb0
	void StartHacking();// 0x2cbecb0
	bool StartFire();// 0x2664f60
	void SprintImpulseTimelineProgress(float Value);// 0x2664ee0
	void ShowAllFootprints();// 0x2664ec0
	void SetupChords();// 0x2664ea0
	void SetTouchModeAutoSprintActive(bool bInTouchModeAutoSprintActive);// 0x2664e10
	void SetSelfDestruct(bool InSelfDestruct);// 0x2664d90
	void SetPrimaryHeatSource(KSHeatSourceComponent* InHeatSource);// 0x2664d10
	void SetOnFire(float Duration);// 0x2664c90
	void SetIsAimDownSightsHeld(bool bInIsAimDownSightsHeld);// 0x2664c10
	void SetInteractionFacesRotation(bool FacesRotation);// 0x2664b80
	void SetInteractionCameraTransition(KSInteractableCameraTransition CameraTransition);// 0x2664ad0
	void SetImperceptible(bool InImperceptible);// 0x2664a40
	void SetGodMode(bool InGodMode);// 0x26649c0
	void SetGiveUpEnabled(bool Enabled);// 0x2664930
	void SetCurrentCamouflageLevel(enum InCamouflageLevel);// 0x26648b0
	void SetClearMaxBonusHealthOnDown(const bool Val);// 0x2664830
	void SetActorTargetingMeForRevive(Actor* Reviver);// 0x26647b0
	void SetActiveCameraSimple(FName Tag, float InBlendTime);// 0x26646e0
	void SetActiveCamera(FName Tag, ViewTargetTransitionParams InBlendParams);// 0x26645f0
	void ServerSwapToNextGrenade(bool bForce);// 0x2664530
	void ServerStopGiveUpTimer();// 0x26644e0
	void ServerStartGiveUpTimer();// 0x2664490
	void ServerSetActiveWeaponToNone(int InIndex);// 0x26643d0
	void ServerRequestActivateAbilityRelease(int Ability, bool bIsGameModeAbility);// 0x26642d0
	void ServerRequestActivateAbility(int Ability, bool bIsGameModeAbility);// 0x26641d0
	void ServerGetInNextEmptySeat();// 0x2664180
	void ServerGetInDriverSeat();// 0x2664130
	void ServerForceActiveGadget(KSWeapon* Weapon);// 0x2664070
	void ServerExitVehicle();// 0x2664020
	void ServerDropWeapon(KSWeapon* InWeapon);// 0x2663f60
	void ServerChangeShoulderCamera(enum InShoulder, bool bAuto, bool bUseAutoTiming);// 0x2663e20
	void ServerAbilityWeaponPrepareSwapTo(KSWeapon* Weapon, bool bIsGameModeAbility);// 0x2663d20
	void SelectToRevive(Actor* Reviver);// 0x2663ca0
	void RotateToFace(Vector Location);// 0x2663c10
	void ReportFootstepNoise(float Speed);// 0x2663b90
	void ReportFireNoise(float Range);// 0x2663b10
	void ReportDamageEvent(Actor* Damager, float Damage, out const Vector OriginLocation, out const Vector HitLocation);// 0x2663930
	void ReportDamagedNoise(float Damage);// 0x2663a90
	void ReplicateSpecialAmmoEvent(enum AmmoType, int AmmoDelta, FName EventName);// 0x2663830
	bool RemoveWeaponFromInventory(KSWeapon* InWeapon);// 0x26637a0
	void RemoveTranslucencyModifier(out const FName InKeyObjectName);// 0x2663710
	bool RemoveTranslucencyMaterialInfo(out const KSTranslucencyMaterialInfo InTranslucencyMaterialInfo);// 0x2663640
	void RemoveSkinTag(out const GameplayTag InSkinTag);// 0x26635b0
	void RemovePhysicalEmoteProp(KSProp_Physical* InProp);// 0x2663530
	void RemoveFootprintInfo(int InFootprintId);// 0x26634b0
	void RemoveEmoteActionRestrictor();// 0x2663490
	void RemoveBackpack();// 0x2663470
	void RemoveActionRestriction(int ID);// 0x26633f0
	void RemotePlayerPickupItem(class KSItemDrop ItemDropClass, KSItem* Item);// 0x2663320
	void RemotePlayerInteractStart(float InteractDuration, Actor* InteractTarget);// 0x2663250
	void RemotePlayerInteractEnd(enum Result, Vector InteractionLocation, Actor* OldInteractTarget);// 0x2663130
	void RemoteClientNotifyLand(const HitResult LandingHit);// 0x2663090
	void Reload();// 0x2663070
	void ReleaseSprint();// 0x2663050
	void ReleaseGiveUp();// 0x2663030
	void ReleaseCrouch();// 0x2663010
	void ReleaseAllActiveInputs();// 0x2662ff0
	void ReleaseActiveInputsOfType(enum InputReleaseType);// 0x2662f70
	void ReleaseActiveInputs(FName[] InputsToRelease);// 0x2662e90
	void RegisterFootstepOverride(interface classNone ToAdd);// 0x2662df0
	void Reequip(out const GameplayTagQuery ReequipWeaponTypesQuery, bool bDropLeftovers, int ReequipAmmo);// 0x2662c70
	void QuickMeleeHoldTimerComplete();// 0x2662c50
	bool QueryModsForAnimEvent(FName AnimEventName, KSCharacterAnimInst* CharAnimInst);// 0x2662b90
	void PrimaryWeaponFOVChanged(float NewFOV);// 0x2662b10
	void PrimarySprayDecalExpired(PoolableDecalComponent* InDecalComponent);// 0x2662a90
	void PressSprint();// 0x2662a70
	void PressGiveUp();// 0x2662a50
	void PlayVO(const KSVoicelineEvent VoicelineEvent);// 0x2662990
	void PlayActionCameraSequence(FName SequenceName);// 0x2cbecb0
	void PersistentPlayerDataChanged();// 0x2662970
	void OnWeaponSwapSuccessful(KSWeapon* FromWeapon, KSWeapon* ToWeapon);// 0x26628a0
	void OnWeaponSwapFailed(KSWeapon* FromWeapon, KSWeapon* ToWeapon);// 0x26627d0
	void OnStopAimDownSightsCheckpoint();// 0x26627b0
	void OnStartAimDownSightsCheckpoint();// 0x2662790
	void OnSkinnedPropEnabled(MeshComponent* EnabledMeshComponent);// 0x2662710
	void OnSkinnedPropDisabled(MeshComponent* DisabledMeshComponent);// 0x2662710
	void OnReviveStart(KSCharacter* Reviver, float ReviveTime, bool Remote);// 0x2cbecb0
	void OnReviveInterrupt(KSCharacter* Reviver);// 0x2cbecb0
	void OnReviveComplete(KSCharacter* Reviver);// 0x2cbecb0
	void OnRep_VehicleState();// 0x26626b0
	void OnRep_StartingActiveWeaponEquipPoint();// 0x2662690
	void OnRep_SelfDestruct();// 0x2662670
	void OnRep_Scrambled();// 0x2662650
	void OnRep_ReviveInfo();// 0x2662630
	void OnRep_OnFire();// 0x2662610
	void OnRep_ObjectiveTimer();// 0x26625f0
	void OnRep_IsInInteraction();// 0x26625d0
	void OnRep_GiveUpTimer();// 0x26625b0
	void OnRep_Gender();// 0x2662590
	void OnRep_EMPLockout();// 0x2662550
	void OnRep_Emotion();// 0x2662570
	void OnRep_Downed();// 0x2662530
	void OnRep_CurrentBehaviorState();// 0x2662510
	void OnRep_bRepairableArmorEquipped();// 0x26626f0
	void OnRep_Bot();// 0x26624f0
	void OnRep_bCanRepairArmor();// 0x26626d0
	void OnRep_ApparelAssets();// 0x26624d0
	void OnRep_AllowGiveUp();// 0x26624b0
	void OnRep_ActiveEquipmentId();// 0x2662490
	void OnReasonerTriggeredEventTick(FString ActionName, Actor* TargetActor, FString TextData, float ValueData);// 0x2cbecb0
	void OnReasonerTriggeredEventStart(FString ActionName, Actor* TargetActor, FString TextData, float ValueData);// 0x2cbecb0
	void OnReasonerTriggeredEventEnd(FString ActionName, Actor* TargetActor, FString TextData, float ValueData);// 0x2cbecb0
	void OnPhysicalEmotePropEndPlay(Actor* InActor, byte Reason);// 0x26623d0
	void OnObjectiveTimerTickEvent(float Time);// 0x2cbecb0
	void OnObjectiveTimerCompleteEvent();// 0x2cbecb0
	void OnObjectiveTimerActiveEvent(bool Active);// 0x2cbecb0
	void OnObjectiveStateChangedEvent();// 0x2cbecb0
	void OnObjectiveInactiveEvent();// 0x2cbecb0
	void OnObjectiveActiveEvent();// 0x2cbecb0
	void OnImmuneStart();// 0x2cbecb0
	void OnImmuneEnd();// 0x2cbecb0
	void OnGrenadeClassLoaded(KSWeaponAsset_Grenade* pGrenadeWeaponAsset);// 0x2662350
	void OnGlobalActionRestrictorUpdated(out const KSActionRestrictor NewGlobalActionRestrictor);// 0x26622b0
	void OnGenderChanged();// 0x2cbecb0
	void OnGadgetSwapped();// 0x2cbecb0
	void OnFlashEffectStarted();// 0x2cbecb0
	void OnFlashEffectEnded();// 0x2cbecb0
	void OnFlashBangHit(enum Intensity);// 0x2cbecb0
	void OnFieldOfViewModChange();// 0x2cbecb0
	void OnDeathDestroy();// 0x2662290
	void OnDeathCleanup();// 0x2662270
	void OnBoundCharacterInputAction(delegate Callback);// 0x26621d0
	void OnArmorInteractStart(float InteractTime);// 0x2cbecb0
	void OnArmorInteractInterrupt();// 0x2cbecb0
	void OnArmorInteractComplete();// 0x2cbecb0
	void OnApparelTimeoutExpire();// 0x26621b0
	void NotifyRemoveEmotePropMeshComponent(out const Guid InEmotePropGuid);// 0x2662110
	void NotifyAddEmotePropMeshComponent(out const Guid InEmotePropGuid, MeshComponent* InEmoteMeshComponent);// 0x2662030
	void NoseDiveCameraTransition(bool bEnterNoseDive, float AnimLength);// 0x2cbecb0
	void NetMulticast_ReleaseAllActiveInputs();// 0x2662010
	void NativeJumpToSwingMontage(FString SwingMontageSectionName);// 0x2661f70
	void MoveRight(float Value);// 0x2661ef0
	void MoveForward(float Value);// 0x2661e70
	void MeleeReleased();// 0x2661e50
	void MeleePressed();// 0x2661e30
	void MedPackReleased();// 0x2661e10
	void MedPackPressed();// 0x2661df0
	void LogShotgunHitData(out const ShotgunHitData HitData);// 0x2661d40
	void LockToggleCrouch(bool bShouldLock, bool bShouldBeCrouched);// 0x2661c70
	void LockShoulderSwap();// 0x2661c50
	int ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x2661ad0
	void KillIfDowned();// 0x2661ab0
	void JumpToSwingMontage(FString SwingMontageSectionName);// 0x2661a10
	bool IsZipLining();// 0x26619e0
	bool IsUsingTouchControls();// 0x26619b0
	bool IsTouchModeAutoSprintActive();// 0x2661990
	bool IsShoulderSwapLocked();// 0x2661960
	bool IsRevivingAnotherPlayer(out KSCharacter* OutReviveTarget, bool bCountRemoteRevives);// 0x2661880
	bool IsRepairableArmorEquipped();// 0x2661860
	bool IsPerformingAnInteraction();// 0x2661830
	bool IsOutOfBoundsRoyale();// 0x2cbecb0
	bool IsOnFire();// 0x2661800
	bool IsLobby();// 0x26617d0
	bool IsInVehicle();// 0x26617a0
	bool IsInLockoutCameraCooldown();// 0x2661780
	bool IsInLockoutCamera();// 0x2661760
	bool IsFreeFalling();// 0x2661730
	bool IsFiring();// 0x2661700
	bool IsDowned();// 0x26616e0
	bool IsCrosshairHidden();// 0x26616c0
	bool IsCamouflaged();// 0x2661690
	bool IsBlinded();// 0x2661660
	bool IsBeingRevived(out KSCharacter* Reviver, out float Progress);// 0x2661570
	bool IsAtMaxHealth();// 0x2661540
	bool IsAnyEquippedWeaponTakingAction(const KSWeapon* IgnoredWeapon);// 0x26614b0
	bool IsAimLocked();// 0x2661490
	bool IsActiveWeapon(const KSWeapon* InWeapon);// 0x2661400
	bool IsAbilityInSetup();// 0x26613d0
	void InterruptNonCharacterRevive();// 0x26613b0
	void InterruptInteraction();// 0x2661390
	void InterruptAimDownSightsToggle(bool bReturnWhenComplete);// 0x2661300
	void InterruptAimAlternateToggle(bool bReturnWhenComplete);// 0x2661270
	void InstantRevive(KSCharacter* Reviver);// 0x26611f0
	void InputStopFire();// 0x26611d0
	void InputStartFire();// 0x26611b0
	bool InitRagdoll();// 0x2661180
	void HideZiplinePulley();// 0x2cbecb0
	void HideUplineDevice();// 0x2cbecb0
	bool HidesFootprints();// 0x2661150
	void HideAllFootprints();// 0x2661130
	void HideADSMaterials();// 0x2661110
	bool HasTranslucencyModifier();// 0x26610e0
	bool HasTranslucencyMaterialInfo();// 0x26610b0
	bool HasInfiniteAmmo(enum AmmoType);// 0x2661020
	bool HasEquipPoint(out const GameplayTag EquipPoint);// 0x2660f80
	void HandleDownEvent(CombatEventInfo EventInfo, int ExpBonus);// 0x2660ce0
	void GiveUpTimerTick(float Seconds);// 0x2660c60
	void GiveUpTimerComplete();// 0x2660c40
	void GiveUpTimerActive(bool bActive);// 0x2660bb0
	KSWeaponComponent* GetWeaponComponentForEquipPoint(GameplayTag EquipPoint);// 0x2660b20
	KSWeapon* GetWeaponByAsset(const KSWeaponAsset* InAsset);// 0x2660a90
	KSWeapon* GetWeaponAtEquipPoint(out const GameplayTag EquipPoint);// 0x26609f0
	KSVOComponent* GetVOComponent();// 0x2660970
	GameplayTagContainer GetValidWeaponPoints();// 0x2660990
	GameplayTagContainer GetUsedEquipPoints();// 0x2660910
	enum GetTouchFireMode();// 0x26608e0
	bool GetSpecialties(out KSSpecialty*[] OutSpecialties);// 0x2660820
	FName GetSeatAimCameraTag();// 0x26607e0
	enum GetRightArmVisibility();// 0x26607c0
	KSCharacter* GetReviver();// 0x2660780
	FName GetReviveeOverrideMontage();// 0x2660760
	KSHeatSourceComponent* GetPrimaryHeatSource();// 0x2660730
	KSWeapon* GetPendingMainWeapon();// 0x2660700
	void GetOverrideByLocation(out const Vector WorldLocation, out bool outShouldOverride, out FName outOverrideName);// 0x26605c0
	ReturnValue(MulticastInlineDelegateProperty) GetOnEMPLockoutTick();// 0x2660590
	ReturnValue(MulticastInlineDelegateProperty) GetOnEMPLocked();// 0x2660560
	KSWeapon* GetNextGadget();// 0x2660530
	KSInteractionType* GetMostRecentInteractionType();// 0x2660500
	float GetMinimapZoomScale();// 0x26604d0
	float GetMaxHealthBonus();// 0x26604a0
	float GetMaxFlashBangIntensity();// 0x2660470
	enum GetLeftArmVisibility();// 0x2660450
	float GetLastActiveWeaponFireTimestamp();// 0x2660430
	bool GetIsInInteraction();// 0x26603e0
	Actor* GetInteractionTarget();// 0x26603c0
	KSWeapon* GetHolsteredGadget();// 0x2660390
	float GetGiveUpTime();// 0x2660340
	KSCharacterGender GetGender();// 0x2660310
	float GetFlashBangIntensity();// 0x26602e0
	bool GetFieldOfViewFromMods(out float OutFov);// 0x2660230
	KSEquipmentManagerComponent* GetEquipmentManagerComponent();// 0x2660210
	KSEquipment* GetEquipmentAtEquipPoint(out const GameplayTag EquipPoint);// 0x2660170
	void GetDownedTransitionMontage(out AnimMontage* OutAnimMontage);// 0x2cbecb0
	float GetDownedImmuneTime();// 0x2660150
	enum GetDesiredCameraShoulder();// 0x2660120
	KSDamageHistory[] GetDamageHistoryForController(Controller* DamageInstigator);// 0x2660040
	KSVehicleSeatComponent* GetCurrentVehicleSeat();// 0x2660010
	KSVehicle* GetCurrentVehicle();// 0x265ffe0
	void GetCurrentReviveDuration(out float Duration, out float RemainingTime);// 0x265ff00
	FName GetCurrentCharacterEmotionAsName();// 0x265fec0
	enum GetCurrentCamouflageLevel();// 0x265fea0
	enum GetCurrentCameraShoulder();// 0x265fe70
	int GetCurrentAbilityIndex();// 0x265fe50
	GameplayTagContainer GetCompatibleEquipPoints(const KSWeaponAsset* InWeaponAsset);// 0x265fd90
	float GetCameraShoulderSwapProgress();// 0x265fd60
	MultiSkinObject* GetBodyApparelSkinObject();// 0x265fd20
	enum GetBehaviorState();// 0x265fd00
	float GetBaseInteractionDistance();// 0x265fce0
	void GetAvailableEquipPoints(out GameplayTagContainer OutEquipPoints);// 0x265fc20
	float GetArmorMaxDurability();// 0x265fbf0
	float GetArmorDurability();// 0x265fbc0
	KSArmorComponent* GetArmorComponent();// 0x265fba0
	MultiSkinObject* GetApparelSkinObjectByName(out const FName InSkinObjectName);// 0x265fb00
	int GetAmmoCount(enum AmmoType);// 0x265fa70
	void GetAllEquippedWeapons(out KSWeapon*[] OutWeapons);// 0x265f9c0
	float GetAlertIconRange();// 0x265f990
	float GetAimTransitionTime();// 0x265f960
	KSWeaponComponent* GetActiveWeaponComponentForSubType(FName SubType);// 0x265f8d0
	KSWeaponComponent* GetActiveWeaponComponentAtIndex(int Index);// 0x265f840
	KSWeaponComponent* GetActiveWeaponComponent();// 0x265f820
	KSWeapon* GetActiveWeapon();// 0x265f760
	KSWeapon* GetActiveTemporary();// 0x265f7f0
	KSWeapon* GetActiveMelee();// 0x265f7c0
	KSWeapon* GetActiveMedPack();// 0x265f790
	KSWeapon* GetActiveMainWeapon();// 0x265f760
	KSWeaponAnimInstance* GetActiveKSWeaponAnimInst(int Index);// 0x265f6d0
	KSWeapon* GetActiveGrenade();// 0x265f6a0
	GameplayTagContainer GetActiveGadgetPoints();// 0x265f640
	KSWeaponComponent* GetActiveGadgetComponent();// 0x265f610
	GameplayTagContainer GetActiveEquipPoints();// 0x265f5b0
	FName GetActiveCameraTag();// 0x265f570
	CameraComponent* GetActiveCamera();// 0x265f540
	KSWeapon_Aimed* GetActiveAimedWeapon();// 0x265f510
	bool GetActivatableMods(out KSModInst_Activated*[] OutMods);// 0x265f450
	KSModInst_Activated* GetAbilityMovementMod();// 0x265f430
	void GamepadSwapPressed();// 0x265f410
	void GamepadSwapMeleePressed();// 0x265f3f0
	void GamepadSwapMacGuffinPressed();// 0x265f3d0
	void GamepadLookUp(float Value);// 0x265f350
	void GamepadLookRight(float Value);// 0x265f2d0
	void ForceToShoulder(enum ForcedShoulder);// 0x265f250
	void ForceMainCameraBoomUpdate();// 0x265f230
	void ForceActiveGadget(KSWeapon* Weapon);// 0x265f1b0
	void ForceActivateAbility();// 0x265f190
	void FinishHacking();// 0x2cbecb0
	int FindTierOfEquipPoint(const GameplayTag EquipPoint);// 0x265f100
	int[] FindAllTiersOfEquipPoint(const GameplayTag EquipPoint);// 0x265f020
	void ExtinguishFire();// 0x265f000
	void ExitVehiclePressed();// 0x265efe0
	void EventSetupCamerasForSpectator(bool Enabled);// 0x2cbecb0
	void EvaluateCameraProximityFade();// 0x265efc0
	void EndLockoutCamera();// 0x265efa0
	void EndInteractionWithShield(KSWeaponComponent* ShieldWeaponComponent);// 0x2cbecb0
	void DrownDamageTick();// 0x265ef80
	void DropButtonPressed();// 0x265ed30
	void DropActiveWeapon();// 0x265ed30
	void DropActiveGrenade();// 0x265ed10
	void DownPlayer(Controller* EventInstigator, class DamageType DamageType, enum HitLocationType, Actor* DamageCauser, float DamageDealt);// 0x265eb80
	void DoSetOnFire();// 0x2cbecb0
	void DoExtinguishFire();// 0x2cbecb0
	bool DoesTransitionSupportFocalPoint(FName ActiveCamera, FName PendingCamera);// 0x265eab0
	bool DoesShowAlertIconToEnemies();// 0x265ea80
	void DetachViewTargetOnlyBPComponents();// 0x2cbecb0
	void DestructibleSpeedGateOverlappedEvent(Vector BreakingLocation, Vector BreakingDirection, Vector BreakingNormal);// 0x2cbecb0
	void DamageRecordReset();// 0x265ea60
	void CreditEliminationAssist(PlayerState* Assistant);// 0x265e9e0
	void CreditDownAssist(PlayerState* Assistant);// 0x265e960
	void ContextualPingRepeat();// 0x265e940
	void ContextualPingPressed();// 0x265e920
	void ContextualPingHoldRelease();// 0x265e900
	void ContextualPingHold();// 0x265e8e0
	void ContextualButtonReleased();// 0x265e8c0
	void ContextualButtonPressed();// 0x265e8a0
	void ContextualButtonHeldReleased();// 0x265e880
	void ContextualButtonHeld();// 0x265e860
	void CompleteNonCharacterRevive();// 0x265e840
	void CloneCharacterMesh(SkeletalMeshComponent* ClonedMesh);// 0x265e7b0
	void ClientSwapTo(KSWeapon* InWeapon, bool bForce);// 0x265e6e0
	void ClientSwapFrom(KSWeapon* InWeapon, bool bForce);// 0x265e610
	void ClientStopInteractAcknowledge(byte InInteractRequestId, enum Result);// 0x265e550
	void ClientNotifyStuck();// 0x265e530
	void ClientInteractAcknowledge(byte InInteractRequestId, bool bFailed, float InteractDuration, bool bRequiresManualInterrupt);// 0x265e3e0
	void ClientBroadcastModEvent(FName ModEvent);// 0x265e350
	void ClientAbilityActivated(int AbilityIndex, bool bIsGameModeAbility);// 0x265e280
	void ClearMaxHealthBonus();// 0x265e260
	void ClearAllApparel();// 0x265e240
	void ClearActorTargetingMeForRevive();// 0x265e220
	void ChangeShoulderCamera(enum InShoulder, bool bAuto);// 0x265e150
	bool CanUseCombatState(enum TestState);// 0x265e080
	bool CanShowGrenadeFailurePrompt();// 0x265e050
	bool CanRepairArmor();// 0x265e030
	bool CanReloadRightNow();// 0x265e000
	bool CanInteractWith(const Actor* InInteractionTarget);// 0x265df70
	bool CanGiveUp();// 0x265df00
	bool CanFireRightNow(out enum OutAbilityFailureType, bool bAltFire, bool bIgnoreNoFire, bool bIgnoreWeaponFireCheck);// 0x265dd70
	bool CanFireGrenadeNow(bool bBroadcastFeedback);// 0x265dce0
	void CancelTouchModeAutoSprint();// 0x265e130
	void CancelBleed();// 0x265e110
	bool CanBeRevivedBy(const KSCharacter* Other, KSWeapon* IgnoredWeapon);// 0x265dc10
	bool CanAimOverShoulderNow();// 0x265dbe0
	bool CanAimDownSightsNow();// 0x265dbb0
	bool CanAimAlternateNow();// 0x265db80
	bool CanActiveWeaponCanToggleOutOfAimDownSightsNow();// 0x265db50
	bool CanActiveWeaponCanToggleIntoAimDownSightsNow();// 0x265db20
	bool CanActivateAbilityNow(KSModInst_Activated* Mod, bool bBroadcastFeedback);// 0x265da60
	void CacheLatestHit(float Damage, class DamageType DamageTypeClass, float DamageImpulse, Vector RelativeImpactLocation, FName BoneName, Actor* DamageCauser);// 0x265d890
	void BroadcastWeaponComponentStateChange(uint32 BroadcastId, uint16 nEquipmentId, KSWeaponDataUpdateContainer NewState);// 0x265d790
	void BroadcastWeaponComponentPostReload(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip);// 0x265d690
	void BroadcastWeaponComponentFullyCharged(uint16 nEquipmentId, float Timestamp, float CurrentCharge);// 0x265d590
	void BroadcastWeaponComponentFiredFull(uint32 BroadcastId, uint16 nEquipmentId, const FullFireRepData Data);// 0x265d460
	void BroadcastWeaponComponentFiredAmmo(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip);// 0x265d360
	void BroadcastWeaponComponentFiredAimAndAmmo(uint32 BroadcastId, uint16 nEquipmentId, const AimData Aim, byte AmmoInClip);// 0x265d1f0
	void BroadcastWeaponComponentFired(uint32 BroadcastId, uint16 nEquipmentId, const AimData Aim);// 0x265d0c0
	void BroadcastWeaponComponentEmptyFire(uint32 BroadcastId, uint16 nEquipmentId);// 0x265cff0
	void BroadcastWeaponComponentCurrentFireRateStateHasChanged(uint16 nEquipmentId, enum State, float Timestamp, float PostFireTime);// 0x265ceb0
	void BroadcastWeaponComponentChargeMethodValuesUpdated(uint16 nEquipmentId, float NewMaxCharge, float CurrentCharge, float Timestamp);// 0x265cd70
	void BroadcastWeaponComponentChargeConsumed(uint16 nEquipmentId, float Timestamp, float CurrentCharge);// 0x265cc70
	void BroadcastWeaponComponentAmmoChange(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip, bool bBonusAmmo);// 0x265cb30
	void BroadcastSpecialAmmoEvent(enum AmmoType, int AmmoDelta, FName EventName);// 0x265ca30
	void BroadcastSkydiveSkipped();// 0x265ca10
	void BroadcastReviveStart(KSCharacter* Reviver, float ReviveTime, bool Remote);// 0x265c910
	void BroadcastReviveInterrupt(KSCharacter* Reviver);// 0x265c880
	void BroadcastReviveComplete(KSCharacter* Reviver);// 0x265c7f0
	void BroadcastReliableWeaponComponentStateChange(uint32 BroadcastId, uint16 nEquipmentId, KSWeaponDataUpdateContainer NewState);// 0x265c6f0
	void BroadcastReliableWeaponComponentPostReload(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip);// 0x265c5f0
	void BroadcastReliableWeaponComponentFiredFull(uint32 BroadcastId, uint16 nEquipmentId, const FullFireRepData Data);// 0x265c4c0
	void BroadcastReliableWeaponComponentFiredAmmo(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip);// 0x265c3c0
	void BroadcastReliableWeaponComponentFiredAimAndAmmo(uint32 BroadcastId, uint16 nEquipmentId, const AimData Aim, byte AmmoInClip);// 0x265c250
	void BroadcastReliableWeaponComponentFired(uint32 BroadcastId, uint16 nEquipmentId, const AimData Aim);// 0x265c120
	void BroadcastReliableWeaponComponentEmptyFire(uint32 BroadcastId, uint16 nEquipmentId);// 0x265c050
	void BroadcastReliableWeaponComponentAmmoChange(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip, bool bBonusAmmo);// 0x265bf10
	void BroadcastModEvent(FName ModEvent);// 0x265be90
	void BroadcastGrenadeExplodeInHand(KSWeaponAsset_Grenade* pGrenadeWeaponAsset);// 0x265be00
	void BroadcastGadgetResupplied();// 0x265bde0
	void BroadcastFlashBangHit(const KSFlashBangRecord Record);// 0x265bd40
	void BroadcastArmorInteractStart(float InteractTime);// 0x265bcc0
	void BroadcastArmorInteractInterrupt();// 0x265bca0
	void BroadcastArmorInteractComplete();// 0x265bc80
	void BroadcastAmmoChanged(enum AmmoType);// 0x265bc00
	bool BlueprintHandleDeath();// 0x2cbecb0
	void Bleed();// 0x265bbe0
	void BeginNonCharacterRevive(KSPlayerState* ReviveInstigator, float Duration, FName OverrideReviveeMontage);// 0x265bad0
	void BeginInstantRevive(KSCharacter* Reviver, float Duration, bool Guaranteed);// 0x265b9c0
	void AutoSprintTimerComplete();// 0x265b9a0
	void AttachViewTargetOnlyBPComponents();// 0x2cbecb0
	void ApplyMaxHealthBonus(float Bonus, Controller* EventInstigator, Actor* EventCauser, bool bAllowWhileDowned);// 0x265b850
	void ApplyLastHitImpulse(bool UpdateTargetRotation, bool AffectCapsule);// 0x2cbecb0
	void ApplyFlinchFromPointDamage(float Damage, class DamageType DamageTypeClass, Vector RelativeImpactLocation, Vector RelativeImpactNormal, FName BoneName, Actor* DamageCauser);// 0x265b670
	void ApplyCameraProximityFade(float Alpha);// 0x265b5f0
	bool ApplyApparelAsset(KSApparelAsset* ApparelAsset);// 0x265b560
	bool AnyActivatableModsActive();// 0x265b530
	void AnnounceCharacterSelected(KSJobItem* pJobSelected);// 0x2cbecb0
	void AnimAuditStop();// 0x265b510
	void AnimAuditStart();// 0x265b4f0
	void AnimAuditResume();// 0x265b4d0
	void AnimAuditClear();// 0x265b4b0
	void AimDownSightsToggle();// 0x265b490
	void AimDownSightsReleased();// 0x265b470
	void AimDownSightsPressed();// 0x265b450
	void AddTranslucencyModifier(out const FName InKeyObjectName, KSTranslucencyModifier InTranslucencyModifier);// 0x265b360
	int AddTranslucencyMaterialInfo(out const KSTranslucencyMaterialInfo InTranslucencyMaterialInfo);// 0x265b290
	void AddSkinTag(out const GameplayTag InSkinTag);// 0x265b200
	void AddPhysicalEmoteProp(KSProp_Physical* InProp);// 0x265b180
	void AddFootprintInfo(out KSFootprintInfo InFootprintInfo);// 0x265b0e0
	void AddEmoteActionRestrictor();// 0x265b0c0
	int AddActionRestrictionForDuration(out const KSActionRestrictor ActionRestrictor, float Duration);// 0x265afd0
	int AddActionRestriction(out const KSActionRestrictor ActionRestrictor);// 0x265af20
	bool ActivatableModAtIndexActive(int AbilityIndex, bool bIsGameModeAbility);// 0x265ae60
	void AbortFireAllWeapons();// 0x265ae40
	void AbilityChargeUpdated(KSPlayerMod_Activated* ChargingMod);// 0x265adc0

--------------------------------
Class: KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	byte PawnId;//[Offset: 0xcf8, Size: 1]
	MulticastInlineDelegateProperty OnTakeArmorDamage;//[Size: 1]
	float HealthRegenerationPerSecond;//[Offset: 0xd40, Size: 1]
	float HealthRegenerationPeriod;//[Offset: 0xd44, Size: 1]
	float HealthRegenerationDelay;//[Offset: 0xd48, Size: 1]
	MulticastInlineDelegateProperty OnHealthRegenDelayTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnHealthRegenDelayTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnHealthRegenDelayTimerComplete;//[Size: 1]
	KSTimerComponent* HealthRegenDelayTimer;//[Offset: 0xd80, Size: 1]
	float CurrentOverheal;//[Offset: 0xd90, Size: 1]
	float OverhealDecayPerSecond;//[Offset: 0xd94, Size: 1]
	float OverhealDecayPeriod;//[Offset: 0xd98, Size: 1]
	MulticastInlineDelegateProperty OnOverhealChanged;//[Size: 1]
	float QueuedMovementForgivenessPeriod;//[Offset: 0xdd0, Size: 1]
	float QueuedMovementForgivenessEndTime;//[Offset: 0xdd4, Size: 1]
	enum CurrentQueuedMovement;//[Offset: 0xdd8, Size: 1]
	FName FreeFallCollisionProfileName;//[Offset: 0xddc, Size: 1]
	CameraShake* CurrentFreeFallCameraShake;//[Offset: 0xdf4, Size: 1]
	class KSVelocityCameraShake* FreeFallCameraShake;//[Offset: 0xe08, Size: 1]
	MulticastInlineDelegateProperty OnEndFreeFallDel;//[Size: 1]
	bool bRealWantsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 1]
	float AimedCrouchCapsuleHalfHeight;//[Offset: 0xe24, Size: 1]
	MulticastInlineDelegateProperty OnSprintChanged;//[Size: 1]
	bool bReplicatedSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe38, Size: 1]
	Vector_NetQuantizeNormal ReplicatedAccelDirection;//[Offset: 0xe3c, Size: 1]
	MulticastInlineDelegateProperty OnPowerSlideChanged;//[Size: 1]
	KSPowerSlideInfo bReplicatedPowerSlide;//[Offset: 0xe58, Size: 1]
	float DodgeRollDuration;//[Offset: 0xe5c, Size: 1]
	bool bReplicatedDodgeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 1]
	MulticastInlineDelegateProperty OnDOdgeRollChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnNearMiss;//[Size: 1]
	float NearMissRange;//[Offset: 0xec0, Size: 1]
	float NearMissCooldownTime;//[Offset: 0xec4, Size: 1]
	float NearMissADSCameraShakeScaleOverride;//[Offset: 0xec8, Size: 1]
	KSSpecialEffect NearMissSpecialEffect;//[Offset: 0xed0, Size: 1]
	class CameraShake* NearMissFrontCameraShake;//[Offset: 0xf28, Size: 1]
	class CameraShake* NearMissBackCameraShake;//[Offset: 0xf30, Size: 1]
	class CameraShake* NearMissRightCameraShake;//[Offset: 0xf38, Size: 1]
	class CameraShake* NearMissLeftCameraShake;//[Offset: 0xf40, Size: 1]
	KSLungeInfo LungeInfo;//[Offset: 0xf48, Size: 1]
	MulticastInlineDelegateProperty OnLungeChanged;//[Size: 1]
	bool bReplicatedAbilityMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 1]
	bool bReplicatedZipLineBracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf69, Size: 1]
	bool bReplicatedZipLineEnding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6a, Size: 1]
	bool bReplicatedUpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6b, Size: 1]
	float SecondsAwayToBraceOnZipLine;//[Offset: 0xf6c, Size: 1]
	float SecondsAwayToEndOnZipLine;//[Offset: 0xf70, Size: 1]
	KSZipLineInfo ReplicatedZipLineInfo;//[Offset: 0xf78, Size: 1]
	bool bPrevPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 1]
	MulticastInlineDelegateProperty OnJumpedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnLandedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnStartFallingDel;//[Size: 1]
	bool bReplicatedStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd6, Size: 1]
	bool bReplicatedHardLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff8, Size: 1]
	CameraShake* CurrentSprintCameraShake;//[Offset: 0x1030, Size: 1]
	class KSSprintCameraShake* SprintCameraShake;//[Offset: 0x1040, Size: 1]
	CameraShake* CurrentLandedCameraShake;//[Offset: 0x1048, Size: 1]
	class KSCharacterCameraShake* LandedCameraShake;//[Offset: 0x1058, Size: 1]
	MulticastInlineDelegateProperty OnAimStateChanged;//[Size: 1]
	SceneComponent* ProjectileThrowComponent;//[Offset: 0x1070, Size: 1]
	SceneComponent* GrenadeThrowComponent;//[Offset: 0x1078, Size: 1]
	SceneComponent* MeleeThrowComponent;//[Offset: 0x1080, Size: 1]
	enum ReplicatedAimState;//[Offset: 0x1088, Size: 1]
	enum LastReplicatedAimState;//[Offset: 0x1089, Size: 1]
	bool bEnableSmoothedAimRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108a, Size: 1]
	ReplicatedViewInfo ViewInfo;//[Offset: 0x108c, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a4, Size: 1]
	float CameraLagMaxTimeStep;//[Offset: 0x10a8, Size: 1]
	float CameraRotationLagSpeed;//[Offset: 0x10ac, Size: 1]
	Rotator PreviousDesiredRot;//[Offset: 0x10b0, Size: 1]
	Rotator SmoothedViewRotation;//[Offset: 0x10bc, Size: 1]
	bool bIsSmoothingAimRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c8, Size: 1]
	bool bInRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c9, Size: 1]
	bool bInPreRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ca, Size: 1]
	KSDeathInfo DeathInfo;//[Offset: 0x10d0, Size: 1]
	class KSDamageTypeBase* InstantDeathDamageType;//[Offset: 0x10f8, Size: 1]
	bool bRadialMiss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1100, Size: 1]
	KSCharacterBase* LastCharacterToDamageMe;//[Offset: 0x1108, Size: 1]
	MulticastInlineDelegateProperty OnDeathStateChangedDel;//[Size: 1]
	SphereComponent* HeadCollisionComponent;//[Offset: 0x1188, Size: 1]
	SkeletalMeshComponent* ZiplineMeshComponent;//[Offset: 0x1190, Size: 1]
	SkeletalMeshComponent* UplineMeshComponent;//[Offset: 0x1198, Size: 1]
	PlayerState* BackupPlayerState;//[Offset: 0x11a0, Size: 1]
	FName[] HeadBones;//[Offset: 0x11b0, Size: 1]
	FName[] LimbBones;//[Offset: 0x11c0, Size: 1]
	FName[] ChestBones;//[Offset: 0x11d0, Size: 1]
	<FName,enum> CachedBoneToHitLocationType;//[Offset: 0x11e0, Size: 1]
	FName[] HeadshotPassthroughBones;//[Offset: 0x1230, Size: 1]
	FName[] ChestshotPassthroughBones;//[Offset: 0x1240, Size: 1]
	KSRevealInfo FriendlyVisibilityRevealParameters;//[Offset: 0x1258, Size: 1]
	KSRevealInfo AimedAtRevealParameters;//[Offset: 0x12a0, Size: 1]
	KSRevealInfo KilledByRevealParameters;//[Offset: 0x12e8, Size: 1]
	float KilledByRevealTimeSeconds;//[Offset: 0x1330, Size: 1]
	bool bRevealed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1334, Size: 1]
	LinearColor CurrentRevealColor;//[Offset: 0x1338, Size: 1]
	float OutlineZFadeMin;//[Offset: 0x1348, Size: 1]
	float OutlineZFadeMax;//[Offset: 0x134c, Size: 1]
	LinearColor SpawnImmuneOutlineColorEnemy;//[Offset: 0x1350, Size: 1]
	float FriendlyOutlineFadeDistanceMin;//[Offset: 0x1360, Size: 1]
	float FriendlyOutlineFadeDistanceMax;//[Offset: 0x1364, Size: 1]
	bool bReevaluateSilhouetteNextTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1368, Size: 1]
	bool bForceSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1369, Size: 1]
	enum ForcedSilhouetteType;//[Offset: 0x136a, Size: 1]
	bool bForcedFillSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136b, Size: 1]
	bool bForcedMarkSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136c, Size: 1]
	enum SilhouetteType;//[Offset: 0x136d, Size: 1]
	bool bFillSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136e, Size: 1]
	bool bMarkSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136f, Size: 1]
	enum SilhouetteQualifier;//[Offset: 0x1370, Size: 1]
	bool bSilhouetteComponentsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1388, Size: 1]
	PrimitiveComponent*[] CachedSilhouetteComponents;//[Offset: 0x1390, Size: 1]
	MulticastInlineDelegateProperty OnRootChanged;//[Size: 1]
	KSMantleInfo ReplicatedMantleInfo;//[Offset: 0x13b0, Size: 1]
	MulticastInlineDelegateProperty OnMantleChanged;//[Size: 1]
	FName InteractionState;//[Offset: 0x1420, Size: 1]
	float InteractionTime;//[Offset: 0x1428, Size: 1]
	MulticastInlineDelegateProperty OnCharacterStartedMovingDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterStoppedMovingDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSwimmingChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSubmergedChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnBreathUpdate;//[Size: 1]
	bool bIsSubmerged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b0, Size: 1]
	float MaximumLungCapacity;//[Offset: 0x14b4, Size: 1]
	float CurrentLungCapacity;//[Offset: 0x14b8, Size: 1]
	float LungCapacityRecoveryTime;//[Offset: 0x14bc, Size: 1]
	bool bDestroyOnRoundSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c0, Size: 1]
	<FName,KSCharacterSocketInfo> CharacterSockets;//[Offset: 0x14e0, Size: 1]
	MulticastInlineDelegateProperty OnEmoteStartedPlaying;//[Size: 1]
	MulticastInlineDelegateProperty OnEmoteStoppedPlaying;//[Size: 1]
	bool bIsSpawnImmune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1550, Size: 1]
	void UpdateSilhouette(float DeltaSeconds);// 0x26701c0
	void UpdateDebugHealthVisibility();// 0x2cbecb0
	void UnSubmerge(bool bClientSimulation);// 0x2670020
	bool TryToInterruptEmote(enum Reason);// 0x266ff90
	void Submerge(bool bClientSimulation);// 0x266fed0
	void StopSprint(bool bInterrupted);// 0x266fe40
	void StopRegenerationTimers();// 0x266fe20
	void StartSprint();// 0x1f2b650
	void ShowDebugLocation(bool bVisible);// 0x2cbecb0
	void SetSilhouetteQualifier(enum InQualifier);// 0x266fd00
	void ResetHealthRegeneration();// 0x266fce0
	void ResetHealthRegenDelay();// 0x266fcc0
	void ResetFreeFallState();// 0x266fca0
	void OverhealDecayTick();// 0x266fc80
	float Overheal(float OverhealValue, Controller* HealInstigator, Actor* HealCauser);// 0x266fb70
	void OnStopDefaultAim();// 0x1f12a20
	void OnStopAimOverShoulder();// 0x1f12b60
	void OnStopAimDownSights();// 0x1f12b80
	void OnStopAimAlternate();// 0x1f12b00
	void OnStartDefaultAim();// 0x1f12a00
	void OnStartAimOverShoulder();// 0x1f12ae0
	void OnStartAimDownSights();// 0x1f12a40
	void OnStartAimAlternate();// 0x1f12ba0
	void OnRep_Sprint();// 0x1ec4200
	void OnRep_Silhouette();// 0x266fb50
	void OnRep_ReplicatedStun();// 0x266fb30
	void OnRep_ReplicatedAimState();// 0x1f2b8f0
	void OnRep_ReplicatedAbilityMovement();// 0x1f2ba70
	void OnRep_PowerSlide();// 0x266fb10
	void OnRep_MantleInfo();// 0x1f2b990
	void OnRep_LungeInfo();// 0x266faf0
	void OnRep_IsSubmerged();// 0x266fad0
	void OnRep_DeathState();// 0x1f16570
	void OnRep_CurrentOverheal();// 0x266fab0
	void OnRep_CurrentLungCapacity();// 0x266fa90
	void OnRep_BackupPlayerState();// 0x1f125e0
	void OnEndPowerSlide(enum EndReason);// 0x2cbecb0
	void OnBeginPowerSlide();// 0x2cbecb0
	void NetMulticast_PlayNearMissEffects(const Vector TraceStart, const Vector TraceEnd, AkAudioEvent* WhizbyAudioEvent);// 0x266f8b0
	void MarkSilhouetteComponentsDirty();// 0x266f890
	void LockoutMovement(float Time);// 0x266f810
	bool IsUnderwater();// 0x266f7e0
	bool IsThermalDetectable();// 0x266f7b0
	bool IsStunned();// 0x266f790
	bool IsSprinting();// 0x266f760
	bool IsPlayingEmote();// 0x266f730
	bool IsNearMissOnCooldown();// 0x266f700
	bool IsLunging();// 0x266f6d0
	bool IsLaunched();// 0x266f6b0
	bool IsInRagdoll();// 0x266f690
	bool IsInPowerSlide();// 0x266f660
	bool IsInHardLandLockout();// 0x266f640
	bool IsInAimTransition();// 0x266f610
	bool IsBot();// 0x266f5b0
	bool IsAimingOverShoulder();// 0x266f580
	bool IsAimingDownSights();// 0x266f550
	bool IsAimingAlternate();// 0x266f520
	bool IsAiming();// 0x266f4b0
	bool IsAbilityMoving();// 0x266f480
	void HealthRegenerationTick();// 0x266f460
	void HealthRegenerationStopped(bool bFullyHealed);// 0x2cbecb0
	void HealthRegenerationStarted();// 0x2cbecb0
	void HealthRegenDelayTimerTick(float Seconds);// 0x266f3e0
	void HealthRegenDelayTimerComplete();// 0x266f3c0
	void HealthRegenDelayTimerActive(bool bActive);// 0x266f330
	float Heal(float HealAmount, Controller* HealInstigator, Actor* HealCauser, bool bCanModHeal);// 0x266f1e0
	bool HasCharacterSocket(out const FName InSocketName);// 0x266f140
	float GetZiplineAdjustHeight();// 0x266f100
	Actor* GetStartSpot();// 0x266f0b0
	KSRevealManager* GetRevealManager();// 0x266f080
	enum GetReplicatedAimState();// 0x266f060
	Transform GetProjectileThrowTransform();// 0x266f000
	Vector GetProjectileThrowLocation();// 0x266efc0
	float GetPowerSlideProgress();// 0x266ef90
	float GetPowerSlideAngle();// 0x266ef60
	enum GetPlayerSilhouetteQualifier();// 0x266ef40
	byte GetPawnId();// 0x266ef20
	KSSpecialEffect GetNearMissSpecialEffect();// 0x266edd0
	float GetNearMissRange();// 0x266edb0
	Transform GetMeleeThrowTransform();// 0x266ec70
	Vector GetMeleeThrowLocation();// 0x266ec30
	float GetMaximumLungCapacity();// 0x266ebf0
	float GetLungRecoveryTime();// 0x266ebb0
	enum GetLastReplicatedAimState();// 0x266eb90
	KSCharacterMovementComponent* GetKSMovementComponent();// 0x266eb60
	KSCharacterAnimInst* GetKSCharacterAnimInst();// 0x266eb30
	KSCharacter* GetKSCharacter();// 0x266eb00
	KSAnimInstance* GetKSAnimInstance();// 0x266ead0
	FName GetInteractionState();// 0x266eab0
	bool GetImmediateDeathRagdoll();// 0x266ea90
	float GetHealthRegenDelayTime();// 0x266ea40
	Transform GetGrenadeThrowTransform();// 0x266e9e0
	Vector GetGrenadeThrowLocation();// 0x266e9a0
	enum GetDeathState();// 0x266e980
	float GetCurrentOverheal();// 0x266e940
	float GetCurrentLungCapacity();// 0x266e910
	Vector GetCurrentDesiredMovementDirection();// 0x266e8d0
	enum GetCurrentAimState();// 0x266e8a0
	Vector GetCurrentAccelDirection();// 0x266e860
	Transform GetCharacterSocketTransform(out const FName InSocketName);// 0x266e770
	Rotator GetCharacterSocketRotator(out const FName InSocketName);// 0x266e6c0
	Vector GetCharacterSocketLocation(out const FName InSocketName);// 0x266e610
	PlayerState* GetBestPlayerState();// 0x266e5e0
	PlayerState* GetBackupPlayerState();// 0x266e5c0
	void ForceStartHealthRegeneration();// 0x266e5a0
	void ForceSilhouette(bool bInForceSilhouette, enum InSilhouetteType, bool InFillSilhouette, bool InMarkSilhouette);// 0x266e440
	void EndAbilityMovement();// 0x1f2b2d0
	void DoStun(float StunDuration, bool FreezeInPlace);// 0x266e370
	void DoHardLandAvoid();// 0x1f2bb10
	void DoHardLand(float LockoutDuration);// 0x266e2f0
	bool CanViewDebugHealth();// 0x266e230
	void BroadcastInstantInteraction(FName InInteractionState);// 0x1eef300
	void BroadcastHealthRegenerationStopped(bool bFullyHealed);// 0x266e110
	void BroadcastHardLandAvoid();// 0x1ef4350
	void BlueprintOnStopSwimming();// 0x2cbecb0
	void BlueprintOnStopSubmerged();// 0x2cbecb0
	void BlueprintOnStartSwimming();// 0x2cbecb0
	void BlueprintOnStartSubmerged();// 0x2cbecb0
	void BlueprintEmoteStoppedPlaying();// 0x2cbecb0
	void BlueprintEmoteStartedPlaying();// 0x2cbecb0
	void BeginDodgeRoll();// 0x1f1a6e0
	void BeginAbilityMovement();// 0x1f2b2f0
	bool AllowSprintingRightNow();// 0x266e0c0
	bool AllowPowerSlideRightNow();// 0x266e090

--------------------------------
Class: KSCharacterFoundation.Character.Pawn.Actor.Object
	Guid[] InputLocks;//[Offset: 0x4d0, Size: 1]
	bool CachedAimAssistVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	float NextValidAimAssistVisibilityTime;//[Offset: 0x4e8, Size: 1]
	bool bCanEverBeConsideredForAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	bool bIgnoreCollisionWithTeammates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 1]
	KSOutOfBoundsComponent* CachedOutOfBoundsComponent;//[Offset: 0x4f0, Size: 1]
	float ReleasedCachedTimeSeconds;//[Offset: 0x4f8, Size: 1]
	MulticastInlineDelegateProperty OnPlayerStateChangedDel;//[Size: 1]
	KSPlayerModManager* PlayerModManagerOverride;//[Offset: 0x530, Size: 1]
	float Health;//[Offset: 0x538, Size: 1]
	MulticastInlineDelegateProperty OnHealthChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnKilled;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayHitFromPointDamageDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayHitFromRadialDamageDel;//[Size: 1]
	<FName,KSFXCurveComponent*> ActiveFXCurveComponents;//[Offset: 0x5f0, Size: 1]
	PostProcessSettings BlendableSettings;//[Offset: 0x640, Size: 1]
	KSAkComponent* CharacterAkComponent;//[Offset: 0xbc0, Size: 1]
	AkAudioEvent* HitByShieldedAkEvent;//[Offset: 0xbc8, Size: 1]
	AkAudioEvent* HitByArmorBreakAkEvent;//[Offset: 0xbd0, Size: 1]
	bool bIsHovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd8, Size: 1]
	bool bUseScreenSizeCutoff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd9, Size: 1]
	float PlayerHoverRange;//[Offset: 0xbdc, Size: 1]
	float HoverMinScreenHeightPct;//[Offset: 0xbe0, Size: 1]
	float HoverMinScreenHeightPctADS;//[Offset: 0xbe4, Size: 1]
	bool bUseConeHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe8, Size: 1]
	float HoverConeAngle;//[Offset: 0xbec, Size: 1]
	float ADSHoverConeScreenRadius;//[Offset: 0xbf0, Size: 1]
	float AlwaysHoverDistance;//[Offset: 0xbf4, Size: 1]
	bool bUnhoverWhenOccludedByHoveredCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 1]
	float CachedCameraFOV;//[Offset: 0xbfc, Size: 1]
	Vector2D CachedViewPortSize;//[Offset: 0xc00, Size: 1]
	float CachedHalfTanFOV;//[Offset: 0xc08, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0xc60, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0xc88, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0xcb0, Size: 1]
	byte RoundCreated;//[Offset: 0xcd8, Size: 1]
	void StopKSEffect(FName InFxID);// 0x26739f0
	KSFXCurveComponent* StartKSSpecialEffect(out const KSSpecialEffect Effect, float PlayRate, bool bRestart);// 0x2673880
	CameraShake* StartCameraShakeFull(class CameraShake ShakeClass, out PlayerCameraManager* OutShakeOwner);// 0x26737a0
	CameraShake* StartCameraShake(class CameraShake ShakeClass);// 0x2673700
	void SetHealth(float NewHealth);// 0x2673680
	void SetFootstepsVisibleOnClient(bool bInFootstepsVisibleOnClient);// 0x2673600
	void ReverseKSEffect(FName InFxID);// 0x2673440
	void ResetMeshRelativeCapsuleHeight(float HalfHeight);// 0x26733c0
	void ResetKSEffectTime(FName InFxID);// 0x2673340
	void ResetCapsuleHeight();// 0x2673320
	void RemoveParticleEffects(ParticleSystemComponent*[] ParticleSystems);// 0x2673240
	bool RemoveModInstance(KSPlayerModInstance* ModInst, bool bRemoveAll);// 0x2673170
	bool RemoveMod(KSPlayerMod* Mod, bool bRemoveAll);// 0x26730a0
	void RemoveInputLock(out const Guid ID);// 0x2673000
	void RemoveEffectCurve(FName InFxID);// 0x2672f80
	void RemoveCameraShakeFull(CameraShake* CameraShake, PlayerCameraManager* InShakeOwner);// 0x2672ec0
	void RemoveCameraShake(CameraShake* CameraShake);// 0x2672e40
	void RemoveBlendable(interface classNone InBlendableObject);// 0x2672da0
	void PlayHitFromRadialDamage(out const DamageEffect Effect);// 0x2cbecb0
	void PlayHitFromPointDamage(out const DamageEffect Effect);// 0x2cbecb0
	void PlayHitBySFX(out const DamageEffect InDamageEffect);// 0x2672cc0
	void OnUnhovered(float ExtraTime);// 0x2672c40
	void OnTeamUpdated();// 0x1f12960
	void OnRep_Health();// 0x1f121e0
	void OnLeaveTeam(KSTeamState* OldTeam);// 0x2672b70
	void OnJoinTeam(KSTeamState* NewTeam);// 0x2672ae0
	void OnHovered();// 0x1f12840
	bool IsLocallyViewed();// 0x2672a30
	bool IsLocallyHovered();// 0x2672a10
	bool IsDeadOrDestroyed();// 0x26729e0
	bool HasModAny(out const KSPlayerMod*[] TestPlayerMods);// 0x2672920
	bool HasMod(const KSPlayerMod* TestPlayerMod);// 0x2672880
	bool GiveModInstance(KSPlayerMod* Mod, KSPlayerState* ModInstigator, out KSPlayerModInstance* Instance, bool Unique);// 0x2672720
	bool GiveMod(KSPlayerMod* Mod, KSPlayerState* ModInstigator, bool Unique);// 0x2672610
	KSPlayerModManager* GetPlayerModManagerOverride();// 0x26725f0
	KSOutOfBoundsComponent* GetOutOfBoundsComponent();// 0x26725c0
	bool GetModInstances(out KSPlayerModInstance*[] OutMods);// 0x2672500
	float GetMaxHealth();// 0x26724c0
	KSPlayerState* GetKSPlayerState();// 0x2672490
	KSCharacterAnimInstBase* GetKSCharacterAnimInstBase();// 0x2672460
	KSPlayerState* GetKSBestPlayerState();// 0x2672430
	float GetHealthPct();// 0x26723f0
	float GetHealth();// 0x26723b0
	bool GetGameModeMods(out KSModInst_Activated*[] OutMods);// 0x26722f0
	KSFXCurveComponent* GetFXCurveComponentByFXID(FName InFxID);// 0x2672260
	KSAkComponent* GetCharacterAkComponent();// 0x2672240
	float GetBaseHealth();// 0x2672200
	bool GetActiveMods(out KSPlayerMod*[] OutMods);// 0x2672140
	bool CanSeeFootprints();// 0x2672040
	void BroadcastTakeRadialDamage(const DamageEffect Response);// 0x2671f70
	void BroadcastTakePointDamage(DamageEffect Response);// 0x2671e60
	bool AreFootstepsVisibleOnClient();// 0x2671e40
	ParticleSystemComponent*[] AddParticleEffects(KSParticleSystemAttachment[] ParticleSystemAttachments);// 0x2671d10
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x2671c30
	Guid AddInputLock();// 0x2671bf0

--------------------------------
Class: KSPlayerController.PGame_PlayerController.PlayerController.Controller.Actor.Object
	float ProjectileDebugLifetime;//[Offset: 0x6b8, Size: 1]
	MulticastInlineDelegateProperty OnKSPlayerStateReplicatedDel;//[Size: 1]
	DeferredViewTargetChangeInfo[] DeferredViewTargetChangedUpdate;//[Offset: 0x718, Size: 1]
	KSPlayerState* CurrentSpectateTarget;//[Offset: 0x730, Size: 1]
	Controller* CurrentSpectateController;//[Offset: 0x738, Size: 1]
	Actor* CurrentSpectateViewTarget;//[Offset: 0x740, Size: 1]
	MulticastInlineDelegateProperty OnBeginPlayingState;//[Size: 1]
	ClientContext ClientContext;//[Offset: 0x798, Size: 1]
	ClientInputTypeUse ClientInputTypeUse;//[Offset: 0x8a8, Size: 1]
	bool bRecordingFrameRateInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	ClientStatistics Render;//[Offset: 0x8b8, Size: 1]
	ClientStatistics Game;//[Offset: 0x8e8, Size: 1]
	ClientStatistics GPU;//[Offset: 0x918, Size: 1]
	ClientStatistics RHIT;//[Offset: 0x948, Size: 1]
	ClientStatistics Frame;//[Offset: 0x978, Size: 1]
	ClientStatistics ResolutionFractionApproximation;//[Offset: 0x9a8, Size: 1]
	double FrameRateDataSmoothingFactor;//[Offset: 0x9d8, Size: 1]
	float FrameRateDataPushCountdown;//[Offset: 0x9e0, Size: 1]
	FName DefaultCameraName;//[Offset: 0x9f8, Size: 1]
	bool bWaitingToViewPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 1]
	float LastPingCalcTime;//[Offset: 0xa04, Size: 1]
	class HUD* HUDClass;//[Offset: 0xa10, Size: 1]
	KSPlayerShotListener* ShotListener;//[Offset: 0xa38, Size: 1]
	MulticastInlineDelegateProperty OnHUDSetup;//[Size: 1]
	bool bCachedIsUIRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 1]
	bool bCachedIsOnlyASpector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa91, Size: 1]
	MulticastInlineDelegateProperty OnPlayerControllerIsUIRelevantDel;//[Size: 1]
	MulticastInlineDelegateProperty OnViewedPawnChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnControllerChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateStateChanged;//[Size: 1]
	KSCharacterBase* KSCharacter;//[Offset: 0xb18, Size: 1]
	bool IsInTouchMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	bool StartInTouchMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb21, Size: 1]
	MulticastInlineDelegateProperty OnTouchModeAutoFireStateChangedDel;//[Size: 1]
	float TouchModeAutoFireRadius;//[Offset: 0xb50, Size: 1]
	float TouchModeAutoFireTickRate;//[Offset: 0xb54, Size: 1]
	float TouchModeClearAdsScopedDelay;//[Offset: 0xb58, Size: 1]
	float TouchModeClearAdsUnscopedDelay;//[Offset: 0xb5c, Size: 1]
	float TouchModeAutoFireTimer;//[Offset: 0xb60, Size: 1]
	bool TouchModeAutoFireActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	enum TouchModeAimState;//[Offset: 0xb69, Size: 1]
	TimerHandle TouchModeClearAdsTimer;//[Offset: 0xb70, Size: 1]
	uint32 LastTouchAutoFireWeaponID;//[Offset: 0xb78, Size: 1]
	RenderThreadInputHandler* RenderThreadInputHandler;//[Offset: 0xb80, Size: 1]
	MulticastInlineDelegateProperty OnTouchModeChanged;//[Size: 1]
	CurveFloat* MouseLookSensitivityCurve;//[Offset: 0xba0, Size: 1]
	InterpCurveFloat LookSensitivityToMaxLookSpeed;//[Offset: 0xba8, Size: 1]
	float BaseGamepadTurnRateScale;//[Offset: 0xbc0, Size: 1]
	float BaseGamepadLookUpRateScale;//[Offset: 0xbc4, Size: 1]
	Vector2D GamepadRightStickVelocity;//[Offset: 0xbc8, Size: 1]
	Rotator AccumulatedRotationInput;//[Offset: 0xbd0, Size: 1]
	Vector2D GamepadLook;//[Offset: 0xbe0, Size: 1]
	class KSGamepadLookSpeedManager* GamepadLookSpeedManagerClass;//[Offset: 0xbe8, Size: 1]
	class KSGamepadLookSpeedManager* JoyConLookSpeedManagerClass;//[Offset: 0xbf0, Size: 1]
	KSGamepadLookSpeedManager* GamepadLookSpeedManager;//[Offset: 0xbf8, Size: 1]
	KSGamepadLookSpeedManager* JoyConLookSpeedManager;//[Offset: 0xc00, Size: 1]
	float InputYawScaleADS;//[Offset: 0xc08, Size: 1]
	float InputPitchScaleADS;//[Offset: 0xc0c, Size: 1]
	float InputRollScaleADS;//[Offset: 0xc10, Size: 1]
	Rotator ThisFrameKickbackRotationCache;//[Offset: 0xc14, Size: 1]
	bool bKickbackEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 1]
	KickbackPlayback[] ActiveKickback;//[Offset: 0xc28, Size: 1]
	bool bKickbackRecoveryActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38, Size: 1]
	float KickbackRecoveryDelayRemaining;//[Offset: 0xc3c, Size: 1]
	float KickbackRecoveryAcceleration;//[Offset: 0xc40, Size: 1]
	float KickbackRecoveryTargetRate;//[Offset: 0xc44, Size: 1]
	float KickbackRecoveryRate;//[Offset: 0xc48, Size: 1]
	float MaxCumulativeKickbackVerticalAngle;//[Offset: 0xc4c, Size: 1]
	Rotator KickbackRecoveryRotation;//[Offset: 0xc50, Size: 1]
	Rotator KickbackCancelRotation;//[Offset: 0xc5c, Size: 1]
	float KickbackCancelThreshold;//[Offset: 0xc68, Size: 1]
	bool bAllowKickbackRecoveryCancel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	bool bUseSmartKickbackRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 1]
	float KickbackRecoveryEndThreshold;//[Offset: 0xc74, Size: 1]
	float KickbackScalingFactorMouse;//[Offset: 0xc78, Size: 1]
	KSAimAssistComponent* AimAssistComponent;//[Offset: 0xc80, Size: 1]
	MulticastInlineDelegateProperty ViewedPawnTakeDamageDel;//[Size: 1]
	MulticastInlineDelegateProperty ViewedPawnTakeArmorDamageDel;//[Size: 1]
	MulticastInlineDelegateProperty ViewedPawnInstigateDamageDel;//[Size: 1]
	MulticastInlineDelegateProperty ViewedPawnInstigateDamageNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OwnedPawnInstigateDamageNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OwnedPawnInstigatePreDamageNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OwnedPawnInstigateWeaponFireNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OwnedPawnTakesDamageNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OnOwnedPawnTakeDamageFromInstigatorDel;//[Size: 1]
	MulticastInlineDelegateProperty OnHUDAnnouncementComponentCreated;//[Size: 1]
	bool bCreateHUDAnnouncementComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28, Size: 1]
	KSHUDAnnouncementComponent* HUDAnnouncementComponent;//[Offset: 0xd30, Size: 1]
	MulticastInlineDelegateProperty OnPlayerReadyForPlay;//[Size: 1]
	bool bLoadingScreenEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 1]
	bool bFirstPawnAcknowledged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd79, Size: 1]
	bool bFirstCharacterApparelFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7a, Size: 1]
	bool bFirstCharacterWeaponsEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7b, Size: 1]
	bool bKillcamWorldReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7c, Size: 1]
	float LastTimePlayedTime;//[Offset: 0xdb8, Size: 1]
	KSPingManager* PingManager;//[Offset: 0xdc0, Size: 1]
	KSRadialMenuManager* RadialMenuManager;//[Offset: 0xdc8, Size: 1]
	KSJobSelectionManager* JobSelectionManager;//[Offset: 0xdd0, Size: 1]
	CurveFloat* GyroTargetSpeedCurve;//[Offset: 0xe08, Size: 1]
	CurveFloat* GyroSensitivityConversionCurve;//[Offset: 0xe10, Size: 1]
	KSEquipmentManagerComponent* EquipmentManagerComponent;//[Offset: 0xe18, Size: 1]
	LevelSequenceActor* TeamCinematicSequenceActor;//[Offset: 0xe20, Size: 1]
	bool bIsTeamLoadedInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	MulticastInlineDelegateProperty OnGameFubarDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuUsedLastSelection;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuForceClosed;//[Size: 1]
	bool bRadialMenuOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe80, Size: 1]
	MulticastInlineDelegateProperty OnAutoPickupChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnNewPollCalled;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalPlayerHasVoted;//[Size: 1]
	MulticastInlineDelegateProperty OnPollCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnVoteCountUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPollStateChanged;//[Size: 1]
	bool bLeftChoiceHeldDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 1]
	bool bRightChoiceHeldDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef9, Size: 1]
	bool bTelemetryFeatureActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefd, Size: 1]
	MulticastInlineDelegateProperty OnTelemetrySettingsChanged;//[Size: 1]
	bool bUseFallackTeamNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7c, Size: 1]
	int FallbackTeamNum;//[Offset: 0xf80, Size: 1]
	KSMinimapRendererBase* CachedMinimapRenderer;//[Offset: 0xf88, Size: 1]
	MulticastInlineDelegateProperty OnUpdatePlayerRevealedUI;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdateEnemyDetectedUI;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdateActorRevealStateLocally;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalViewAffected;//[Size: 1]
	enum QueueDivertType;//[Offset: 0xfd1, Size: 1]
	MulticastInlineDelegateProperty OnJobSelectorAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnMobileXpChanged;//[Size: 1]
	void ViewedPawnTakeDamage(Actor* InActor, float DamageAmount, const DamageType* DamageTypeCDO, Controller* EventInstigator, Actor* DamageCauser);// 0x2736ea0
	void ViewedPawnTakeArmorDamage(Actor* InActor, float DamageAmount, const DamageType* DamageTypeCDO, Controller* EventInstigator, Actor* DamageCauser);// 0x2736d10
	void ViewedPawnInstigatedDamageNotify(KSCharacterBase* InPawn, out const CombatEventInfo DamageInfo);// 0x2736ba0
	void ViewedPawnInstigatedDamage(KSCharacterBase* InPawn, float DamageAmount, const DamageType* DamageTypeCDO, Actor* Target, Actor* DamageCauser);// 0x2736a10
	void TriggerInputAction(FName ActionName, Key ActionKey, byte InputEvent);// 0x27368b0
	void TriggerCustomAudioEvent(FString CustomEvent);// 0x2736810
	void TriggerAudioEvent(enum Event);// 0x2736790
	void ToggleTouch();// 0x2736770
	bool ShouldVoteBlockMenu();// 0x2736740
	bool ShouldThermalVisionSkipTeammates();// 0x2736720
	void SetYawLocked(bool bNewLocked);// 0x2736690
	void SetVoteShouldBlockMenu();// 0x2736670
	void SetTouchModeClearAdsTimer(bool bIsScoped);// 0x27365e0
	void SetSkipTeammatesForThermalVision(bool bShouldSkip);// 0x2736560
	void SetPitchLocked(bool bNewLocked);// 0x27364d0
	void SetIsTeamLoadedInLobby(bool bIsLoaded);// 0x2736440
	void SetGamepadTurnRateScale(float NewScale);// 0x27363c0
	void SetGamepadLookUpRateScale(float NewScale);// 0x2736340
	void SetForceThermalVision(bool bForceEnable, bool bIsSpectator);// 0x2736270
	void SetAutoShoulderSwapEnabled(bool bEnable);// 0x27361e0
	void SetAutoPickupEnabled(bool bEnable);// 0x2736150
	void ServerUpdatePing(float ExactPing);// 0x2735fd0
	void ServerSetQueueDivertType(enum InQueueDivertType);// 0x2735f20
	void ServerSetIsTeamLoadedInLobby(bool bIsLoaded);// 0x2735e60
	void ServerSetAutoPickupPreference(bool bEnableAutoPickup);// 0x2735da0
	void ServerReselectJob();// 0x2735d80
	void ServerReportQuitFromMenu();// 0x2735d30
	void ServerPushInputTypeUse(const ClientInputTypeUse PushedClientInputTypeUse);// 0x2735c70
	void ServerPushFrameRateData(const ClientStatistics PushedRender, const ClientStatistics PushedGame, const ClientStatistics PushedGPU, const ClientStatistics PushedRHI, const ClientStatistics PushedFrame, const ClientStatistics PushedResolutionFractionApproximation);// 0x27359d0
	void ServerPushClientContext(const ClientContext PushedClientContext);// 0x27358c0
	void ServerNotifyClientSimpleSimulation(bool UseSimple);// 0x2735800
	void ServerLagCompensationVisualization(bool bEnable);// 0x2735740
	void ServerChangeSpectateTarget(bool bForward);// 0x2735680
	void ServerBouncePing(float Timestamp);// 0x27355d0
	void Server_RequestEmoteOnCinematicCharacter(KSPlayerState* CallingPlayerState, KSEmote* Emote);// 0x2736080
	void ReselectJob();// 0x27355b0
	void RequestEmoteOnCinematicCharacter(KSEmote* Emote);// 0x2735530
	void ReportWeaponsEquipped();// 0x27354e0
	void ReportLoadingScreenEnded();// 0x2735490
	void ReportKillcamWorldReady();// 0x2735440
	void ReportApparelApplied();// 0x27353f0
	void ReportAllReadyConditionsMet();// 0x27353a0
	void ReevaluateSightMods();// 0x2735380
	void ReevaluateFootprints(KSCharacter* CheckCharacter);// 0x2735300
	void ReevaluateAllRevealDisplays();// 0x27352e0
	void RadialMenuUseLastSelection(enum ButtonCosmeticSlot);// 0x2735260
	void RadialMenuReleased(enum ButtonCosmeticSlot, bool bIsContextualPingHold);// 0x2735190
	void RadialMenuPressed(enum ButtonCosmeticSlot, bool bIsContextualPingHold);// 0x27350c0
	void RadialMenuForceClosed();// 0x2731160
	void PlayEmoteOnCinematicCharacter(KSPlayerState* CallingPlayerState, KSEmote* Emote);// 0x2735000
	void OnSpectateViewTargetDestroyed(Actor* InViewTarget);// 0x2734e10
	void OnSpectateViewedCharacterKilledTimerElapsed(const KSCharacterBase* KilledCharacter);// 0x2734f70
	void OnSpectateViewedCharacterKilled(const KSCharacterFoundation* KillerCharacter, const KSCharacterFoundation* KilledCharacter);// 0x2734ea0
	void OnSpectateControllerDestroyed(Actor* InActor);// 0x2734d80
	void OnPrimaryPawnDestroyed(Actor* InPrimaryPawn);// 0x2734d00
	void OnLoadingScreenEnded();// 0x2734ce0
	void OnKillcamWorldReady();// 0x2734cc0
	void OnJobSelectorDestroyed(Actor* DestroyedActor);// 0x2734c40
	void OnDelayedPossess(Pawn* InPawn);// 0x2734bb0
	void OnCurrentSpectateTargetDestroyed(Actor* DestroyedActor);// 0x2734b30
	void OnCharacterWeaponsEquipped();// 0x2734b10
	void OnCharacterApparelApplied();// 0x2734af0
	void LocalStopAimDownSights();// 0x2734ad0
	void LocalStartAimDownSights();// 0x2734ab0
	bool IsViewWithinMinimapBounds();// 0x2734a80
	bool IsUIRelevantOrSpectator();// 0x2734a50
	bool IsUIRelevant();// 0x2734a20
	bool IsThermalVisionForced();// 0x2734a00
	static enum IsTeamNumFriendlyWithLocalPlayerAdvanced(const Object* WorldContextObject, int TeamNum, out int RelativeTeam);// 0x2734900
	static enum IsTeamNumFriendlyWithLocalPlayer(const Object* WorldContextObject, int TeamNum);// 0x2734840
	static enum IsTeamNumFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, int TeamNum, out int RelativeTeam);// 0x2734740
	static enum IsTeamNumFriendlyWithController(const PlayerController* InPlayerController, int TeamNum);// 0x2734680
	bool IsRadialMenuOpen();// 0x2734650
	static enum IsPersistentPlayerFriendlyWithLocalPlayerAdvanced(const Object* WorldContentObject, const KSPersistentPlayerData* Data, out int RelativeTeam);// 0x2734550
	static enum IsPersistentPlayerFriendlyWithLocalPlayer(const Object* WorldContextObject, const KSPersistentPlayerData* Data);// 0x2734490
	static enum IsPersistentPlayerFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, const KSPersistentPlayerData* Data, out int RelativeTeam);// 0x2734390
	static enum IsPersistentPlayerFriendlyWithController(const PlayerController* InPlayerController, const KSPersistentPlayerData* Data);// 0x27342d0
	bool IsPawnDesiredAimDefault();// 0x27342a0
	static bool IsOnlyASpectator(const PlayerController* PlayerController);// 0x2734220
	static enum IsObjectiveFriendlyWithLocalPlayerAdvanced(const KSObjectiveBase* Objective, out int RelativeTeam);// 0x2734150
	static enum IsObjectiveFriendlyWithLocalPlayer(const KSObjectiveBase* Objective);// 0x27340d0
	static enum IsObjectiveFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, const KSObjectiveBase* Objective, out int RelativeTeam);// 0x2733fd0
	static enum IsObjectiveFriendlyWithController(const PlayerController* InPlayerController, const KSObjectiveBase* Objective);// 0x2733f10
	static bool IsLocalPlayerOnlyASpectator(const Object* WorldContextObject);// 0x2733e90
	bool IsInShownWorld();// 0x2733e60
	enum IsFriendlyWithTeamNumAdvanced(int TeamNum, out int RelativeTeam);// 0x2733d90
	enum IsFriendlyWithTeamNum(int TeamNum);// 0x2733d00
	enum IsFriendlyWithPersistentPlayerAdvanced(const KSPersistentPlayerData* Data, out int RelativeTeam);// 0x2733c30
	enum IsFriendlyWithPersistentPlayer(const KSPersistentPlayerData* Data);// 0x2733ba0
	enum IsFriendlyWithObjectiveAdvanced(const KSObjectiveBase* Objective, out int RelativeTeam);// 0x2733ad0
	enum IsFriendlyWithObjective(const KSObjectiveBase* Objective);// 0x2733a40
	static enum IsFriendlyWithLocalPlayerAdvanced(const Actor* Actor, out int RelativeTeam);// 0x2733970
	static enum IsFriendlyWithLocalPlayer(const Actor* Actor);// 0x27338f0
	static enum IsFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, const Actor* Actor, out int RelativeTeam);// 0x27337f0
	static enum IsFriendlyWithController(const PlayerController* InPlayerController, const Actor* Actor);// 0x2733730
	enum IsFriendlyWithComponentAdvanced(const SceneComponent* Component, out int RelativeTeam);// 0x2733660
	enum IsFriendlyWithComponent(const SceneComponent* Component);// 0x27335d0
	enum IsFriendlyWithAdvanced(const Actor* Actor, out int RelativeTeam);// 0x2733500
	enum IsFriendlyWith(const Actor* Actor);// 0x2733470
	static enum IsComponentFriendlyWithLocalPlayerAdvanced(const SceneComponent* Component, out int RelativeTeam);// 0x27333a0
	static enum IsComponentFriendlyWithLocalPlayer(const SceneComponent* Component);// 0x2733320
	static enum IsComponentFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, const SceneComponent* Component, out int RelativeTeam);// 0x2733220
	static enum IsComponentFriendlyWithController(const PlayerController* InPlayerController, const SceneComponent* Component);// 0x2733160
	bool IsAutoShoulderSwapEnabled();// 0x2733130
	bool IsAutoPickupEnabled();// 0x2733110
	bool HasUIBlockingRightStickLookInput();// 0x27330e0
	KSPlayerState* GetViewedPlayerState();// 0x27330b0
	int GetValidSpectateTargetCount();// 0x2733080
	Pawn* GetUIPawn();// 0x2733050
	KSCharacter* GetUIKSCharacter();// 0x2733020
	TelemetrySettings GetTelemetrySettings();// 0x2732fe0
	KSPlayerShotListener* GetShotListener();// 0x2732fc0
	KSRevealManager* GetRevealManager();// 0x2732f90
	KSRadialMenuManager* GetRadialMenuManager();// 0x2732f70
	FText GetRadialItemNameByEquipPoint(out const GameplayTag InEquipPoint);// 0x2732e70
	KSCharacterBase* GetPrimaryPawn();// 0x2732e30
	KSPingManager* GetPingManager();// 0x2732e10
	int GetPing();// 0x2732de0
	static int GetPerceivedTeamNumForLocalPlayer(const Object* WorldContextObject);// 0x2732d60
	static int GetPerceivedTeamNumForController(const PlayerController* InPlayerController);// 0x2732ce0
	int GetPerceivedTeamNum();// 0x2732cb0
	static KSTeamState* GetPerceivedLocalTeamForLocalPlayer(const Object* WorldContextObject);// 0x2732c30
	static KSTeamState* GetPerceivedLocalTeamForController(const PlayerController* InPlayerController);// 0x2732bb0
	KSTeamState* GetPerceivedLocalTeam();// 0x2732b80
	void GetOutgoingPacketInfo(out float KBPerSecond, out int PacketsPerSecond, out float PacketLossRatio);// 0x2732a40
	KSPlayerState* GetKSPlayerState();// 0x2732a00
	KSJobSelectionManager* GetJobSelectionManager();// 0x27329e0
	bool GetIsTeamLoadedInLobby();// 0x27329c0
	bool GetIsPlayerBackfilling();// 0x2732980
	void GetIncomingPacketInfo(out float KBPerSecond, out int PacketsPerSecond, out float PacketLossRatio);// 0x2732840
	KSHUDAnnouncementComponent* GetHUDAnnouncementComponent();// 0x2732820
	KSGamepadLookSpeedManager* GetGamepadLookSpeedManager();// 0x27327c0
	float GetFPS();// 0x2732790
	KSEquipmentManagerComponent* GetEquipmentManagerComponent();// 0x2732770
	KSAimAssistComponent* GetAimAssistComponent();// 0x2732750
	KSJobSelector* GetActiveJobSelector();// 0x2732720
	void FlushVoteInput();// 0x2732700
	void FinalizeAutoPickupPreferenceChange();// 0x27326e0
	void FillInClientContext();// 0x27326c0
	void EventViewedPawnTakeDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin);// 0x2cbecb0
	void EventViewedPawnTakeArmorDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin);// 0x2cbecb0
	void EventViewedPawnInstigatedDamageNotify(out const CombatEventInfo DamageInfo);// 0x2cbecb0
	void EventViewedPawnInstigatedDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* Target, Actor* DamageCauser);// 0x2cbecb0
	void EnablePreventFlushPressedKeys();// 0x27326a0
	void CreateHUDAnnouncementComponent();// 0x2732680
	void CompVis(bool bEnable);// 0x27325f0
	void ClientViewedPawnTakeDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin, bool bPrimaryPawn);// 0x2732370
	void ClientViewedPawnTakeArmorDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin, bool bPrimaryPawn);// 0x27321c0
	void ClientViewedPawnInstigatedDamageNotify(CombatEventInfo DamageInfo, bool bPrimaryPawn);// 0x2731f10
	void ClientUpdateActivityProgressCount(int64 ActivityItemId, int NewProgressCount);// 0x2731e40
	void ClientSpectateTeam();// 0x2731e20
	void ClientSpectateFreeCam();// 0x2731e00
	void ClientSignalEndOfMatch();// 0x2731de0
	void ClientReturnPing(float Timestamp);// 0x2731d60
	void ClientPlayInstantReplay(float TimeToRewind, float Duration, float DilationStart, float DilationAmount);// 0x2731c10
	void ClientOnPollStateChanged(bool bIsPaused);// 0x2731b80
	void ClientOnPollCompleted(KSPollResults PollResults);// 0x2731ab0
	void ClientNotifyMobileXpGain(const KSMobileXpChangeEvent Event);// 0x27319b0
	void ClientDrawDebugSphere(const Vector Center, float Radius, const Color Color, float Duration);// 0x2731870
	void ClientDrawDebugLine(const Vector start, const Vector end, const Color Color, float Duration);// 0x2731730
	void ClientDrawDebugCapsule(const Transform Transform, float Radius, float HalfHeight, const Color Color, float Duration);// 0x2731550
	void ClientDrawDebugBox(const Transform Transform, const Vector Extent, const Color Color, float Duration);// 0x27313c0
	void ClientAddSystemMessage_LateJoin(FString PlayerName);// 0x2731320
	void ClientAddSystemMessage_Backfill(FString PlayerName);// 0x2731280
	void ClientAddSystemMessage(const FText Message);// 0x27311c0
	void Client_ReevaluateSightMods();// 0x27325d0
	void Client_ReevaluateRevealDisplayOfActor(Actor* ActorToCheck);// 0x2732540
	void Client_ReevaluateAllRevealDisplays();// 0x2732520
	void ClearTouchModeADSTimer();// 0x27311a0
	void ClearRotationLocks();// 0x2731180
	void ClearActiveInteractableUI();// 0x2731160
	bool CanViewedCharacterSeeFootprintsForCharacter(KSCharacter* CheckCharacter);// 0x27310d0
	void CachePostMatchScoreboard(ScoreboardStats ScoreboardStats);// 0x2730fb0
	void CachePostMatchInfo(PlayerRewardsSummaryReplicated RewardsReplicated);// 0x2730e70
	void ApplyKickback(const InterpCurveVector2D KickbackCurve, float InKickbackRecoveryDelay, float InKickbackRecoveryRate, float InKickbackRecoveryAccel, float InMaxCumulativeKickbackVerticalAngle, float ScalingFactor);// 0x2730c30
	void AddTimePlayed();// 0x2730c10
	bool ActivateRadialItemByEquipPoint(out const GameplayTag InEquipPoint);// 0x2730b70

--------------------------------
Class: PGame_PlayerController.PlayerController.Controller.Actor.Object
	FString SonyMatchId;//[Offset: 0x658, Size: 1]
	FString SonyActivityId;//[Offset: 0x668, Size: 1]
	enum SonyMatchState;//[Offset: 0x678, Size: 1]
	enum QueuedSonyMatchState;//[Offset: 0x679, Size: 1]
	bool bIsSonyMatchOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 1]
	bool bIsEligibleSonyMatchOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67b, Size: 1]
	bool bIsExclusiveSonyMatchOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	class PGame_CheatComponent* m_CheatComponentClass;//[Offset: 0x690, Size: 1]
	PGame_CheatComponent* r_CheatComponent;//[Offset: 0x698, Size: 1]
	SerializedMctsNetId r_ReplicatedNetId;//[Offset: 0x6a0, Size: 1]
	class InputComponent* InputComponentClass;//[Offset: 0x6a8, Size: 1]
	void ServerUpdateSonyMatchOwnerEligibility(bool bIsEligible);// 0xd77a00
	void ServerUpdateSonyMatchData(FString InMatchId);// 0xd77960
	void ServerUpdateEOSProductUserId(FString NewUserId);// 0xd778a0
	void ClientUpdateSonyMatchData(FString InMatchId, FString InActivityId);// 0xd75c10
	void ClientGameFubared(enum Reason);// 0xd75b90
	void ClientCheckSonyMatchOwnerEligibility();// 0xd75b70

--------------------------------
Class: PGame_CheatComponent.ActorComponent.Object
	void TestFubarRewardPostLogin();// 0xd78050
	void TestFubarRewardPosted();// 0xd780a0
	void TestFubar();// 0xd78000
	void ServerTestFubarRewardPostLogin();// 0xd77330
	void ServerTestFubarRewardPosted();// 0xd77380
	void ServerTestFubar();// 0xd772e0
	void ServerExecCall(FString request);// 0xd77220
	void ServerExec(FString request);// 0xd77180
	void Logout();// 0xd76e70
	void gmJoinQueue(int QueueId);// 0xd78190
	void gmCommand(FString request);// 0xd780f0
	void gmC(FString request);// 0xd780f0
	void ForceCrash();// 0xd760e0
	void DumpAnimationStats();// 0xd75ff0
	void CustomForceStart();// 0xd75fd0

--------------------------------
Class: CombatEventInfo
	PlayerState* EventVictim;//[Offset: 0x0, Size: 1]
	PlayerState* EventInstigator;//[Offset: 0x8, Size: 1]
	Controller* InstigatorController;//[Offset: 0x10, Size: 1]
	PlayerState*[] EventAssistants;//[Offset: 0x18, Size: 1]
	Actor* DamagedActor;//[Offset: 0x28, Size: 1]
	Actor* DamageCauser;//[Offset: 0x30, Size: 1]
	class DamageType* DamageType;//[Offset: 0x38, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x40, Size: 1]
	bool DownEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool KillEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	enum HitLocationType;//[Offset: 0x4a, Size: 1]
	float DamageDealt;//[Offset: 0x4c, Size: 1]
	float OverkillDamageDealt;//[Offset: 0x50, Size: 1]
	float OriginalDamageDealt;//[Offset: 0x54, Size: 1]
	float ArmorDurability;//[Offset: 0x58, Size: 1]
	bool IsArmorHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bDidArmorBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool bDamageResisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bDamageReduced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	bool bDamageShielded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsRadialDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool WasCharacterAlreadyDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	bool WasCharacterBeingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 1]
	bool bDamageMastered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	int VictimBounty;//[Offset: 0x68, Size: 1]
	float ArmorDamageDealt;//[Offset: 0x6c, Size: 1]
	bool bBonusDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	KSPlayerMod*[] DamageCauserTriggeredMods;//[Offset: 0x78, Size: 1]

--------------------------------
Class: KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	DataTable* ItemDisplayStatParamsTable;//[Offset: 0x280, Size: 1]
	FText WeaponDisplayName;//[Offset: 0x288, Size: 1]
	FText WeaponDescription;//[Offset: 0x2a0, Size: 1]
	enum WeaponEquipType;//[Offset: 0x2b8, Size: 1]
	class KSWeapon* WeaponClass;//[Offset: 0x2c0, Size: 1]
	class KSWeaponComponent* WeaponComponentClass;//[Offset: 0x2e8, Size: 1]
	class Object* WeaponAmmoWidgetClass;//[Offset: 0x310, Size: 1]
	class Object* RechargeMethod;//[Offset: 0x338, Size: 1]
	bool bUseComposedResourceName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	FName ChargeResourceName;//[Offset: 0x364, Size: 1]
	class KSWeaponAssetDrop* WeaponDropClass;//[Offset: 0x370, Size: 1]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool bShouldBeRemovedWhenExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x399, Size: 1]
	bool bCanBeDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a, Size: 1]
	bool bWillDropWhenDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39b, Size: 1]
	bool bForceUprightDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39c, Size: 1]
	bool bDoesRestoreAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39d, Size: 1]
	bool bModsCanReplenishAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39e, Size: 1]
	bool bDoLocalReveals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39f, Size: 1]
	bool bCanEverFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool bLagCompensatedFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool bIgnoreNoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	bool bLimitNumInPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	int MaxNumInPlay;//[Offset: 0x3a8, Size: 1]
	bool bLimitDeployablesByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	int PlayerDeployableThreshold;//[Offset: 0x3b0, Size: 1]
	bool bShowReserveAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	bool bUsesEquipPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 1]
	bool bUsesEquipSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b6, Size: 1]
	GameplayTagContainer ValidEquipPoints;//[Offset: 0x3b8, Size: 1]
	enum FireModeType;//[Offset: 0x3d8, Size: 1]
	enum CastType;//[Offset: 0x3d9, Size: 1]
	enum TouchAbilityCastType;//[Offset: 0x3da, Size: 1]
	int RoundsPerBurst;//[Offset: 0x3dc, Size: 1]
	bool bUseAltFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool bUseBuildupForCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	float BuildupTime;//[Offset: 0x3e4, Size: 1]
	float PreFireTime;//[Offset: 0x3e8, Size: 1]
	float PreFireInterruptThreshold;//[Offset: 0x3ec, Size: 1]
	float AltPreFireTime;//[Offset: 0x3f0, Size: 1]
	float PostFireTime;//[Offset: 0x3f4, Size: 1]
	float AltPostFireTime;//[Offset: 0x3f8, Size: 1]
	float PostFireForgivenessTime;//[Offset: 0x3fc, Size: 1]
	bool bSwapAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400, Size: 1]
	bool bSwapGadgetOnExhaust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x401, Size: 1]
	float CooldownTime;//[Offset: 0x404, Size: 1]
	bool bUseChargingFireRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	float InitialPostFireTime;//[Offset: 0x40c, Size: 1]
	float FinalPostFireTime;//[Offset: 0x410, Size: 1]
	float PostFireChargeTime;//[Offset: 0x414, Size: 1]
	float PostFireDecayTime;//[Offset: 0x418, Size: 1]
	float PostFireDecayDelay;//[Offset: 0x41c, Size: 1]
	bool bCanEverReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	bool bConsumeAmmoDirectlyFromInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x421, Size: 1]
	int ClipSize;//[Offset: 0x424, Size: 1]
	enum ReloadType;//[Offset: 0x428, Size: 1]
	float PreReloadTime;//[Offset: 0x42c, Size: 1]
	float PostReloadTime;//[Offset: 0x430, Size: 1]
	float ReloadCooldownTime;//[Offset: 0x434, Size: 1]
	bool bReloadOnEmptyWhileScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	float FirstShotPreReloadTime;//[Offset: 0x43c, Size: 1]
	bool bCanInterruptPreReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	enum AmmoType;//[Offset: 0x441, Size: 1]
	int DefaultAmmo;//[Offset: 0x444, Size: 1]
	bool bUnlimitedAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bMuteEmptyClipWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	float HolsterTime;//[Offset: 0x44c, Size: 1]
	bool bShouldRestrictHolsterInPostFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	float RetriveTime;//[Offset: 0x454, Size: 1]
	bool bCanFireFromRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	enum ReticleType;//[Offset: 0x459, Size: 1]
	bool bFadeUIOnAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45a, Size: 1]
	bool bOverrideTouchCancelButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45b, Size: 1]
	bool bOverrideTouchCancelButtonVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45c, Size: 1]
	WeaponStateGraph WeaponStateGraph;//[Offset: 0x460, Size: 1]
	bool bDoRadialDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	bool bIsRadialDamageConical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a1, Size: 1]
	float HeadDamageAmount;//[Offset: 0x5a4, Size: 1]
	float DamageAmount;//[Offset: 0x5a8, Size: 1]
	float LimbDamageAmount;//[Offset: 0x5ac, Size: 1]
	InterpCurveFloat DamageFalloffCurve;//[Offset: 0x5b0, Size: 1]
	RadialDamageParams RadialDamageParams;//[Offset: 0x5c8, Size: 1]
	bool bIgnoreFriendlies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	bool bIgnoreEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd, Size: 1]
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5de, Size: 1]
	bool bIgnoreWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5df, Size: 1]
	float RadialConicalHalfAngle;//[Offset: 0x5e0, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x5e8, Size: 1]
	float CautionRadius;//[Offset: 0x610, Size: 1]
	int ShotPenetrationCount;//[Offset: 0x614, Size: 1]
	float DefaultAimTransitionTime;//[Offset: 0x618, Size: 1]
	bool bCanEverAimOverShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c, Size: 1]
	float AimOverShoulderTransitionTime;//[Offset: 0x620, Size: 1]
	bool bCanEverAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	float AimDownSightsTransitionTime;//[Offset: 0x628, Size: 1]
	bool bLockoutAimStateInCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	float AimDownSightsFov;//[Offset: 0x630, Size: 1]
	bool bCanEverAimAlternate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 1]
	float AimAlternateTransitionTime;//[Offset: 0x638, Size: 1]
	bool bAimAlternateAbortsFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	bool bPrefireLockon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d, Size: 1]
	float PrefireLockonAngle;//[Offset: 0x640, Size: 1]
	float PrefireLockonDistance;//[Offset: 0x644, Size: 1]
	bool bLimitCameraRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648, Size: 1]
	float MinCameraPitch;//[Offset: 0x64c, Size: 1]
	float MaxCameraPitch;//[Offset: 0x650, Size: 1]
	float MinCameraYaw;//[Offset: 0x654, Size: 1]
	float MaxCameraYaw;//[Offset: 0x658, Size: 1]
	bool bOverrideShoulderCameraProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 1]
	float ShoulderCameraBoomLength;//[Offset: 0x660, Size: 1]
	Vector ShoulderCameraSocketOffset;//[Offset: 0x664, Size: 1]
	Vector ShoulderCameraTargetOffset;//[Offset: 0x670, Size: 1]
	Transform ShoulderCameraTransform;//[Offset: 0x680, Size: 1]
	bool bIsMountedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	bool bAllowsManualShoulderSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 1]
	enum ForcedShoulder;//[Offset: 0x6b2, Size: 1]
	bool bUseCrouchAOSCamVertOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b3, Size: 1]
	float GamepadTurnSpeedMultiplier;//[Offset: 0x6b4, Size: 1]
	float GamepadAimedTurnSpeedMultiplier;//[Offset: 0x6b8, Size: 1]
	bool bPrefireOverlapSkipsToFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	PrefireSkipWindow[] PrefireSkipWindows;//[Offset: 0x6c0, Size: 1]
	float PrefireOverlapGracePeriod;//[Offset: 0x6d0, Size: 1]
	enum ThirdPersonAimOriginType;//[Offset: 0x6d4, Size: 1]
	Vector ThirdPersonFixedRelativeOffset;//[Offset: 0x6d8, Size: 1]
	FName ThirdPersonAimOriginSocketName;//[Offset: 0x6e4, Size: 1]
	bool bUseMirroredAimOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ec, Size: 1]
	FName MirroredThirdPersonAimOriginSocketName;//[Offset: 0x6f0, Size: 1]
	float BaseAccuracy;//[Offset: 0x6f8, Size: 1]
	float CrouchAccuracyModifier;//[Offset: 0x6fc, Size: 1]
	float AimOverShoulderAccuracyModifier;//[Offset: 0x700, Size: 1]
	float InAirAccuracyModifier;//[Offset: 0x704, Size: 1]
	float MovementAccuracyPenalty;//[Offset: 0x708, Size: 1]
	bool bUseAccuracyLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c, Size: 1]
	bool bUseAccuracyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70d, Size: 1]
	float AccuracyLossPerShot;//[Offset: 0x710, Size: 1]
	float MaxFiringAccuracyLoss;//[Offset: 0x714, Size: 1]
	float AccuracyReturnRate;//[Offset: 0x718, Size: 1]
	float AccuracyGainPerShot;//[Offset: 0x71c, Size: 1]
	float MaxFiringAccuracyGain;//[Offset: 0x720, Size: 1]
	float MaxAimedFiringAccuracyGain;//[Offset: 0x724, Size: 1]
	float AccuracyDecayRate;//[Offset: 0x728, Size: 1]
	float AccuracyReturnDelay;//[Offset: 0x72c, Size: 1]
	float MaxHipFireAccuracy;//[Offset: 0x730, Size: 1]
	float MaxAimedAccuracy;//[Offset: 0x734, Size: 1]
	KickbackModule* KickbackModule;//[Offset: 0x738, Size: 1]
	float KickbackApplicationTimeOverride;//[Offset: 0x740, Size: 1]
	bool bCanResetKickback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744, Size: 1]
	float KickbackResetTime;//[Offset: 0x748, Size: 1]
	bool bUseKickbackRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74c, Size: 1]
	float KickbackRecoveryDelay;//[Offset: 0x750, Size: 1]
	float KickbackRecoveryRate;//[Offset: 0x754, Size: 1]
	float KickbackRecoveryAcceleration;//[Offset: 0x758, Size: 1]
	float MaxCumulativeKickbackVerticalAngle;//[Offset: 0x75c, Size: 1]
	float GamepadKickbackScaling;//[Offset: 0x760, Size: 1]
	float SprintRecoveryTime;//[Offset: 0x764, Size: 1]
	bool bStartFireInterruptsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 1]
	bool bStartReloadInterruptsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x769, Size: 1]
	bool bStartHolsterInterruptsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76a, Size: 1]
	float DodgeRollRecoveryTime;//[Offset: 0x76c, Size: 1]
	bool bShouldPreventDodgeRollDuringFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool bCanFireWhileInPowerSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	bool bCanUseWhileOnZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x772, Size: 1]
	bool bIsAudible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x773, Size: 1]
	float AudibleRange;//[Offset: 0x774, Size: 1]
	float WalkSpeedModifier;//[Offset: 0x778, Size: 1]
	float CrouchSpeedModifier;//[Offset: 0x77c, Size: 1]
	float SprintSpeedModifier;//[Offset: 0x780, Size: 1]
	float ADSSpeedModifier;//[Offset: 0x784, Size: 1]
	float FiringSpeedModifier;//[Offset: 0x788, Size: 1]
	bool bCanUseOffGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c, Size: 1]
	GameplayTagContainer ValidWeaponAttachmentPoints;//[Offset: 0x790, Size: 1]
	<KSWeaponAttachment*> ValidAttachments;//[Offset: 0x7b0, Size: 1]
	int AttachmentSlotCount;//[Offset: 0x800, Size: 1]
	KSItem* DefaultWrap;//[Offset: 0x808, Size: 1]
	<FName,KSWeaponAsset*> AuxiliaryWeapons;//[Offset: 0x830, Size: 1]
	ForceFeedbackEffect* VibrationEffect;//[Offset: 0x880, Size: 1]
	ForceFeedbackEffect* AlternativeVibrationEffect;//[Offset: 0x8a8, Size: 1]
	ForceFeedbackAttenuation* AlternativeVibrationAttenuation;//[Offset: 0x8d0, Size: 1]
	AkAudioEvent* RumbleEvent;//[Offset: 0x8f8, Size: 1]
	KSWeaponAsset* WeaponUpgrade;//[Offset: 0x900, Size: 1]
	Texture2D* ItemRenderImage;//[Offset: 0x928, Size: 1]
	Texture2D* ItemCosmeticImage;//[Offset: 0x950, Size: 1]
	float ADSRollMultiplier;//[Offset: 0x978, Size: 1]
	float ADSBumpStartStopMultiplier;//[Offset: 0x97c, Size: 1]
	float ADSBumpLoopingMultiplier;//[Offset: 0x980, Size: 1]
	ADSBlurValues ADSBlurValuesInfo;//[Offset: 0x988, Size: 1]
	bool WillDropWhenDowned();// 0x27c1350
	bool UsingAccuracyLoss();// 0x27c1310
	bool UsingAccuracyInADS();// 0x27c12f0
	static KSWeapon* TryToEquipToCharacterNoPointGiven(KSWeaponAsset* WeaponAsset, KSCharacter* InOwner, Actor* InInstigator, GiveItemParameters InGiveItemParameters, bool bAllowSyncLoad);// 0x27c10c0
	static KSWeapon* TryToEquipToCharacter(KSWeaponAsset* WeaponAsset, KSCharacter* InOwner, Actor* InInstigator, GameplayTag EquipPoint, GiveItemParameters InGiveItemParameters, bool bAllowSyncLoad);// 0x27c0e80
	bool ShouldUseCrouchAOSCamVertOffset();// 0x27c0cc0
	bool ShouldUseComposedResourceName();// 0x27c0ca0
	bool ShouldUseChargingFireRate();// 0x27c0c80
	bool ShouldUseBuildupForCooking();// 0x27c0c60
	bool ShouldStartReloadInterruptSprinting();// 0x27c0c40
	bool ShouldStartHolsterInterruptSprinting();// 0x27c0c20
	bool ShouldStartFireInterruptSprinting();// 0x27c0c00
	bool ShouldShowReserveAmmo();// 0x27c0bd0
	bool ShouldPreventDodgeRollDuringFire();// 0x27c0bb0
	bool ShouldPrefireOverlapSkipToFire();// 0x27c0b90
	bool ShouldOverrideShoulderCameraProperties();// 0x27c0b70
	bool ShouldMuteEmptyClipWarnings();// 0x27c0b50
	bool ShouldLockonPrefire();// 0x27c0b30
	bool ShouldLimitCameraRotation();// 0x27c0b10
	bool ShouldLagCompensateFire(KSPlayerState* FiringPlayer);// 0x27c0a80
	bool ShouldForceUprightDrops();// 0x27c0a60
	bool ShouldFadeUIOnAim();// 0x27c0a40
	bool ShouldDoRadialDamage();// 0x27c0a20
	bool ShouldBeRemovedWhenExhausted();// 0x27c0a00
	bool ShouldAllowManualShoulderSwap();// 0x27c09e0
	bool RequiresAnEquipSlot();// 0x27c09c0
	bool RequiresAnEquipPoint();// 0x2616a10
	InterpCurveVector2D MakeKickbackCurve(int nShotIndex, float AbsoluteMaxDuration);// 0x27c0610
	bool LockoutAimStateInCooldown();// 0x27c05f0
	bool LimitNumInPlay();// 0x27c05d0
	bool LimitDeployablesByPlayer();// 0x27c05b0
	bool IsUnique();// 0x27c0590
	bool IsRadialDamageConical();// 0x27c0570
	bool IsMountedWeapon();// 0x27c0550
	bool IsGun();// 0x27c0520
	bool IsGadget();// 0x27c04f0
	float IsAudible();// 0x27c04c0
	bool IsAbilityWeapon();// 0x27c0490
	bool HasKickback();// 0x27c0460
	KSWeaponAsset* GetWeaponUpgrade();// 0x27c0400
	GameplayTag GetWeaponType();// 0x26d1170
	void GetWeaponStats(out FString[] OutStats);// 0x27c0330
	FString GetWeaponNameAsString();// 0xe092e0
	FText GetWeaponName();// 0xe09230
	GameplayTag GetWeaponEquipType();// 0x27c02f0
	class KSWeaponAssetDrop GetWeaponDropClass();// 0x27c0210
	FString GetWeaponDescriptionAsString();// 0xe090e0
	FText GetWeaponDescription();// 0xe09030
	class KSWeaponComponent GetWeaponComponentClass();// 0x27c0170
	class KSWeapon GetWeaponClass();// 0x27c00d0
	enum GetWeaponCategoryType();// 0x27c00a0
	void GetWeaponAttachmentPoints(out GameplayTagContainer OutAttachPoints);// 0x27bffe0
	class Object GetWeaponAmmoWidgetClass();// 0x27bff40
	float GetWalkSpeedModifier();// 0x27bff20
	ForceFeedbackEffect* GetVibrationEffect();// 0x27bfe80
	GameplayTagContainer GetValidEquipPoints();// 0x27bfe20
	<KSWeaponAttachment*> GetValidAttachments();// 0x27bfc80
	bool GetUseAltFire();// 0x27bfc60
	bool GetUnlimitedAmmo();// 0x27bfc40
	enum GetTouchAbilityCastType();// 0x27bfc20
	Vector GetThirdPersonFixedRelativeOffset();// 0x27bfbf0
	bool GetSwapGadgetOnExhaust();// 0x27b0d50
	bool GetSwapAfterFire();// 0x27bfbd0
	float GetSprintSpeedModifier();// 0x27bfbb0
	float GetSprintRecoveryTime();// 0x27bfb90
	Texture2D* GetSoftItemRenderImage();// 0x27bfaf0
	SoftObjectPath GetSoftItemCosmeticImagePath();// 0x27bfa50
	Transform GetShoulderCameraTransform();// 0x27bfa10
	Vector GetShoulderCameraTargetOffset();// 0x27bf9e0
	Vector GetShoulderCameraSocketOffset();// 0x27bf9b0
	float GetShoulderCameraBoomLength();// 0x27bf990
	int GetShotPenetrationCount();// 0x27bf970
	AkAudioEvent* GetRumbleEvent();// 0x27bf890
	int GetRoundsPerBurst();// 0x273e470
	float GetRetrieveTime();// 0x27bf870
	enum GetReticleType();// 0x27bf850
	enum GetReloadType();// 0x26e4650
	float GetReloadCooldownTime();// 0x27bf830
	class Object GetRechargeMethod();// 0x27bf790
	bool GetRadialIgnoreWalls();// 0x27bf770
	bool GetRadialIgnoreSelf();// 0x27bf750
	bool GetRadialIgnoreFriendlies();// 0x27bf730
	bool GetRadialIgnoreEnemies();// 0x27bf710
	RadialDamageParams GetRadialDamageParams();// 0x27bf6a0
	float GetRadialConicalHalfAngle();// 0x27bf680
	float GetPreReloadTime();// 0x27bf470
	float GetPreFireTime();// 0x273e6a0
	int GetPrefireSkipWindowNum();// 0x27bf660
	PrefireSkipWindow GetPrefireSkipWindow(int Index);// 0x27bf4f0
	float GetPrefireOverlapGracePeriod();// 0x27bf4d0
	float GetPrefireLockonDistance();// 0x27bf4b0
	float GetPrefireLockonAngle();// 0x27bf490
	float GetPreFireInterruptThreshold();// 0x27bf450
	float GetPostReloadTime();// 0x27bf430
	float GetPostFireTime();// 0x27bf400
	float GetPostFireForgivenessTime();// 0x27bf3e0
	float GetPostFireDecayTime();// 0x27bf3c0
	float GetPostFireDecayDelay();// 0x27bf3a0
	float GetPostFireChargeTime();// 0x27bf380
	int GetPlayerDeployableLimit();// 0x2742690
	float GetOuterRadius();// 0x27bf360
	float GetMovementAccuracyPenalty();// 0x275b450
	int GetMaxNumInPlay();// 0x27426f0
	float GetMaxHipFireAccuracy();// 0x2765e80
	float GetMaxFiringAccuracyLoss();// 0x27bf340
	float GetMaxFiringAccuracyGain();// 0x27bf320
	float GetMaxFalloffDistance();// 0x27bf2f0
	float GetMaxCumulativeKickbackVerticalAngle();// 0x27bf2d0
	float GetMaxAimedFiringAccuracyGain();// 0x27bf2b0
	float GetMaxAimedAccuracy();// 0x27bf290
	float GetLimbDamageAmount();// 0x27bf270
	float GetKickbackResetTime();// 0x27bf250
	float GetKickbackRecoveryRate();// 0x27bf210
	float GetKickbackRecoveryDelay();// 0x27bf1d0
	float GetKickbackRecoveryAcceleration();// 0x27bf190
	float GetKickbackApplicationOverride();// 0x27bf170
	float GetInnerRadius();// 0x27bf150
	float GetInitialPostFireTime();// 0x27bf130
	float GetInitialFireRate();// 0x27bf100
	float GetInAirAccuracyModifier();// 0x27bf0e0
	float GetHolsterTime();// 0x27bf0c0
	float GetHeadDamageAmount();// 0x27bf0a0
	float GetGamepadTurnSpeedMultiplier();// 0x27bf080
	float GetGamepadKickbackScaling();// 0x27bf060
	float GetGamepadAimedTurnSpeedMultiplier();// 0x27bf040
	enum GetForcedShoulder();// 0x27bf020
	float GetFirstShotPreReloadTime();// 0x27bf000
	float GetFiringSpeedModifier();// 0x27befe0
	float GetFireRate();// 0x27befb0
	enum GetFireModeType();// 0x27bef90
	float GetFinalPostFireTime();// 0x27bef70
	float GetFinalFireRate();// 0x27bef40
	float GetDodgeRollRecoveryTime();// 0x27bef20
	KSItem* GetDefaultWrap();// 0x27bed90
	int GetDefaultAmmo();// 0x27bed70
	float GetDefaultAimTransitionTime();// 0x27658e0
	class DamageType GetDamageTypeClass();// 0x27becd0
	float GetDamageAmount();// 0x27becb0
	float GetCrouchSpeedModifier();// 0x27bec90
	float GetCrouchAccuracyModifier();// 0x27bec70
	float GetCooldownDownTime();// 0x27bec50
	bool GetConsumeAmmoDirectlyFromInventory();// 0x27bec30
	void GetCompatibleAttachments(out KSWeaponAttachment*[] OutAttachments);// 0x27bebb0
	void GetCompatibleAttachmentAssets(out KSWeaponAttachment*[] OutAttachments);// 0x27beae0
	int GetClipSize();// 0x27beac0
	FName GetChargeResourceName();// 0x27beaa0
	float GetCautionRadius();// 0x27bea80
	enum GetCastType();// 0x27bea60
	bool GetCanUseOffGround();// 0x27bea40
	float GetCanFireWhileInPowerSlide();// 0x27bea10
	void GetCameraYawLimits(out float MinYaw, out float MaxYaw);// 0x27be930
	void GetCameraPitchLimits(out float MinPitch, out float MaxPitch);// 0x27be850
	float GetBuildupTime();// 0x273e410
	float GetBaseRadialDamage();// 0x27be830
	float GetBaseAccuracy();// 0x27be810
	float GetAudibleRange();// 0x27be7f0
	int GetAttachmentSlotCount();// 0x27be7d0
	enum GetAmmoType();// 0x27be5b0
	ForceFeedbackEffect* GetAlternativeVibrationEffect();// 0x27be510
	ForceFeedbackAttenuation* GetAlternativeVibrationAttenuation();// 0x27be470
	float GetAlternatePreFireTime();// 0x27be440
	float GetAlternatePostFireTime();// 0x27be410
	float GetAimOverShoulderTransitionTime();// 0x27be3f0
	float GetAimOverShoulderAccuracyModifier();// 0x275c000
	float GetAimDownSightsTransitionTime();// 0x27be3d0
	float GetAimDownSightsFOV();// 0x27be3b0
	float GetAimAlternateTransitionTime();// 0x27be390
	bool GetAimAlternateAbortsFire();// 0x27be370
	float GetADSSpeedModifier();// 0x27be2b0
	float GetADSRollMultiplier();// 0x27be290
	float GetADSBumpStartStopMultiplier();// 0x27be270
	float GetADSBumpLoopingMultiplier();// 0x27be250
	ADSBlurValues GetADSBlurValuesInfo();// 0x27be200
	float GetAccuracyReturnRate();// 0x27be350
	float GetAccuracyReturnDelay();// 0x27be330
	float GetAccuracyLossPerShot();// 0x27be310
	float GetAccuracyGainPerShot();// 0x27be2f0
	float GetAccuracyDecayRate();// 0x27be2d0
	bool DoesScopingAllowAutoReload();// 0x26e6f30
	bool DoesRestoreAmmo();// 0x27be150
	bool DoesIgnoreNoFire();// 0x27be130
	static KSProjectile* CreateProjectile(Object* WorldContextObject, KSWeaponAsset* WeaponAsset, Vector SpawnLocation, Rotator SpawnRotation, DropItemParameters InDropItemParameters, KSWeapon* SpawningWeapon, Actor* SpawningOwner, Pawn* SpawningInstigator, bool bDeferConstruction, out const FName ProjectileInfoKey);// 0x27bdde0
	static KSProjectile* CreateAndExplodeProjectile(Object* WorldContextObject, KSWeaponAsset* WeaponAsset, Vector SpawnLocation, Rotator SpawnRotation, DropItemParameters InDropItemParameters, KSWeapon* SpawningWeapon, Actor* SpawningOwner, Pawn* SpawningInstigator, bool bDeferConstruction);// 0x27bdb10
	static float ConeHalfAngleToAccuracy(float HalfAngle);// 0x27bda00
	bool CanWeaponStateTransition(enum OldState, enum NewState);// 0x27bd930
	bool CanResetKickback();// 0x27bd910
	bool CanRecoverFromKickback();// 0x27bd8f0
	bool CanReceiveAttachment(const KSWeaponAttachment* InAttachment, out GameplayTagContainer AvailableAttachPoints);// 0x27bd7e0
	bool CanModsReplenishAmmo();// 0x27bd7c0
	bool CanInterruptPreReload();// 0x27bd7a0
	bool CanEverReload();// 0x27bd780
	bool CanEverFire();// 0x27426d0
	bool CanEverAimOverShoulder();// 0x27bd760
	bool CanEverAimDownSights();// 0x27bd740
	bool CanEverAimAlternate();// 0x27bd720
	bool CanDoLocalReveals();// 0x27bd700
	bool CanBeDropped();// 0x27bd6e0
	bool CanAutoFire();// 0x2742670
	float CalculateDamageFromProjectileHit(out const HitResult HitInfo, const KSProjectile* Projectile);// 0x27bd5c0
	float CalculateDamageFromInstantHit(out const HitResult HitInfo, float DamageFalloffRangeScaler, float FalloffRangeExtender);// 0x27bd460
	float CalculateDamageFalloffFromProjectileHit(out const HitResult HitInfo, const KSProjectile* Projectile);// 0x27bd350
	float CalculateDamageFalloffFromHitResults(out const HitResult HitInfo, float FalloffRangeScaler, float FalloffRangeExtender);// 0x27bd1f0
	float CalculateDamageFalloffFromDistance(float Distance, float FalloffRangeScaler, float FalloffRangeExtender);// 0x27bd0e0
	static float AccuracyToConeHalfAngle(float Accuracy);// 0x27bd060

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 1]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	FString ImportKeyField;//[Offset: 0x88, Size: 1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: KSWeapon.KSEquipment.Info.Actor.Object
	bool bCanSwapOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bCanSwapOnDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	bool bCanSwapOutOnInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 1]
	bool bCanSwapOutWhileAimingDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 1]
	class KSItemDrop* LoadedDropClass;//[Offset: 0x300, Size: 1]
	bool bNoWeaponAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	KSWeaponAsset* WeaponAssetPtr;//[Offset: 0x318, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x340, Size: 1]
	uint32 AutoSwapOutWeaponId;//[Offset: 0x358, Size: 1]
	AuxiliaryWeaponInfo AuxiliaryWeaponInfo;//[Offset: 0x360, Size: 1]
	<FName,KSWeapon*> AuxiliaryWeapons;//[Offset: 0x370, Size: 1]
	MulticastInlineDelegateProperty OnCreatedDeployable;//[Size: 1]
	enum DestroyReason;//[Offset: 0x3d0, Size: 1]
	KSCharacter* CharacterOwner;//[Offset: 0x3d8, Size: 1]
	KSPlayerState* PlayerStateInstigator;//[Offset: 0x3e0, Size: 1]
	bool bUseCompressStateTransmission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	enum WeaponState;//[Offset: 0x400, Size: 1]
	enum LocalWeaponState;//[Offset: 0x401, Size: 1]
	float LastStateChangeTimeStamp;//[Offset: 0x404, Size: 1]
	WeaponStateChangeRequest[] PendingStateChangeRequests;//[Offset: 0x408, Size: 1]
	uint16 NextStateRequestId;//[Offset: 0x41a, Size: 1]
	MulticastInlineDelegateProperty OnWeaponStateChangedDel;//[Size: 1]
	bool bPendingFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bBotPendingFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]
	bool bFireOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 1]
	int KickbackShotIndex;//[Offset: 0x464, Size: 1]
	float KickbackResetTimeLeft;//[Offset: 0x468, Size: 1]
	int BurstShotIndex;//[Offset: 0x46c, Size: 1]
	float MinCookTimeStamp;//[Offset: 0x470, Size: 1]
	bool bUsingPostFireForgiveness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	float PrefireStartTime;//[Offset: 0x478, Size: 1]
	Object* RechargeMethodInstance;//[Offset: 0x480, Size: 1]
	KSActionRestrictor FireLockout;//[Offset: 0x488, Size: 1]
	MulticastInlineDelegateProperty OnFire;//[Size: 1]
	MulticastInlineDelegateProperty OnReloadFailed;//[Size: 1]
	float DeathShotForgivenessTime;//[Offset: 0x4b0, Size: 1]
	bool bTryToReloadEveryTickOnEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	int CachedReloadSize;//[Offset: 0x4b8, Size: 1]
	int AmmoInClip;//[Offset: 0x4bc, Size: 1]
	int ClipSize;//[Offset: 0x4c0, Size: 1]
	int AmmoConsumedSinceLastReload;//[Offset: 0x4c4, Size: 1]
	WeaponStateChangeRequest LastReloadRequest;//[Offset: 0x4c8, Size: 1]
	bool bWeaponStartsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	enum ReloadReplicationFlags;//[Offset: 0x4d9, Size: 1]
	MulticastInlineDelegateProperty OnExhaustedDel;//[Size: 1]
	bool bShouldResumeReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	bool bFirstReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 1]
	bool bShouldSwapToNextOnExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f2, Size: 1]
	MulticastInlineDelegateProperty OnAmmoChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnAmmoInClipConsumed;//[Size: 1]
	bool bCanRetrieveWhileCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	class DamageType* LoadedDamageTypeClass;//[Offset: 0x538, Size: 1]
	MulticastInlineDelegateProperty OnHiddenInteractableUpdate;//[Size: 1]
	Actor* CachedHiddenInteractable;//[Offset: 0x550, Size: 1]
	float NextExpectedTimerEndTime;//[Offset: 0x570, Size: 1]
	TimerHandle ActiveTimer;//[Offset: 0x578, Size: 1]
	bool bCanEverInterruptSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	float SprintRecoveryRemaining;//[Offset: 0x584, Size: 1]
	bool bReleasedFireInSprintRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bDodgeRollInterruptedReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	bool bSprintCanInterruptReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 1]
	bool bDodgeRollCanInterruptReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58b, Size: 1]
	float DodgeRollRecoveryRemaining;//[Offset: 0x58c, Size: 1]
	bool bInLockon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	float LockonProgress;//[Offset: 0x5ac, Size: 1]
	float LockonDuration;//[Offset: 0x5b0, Size: 1]
	Rotator LockonStartRotation;//[Offset: 0x5b4, Size: 1]
	Rotator LockonEndRotation;//[Offset: 0x5c0, Size: 1]
	RandomStream WeaponRandomStream;//[Offset: 0x624, Size: 1]
	KSAimLockData* AimAssistLockData;//[Offset: 0x6b0, Size: 1]
	KSAimSnapData* AimAssistSnapData;//[Offset: 0x6b8, Size: 1]
	bool bRequireInputForAimAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	CurveVector* AimAssistLockCurve;//[Offset: 0x6c8, Size: 1]
	CurveFloat* AimAssistLockDistanceCurve;//[Offset: 0x6d0, Size: 1]
	bool bRequireInputForHipAimAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	CurveVector* HipAimAssistLockCurve;//[Offset: 0x6e0, Size: 1]
	CurveFloat* HipAimAssistLockDistanceCurve;//[Offset: 0x6e8, Size: 1]
	CurveVector* AimAssistSnapCurve;//[Offset: 0x6f0, Size: 1]
	bool WasRemoved();// 0x27b32a0
	bool WasDropped();// 0x27b3270
	bool UsingAccuracyLoss();// 0x27b3240
	void UpdateHiddenInteractable();// 0x1f2b890
	void TryToRemove();// 0x27b3220
	bool StopFireOnRelease();// 0x27b31f0
	void StopFire();// 0x1ef4350
	void StopDefaultAim();// 0x1f12780
	bool StopAltFire();// 0x26a4f90
	void StopAimOverShoulder();// 0x1ef2d30
	void StopAimDownSights();// 0x1f2b430
	void StateRequestTimeoutExpired();// 0x27b31d0
	bool StartRetrieving(bool bInstant);// 0x27b3130
	bool StartReload();// 0x27b3100
	bool StartHolstering();// 0x27b30d0
	bool StartFire();// 0x27b30a0
	void StartDefaultAim();// 0x1f12980
	bool StartAltFire();// 0x27b3070
	void StartAimOverShoulder();// 0x1f121c0
	void StartAimDownSights();// 0x1f159a0
	void SimulateConsumeAmmo(out int AmmoInClipAfterConsume, out int AmmoToConsumeFromInventory);// 0x27b2f90
	bool ShouldSwapOffBeInstant();// 0x2672a30
	bool ShouldStartReloadInterruptSprinting();// 0x27b2f60
	bool ShouldStartHolsterInterruptSprinting();// 0x275c8a0
	bool ShouldStartFireInterruptSprinting();// 0x27b2f30
	bool ShouldStartFireInterruptAimDownSights();// 0x275c930
	bool ShouldQuickMeleeAsBackupFire();// 0x27b2f00
	bool ShouldQuickCast();// 0x27b2ed0
	bool ShouldLimitCameraRotation();// 0x27b2ea0
	bool ShouldEACRecordAsMeleeAttackNow();// 0x27b2e70
	bool ShouldConsumeAmmoDirectlyFromInventory();// 0x27b2e40
	bool ShouldBeRemovedWhenExhausted();// 0x27b2e10
	void SetAutoSwapOutWeaponId(uint32 OtherWeaponId);// 0x27b2d90
	void ServerStartForcedVariableFireRateUpdate();// 0x1f125c0
	void ServerRetrieveActiveWeaponCompressed(const WeaponStateChangeRequest request, uint16 LastRequestId);// 0x27b2c80
	void ServerRetrieveActiveWeapon(const WeaponStateChangeRequest request);// 0x27b2bc0
	void ServerRequestStateChangeCompressed(const WeaponStateChangeRequest request, uint16 LastRequestId);// 0x27b2ab0
	void ServerRequestStateChange(const WeaponStateChangeRequest request);// 0x27b29f0
	void ServerPostReloadCompressed(const WeaponStateChangeRequest request, int AmmoDelta, uint16 LastRequestId);// 0x27b28a0
	void ServerPostReload(const WeaponStateChangeRequest request, int AmmoDelta);// 0x27b2790
	void ServerEndForcedVariableFireRateUpdate();// 0xdd2860
	void ServerCookReleasedCompressed(const WeaponStateChangeRequest request, float AdditionalCookTime, uint16 LastRequestId);// 0x27b2640
	void ServerCookReleased(const WeaponStateChangeRequest request, float AdditionalCookTime);// 0x27b2530
	int RemoveAmmoDirectlyFromClip(int RemovedAmmo, bool bBonusAmmo);// 0x27b2470
	void Reload(bool bBonusAmmo);// 0x27b23e0
	void RecoverBackToIdleOnUnpossess();// 0x1f12880
	void Recharge();// 0x27b23c0
	void ProcessHits(out const AimData ReceivedAim, out const HitResult[] Hits);// 0x27b22a0
	void PreLoadAmmo();// 0x27b2260
	bool OwnerIsTransitioningAimState();// 0x27b2230
	bool OwnerIsSwimming();// 0x27b2200
	bool OwnerIsSprinting();// 0x27b21d0
	bool OwnerIsReloadingAnyWeapon();// 0x27b21a0
	bool OwnerIsMovingOnGround();// 0x27b2170
	bool OwnerIsLocallyViewed();// 0x27b2140
	bool OwnerIsFreeFalling();// 0x27b2110
	bool OwnerIsFiringMeleeWeapon();// 0x27b20e0
	bool OwnerIsDowned();// 0x27b20b0
	bool OwnerIsAlive();// 0x27b2080
	bool OwnerHasAmmo();// 0x27b2050
	float OnStartRetrieving(enum PreviousState);// 0x27b1fc0
	float OnStartReloadCooldown(enum PreviousState);// 0x27b1f30
	float OnStartPreReload(enum PreviousState);// 0x27b1ea0
	float OnStartPreFire(enum PreviousState);// 0x27b1e10
	float OnStartPostReload(enum PreviousState);// 0x27b1d80
	float OnStartPostFire(enum PreviousState);// 0x27b1cf0
	void OnStartInactive(enum PreviousState);// 0x1f15ed0
	float OnStartHolstering(enum PreviousState);// 0x27b1c60
	float OnStartCooldown(enum PreviousState);// 0x27b1bd0
	float OnStartBuildup(enum PreviousState);// 0x27b1b40
	void OnRep_WeaponState();// 0x27b1b20
	void OnRep_WeaponAsset();// 0x27b1b00
	void OnRep_AuxiliaryWeaponInfo();// 0x27b1ae0
	void OnRep_AutoSwapOutWeaponId();// 0x27b1ac0
	void OnRep_Ammo();// 0xd77fe0
	void OnPostMantleLockoutEnd();// 0x27b1aa0
	void OnOwnerMovementModeChangedNative(byte OldMode, byte OldCustomMode, byte NewMode, byte NewCustomMode);// 0x27b1960
	void OnOwnerMovementModeChanged(byte OldMode, byte OldCustomMode, byte NewMode, byte NewCustomMode);// 0x2cbecb0
	void OnEndRetrieving(enum NextState);// 0x27b18e0
	void OnEndReloadCooldown(enum NewState);// 0x27b1860
	void OnEndPreReload(enum NextState);// 0x27b17e0
	void OnEndPreFire(enum NextState);// 0x27b1760
	void OnEndPostReload(enum NextState);// 0x27b16e0
	void OnEndPostFire(enum NextState);// 0x27b1660
	void OnEndInactive(enum NextState);// 0x1f15f50
	void OnEndIdleState(enum NextState);// 0x27b15e0
	void OnEndHolstering(enum NextState);// 0x27b1560
	void OnEndCooldown(enum NextState);// 0x27b14e0
	void OnEndBuildup(enum NextState);// 0x27b1460
	void OnDecayFireRateTimerElapsed();// 0x27b1440
	void OnBeginIdleState(enum PreviousState);// 0x27b13c0
	float ModifyDamageDealt(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor);// 0x27b11f0
	bool IsRetrieving();// 0x27b11c0
	bool IsReloading();// 0x27b1190
	bool IsInSprintRecovery();// 0x27b1160
	bool IsInReloadingLoop();// 0x27b1130
	bool IsInFiringLoop();// 0x27b1100
	bool IsInDodgeRollRecovery();// 0x27b10d0
	bool IsHolstering();// 0x27b10a0
	bool IsFiring();// 0x27b1070
	bool IsExhausted();// 0x27b1040
	bool IsEquippedMelee();// 0x27b1010
	bool IsEquippedMainWeapon();// 0x27b0fe0
	bool IsEquippedGrenade();// 0x27b0fb0
	bool IsCooking();// 0x27b0f80
	bool IsClipFull();// 0x27b0f50
	bool IsClipEmpty();// 0x27b0f20
	bool IsActiveWeapon();// 0x27b0ef0
	void InterruptFromInstantReloadInternal();// 0x1ef2d10
	void InterruptFromInstantReload();// 0x27b0ed0
	bool InstantReload(bool bBonusAmmo);// 0x27b0e40
	bool HasAttachment(const KSWeaponAttachmentInstance* InAttachment);// 0x27b0db0
	void HandleOnFullyCharged();// 0x27b0d90
	void HandleOnChargeConsumed();// 0x27b0d70
	void HandleExhausted();// 0x1f129c0
	enum GetWeaponState();// 0x27b0d50
	KSWeaponComponent* GetWeaponComponent();// 0x27b0d20
	KSWeaponAsset* GetWeaponAsset();// 0x27b0cf0
	int GetShotPenetrationCount();// 0x27b0cc0
	int GetReserveBonusAmmo(bool bWithDefaultAmmoBonus);// 0x27b0c30
	float GetReloadCooldownTime();// 0x27b0c00
	interface classNone GetRechargeMethodInstance();// 0x27b0bc0
	float GetPreReloadTime();// 0x27b0b90
	float GetPostReloadTime();// 0x27b0b60
	float GetMovementAccuracyPenalty();// 0x27b0b30
	float GetMaxHipFireAccuracy();// 0x27b0b00
	float GetMaxFiringAccuracyLoss();// 0x27b0ad0
	float GetMaxFiringAccuracyGain();// 0x27b0aa0
	float GetMaxAimedFiringAccuracyGain();// 0x27b0a70
	float GetMaxAimedAccuracy();// 0x27b0a40
	float GetLimbDamageAmount();// 0x27b0a10
	KSPlayerState* GetKSPlayerStateInstigator();// 0x26a1790
	KSPlayerState* GetKSPlayerState();// 0x27b09e0
	float GetInAirAccuracyModifier();// 0x27b09b0
	Actor* GetHiddenInteractable();// 0x27b0990
	float GetHeadDamageAmount();// 0x27b0960
	float GetDefaultAimTransitionTime();// 0x27b0930
	Controller* GetDamageInstigator();// 0x27b0900
	float GetDamageFalloffRangeScaler();// 0x27b08d0
	float GetDamageFalloffRangeExtender();// 0x27b08a0
	float GetCurrentSpeedModifier();// 0x27b0860
	float GetCrouchAccuracyModifier();// 0x27b0830
	int GetClipSize();// 0x27b0800
	KSCharacter* GetCharacterOwner();// 0x26a1ff0
	bool GetCanUseOffGround();// 0x27b07d0
	void GetCalculatedCameraYawLimits(out float MinYaw, out float MaxYaw);// 0x27b06f0
	void GetCalculatedCameraPitchLimits(out float MinPitch, out float MaxPitch);// 0x27b0610
	float GetBaseDamageAmount();// 0x27b05e0
	float GetBaseAccuracy();// 0x27b05b0
	void GetAttachments(out KSWeaponAttachment*[] OutWeaponAttachments);// 0x27b0500
	void GetAttachmentInstances(out KSWeaponAttachmentInstance*[] OutWeaponAttachmentInstances);// 0x27b0450
	KSWeaponAttachmentInstance* GetAttachment(out const GameplayTag InAttachPoint);// 0x27b03b0
	enum GetAmmoType();// 0x27b0380
	int GetAmmoInOwnerInventory();// 0x27b0350
	int GetAmmoInClip();// 0x27b0320
	float GetAimOverShoulderAccuracyModifier();// 0x27b02f0
	float GetAimDownSightsTransitionTime();// 0x27b02c0
	float GetAimDownSightsFOV();// 0x27b0290
	float GetAccuracyReturnRate();// 0x27b0260
	float GetAccuracyReturnDelay();// 0x27b0230
	float GetAccuracyLossPerShot();// 0x27b0200
	float GetAccuracyGainPerShot();// 0x27b01d0
	float GetAccuracyDecayRate();// 0x27b01a0
	void FireWeapon();// 0x1f12cc0
	void EndState(enum NextState);// 0x27b0120
	void ConsumePendingFire();// 0x27b0100
	int ConsumeAmmo();// 0x275bd20
	void ClientUpdateChargeMethodValues(float Timestamp, float MaxCharge, float CurrentCharge);// 0x27afff0
	void ClientStateChangeRejected(uint16 nRequestId, enum RestoreState);// 0x27aff20
	void ClientStateChangeAccepted(uint16 nRequestId);// 0x27afe90
	void ClientSetVariableFireRateState(enum State, float Timestamp, float PostFireTime);// 0x27afd80
	void ClientRecoverSeedMisalignment(uint16 RequestID, RandomStream ServerStream);// 0x27afcb0
	void ClientNotifyRecoveryFinish();// 0x1ef40d0
	void ClientInstantReload();// 0x1f12360
	void ClientFullyCharged(float Timestamp, float CurrentCharge);// 0x27afbe0
	void ClientForceUpdateAmmoInClip(int NewAmmo, bool bBonusAmmo);// 0x27afb10
	void ClientForceIdleFromFire();// 0x1f2bad0
	void ClientFixLastReload(uint16 RequestID, int InAmmoInClip);// 0x27afa40
	void ClientFireWeaponRejected(uint16 nRequestId);// 0x27af9b0
	void ClientChargeConsumed(float Timestamp, float CurrentCharge);// 0x27af8e0
	void CheckExhausted();// 0x27af8c0
	bool CheckDeathShotForgiveness();// 0x27af890
	bool CanUseAnAimStateNow();// 0x27af830
	bool CanToggleOutOfAimDownSightsNow();// 0x27af800
	bool CanToggleIntoAimDownSightsNow();// 0x27af7d0
	bool CanStartReloadNow();// 0x27af7a0
	bool CanStartFireNow();// 0x27af770
	bool CanRetrieveNow();// 0x26c0650
	bool CanReloadNowCommon();// 0x26c4180
	bool CanRefireNow();// 0x27af740
	bool CanReceiveAttachment(const KSWeaponAttachment* InAttachment, out GameplayTagContainer AvailableAttachPoints);// 0x27af620
	bool CanInteractWith(Actor* InteractableTarget);// 0x2cbecb0
	bool CanHolsterNow();// 0x27af5f0
	bool CanFireNowCommon();// 0x27af5c0
	bool CanEverReload();// 0x27af590
	bool CanEverAimOverShoulder();// 0x27af560
	bool CanEverAimDownSights();// 0x27af530
	bool CanEverAimAlternate();// 0x27af500
	bool CanDropNow();// 0x27af4d0
	bool CanCookNow();// 0x27af4a0
	bool CanContinueReloadNow();// 0x27af470
	bool CancelHolstering();// 0x27af860
	bool CanBeSwappedTo(bool bByForce);// 0x27af3d0
	bool CanBeSwappedFrom();// 0x27af3a0
	bool CanBeInterruptedNow();// 0x27af370
	float CalculateDamageFromHitInfo(out const HitResult HitInfo);// 0x27af2a0
	float CalculateDamageFalloffFromHitResults(out const HitResult HitInfo);// 0x27af1d0
	float CalculateDamageFalloffFromDistance(float Distance);// 0x27af140
	void BeginState(enum PreviousState);// 0x27af0c0
	void AltFireInitiated();// 0x1f12200
	void AltFireEnded();// 0x1f2bab0
	bool AllowZiplineRightNow();// 0x275c9e0
	bool AllowSprintingRightNow();// 0x27af090
	bool AllowDodgeRollRightNow();// 0x275c8d0
	void AimTransitionComplete(enum NewAimState);// 0x27af010
	int AddAmmoDirectlyToClip(int AddedAmmo, bool bBonusAmmo);// 0x27aef50
	bool AbortReload();// 0x27aef20
	void AbortFire();// 0x1f12920

--------------------------------
Class: KSEquipment.Info.Actor.Object
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	KSEquipRepInfo EquipInfo;//[Offset: 0x224, Size: 1]
	interface class None* EquipmentManagerOwner;//[Offset: 0x250, Size: 1]
	KSEquipmentManagerComponent* EquipmentManagerComponent;//[Offset: 0x260, Size: 1]
	GiveItemParameters GiveParameters;//[Offset: 0x280, Size: 1]
	uint16 EquipmentId;//[Offset: 0x2b0, Size: 1]
	KSEquipmentCosmeticComponent* EquipmentCosmeticComponent;//[Offset: 0x2b8, Size: 1]
	MulticastInlineDelegateProperty OnCosmeticComponentCreated;//[Size: 1]
	void Unequip(bool bLocal, bool bWillReequip);// 0x2699990
	bool SetEquipPoint(out const GameplayTag InEquipPoint);// 0x2699840
	bool RequiresAnEquipSlot();// 0x26997f0
	void OnUnequipped(bool bWillReequip);// 0x2699540
	void OnRep_GiveParameters();// 0x1efdc20
	void OnRep_EquipPoint();// 0x1ef4dd0
	void OnRep_EquipmentId();// 0x2699420
	void OnEquipped();// 0x1eef160
	bool IsInitialized();// 0x2699350
	bool IsInAction();// 0x2699320
	bool IsEquipped();// 0x26992e0
	KSItem* GetKSItem();// 0x26990e0
	GiveItemParameters GetGiveParameters();// 0x2698f20
	GameplayTag GetEquipPoint();// 0x2698eb0
	uint16 GetEquipmentId();// 0x2698ef0
	KSEquipmentCosmeticComponent* GetCosmeticComponent();// 0xf98a00
	bool EquipNoPoint();// 0x2698bf0
	void Drop();// 0x2698990

--------------------------------
Class: GiveItemParameters
	enum ItemSource;//[Offset: 0x0, Size: 1]
	GameplayTag PreferredEquipPoint;//[Offset: 0x4, Size: 1]
	int OriginalOwnerId;//[Offset: 0xc, Size: 1]
	int ObjectiveId;//[Offset: 0x10, Size: 1]
	int Price;//[Offset: 0x14, Size: 1]
	bool bActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSEquipmentCosmeticComponent.ActorComponent.Object
	bool bHasBeenUnequipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	interface class None* EquipmentContainerOwner;//[Offset: 0xb8, Size: 1]
	KSEquipmentId EquipmentId;//[Offset: 0xc8, Size: 1]
	KSEquipmentId AuthorityEquipmentId;//[Offset: 0xcc, Size: 1]
	GameplayTag EquipPoint;//[Offset: 0xd0, Size: 1]
	bool bNoEquipPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	interface class None* SkinTagAssetOwner;//[Offset: 0xe0, Size: 1]
	KSCharacter* CharacterOwner;//[Offset: 0xf8, Size: 1]
	bool bPropSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	void OnRep_EquipPoint();// 0x2691420
	void OnRep_EquipmentId();// 0x269d1a0
	bool IsOwnerDeadOrDestroyed();// 0x269cf60
	bool IsLocallyViewed();// 0x269ce40
	bool IsLocallyManaged();// 0x269ce10
	bool IsInAction();// 0x269cdb0
	bool IsAPropSpawner();// 0x269ca60
	GameplayTag GetEquipPoint();// 0x2688820
	KSCharacterAnimInst* GetCharAnimInstance();// 0x269bf80
	KSCharacter* GetCharacterOwner();// 0x269bfe0
	SkeletalMeshComponent* GetCharacterMesh();// 0x269bfb0
	void BlueprintOwnerSkinTagContainerChanged();// 0x2cbecb0

--------------------------------
Class: KSCharacterAnimInst.KSCharacterAnimInstBase.KSAnimInstance.SkinnedAnimInstance.AnimInstance.Object
	float GadgetAdditiveRetrieveBlendTime;//[Offset: 0x550, Size: 1]
	float GadgetAdditiveThrowBlendTime;//[Offset: 0x554, Size: 1]
	bool bMountedWeaponActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	bool bMountedOnCoverActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 1]
	float MountedWeaponTargetHeight;//[Offset: 0x55c, Size: 1]
	float MountedWeaponModifiedAimPitch;//[Offset: 0x560, Size: 1]
	Vector MountedWeaponMountLocation;//[Offset: 0x564, Size: 1]
	Rotator MountedWeaponMountRotation;//[Offset: 0x570, Size: 1]
	bool bEmoteMontagePlayingGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool bEmoteMontagePlayingLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 1]
	float EmoteMontageGlobalWeight;//[Offset: 0x580, Size: 1]
	float EmoteMontageLocalWeight;//[Offset: 0x584, Size: 1]
	FName EmoteSlotName;//[Offset: 0x588, Size: 1]
	int EmotePropRandomizerStoredInt;//[Offset: 0x590, Size: 1]
	bool bEmotePropRandomizerStaticSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool bEmotePropRandomizerSkeletalSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	float EmoteFastBlendMultiplier;//[Offset: 0x598, Size: 1]
	float EmoteSlowBlendMultiplier;//[Offset: 0x59c, Size: 1]
	bool bSprayIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	int CurrentMeshLOD;//[Offset: 0x5a4, Size: 1]
	float BodyLean;//[Offset: 0x5a8, Size: 1]
	Rotator BodyLeanRotator;//[Offset: 0x5ac, Size: 1]
	Rotator HeadLeanRotator;//[Offset: 0x5b8, Size: 1]
	bool bEnableAnimMirroring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	bool bCanTransitionDirections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 1]
	bool bEnableMovementImprovements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	bool bEnableDynamicLobbyPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 1]
	float SprintImpulseAmount;//[Offset: 0x5d0, Size: 1]
	Vector2D SprintLeftRightBodyLeanRange;//[Offset: 0x5d4, Size: 1]
	float ForwardRotatePostMirror;//[Offset: 0x5dc, Size: 1]
	float RightRotatePostMirror;//[Offset: 0x5e0, Size: 1]
	float BackRotatePostMirror;//[Offset: 0x5e4, Size: 1]
	float LeftRotatePostMirror;//[Offset: 0x5e8, Size: 1]
	Vector ForwardCrouchPelvicVector;//[Offset: 0x5ec, Size: 1]
	Vector ForwardCrouchFeetIKVector;//[Offset: 0x5f8, Size: 1]
	Vector BackCrouchPelvicVector;//[Offset: 0x604, Size: 1]
	Vector BackCrouchFeetIKVector;//[Offset: 0x610, Size: 1]
	Vector LeftCrouchPelvicVector;//[Offset: 0x61c, Size: 1]
	Vector LeftCrouchFeetIKVector;//[Offset: 0x628, Size: 1]
	Vector RightCrouchPelvicVector;//[Offset: 0x634, Size: 1]
	Vector RightCrouchFeetIKVector;//[Offset: 0x640, Size: 1]
	float ForwardCrouchPelvicOffset;//[Offset: 0x64c, Size: 1]
	float ForwardCrouchFeetIKOffset;//[Offset: 0x650, Size: 1]
	float BackCrouchPelvicOffset;//[Offset: 0x654, Size: 1]
	float BackCrouchFeetIKOffset;//[Offset: 0x658, Size: 1]
	float LeftCrouchPelvicOffset;//[Offset: 0x65c, Size: 1]
	float LeftCrouchFeetIKOffset;//[Offset: 0x660, Size: 1]
	float RightCrouchPelvicOffset;//[Offset: 0x664, Size: 1]
	float RightCrouchFeetIKOffset;//[Offset: 0x668, Size: 1]
	float CurrentAccelVectorLength;//[Offset: 0x66c, Size: 1]
	float MaxSlowWalkSpeed;//[Offset: 0x670, Size: 1]
	float MaxWalkSpeed;//[Offset: 0x674, Size: 1]
	float MaxADSWalkSpeed;//[Offset: 0x678, Size: 1]
	float MaxSprintSpeed;//[Offset: 0x67c, Size: 1]
	float MaxCrouchSpeed;//[Offset: 0x680, Size: 1]
	float MaxADSCrouchSpeed;//[Offset: 0x684, Size: 1]
	bool bShouldTransitionADSCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x688, Size: 1]
	bool bDoCheckFirstStepCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	float FirstStepTransitionAlpha;//[Offset: 0x690, Size: 1]
	float SpeedWarpingAlpha;//[Offset: 0x694, Size: 1]
	float SprintAnimPlayRate;//[Offset: 0x698, Size: 1]
	float ParachuteMovementPitch;//[Offset: 0x69c, Size: 1]
	float ParachuteMovementYaw;//[Offset: 0x6a0, Size: 1]
	float ParachuteMovementForward;//[Offset: 0x6a4, Size: 1]
	float ParachuteMovementLateral;//[Offset: 0x6a8, Size: 1]
	bool bSkydiveTurnOverridesStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 1]
	bool bIsNoseDiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ad, Size: 1]
	float ParachuteYawInterpSpeed;//[Offset: 0x6b0, Size: 1]
	float ParachutePitchInterpSpeed;//[Offset: 0x6b4, Size: 1]
	float ParachuteForwardInterpSpeed;//[Offset: 0x6b8, Size: 1]
	float ParachuteLateralInterpSpeed;//[Offset: 0x6bc, Size: 1]
	float ParachuteForwardThreshold;//[Offset: 0x6c0, Size: 1]
	bool bParachuteReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	float ParachuteYawRotationFactor;//[Offset: 0x6c8, Size: 1]
	Vector LastFreeFallMovementVector;//[Offset: 0x6cc, Size: 1]
	FloatHitSpringState HitSpringRollState;//[Offset: 0x6d8, Size: 1]
	FloatHitSpringState HitSpringPitchState;//[Offset: 0x6e0, Size: 1]
	FloatHitSpringState HitSpringYawState;//[Offset: 0x6e8, Size: 1]
	float HitRotationAmountRoll;//[Offset: 0x6f0, Size: 1]
	float HitRotationAmountPitch;//[Offset: 0x6f4, Size: 1]
	float HitRotationAmountYaw;//[Offset: 0x6f8, Size: 1]
	float HitRotationPitchMax;//[Offset: 0x6fc, Size: 1]
	float HitRotationRollMax;//[Offset: 0x700, Size: 1]
	float HitRotationYawMax;//[Offset: 0x704, Size: 1]
	Vector PelvisHitOffset;//[Offset: 0x708, Size: 1]
	Rotator SpineHitOffset;//[Offset: 0x714, Size: 1]
	Rotator NeckHitOffset;//[Offset: 0x720, Size: 1]
	Rotator ArmHitOffset;//[Offset: 0x72c, Size: 1]
	float ADSHitReactionBlend;//[Offset: 0x738, Size: 1]
	float AOSHitReactionBlend;//[Offset: 0x73c, Size: 1]
	float HipfireHitReactionBlend;//[Offset: 0x740, Size: 1]
	float SimClientHitReactionBlend;//[Offset: 0x744, Size: 1]
	float CurrentHitReactionBlend;//[Offset: 0x748, Size: 1]
	float SpineFireRotationLimit;//[Offset: 0x74c, Size: 1]
	float NeckFireRotationLimit;//[Offset: 0x750, Size: 1]
	float ClavicleFireRotationLimit;//[Offset: 0x754, Size: 1]
	float UpperArmFireRotationPitchLimit;//[Offset: 0x758, Size: 1]
	float UpperArmFireRotationYawLimit;//[Offset: 0x75c, Size: 1]
	float ForearmFireRotationLimit;//[Offset: 0x760, Size: 1]
	FloatHitSpringState SpineFireSpringState;//[Offset: 0x764, Size: 1]
	FloatHitSpringState NeckFireSpringState;//[Offset: 0x76c, Size: 1]
	FloatHitSpringState ClavicleFireSpringState;//[Offset: 0x774, Size: 1]
	FloatHitSpringState UpperArmFireSpringState;//[Offset: 0x77c, Size: 1]
	FloatHitSpringState UpperArmFireYawSpringState;//[Offset: 0x784, Size: 1]
	FloatHitSpringState ForearmFireSpringState;//[Offset: 0x78c, Size: 1]
	float SpineFireRotationAmountPitch;//[Offset: 0x794, Size: 1]
	float NeckFireRotationAmountPitch;//[Offset: 0x798, Size: 1]
	float ClavicleFireRotationAmountYaw;//[Offset: 0x79c, Size: 1]
	float UpperArmFireRotationAmountPitch;//[Offset: 0x7a0, Size: 1]
	float UpperArmFireRotationAmountYaw;//[Offset: 0x7a4, Size: 1]
	float ForarmFireRotationAmountPitch;//[Offset: 0x7a8, Size: 1]
	Rotator SpineFireOffset;//[Offset: 0x7ac, Size: 1]
	Rotator NeckFireOffset;//[Offset: 0x7b8, Size: 1]
	Rotator ClavicleFireOffset;//[Offset: 0x7c4, Size: 1]
	Rotator UpperArmFireOffset;//[Offset: 0x7d0, Size: 1]
	Rotator ForearmFireOffset;//[Offset: 0x7dc, Size: 1]
	float WeaponFireAlpha;//[Offset: 0x7e8, Size: 1]
	float WeaponAdditiveAlpha;//[Offset: 0x7ec, Size: 1]
	RecoilProfile CurrentRecoilProfile;//[Offset: 0x7f0, Size: 1]
	int FireImpulseCounter;//[Offset: 0x9dc, Size: 1]
	bool bIsRecoiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 1]
	bool bBypassRecoiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 1]
	<FName,KSCharacterAnimInst*> SubAnimInstances;//[Offset: 0x9e8, Size: 1]
	bool bCanSwitchStartAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	bool bTriggerCustomPivot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa39, Size: 1]
	bool bActionEnablesPropLockAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3a, Size: 1]
	bool bActionDisablesLeftHandIKAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3b, Size: 1]
	bool bActionDisablesRightHandIKAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 1]
	bool bActionDisablesLeftHandGripOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3d, Size: 1]
	bool bActionDisablesRightHandGripOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3e, Size: 1]
	bool bForceDisableLHIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3f, Size: 1]
	bool bForceDisableRHIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 1]
	bool bUseRightHandGadgetOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa41, Size: 1]
	bool bShouldUseFootIKDuringFreefall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa42, Size: 1]
	float ADSRollValue;//[Offset: 0xa44, Size: 1]
	Vector ADSBumpValue;//[Offset: 0xa48, Size: 1]
	bool bWantsNonComOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 1]
	bool bIsWeaponNonComOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa55, Size: 1]
	bool bSkinUseNonComOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa56, Size: 1]
	float EngHeadAdditiveAlpha;//[Offset: 0xa5c, Size: 1]
	bool bTestGadgetAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 1]
	bool GadgetStartedRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa61, Size: 1]
	bool GadgetFinishedRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa62, Size: 1]
	bool GadgetStartedThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa63, Size: 1]
	bool GadgetFinishedThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa64, Size: 1]
	float HandIKAdditiveAlpha;//[Offset: 0xa68, Size: 1]
	float LeftHandIKAlpha;//[Offset: 0xa6c, Size: 1]
	float LeftHandIKAlphaTarget;//[Offset: 0xa70, Size: 1]
	float LeftHandIKBlendSpeed;//[Offset: 0xa74, Size: 1]
	float RightHandIKAlpha;//[Offset: 0xa78, Size: 1]
	float RightHandIKAlphaTarget;//[Offset: 0xa7c, Size: 1]
	float RightHandIKBlendSpeed;//[Offset: 0xa80, Size: 1]
	float SlowIKBlendSpeed;//[Offset: 0xa84, Size: 1]
	float MediumIKBlendSpeed;//[Offset: 0xa88, Size: 1]
	float FastIKBlendSpeed;//[Offset: 0xa8c, Size: 1]
	float UplineIKAlpha;//[Offset: 0xa90, Size: 1]
	float UplineIKAlphaTarget;//[Offset: 0xa94, Size: 1]
	int NextLeftHandIKForceRequestId;//[Offset: 0xa98, Size: 1]
	bool bLeftHandIKForceOffFromRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	<int> LeftHandIkForceOffRequests;//[Offset: 0xaa0, Size: 1]
	bool bLeftHandIKOffFromMainInstNotifyStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	float FootIKAlpha;//[Offset: 0xb48, Size: 1]
	float FootIKAlphaTarget;//[Offset: 0xb4c, Size: 1]
	MulticastInlineDelegateProperty OnBeginZipline;//[Size: 1]
	MulticastInlineDelegateProperty OnEndZipline;//[Size: 1]
	Vector ZiplineRootOffset;//[Offset: 0xb70, Size: 1]
	Vector AppliedADSRootTranslation;//[Offset: 0xb7c, Size: 1]
	Vector DefaultADSRootTranslation;//[Offset: 0xb88, Size: 1]
	bool ForceZiplineMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 1]
	bool ApplyAimstoZiplineMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb95, Size: 1]
	bool ZiplineMontageLHIKOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb96, Size: 1]
	float ZiplineMontageLHIKAlpha;//[Offset: 0xb98, Size: 1]
	bool ActionPreventsZiplineIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9c, Size: 1]
	bool ForceZiplineLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9d, Size: 1]
	enum LocomotionPivotDirection;//[Offset: 0xb9e, Size: 1]
	float MovementDirectionRotateOnStartOrStop;//[Offset: 0xba0, Size: 1]
	bool bUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba4, Size: 1]
	bool bEngUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba5, Size: 1]
	bool bComUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba6, Size: 1]
	bool bNonComUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba7, Size: 1]
	bool bJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xba8, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xba8, Size: 1]
	bool bDisableUpperBodyLands;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xba8, Size: 1]
	bool bInFreeFall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba8, Size: 1]
	bool bReadyForFreeFall;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba8, Size: 1]
	bool bVaulting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba8, Size: 1]
	bool bIsMantling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba8, Size: 1]
	bool bMantleIsVault;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba8, Size: 1]
	bool bCanInterruptMantle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xba9, Size: 1]
	float TotalVaultDuration;//[Offset: 0xbac, Size: 1]
	AnimSequence* CurrentMantleSequence;//[Offset: 0xbb0, Size: 1]
	MantleConfig CurrentMantleConfig;//[Offset: 0xbb8, Size: 1]
	float VaultStartTime;//[Offset: 0xc60, Size: 1]
	float PreVaultWorldHeight;//[Offset: 0xc64, Size: 1]
	float CurrentVaultTime;//[Offset: 0xc68, Size: 1]
	InterpCurveFloat VaultTimeScaleCurve;//[Offset: 0xc70, Size: 1]
	InterpCurveFloat VaultScaledVertCurve;//[Offset: 0xc88, Size: 1]
	Vector MantleGrabLocation;//[Offset: 0xca0, Size: 1]
	float MantleDistanceToTop;//[Offset: 0xcac, Size: 1]
	Vector MantleTowardsWallDir;//[Offset: 0xcb0, Size: 1]
	bool bMantleIKLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 1]
	bool bMantleIKRightHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbd, Size: 1]
	float MantleIKLeftHandAlpha;//[Offset: 0xcc0, Size: 1]
	float MantleIKRightHandAlpha;//[Offset: 0xcc4, Size: 1]
	Vector MantleIKLeftHandLocation;//[Offset: 0xcc8, Size: 1]
	Vector MantleIKRightHandLocation;//[Offset: 0xcd4, Size: 1]
	bool bDodgeRolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xce0, Size: 1]
	float DodgeRollDuration;//[Offset: 0xce4, Size: 1]
	FName DodgeRollDirection;//[Offset: 0xce8, Size: 1]
	bool bIsInPowerSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcf0, Size: 1]
	bool bAbilityMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcf0, Size: 1]
	bool bZipLining;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcf0, Size: 1]
	bool bZipLineBracing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcf0, Size: 1]
	bool bZipLineEnding;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xcf0, Size: 1]
	float ZiplineEndBlendtime;//[Offset: 0xcf4, Size: 1]
	float ZiplineEndOffsetBlendtime;//[Offset: 0xcf8, Size: 1]
	bool bZipLineIsUpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcfc, Size: 1]
	bool bZipLineIntro;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcfc, Size: 1]
	bool bStunned;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcfc, Size: 1]
	bool bIsBlinded;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcfc, Size: 1]
	bool bHardLand;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xcfc, Size: 1]
	bool bCrouching;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xcfc, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xcfc, Size: 1]
	bool bWasCrouchedBeforeRoll;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xcfc, Size: 1]
	bool bSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcfd, Size: 1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcfd, Size: 1]
	AnimSequence* VehicleIdle;//[Offset: 0xd00, Size: 1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd08, Size: 1]
	bool bIsSubmerged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd08, Size: 1]
	Rotator SwimSpineRotation;//[Offset: 0xd0c, Size: 1]
	float AdditiveLandsAlphaMin;//[Offset: 0xd18, Size: 1]
	float AdditiveLandsAlphaMax;//[Offset: 0xd1c, Size: 1]
	bool bCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd20, Size: 1]
	bool bDowned;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd20, Size: 1]
	bool bKnockedBack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd20, Size: 1]
	Rotator DownedRootFacing;//[Offset: 0xd24, Size: 1]
	MulticastInlineDelegateProperty OnGoDown;//[Size: 1]
	bool bActivatingMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd40, Size: 1]
	bool bAnyModsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd40, Size: 1]
	bool bEnableSprintAdditiveForAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44, Size: 1]
	KSPlayerModInstance* DashMod;//[Offset: 0xd48, Size: 1]
	FName InteractionState;//[Offset: 0xd50, Size: 1]
	bool bIsReviving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58, Size: 1]
	float IsInVehicleAlpha;//[Offset: 0xd5c, Size: 1]
	float IsInVehicleInverseAlpha;//[Offset: 0xd60, Size: 1]
	bool bCachedCameraLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd64, Size: 1]
	bool bCachedCameraLockoutCooldown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd64, Size: 1]
	float CachedCameraLockoutAlpha;//[Offset: 0xd6c, Size: 1]
	float AdditiveLandsAlpha;//[Offset: 0xd70, Size: 1]
	bool bDownedCosmetic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd74, Size: 1]
	bool bWasRecentlyRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd75, Size: 1]
	bool bHasManuallyCanceledDownedCosmetic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd76, Size: 1]
	Vector PreviousLocalAccelDirection;//[Offset: 0xd78, Size: 1]
	float FwdBackIntroLean;//[Offset: 0xd84, Size: 1]
	float LeftRightIntroLean;//[Offset: 0xd88, Size: 1]
	float IntroLeanMultiplier;//[Offset: 0xd8c, Size: 1]
	float IntroLeanSpeed;//[Offset: 0xd90, Size: 1]
	float VelocityVsAccelDotProduct;//[Offset: 0xd94, Size: 1]
	Rotator PowerSlideSlopeAngleRotation;//[Offset: 0xd98, Size: 1]
	Vector FootHeightAdjustmentOnSlope;//[Offset: 0xda4, Size: 1]
	Vector PelvisAdjustmentOnSlope;//[Offset: 0xdb0, Size: 1]
	float LocomotionStopBufferTime;//[Offset: 0xdbc, Size: 1]
	float LocomotionStopBufferExpireTime;//[Offset: 0xdc0, Size: 1]
	bool bSuccessPivotCompleteThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc4, Size: 1]
	bool HasLocomotionPivotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc5, Size: 1]
	bool HasLocomotionPrePivotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc6, Size: 1]
	bool HasLocomotionPostPivotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc7, Size: 1]
	float LocomotionPivotThreshold;//[Offset: 0xdc8, Size: 1]
	Vector LocomotionPivotLocation;//[Offset: 0xdcc, Size: 1]
	Vector CachedLocomotionPivotLocation;//[Offset: 0xdd8, Size: 1]
	float DistFromLocomotionPivot;//[Offset: 0xde4, Size: 1]
	float DistFromLocomotionPivotMax;//[Offset: 0xde8, Size: 1]
	Vector LocomotionPrePivotLocation;//[Offset: 0xdec, Size: 1]
	float DistFromLocomotionPrePivot;//[Offset: 0xdf8, Size: 1]
	Vector LocomotionPostPivotLocation;//[Offset: 0xdfc, Size: 1]
	float DistFromLocomotionPostPivot;//[Offset: 0xe08, Size: 1]
	bool bLocomotionStartUsesPivotDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0c, Size: 1]
	bool IsSprintJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0d, Size: 1]
	bool IsShortJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0e, Size: 1]
	float ShortJumpThreshold;//[Offset: 0xe10, Size: 1]
	float PowerSlideProgress;//[Offset: 0xe30, Size: 1]
	float PowerSlideAngle;//[Offset: 0xe34, Size: 1]
	Rotator PowerSlideRotation;//[Offset: 0xe38, Size: 1]
	enum PowerSlideEndReason;//[Offset: 0xe44, Size: 1]
	bool bIsPowerSlidingOnSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe45, Size: 1]
	bool bIsLocallyViewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe46, Size: 1]
	float DesiredComponentYaw;//[Offset: 0xe48, Size: 1]
	bool bTurnInPlaceInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4c, Size: 1]
	float TurnInPlaceTurnValue;//[Offset: 0xe50, Size: 1]
	float CurrentTurnInPlaceThreshold;//[Offset: 0xe54, Size: 1]
	enum LastTurnInPlaceAnimationVariant;//[Offset: 0xe58, Size: 1]
	float TurnInPlaceMinThreshold;//[Offset: 0xe5c, Size: 1]
	float TurnInPlaceMaxOffset;//[Offset: 0xe60, Size: 1]
	float TurnInPlaceRetriggerMinThreshold;//[Offset: 0xe64, Size: 1]
	float TurnInPlaceRecoverySpeedWithAcceleration;//[Offset: 0xe68, Size: 1]
	float TurnInPlaceRecoverySpeed90;//[Offset: 0xe6c, Size: 1]
	float TurnInPlaceRecoverySpeed180;//[Offset: 0xe70, Size: 1]
	Rotator AppliedTurnInPlaceRotator;//[Offset: 0xe74, Size: 1]
	Rotator WorldTurnInPlaceRotator;//[Offset: 0xe80, Size: 1]
	bool bDisableTurnInPlaceCounterRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9c, Size: 1]
	bool bEnableTurnInPlaceForAOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9d, Size: 1]
	float EnableCounterRotateBlendTime;//[Offset: 0xea0, Size: 1]
	float DisableCounterRotateBlendTime;//[Offset: 0xea4, Size: 1]
	bool bShouldSplitUpperBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea8, Size: 1]
	bool bForceDisableSplitUpperBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea9, Size: 1]
	bool bEnableSplitUpperBodyForAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeaa, Size: 1]
	bool bDisableUpperBodyTurnInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeab, Size: 1]
	bool bIsLockedToWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeac, Size: 1]
	bool IsLockedToWorldRotationAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xead, Size: 1]
	Rotator LockedWorldRotation;//[Offset: 0xeb0, Size: 1]
	<byte> WorldRotationLockIds;//[Offset: 0xec0, Size: 1]
	byte NextWorldRotationLockId;//[Offset: 0xf10, Size: 1]
	bool bIsAimOverShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf30, Size: 1]
	bool bIsLeavingAOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf31, Size: 1]
	bool bIsAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf32, Size: 1]
	float IsAimDownSightsAlpha;//[Offset: 0xf34, Size: 1]
	bool bIsAimDownSightsFirstPerson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 1]
	float IsAimDownSightsFirstPersonAlpha;//[Offset: 0xf3c, Size: 1]
	bool bIs3PAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf40, Size: 1]
	Rotator PreviousCachedAimRotation;//[Offset: 0xf44, Size: 1]
	Rotator CachedAimRotation;//[Offset: 0xf50, Size: 1]
	Rotator DeltaAimRotation;//[Offset: 0xf5c, Size: 1]
	Rotator ThirdPersonAppliedAimRotator;//[Offset: 0xf68, Size: 1]
	float ThirdPersonAimYaw;//[Offset: 0xf74, Size: 1]
	float ThirdPersonAimYawInverted;//[Offset: 0xf78, Size: 1]
	float ThirdPersonAimYawCosmetic;//[Offset: 0xf7c, Size: 1]
	float ThirdPersonEngagedAimYawCosmetic;//[Offset: 0xf80, Size: 1]
	float ThirdPersonAimPitch;//[Offset: 0xf84, Size: 1]
	float ThirdPersonAimPitchInverted;//[Offset: 0xf88, Size: 1]
	float ThirdPersonAimPitchUpline;//[Offset: 0xf8c, Size: 1]
	float ThirdPersonLean;//[Offset: 0xf90, Size: 1]
	float ThirdPersonFwdLean;//[Offset: 0xf94, Size: 1]
	float ThirdPersonLeanAlpha;//[Offset: 0xf98, Size: 1]
	float ThirdPersonLeanMultiplier;//[Offset: 0xf9c, Size: 1]
	float ComLeanMultiplier;//[Offset: 0xfa0, Size: 1]
	float NonComLeanMultiplier;//[Offset: 0xfa4, Size: 1]
	float EngagedLeanMultiplier;//[Offset: 0xfa8, Size: 1]
	float ThirdPersonLeanSpeed;//[Offset: 0xfac, Size: 1]
	float YawDeltaMinimum;//[Offset: 0xfb0, Size: 1]
	float MinPitchAngle;//[Offset: 0xfb4, Size: 1]
	float MaxPitchAngle;//[Offset: 0xfb8, Size: 1]
	float MinYawAngle;//[Offset: 0xfbc, Size: 1]
	float MaxYawAngle;//[Offset: 0xfc0, Size: 1]
	float NormalYawInterpSpeed;//[Offset: 0xfc4, Size: 1]
	float ZipLineYawInterpSpeed;//[Offset: 0xfc8, Size: 1]
	float ZipLineYawInterpSpeedOver180;//[Offset: 0xfcc, Size: 1]
	float CurrentYawInterpSpeed;//[Offset: 0xfd0, Size: 1]
	float TargetYawInterpSpeed;//[Offset: 0xfd4, Size: 1]
	float NormalYawInterpAcceleration;//[Offset: 0xfd8, Size: 1]
	float ADSBlendToCrouchSlotTime;//[Offset: 0xfdc, Size: 1]
	float ADSBlendToStandingSlotTime;//[Offset: 0xfe0, Size: 1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfe4, Size: 1]
	bool bIsSwitchingWeapon;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfe4, Size: 1]
	bool bIsUsingItem;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfe4, Size: 1]
	bool bIsUsingAbility;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfe4, Size: 1]
	bool bIsRetrievingWeapon;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfe4, Size: 1]
	bool bIsHacking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfe4, Size: 1]
	bool bAttachHandWhileCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfe4, Size: 1]
	bool bAttachHandMelee;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfe4, Size: 1]
	bool bAttachHandWhileIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfe5, Size: 1]
	bool bAttachHandWhileSprinting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfe5, Size: 1]
	bool bAttachHandWhileMoving;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfe5, Size: 1]
	bool bAttachHandWhileZiplining;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfe5, Size: 1]
	bool bAttachRightHandWhileZiplining;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfe5, Size: 1]
	bool bForceAttachHandIfNotNonCom;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfe5, Size: 1]
	bool bAttachRightHand;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfe5, Size: 1]
	bool bWeaponScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfe5, Size: 1]
	bool bRightPropBScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfe6, Size: 1]
	bool bLeftPropBScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfe6, Size: 1]
	bool bAimsDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfe6, Size: 1]
	bool bMantlePlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfe6, Size: 1]
	float LeftPropBScaleAlpha;//[Offset: 0xfe8, Size: 1]
	float RightPropBScaleAlpha;//[Offset: 0xfec, Size: 1]
	float FreeFallAlpha;//[Offset: 0xff0, Size: 1]
	float BlindedAlpha;//[Offset: 0xff4, Size: 1]
	float TabletScaleAlpha;//[Offset: 0xff8, Size: 1]
	float PropLockAlpha;//[Offset: 0xffc, Size: 1]
	float PropLockAlphaTarget;//[Offset: 0x1000, Size: 1]
	float PropLockBlendSpeed;//[Offset: 0x1004, Size: 1]
	float HolsterLockAlpha;//[Offset: 0x1008, Size: 1]
	float LeftHolsterLockAlpha;//[Offset: 0x100c, Size: 1]
	float HeadAccessoryScaleAlpha;//[Offset: 0x1010, Size: 1]
	bool bUseCustomWingsuitIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1014, Size: 1]
	AnimSequenceBase* FreeFallIntroJump;//[Offset: 0x1018, Size: 1]
	AnimSequenceBase* FreeFallIntroRun;//[Offset: 0x1020, Size: 1]
	Rotator DebugDesiredAimDifference;//[Offset: 0x1028, Size: 1]
	bool bUsingZipLineOver180InterpSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1034, Size: 1]
	Rotator FirstPersonAppliedAimRotator;//[Offset: 0x1038, Size: 1]
	Vector FirstPersonAppliedBreathStepTranslation;//[Offset: 0x1044, Size: 1]
	float FirstPersonBreathSpeed;//[Offset: 0x1050, Size: 1]
	float FirstPersonBreathHeight;//[Offset: 0x1054, Size: 1]
	float FirstPersonStepSpeedStanding;//[Offset: 0x1058, Size: 1]
	float FirstPersonStepSpeedCrouching;//[Offset: 0x105c, Size: 1]
	float FirstPersonStepHeight;//[Offset: 0x1060, Size: 1]
	float FirstPersonStepMinSpeed;//[Offset: 0x1064, Size: 1]
	Rotator FirstPersonLaggingAimRotator;//[Offset: 0x1068, Size: 1]
	float Normal1PAimInterpSpeed;//[Offset: 0x1074, Size: 1]
	float CurrentAimPitchSway;//[Offset: 0x1078, Size: 1]
	float CurrentAimPitchSwayOffset;//[Offset: 0x107c, Size: 1]
	float CurrentAimYawSway;//[Offset: 0x1080, Size: 1]
	float CurrentAimYawSwayOffset;//[Offset: 0x1084, Size: 1]
	float NormalLeanAndSwayInterpSpeed;//[Offset: 0x1088, Size: 1]
	float ADSBreathingTime;//[Offset: 0x1098, Size: 1]
	float ADSSteppingTime;//[Offset: 0x109c, Size: 1]
	bool bScaleOutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a0, Size: 1]
	float WeaponScaleAlpha;//[Offset: 0x10a4, Size: 1]
	bool WeaponScaleLeftPropOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 1]
	bool WeaponScaleRightPropOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a9, Size: 1]
	bool bUnarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10aa, Size: 1]
	bool bGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ab, Size: 1]
	bool bMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ac, Size: 1]
	bool bQuickMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ad, Size: 1]
	bool bIsUsingMedPen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ae, Size: 1]
	bool bEnableMeleeLowerBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10af, Size: 1]
	bool bMeleeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	bool bMeleeNoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 1]
	float MeleeLowerBodyDuration;//[Offset: 0x10b4, Size: 1]
	enum MeleeLowerBodyDirection;//[Offset: 0x10b8, Size: 1]
	enum TestCombatState;//[Offset: 0x10b9, Size: 1]
	float TestCombatStateCooldownTime;//[Offset: 0x10bc, Size: 1]
	TimerHandle TestCombatStateCooldownTimer;//[Offset: 0x10c0, Size: 1]
	bool bIsUsingTestLocomotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c8, Size: 1]
	TimerHandle EngHeadAdditiveAlphaTimer;//[Offset: 0x10d0, Size: 1]
	float EngagedBlendTime;//[Offset: 0x10d8, Size: 1]
	float ComBlendTime;//[Offset: 0x10dc, Size: 1]
	float NonComBlendTime;//[Offset: 0x10e0, Size: 1]
	float LeftHandAdditiveReloadOverrideDisableBlendTime;//[Offset: 0x10e4, Size: 1]
	bool bDownedIdleToCrawlLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e8, Size: 1]
	bool bDownedCrawlLoopToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10e9, Size: 1]
	bool bCanBlink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ea, Size: 1]
	bool bIsBlinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10eb, Size: 1]
	bool bBlinkIsClosingEyes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ec, Size: 1]
	bool bIsSlowBlinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ed, Size: 1]
	bool bIsDoubleBlinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ee, Size: 1]
	float EyeBlinkAlpha;//[Offset: 0x10f0, Size: 1]
	float TimeToNextBlink;//[Offset: 0x10f4, Size: 1]
	float MinimumTimeBetweenBlinks;//[Offset: 0x10f8, Size: 1]
	float MaximumTimeBetweenBlinks;//[Offset: 0x10fc, Size: 1]
	float EyeBlinkSpeed;//[Offset: 0x1100, Size: 1]
	float EyeBlinkSpeedSlow;//[Offset: 0x1104, Size: 1]
	float SlowBlinkPercentageChance;//[Offset: 0x1108, Size: 1]
	float DoubleBlinkPercentageChance;//[Offset: 0x110c, Size: 1]
	TimerHandle BlinkTimer;//[Offset: 0x1110, Size: 1]
	enum Emotion;//[Offset: 0x1118, Size: 1]
	float EmotionAnimTime;//[Offset: 0x111c, Size: 1]
	MulticastInlineDelegateProperty OnAnimationEvent;//[Size: 1]
	bool bIsNonComIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1140, Size: 1]
	void UpdateTurnInPlace(float DeltaSeconds);// 0x2669c40
	void UpdatePostMirrorRotateValues();// 0x2669c20
	void UpdateHandIKAdditiveAlpha(float DesiredAlpha);// 0x2669ba0
	void UpdateCachedPivotLocation();// 0x2669b80
	void UnplantRightHand();// 0x2669b60
	void UnplantLeftHand();// 0x2669b40
	void UnhideWeapon();// 0x2669b20
	void UnhideMag(const int WepMeshIndex);// 0x2cbecb0
	void UnhideGadget();// 0x2669b00
	void TryToTriggerTurnInPlaceAnimation(enum AnimationVariant, float DelayTime);// 0x2669a40
	KSCharacterBase* TryGetKSCharacterBase();// 0x2669a10
	void TriggerDisableAims(bool bShouldDisable);// 0x2669980
	void TriggerCustomPivot();// 0x2cbecb0
	void SwitchWeaponNative(KSWeaponComponent* Weapon);// 0x26698f0
	void SwitchWeaponIKNative(KSWeaponComponent* Weapon);// 0x2669860
	void StopFire();// 0xd76f80
	void StopEmote();// 0x2669840
	void StartRevivee();// 0x2cbecb0
	void StartFire();// 0x2669820
	void ShoulderCharge();// 0x2cbecb0
	void SetMaxSpeedValues(KSWeaponAsset* WeaponAsset);// 0x26697a0
	void SetDashMod(KSPlayerModInstance* NewDashMod);// 0x2669720
	void ReviveMesh(AnimMontage* ReviveMontage, bool bIsInAir);// 0x2cbecb0
	void RetrieveEnd();// 0x1f04160
	void RetrieveBegin();// 0x1f03240
	int RequestLeftHandIKForceOff();// 0x26696f0
	bool ReleaseWorldRotationLock(byte InLockId);// 0x2669660
	bool PopLeftHandIKForceOffRequest(int RequestID);// 0x26695d0
	void PlayRecoilProfile(RecoilProfile RecoilProfile);// 0x26694a0
	void LocomotionPrePivot();// 0x2cbecb0
	void LocomotionPivotCheckpoint();// 0x2cbecb0
	void LocomotionPivot(Vector PivotLocation);// 0x2cbecb0
	byte LockToCurrentInWorldRotation(bool bOverrideRotation, Rotator Override);// 0x26693c0
	bool IsPlayingEmote();// 0x2669390
	bool IsLeftHandIKForcedOff();// 0x2669360
	void HideWeapon();// 0x2669340
	void HideMag(const int WepMeshIndex);// 0x2cbecb0
	void HideGadget();// 0x2669320
	static float FloatSpringInterp(float Current, float Target, out FloatHitSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x2669110
	void EventStopSwimming();// 0x2cbecb0
	void EventStopSubmerge();// 0x2cbecb0
	void EventStartSwimming();// 0x2cbecb0
	void EventStartSubmerge();// 0x2cbecb0
	void EventStartInteraction(FName NewInteractState, float NewInteractTime);// 0x2cbecb0
	void EventPlayHitReactionAnimation(FName AttackDirection, bool bWillReturnDamage);// 0x2cbecb0
	void EventEndZipLineEnding();// 0x2cbecb0
	void EventEndZipLineBrace();// 0x2cbecb0
	void EventEndZipLine();// 0x2cbecb0
	void EventEndVault();// 0x2cbecb0
	void EventEndStun();// 0x2cbecb0
	void EventEndPowerSlide(enum EndReason);// 0x2cbecb0
	void EventEndInteraction(FName OldInteractState);// 0x2cbecb0
	void EventEndHardLand();// 0x2cbecb0
	void EventEndActivatingMod();// 0x2cbecb0
	void EventEndAbilityMovement();// 0x2cbecb0
	void EventDoZipLineEnding();// 0x2cbecb0
	void EventDoZipLineBrace();// 0x2cbecb0
	void EventDoZipLine();// 0x2cbecb0
	void EventDoVault(float InMantleHeight, bool bInVault, float InVaultDrop, float InUpDuration, float InAcrossDuration, float InDownDuration, out const FName InMantleName);// 0x2cbecb0
	void EventDoStun();// 0x2cbecb0
	void EventDoPowerSlide();// 0x2cbecb0
	void EventDoHardLandAvoid();// 0x2cbecb0
	void EventDoHardLand();// 0x2cbecb0
	void EventDoGoDown();// 0x2cbecb0
	void EventDoDodgeRoll(float Duration, Vector2D Direction);// 0x2cbecb0
	void EventDoActivatingMod();// 0x2cbecb0
	void EventDoAbilityMovement();// 0x2cbecb0
	void EventActivatedModExpired();// 0x2cbecb0
	void EndRevivee();// 0x2cbecb0
	void EnableAims();// 0x26690f0
	void EmoteMontageLostAllLocalWeight();// 0x2cbecb0
	void EmoteMontageLostAllGlobalWeight();// 0x2cbecb0
	void DropMagFromMultiMesh(const int meshToDropFrom);// 0x2cbecb0
	void DoResetCustomPivot();// 0x2cbecb0
	void DodgeRollExpire();// 0x26690d0
	void DisableAims();// 0x26690b0
	bool CheckCanSpray();// 0x2669080
	bool CheckCanEmote();// 0x2669050
	void CancelDownedCosmetic();// 0x2cbecb0
	void BroadcastOnGoDown();// 0x2669030
	void BroadcastAnimationEvent(FName EventName);// 0x2668fb0
	void BlinkEyes();// 0x2668f90
	void AdditiveRetrieveEnd();// 0x2cbecb0
	void AdditiveRetrieveBegin();// 0x2cbecb0

--------------------------------
Class: KSCharacterAnimInstBase.KSAnimInstance.SkinnedAnimInstance.AnimInstance.Object
	float Speed;//[Offset: 0x348, Size: 1]
	float SpeedXY;//[Offset: 0x34c, Size: 1]
	float SpeedZ;//[Offset: 0x350, Size: 1]
	float Forward;//[Offset: 0x354, Size: 1]
	float Right;//[Offset: 0x358, Size: 1]
	enum MovementDirection;//[Offset: 0x35c, Size: 1]
	float DirectionBlendSpeed;//[Offset: 0x360, Size: 1]
	float DirectionChangedBlendSpeed;//[Offset: 0x364, Size: 1]
	float ForwardRotate;//[Offset: 0x36c, Size: 1]
	float RightRotate;//[Offset: 0x370, Size: 1]
	float BackRotate;//[Offset: 0x374, Size: 1]
	float LeftRotate;//[Offset: 0x378, Size: 1]
	float MovementDirectionRotate;//[Offset: 0x37c, Size: 1]
	Vector2D ForwardRotateInputRange;//[Offset: 0x380, Size: 1]
	Vector2D ForwardRotateOutputRange;//[Offset: 0x388, Size: 1]
	Vector2D RightRotateInputRange;//[Offset: 0x390, Size: 1]
	Vector2D RightRotateOutputRange;//[Offset: 0x398, Size: 1]
	float CurSpeedFraction;//[Offset: 0x3a0, Size: 1]
	float CurMaxSpeed;//[Offset: 0x3a4, Size: 1]
	float CurSpeedScaling;//[Offset: 0x3a8, Size: 1]
	Vector FacingDirection;//[Offset: 0x3ac, Size: 1]
	Vector Velocity;//[Offset: 0x3b8, Size: 1]
	Vector LocalVelocity;//[Offset: 0x3c4, Size: 1]
	Vector LocalRelativeVelocity;//[Offset: 0x3d0, Size: 1]
	Vector SmoothedVelocity;//[Offset: 0x3dc, Size: 1]
	float SmoothedVelocityInterp;//[Offset: 0x3e8, Size: 1]
	float SmoothedVelocitySpeedThreshold;//[Offset: 0x3ec, Size: 1]
	float SmoothedVelocityInterpRate;//[Offset: 0x3f0, Size: 1]
	float SmoothedVelocityInterpRateBelowThreshold;//[Offset: 0x3f4, Size: 1]
	Vector AccelDirection;//[Offset: 0x3f8, Size: 1]
	Vector LocalAccelDirection;//[Offset: 0x404, Size: 1]
	Vector FloorNormal;//[Offset: 0x410, Size: 1]
	Vector AccelRightDirection;//[Offset: 0x41c, Size: 1]
	Vector AccelNormDirection;//[Offset: 0x428, Size: 1]
	float SlopeAngle;//[Offset: 0x434, Size: 1]
	float SlopeAngleTarget;//[Offset: 0x438, Size: 1]
	Vector2D SlopeAngleDirectional;//[Offset: 0x43c, Size: 1]
	Rotator SlopeAngleDirectionalRotation;//[Offset: 0x444, Size: 1]
	float SlopeFeetAlpha;//[Offset: 0x450, Size: 1]
	float SlopeFeetAlphaTarget;//[Offset: 0x454, Size: 1]
	Vector RootAdjustmentOnSlope;//[Offset: 0x458, Size: 1]
	bool bDisableFeetTilting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	float fSlopeInterpSpeed;//[Offset: 0x468, Size: 1]
	enum LocomotionState;//[Offset: 0x46c, Size: 1]
	enum LocomotionStartDirection;//[Offset: 0x46d, Size: 1]
	enum LocomotionStopDirection;//[Offset: 0x46e, Size: 1]
	bool HasLocomotionStartLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46f, Size: 1]
	Vector LocomotionStartLocation;//[Offset: 0x470, Size: 1]
	float DistFromLocomotionStart;//[Offset: 0x47c, Size: 1]
	float DistFromLocomotionStartMax;//[Offset: 0x480, Size: 1]
	bool HasLocomotionStopLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	Vector LocomotionStopLocation;//[Offset: 0x488, Size: 1]
	float DistFromLocomotionStop;//[Offset: 0x494, Size: 1]
	bool HasJumpStartLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	Vector JumpStartLocation;//[Offset: 0x49c, Size: 1]
	float DistFromJumpStart;//[Offset: 0x4a8, Size: 1]
	float DistFromJumpStartMax;//[Offset: 0x4ac, Size: 1]
	bool HasJumpLandLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	bool JumpLandLocationOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 1]
	bool JumpLandLocationInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b2, Size: 1]
	Vector JumpLandLocation;//[Offset: 0x4b4, Size: 1]
	Vector JumpLandLocationTarget;//[Offset: 0x4c0, Size: 1]
	float JumpLandLocationInterpSpeed;//[Offset: 0x4cc, Size: 1]
	float DistFromJumpLand;//[Offset: 0x4d0, Size: 1]
	float InitialDistFromJumpLand;//[Offset: 0x4d4, Size: 1]
	float DistFromJumpLandTarget;//[Offset: 0x4d8, Size: 1]
	float DistFromJumpLandInterpSpeed;//[Offset: 0x4dc, Size: 1]
	float MinZSpeedforJumpLand;//[Offset: 0x4e0, Size: 1]
	bool bZeroVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e4, Size: 1]
	bool bZeroAcceleration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e4, Size: 1]
	bool bDead;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e4, Size: 1]
	bool bUpdateMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e4, Size: 1]
	bool bFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e4, Size: 1]
	bool bIsStopped;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e4, Size: 1]
	bool bIsPreRagdoll;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4e4, Size: 1]
	bool bIsRagdoll;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4e4, Size: 1]
	AnimSequence* FallDown;//[Offset: 0x4e8, Size: 1]
	HitReaction[] QueuedHits;//[Offset: 0x4f0, Size: 1]
	CurveVector* HitReactionTimeScale;//[Offset: 0x500, Size: 1]
	CurveFloat* HitReactionDamageScale;//[Offset: 0x508, Size: 1]
	bool bHeavyHitReactionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	bool bStaggerIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 1]
	enum CombatState;//[Offset: 0x512, Size: 1]
	enum InitialCombatState;//[Offset: 0x513, Size: 1]
	enum DefaultCombatState;//[Offset: 0x514, Size: 1]
	MulticastInlineDelegateProperty OnCombatStateChanged;//[Size: 1]
	float CombatStateCooldownTime;//[Offset: 0x528, Size: 1]
	float WeaponCombatStateCooldownTime;//[Offset: 0x52c, Size: 1]
	TimerHandle CombatStateCooldownTimer;//[Offset: 0x530, Size: 1]
	bool bCooldownBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	void UpdateCombatState(enum NewCombatState, bool bBlockCooldown, bool bForce);// 0x26700b0
	KSCharacterFoundation* TryGetKSCharacterFoundation();// 0x266ff60
	bool ShouldDisableFeetTilting(Vector ActorUpVector);// 0x266fd80
	void RequestNewCombatState(enum NewCombatState, bool bBlockCooldown, bool bForce);// 0x2cbecb0
	void OnMovementDirectionChanged(enum OldDirection, enum NewDirection);// 0x266f9d0
	void OnCombatStateCooldown();// 0x266f9b0
	void LocomotionStop(Vector StopLocation);// 0x2cbecb0
	void LocomotionStart(Vector StartLocation);// 0x2cbecb0
	void LocomotionJumpStart(Vector StartLocation);// 0x2cbecb0
	void LocomotionJumpLand(Vector LandLocation);// 0x2cbecb0
	bool IsFallingIntoWater();// 0x266f5e0
	enum GetMovementDirectionFromLocalAcceleration(Vector NormalizedLocalAccel, bool bGetOppositeDirection);// 0x266ecd0
	enum GetCombatState();// 0x266e840
	void EventPlayFireAnimation();// 0x2cbecb0
	bool EventPlayDeathAnimation();// 0x2cbecb0
	bool CombatStateCanCoolDown(enum TestState);// 0x266e260
	bool CanUseCombatState(enum TestState);// 0x266e1a0
	void AttemptCombatStateCooldown();// 0x266e0f0

--------------------------------
Class: KSAnimInstance.SkinnedAnimInstance.AnimInstance.Object
	bool bIsInLobbyViewer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bRecordAnimStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	KSAnimationAuditComponent* AuditingComponent;//[Offset: 0x2d0, Size: 1]
	bool bPlayingMirrorTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	bool bPlayingMirrorTransitionAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 1]
	bool bAnimMirrorDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ea, Size: 1]
	bool bDisableMirrorPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2eb, Size: 1]
	bool bWantsMirroredPoseCosmetic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	float PoseMirrorAlphaCosmetic;//[Offset: 0x2f0, Size: 1]
	float MirrorInterpSpeed;//[Offset: 0x2f4, Size: 1]
	float MirrorInterpSpeedEngaged;//[Offset: 0x2f8, Size: 1]
	float ShoulderSwapProgress;//[Offset: 0x2fc, Size: 1]
	enum CurrentShoulderCosmetic;//[Offset: 0x300, Size: 1]
	BoneMirrorConfig BoneMirrorConfig;//[Offset: 0x308, Size: 1]
	enum CurrentShoulder;//[Offset: 0x328, Size: 1]
	bool bWantsMirroredPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float PoseMirrorAlpha;//[Offset: 0x32c, Size: 1]
	MulticastInlineDelegateProperty OnMirrorPoseUpdated;//[Size: 1]
	bool bIsShieldActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	void SetShieldActive(bool bSetIsShieldActive);// 0x2cbecb0
	void SetLobbyState(bool bInModelViewer);// 0x26284d0
	void OnShoulderChanged();// 0x2cbecb0
	void OnMirrorPoseChanged();// 0x2cbecb0
	void Montage_JumpToRandomSection(FName[] SectionNames, AnimMontage* Montage, bool bDisallowCurrentSection);// 0x26278a0
	BoneReference[] GetUnpairedMirrorBones();// 0x26275c0
	BoneMirrorPair[] GetPairedMirrorBones();// 0x2627440
	bool CanPlayMirrorTransitionAnimation();// 0x2627110
	void AnimMirrorDelayEnd();// 0x2626de0

--------------------------------
Class: SkinnedAnimInstance.AnimInstance.Object
	MultiSkinObject* SkinObject;//[Offset: 0x2b8, Size: 1]
	MultiSkinObject* GetSkinObject();// 0xf98a00
	BlendSpace* GetSkinnedBlendSpace(FName Keyword, BlendSpace* Default, out bool bHasOverride);// 0xf98d50
	AnimSequence* GetSkinnedAnimSequence(FName Keyword, AnimSequence* Default, out bool bHasOverride);// 0xf98c40
	AimOffsetBlendSpace* GetSkinnedAnimOffset(FName Keyword, AimOffsetBlendSpace* Default, out bool bHasOverride);// 0xf98b30
	AnimMontage* GetSkinnedAnimMontage(FName Keyword, AnimMontage* Default, out bool bHasOverride);// 0xf98a20

--------------------------------
Class: MultiSkinObject.Object
	MultiSkinObject*[] ParentSkinnedObjects;//[Offset: 0x28, Size: 1]
	MultiSkinObject*[] ChildSkinnedObjects;//[Offset: 0x38, Size: 1]
	<FName> SubscribedKeywords;//[Offset: 0x48, Size: 1]
	<FName> SubscribedMaterialPrefixes;//[Offset: 0x98, Size: 1]
	bool bSubscribeToAllKeywords;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bWantsToBeRecycled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	MulticastInlineDelegateProperty OnFinishedAllPendingLoadsDel;//[Size: 1]
	<int,DynamicSkinTableMapEntry> DynamicSkinTables;//[Offset: 0x130, Size: 1]
	<FName,CachedRowsEntry> CachedRows;//[Offset: 0x180, Size: 1]
	void UnsubscribeToKeywords(out const FName[] InKeywords);// 0xf8bc60
	void UnsubscribeToKeyword(FName InKeyword);// 0xf8bbe0
	void UnsubscribeToAllKeywords();// 0xf8bbc0
	void SubscribeToKeywords(out const FName[] InKeywords);// 0xf8bb10
	void SubscribeToKeyword(FName InKeyword);// 0xf8ba90
	void SubscribeToAllKeywords();// 0xf8ba70
	void RemoveParent(MultiSkinObject* InParent);// 0xf8a150
	Texture* GetTexture(FName RowName, out int Priority);// 0xf89f20
	StaticMesh* GetStaticMesh(FName RowName, out int Priority);// 0xf89d80
	SkeletalMesh* GetSkeletalMesh(FName RowName, out int Priority);// 0xf89ba0
	SelectiveAkAudioEvent* GetSelectiveAudioEvent(FName RowName, out int Priority);// 0xf89a00
	PoseAsset* GetPoseAsset(FName RowName, out int Priority);// 0xf89860
	PhysicsAsset* GetPhysicsAsset(FName RowName, out int Priority);// 0xf896c0
	ParticleSystem* GetParticleSystem(FName RowName, out int Priority);// 0xf89520
	FName GetNameField(FName RowName, out int Priority);// 0xf89370
	MaterialInterface* GetMaterialInterface(FName RowName, out int Priority);// 0xf891c0
	LinearColor GetLinearColor(FName RowName, out int Priority);// 0xf89010
	int GetInt(FName RowName, out int Priority);// 0xf88e60
	float GetFloat(FName RowName, out int Priority);// 0xf88cc0
	class Object GetClass(FName RowName, out int Priority);// 0xf88b20
	bool GetBool(FName RowName, out int Priority);// 0xf88980
	AkAudioEvent* GetAudioEvent(FName RowName, out int Priority);// 0xf887e0
	AnimSequence* GetAnimSequence(FName RowName, out int Priority);// 0xf88570
	AnimMontage* GetAnimMontage(FName RowName, out int Priority);// 0xf883d0
	BlendSpace* GetAnimBlendSpace(FName RowName, out int Priority);// 0xf88230
	AimOffsetBlendSpace* GetAnimAimOffset(FName RowName, out int Priority);// 0xf88090
	void GetAllSkinKeywords(out <FName> InOutKeywords);// 0xf87e90
	void AddParent(MultiSkinObject* InParent);// 0xf875d0

--------------------------------
Class: SelectiveAkAudioEvent.Object

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 1]
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	int BasePoseIndex;//[Offset: 0x114, Size: 1]
	FName RetargetSource;//[Offset: 0x118, Size: 1]

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 1]
	FName[] Tracks;//[Offset: 0x10, Size: 1]
	<FName,int> TrackMap;//[Offset: 0x20, Size: 1]
	PoseData[] Poses;//[Offset: 0x70, Size: 1]
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 1]

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 1]
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 1]
	float[] CurveData;//[Offset: 0x60, Size: 1]

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float AnimLength;//[Offset: 0x8c, Size: 1]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 3]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 1]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 1]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 1]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 1]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 1]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 3]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 1]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 1]
	Vector SampleValue;//[Offset: 0x8, Size: 1]
	float RateScale;//[Offset: 0x14, Size: 1]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 3]
	float Weights;//[Offset: 0xc, Size: 3]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 1]
	float Min;//[Offset: 0x10, Size: 1]
	float Max;//[Offset: 0x14, Size: 1]
	int GridNum;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: DynamicSkinTableMapEntry
	DynamicSkinTable* Table;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DynamicSkinTable.Object
	DataTableInfo[] ActiveDataTables;//[Offset: 0x28, Size: 1]
	DataTableInfo[] InactiveDataTables;//[Offset: 0x38, Size: 1]
	MulticastInlineDelegateProperty OnFinishedAllPendingLoadsDel;//[Size: 1]
	bool bWantsToBeRecycled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 1]
	interface class None* SkinTagAsset;//[Offset: 0x280, Size: 1]
	void RemoveDataTables(out const DataTable*[] InTables);// 0xf8a0a0
	void RemoveDataTable(DataTable* InTable);// 0xf8a020
	bool IsTablePendingAssetLoad();// 0xf89ff0
	Texture* GetTexture(FName RowName, out int Priority);// 0xf89e50
	StaticMesh* GetStaticMesh(FName RowName, out int Priority);// 0xf89cb0
	SkeletalMesh* GetSkeletalMesh(FName RowName, out int Priority);// 0xf89ad0
	SelectiveAkAudioEvent* GetSelectiveAudioEvent(FName RowName, out int Priority);// 0xf89930
	PoseAsset* GetPoseAsset(FName RowName, out int Priority);// 0xf89790
	PhysicsAsset* GetPhysicsAsset(FName RowName, out int Priority);// 0xf895f0
	ParticleSystem* GetParticleSystem(FName RowName, out int Priority);// 0xf89450
	FName GetNameField(FName RowName, out int Priority);// 0xf89290
	MaterialInterface* GetMaterialInterface(FName RowName, out int Priority);// 0xf890f0
	LinearColor GetLinearColor(FName RowName, out int Priority);// 0xf88f30
	int GetInt(FName RowName, out int Priority);// 0xf88d90
	float GetFloat(FName RowName, out int Priority);// 0xf88bf0
	class Object GetClass(FName RowName, out int Priority);// 0xf88a50
	bool GetBool(FName RowName, out int Priority);// 0xf888b0
	AkAudioEvent* GetAudioEvent(FName RowName, out int Priority);// 0xf88710
	AnimSequence* GetAnimSequence(FName RowName, out int Priority);// 0xf884a0
	AnimMontage* GetAnimMontage(FName RowName, out int Priority);// 0xf88300
	BlendSpace* GetAnimBlendSpace(FName RowName, out int Priority);// 0xf88160
	AnimationAsset* GetAnimationAsset(FName RowName, out int Priority);// 0xf88640
	AimOffsetBlendSpace* GetAnimAimOffset(FName RowName, out int Priority);// 0xf87fc0
	void GetAllKeywords(out <FName> InOutKeywords);// 0xf87d60
	void AddDataTableWithQuery(DataTable* InTable, int InPriority, out const GameplayTagQuery InQuery);// 0xf87370
	void AddDataTables(out const DataTableInfo[] InTableInfos);// 0xf874d0
	void AddDataTable(DataTable* InTable, int InPriority);// 0xf872b0

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 1]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 1]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 1]
	FString UserDescription;//[Offset: 0x28, Size: 1]
	FString AutoDescription;//[Offset: 0x38, Size: 1]

--------------------------------
Class: DataTableInfo
	DataTable* DataTable;//[Offset: 0x0, Size: 1]
	int TablePriority;//[Offset: 0x8, Size: 1]
	GameplayTagQuery SkinTagQuery;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CachedRowsEntry
	int Priority;//[Offset: 0x0, Size: 1]
	HardAssetTableRow Row;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HardAssetTableRow.TableRowBase
	AnimationAsset* AnimationAsset;//[Offset: 0x8, Size: 1]
	AkAudioEvent* AudioEvent;//[Offset: 0x10, Size: 1]
	SelectiveAkAudioEvent* SelectiveAudioEvent;//[Offset: 0x18, Size: 1]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x20, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x28, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 1]
	ParticleSystem* ParticleSystem;//[Offset: 0x38, Size: 1]
	MaterialInterface* MaterialInterface;//[Offset: 0x40, Size: 1]
	Texture* Texture;//[Offset: 0x48, Size: 1]
	class Object* Class;//[Offset: 0x50, Size: 1]
	bool Bool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float float;//[Offset: 0x5c, Size: 1]
	LinearColor LinearColor;//[Offset: 0x60, Size: 1]
	int Int;//[Offset: 0x70, Size: 1]
	FName NameField;//[Offset: 0x74, Size: 1]

--------------------------------
Class: TableRowBase

--------------------------------
Class: KSAnimationAuditComponent.ActorComponent.Object
	KSAnimInstance* CurrentAnimInst;//[Offset: 0xb0, Size: 1]
	void AnimAuditStop(KSAnimInstance* AnimInst, bool bExportImmediately);// 0x2626d10
	void AnimAuditStart(KSAnimInstance* AnimInst);// 0x2626c90
	void AnimAuditClear(KSAnimInstance* AnimInst);// 0x2626c10

--------------------------------
Class: KSWeaponComponent.KSEquipmentCosmeticComponent.ActorComponent.Object
	enum WeaponComponentTickType;//[Offset: 0x128, Size: 1]
	bool bAllowTickingOnItemDropActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	byte ForcedWeaponLODWhenLocallyViewed;//[Offset: 0x12a, Size: 1]
	bool bForceResidentFlagOnWeaponTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 1]
	bool bAllowAnimationAsItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bEmoteVisibilityCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 1]
	bool bUsePrecisionAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12f, Size: 1]
	bool bTouchUseReleaseToFire;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12f, Size: 1]
	bool bTouchReleaseToFireSemiAuto;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12f, Size: 1]
	bool bUseTouchAutoFireStartupDelay;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12f, Size: 1]
	float TouchModeADSAutoFireDelay;//[Offset: 0x130, Size: 1]
	float TouchModeHipFireAutoFireDelay;//[Offset: 0x134, Size: 1]
	float TouchModeADSAutoFireFallOff;//[Offset: 0x138, Size: 1]
	float TouchModeHipFireAutoFireFallOff;//[Offset: 0x13c, Size: 1]
	enum WeaponState;//[Offset: 0x140, Size: 1]
	enum InitialState;//[Offset: 0x141, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x148, Size: 1]
	KSWeapon* OwningWeapon;//[Offset: 0x150, Size: 1]
	bool bPendingFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	byte InitialAmmoInClip;//[Offset: 0x159, Size: 1]
	byte AmmoInClip;//[Offset: 0x15a, Size: 1]
	bool bInitializationStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 1]
	bool bInitializationCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	MulticastInlineDelegateProperty OnAmmoChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnFireRateChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCurrentChargeChangedDel;//[Size: 1]
	interface class None* RechargeMethodCosmetic;//[Offset: 0x1b0, Size: 1]
	KSWeaponMeshInfo PrimaryWeaponMeshInfo;//[Offset: 0x1c0, Size: 1]
	KSWeaponMeshInfo[] AdditionalWeaponMeshInfo;//[Offset: 0x230, Size: 1]
	MulticastInlineDelegateProperty OnWeaponComponentInitializationCompletedDel;//[Size: 1]
	bool bCachedWeaponVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	float MeshMaxDrawDistance;//[Offset: 0x26c, Size: 1]
	bool bUseMaxDistForCharacterOwnedWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bHideAncillaryMagazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int AncillaryMagazineIndex;//[Offset: 0x274, Size: 1]
	bool bIsGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool bUsesHeavyGadget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	FName MeleeComboTarget;//[Offset: 0x27c, Size: 1]
	bool bPreventReturnToHolsterFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	enum WeaponAttachType;//[Offset: 0x285, Size: 1]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x288, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x290, Size: 1]
	FName WeaponSkeletalMeshCollisionProfileName;//[Offset: 0x298, Size: 1]
	bool bLoadWeaponSkeletalMeshComponentOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	FName[] ActiveRequiredDedicatedServerCharacterBoneNames;//[Offset: 0x2a8, Size: 1]
	enum MeshComponentVisibilityBasedAnimTickOption;//[Offset: 0x2b8, Size: 1]
	bool bAllowMeshCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	SkeletalMesh* ScopeMesh;//[Offset: 0x2c0, Size: 1]
	GameplayTag ScopeAttachmentTag;//[Offset: 0x2c8, Size: 1]
	SkeletalMesh* MagazineMesh;//[Offset: 0x2d0, Size: 1]
	GameplayTag MagazineAttachmentTag;//[Offset: 0x2d8, Size: 1]
	SkeletalMesh* StockMesh;//[Offset: 0x2e0, Size: 1]
	GameplayTag StockAttachmentTag;//[Offset: 0x2e8, Size: 1]
	SkeletalMesh* SilencerMesh;//[Offset: 0x2f0, Size: 1]
	GameplayTag SilencerAttachmentTag;//[Offset: 0x2f8, Size: 1]
	SkeletalMesh* GripMesh;//[Offset: 0x300, Size: 1]
	GameplayTag GripAttachmentTag;//[Offset: 0x308, Size: 1]
	FName[] KeywordsForCompositingMesh;//[Offset: 0x310, Size: 1]
	FName BaseMeshOverrideKeyword;//[Offset: 0x320, Size: 1]
	FName MeshNeedsCPUAccessKeyword;//[Offset: 0x328, Size: 1]
	FName PhysicsAssetOverrideKeyword;//[Offset: 0x330, Size: 1]
	class AnimInstance* AnimInstance;//[Offset: 0x338, Size: 1]
	FName AnimInstanceOverrideKeyword;//[Offset: 0x340, Size: 1]
	FName EquipSocketOverride;//[Offset: 0x348, Size: 1]
	KSWeaponSkeletalMeshComponent* WeaponSkeletalMeshComponent;//[Offset: 0x350, Size: 1]
	KSWeaponSkeletalMeshComponent*[] WeaponSkeletalMeshComponents;//[Offset: 0x358, Size: 1]
	KSWeaponSkeletalMeshComponent* PropWeaponSkeletalMeshComponent;//[Offset: 0x368, Size: 1]
	bool bHideOnCreation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool bWeaponLoweringEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	FName CharacterRightShoulderBoneName;//[Offset: 0x374, Size: 1]
	FName CharacterRightElbowBoneName;//[Offset: 0x37c, Size: 1]
	FName CharacterLeftShoulderBoneName;//[Offset: 0x384, Size: 1]
	FName CharacterLeftElbowBoneName;//[Offset: 0x38c, Size: 1]
	FName CharacterChestBoneName;//[Offset: 0x394, Size: 1]
	FName WeaponBarrelBoneName;//[Offset: 0x39c, Size: 1]
	float WeaponLowerSphereTraceRadius;//[Offset: 0x3a4, Size: 1]
	float WeaponLowerTestDistanceAdjustment;//[Offset: 0x3a8, Size: 1]
	AncillaryWeaponMeshInfo[] AncillaryMeshData;//[Offset: 0x3b0, Size: 1]
	float WeaponLowerViewDotThreshold;//[Offset: 0x3c0, Size: 1]
	bool bResetLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	uint32 NextBroadcastId;//[Offset: 0x3c8, Size: 1]
	uint32 LastBroadcastReceived;//[Offset: 0x3cc, Size: 1]
	SkeletalMeshComponent*[] AncillaryMeshes;//[Offset: 0x3d0, Size: 1]
	bool bPreventRetreive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool bForceDisableLHIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	bool bAttachHandWhileSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 1]
	bool bAttachHandWhileMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 1]
	bool bAttachHandWhileCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	bool bAttachHandMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 1]
	bool bAttachHandWhileIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6, Size: 1]
	bool bAttachHandWhileZiplining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e7, Size: 1]
	bool bForceAttachHandIfNotNonCom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool bForceDisableRHIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	bool bAttachRightHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	bool bAttachRightHandWhileZiplining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb, Size: 1]
	bool bHasMirroredReloadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bHasMirroredQuickReloadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool bHasMirroredFireAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	bool bIsWeaponNonComOffsetOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 1]
	bool bReplicateWeaponStateAsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bForceBroadcastAllWeaponStateChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	bool bForceReliableWeaponStateBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 1]
	int ShotsFiredSinceLastReload;//[Offset: 0x3f4, Size: 1]
	bool bFirstReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool bIsMounted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	bool bShouldBroadcastEmptyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 1]
	bool bShouldReliablyBroadcastEmptyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 1]
	bool bShouldReliablyBroadcastAmmoChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	MulticastInlineDelegateProperty OnWeaponComponentStateChangedDel;//[Size: 1]
	bool bIsInAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bNonComUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool bComUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	bool bEngUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	bool bEnableTurnInPlaceForAOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	MulticastInlineDelegateProperty ZoomFOVChanged;//[Size: 1]
	enum CachedAimMode;//[Offset: 0x440, Size: 1]
	float DefaultAimCameraTransitionTime;//[Offset: 0x444, Size: 1]
	float AimOverShoulderCameraTransitionTime;//[Offset: 0x448, Size: 1]
	float AimDownSightsCameraTransitionTime;//[Offset: 0x44c, Size: 1]
	MulticastInlineDelegateProperty OnWeaponComponentAimModeChangedDel;//[Size: 1]
	KSWeaponAttachmentCosmeticInst*[] AttachmentCosmetics;//[Offset: 0x4a8, Size: 1]
	enum SkinObjectParenting;//[Offset: 0x4b8, Size: 1]
	int ActiveIndex;//[Offset: 0x4bc, Size: 1]
	MulticastInlineDelegateProperty OnEquipmentBecomeActiveDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentEndActiveDel;//[Size: 1]
	AnimMontage* ActiveReloadMontage;//[Offset: 0x520, Size: 1]
	AnimMontage*[] ActiveWeaponReloadMontages;//[Offset: 0x528, Size: 1]
	bool bMultiStageReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	bool bIsRevolver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 1]
	bool PostReloadTimerIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53a, Size: 1]
	bool EnableAimsDuringReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53b, Size: 1]
	bool bShieldIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	FName MuzzleSocketKeyword;//[Offset: 0x540, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0x578, Size: 1]
	DataTableInfo[] BaseAssetDataTables;//[Offset: 0x588, Size: 1]
	bool bCreateDataTableForLegacyAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	DynamicSkinTable* AssetDataTableManager;//[Offset: 0x5a0, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x5a8, Size: 1]
	bool bSkinObjectAdded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	Vector ViewModelScale;//[Offset: 0x5c8, Size: 1]
	Rotator ViewModelRotation;//[Offset: 0x5d4, Size: 1]
	Vector ViewModelLocationOffset;//[Offset: 0x5e0, Size: 1]
	float WeaponCombatStateCooldown;//[Offset: 0x5f0, Size: 1]
	float ForceNonCombatShotBlockDistance;//[Offset: 0x5f4, Size: 1]
	class KSWeaponTargetingModule* TargetingVisualizationClass;//[Offset: 0x5f8, Size: 1]
	bool bIsTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	bool bForcingTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 1]
	KSWeaponTargetingModule* TargetingVisualizerInstance;//[Offset: 0x608, Size: 1]
	ForceFeedbackEffect* VibrationEffect;//[Offset: 0x610, Size: 1]
	ForceFeedbackEffect* AlternateVibrationEffect;//[Offset: 0x618, Size: 1]
	ForceFeedbackAttenuation* AlternativeVibrationAttenuation;//[Offset: 0x620, Size: 1]
	RecoilProfileAsset* RecoilProfileAsset;//[Offset: 0x628, Size: 1]
	bool bIsMeleeWeaponComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 1]
	FString VFXSpangKeywordPrefix;//[Offset: 0x638, Size: 1]
	FString DecalSpangKeywordPrefix;//[Offset: 0x648, Size: 1]
	FName VFXSpangDefaultKeyword;//[Offset: 0x658, Size: 1]
	<byte,FName> VFXSpangKeywordMap;//[Offset: 0x660, Size: 1]
	FName DecalSpangDefaultKeyword;//[Offset: 0x6b0, Size: 1]
	<byte,FName> DecalSpangKeywordMap;//[Offset: 0x6b8, Size: 1]
	bool UsingAccuracyLoss();// 0x27d5d50
	void UpdateOwnerLocallyViewed(bool bIsLocallyViewed);// 0x27d5cc0
	void UpdateAimDownSightsBlurValues();// 0x2cbecb0
	void TriggerEngagement();// 0x27d5ca0
	void TriggerCombat();// 0x27d5c80
	void TickViewerAim(float DeltaTime);// 0x27d5c00
	void TickNonViewerAim(float DeltaTime);// 0x27d5b80
	void StopDefaultAim();// 0x27d5b60
	void StopAimOverShoulder();// 0x1f1a6c0
	void StopAimDownSights();// 0x27d5b40
	void StopAimAlternate();// 0x1f04160
	void StartDefaultAim();// 0x27d5b20
	void StartAimOverShoulder();// 0x1f1aa80
	void StartAimDownSights();// 0x27d5b00
	void StartAimAlternate();// 0x1f03240
	bool ShouldBroadcastWeaponStateChange(KSWeaponDataUpdateContainer OldState, KSWeaponDataUpdateContainer NewState, out bool bReliable);// 0x27d59e0
	void SetWeaponVisibility(bool Visible);// 0x27d5950
	void SetWeaponMeshCollisionEnabled(byte NewType);// 0x27d58d0
	void SetViewModelScale(Vector newVal);// 0x27d5850
	void SetViewModelRotation(Rotator newVal);// 0x27d57d0
	void SetViewModelLocationOffset(Vector newVal);// 0x27d5750
	void SetGamepadTriggerEffect(byte TriggerType, byte TriggerStartPosition, byte TriggerStopPosition, byte TriggerHapticStrength);// 0x27d5580
	void SaveDropMagValues();// 0x2cbecb0
	void RestoreDropMagValues();// 0x2cbecb0
	void ReportNewWeaponLowerAlpha(float NewAlpha, float DeltaTime, bool ForceReset);// 0x2cbecb0
	void PostCreateWeaponSkeletalMeshComponent(KSWeaponSkeletalMeshComponent* CreatedWeaponSkeletalMeshComponent);// 0x1eb95c0
	void OverrideDropMagValues(Transform transformOverride, Vector velocityOverride, bool ForceDisableMagDrop, bool DropMultipleMags);// 0x2cbecb0
	void OnWeaponStateChanged(enum OldState, enum NewState);// 0x27d5410
	void OnUnsetAsActivePrimaryWeapon();// 0x2635680
	void OnSkyDiveStarted(KSCharacter* SkyDiver);// 0x2cbecb0
	void OnSkyDiveSkipped(KSCharacter* SkyDiver);// 0x2cbecb0
	void OnSkyDiveEnded(KSCharacter* SkyDiver);// 0x2cbecb0
	void OnSetAsActivePrimaryWeapon();// 0x27d53f0
	void OnRep_WeaponState();// 0x27d53d0
	void OnRep_WeaponAsset();// 0x2691420
	void OnRep_InitialState();// 0x27d53b0
	void OnRep_AmmoInClip(byte OldAmmoInClip);// 0x125c0e0
	void OnMirrorPoseChanged();// 0x2cbecb0
	void OnInvalidFire();// 0x26ff3b0
	void OnInitialize();// 0x27d5220
	void OnFireWeaponFull(out const FullFireRepData Data);// 0x27d5170
	void OnFireWeapon(out const AimData Aim);// 0x27d50c0
	void OnEmptyFire();// 0x26ff3d0
	void OnCurrentChargeUpdated();// 0x27d50a0
	void OnActiveMaterialsApplied(SkinnableSkeletalMeshComponent* SkinnableSkelComp);// 0x27d5010
	void ObjectiveInteractionStart();// 0x2cbecb0
	void ObjectiveInteractionEnd();// 0x2cbecb0
	void NotifyStopFireReceived();// 0x2cbecb0
	bool IsWeaponSilenced();// 0x27d4fe0
	bool IsWeaponPendingFireWithValidAmmo();// 0x27d4fb0
	bool IsUsingPropWeapon();// 0x27d4f80
	bool IsTargetingEnabled();// 0x27d4f50
	bool IsReloading();// 0x27d4f20
	bool IsPrimaryActiveWeapon();// 0x27d4ef0
	bool IsModelViewer();// 0x27d4ed0
	bool IsClipEmpty();// 0x27d4ea0
	bool IsAimingOverShoulder();// 0x27d4e30
	bool IsAimingDownSights();// 0x27d4e00
	bool IsAimingAlternate();// 0x27d4dd0
	bool IsAiming();// 0x27d4da0
	bool IsAimedAtFriendly();// 0x27d4d70
	bool IsAimedAtEnemy();// 0x27d4d40
	bool IsActiveWeapon();// 0x27d4d10
	void InitiateMountedWeaponState();// 0x2cbecb0
	enum GetWeaponState();// 0x2746570
	void GetWeaponSkeletalMeshComponents(out KSWeaponSkeletalMeshComponent*[] OutKSWeaponSkeletalMeshComponents);// 0x27d4a60
	KSWeaponSkeletalMeshComponent* GetWeaponSkeletalMeshComponentNew();// 0x27d49a0
	KSWeaponSkeletalMeshComponent* GetWeaponSkeletalMeshComponentAtIndex(int Index);// 0x27d49d0
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x27d49a0
	Vector GetWeaponCameraOffset();// 0x27d4960
	KSWeaponAsset* GetWeaponAsset();// 0x27d4940
	AnimInstance* GetWeaponAnimInstance();// 0x27d4910
	Vector GetViewModelScale();// 0x27d48e0
	Rotator GetViewModelRotation();// 0x27d48b0
	Vector GetViewModelLocationOffet();// 0x27d4880
	ForceFeedbackEffect* GetVibrationEffect();// 0x27d4850
	static FName GetVFXSpangKeyword(byte SurfaceType);// 0x27d4730
	class KSWeaponTargetingModule GetTargetingVisualizationClass();// 0x27d4710
	KSWeaponTargetingModule* GetTargetingModuleInstance();// 0x27d46f0
	int GetShotPenetrationCount();// 0x27d45c0
	FName GetScopeSocketName();// 0x27d4580
	float GetRetrieveTime();// 0x27d4550
	float GetRequiredCharge();// 0x27d4520
	void GetReloadTimes(out float PreReloadScaled, out float FirstShotPreReloadScaled, out float PostReloadScaled, out float PreReloadMultiplier, out float PostReloadMultiplier);// 0x27d4320
	float GetReloadTime();// 0x27d42f0
	bool GetReactiveAttachmentCosmeticInstance(out KSAttachCosmeticInst_Reactive* OutWeaponReactiveCometic);// 0x27d4250
	float GetPreReloadTimeScaled();// 0x27d4220
	float GetPostReloadTimeScaled();// 0x27d41f0
	float GetPostFireTime();// 0x27d41c0
	KSWeapon* GetOwningWeapon();// 0x27d41a0
	int GetNumCharges();// 0x27d4170
	FName GetMuzzleSocketName();// 0x27d4130
	float GetMovementAccuracyPenalty();// 0x27d3e70
	float GetMaximumCharge();// 0x27d4100
	float GetMaxHipFireAccuracy();// 0x27d40d0
	float GetMaxFiringAccuracyLoss();// 0x27d40a0
	float GetMaxFiringAccuracyGain();// 0x27d4070
	float GetMaxAimedFiringAccuracyGain();// 0x27d4040
	float GetMaxAimedAccuracy();// 0x27d4010
	float GetMagnifierValue();// 0x27d3f40
	void GetLoadedAccumulatedAttachmentOverrideData(out LoadedWeaponAttachmentAnimationData OutData);// 0x27d3ea0
	float GetInAirAccuracyModifier();// 0x27d3e70
	float GetFirstShotReloadTimeScaled();// 0x27d3d00
	float GetFiringTime();// 0x27d3cd0
	float GetDefaultAimTransitionTime();// 0x27d3a60
	static FName GetDecalSpangKeyword(byte SurfaceType);// 0x27d39e0
	float GetDamageModifier(class DamageType DamageTypeClass);// 0x27d3940
	float GetCurrentSpeedModifier();// 0x27d3900
	enum GetCurrentFireRateState();// 0x27d38e0
	float GetCurrentFireRate();// 0x27d38b0
	float GetCurrentCharge();// 0x27d3880
	float GetCurrentAccuracy();// 0x27d3850
	float GetCrouchAccuracyModifier();// 0x27d3820
	float GetCooldownTimeRemaining();// 0x27d37f0
	byte GetClipSize();// 0x27d37c0
	float GetChargeRateMultiplier();// 0x27d3790
	KSWeaponSkeletalMeshComponent* GetBestWeaponSkeletalMeshComponent();// 0x27d3740
	float GetBaseRetrieveTime();// 0x27d3710
	float GetBaseReloadTime();// 0x27d36e0
	float GetBaseFiringTime();// 0x27d36b0
	float GetBaseAccuracy();// 0x27d3680
	void GetAttachments(out KSWeaponAttachment*[] OutWeaponAttachments);// 0x27d35d0
	void GetAttachmentCosmeticInstances(out KSWeaponAttachmentCosmeticInst*[] OutWeaponAttachmentCosmetics);// 0x27d3520
	SkeletalMeshComponent*[] GetAncillaryMeshes();// 0x27d3400
	int GetAmmoInOwnerInventory();// 0x27d33d0
	byte GetAmmoInClip();// 0x27d33a0
	ForceFeedbackEffect* GetAlternativeVibrationEffect();// 0x27d3370
	ForceFeedbackAttenuation* GetAlternativeVibrationAttenuation();// 0x27d3340
	float GetAimOverShoulderAccuracyModifier();// 0x27d3310
	enum GetAimMode();// 0x27d32e0
	float GetAimDownSightsTransitionTime();// 0x27d32b0
	float GetAdjustedRetrieveRate();// 0x27d3280
	float GetAdjustedReloadRate();// 0x27d3250
	float GetAdjustedFiringRate();// 0x27d3220
	int GetActiveIndex();// 0x27d3200
	float GetAccuracyReturnRate();// 0x27d31d0
	float GetAccuracyReturnDelay();// 0x27d31a0
	float GetAccuracyLossPerShot();// 0x27d3170
	float GetAccuracyGainPerShot();// 0x27d3140
	float GetAccuracyDecayRate();// 0x27d3110
	static FName GenerateSurfaceBasedKeyword(FString Prefix, byte SurfaceType);// 0x27d3030
	void ForceTargeting();// 0x27d3010
	void ForceRetrieveWeapon();// 0x2cbecb0
	void ForceRetrieveState();// 0x2cbecb0
	void ForceHolsterWeapon();// 0x2cbecb0
	void ForceAttachWeaponToHolsterSocket();// 0x2cbecb0
	void ForceAttachWeaponToActiveSocket();// 0x2cbecb0
	void ForceAimUpdate();// 0x27d2ff0
	void EventUpdateOwnerLocallyViewed(bool bIsLocallyViewed);// 0x2cbecb0
	float EvaluateWeaponLowering(float DeltaTime);// 0x27d2f60
	void EndMountedWeaponState();// 0x2cbecb0
	void EndForcedTargeting();// 0x27d2f40
	void DropMagazine(const int meshToDropFrom);// 0x2cbecb0
	void DisableGamepadTriggerEffect();// 0xd76f80
	static void DisableAllGamepadTriggerEffects();// 0x27d2f20
	void DetatchWeaponSkeletalMeshComponentAttachedChildren();// 0x27d2f00
	bool CanUseCombatState(enum TestState);// 0x27d2e70
	bool CanReceiveAttachment(const KSWeaponAttachment* InAttachment, out GameplayTagContainer AvailableAttachPoints);// 0x27d2d60
	bool CanLowerWeaponNow();// 0x27d2d30
	void CancelReloadCosmetic();// 0x2cbecb0
	int CalcAmmoToBeReloaded();// 0x27d2d00
	void BroadcastWeaponStateChange(uint32 BroadcastId, KSWeaponDataUpdateContainer NewState);// 0x27d2c30
	void BroadcastReliableWeaponStateChange(uint32 BroadcastId, KSWeaponDataUpdateContainer NewState);// 0x27d2b60
	void BroadcastReliablePostReload(uint32 BroadcastId, byte InAmmoInClip);// 0x27d2a90
	void BroadcastReliablePostFireWithAmmo(uint32 BroadcastId, byte InAmmoInClip);// 0x27d29c0
	void BroadcastReliableEmptyFire(uint32 BroadcastId);// 0x27d2930
	void BroadcastReliableAmmoChange(uint32 BroadcastId, byte InAmmoInClip, bool bBonusAmmo);// 0x27d2830
	void BroadcastReliableAimedPostFireWithAmmo(uint32 BroadcastId, const AimData Aim, byte InAmmoInClip);// 0x27d2700
	void BroadcastReliableAimedPostFireFull(uint32 BroadcastId, const FullFireRepData Data);// 0x27d2610
	void BroadcastReliableAimedPostFire(uint32 BroadcastId, const AimData Aim);// 0x27d2530
	void BroadcastPostReload(uint32 BroadcastId, byte InAmmoInClip);// 0x27d2460
	void BroadcastPostFireWithAmmo(uint32 BroadcastId, byte InAmmoInClip);// 0x27d2390
	void BroadcastFullyCharged(float Timestamp, float CurrentCharge);// 0x27d22c0
	void BroadcastEmptyFire(uint32 BroadcastId);// 0x27d2230
	void BroadcastCurrentFireRateStateHasChanged(enum State, float Timestamp, float PostFireTime);// 0x27d2120
	void BroadcastChargeMethodValuesUpdated(float NewMaxCharge, float CurrentCharge, float Timestamp);// 0x27d2010
	void BroadcastChargeConsumed(float Timestamp, float CurrentCharge);// 0x27d1f40
	void BroadcastAmmoChange(uint32 BroadcastId, byte InAmmoInClip, bool bBonusAmmo);// 0x27d1e40
	void BroadcastAimedPostFireWithAmmo(uint32 BroadcastId, const AimData Aim, byte InAmmoInClip);// 0x27d1d10
	void BroadcastAimedPostFireFull(uint32 BroadcastId, const FullFireRepData Data);// 0x27d1c20
	void BroadcastAimedPostFire(uint32 BroadcastId, const AimData Aim);// 0x27d1b40
	void BlueprintPrepareKillCamPlayback();// 0x2cbecb0
	void BlueprintPersistentCosmeticsUpdate();// 0x2cbecb0
	void BlueprintFinishKillCamPlayback();// 0x2cbecb0
	void BlueprintFillLegacyDataTable(DataTable* LegacyDataTable);// 0x2cbecb0
	void AimDownSightsCheckpoint();// 0x27a98d0

--------------------------------
Class: KSWeaponDataUpdateContainer
	bool bChangeWeaponState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum WeaponState;//[Offset: 0x1, Size: 1]
	bool bChangeAimMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	enum AimMode;//[Offset: 0x3, Size: 1]

--------------------------------
Class: KSWeaponSkeletalMeshComponent.KSSkeletalMeshComponent.SkinnableMergedMeshComponent.SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bApplySkeletalMeshBoundsParameterToMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 1]
	FName SkeletalMeshBoundsParameterName;//[Offset: 0xda4, Size: 1]
	bool bApplySkeletalLengthParameterToMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdac, Size: 1]
	FName SkeletalMeshLengthParameterName;//[Offset: 0xdb0, Size: 1]
	bool bApplySkeletalWidthParameterToMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	FName SkeletalMeshWidthParameterName;//[Offset: 0xdbc, Size: 1]
	bool bApplySkeletalHeightParameterToMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc4, Size: 1]
	FName SkeletalMeshHeightParameterName;//[Offset: 0xdc8, Size: 1]

--------------------------------
Class: KSSkeletalMeshComponent.SkinnableMergedMeshComponent.SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bForceTextureResidentFlagOnAllTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	float TeleportDistanceDeltaThreshold;//[Offset: 0xd68, Size: 1]
	bool bEnableDedicatedServerRequiredBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	FName[] RequiredDedicatedServerBoneNames;//[Offset: 0xd90, Size: 1]
	void SetTeleportDistanceDeltaThreshold(float Threshold);// 0x2792d30
	void SetForceTextureResidentFlag(bool bEnable);// 0x2792ca0
	float GetTeleportDistanceDeltaThreshold();// 0x27924e0
	bool GetForceTextureResidentFlag();// 0x2791fa0

--------------------------------
Class: SkinnableMergedMeshComponent.SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnMeshMergeComplete;//[Size: 1]
	FName[] CompositeSkeletalMeshKeywords;//[Offset: 0xd08, Size: 1]
	bool bAlwaysUseTheFailsafeMeshWhileMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	FName MeshNeedsCPUAccessKeyword;//[Offset: 0xd1c, Size: 1]
	bool bDelayFullSkinUpdateUntilMeshMergingIsComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd24, Size: 1]
	SkeletalMesh* BestPlaceHolderMesh;//[Offset: 0xd28, Size: 1]
	bool bMergeMarkedComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 1]
	SkeletalMesh* CachedMergeResult;//[Offset: 0xd38, Size: 1]
	void SetSkeletalMeshKeywords(out const FName[] InKeywords, SkeletalMesh* InFailSafeSkeletalMesh);// 0xf8b7f0
	void RemoveSkeletalMeshKeyword(FName InKeyword);// 0xf8a2d0
	void OnMeshMergeComplete__DelegateSignature();// 0x2cbecb0
	void AddSkeletalMeshKeyword(FName InKeyword);// 0xf87650

--------------------------------
Class: SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bDelaySkinUpdatesUntilTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb0, Size: 1]
	bool bSkinUpdateIsQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb1, Size: 1]
	FName SkeletalMeshKeyword;//[Offset: 0xbb4, Size: 1]
	SkeletalMesh* FailSafeSkeletalMesh;//[Offset: 0xbc0, Size: 1]
	FName PhysicsAssetKeyword;//[Offset: 0xbc8, Size: 1]
	PhysicsAsset* FailSafePhysicsAsset;//[Offset: 0xbd0, Size: 1]
	FName AnimInstanceClassKeyword;//[Offset: 0xbd8, Size: 1]
	class AnimInstance* FailSafeAnimClass;//[Offset: 0xbe0, Size: 1]
	class AnimInstance* LastSkinnedAnimClass;//[Offset: 0xbe8, Size: 1]
	bool bForceAnimationUpdateOnSkinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0xbf8, Size: 1]
	MulticastInlineDelegateProperty OnAnimInitializedOnSkinnableMeshDel;//[Size: 1]
	bool bAllowMaterialSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	FString[] MaterialSkinningPrefixes;//[Offset: 0xc48, Size: 1]
	<FName> MaterialSkinningPrefixes_New;//[Offset: 0xc58, Size: 1]
	int ForcedLodModel_Skinned;//[Offset: 0xcf0, Size: 1]
	static void StaticSetForcedLOD(SkinnedMeshComponent* InMeshComp, int InForcedLOD);// 0xf8b9c0
	void SetSkeletalMeshKeyword(FName InKeyword, SkeletalMesh* InFailSafeSkeletalMesh);// 0xf8b720
	void SetPhysicsAssetKeyword(FName InKeyword, PhysicsAsset* InFailSafePhysicsAsset);// 0xf8b650
	int SetPersistentVectorParameterOnAllMaterials(FName ParameterName, LinearColor ParameterValue, bool bForceNewOverride);// 0xf8b430
	int SetPersistentVectorParameter(int MaterialSlot, FName ParameterName, LinearColor ParameterValue, bool bForceNewOverride);// 0xf8b170
	int SetPersistentTextureParameterOnAllMaterials(FName ParameterName, Texture* ParameterValue, bool bForceNewOverride);// 0xf8af70
	int SetPersistentTextureParameter(int MaterialSlot, FName ParameterName, Texture* ParameterValue, bool bForceNewOverride);// 0xf8acf0
	int SetPersistentScalarParameterOnAllMaterials(FName ParameterName, float ParameterValue, bool bForceNewOverride);// 0xf8aad0
	int SetPersistentScalarParameter(int MaterialSlot, FName ParameterName, float ParameterValue, bool bForceNewOverride);// 0xf8a830
	int SetPersistentMaterialOverrideOnAllSlots(MaterialInterface* MaterialInterface, bool bForceNewOverride);// 0xf8a6b0
	int SetPersistentMaterialOverride(int MaterialSlot, MaterialInterface* MaterialInterface, bool bForceNewOverride);// 0xf8a4b0
	void SetForcedLOD_Skinned(int InNewForcedLOD);// 0xf8a430
	void SetAnimClassKeyword(FName InKeyword, class AnimInstance InFailSafeAnimClass);// 0xf8a360
	void RemovePersistentMaterialParameter(int ParameterId);// 0xf8a1d0
	MultiSkinObject* GetSkinObject();// 0xf89c70
	void ForwardAnimInitialized();// 0xf87d40
	bool ChangePersistentVectorOverrideById(int ParameterId, LinearColor ParameterValue);// 0xf87b80
	bool ChangePersistentTextureOverrideById(int ParameterId, Texture* ParameterValue);// 0xf87a00
	bool ChangePersistentScalarOverrideById(int ParameterId, float ParameterValue);// 0xf87860
	bool ChangePersistentMaterialOverrideById(int ParameterId, MaterialInterface* MaterialInterface);// 0xf876e0

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xba8, Size: 1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xba8, Size: 1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xba8, Size: 1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0xf57d80

--------------------------------
Class: KSWeaponMeshInfo
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 1]
	FName SkeletalMeshOverrideKeyword;//[Offset: 0x8, Size: 1]
	bool bLoadWeaponSkeletalMeshComponentOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bAllowMeshCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	FName[] KeywordsForCompositingMesh;//[Offset: 0x18, Size: 1]
	class AnimInstance* AnimInstance;//[Offset: 0x28, Size: 1]
	FName AnimInstanceOverrideKeyword;//[Offset: 0x30, Size: 1]
	enum MeshComponentVisibilityBasedAnimTickOption;//[Offset: 0x38, Size: 1]
	FName PhysicsAssetOverrideKeyword;//[Offset: 0x3c, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 1]
	FName WeaponSkeletalMeshCollisionProfileName;//[Offset: 0x50, Size: 1]
	enum WeaponAttachType;//[Offset: 0x58, Size: 1]
	FName EquipSocketOverride;//[Offset: 0x5c, Size: 1]
	FName MeshNeedsCPUAccessKeyword;//[Offset: 0x64, Size: 1]

--------------------------------
Class: FullFireRepData
	AimData Aim;//[Offset: 0x0, Size: 1]
	bool bIgnoreExtraData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	RandomStream RandomStream;//[Offset: 0x54, Size: 1]
	float Accuracy;//[Offset: 0x5c, Size: 1]
	byte AmmoAfterThisShot;//[Offset: 0x60, Size: 1]
	bool bIgnoreAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]

--------------------------------
Class: AimData
	Vector_NetQuantize10 StartTrace;//[Offset: 0x0, Size: 1]
	Vector_NetQuantizeNormal Direction;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize10 ViewPoint;//[Offset: 0x18, Size: 1]
	enum AimDataMode;//[Offset: 0x24, Size: 1]
	Vector_NetQuantize10 EndTrace;//[Offset: 0x28, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 1]
	Vector_NetQuantizeNormal[] SpreadDirections;//[Offset: 0x40, Size: 1]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 1]
	int Seed;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSWeaponTargetingModule.Object
	TargetingModuleTickFunction TargetingTick;//[Offset: 0x28, Size: 1]
	bool bAimedAtEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bAimedAtFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	int TargetingIndex;//[Offset: 0x5c, Size: 1]
	FName ModeKey;//[Offset: 0x60, Size: 1]
	Transform OverriddenOriginTransform;//[Offset: 0x70, Size: 1]
	Transform OverriddenOriginTransformOffset;//[Offset: 0xa0, Size: 1]
	bool bOverrideOriginTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bCookTimeAffectsVisuals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	FName AimPostProcessCookTimeParameterName;//[Offset: 0xd4, Size: 1]
	MaterialInterface* AimPostProcessMaterial;//[Offset: 0xe0, Size: 1]
	MaterialInstanceDynamic* AimPostProcessMaterialInstance;//[Offset: 0xe8, Size: 1]
	KSWeaponAsset* OverriddenWeaponAsset;//[Offset: 0xf0, Size: 1]
	KSWeaponTargetingModule*[] ChildTargetingModules;//[Offset: 0xf8, Size: 1]
	float HitScanRange;//[Offset: 0x108, Size: 1]
	KSWeaponComponent* OwningWeaponComponent;//[Offset: 0x118, Size: 1]
	KSCharacter* OwningCharacter;//[Offset: 0x120, Size: 1]
	void UpdateOverriddenOriginTransformOffset(out const Transform NewOverriddenOriginTransformOffset);// 0x27dfbd0
	void UpdateOverriddenOriginTransform(out const Transform NewOverriddenOriginTransform);// 0x27dfae0
	void UpdateCachedHoveredActor(Actor* NewCachedHoveredActor);// 0xe70640
	void TickTargeting(float DeltaSeconds);// 0x27dfa60
	bool ShouldShowPath();// 0x2015570
	void SetShowPath(bool bNewShowPath);// 0x27df9b0
	void SetParentTargetingModule(KSWeaponTargetingModule* NewParentTargetingModule);// 0x27df8b0
	void SetOverrideOriginTransform(bool bNewOverrideOriginTransform);// 0x27df830
	void SetOverriddenWeaponAsset(KSWeaponAsset* NewOverriddenWeaponAsset);// 0x27df7b0
	void SetAimPostProcessMaterialInstance(MaterialInstanceDynamic* NewAimPostProcessMaterialInstance);// 0x27df730
	void LookForHoveredActors();// 0x27df6b0
	bool IsTargetingModeEnabled();// 0x27df510
	bool IsAimedAtFriendly();// 0x27df4e0
	bool IsAimedAtEnemy();// 0x27df4b0
	KSWeaponComponent* GetWeaponComponent();// 0x27462b0
	KSWeaponAsset* GetWeaponAsset();// 0x27df480
	int GetTargetingIndex();// 0x27df3d0
	KSCharacter* GetOwningCharacter();// 0x27d3500
	Transform GetOverriddenOriginTransform();// 0x27df360
	Transform GetOriginTransform();// 0x27df2f0
	FName GetModeKey();// 0x27df2d0
	float GetHitScanRange();// 0x262bbc0
	MaterialInstanceDynamic* GetAimPostProcessMaterialInstance();// 0x27df2b0
	MaterialInterface* GetAimPostProcessMaterial();// 0x26de5d0
	void ExitTargetingMode();// 0x2791ca0
	void EnterTargetingMode();// 0x27df290
	KSWeaponTargetingModule* AddChildTargetingModule(KSWeaponAsset* NewTargetingModuleWeaponAsset, int ChildTargetingIndex, bool bUsesOverrideOriginTransform, MaterialInstanceDynamic* SharedAimPostProcessMaterialInstance);// 0x27df040

--------------------------------
Class: TargetingModuleTickFunction.TickFunction

--------------------------------
Class: KSAttachCosmeticInst_Reactive.KSWeaponAttachmentCosmeticInst.KSEquipmentCosmeticComponent.ActorComponent.Object
	bool bWasInitializedOnNewWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	int DemoModePreviewStateIndex;//[Offset: 0x204, Size: 1]
	KSWeaponSkeletalMeshComponent* WeaponMesh;//[Offset: 0x218, Size: 1]
	KSWeaponSkeletalMeshComponent*[] WeaponMeshes;//[Offset: 0x220, Size: 1]
	bool bEnableDemoPreviewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool bCosmeticUpdatesHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	enum CurrentWeaponState;//[Offset: 0x242, Size: 1]
	bool bOwningPawnInstigatedMostRecentDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243, Size: 1]
	bool bOwningWeaponInstigatedMostRecentDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	float DamageWithinTimePeriod;//[Offset: 0x248, Size: 1]
	TimerHandle IdleCooldownTimer;//[Offset: 0x250, Size: 1]
	TimerHandle DamageWithinTimePeriodTimer;//[Offset: 0x258, Size: 1]
	KSWeaponAttachment_Reactive* WepAttachReactive;//[Offset: 0x260, Size: 1]
	int ProgressionIntA;//[Offset: 0x268, Size: 1]
	int ProgressionIntB;//[Offset: 0x26c, Size: 1]
	int ProgressionIntC;//[Offset: 0x270, Size: 1]
	float ProgressionFloatA;//[Offset: 0x274, Size: 1]
	float ProgressionFloatB;//[Offset: 0x278, Size: 1]
	float ProgressionFloatC;//[Offset: 0x27c, Size: 1]
	bool bTrackAIsResetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bTrackBIsResetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bTrackCIsResetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	bool bTrackAShouldResetOnNewWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 1]
	bool bTrackBShouldResetOnNewWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool bTrackCShouldResetOnNewWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	bool bTrackAIsSaveLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x286, Size: 1]
	bool bTrackBIsSaveLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x287, Size: 1]
	bool bTrackCIsSaveLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	byte PersistentCacheA;//[Offset: 0x289, Size: 1]
	byte PersistentCacheB;//[Offset: 0x28a, Size: 1]
	byte PersistentCacheC;//[Offset: 0x28b, Size: 1]
	byte PersistentFlags;//[Offset: 0x28c, Size: 1]
	void WeaponPropAssigned();// 0xe7ee70
	void UnhideCosmetics();// 0x2cbecb0
	void TriggerCosmetic(enum Trigger);// 0x2cbecb0
	void SetSFXDampening(bool bShouldDampenSFX);// 0x2cbecb0
	void SetReactiveDemoMode(bool bSet);// 0x262ce20
	void SaveReactiveWrapProgression();// 0x2cbecb0
	void SaveIntProgression(enum DataCache, int InProgression, bool IsTimeSensitive);// 0x262c860
	void SaveFloatProgression(enum DataCache, float InProgression, bool IsTimeSensitive);// 0x262c750
	void ResetDamageWithinTimePeriod();// 0x1f04160
	void ResetCosmetic(enum ResetTrigger);// 0x2cbecb0
	void PlayerKilled(CombatEventInfo EventInfo);// 0x262c3e0
	void PlayerDownedOrKilled(CombatEventInfo EventInfo, bool bPlayerKilled);// 0x262c260
	void PlayerDowned(CombatEventInfo EventInfo, int ExpBonus);// 0x262c0e0
	void OwningPawnTakeDamage(KSCharacterFoundation* Character, DamageEffect Response);// 0x262bfa0
	void OwningPawnInstigatedDamage(out const CombatEventInfo DamageInfo);// 0x262be70
	void OwningPawnAchievedMultiDown(int DownCount);// 0x262bde0
	void OwningComponentStateChanged(const KSWeaponComponent* WeaponComponent, enum OldState, enum NewState);// 0x262bce0
	void OnWrapEventTriggered();// 0x2cbecb0
	void OnLoadedReactiveWrapProgression();// 0x2cbecb0
	void HideCosmetics();// 0x2cbecb0
	bool GetCurrentDemoState(out ReactiveWrapMilestoneDisplay DemoState);// 0x262ba10
	void AimModeChanged(const KSWeaponComponent* WeaponComponent, enum OldMode, enum NewMode);// 0x262b7e0

--------------------------------
Class: KSWeaponAttachmentCosmeticInst.KSEquipmentCosmeticComponent.ActorComponent.Object
	DataTable* DefaultAssetDataTable;//[Offset: 0x138, Size: 1]
	int DefaulAssetDataTablePriority;//[Offset: 0x140, Size: 1]
	KSWeaponAttachmentSkinDetails* SkinDetailsPtr;//[Offset: 0x148, Size: 1]
	bool bShouldOverrideDropMagOnParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	Transform DropMagSpawnTransformOverride;//[Offset: 0x190, Size: 1]
	Vector DropVelocityOverride;//[Offset: 0x1c0, Size: 1]
	bool bDisableMagDropOnParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bDropMultipleMags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	KSWeaponAttachment* AttachmentAsset;//[Offset: 0x1d0, Size: 1]
	GameplayTag AttachPoint;//[Offset: 0x1d8, Size: 1]
	KSWeaponComponent* ParentComponent;//[Offset: 0x1e0, Size: 1]
	KSEquipmentId ParentEquipmentId;//[Offset: 0x1e8, Size: 1]
	KSWeaponAsset* ParentWeaponAsset;//[Offset: 0x1f0, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	void OnRep_ParentEquipmentId();// 0x2691420
	void OnRep_AttachPoint();// 0x2691420
	void OnRep_AttachmentAsset();// 0x2691420
	void OnParentWeaponComponentInitialized();// 0x27cb0e0
	void OnParentWeaponComponentCosmeticUpdate();// 0x27cb0c0
	void OnComponentCosmeticUpdate(KSWeaponComponent* InComponent);// 0x27cb040
	bool IsInitialized();// 0x27cb020
	KSWeaponComponent* GetParentComponent();// 0x27cae60
	bool GetLoadedMeshAnimAnimOverrideData(out LoadedWeaponAttachmentAnimationData OutData);// 0x27cad20
	GameplayTag GetAttachPoint();// 0x27cab30
	KSWeaponAttachment* GetAttachmentAsset();// 0x27cab50
	void GetAccumulatedMeshAndAnimOverrideData(KSWeaponAsset* InWeaponAsset, out WeaponAttachmentAnimationData OutData);// 0x27caa20
	void EventOnInitialized();// 0x2635970

--------------------------------
Class: KSWeaponAttachmentSkinDetails.PrimaryDataAsset.DataAsset.Object
	KSWeaponAsset* Weapon;//[Offset: 0x30, Size: 1]
	class KSWeaponAttachmentCosmeticInst* AttachmentCosmetic;//[Offset: 0x58, Size: 1]
	DataTableInfo[] AssetOverrideTables;//[Offset: 0x80, Size: 1]

--------------------------------
Class: KSWeaponAttachment.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSWeaponAttachmentInstance* FunctionalClass;//[Offset: 0x280, Size: 1]
	class KSWeaponAttachmentCosmeticInst* CosmeticClass;//[Offset: 0x2a8, Size: 1]
	bool bRequiresAttachPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	GameplayTagContainer ValidAttachPoints;//[Offset: 0x2d8, Size: 1]
	KSAttachmentCompatRules* WeaponCompatibilityRules;//[Offset: 0x2f8, Size: 1]
	GameplayTagContainer CompatibleWeaponTypes;//[Offset: 0x300, Size: 1]
	bool bShouldBeInAttachmentCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	AttachmentCollection* GlobalWeaponAttachmentCollection;//[Offset: 0x328, Size: 1]
	bool RequiresAttachPoint();// 0x27c7520
	void GetValidAttachPoints(out GameplayTagContainer OutAttachPoints);// 0x27c7280
	KSWeaponAsset* GetSpecificCompatibleWeapon();// 0x27c7140
	class KSWeaponAttachmentInstance GetFunctionalClass();// 0x27c6810
	class KSWeaponAttachmentCosmeticInst GetCosmeticClass();// 0x27c6770
	bool CheckCompatibilityRules(const KSWeaponAsset* InWeaponAsset);// 0x27c64d0
	bool CanAttachTo(const KSWeapon* InWeapon, out GameplayTagContainer AvailableAttachPoints);// 0x27c6390

--------------------------------
Class: KSWeaponAttachmentInstance.ActorComponent.Object
	KSWeapon* WeaponOwner;//[Offset: 0xd0, Size: 1]
	KSWeaponAttachmentCosmeticInst* AttachmentCosmeticComponent;//[Offset: 0xd8, Size: 1]
	KSEquipRepInfo AttachPoint;//[Offset: 0xf8, Size: 1]
	KSWeaponAttachment* AttachmentAsset;//[Offset: 0x120, Size: 1]
	bool bPersistsOnWeaponDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	void SetPersistsOnWeaponDrop(bool bEnable);// 0x27d56c0
	void OnUnattached();// 0x1ec42c0
	void OnRep_AttachPoint();// 0x27cb0c0
	void OnRep_AttachmentAsset();// 0x27cb0e0
	void OnAttached();// 0x1ef9a90
	bool IsAttached();// 0x27d4e60
	bool GetPersistsOnWeaponDrop();// 0x26a2280
	KSWeapon* GetOwningWeapon();// 0x2688820
	GameplayTag GetAttachPoint();// 0x27d34c0
	KSWeaponAttachment* GetAttachmentAsset();// 0x27d3500

--------------------------------
Class: KSEquipRepInfo
	bool NoEquipPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	GameplayTag EquipPoint;//[Offset: 0x4, Size: 1]
	uint32 UpdateId;//[Offset: 0xc, Size: 1]
	KSEquipmentId ComponentId;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSEquipmentId
	enum Type;//[Offset: 0x0, Size: 1]
	uint16 EquipmentIdNumber;//[Offset: 0x2, Size: 1]

--------------------------------
Class: KSAttachmentCompatRules.Object
	bool IsWeaponAssetCompatible(const KSWeaponAsset* InWeaponAsset);// 0x2630550

--------------------------------
Class: AttachmentCollection.ItemCollection.PrimaryDataAsset.DataAsset.Object
	FText AttachmentCollectionName;//[Offset: 0x98, Size: 1]
	FText AttachmentCollectionDescription;//[Offset: 0xb0, Size: 1]
	void GetCompatibleAttachmentsForWeaponType(out const GameplayTag WeaponType, out KSWeaponAttachment*[] OutCompatibleAttachments);// 0x25fa630

--------------------------------
Class: ItemCollection.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 1]
	GameplayTagQuery CollectionQuery;//[Offset: 0x40, Size: 1]
	FName PrimaryAssetType;//[Offset: 0x88, Size: 1]

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 1]
	int ChunkId;//[Offset: 0x4, Size: 1]
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum CookRule;//[Offset: 0x9, Size: 1]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSWeaponAttachment_Reactive.KSWeaponAttachment.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool ReactiveWrapPreviewModeActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	FText ReactiveWrapPreviewDisplayDescription;//[Offset: 0x338, Size: 1]
	FName ProgressionTrackATitle;//[Offset: 0x350, Size: 1]
	FName ProgressionTrackBTitle;//[Offset: 0x358, Size: 1]
	FName ProgressionTrackCTitle;//[Offset: 0x360, Size: 1]
	ReactiveWrapMilestoneDisplay[] ReactiveWrapPreviewParameters;//[Offset: 0x368, Size: 1]
	int StartingMilestonePreviewIndex;//[Offset: 0x378, Size: 1]
	bool UtilizeOnComponentStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool TriggerOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	bool ResetOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e, Size: 1]
	bool ResetOnInactive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37f, Size: 1]
	bool ResetOnHolster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool ResetOnIdleTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	float IdleResetTimerDuration;//[Offset: 0x384, Size: 1]
	bool UtilizeOnAimModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool HideOnADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool UtilizeOnAnyPlayerDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool TriggerOnKillingAnEnemyWithAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	bool TriggerOnKillingAnEnemyWithYourReactiveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool ResetOnYourDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool UtilizeOnAnyPlayerDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool TriggerOnDowningAnEnemyWithAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool TriggerOnDowningAnEnemyWithYourReactiveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool ResetOnYourDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool UtilizeOnOwnedPawnInstigateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool TriggerOnDamagingAnEnemyWithAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool TriggerOnDamagingAnEnemyWithYourReactiveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool ResetOnOwnedPawnTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool TriggerOnDamageThresholdWithYourReactiveWeaponOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	float TargetTriggerDamageThreshold;//[Offset: 0x398, Size: 1]
	float DamageThresholdResetTimerDuration;//[Offset: 0x39c, Size: 1]
	bool UtilizeOnOwnedPawnTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool TriggerOnOwnedPawnTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool UtilizeOnMultiDownAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool TriggerOnMutlipleDownsWithAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	bool TriggerOnMutlipleDownsWithYourReactiveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	int TargetNumberOfDownsToAchieve;//[Offset: 0x3a8, Size: 1]

--------------------------------
Class: ReactiveWrapMilestoneDisplay
	FText PreviewMilestoneDescription;//[Offset: 0x0, Size: 1]
	float TargetProgressionValueA;//[Offset: 0x18, Size: 1]
	float TransitionSpeedA;//[Offset: 0x1c, Size: 1]
	float TargetProgressionValueB;//[Offset: 0x20, Size: 1]
	float TransitionSpeedB;//[Offset: 0x24, Size: 1]
	float TargetProgressionValueC;//[Offset: 0x28, Size: 1]
	float TransitionSpeedC;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: DamageEffect
	float Damage;//[Offset: 0x0, Size: 1]
	float AttemptedDamage;//[Offset: 0x4, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 1]
	Actor* DamageCauser;//[Offset: 0x10, Size: 1]
	Vector DamageOrigin;//[Offset: 0x18, Size: 1]
	bool bArmorBroke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float ArmorDurability;//[Offset: 0x28, Size: 1]
	bool bDamageResisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bDamageReduced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bDamageShielded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	Vector RelativeImpactLocation;//[Offset: 0x30, Size: 1]
	Vector_NetQuantizeNormal RelativeImpactNormal;//[Offset: 0x3c, Size: 1]
	FName BoneName;//[Offset: 0x48, Size: 1]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	float ArmorDamage;//[Offset: 0x54, Size: 1]

--------------------------------
Class: LoadedWeaponAttachmentAnimationData
	SkeletalMesh* WeaponAttachmentMesh;//[Offset: 0x0, Size: 1]
	AnimSequence* WeaponAttachmentSequence;//[Offset: 0x8, Size: 1]
	AnimMontage* Player3PHolsterMontage;//[Offset: 0x10, Size: 1]
	AnimMontage* Player3PRetrieveMontage;//[Offset: 0x18, Size: 1]
	AnimMontage* Player3PFireMontage;//[Offset: 0x20, Size: 1]
	AnimMontage* Player3PReloadMontage;//[Offset: 0x28, Size: 1]
	AimOffsetBlendSpace* Player3PStandingAimOffset;//[Offset: 0x30, Size: 1]
	AimOffsetBlendSpace* Player3PCrouchedAimOffset;//[Offset: 0x38, Size: 1]
	BlendSpace* Player3PStandingBlendSpace;//[Offset: 0x40, Size: 1]
	BlendSpace* Player3PCrouchedBlendSpace;//[Offset: 0x48, Size: 1]
	AnimSequence* Player3PStandingIdleSequence;//[Offset: 0x50, Size: 1]
	AnimSequence* Player3PCrouchedIdleSequence;//[Offset: 0x58, Size: 1]
	AnimMontage* Player1PFireMontage;//[Offset: 0x60, Size: 1]
	BlendSpace* Player1PStandingBlendSpace;//[Offset: 0x68, Size: 1]
	BlendSpace* Player1PCrouchedBlendSpace;//[Offset: 0x70, Size: 1]
	AimOffsetBlendSpace* Player1PStandingAimOffset;//[Offset: 0x78, Size: 1]
	AnimMontage* Player1PRetrieveMontage;//[Offset: 0x80, Size: 1]
	AnimMontage* Player1PReloadMontage;//[Offset: 0x88, Size: 1]
	class CameraShake* Player1PCameraShake;//[Offset: 0x90, Size: 1]
	class CameraShake* Player1PADSCameraShake;//[Offset: 0x98, Size: 1]
	AnimSequence* Player1PAdditiveStandGunPose;//[Offset: 0xa0, Size: 1]
	AnimSequence* Player1PAdditiveCrouchGunPose;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: WeaponAttachmentAnimationData.TableRowBase
	bool bUseDefaultIfNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x10, Size: 1]
	SkeletalMesh* WeaponAttachmentMesh;//[Offset: 0x38, Size: 1]
	AnimSequence* WeaponAttachmentSequence;//[Offset: 0x60, Size: 1]
	AnimMontage* Player3PHolsterMontage;//[Offset: 0x88, Size: 1]
	AnimMontage* Player3PRetrieveMontage;//[Offset: 0xb0, Size: 1]
	AnimMontage* Player3PFireMontage;//[Offset: 0xd8, Size: 1]
	AnimMontage* Player3PReloadMontage;//[Offset: 0x100, Size: 1]
	AimOffsetBlendSpace* Player3PStandingAimOffset;//[Offset: 0x128, Size: 1]
	AimOffsetBlendSpace* Player3PCrouchedAimOffset;//[Offset: 0x150, Size: 1]
	BlendSpace* Player3PStandingBlendSpace;//[Offset: 0x178, Size: 1]
	BlendSpace* Player3PCrouchedBlendSpace;//[Offset: 0x1a0, Size: 1]
	AnimSequence* Player3PStandingIdleSequence;//[Offset: 0x1c8, Size: 1]
	AnimSequence* Player3PCrouchedIdleSequence;//[Offset: 0x1f0, Size: 1]
	AnimMontage* Player1PFireMontage;//[Offset: 0x218, Size: 1]
	BlendSpace* Player1PStandingBlendSpace;//[Offset: 0x240, Size: 1]
	BlendSpace* Player1PCrouchedBlendSpace;//[Offset: 0x268, Size: 1]
	AimOffsetBlendSpace* Player1PStandingAimOffset;//[Offset: 0x290, Size: 1]
	AnimMontage* Player1PRetrieveMontage;//[Offset: 0x2b8, Size: 1]
	AnimMontage* Player1PReloadMontage;//[Offset: 0x2e0, Size: 1]
	class CameraShake* Player1PCameraShake;//[Offset: 0x308, Size: 1]
	class CameraShake* Player1PADSCameraShake;//[Offset: 0x330, Size: 1]
	AnimSequence* Player1PAdditiveStandGunPose;//[Offset: 0x358, Size: 1]
	AnimSequence* Player1PAdditiveCrouchGunPose;//[Offset: 0x380, Size: 1]

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: AncillaryWeaponMeshInfo
	SkeletalMesh* Mesh;//[Offset: 0x0, Size: 1]
	FName DefaultAttachSocket;//[Offset: 0x8, Size: 1]
	FName DefaultDetachSocket;//[Offset: 0x10, Size: 1]

--------------------------------
Class: RecoilProfileAsset.DataAsset.Object
	RecoilProfile RecoilProfile;//[Offset: 0x30, Size: 1]
	bool DontPlayRecoilMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]

--------------------------------
Class: RecoilProfile
	RecoilInfo PelvisRecoil;//[Offset: 0x0, Size: 1]
	RecoilInfo SpineRecoil;//[Offset: 0x60, Size: 1]
	RecoilInfo NeckRecoil;//[Offset: 0xc0, Size: 1]
	RecoilInfo HandRecoil;//[Offset: 0x120, Size: 1]
	RecoilInfo RightClavicleRecoil;//[Offset: 0x180, Size: 1]
	float Spine1RecoilAlpha;//[Offset: 0x1e0, Size: 1]
	float Spine2RecoilAlpha;//[Offset: 0x1e4, Size: 1]
	float Spine3RecoilAlpha;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: RecoilInfo
	float TimeDurationPos;//[Offset: 0x0, Size: 1]
	float TimeDurationRot;//[Offset: 0x4, Size: 1]
	Vector RotAmplitude;//[Offset: 0x8, Size: 1]
	Vector RotFrequency;//[Offset: 0x14, Size: 1]
	RecoilParams RotParams;//[Offset: 0x20, Size: 1]
	Vector LocAmplitude;//[Offset: 0x30, Size: 1]
	Vector LocFrequency;//[Offset: 0x3c, Size: 1]
	RecoilParams LocParams;//[Offset: 0x48, Size: 1]
	float BlendInTime;//[Offset: 0x58, Size: 1]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool Mirrored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]

--------------------------------
Class: RecoilParams
	Vector PhaseOffset;//[Offset: 0x0, Size: 1]
	byte X;//[Offset: 0xc, Size: 1]
	byte Y;//[Offset: 0xd, Size: 1]
	byte Z;//[Offset: 0xe, Size: 1]

--------------------------------
Class: KSPlayerModInstance.ActorComponent.Object
	MulticastInlineDelegateProperty OnModInstRemoved;//[Size: 1]
	bool ModOverridesActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnModTriggered;//[Size: 1]
	bool bPreventModInitialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	KSPlayerModAttachment*[] ModAttachments;//[Offset: 0x100, Size: 1]
	KSPlayerModManager* OwningPlayerModManager;//[Offset: 0x110, Size: 1]
	KSCharacter* OwnerCharacter;//[Offset: 0x118, Size: 1]
	KSCharacterFoundation* OwnerCharacterFoundation;//[Offset: 0x128, Size: 1]
	KSPlayerMod* ModAsset;//[Offset: 0x130, Size: 1]
	KSPlayerState* ModInstigator;//[Offset: 0x138, Size: 1]
	enum ModSource;//[Offset: 0x140, Size: 1]
	Actor* ActorInstigator;//[Offset: 0x144, Size: 1]
	int InstanceCount;//[Offset: 0x14c, Size: 1]
	int LocalInstanceCount;//[Offset: 0x150, Size: 1]
	bool bUsesDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool bDisplaysDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	bool bUseAssetDataTableManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	DynamicSkinTable* AssetDataTableManager;//[Offset: 0x170, Size: 1]
	DataTableInfo[] PersistentSkinDataTables;//[Offset: 0x178, Size: 1]
	DataTableInfo[] UISkinDataTables;//[Offset: 0x188, Size: 1]
	bool bLatencyElapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	KSPlayerModInputBinding[] InputActions;//[Offset: 0x1c0, Size: 1]
	bool UsesDuration();// 0x2747bc0
	void TryTransferPlayerState(KSPlayerState* OldPlayerState, KSPlayerState* NewPlayerState);// 0x2747af0
	bool StopAnimationFromEvent(FName AnimEventName, KSCharacterAnimInst* CharAnimInstance);// 0x2cbecb0
	bool ShouldDisplayIcon(out const DamageEvent DamageEvent, enum HitLocation, out const CombatEventInfo DamageInfo);// 0x2747920
	void SetActorInstigator(Actor* InActorInstigator);// 0x2747890
	void RemovePlayerModAttachment(const KSPlayerModAttachment* Attachment);// 0x2747810
	bool ReactsToAnimationEvent(FName AnimEventName, out int Priority);// 0x2747730
	void PlayAnimationFromEvent(FName AnimEventName, KSCharacterAnimInst* CharAnimInstance);// 0x2cbecb0
	bool OwnerIsLocal();// 0x2747700
	bool OwnerHasAuthority();// 0x27476d0
	bool OverrideInteraction(out const interface classNone Interactable, out float Duration, out class KSInteractionType Type);// 0x2747580
	void OnRep_OwnerCharacterFoundation();// 0xe7ee70
	void OnRep_ModAsset();// 0x1f1aa80
	void OnRep_InstanceCount();// 0x2747560
	void OnOwnerDied(const KSCharacterFoundation* KillerCharacter, const KSCharacterFoundation* KilledCharacter);// 0x2747490
	void OnNewCharacterFoundation();// 0x27473f0
	void OnModInitialized();// 0x2cbecb0
	void OnModAttachmentRemoved(const KSPlayerModAttachment* Attachment);// 0x2747360
	void OnModAttachmentAdded(const KSPlayerModAttachment* Attachment);// 0x27472d0
	void OnInstanceCountChanged(int DeltaInstances);// 0x2747240
	void OnInputActionTriggered(FName ActionName, bool bReleasedAction);// 0x2cbecb0
	void OnEstimatedLatencyElapsed();// 0x2747220
	void OnCharacterFoundationOwnerDeath(const KSCharacterFoundation* Killer, const KSCharacterFoundation* Killed);// 0x2747160
	float ModifyDamageTaken(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor, enum HitLocation);// 0x2746db0
	float ModifyDamageDealt(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor, enum HitLocation);// 0x2746bd0
	float ModifyArmorDamageDealt(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor, enum HitLocation);// 0x27469f0
	void ModEventReceived(FName ModEvent);// 0x2746960
	bool IsBonusDamage(out const DamageEvent DamageEvent, enum HitLocation);// 0x2746870
	void InitializeMod();// 0xe7edf0
	bool HasEstimatedLatencyElapsed();// 0x2746850
	void GivePlayerModAttachment(const KSPlayerModAttachment* Attachment);// 0x27467d0
	KSVehicleBase* GetVehicleOwner();// 0x27467a0
	KSPlayerState* GetPlayerStateOwner();// 0x27465d0
	KSPlayerModManager* GetOwningPlayerModManager();// 0x25fa780
	enum GetModType();// 0x2746590
	enum GetModSource();// 0x2746570
	KSPlayerState* GetModInstigator();// 0x2746550
	KSPlayerMod* GetModAsset();// 0x2746530
	int GetInstanceCount();// 0x2746510
	void GetDuration(out float Duration, out float RemainingTime, out bool UsesDuration);// 0x27463e0
	int GetClampedInstanceCount();// 0x27462d0
	KSCharacter* GetCharacterOwner();// 0x27462b0
	KSCharacterFoundation* GetCharacterFoundationOwner();// 0x2746290
	float GetArmorPassthrough(out const DamageEvent DamageEvent, enum HitLocation);// 0x27460c0
	void FinishAssetPreload();// 0x27460a0
	bool DisplaysDuration();// 0x2746080
	void BroadcastModTriggeredInternal();// 0x2746060
	void BroadcastModTriggered();// 0x270a400
	bool AreModOverridesActive();// 0x26cc610

--------------------------------
Class: KSPlayerModAttachment.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSPlayerModAttachmentProperty[] AttachmentProperties;//[Offset: 0x280, Size: 1]
	KSPlayerModAttachmentCustomProperty[] CustomAttachmentProperties;//[Offset: 0x290, Size: 1]
	KSWeaponAttachment*[] WeaponAttachments;//[Offset: 0x2a0, Size: 1]
	KSPlayerMod* ParentMod;//[Offset: 0x2b0, Size: 1]
	FString[] GetAvailablePropertyOptions();// 0x27461b0

--------------------------------
Class: KSPlayerModAttachmentProperty.KSPlayerModAttachmentPropertyBase.KSPlayerModPropertyBase
	FName Name;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSPlayerModAttachmentPropertyBase.KSPlayerModPropertyBase
	bool bShouldShowAttachmentType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum ModAttachmentType;//[Offset: 0x21, Size: 1]

--------------------------------
Class: KSPlayerModPropertyBase
	bool bIsCustomProperty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int Priority;//[Offset: 0x4, Size: 1]
	enum PropertyType;//[Offset: 0x8, Size: 1]
	int int32Value;//[Offset: 0xc, Size: 1]
	float FloatValue;//[Offset: 0x10, Size: 1]
	bool boolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	class CameraShake* CameraShakeValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSPlayerModAttachmentCustomProperty.KSPlayerModAttachmentPropertyBase.KSPlayerModPropertyBase
	FName Name;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSPlayerMod.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool bDisplayIconOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bDisplayIconOnDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bDisplayIconOnElim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	KSPlayerModProperty[] ModProperties;//[Offset: 0x288, Size: 1]
	KSPlayerModCustomProperty[] CustomModProperties;//[Offset: 0x298, Size: 1]
	KSPlayerModPropertyDamageFilter[] DamagePropertyFilters;//[Offset: 0x2a8, Size: 1]
	bool bIsPerk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	bool bCanBePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	class KSPlayerModInstance* FunctionalClass;//[Offset: 0x2c0, Size: 1]
	bool bIsInstanceReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	int ModUnlockTier;//[Offset: 0x2ec, Size: 1]
	enum AttachmentInteraction;//[Offset: 0x2f0, Size: 1]
	bool bSingleInstanceStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	bool bStacksPerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	bool bRemoveAllInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 1]
	int MaxStackCount;//[Offset: 0x2f4, Size: 1]
	bool bCapInstanceCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	enum ModType;//[Offset: 0x2f9, Size: 1]
	bool bShouldAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 1]
	bool bShouldDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb, Size: 1]
	GameplayTagContainer EffectCategories;//[Offset: 0x300, Size: 1]
	FName[] TriggerEvents;//[Offset: 0x320, Size: 1]
	<FName,int> AnimEventPriorityMap;//[Offset: 0x330, Size: 1]
	bool bShouldLagCompensateEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool bGiveModToAllControlledPawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	bool bCanActivateOnZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 1]
	bool bCanEverActivateDuringDodgeroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 1]
	KSPlayerModAttachment*[] AutomaticAttachments;//[Offset: 0x388, Size: 1]
	bool bCheckInstigatorOwnership;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool ShouldRemoveAllInstances();// 0x273ebb0
	bool ShouldLagCompensateEffects();// 0x273eb90
	bool ShouldGiveModToAllControlledPawns();// 0x273eb70
	bool IsSingleInstanceStack();// 0x273ea10
	bool IsPerk();// 0x273e9f0
	bool IsModTemporary();// 0x273e9c0
	bool IsInstanceReplicated();// 0x273e9a0
	FName[] GetTriggerEvents();// 0x273e860
	bool GetPerkCategory(out PerkCategory* FoundPerkCategory);// 0x273e750
	int GetModUnlockTier();// 0x273e730
	enum GetModType();// 0x273e710
	enum GetModInteraction();// 0x26bc170
	int GetMaxStackCount();// 0x273e680
	class KSPlayerModInstance GetFunctionalClass();// 0x273e620
	GameplayTagContainer GetEffectCategories();// 0x273e5a0
	FString[] GetDamagePropertyOptions();// 0x273e4c0
	FString[] GetAvailablePropertyOptions();// 0x273e4c0

--------------------------------
Class: PerkCategory.ItemCollection.PrimaryDataAsset.DataAsset.Object
	FText PerkCategoryName;//[Offset: 0x98, Size: 1]
	FText PerkCategoryDescription;//[Offset: 0xb0, Size: 1]
	class Object* AssociatedPerkTree;//[Offset: 0xc8, Size: 1]
	LinearColor ThemeColorLight;//[Offset: 0xf0, Size: 1]
	LinearColor ThemeColorDark;//[Offset: 0x100, Size: 1]
	Texture2D* PerkCategoryIcon;//[Offset: 0x120, Size: 1]
	Texture2D* GetSoftCategoryIcon();// 0x27ea860

--------------------------------
Class: KSPlayerModProperty.KSPlayerModPropertyBase
	FName Name;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSPlayerModCustomProperty.KSPlayerModPropertyBase
	FName Name;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSPlayerModPropertyDamageFilter
	FName PropertyName;//[Offset: 0x0, Size: 1]
	class DamageType[] ValidDamageTypes;//[Offset: 0x8, Size: 1]
	class DamageType[] BlacklistedDamageTypes;//[Offset: 0x18, Size: 1]
	enum[] ValidHitLocations;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSPlayerModManager.Info.Actor.Object
	bool bOnlyChargeModsWhenAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	KSPlayerState* PlayerStateOwner;//[Offset: 0x228, Size: 1]
	KSPlayerModInstance*[] ActiveMods;//[Offset: 0x248, Size: 1]
	void SetPlayerStateOwner(KSPlayerState* NewPlayerState);// 0x27514b0
	bool RemoveModsOfSource(enum ModSource);// 0x2750f90
	bool RemoveModInstance(KSPlayerModInstance* ModInst, bool bRemoveAll);// 0x2750ed0
	bool RemoveMod(KSPlayerMod* Mod, bool RemoveAll);// 0x2750e10
	void RemoveAndDestroyPlayerModManager();// 0x264f950
	bool HasModOfSource(const KSPlayerMod* TestPlayerMod, enum TestSource);// 0x2750030
	bool HasModAny(out const KSPlayerMod*[] TestPlayerMods);// 0x274ff70
	bool HasMod(const KSPlayerMod* TestPlayerMod);// 0x274fee0
	bool GiveModInstance(KSPlayerMod* Mod, KSPlayerState* ModInstigator, out KSPlayerModInstance* Instance, bool Unique, enum ModSource, KSCharacterFoundation* ModRecipient);// 0x274fcf0
	void GiveModAttachment(const KSPlayerModAttachment* Attachment, const KSPlayerMod* TargetMod);// 0x274fc30
	bool GiveMod(KSPlayerMod* Mod, KSPlayerState* ModInstigator, bool Unique, enum ModSource);// 0x274fad0
	KSPlayerState* GetPlayerStateOwner();// 0x274f670
	bool GetModInstancesOfType(enum Type, out KSPlayerModInstance*[] OutMods);// 0x274f4e0
	bool GetModInstancesByModAsset(const KSPlayerMod* InModAsset, KSPlayerState* ModInstigator, out KSPlayerModInstance*[] OutMods);// 0x274f3c0
	bool GetModInstances(out KSPlayerModInstance*[] OutMods);// 0x274f300
	bool GetGameModeMods(out KSModInst_Activated*[] OutMods, bool bIncludeChildMods);// 0x274f170
	bool GetActivatableMods(out KSModInst_Activated*[] OutMods, bool bIncludeChildMods);// 0x274ef70
	bool AnyActivatableModsActive();// 0x274e790
	void AddDefaultPerSecondCharge();// 0x274e770
	bool ActivatableModAtIndexActive(int AbilityIndex);// 0x274e6e0
	bool ActivatableGameModeModAtIndexActive(int AbilityIndex);// 0x274e650

--------------------------------
Class: KSPlayerState.PGame_PlayerState.PlayerState.Info.Actor.Object
	bool bIsDemoRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	MulticastInlineDelegateProperty OnCharacterOwnerChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnBackupCharacterOwnerChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendlyFireInflicted;//[Size: 1]
	float TrackedFriendlyFireDamage;//[Offset: 0x370, Size: 1]
	bool bReverseFriendlyFireEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	float PredictionFudge;//[Offset: 0x378, Size: 1]
	float MaxPredictionPing;//[Offset: 0x37c, Size: 1]
	MulticastInlineDelegateProperty OnTrackedActorBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnTrackedActorEnd;//[Size: 1]
	enum PlayerType;//[Offset: 0x3a0, Size: 1]
	KSTeamState* r_Team;//[Offset: 0x3a8, Size: 1]
	int BackupTeamNum;//[Offset: 0x3b8, Size: 1]
	bool bHasServerTravelled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	MulticastInlineDelegateProperty OnKSPlayerStateTeamChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnKSPlayerStateNameChangedDel;//[Size: 1]
	KSCharacterBase* CharacterOwner;//[Offset: 0x410, Size: 1]
	KSCharacterBase* BackupCharacterOwner;//[Offset: 0x418, Size: 1]
	KSCharacterFoundation* CharacterFoundationOwner;//[Offset: 0x420, Size: 1]
	enum EliminatedState;//[Offset: 0x458, Size: 1]
	MulticastInlineDelegateProperty OnPlayerEliminated;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerInPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerLeftPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerKilled;//[Size: 1]
	bool bDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	MulticastInlineDelegateProperty OnPlayerDownedChangedDel;//[Size: 1]
	Vector LastKnownLocation;//[Offset: 0x4b8, Size: 1]
	int LocalSideNum;//[Offset: 0x4c4, Size: 1]
	bool bUIRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool bMarkedUIIrrelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	SerializedMctsNetId r_ReplicatedNetId;//[Offset: 0x4d0, Size: 1]
	MulticastInlineDelegateProperty OnRespawnTicketsChanged;//[Size: 1]
	int RespawnTickets;//[Offset: 0x500, Size: 1]
	bool bIsPendingRepossession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	KSTimerComponent* RespawnTimer;//[Offset: 0x508, Size: 1]
	KSTimerComponent* DisallowGiveUpTimer;//[Offset: 0x510, Size: 1]
	MulticastInlineDelegateProperty OnRespawnTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnTimerComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnDisallowGiveUpTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnDisallowGiveUpTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnDisallowGiveUpTimerComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMultiDownAchievedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnMultiDownAchievedWithDataDel;//[Size: 1]
	int Kills;//[Offset: 0x5c0, Size: 1]
	int deaths;//[Offset: 0x5c4, Size: 1]
	int Assists;//[Offset: 0x5c8, Size: 1]
	int downs;//[Offset: 0x5cc, Size: 1]
	int DownSpree;//[Offset: 0x5d0, Size: 1]
	int Revives;//[Offset: 0x5d4, Size: 1]
	int eliminations;//[Offset: 0x5d8, Size: 1]
	int Headshots;//[Offset: 0x5dc, Size: 1]
	int Hacks;//[Offset: 0x5e0, Size: 1]
	int Dehacks;//[Offset: 0x5e4, Size: 1]
	int MitigatedDamageDealt;//[Offset: 0x5e8, Size: 1]
	int MitigatedDamageReceived;//[Offset: 0x5ec, Size: 1]
	int RawDamageDealt;//[Offset: 0x5f0, Size: 1]
	int RawDamageReceived;//[Offset: 0x5f4, Size: 1]
	int RoundsPlayed;//[Offset: 0x5f8, Size: 1]
	int TimeAlive;//[Offset: 0x5fc, Size: 1]
	int timePlayed;//[Offset: 0x600, Size: 1]
	MulticastInlineDelegateProperty OnUIRelevantPlayerStateChangedDel;//[Size: 1]
	KSScoreChangeList ScoreChangeList;//[Offset: 0x630, Size: 1]
	KSPlayerMatchStats* PreviewRecordedStats;//[Offset: 0x6c0, Size: 1]
	int Money;//[Offset: 0x6c8, Size: 1]
	int LastMoney;//[Offset: 0x6cc, Size: 1]
	MulticastInlineDelegateProperty OnMoneyEarned;//[Size: 1]
	MulticastInlineDelegateProperty OnMoneyChanged;//[Size: 1]
	bool bMoneyGivesCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	int cash;//[Offset: 0x6f4, Size: 1]
	int LastCash;//[Offset: 0x6f8, Size: 1]
	bool bHasReceivedStartingCash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	int TotalCashEarned;//[Offset: 0x700, Size: 1]
	int LastCashEarned;//[Offset: 0x704, Size: 1]
	int InitialCash;//[Offset: 0x708, Size: 1]
	MulticastInlineDelegateProperty OnCashChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCashEarnedChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCashChangeEvent;//[Size: 1]
	KSCashChangeList CashChangeList;//[Offset: 0x740, Size: 1]
	MulticastInlineDelegateProperty OnItemPickedUpBySelf;//[Size: 1]
	MulticastInlineDelegateProperty OnItemPickedUpByTeam;//[Size: 1]
	bool bShouldRestoreInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	KSPlayerStateAssistant* PlayerStateAssistant;//[Offset: 0x808, Size: 1]
	KSPlayerMod*[] ModsToRestoreOnReactivated;//[Offset: 0x810, Size: 1]
	MulticastInlineDelegateProperty OnPlayerModCharge;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerModActivationChange;//[Size: 1]
	MulticastInlineDelegateProperty OnModAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnModRemovedDel;//[Size: 1]
	KSSpecialty*[] Specialties;//[Offset: 0x890, Size: 1]
	MulticastInlineDelegateProperty OnJobChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnJobChangedWithState;//[Size: 1]
	KSJobItem* JobItem;//[Offset: 0x8c0, Size: 1]
	int JobMasteryXpLevel;//[Offset: 0x8c8, Size: 1]
	MulticastInlineDelegateProperty OnJobLoadFinishedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnJobMasteryXpLevelChanged;//[Size: 1]
	KSSkinBundle* SkinItem;//[Offset: 0x910, Size: 1]
	MulticastInlineDelegateProperty OnSkinChanged;//[Size: 1]
	KSLoadoutClass* LoadoutClass;//[Offset: 0x928, Size: 1]
	KSItemDrop*[] ItemsDroppedOnDeath;//[Offset: 0x940, Size: 1]
	KSCharacterGender Gender;//[Offset: 0x968, Size: 1]
	KSCharacterGender LocalGender;//[Offset: 0x96a, Size: 1]
	GameplayTagContainer SkinTagContainer;//[Offset: 0x970, Size: 1]
	bool bStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8, Size: 1]
	FString[] AllyWidgetPoolName;//[Offset: 0x9b0, Size: 1]
	MulticastInlineDelegateProperty OnShopItemPurchased;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemRefunded;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemActive;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemInactive;//[Size: 1]
	MulticastInlineDelegateProperty OnPersistentPlayerDataChanged;//[Size: 1]
	bool bPollInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	bool bHasVoted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 1]
	class KSPollBase* CurrentPollType;//[Offset: 0xa38, Size: 1]
	KSPollData CachedPollData;//[Offset: 0xa40, Size: 1]
	bool bCachedLocallyViewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	MulticastInlineDelegateProperty OnCharacterLocalViewChange;//[Size: 1]
	Actor*[] StimulatingObjects;//[Offset: 0xa68, Size: 1]
	KSRevealManager* RevealManager;//[Offset: 0xa78, Size: 1]
	MulticastInlineDelegateProperty OnActivityEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnCombatActivityEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetedActivityEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponActivityEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnRevealEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnInstigatedDamage;//[Size: 1]
	MulticastInlineDelegateProperty OnInstigatedPreDamage;//[Size: 1]
	MulticastInlineDelegateProperty OnAccoladeActivityTrigger;//[Size: 1]
	MulticastInlineDelegateProperty OnInstigatedHeal;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponReloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponFiredPreDamage;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponFiredPostDamage;//[Size: 1]
	bool bBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 1]
	int SavedHumanPlayerId;//[Offset: 0xb44, Size: 1]
	<FName,float> ActionTimestampMap;//[Offset: 0xb48, Size: 1]
	<int64,float> LastDamagedByPlayerTimestampMap;//[Offset: 0xb98, Size: 1]
	<int,int> CachedItemValueMap;//[Offset: 0xbe8, Size: 1]
	<FString,float> ActivityBehaviorCache;//[Offset: 0xc38, Size: 1]
	KSVehicleBase* VehicleOwner;//[Offset: 0xc88, Size: 1]
	MulticastInlineDelegateProperty OnCharacterFoundationPossessionChangedDel;//[Size: 1]
	bool WasPreviouslyAlive();// 0x275fe70
	void UpdatePollVotes(KSPollData NewPollData);// 0x275fdd0
	void TryToBroadCastUIRelevantInfoHasChanged();// 0x275fdb0
	void TriggerAccoladeActivityEvent(const KSAccoladeTracker* AccoladeTracker);// 0x275fd20
	bool SpendCash(int cost);// 0x275fc90
	void SpawnedDropDestroyed(Actor* Drop);// 0x275fc10
	void SetTimestampForActionTag(out const GameplayTag ActionTag);// 0x275fb80
	void SetTimestampForAction(out const FName ActionString);// 0x275faf0
	void SetRevealManager(KSRevealManager* NewRevealManager);// 0x275f9f0
	void SetPlayerStateAssistant(KSPlayerStateAssistant* InPlayerStateAssistant);// 0x275f970
	void SetMoney(int NewAmount);// 0x275f8f0
	void SetGiveUpEnabled(bool bAllowed);// 0x275f860
	void SetGameShopEnabled(bool bEnable);// 0x275f7d0
	void SetDamageTimestamp(const int64 InPlayerId);// 0x275f750
	void SetCash(int NewAmount, FText Reason);// 0x275f630
	void SetCachedValueForKey(FString InKey, float InValue);// 0x275f550
	void SetCachedValueForItemId(int ItemId, int Value);// 0x275f490
	void ServerPlayerProposePoll(FString PollTypeId);// 0x275f320
	void ServerPlayerCastVote(bool bVoteInFavor);// 0x275f290
	void ServerChangeMobileArmoryLoadoutIndex(int NewArmoryLoadoutIndex);// 0x275f1e0
	void Server_BroadcastPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x275f3c0
	void RespawnTimerTick(float Seconds);// 0x275f160
	void RespawnTimerComplete();// 0x275f140
	void RespawnTimerActive(bool bActive);// 0x275f0b0
	void ResetElimination();// 0x275f090
	bool RemoveModsOfSource(enum ModSource);// 0x275f000
	bool RemoveModInstance(KSPlayerModInstance* ModInst, bool bRemoveAll, KSCharacterFoundation* ModRecipient);// 0x275eef0
	bool RemoveMod(KSPlayerMod* Mod, bool RemoveAll, KSCharacterFoundation* ModRecipient);// 0x275ede0
	void RecordPreviouslyAlive(bool PlayerAliveNow);// 0x275ed50
	void RebindRestoreMods();// 0x275ed30
	void PollEnded(KSPollResults PollResults);// 0x275ec60
	bool PlayerProposePoll(FString PollTypeId);// 0x275ebb0
	void PlayerCastVote(bool bVoteInFavor);// 0x275eb20
	void OnTeamUpdated();// 0x1f2b610
	void OnSideNumUpdated();// 0x1f2b8d0
	void OnReverseFriendlyFireEnabled();// 0x2cbecb0
	void OnRep_TotalCashEarned();// 0x275eb00
	void OnRep_Specialties();// 0x275ea20
	void OnRep_SkinItem();// 0x275eae0
	void OnRep_RespawnTimer();// 0x275eac0
	void OnRep_RespawnTickets();// 0x275ea80
	void OnRep_PlayerType();// 0x1f2b890
	void OnRep_Money();// 0x275ea60
	void OnRep_MctsNetId();// 0x275ea40
	void OnRep_LoadoutClass();// 0x275ea20
	void OnRep_JobMasteryXpLevel();// 0x275ea00
	void OnRep_JobItem();// 0x275e9e0
	void OnRep_HasVoted();// 0x275e9c0
	void OnRep_Gender();// 0x275e9a0
	void OnRep_Eliminated();// 0x1f16430
	void OnRep_Downed();// 0x1f2b930
	void OnRep_DisallowGiveUpTimer();// 0x275e980
	void OnRep_CurrentPollType();// 0x275e960
	void OnRep_Cash();// 0x275e940
	void OnRep_CachedPollData();// 0x275e920
	void OnJobMasteryInventoryUpdated(out const InventoryId InventoryId);// 0x275e750
	void OnDeathDrop(KSItem* InItem, KSItemDrop* InDrop);// 0x275e690
	void NotifyWeaponReloaded();// 0x275e660
	void NotifyWeaponFiredPreDamage();// 0x275e630
	void NotifyWeaponFiredPostDamage();// 0x275e600
	void NotifyWeaponFired(const KSWeapon* InWeapon);// 0x275e550
	void NotifyTearGasDisorientOther(const KSCharacterFoundation* InTargetCharacter);// 0x275e4a0
	void NotifySemtexStuckToPlayer(const KSCharacter* InTargetCharacter);// 0x275e3f0
	void NotifyScoreChange(KSScoreChangeEvent Event);// 0x275e2d0
	void NotifySavedTeammate();// 0x275e270
	void NotifyRogueLinked(const KSCharacter* InTargetCharacter);// 0x275e1c0
	void NotifyRevivedOther(const KSCharacter* InTargetCharacter);// 0x275e110
	void NotifyRevealedOther(out const KSRevealInfo InRevealInfo);// 0x275dfe0
	void NotifyReplenishTriggered();// 0x275df80
	void NotifyQuickAndQuietTriggered();// 0x275df20
	void NotifyPointScored();// 0x275dec0
	void NotifyPointCaptured();// 0x275de60
	void NotifyPlayerHitByEMP(out const CombatEventInfo DamageInfo);// 0x275dcc0
	void NotifyObjectiveInteractionCompleted();// 0x275dc60
	void NotifyMeleeWeaponThrown();// 0x275dc00
	void NotifyMedDroneReviveOther(const KSCharacter* InTargetCharacter);// 0x275db50
	void NotifyLifedrainTriggered();// 0x275daf0
	void NotifyLeftBattleZoneCircle();// 0x275da90
	void NotifyInstigatedPreDamage(out const CombatEventInfo DamageInfo);// 0x275d910
	void NotifyInstigatedHeal(const KSCharacterBase* InHealedCharacter, float HealAmount);// 0x275d830
	void NotifyInstigatedDamage(out const CombatEventInfo DamageInfo);// 0x275d6b0
	void NotifyHypeMeterHealedPlayer(const KSCharacter* InTargetCharacter);// 0x275d600
	void NotifyEnemyHacked();// 0x275d5a0
	void NotifyEnemyEquipmentWasEMPDisabled();// 0x275d540
	void NotifyEnemyAbilityWasEMPDisabled();// 0x275d4e0
	void NotifyElusiveTriggered();// 0x275d480
	void NotifyEliminatedOther(const KSCharacter* InTargetCharacter);// 0x275d3d0
	void NotifyDangerCloseReviveOther(const KSCharacter* InTargetCharacter);// 0x275d320
	void NotifyCubeDisarmed();// 0x275d2c0
	void NotifyCubeArmed();// 0x275d260
	void NotifyCrateOpened();// 0x275d200
	void NotifyCashEarned();// 0x275d1a0
	void NotifyCashChange(KSScoreChangeEvent Event);// 0x275d080
	void NotifyBuildDeployed(const KSWeapon* InWeapon);// 0x275cfd0
	void NotifyBriefcaseUsedByOther();// 0x275cf70
	void NotifyBombDisarmed();// 0x275cf10
	void NotifyBombArmed();// 0x275ceb0
	void NotifyBlindedOther(const KSCharacterFoundation* InTargetCharacter);// 0x275ce00
	void NotifyAssistDownOther(const KSCharacter* InTargetCharacter);// 0x275cd50
	void NotifyAPSDestroyedProjectile();// 0x275cbf0
	void NotifyActivityTick(out const GameplayTag ActivityEventTag);// 0x275ccb0
	void NotifyAbilityUsed();// 0x275cc50
	void NetMulticast_BroadcastPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x275cb20
	void LoadoutSetSkin();// 0x275cb00
	void LeavePlay();// 0x275cae0
	bool IsWaitingForGiveUp();// 0x275cab0
	bool IsUIRelevant();// 0x275ca90
	bool IsReverseFriendlyFireEnabled();// 0x275ca60
	bool IsRespawning();// 0x275ca30
	bool IsPollInProgress();// 0x275ca10
	bool IsPlayer();// 0x275c9e0
	bool IsInPlay();// 0x275c930
	bool IsInParty();// 0x275c900
	bool IsIndependentHuman();// 0x275c9a0
	bool IsIndependentBot();// 0x275c960
	bool IsEliminated();// 0x275c8d0
	bool IsDowned();// 0x275c8a0
	bool IsCharacterLocallyViewed();// 0x275c870
	bool IsBackfilling();// 0x275c850
	bool IsBackfilledHuman();// 0x275c810
	bool IsBackfilledBot();// 0x275c7d0
	bool IsActorStimulatingPlayer(const Actor* Actor);// 0x275c740
	bool HasRole(enum RoleToCheck);// 0x275c5e0
	bool HasModAny(out const KSPlayerMod*[] TestPlayerMods, const KSCharacterFoundation* ModRecipient);// 0x275c4e0
	bool HasMod(const KSPlayerMod* TestPlayerMod, const KSCharacterFoundation* ModRecipient);// 0x275c420
	bool GiveModInstance(KSPlayerMod* Mod, KSPlayerState* ModInstigator, out KSPlayerModInstance* Instance, bool Unique, KSCharacterFoundation* ModRecipient);// 0x275c260
	bool GiveMod(KSPlayerMod* Mod, KSPlayerState* ModInstigator, bool Unique, enum ModSource);// 0x275c100
	void GiveCharge(float Charge);// 0x275c080
	KSVehicleBase* GetVehicleOwner();// 0x275c020
	int GetTotalCashEarned();// 0x275c000
	float GetTimeUntilGiveUpAllowed();// 0x275bee0
	bool GetTimestampForAction(out const FName ActionString, out float Timestamp);// 0x275bf10
	int GetStatValue(enum Stat);// 0x275be50
	bool GetSpecialties(out KSSpecialty*[] OutSpecialties);// 0x275bd90
	KSSkinBundle* GetSkinItem();// 0x275bd70
	float GetSecondsInvisible();// 0x275bd50
	int GetScore();// 0x275bd20
	int GetRevives();// 0x275bcf0
	KSRevealManager* GetRevealManager();// 0x275bcd0
	int GetRespawnTickets();// 0x275bcb0
	float GetRemainingRespawnTime();// 0x275bc80
	KSPlayerStateAssistant* GetPlayerStateAssistant();// 0x275bc60
	KSPlayerModManager* GetPlayerModManagerByRecipient(const KSCharacterFoundation* ModRecipient);// 0x275bbd0
	KSPlayerModManager* GetPlayerModManager();// 0x275bba0
	PUMG_PlayerInfo* GetPlayerInfo(PUMG_HUD* HUD);// 0x275bb10
	int GetPlayerId();// 0x275baf0
	KSPersistentPlayerData* GetPersistentPlayerData();// 0x275ba90
	int GetPartySize();// 0x275ba60
	int GetMVPScore();// 0x275b810
	bool GetModInstancesOfType(enum Type, out KSPlayerModInstance*[] OutMods);// 0x275b960
	bool GetModInstances(out KSPlayerModInstance*[] OutMods, const KSCharacterFoundation* ModRecipient);// 0x275b860
	float GetMMR();// 0x275b7e0
	int64 GetMctsPlayerId();// 0x275b840
	bool GetLoadoutClass(out KSLoadoutClass* OutLoadoutClass);// 0x275b740
	bool GetLastTimePlayerDamagedMe(const int64 InPlayerId, out float Timestamp);// 0x275b660
	int GetKills();// 0x275b630
	int GetJobMasteryLevel();// 0x275b600
	KSJobItem* GetJob();// 0x275b5e0
	KSItemDrop*[] GetItemsDroppedOnDeath();// 0x275b550
	bool GetIsPendingRepossession();// 0x275b530
	int GetInventoryItemQuantity(int ItemId);// 0x275b4a0
	float GetInitialRespawnTime();// 0x275b470
	int GetInitialCash();// 0x275b450
	int GetHeadshots();// 0x275b420
	int GetHacks();// 0x275b3f0
	bool GetGameModeMods(out KSModInst_Activated*[] OutMods, const KSCharacterFoundation* ModRecipient, bool bIncludeChildMods);// 0x275b2b0
	int GetEliminations();// 0x275b280
	enum GetEliminatedState();// 0x275b250
	int GetDownSpree();// 0x275b1f0
	int GetDowns();// 0x275b220
	float GetDistanceTravelled();// 0x26bcf90
	float GetDistanceSprinted();// 0x26bcf70
	float GetDistanceCrouchWalked();// 0x275b1d0
	int GetDehacks();// 0x275b1a0
	int GetDeaths();// 0x275b170
	float GetCurrentTimePlayed();// 0x275b140
	int GetCurrentRankedLevel();// 0x275b110
	int GetCurrentCash();// 0x275b0f0
	KSCharacterBase* GetCharacterOwner();// 0x275b090
	KSCharacterFoundation* GetCharacterFoundationOwner();// 0x275b030
	float GetCachedValueForKey(FString InKey);// 0x275af80
	int GetCachedValueForItemId(int ItemId);// 0x275aef0
	<FString,float> GetBonusProgressionMultiplierFromEvents(FString Key);// 0x275ae00
	<FString,float> GetBonusProgressionMultiplierFromBoosters(FString Key);// 0x275ad10
	float GetBonusProgressionMultiplier(FString Key);// 0x275ac60
	KSCharacterBase* GetBestCharacterOwner();// 0x275ac30
	KSCharacterBase* GetBackupCharacterOwner();// 0x275abd0
	int GetAssists();// 0x275aba0
	int GetArmoryLoadoutIndex();// 0x275ab80
	bool GetActivatableMods(out KSModInst_Activated*[] OutMods, const KSCharacterFoundation* ModRecipient, bool bIncludeChildMods);// 0x275aa40
	void FriendlyFirePenalty(bool IsKilled, KSPlayerState* Victim);// 0x275a980
	void EnterPlay(bool bSkipResetEliminatedOrDownedTest, bool bSpendTicket);// 0x275a8b0
	void EliminatePlayer();// 0x275a890
	void EarnCash(int Earnings, bool bShareWithTeam, FText Reason, bool bBonus);// 0x275a6d0
	void DisallowGiveUpTimerTick(float Seconds);// 0x275a650
	void DisallowGiveUpTimerComplete();// 0x275a630
	void DisallowGiveUpTimerActive(bool bActive);// 0x275a5a0
	void ClientPollProposalFailed();// 0x1f12740
	void ClientNotifyFriendlyFireDamageApplied(float Amount);// 0x267b760
	void ClientNotifyExceededReverseFriendlyFireThreshold();// 0x1f12780
	void ClearDamageTimestamps();// 0x275a4a0
	void ClaimLootItem(int LootItemId, int Quantity);// 0x275a3e0
	void ChangeMoney(int Delta, FText Reason, bool bBonus);// 0x275a200
	void ChangeArmoryLoadoutIndex(int NewArmoryLoadoutIndex);// 0x275a180
	void BroadcastPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x275a0c0
	void AssignModsToRestoreOnReactivation(KSPlayerMod*[] InModsToRestoreOnReactivated);// 0x2759f40
	bool AnyActivatableModsActive();// 0x2759f10
	void AddSecondsInvisible(float InSeconds);// 0x2759e90
	void AddScore(int InScore);// 0x2759e00
	void AddRevive(int Count);// 0x2759d70
	void AddKill(int Count);// 0x2759ce0
	void AddHeadshot(int Count);// 0x2759c50
	void AddHack(int Count);// 0x2759bc0
	void AddElimination(int Count);// 0x2759b30
	void AddDown(int Count);// 0x2759aa0
	void AddDehack(int Count);// 0x2759a10
	void AddDeath(int Count);// 0x2759980
	void AddAssist(int Count);// 0x27598f0
	bool ActivatableModAtIndexActive(int AbilityIndex);// 0x2759860
	bool ActivatableGameModeModAtIndexActive(int AbilityIndex);// 0x27597d0

--------------------------------
Class: PGame_PlayerState.PlayerState.Info.Actor.Object
	FString EOSProductUserIdString;//[Offset: 0x320, Size: 1]

--------------------------------
Class: KSTeamState.Info.Actor.Object
	int r_TeamNum;//[Offset: 0x220, Size: 1]
	bool bTeamEliminated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	bool bTeamEliminatedOrDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 1]
	MulticastInlineDelegateProperty OnTeamEliminated;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamEliminatedOrDowned;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamMemberEliminatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamMemberDownedDel;//[Size: 1]
	KSPlayerState*[] AllMembers;//[Offset: 0x280, Size: 1]
	KSPlayerState*[] PlayerMembers;//[Offset: 0x290, Size: 1]
	MulticastInlineDelegateProperty OnMemberAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnMemberRemoved;//[Size: 1]
	KSRespawnConfig RespawnConfig;//[Offset: 0x300, Size: 1]
	int Respawns;//[Offset: 0x318, Size: 1]
	MulticastInlineDelegateProperty OnRespawnsChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnQueueChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnConfigChangedDel;//[Size: 1]
	KSPlayerState*[] RespawnQueue;//[Offset: 0x350, Size: 1]
	KSPersistentPlayerData*[] PersistentRespawnQueue;//[Offset: 0x360, Size: 1]
	int Score;//[Offset: 0x370, Size: 1]
	int IntraScore;//[Offset: 0x374, Size: 1]
	int IntraScoreGoal;//[Offset: 0x378, Size: 1]
	int RoundWins;//[Offset: 0x37c, Size: 1]
	int RoundLosses;//[Offset: 0x380, Size: 1]
	MulticastInlineDelegateProperty OnScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnIntraScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnIntraScoreGoalChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnObjectiveRoleChanged;//[Size: 1]
	enum TeamType;//[Offset: 0x3c8, Size: 1]
	MulticastInlineDelegateProperty OnPingAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnPingRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnPingChanged;//[Size: 1]
	KSJobSelectionComponent* JobSelectionComponent;//[Offset: 0x400, Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionComponentReady;//[Size: 1]
	int TotalKills;//[Offset: 0x460, Size: 1]
	int TotalDeaths;//[Offset: 0x464, Size: 1]
	int TotalAssists;//[Offset: 0x468, Size: 1]
	int SideNum;//[Offset: 0x46c, Size: 1]
	int LocalSideNum;//[Offset: 0x470, Size: 1]
	KSPersistentPlayerData*[] PersistentTeamMembers;//[Offset: 0x478, Size: 1]
	MulticastInlineDelegateProperty OnPersistentTeamMemberAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnPersistentTeamMemberRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamCanSurrenderChanged;//[Size: 1]
	bool bTeamCanProposeSurrender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	MultiPlayerSkinMapReplicator SkinMapReplicator;//[Offset: 0x510, Size: 1]
	bool SubtractTickets(int NumTickets);// 0x279bb70
	bool ShouldKeepTeamAlive();// 0x26d2b20
	void SetTeamType(enum NewType);// 0x279b9b0
	void ResetTeamElimination();// 0x279b990
	bool RequestQueueRespawn(int Count);// 0x279b900
	void OnTeamUpdated();// 0x1efdc40
	void OnTeamMemberRemoved(KSPlayerState* LostMember);// 0x279b820
	void OnTeamMemberEliminated(KSPlayerState* Member);// 0x2cbecb0
	void OnTeamMemberDowned(KSPlayerState* Member);// 0x2cbecb0
	void OnTeamMemberAdded(KSPlayerState* NewMember);// 0x279b790
	void OnSurrenderPollStarted();// 0xd76f80
	void OnSurrenderPollFailed();// 0xd76f80
	void OnSideNumUpdated();// 0x1efdc20
	void OnRep_TeamType();// 0x279b770
	void OnRep_TeamEliminatedOrDowned();// 0x1ef3f90
	void OnRep_TeamEliminated();// 0xcf5e70
	void OnRep_TeamCanProposeSurrender();// 0x279b750
	void OnRep_Score();// 0x279b710
	void OnRep_Respawns();// 0x279b6f0
	void OnRep_RespawnQueue();// 0x279b6d0
	void OnRep_RespawnConfig();// 0x279b6b0
	void OnRep_JobSelectionComponent();// 0x279b690
	void OnRep_IntraScoreGoal();// 0x279b650
	void OnRep_IntraScore();// 0x279b610
	void OnPlayerLogout(Controller* Controller);// 0x279b590
	void NewPingRequest(out const PingInfo PingInfo);// 0x279b440
	void NewPingRemoveRequest(int PingId, KSPlayerState* PingingPlayer);// 0x279b380
	void NewPingChangeRequest(int PingId, KSPlayerState* PingingPlayer, KSPlayerState* AcknowledgingPlayer);// 0x279b280
	bool IsEliminated();// 0x26ffe20
	bool IsDefending();// 0x279b250
	bool IsAttacking();// 0x279b220
	enum GetTeamType();// 0x279b0c0
	KSPlayerState*[] GetSortedPlayers();// 0x279b040
	KSRespawnConfig GetRespawnConfig();// 0x279b010
	int GetRemainingRespawns();// 0x279aff0
	int GetPlayersRemaining(bool DownAsDead);// 0x279af60
	int GetNumberOfPlayers();// 0x2688bf0
	int GetNumberOfHumanPlayers();// 0x279af30
	int GetNumberOfBotPlayers();// 0x279af00
	int GetLivesRemaining(bool CountDowned);// 0x279ae70
	int GetExpectedTeamSize();// 0x279ae40
	void GetAllPersistentTeamMembers(out KSPersistentPlayerData*[] OutPersistentTeamMembers);// 0x279ad90
	KSPlayerState*[] GetAllMembers();// 0x279acd0
	void ForceResetTeamElimination();// 0x279ac70
	void EliminateTeam();// 0x279ac50
	bool AllPlayersEliminatedOrDowned();// 0x26ffdf0

--------------------------------
Class: PingInfo
	enum PingType;//[Offset: 0x0, Size: 1]
	enum PingMessage;//[Offset: 0x1, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 1]
	Vector_NetQuantize PingIconOffset;//[Offset: 0x10, Size: 1]
	Actor* PingedActor;//[Offset: 0x20, Size: 1]
	KSPlayerState* PingingPlayer;//[Offset: 0x28, Size: 1]
	KSPlayerState*[] AcknowledgedPlayers;//[Offset: 0x30, Size: 1]
	LinearColor PingColor;//[Offset: 0x40, Size: 1]
	Texture2D* PingIconTexture;//[Offset: 0x50, Size: 1]
	FText PingTextForTextChat;//[Offset: 0x78, Size: 1]
	FText[] PingTextParameters;//[Offset: 0x90, Size: 1]
	TimerHandle ExpirationHandle;//[Offset: 0xa0, Size: 1]
	int PingId;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: KSRespawnConfig
	enum RespawnMode;//[Offset: 0x0, Size: 1]
	int TotalRespawns;//[Offset: 0x4, Size: 1]
	int PersonalRespawns;//[Offset: 0x8, Size: 1]
	float RespawnTime;//[Offset: 0xc, Size: 1]
	bool WaveRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int CostPerRespawn;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSPersistentPlayerData.Object
	bool bIsBoundToMinPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	KSPlayerState* PlayerState;//[Offset: 0x30, Size: 1]
	KSPersistentPlayerId ID;//[Offset: 0x48, Size: 1]
	int TeamNum;//[Offset: 0x58, Size: 1]
	FString PlayerName;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnMinimumPlayerDataUpdatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDataTeamChangedDel;//[Size: 1]
	bool bAbandoned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	MulticastInlineDelegateProperty OnPersistentPlayerDataAbandonedDel;//[Size: 1]
	int CachedEliminations;//[Offset: 0xf0, Size: 1]
	int CachedDowns;//[Offset: 0xf4, Size: 1]
	int CachedAssists;//[Offset: 0xf8, Size: 1]
	int CachedDeaths;//[Offset: 0xfc, Size: 1]
	int CachedRevives;//[Offset: 0x100, Size: 1]
	int CachedMoney;//[Offset: 0x104, Size: 1]
	int CachedTotalCashEarned;//[Offset: 0x108, Size: 1]
	int CachedBounty;//[Offset: 0x10c, Size: 1]
	<KSItem*,KSItem*> SkinMap;//[Offset: 0x110, Size: 1]
	KSJobItem* ActiveJob;//[Offset: 0x160, Size: 1]
	MulticastInlineDelegateProperty OnActiveJobMasteryXpChanged;//[Size: 1]
	int ActiveJobMasteryXp;//[Offset: 0x190, Size: 1]
	int ActiveJobMasteryLevel;//[Offset: 0x194, Size: 1]
	bool IsBoundToPlayerState();// 0x2722eb0
	bool IsAbandoned();// 0x2722e90
	bool HasATeam();// 0x2722e50
	int GetTotalCashEarned();// 0x2722c60
	int GetTeamNum();// 0x2722c30
	int GetRevives();// 0x2722c00
	KSPlayerState* GetPlayerState();// 0x2722bd0
	FString GetPlayerName();// 0x2722b50
	int64 GetPlayerId();// 0x2722b20
	int GetMoney();// 0x2722af0
	int GetJobMasteryLevel();// 0x2722ac0
	KSJobItem* GetJob();// 0x27229a0
	int GetEliminations();// 0x27228e0
	int GetDowns();// 0x27228b0
	int GetDeaths();// 0x2722880
	int GetBounty();// 0x2722810
	int GetAssists();// 0x27227e0
	void BoundPlayerStateDestroyed(Actor* InActor);// 0x2722620

--------------------------------
Class: KSJobItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool IsStarterJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool IsRandomJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bDisabledByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	bool bIsMobileJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 1]
	bool AllowDuplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	KSSkinBundle* JobDefaultSkin;//[Offset: 0x288, Size: 1]
	KSJobItem* VariantParent;//[Offset: 0x2b0, Size: 1]
	int JobSkinBundleLootTableId;//[Offset: 0x2d8, Size: 1]
	KSJobRole* JobRoleItem;//[Offset: 0x2e0, Size: 1]
	KSItem* UniqueItem;//[Offset: 0x308, Size: 1]
	KSItem* PrimaryWeaponOptionOne;//[Offset: 0x330, Size: 1]
	KSWeaponCategoryAsset* PrimaryWeaponCategoryOptionOne;//[Offset: 0x358, Size: 1]
	bool PrimaryWeaponOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	KSItem* PrimaryWeaponOptionTwo;//[Offset: 0x388, Size: 1]
	KSWeaponCategoryAsset* PrimaryWeaponCategoryOptionTwo;//[Offset: 0x3b0, Size: 1]
	bool PrimaryWeaponOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	KSItem* SecondaryWeaponOptionOne;//[Offset: 0x3e0, Size: 1]
	bool SecondaryWeaponOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	KSItem* SecondaryWeaponOptionTwo;//[Offset: 0x410, Size: 1]
	bool SecondaryWeaponOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	KSItem* MeleeWeapon;//[Offset: 0x440, Size: 1]
	KSItem* QuickMeleeWeapon;//[Offset: 0x468, Size: 1]
	KSItem*[] Passives;//[Offset: 0x490, Size: 1]
	KSItem*[] Traits;//[Offset: 0x4a0, Size: 1]
	KSItem* GadgetOptionOne;//[Offset: 0x4b0, Size: 1]
	bool GadgetOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	KSItem* GadgetOptionTwo;//[Offset: 0x4e0, Size: 1]
	bool GadgetOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	KSItem* PerkOptionOne;//[Offset: 0x510, Size: 1]
	bool PerkOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	KSItem* PerkOptionTwo;//[Offset: 0x540, Size: 1]
	bool PerkOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	KSItem* PerkOptionThree;//[Offset: 0x570, Size: 1]
	bool PerkOptionThreeIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	KSItem* PerkOptionFour;//[Offset: 0x5a0, Size: 1]
	bool PerkOptionFourIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	KSItem* PerkOptionFive;//[Offset: 0x5d0, Size: 1]
	bool PerkOptionFiveIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	KSItem* PerkOptionSix;//[Offset: 0x600, Size: 1]
	bool PerkOptionSixIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 1]
	KSItem* PerkOptionSeven;//[Offset: 0x630, Size: 1]
	bool PerkOptionSevenIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	KSItem* PerkOptionEight;//[Offset: 0x660, Size: 1]
	bool PerkOptionEightIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	KSItem* PerkOptionNine;//[Offset: 0x690, Size: 1]
	bool PerkOptionNineIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	KSItem* PerkOptionTen;//[Offset: 0x6c0, Size: 1]
	bool PerkOptionTenIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	KSItem* PerkOptionEleven;//[Offset: 0x6f0, Size: 1]
	bool PerkOptionElevenIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 1]
	KSItem* PerkOptionTwelve;//[Offset: 0x720, Size: 1]
	bool PerkOptionTwelveIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	KSItem* GambitOptionOne;//[Offset: 0x750, Size: 1]
	bool GambitOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	KSItem* GambitOptionTwo;//[Offset: 0x780, Size: 1]
	bool GambitOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	KSItem* GambitOptionThree;//[Offset: 0x7b0, Size: 1]
	bool GambitOptionThreeIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	KSItem* GambitOptionFour;//[Offset: 0x7e0, Size: 1]
	bool GambitOptionFourIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 1]
	KSItem* GambitOptionFive;//[Offset: 0x810, Size: 1]
	bool GambitOptionFiveIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	KSItem* GambitOptionSix;//[Offset: 0x840, Size: 1]
	bool GambitOptionSixIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	KSEmote*[] DefaultEmotes;//[Offset: 0x870, Size: 1]
	KSQuip*[] DefaultQuips;//[Offset: 0x880, Size: 1]
	KSCommunication*[] DefaultCommunications;//[Offset: 0x890, Size: 1]
	KSSpray*[] DefaultSprays;//[Offset: 0x8a0, Size: 1]
	KSItem* DefaultWingsuit;//[Offset: 0x8b0, Size: 1]
	SoftObjectPath[] LobbyPropsToPreload;//[Offset: 0x8d8, Size: 1]
	KSPlayerMod*[] DefaultJobLoadoutPassives;//[Offset: 0x8e8, Size: 1]
	int MaximumEquippableJobLoadoutPassives;//[Offset: 0x8f8, Size: 1]
	GameplayTag[] AllowedGameModeTags;//[Offset: 0x900, Size: 1]
	Texture2D* SmallJobIcon;//[Offset: 0x910, Size: 1]
	Texture2D* JobPortrait;//[Offset: 0x938, Size: 1]
	Texture2D* JobDiamondPortrait;//[Offset: 0x960, Size: 1]
	Texture2D* JobSquarePortrait;//[Offset: 0x988, Size: 1]
	bool IsValidJobItem(KSItem* KSItem);// 0x26db260
	bool IsOnFreeRotation();// 0x26db160
	Texture2D* GetSoftSmallJobIcon();// 0x26db020
	Texture2D* GetSoftJobSquarePortrait();// 0x26daf80
	Texture2D* GetSoftJobPortrait();// 0x26daee0
	Texture2D* GetSoftJobDiamondPortrait();// 0x26dae40
	Texture2D* GetSmallJobIcon();// 0x26dad60
	bool GetSecondaryWeapons(out KSItem*[] SecondaryWeapons);// 0x26daa00
	bool GetQuickMeleeWeapon(out KSItem* OutItem);// 0x26da930
	bool GetPrimaryWeapons(out KSItem*[] PrimaryWeapons);// 0x26da850
	bool GetPerks(out KSItem*[] Perks);// 0x26da770
	bool GetMeleeWeapons(out KSItem*[] MeleeWeapons);// 0x26da690
	bool GetMeleeWeapon(out KSItem* OutItem);// 0x26da5c0
	KSJobRole* GetJobRole();// 0x26da4a0
	KSActivityInstance* GetJobMasteryActivityInstance(const Object* WorldContextObject);// 0x26da410
	bool GetGambits(out KSItem*[] Gambits);// 0x26da330
	bool GetGadgets(out KSItem*[] Gadgets);// 0x26da250
	bool GetFirstPassive(out KSItem* Passive);// 0x26da180
	bool GetDefaultSprays(out KSSpray*[] Sprays);// 0x26da0a0
	KSSkinBundle* GetDefaultSkin();// 0x26da070
	bool GetDefaultSecondaryWeapon(out KSItem* OutItem);// 0x26d9fa0
	bool GetDefaultRadialMenuItems(out KSRadialMenuItem*[] RadialMenuItems, enum CosmeticSlot);// 0x26d9e80
	bool GetDefaultQuips(out KSQuip*[] quips);// 0x26d9da0
	bool GetDefaultPrimaryWeapon(out KSItem* OutItem);// 0x26d9cd0
	bool GetDefaultPerks(out KSItem*[] Perks);// 0x26d9bf0
	bool GetDefaultGambits(out KSItem*[] Gambits);// 0x26d9b10
	bool GetDefaultGadget(out KSItem* OutItem);// 0x26d9a40
	bool GetDefaultEmotes(out KSEmote*[] Emotes);// 0x26d9960
	bool GetDefaultCommunications(out KSCommunication*[] communications);// 0x26d9880
	bool GetAlternativeSecondaryWeapon(out KSItem* OutItem);// 0x26d9670
	bool GetAlternativePrimaryWeapon(out KSItem* OutItem);// 0x26d95a0
	bool GetAlternativeGadget(out KSItem* OutItem);// 0x26d94d0

--------------------------------
Class: KSSkinBundle.KSItemBundle.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSLobbyCharacter* RogueSelectCharacterClass;//[Offset: 0x290, Size: 1]
	KSWeaponAttachment*[] SkinSpecificWeaponAttachments;//[Offset: 0x2b8, Size: 1]
	bool bOverrideAttachedWeaponWraps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool StarterSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	Texture2D* SkinFlatImage;//[Offset: 0x2d0, Size: 1]
	KSJobItem* Job;//[Offset: 0x2f8, Size: 1]
	bool bOverrideJobLobbyProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	SoftObjectPath[] LobbyPropsToPreload;//[Offset: 0x328, Size: 1]
	static KSJobItem* StaticGetAssociatedJob(out const KSSkinBundle* InSkinBundle);// 0x2792db0
	bool IsStarterSkin();// 0x26ebe90
	Texture2D* GetSkinImage();// 0x27923e0
	class KSLobbyCharacter GetRogueSelectCharacterClass();// 0x2792050
	KSJobItem* GetAssociatedJob();// 0x2791dc0

--------------------------------
Class: KSItemBundle.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSItem*[] BundledItems;//[Offset: 0x280, Size: 1]
	void GetSortedBundledItems(out KSItem*[] SortedItems);// 0x26d1b20

--------------------------------
Class: KSLobbyCharacter.KSCharacter.KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	FName ViewModelName;//[Offset: 0x3d58, Size: 1]
	AnimMontage* ActiveLobbyMontage;//[Offset: 0x3d60, Size: 1]
	bool bEnableRogueSelectWeaponPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d68, Size: 1]
	bool bEnableWalkinCinematicWeaponPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d69, Size: 1]
	enum CharacterIndex;//[Offset: 0x3d6a, Size: 1]
	KSWeaponSkeletalMeshComponent* LobbyWeapon01Component;//[Offset: 0x3d70, Size: 1]
	KSWeaponSkeletalMeshComponent* LobbyWeapon02Component;//[Offset: 0x3d78, Size: 1]
	KSWeaponSkeletalMeshComponent* LobbyProp01Component;//[Offset: 0x3d80, Size: 1]
	KSWeaponSkeletalMeshComponent* LobbyProp02Component;//[Offset: 0x3d88, Size: 1]
	KSStaticMeshComponent* LobbyPropStatic01Component;//[Offset: 0x3d90, Size: 1]
	KSStaticMeshComponent* LobbyPropStatic02Component;//[Offset: 0x3d98, Size: 1]
	<FName,LobbySkeletalPropInfo> SkeletalPropMapping;//[Offset: 0x3da0, Size: 1]
	<FName,LobbyStaticPropInfo> StaticPropMapping;//[Offset: 0x3df0, Size: 1]
	bool ShouldHideInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e40, Size: 1]
	bool bWereTexturesStreamedIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e41, Size: 1]
	bool bIsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e42, Size: 1]
	bool bHideUntilTexturesStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e43, Size: 1]
	bool bForceEnableClothSim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e44, Size: 1]
	bool bPrestreamTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e45, Size: 1]
	int ForcedLodModel;//[Offset: 0x3e48, Size: 1]
	bool bCustomForcedLodForSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4c, Size: 1]
	int ForcedLodModelSwitch;//[Offset: 0x3e50, Size: 1]
	enum CurrentAnimState;//[Offset: 0x3e5c, Size: 1]
	MulticastInlineDelegateProperty OnVisibilityChangedDel;//[Size: 1]
	int[] PersistentMaterialOverrideIDs;//[Offset: 0x3e70, Size: 1]
	bool bIsRotatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e80, Size: 1]
	Vector MaxAxisRotation;//[Offset: 0x3e84, Size: 1]
	float IdleSecondsToResetRotation;//[Offset: 0x3e90, Size: 1]
	float ResetRotationSpeedRadians;//[Offset: 0x3e94, Size: 1]
	Vector RotationRatePerAxis;//[Offset: 0x3e98, Size: 1]
	void VisibilityChanged(bool IsVisible);// 0x2cbecb0
	bool UpdateHiddenInGame();// 0x26ed070
	void UnsetCharacter();// 0x26ed050
	void UnbindControllerFromActor();// 0x26ed030
	void StopLobbyCharacterMontage();// 0x2cbecb0
	void StopCurrentEmote();// 0x26ed010
	void ShowLobbyNameplate();// 0x26ecf70
	void SetUpStaticLobbyProp(LobbyStaticPropInfo LobbyStaticPropInfo, KSStaticMeshComponent* StaticPropComponent);// 0x26ecd60
	void SetUpSkeletalLobbyProp(LobbySkeletalPropInfo LobbyPropInfo, KSWeaponSkeletalMeshComponent* SkeletalPropComponent);// 0x26ecb90
	void SetupLobbyCharacter(KSPlayerInfo* playerinfo);// 0x26ecef0
	void SetShouldHideInGame(bool ShouldHide);// 0x26ecb10
	void SetLobbyNameplate(KSPlayerInfo* playerinfo);// 0x26ec9f0
	void SetLobbyCharacterAnimState(enum AnimState);// 0x26ec970
	void SetCharacterSkin(KSItem* SkinItem);// 0x26ec860
	void SetCharacterEmote(KSItem* EmoteItem);// 0x26ec7e0
	void PlayLobbyCharacterMontage();// 0x2cbecb0
	void OnLobbyPresenceStateChange(enum LobbyPresenceState);// 0x26ebf70
	bool IsSet();// 0x26ebf50
	bool IsLobbyCharacter();// 0x26ebf00
	void InitializeSkeletalPropAnimation(AnimInstance* PropAnimInstance);// 0x2cbecb0
	void InitializeLobbyCharacterAnimation();// 0x2cbecb0
	void HideLobbyNameplate();// 0x1eddf60
	float GetSkeletalPropMontageStartTime();// 0x26ebda0
	float GetCurrentMontagePosition();// 0x26eba80
	enum GetCurrentAnimState();// 0x26eba60
	enum GetCharacterIndex();// 0x26eba20
	void EmoteCosmeticComponentCreated(KSEquipment* Emote);// 0x26eb9a0
	void EmoteActionStateChanged(KSEquipmentCosmeticComponent* Cosmetic);// 0x26eb920
	void DeattachStaticLobbyProp(KSStaticMeshComponent* StaticPropComponent);// 0x26eb8a0
	void DeattachSkeletalLobbyProp(KSWeaponSkeletalMeshComponent* SkeletalPropComponent);// 0x26eb820
	void DeattachAllLobbyProps();// 0x26eb800
	void ClearAllLobbyPropInfo();// 0x26eb7e0
	void BindControllerToActor();// 0x26eb730
	void BeginRotationReset();// 0x26eb700
	void AttachAllActiveLobbyProps();// 0x26eb6e0

--------------------------------
Class: KSStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LobbyStaticPropInfo
	bool enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName AttachPoint;//[Offset: 0x4, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x10, Size: 1]
	Transform TransformOffset;//[Offset: 0x20, Size: 1]

--------------------------------
Class: LobbySkeletalPropInfo
	bool enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SoftObjectPath WeaponAsset;//[Offset: 0x8, Size: 1]
	FName AttachPoint;//[Offset: 0x20, Size: 1]
	class AnimInstance* AnimInstance;//[Offset: 0x28, Size: 1]
	AnimMontage* Montage;//[Offset: 0x30, Size: 1]
	int TargetLOD;//[Offset: 0x38, Size: 1]
	Transform TransformOffset;//[Offset: 0x40, Size: 1]
	int WeaponAnimIndex;//[Offset: 0x70, Size: 1]
	bool ShouldOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	FName RowNameContainingMaterialOverride;//[Offset: 0x78, Size: 1]

--------------------------------
Class: KSPlayerInfo.PUMG_PlayerInfo.Object
	MulticastInlineDelegateProperty OnPlayerStatusChanged;//[Size: 1]
	void ViewExternalProfile();// 0x273b880
	void ToggleDND();// 0x273b860
	bool ShouldShowViewGamercardForPlayer();// 0x273b830
	bool ShouldShowViewExternalProfile();// 0x273b800
	bool ShouldShowInviteToPartyForPlayer();// 0x273b7d0
	bool ShouldShowCrossplayIconForPlayer();// 0x273b7a0
	bool IsSuggestedFriend();// 0x273b350
	bool IsSamePortalAsLocalPlayer();// 0x273b320
	bool IsRoCoFriend();// 0x273b2f0
	bool IsRequestingFriend();// 0x273b2c0
	bool IsPlayingThisGame();// 0x273b290
	bool IsPendingFriend();// 0x273b260
	bool IsOnline();// 0x273b230
	bool IsMuted();// 0x273b200
	bool IsInVoiceChannel();// 0x273b1d0
	bool IsInQueue();// 0x273b1a0
	bool IsInMatch();// 0x273b170
	bool IsInLocalParty();// 0x273b140
	bool IsInLobby();// 0x273b110
	bool IsFriend();// 0x273b0e0
	bool IsDND();// 0x273b0b0
	bool InviteToParty(out FText OutErrorText);// 0x273afd0
	bool HasPortalRelationship();// 0x273afa0
	bool HasPortalInfoForClientPortal();// 0x273af70
	bool HasHRRelationship();// 0x273af40
	bool HasDeserter();// 0x273af10
	FText GetStatusMessage();// 0x273ae70
	FText GetRichPresenceText();// 0x273add0
	int GetRankedLevelProgress(int QueueId);// 0x273ad40
	int GetRankedLevel(int QueueId);// 0x273acb0
	int GetQuantityForItem(int ItemId);// 0x273ac20
	enum GetPlayerSelectedInputType();// 0x273ab50
	bool GetPlayersDisplayedSkin(out KSItem* SkinItem);// 0x273ab80
	enum GetPlayerPlatformType();// 0x273ab20
	enum GetPlayerOnlineStatus(bool bAllowPartyStatus, bool bAllowFriendRequestStatus);// 0x273aa40
	int GetPlayerLevel();// 0x273aa10
	PlayerAlias[] GetPlayerAliases();// 0x273a8f0
	bool GetOwnedJobsCount(out int OutOwnedJobsCount, bool bIncludeFreeRotation);// 0x273a810
	bool GetEquippedAccountItem(enum eSlot, out KSItem* EquippedItem);// 0x273a650
	int GetDurationForItem(int ItemId);// 0x273a5c0
	int GetDeserterPenaltySeconds();// 0x273a590
	bool CanBeSpectated();// 0x26c3b20
	bool CanBeChallenged();// 0x273a250

--------------------------------
Class: PUMG_PlayerInfo.Object
	MulticastInlineDelegateProperty OnFilteredNameSetDel;//[Size: 1]
	void SetIgnored(bool Ignored);// 0xe745f0
	bool IsIgnored();// 0xe74150
	int64 GetPlayerId();// 0xe73c60
	FText GetName();// 0xe73b00
	FString GetMctsName();// 0xe73a80
	int GetAvatarItemId();// 0xe73630

--------------------------------
Class: PlayerAlias

--------------------------------
Class: KSJobRole.DataAsset.Object
	FText JobRoleDisplayName;//[Offset: 0x30, Size: 1]
	FName JobRoleName;//[Offset: 0x48, Size: 1]
	FText JobRoleDescription;//[Offset: 0x50, Size: 1]
	int JobRoleSortOrder;//[Offset: 0x68, Size: 1]
	bool ShouldHideRole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	Texture2D* JobRoleIcon;//[Offset: 0x70, Size: 1]
	Texture2D* GetRoleIcon();// 0x25fa900

--------------------------------
Class: KSWeaponCategoryAsset.ItemCollection.PrimaryDataAsset.DataAsset.Object
	GameplayTag CategoryTag;//[Offset: 0x98, Size: 1]
	GameplayTag WrapTag;//[Offset: 0xa0, Size: 1]
	bool bExcludeUpgrades;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bRequireItemId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	FText DisplayName;//[Offset: 0xb0, Size: 1]
	FText DisplayNameSingular;//[Offset: 0xc8, Size: 1]
	FText DisplayNameCategory;//[Offset: 0xe0, Size: 1]
	Texture2D* SoftSymbolIcon;//[Offset: 0xf8, Size: 1]
	Texture2D* SoftFlatSymbolIcon;//[Offset: 0x120, Size: 1]
	Texture2D* SoftMasteryIcon;//[Offset: 0x148, Size: 1]
	Texture2D* SoftVerticalSplash;//[Offset: 0x170, Size: 1]
	Texture2D* SoftHorizontalSplash;//[Offset: 0x198, Size: 1]
	bool ShowsMasteryUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool ShowsWeaponUnlockUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	bool ShowsRelatedJobsUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2, Size: 1]
	KSWeaponAsset* DefaultPreviewWeapon;//[Offset: 0x1d8, Size: 1]
	GameplayTag GetWrapTag();// 0x27d4cf0
	KSItem*[] GetWeaponsForCategory();// 0x27d4b10
	Texture2D* GetVerticalSplash();// 0x27d47b0
	Texture2D* GetSymbolIcon();// 0x27d4650
	bool GetShowsWeaponUnlockUI();// 0x27d4630
	bool GetShowsRelatedJobsUI();// 0x27d4610
	bool GetShowsMasteryUI();// 0x27d45f0
	Texture2D* GetMasteryIcon();// 0x27d3f70
	Texture2D* GetHorizontalSplash();// 0x27d3dd0
	Texture2D* GetFlatSymbolIcon();// 0x27d3d30
	FText GetDisplayNameSingular();// 0x27d3c20
	FText GetDisplayNameCategory();// 0x27d3b70
	FText GetDisplayName();// 0x27d3ac0
	KSWeaponAsset* GetDefaultPreviewWeapon();// 0x27d3a90
	GameplayTag GetCategoryTag();// 0x27d3770

--------------------------------
Class: KSEmote.KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool bFlushKeysOnPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	class KSEmoteCosmeticComponent* EmoteCosmeticComponentClass;//[Offset: 0x2f0, Size: 1]
	enum EmoteCameraPosition;//[Offset: 0x318, Size: 1]
	Vector EmotePreviewLocationOffset;//[Offset: 0x31c, Size: 1]
	float EmotePreviewScaleOverride;//[Offset: 0x328, Size: 1]
	bool bMovingEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	FName[] ApparelObjectsToInfluence;//[Offset: 0x330, Size: 1]
	SoftObjectPath[] WeaponPropsToPreload;//[Offset: 0x340, Size: 1]
	bool IsMovingEmote();// 0xe7e2e0
	float GetEmotePreviewScaleOverride();// 0x2691100
	Vector GetEmotePreviewLocationOffset();// 0x26910d0
	class KSEmoteCosmeticComponent GetEmoteCosmeticClass();// 0x2690f50
	enum GetEmoteCameraPosition();// 0x2690f30

--------------------------------
Class: KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSRadialMenuItemInstance* RadialMenuItemInstanceClass;//[Offset: 0x288, Size: 1]
	SoftDataTableInfo[] AssetDataTables;//[Offset: 0x2b0, Size: 1]
	KSJobItem*[] JobAllowList;//[Offset: 0x2c0, Size: 1]
	float GlobalRadialMenuItemCooldownTime;//[Offset: 0x2d0, Size: 1]
	enum InterruptNotifyBehavior;//[Offset: 0x2d4, Size: 1]
	float RadialMenuItemIsPlayingTimeout;//[Offset: 0x2d8, Size: 1]
	KSRadialMenuItemInterruptRules InterruptRules;//[Offset: 0x2dc, Size: 1]
	bool bLockPawnRotationWhilePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	enum Emotion;//[Offset: 0x2e1, Size: 1]
	bool ShouldPreventPlay(enum InReason);// 0x2777ee0
	bool ShouldInterrupt(enum InReason);// 0x2777d70
	bool IsJobAllowed(KSJobItem* Item);// 0x2777c80
	bool IsAllowedForAllJobs();// 0x2777bc0
	class KSRadialMenuItemInstance GetRadialMenuItemInstanceClass();// 0x2777760
	bool GetLockPawnRotationWhilePlaying();// 0x26ebd00
	GameplayTag GetGameplayTagBase();// 0x2777720
	enum GetEmotionToApply();// 0x2777700
	FString GetCosmeticSlotString();// 0x2777680
	enum GetCosmeticSlot();// 0x2777660
	KSJobItem*[] GetAllowedJobs();// 0x2777520

--------------------------------
Class: KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object
	KSRadialMenuItem* RadialMenuItemAsset;//[Offset: 0x2d8, Size: 1]
	void ServerPlayRadialMenuItem();// 0x277bcf0
	void ServerForceStopRadialMenuItem();// 0x277bca0
	bool PlayRadialMenuItem(out enum OutInterruptReason, bool bForcePlayRadialMenuItem);// 0x277bba0
	void OnRep_RadialMenuItemAsset();// 0x1f12740
	bool IsThrottled();// 0x277b840
	bool IsManagingRadialMenuItemLocally();// 0x277b7e0
	KSRadialMenuItem* GetRadialMenuItemAsset();// 0x26169c0
	KSCharacter* GetActiveCharacterOwner();// 0x277b280
	void ForceStopRadialMenuItem();// 0x277b260
	void DoRadialMenuItem();// 0xdd2860
	bool CanPlayRadialMenuItemNow(out enum OutInterruptReason);// 0x277af20

--------------------------------
Class: KSEmoteCosmeticComponent.KSEquipmentCosmeticComponent.ActorComponent.Object
	byte PawnRotationLockId;//[Offset: 0x120, Size: 1]
	int EmotionInstanceId;//[Offset: 0x124, Size: 1]
	KSEmote* EmoteAsset;//[Offset: 0x158, Size: 1]
	uint16 PlayTicker;//[Offset: 0x160, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x168, Size: 1]
	DynamicSkinTable* SkinTable;//[Offset: 0x170, Size: 1]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	bool bShouldLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 1]
	Vector LastEmotePlayedLocation;//[Offset: 0x21c, Size: 1]
	KSEmoteInterruptTickFunction InterruptTick;//[Offset: 0x230, Size: 1]
	KSEmoteCosmeticSubInstance*[] SubInstances;//[Offset: 0x288, Size: 1]
	void OnRep_PlayTicker();// 0x2691440
	void OnRep_EmoteAsset();// 0x2691420
	void OnInitialize();// 0x2cbecb0
	void MarkStopped();// 0x2691300
	void MarkPlaying();// 0x26912e0
	bool IsPlaying();// 0x26912a0
	bool IsInitialized();// 0x26911f0
	MultiSkinObject* GetSkinObject();// 0xe6e720
	KSEmote* GetEmoteAsset();// 0x2690f10
	void BlueprintPlayEmote();// 0x2cbecb0
	void BlueprintInterruptEmote(enum Reason);// 0x2cbecb0
	KSEmoteCosmeticSubInstance* AddEmoteCosmeticSubInstance(class KSEmoteCosmeticSubInstance SubInstanceClass);// 0x2690a90

--------------------------------
Class: KSEmoteCosmeticSubInstance.Object
	void MarkOwnerStopped();// 0x26912c0
	bool IsOwnerDeadOrDestroyed();// 0x2691270
	bool IsLocallyViewed();// 0x2691240
	bool IsLocallyManaged();// 0x2691210
	void HandleEmoteStarted();// 0x26911d0
	void HandleEmoteFinished();// 0x26911b0
	MultiSkinObject* GetSkinObject();// 0x2691180
	KSEmoteCosmeticComponent* GetOwningEmoteCosmeticComponent();// 0x2691120
	KSCharacterAnimInst* GetCharAnimInstance();// 0x2690df0
	KSCharacter* GetCharacterOwner();// 0x2690e50
	SkeletalMeshComponent* GetCharacterMesh();// 0x2690e20
	void BlueprintStopped();// 0x2cbecb0
	void BlueprintOnUnregister();// 0x2cbecb0
	void BlueprintOnRegister();// 0x2cbecb0
	void BlueprintInterrupt(enum Reason);// 0x2cbecb0

--------------------------------
Class: KSEmoteInterruptTickFunction.TickFunction

--------------------------------
Class: SoftDataTableInfo
	DataTable* DataTable;//[Offset: 0x0, Size: 1]
	int TablePriority;//[Offset: 0x28, Size: 1]
	GameplayTagQuery SkinTagQuery;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSRadialMenuItemInterruptRules
	bool Walking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool Sprinting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool Crouching;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool Downed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool Dead;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool Interacting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool Zipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool SkyDiving;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool DodgeRolling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool Falling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool NonRadialMenuItemEquipment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool RadialMenuItemActivated;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool Cooldown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool DistFromOrigin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool Throttled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]

--------------------------------
Class: KSQuip.KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	FName OverriddenAudioEventName;//[Offset: 0x2e8, Size: 1]
	AkAudioEvent* QuipAudioEvent;//[Offset: 0x2f0, Size: 1]

--------------------------------
Class: KSCommunication.KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	enum PingType;//[Offset: 0x2e8, Size: 1]
	enum PingMessage;//[Offset: 0x2e9, Size: 1]

--------------------------------
Class: KSSpray.KSEmote.KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSActivity* StatTrackingActivity;//[Offset: 0x350, Size: 1]
	KSActivity* GetStatTrackingActivity();// 0x2792440

--------------------------------
Class: KSActivity.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	FText ItemDescriptionSingular;//[Offset: 0x1b8, Size: 1]
	int64 ProgressLootId;//[Offset: 0x1d0, Size: 1]
	int64 RemoveProgressLootId;//[Offset: 0x1d8, Size: 1]
	int64 SetProgressLootId;//[Offset: 0x1e0, Size: 1]
	int64 ResetProgressLootId;//[Offset: 0x1e8, Size: 1]
	int64 SpecialLootId;//[Offset: 0x1f0, Size: 1]
	int64 ClaimableRewardLootId;//[Offset: 0x1f8, Size: 1]
	int64 RewardTokenItemId;//[Offset: 0x200, Size: 1]
	int64 RewardVendorId;//[Offset: 0x208, Size: 1]
	int64 RewardXpTableId;//[Offset: 0x210, Size: 1]
	int64 SortOrder;//[Offset: 0x218, Size: 1]
	int64[] EntitlementItemIds;//[Offset: 0x220, Size: 1]
	class KSEventTracker* TrackerClass;//[Offset: 0x230, Size: 1]
	int ProgressInterval;//[Offset: 0x258, Size: 1]
	int MaxProgressThreshold;//[Offset: 0x25c, Size: 1]
	int MaxProgressPerMatch;//[Offset: 0x260, Size: 1]
	bool bAllowMultipleProgressFromTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool bResetAccumulationAfterTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	bool bResetAccumulationAfterProgressIncrease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 1]
	bool bRemoveProgressFromAccumulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x267, Size: 1]
	bool bIsClientAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bCreateTrackerIfFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bCreateInstanceIfInvalid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bAlwaysPackageActivityIfCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	bool bCanPackageActivityWithoutTracker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bCanCreateInstanceForBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bAllowLastTierToRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	enum ProgressDisplayPreference;//[Offset: 0x26f, Size: 1]
	enum ClientNotifyFrequency;//[Offset: 0x270, Size: 1]
	ActivityTierStructure[] ActivityTierData;//[Offset: 0x278, Size: 1]
	bool bShowInPostMatchLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bDisableAfterJobChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bIsOwnableItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool bShouldDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	bool bDuplicateProgressToSpecialLootId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	bool IsLocalActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 1]
	KSActivityComponent*[] ActivityComponents;//[Offset: 0x290, Size: 1]
	KSActivityRequirement*[] ActivityRequirements;//[Offset: 0x2a0, Size: 1]
	KSActivityRewardCondition*[] ActivityRewardConditions;//[Offset: 0x2b0, Size: 1]
	KSSubActivityEntry[] SubActivityEntries;//[Offset: 0x2c0, Size: 1]
	class KSActivityBehavior[] ActivityBehaviors;//[Offset: 0x2d0, Size: 1]
	GameplayTag[] ActivityTypes;//[Offset: 0x2e0, Size: 1]
	bool bDevCookOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	Texture2D* CarouselBackground;//[Offset: 0x2f8, Size: 1]
	bool MatchesTags(GameplayTag[] ActivityTags);// 0x2601360
	bool MatchesTagAndString(out const GameplayTag ActivityTag, FString Value);// 0x2601260
	bool MatchesTagAndInt(out const GameplayTag ActivityTag, int Value);// 0x2601180
	bool MatchesTag(out const GameplayTag ActivityTag);// 0x26010e0
	bool IsWeaponConditionMet(const KSWeapon* InWeapon);// 0x2601050
	bool IsUnlocked(const Controller* InController);// 0x2600fc0
	bool IsTriggerConditionMet(const int64 PlayerId, const Object* WorldContextObject);// 0x2600f00
	bool IsTargetConditionMet(const KSCharacter* InTargetCharacter, const KSPlayerState* InSelfPlayerState);// 0x2600e40
	bool IsShopPurchaseConditionMet(const KSItem* InItem);// 0x2600be0
	bool IsRoundResultConditionMet(out const RoundResult InRoundResult, const Controller* InController);// 0x2600d50
	bool IsRevealConditionMet(out const KSRevealInfo InRevealInfo);// 0x2600ca0
	bool IsItemPickedUpConditionMet(const KSItem* ItemPickedUp);// 0x2600be0
	bool IsCombatConditionMet(out const CombatEventInfo DamageInfo);// 0x2600aa0
	bool IsCashEarnedConditionMet(int InCashEarned, out const FText InCashEarnedReason);// 0x2600980
	bool IsActivityEventTriggerConditionMet(out const GameplayTag InActivityEventGameplayTag);// 0x26008c0
	bool IsAccoladeTriggerConditionMet(const KSAccoladeTracker* AccoladeTracker);// 0x2600830
	KSActivityComponent_WeaponMastery_Milestone* GetWeaponMilestoneComponent();// 0x2600510
	int GetTimeUntilUnlock();// 0x26004e0
	bool GetTierDataForProgress(int Progress, out ActivityTierStructure TierData);// 0x2600340
	KSActivityComponent_MercMastery* GetMercMasteryComponent();// 0x2600040
	KSActivityComponent_LoginReward* GetLoginRewardComponent();// 0x25fffa0
	KSActivityComponent_Job* GetJobComponent();// 0x25ffed0
	KSActivityInstance* GetInstanceForPlayer(const Object* WorldContextObject, const Controller* Controller);// 0x25ffe10
	FText GetFormattedDescriptionForTier(ActivityTier ActivityTier);// 0x25ffc60
	KSActivityComponent_Contract* GetContractComponent();// 0x25ffbc0
	KSActivityComponent_BattlePass* GetBattlePassComponent();// 0x25ffb20
	KSActivityComponent_Award* GetAwardComponent();// 0x25ffa80
	KSActivityComponent_Achievement* GetAchievementComponent();// 0x25ff9e0
	bool CanSubtractProgress(const int64 InPlayerId, const KSGameState* InGameState);// 0x25ff6a0
	bool CanAddProgress(const int64 InPlayerId, const KSGameState* InGameState);// 0x25ff5e0

--------------------------------
Class: KSEventTracker.Object
	MulticastInlineDelegateProperty OnTriggered;//[Size: 1]
	bool bDoesTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Controller* OwningController;//[Offset: 0x44, Size: 1]
	KSActivityInstance* WeakActivityInstance;//[Offset: 0x4c, Size: 1]
	<enum,float> ProgressEarnedBySource;//[Offset: 0x58, Size: 1]
	<FString,float> ProgressEarnedByEvent;//[Offset: 0xa8, Size: 1]
	<FString,float> ProgressEarnedByBooster;//[Offset: 0xf8, Size: 1]
	<FString,float> ExtraData;//[Offset: 0x148, Size: 1]
	KSEventTrackerPlayerData* PlayerData;//[Offset: 0x198, Size: 1]
	void TriggerEvent(int Count);// 0x269d7c0
	void TickTracker(float DeltaTime);// 0x2cbecb0
	void StoreProgressBySource(enum Source, float Progress);// 0x269d700
	void StoreProgressByEvent(FString EventName, float Progress);// 0x269d620
	void StoreProgressByBooster(FString BoosterName, float Progress);// 0x269d540
	void StoreExtraData(FString ExtraDataKey, float ExtraDataValue);// 0x269d460
	void ResetAccumulatedProgress();// 0x269d1c0
	bool IsTriggerConditionMet();// 0x269d170
	void HandleTrackerInitialized();// 0x2cbecb0
	void HandleLostController();// 0x2cbecb0
	KSWorldSettings* GetWorldSettings();// 0x269c9e0
	KSPlayerState* GetPlayerState();// 0x269c650
	int GetMatchProgress();// 0xe09410
	KSGameState* GetGameState();// 0x269c4a0
	KSGameMode* GetGameMode();// 0x269c470
	KSGameInstance* GetGameInstance();// 0x269c440
	int GetAccumulatedProgress();// 0x269bdf0

--------------------------------
Class: KSActivityInstance.Object
	MulticastInlineDelegateProperty OnProgressIncremented;//[Size: 1]
	MulticastInlineDelegateProperty OnProgressTierReached;//[Size: 1]
	MulticastInlineDelegateProperty OnProgressCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnProgressInitialized;//[Size: 1]
	KSEventTracker* TrackerInstance;//[Offset: 0x68, Size: 1]
	KSActivityBehavior*[] BehaviorInstances;//[Offset: 0x70, Size: 1]
	int ProgressCount;//[Offset: 0x80, Size: 1]
	bool HasProgressBeenInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	ActivityTier[] ActivityTiers;//[Offset: 0x88, Size: 1]
	Controller* OwningController;//[Offset: 0x98, Size: 1]
	KSActivity* Activity;//[Offset: 0xa0, Size: 1]
	KSActivityManagerBase* ActivityManager;//[Offset: 0xa8, Size: 1]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int InitialProgress;//[Offset: 0xb4, Size: 1]
	bool InitialUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int CurrentProgressEarned;//[Offset: 0xbc, Size: 1]
	int TotalProgressEarned;//[Offset: 0xc0, Size: 1]
	bool ShouldSetProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	<FString,double> PlatformProgressPerAchievement;//[Offset: 0xc8, Size: 1]
	<enum,float> TotalProgressEarnedBySource;//[Offset: 0x118, Size: 1]
	<FString,float> TotalProgressEarnedByEvent;//[Offset: 0x168, Size: 1]
	<FString,float> TotalProgressEarnedByBooster;//[Offset: 0x1b8, Size: 1]
	<FString,float> ExtraData;//[Offset: 0x208, Size: 1]
	void UpdateActivityTiers();// 0x2608a10
	void SyncProgressToInventoryCount();// 0x26089f0
	bool SetProgress(int Count);// 0x2608960
	bool ResetProgress();// 0x2608930
	void ResetAccumulatedProgress();// 0x2608910
	void ProcessExtraData();// 0x26084c0
	void OnSubActivityProgressIncremented(KSActivityInstance* Activity, int Count);// 0x2608400
	void OnEventTrackerTriggered(int Count);// 0x2607e20
	bool IsUnlocked();// 0x2607c70
	bool IsTriggerConditionMet();// 0x2607c40
	bool IsFinished();// 0x2607be0
	bool IsActive();// 0x2607bb0
	bool IncrementProgress(int Count);// 0x2607aa0
	bool HasAuthority();// 0x2607a70
	int GetTotalProgressForCurrentTier();// 0x26079a0
	int GetTotalProgressEarned();// 0x2607980
	void GetTiersForXpRange(out ActivityTier[] Tiers, int StartingCount, int EndingCount);// 0x2607830
	void GetTiers(out ActivityTier[] Tiers);// 0x2607760
	bool GetTierDataForProgress(int Progress, out ActivityTierStructure TierData);// 0x26075c0
	bool GetTierCompletionTime(const Object* WorldContextObject, ActivityTier Tier, out DateTime TimeCompleted);// 0x2607440
	ActivityTier GetProgressTierForSpecifiedProgressCount(int SpecifiedCount);// 0x2607300
	ActivityTier GetProgressTier();// 0x26072b0
	bool GetProgressPercentageToNextTier(out float ProgressPercentage);// 0x2607200
	bool GetProgressPercentageToMaxTier(out float ProgressPercentage);// 0x2607150
	float GetProgressFromSource(enum Source);// 0x26070c0
	float GetProgressFromEvent(FString EventName);// 0x2607010
	float GetProgressFromBooster(FString BoosterName);// 0x2606f60
	FText GetProgressDisplayText(enum DisplayType);// 0x2606e70
	int GetProgressCount();// 0x2606800
	int64 GetPlayerId();// 0x2606e00
	ActivityTier GetNextTierForSpecifiedProgressCount(int SpecifiedCount, bool RepeatFinalTier);// 0x2606d00
	ActivityTier GetNextTier();// 0x2606cb0
	bool GetMaxTier(out ActivityTier MaxTier);// 0x2606bd0
	DateTime GetLastProgressTime();// 0x2606b90
	int GetInventoryProgressCount();// 0x2606b00
	bool GetInitialUnlocked();// 0x2606ae0
	int GetInitialProgress();// 0x2606ac0
	FText GetFormattedDescriptionForTier(ActivityTier ActivityTier);// 0x2606980
	FText GetFormattedDescriptionForNextTier();// 0x26068e0
	float GetExtraDataEntry(FString ExtraDataKey);// 0x2606830
	int GetDisplayProgess();// 0x2606800
	int GetDisplayCompletionProgress();// 0x26067d0
	int GetCurrentProgressEarned();// 0x26067b0
	int GetActivityId();// 0x2605a70
	int GetAccumulatedProgress();// 0x2605030
	void CreateTracker();// 0x2604f80
	void CreateBehaviors();// 0x2604f60
	bool CheckInventoryProgressCount(out int OutProgressCount);// 0x2604e40

--------------------------------
Class: KSActivityBehavior.Object
	Controller* OwningController;//[Offset: 0x28, Size: 1]
	KSActivityInstance* WeakActivityInstance;//[Offset: 0x30, Size: 1]
	void HandleProgressedFromSubActivity(const KSActivityInstance* SubActivity, const int ProgressFromSubActivity);// 0x2cbecb0
	void HandleLostController();// 0x2cbecb0
	void HandleBehaviorInitialized();// 0x2cbecb0
	void HandleActivityTriggered();// 0x2cbecb0
	KSPlayerState* GetPlayerState();// 0x26001b0
	KSGameState* GetKSGameState();// 0x25fff70

--------------------------------
Class: ActivityTier
	int Tier;//[Offset: 0x0, Size: 1]
	int StartingCount;//[Offset: 0x4, Size: 1]
	int Count;//[Offset: 0x8, Size: 1]
	TierRewardItemData[] RewardItems;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TierRewardItemData
	PUMG_StoreItem* RewardItem;//[Offset: 0x0, Size: 1]
	int QuantityInTier;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PUMG_StoreItem.Object
	MulticastInlineDelegateProperty OnPriceSetDirty;//[Size: 1]
	PUMG_StoreItemHelper* pItemHelper;//[Offset: 0x48, Size: 1]
	PlatformInventoryItem* InventoryItem;//[Offset: 0x50, Size: 1]
	PUMG_PortalOffer* PortalOffer;//[Offset: 0x78, Size: 1]
	void UIX_ShowPurchaseConfirmation(PUMG_StoreItemPrice* pPrice);// 0xe79ca0
	bool ShouldDisplayToUser();// 0xe79ac0
	void PurchaseFromPortal();// 0xe79830
	bool IsRented(int64 PlayerId);// 0xe796c0
	bool IsRecipeFulfilled(int64 PlayerId);// 0xe79620
	bool IsOwned(int64 PlayerId);// 0xe79580
	bool IsOnSale();// 0xe79550
	bool IsActive();// 0xe79520
	bool HasPortalOffer();// 0xe794f0
	int GetVendorId();// 0xe792c0
	int GetUIHint();// 0xe79290
	int GetType();// 0xe79260
	int GetSubType();// 0xe79230
	int GetSortOrder();// 0xe78b90
	SoftObjectPath GetSoftItemIconAsPath();// 0xe78b00
	Texture2D* GetSoftItemIcon();// 0xe78a90
	int GetRecipeEntryType();// 0xe78a60
	int GetQuantityOwned(int64 PlayerId);// 0xe789c0
	PUMG_StorePurchaseRequest* GetPurchaseRequest();// 0xe78990
	PUMG_StoreItemPrice*[] GetPrices();// 0xe78910
	PUMG_StoreItemPrice* GetPrice(PlatformInventoryItem* nCurrencyType);// 0xe78790
	PUMG_PortalOffer* GetPortalOffer();// 0xe78770
	FText GetName();// 0xe78610
	int GetLootQuantity();// 0xe785b0
	int GetLootId();// 0xe78580
	int GetItemId();// 0xe78490
	PlatformInventoryItem* GetInventoryItem();// 0xe78430
	FText GetFormattedNameDisplay(int ExternalQuantity);// 0xe78300
	FText GetFormattedDescDisplay();// 0xe78260
	FText GetDescription();// 0xe78160
	PUMG_StoreItem*[] GetCouponsForPrice(PUMG_StoreItemPrice* Price);// 0xe78080
	int GetBundleId();// 0xe77f90
	bool GetBundledContents(out PUMG_StoreItem*[] ContainedItems);// 0xe77fc0
	int GetBestDiscount();// 0xe77f60
	PUMG_StoreItem* GetBestCouponForPrice(PUMG_StoreItemPrice* Price);// 0xe77ed0
	void ConfirmGotoPortalOffer();// 0xe77ce0
	bool CanAfford(PUMG_StoreItemPrice* Price, int Quantity);// 0xe77b60
	bool BundleContainsItemId(int nItemId, bool bSearchSubContainers);// 0xe77a90

--------------------------------
Class: PUMG_StoreItemHelper.Object
	MulticastInlineDelegateProperty OnPurchaseItem;//[Size: 1]
	MulticastInlineDelegateProperty OnPurchasePortalItem;//[Size: 1]
	MulticastInlineDelegateProperty OnNotEnoughCurrency;//[Size: 1]
	MulticastInlineDelegateProperty OnReceiveVendor;//[Size: 1]
	MulticastInlineDelegateProperty OnReceiveXpTables;//[Size: 1]
	MulticastInlineDelegateProperty OnReceivePricePoints;//[Size: 1]
	MulticastInlineDelegateProperty OnPortalOffersReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnPendingPurchaseReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnPurchaseSubmitted;//[Size: 1]
	int PremiumCurrencyRulesetId;//[Offset: 0xb8, Size: 1]
	FName StoreOSS;//[Offset: 0xbc, Size: 1]
	<FString,PUMG_StoreItem*> SkuToStoreItem;//[Offset: 0xe8, Size: 1]
	<int,PUMG_StoreItem*> StoreItems;//[Offset: 0x138, Size: 1]
	<int64,PUMG_XpTable*> XpTables;//[Offset: 0x1e8, Size: 1]
	bool XpTablesLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool PricePointsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool PortalOffersLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool IsQueryingPortalOffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x290, Size: 1]
	void UIX_RedeemCode(FString Code);// 0xe79bc0
	bool UIX_CompletePurchaseItem(PUMG_StorePurchaseRequest* PurchaseRequest);// 0xe79b20
	int RequestVendorData(int[] VendorIds);// 0xe79850
	bool HasPendingPurchase();// 0xe794b0
	PUMG_XpTable* GetXpTable(int64 XpTableId);// 0xe79410
	PUMG_StoreItem*[] GetStoreItemsForVendor(int nVendorId, bool bIncludeInactiveItems, bool bSearchSubContainers);// 0xe790e0
	PUMG_StoreItem*[] GetStoreItemsAndQuantitiesForVendor(int nVendorId, bool bIncludeInactiveItems, bool bSearchSubContainers, out <int,int> QuantityMap, int ExternalQuantity);// 0xe78e40
	PUMG_StoreItem* GetStoreItemForVendorByItemId(int nVendorId, int nItemId, bool bSearchSubVendors);// 0xe78d30
	PUMG_StoreItem* GetStoreItemForVendor(int nVendorId, int nLootItemId);// 0xe78c60
	PUMG_StoreItem* GetStoreItem(int LootId);// 0xe78bc0
	PUMG_StorePurchaseRequest*[] GetPendingPurchaseData();// 0xe786b0
	void ExitInGameStoreUI();// 0xe77eb0
	void EnterInGameStoreUI();// 0xe77e90
	bool DoesVendorContainItem(int nVendorId, PUMG_StoreItem* Item, bool bIncludeInactiveItems, bool bSearchSubContainers);// 0xe77d40
	bool DoesPortalHaveOffers();// 0xe77d00
	bool AreXpTablesLoaded();// 0xe77a70
	bool ArePricePointsLoaded();// 0xe77a50
	bool ArePortalOffersLoaded();// 0xe77a30

--------------------------------
Class: PUMG_XpTable.Object
	int64 GetXpAtLevel(int XpLevel);// 0xe79380
	int64 GetXpAtIndex(int Index);// 0xe792f0
	int GetMinXpLevel();// 0xe785e0
	int GetLevelCount();// 0xe78550
	int GetLevelAtXp(int64 XpPoints);// 0xe784c0
	int64 GetId();// 0xe78400

--------------------------------
Class: PUMG_StorePurchaseRequest.Object
	int LootTableItemId;//[Offset: 0x28, Size: 1]
	int VendorId;//[Offset: 0x2c, Size: 1]
	int PriceInUI;//[Offset: 0x30, Size: 1]
	PlatformInventoryItem* CurrencyType;//[Offset: 0x38, Size: 1]
	int Quantity;//[Offset: 0x40, Size: 1]
	int LocationId;//[Offset: 0x44, Size: 1]
	FString ExternalTransactionId;//[Offset: 0x48, Size: 1]
	int CouponId;//[Offset: 0x58, Size: 1]
	int GiftPlayerId;//[Offset: 0x5c, Size: 1]
	int GiftMsgIndex;//[Offset: 0x60, Size: 1]
	bool AnonymousGift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool SkipCurrencyAmountValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	PUMG_StoreItemHelper* pItemHelper;//[Offset: 0x68, Size: 1]
	bool SubmitPurchaseRequest();// 0xe79af0

--------------------------------
Class: PUMG_StoreItemPrice.Object
	int PreSalePrice;//[Offset: 0x28, Size: 1]
	int Price;//[Offset: 0x2c, Size: 1]
	PlatformInventoryItem* CurrencyType;//[Offset: 0x30, Size: 1]
	PUMG_StoreItemHelper* pItemHelper;//[Offset: 0x58, Size: 1]
	int GetPriceWithCoupon(PUMG_StoreItem* Coupon);// 0xe78880
	int GetDiscountPercentage();// 0xe78230
	bool CanAfford(int Quantity, PUMG_StoreItem* Coupon);// 0xe77c20

--------------------------------
Class: PUMG_PortalOffer.Object
	FString SKU;//[Offset: 0x28, Size: 1]
	float PreSaleCost;//[Offset: 0x38, Size: 1]
	FText DisplayPreSaleCost;//[Offset: 0x40, Size: 1]
	float cost;//[Offset: 0x58, Size: 1]
	FText DisplayCost;//[Offset: 0x60, Size: 1]
	FText CurrencyCode;//[Offset: 0x78, Size: 1]
	FText Name;//[Offset: 0x90, Size: 1]
	FText Desc;//[Offset: 0xa8, Size: 1]
	FText ShortDesc;//[Offset: 0xc0, Size: 1]
	FText TaxMessage;//[Offset: 0xd8, Size: 1]
	int GetDiscountPercentage();// 0xe78200

--------------------------------
Class: KSActivityManagerBase.Object
	KSGameInstance* GameInstance;//[Offset: 0x40, Size: 1]
	KSGameMode* GameMode;//[Offset: 0x48, Size: 1]
	<int64,KSPlayerActivityInstanceContainer*> ActivityInstancesPerPlayer;//[Offset: 0xf0, Size: 1]
	int VendorsLoadGroupId;//[Offset: 0x190, Size: 1]
	KSActivity*[] Activities;//[Offset: 0x198, Size: 1]
	Controller*[] RegisteredControllers;//[Offset: 0x1a8, Size: 1]
	enum SetupPhase;//[Offset: 0x208, Size: 1]
	void RequestActivitiesLoad();// 0x26088d0
	bool QueryActivityInstancesByTime(out const KSActivityInstance*[] ActivityInstances, out const Timespan TimeWindow, out KSActivityInstance*[] Results, enum QueryType);// 0x2608700
	bool QueryActivityInstances(out const KSActivityInstance*[] ActivityInstances, enum QueryType, out KSActivityInstance*[] Results);// 0x26085a0
	void OnStoreVendorsLoaded(int GroupId, out const int[] VendorIds);// 0x2608320
	void OnSetupPhaseStarted(enum Phase);// 0x26082a0
	void OnSetupPhaseFinished(enum Phase);// 0x2608220
	void OnServerPlayerPostLogin(GameModeBase* InGameMode, PlayerController* NewPlayer);// 0x2608160
	void OnServerPlayerLogout(GameModeBase* InGameMode, Controller* Controller);// 0x26080a0
	void OnGameStateBeginPlay(KSGameState* GameState);// 0x2608020
	void OnGameModePhaseChanged(MatchPhase PreviousPhase, MatchPhase NewPhase);// 0x2607f20
	void OnGameModeInitialized(GameModeBase* InGameMode);// 0x2607ea0
	void OnClientLoggedOff(uint32 Code);// 0x2607da0
	void OnClientLoggedIn();// 0x2607d80
	void OnBotSpawned(KSAIController* NewBot);// 0x2607d00
	void OnAssetLoadComplete();// 0x2607ce0
	void OnAllActivitiesLoaded();// 0x2607cc0
	bool IsSetupFinished();// 0x2607c10
	void InitializeActivityInstancesForController(Controller* InController);// 0x2607b30
	void HandleJobChanged(KSPlayerState* PlayerState);// 0x26079f0
	void GoToNextSetupPhase();// 0x26079d0
	bool GetActivityInstancesByTags(GameplayTag[] ActivityTags, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26065f0
	bool GetActivityInstancesByTagAndString(out const GameplayTag ActivityTag, FString Value, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x2606420
	bool GetActivityInstancesByTagAndInt(out const GameplayTag ActivityTag, int Value, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x2606270
	bool GetActivityInstancesByTag(out const GameplayTag ActivityTag, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26060d0
	KSActivityInstance* GetActivityInstanceByTags(GameplayTag[] ActivityTags, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x2605f60
	KSActivityInstance* GetActivityInstanceByTagAndString(out const GameplayTag ActivityTag, FString Value, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x2605de0
	KSActivityInstance* GetActivityInstanceByTagAndInt(out const GameplayTag ActivityTag, int Value, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x2605c70
	KSActivityInstance* GetActivityInstanceByTag(out const GameplayTag ActivityTag, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x2605b60
	KSActivityInstance* GetActivityInstanceByItemId(const int64 ItemId, int64 PlayerId);// 0x2605aa0
	KSActivity* GetActivityByTags(GameplayTag[] ActivityTags);// 0x2605980
	KSActivity* GetActivityByTagAndString(out const GameplayTag ActivityTag, FString Value);// 0x2605880
	KSActivity* GetActivityByTagAndInt(out const GameplayTag ActivityTag, int Value);// 0x26057a0
	KSActivity* GetActivityByTag(out const GameplayTag ActivityTag);// 0x2605700
	bool GetActivitiesByTags(GameplayTag[] ActivityTags, out KSActivity*[] OutActivities);// 0x26055a0
	bool GetActivitiesByTagAndString(out const GameplayTag ActivityTag, FString Value, out KSActivity*[] OutActivities);// 0x2605440
	bool GetActivitiesByTagAndInt(out const GameplayTag ActivityTag, int Value, out KSActivity*[] OutActivities);// 0x2605300
	bool GetActivitiesByTag(out const GameplayTag ActivityTag, out KSActivity*[] OutActivities);// 0x2605200
	bool GetActiveActivityInstancesByTag(out const GameplayTag ActivityTag, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x2605060
	bool DoesRequireSetupPhase(enum Phase);// 0x2604fa0
	void CompleteActivityByTag(GameplayTag ActivityTag);// 0x2604ee0
	void AttemptInitialActivityCreation();// 0x2604d60

--------------------------------
Class: KSGameInstance.PGame_GameInstance.GameInstance.Object
	MulticastInlineDelegateProperty LoadingScreenBeganDel;//[Size: 1]
	MulticastInlineDelegateProperty LoadingScreenEndedDel;//[Size: 1]
	GameplayTagQuery AlwaysNeededPrimaryAssetQuery;//[Offset: 0x278, Size: 1]
	FName[] AlwaysNeededPrimaryAssetBundles;//[Offset: 0x2c0, Size: 1]
	DataTable* LoadingScreenTipsTable;//[Offset: 0x328, Size: 1]
	LoadingScreenImageManager* LoadingScreenImageManager;//[Offset: 0x330, Size: 1]
	bool bDisableScreenSaver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	KSActivityManagerBase*[] ActivityManagers;//[Offset: 0x350, Size: 1]
	KSAcquisitionManager* AcquisitionManager;//[Offset: 0x360, Size: 1]
	PUMG_StoreItemHelper* StoreItemHelper;//[Offset: 0x368, Size: 1]
	KSJsonDataFactory* JsonDataFactory;//[Offset: 0x370, Size: 1]
	KSPushNotificationManager* PushNotificationManager;//[Offset: 0x378, Size: 1]
	KSLoadoutDataFactory* LoadoutDataFactory;//[Offset: 0x380, Size: 1]
	class KSArmoryLoadoutData* DefaultArmoryLoadoutClass;//[Offset: 0x388, Size: 1]
	KSUISessionManager* UISessionManager;//[Offset: 0x390, Size: 1]
	KSSupplyDropManager* SupplyDropManager;//[Offset: 0x398, Size: 1]
	KSActivityInstanceManager* ActivityInstanceManager;//[Offset: 0x3a0, Size: 1]
	KSPlayerInventoryHelper* PlayerInventoryHelper;//[Offset: 0x3a8, Size: 1]
	KSPlayerStatsManager* PlayerStatsManager;//[Offset: 0x3b0, Size: 1]
	KSPlayerChallengesManager* PlayerChallengesManager;//[Offset: 0x3b8, Size: 1]
	KSNPETrackManager* NPETrackManager;//[Offset: 0x3c0, Size: 1]
	KSMercMasteryManager* MercMasteryManager;//[Offset: 0x3c8, Size: 1]
	KSMercManager* MercManager;//[Offset: 0x3d0, Size: 1]
	KSWeaponManager* WeaponManager;//[Offset: 0x3d8, Size: 1]
	KSAwardsManager* AwardsManager;//[Offset: 0x3e0, Size: 1]
	KSGeneralProgressionManager* GeneralProgressionManager;//[Offset: 0x3e8, Size: 1]
	KSRankedManager* RankedManager;//[Offset: 0x3f0, Size: 1]
	KSBattlePassProgressionManager* BattlePassProgressionManager;//[Offset: 0x3f8, Size: 1]
	KSEventChallengesManager* EventChallengesManager;//[Offset: 0x400, Size: 1]
	KSSeasonalEventChallengesManager* SeasonalEventChallengesManager;//[Offset: 0x408, Size: 1]
	KSActivitySequenceManager* ActivitySequenceManager;//[Offset: 0x410, Size: 1]
	KSAudioManager* AudioManager;//[Offset: 0x418, Size: 1]
	KSPunishmentManager* PunishmentManager;//[Offset: 0x420, Size: 1]
	KSBoosterManager* BoosterManager;//[Offset: 0x428, Size: 1]
	KSWeaponMasteryManager* WeaponMasteryManager;//[Offset: 0x430, Size: 1]
	PUMG_VoiceChatManager* VoiceChatManager;//[Offset: 0x438, Size: 1]
	KSInstancePlayerStatManager* InstancePlayerStatManager;//[Offset: 0x440, Size: 1]
	KSMobileActivityManager* MobileActivityManager;//[Offset: 0x448, Size: 1]
	KSMarketingEventHelper* MarketingHelper;//[Offset: 0x450, Size: 1]
	KSCallToActionManager* CallToActionManager;//[Offset: 0x458, Size: 1]
	KSWeaponAsset* WingsuitWeaponAsset;//[Offset: 0x4e0, Size: 1]
	bool ShouldUseZombiePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	int ZombiePreventionSeconds;//[Offset: 0x4ec, Size: 1]
	void UpdateRecordedAnimStats(out <FName,KSAnimStats> NewStats);// 0x26a2790
	KSWeaponMasteryManager* GetWeaponMasteryManager();// 0x11fad30
	KSWeaponManager* GetWeaponManager();// 0x26a1ff0
	KSSupplyDropManager* GetSupplyDropManager();// 0x26a1fd0
	PUMG_StoreItemHelper* GetStoreItemHelper();// 0x26a1fb0
	KSRankedManager* GetRankedManager();// 0x26a1f90
	KSPunishmentManager* GetPunishmentManager();// 0x26a1f70
	KSPlayerStatsManager* GetPlayerStatsManager();// 0x26a1f20
	KSPlayerInventoryHelper* GetPlayerInventoryHelper();// 0x26a1f00
	KSPlayerChallengesManager* GetPlayerChallengesManager();// 0x26a1ee0
	KSNPETrackManager* GetNPETrackManager();// 0x26a1d80
	KSMobileActivityManager* GetMobileActivityManager();// 0x26a1d60
	KSMercMasteryManager* GetMercMasteryManager();// 0x26a1d40
	KSMercManager* GetMercManager();// 0x26a1d20
	KSMarketingEventHelper* GetMarketingHelper();// 0x26a1d00
	KSLoadoutDataFactory* GetLoadoutDataFactory();// 0x26a1ce0
	bool GetLoadingScreenImage(out Texture2D* LoadingScreenImageSoftRef, FString InMapName, out FText MapDisplayName, out FText MapRegion, out FText MapDescription);// 0x26a1a20
	KSInstancePlayerStatManager* GetInstancePlayerStatManager();// 0x26a1910
	KSGeneralProgressionManager* GetGeneralProgressionManager();// 0x26a18b0
	KSEventChallengesManager* GetEventChallengesManager();// 0x26a1890
	class KSArmoryLoadoutData GetDefaultArmoryLoadoutClass();// 0x26a1870
	KSCallToActionManager* GetCallToActionManager();// 0x26a17f0
	KSBoosterManager* GetBoosterManager();// 0x26a17d0
	KSBattlePassProgressionManager* GetBattlePassProgressionManager();// 0x26a17b0
	KSAwardsManager* GetAwardsManager();// 0x26a1790
	KSAudioManager* GetAudioManager();// 0x26a1770
	KSActivitySequenceManager* GetActivitySequenceManager();// 0x26a1750
	KSActivityInstance* GetActivityInstanceForActivity(KSActivity* Activity, Controller* OwningController);// 0x26a1690
	void ExportAnimAudit(const FString Filename);// 0x26a1590
	void EndLoading();// 0x2cbecb0
	void ClaimTutorialAward();// 0x26a1570
	void BeginLoading(FString mapName);// 0x2cbecb0

--------------------------------
Class: PGame_GameInstance.GameInstance.Object
	bool bLogoffOnAppSuspend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool bLogoffOnAppResume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 1]
	FString LastSonyMatchId;//[Offset: 0x1f0, Size: 1]
	bool bStartHotfixProcessingOnUpdateAppSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	void ProvideSonyMatchFeedback(bool bReviewTeamOnly);// 0xd77050
	bool HasValidSonyMatch();// 0xd76770
	void EndLoadingScreen(World* World);// 0xd76010
	void BeginLoadingScreen(FString mapName);// 0xd75a90

--------------------------------
Class: LoadingScreenImageManager.DataAsset.Object
	LoadingScreenImageInfo FailSafeLoadingScreen;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LoadingScreenImageInfo
	Texture2D* LoadingScreenImage;//[Offset: 0x0, Size: 1]
	FText MapDisplayName;//[Offset: 0x28, Size: 1]
	FText MapRegion;//[Offset: 0x40, Size: 1]
	FText MapDescription;//[Offset: 0x58, Size: 1]

--------------------------------
Class: KSAcquisitionManager.PUMG_AcquisitionManager.Object
	MulticastInlineDelegateProperty OnAcquisitionReady;//[Size: 1]
	KSAcquisition*[] QueuedAcquisitions;//[Offset: 0x78, Size: 1]
	KSAcquisition* PendingAcquisition;//[Offset: 0x88, Size: 1]
	KSEquipOnAcquisitionData*[] PendingEquipables;//[Offset: 0x90, Size: 1]
	void SetupEventGrandPrizeTestAcquisition();// 0x2601790
	void SetupBattlePassTestAcquisition(int StartTier, int EndTier);// 0x26016d0
	KSAcquisition* GetNextAcquistion();// 0x26000e0
	void CreateAcquisitionForItem(PUMG_StoreItem* StoreItem);// 0x25ff760

--------------------------------
Class: PUMG_AcquisitionManager.Object
	MulticastInlineDelegateProperty OnAcquisitionSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnAcquisitionFailed;//[Size: 1]
	PUMG_StoreItemHelper* StoreItemHelper;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSAcquisition.Object
	enum AcquisitionType;//[Offset: 0x28, Size: 1]
	AcquisitionItemData*[] AcquisitionItems;//[Offset: 0x30, Size: 1]
	KSJobItem* DisplayedJob;//[Offset: 0x40, Size: 1]
	void SortAcquisitionItemsBySortOrder();// 0x26017d0
	void SortAcquisitionItemsByBattlePassDisplayOrder();// 0x26017b0
	bool IsPurchase();// 0x2600c70
	bool IsBundleAcquisition();// 0x2600960

--------------------------------
Class: AcquisitionItemData.Object
	PUMG_StoreItem* StoreItem;//[Offset: 0x28, Size: 1]
	int Quantity;//[Offset: 0x30, Size: 1]
	KSWeaponAsset* AssociatedWeapon;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSEquipOnAcquisitionData.Object
	int LoadoutTypeId;//[Offset: 0x28, Size: 1]
	int LoadoutSlotTypeId;//[Offset: 0x2c, Size: 1]
	int LoadoutSlotPosition;//[Offset: 0x30, Size: 1]
	KSJobItem* JobToEquipTo;//[Offset: 0x38, Size: 1]
	KSWeaponAsset* WeaponToEquipTo;//[Offset: 0x40, Size: 1]
	KSItem* ItemToEquip;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSJsonDataFactory.PUMG_JsonDataFactory.PUMG_DataFactory.Object
	<FString,Texture2DDynamic*> mapFilePathToTexture;//[Offset: 0x48, Size: 1]
	<FString,Texture2DDynamic*> FilePathToWeakTexture;//[Offset: 0x98, Size: 1]
	void OnInventoryItemUpdated(out const InventoryId InventoryId);// 0x26e7230

--------------------------------
Class: PUMG_JsonDataFactory.PUMG_DataFactory.Object
	void HandleJsonReady(PGame_LandingPanelJSONHandler* pHandler);// 0xe6ee20
	void HandleImagesReady(PGame_LandingPanelJSONHandler* pHandler);// 0xe6ed90

--------------------------------
Class: PUMG_DataFactory.Object
	PUMG_HUD* MyHud;//[Offset: 0x28, Size: 1]
	bool IsLoggedIn();// 0xe653a0

--------------------------------
Class: PGame_LandingPanelJSONHandler.Object
	MulticastInlineDelegateProperty OnHandlerObjectReady;//[Size: 1]
	MulticastInlineDelegateProperty OnJsonDownloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnJsonReady;//[Size: 1]
	MulticastInlineDelegateProperty OnImagesDownloaded;//[Size: 1]
	<FString,Texture2DDynamic*> mapFilePathToTexture;//[Offset: 0x120, Size: 1]
	void RequestNewJson();// 0xd77160

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: PUMG_HUD.HUD.Actor.Object
	MulticastInlineDelegateProperty OnInputStateChanged;//[Size: 1]
	<int64,PlayerDataUpdated(MulticastInlineDelegateProperty)> PlayerDataUpdated;//[Offset: 0x320, Size: 1]
	PUMG_InputManager* InputManager;//[Offset: 0x370, Size: 1]
	PUMG_ViewManager* ViewManager;//[Offset: 0x378, Size: 1]
	class PUMG_InputManager* InputManagerClass;//[Offset: 0x380, Size: 1]
	PUMG_UISoundTheme* SoundTheme;//[Offset: 0x388, Size: 1]
	void TestHirezLogin(FString User, FString password);// 0xe6a660
	void TestAutoLogin(int ControllerId);// 0xe6a5e0
	void ShowSystemTrayNotification(FString popupType);// 0xe6a520
	void SetUseNewUIFeatures(bool UseNewFeatures);// 0x2cbecb0
	void SetUIFocus();// 0xe6a500
	void SetNavigationEnabled(bool Enabled);// 0xe6a300
	void OnQuit();// 0xe69990
	bool OnNavigateBack();// 0x2cbecb0
	void OnConfirmQuit();// 0xe69970
	PUMG_PlayerInfo* NewPlayerInfo();// 0xe69940
	bool IsLobbyHUD();// 0xe69910
	bool IsCrossplayEnabled();// 0xe698e0
	void InputStateChangePassthrough(byte InputState);// 0xe69860
	void gmmf(bool bAutolaunch, int TaskForces);// 0xe6ac30
	PUMG_ViewManager* GetViewManager();// 0xe69780
	void GetPortalTokenDetails();// 0xe69760
	PUMG_PopupManager* GetPopupManager();// 0x2cbecb0
	PlayerController* GetPlayerControllerOwner();// 0xe69730
	PUMG_PlayerInfo* GetOrCreatePlayerInfo(int64 PlayerId);// 0xe695b0
	PUMG_InputManager* GetInputManager();// 0xe69590
	byte GetCurrentInputState();// 0xe68ff0
	void DisplayGenericPopup(FString sTitle, FString sDesc);// 0xe68ea0
	void DisplayGenericError(FString sDesc);// 0xe68e00

--------------------------------
Class: PUMG_InputManager.Object
	<PUMG_Widget*,PUMG_InputFocusDetails> InputFocusData;//[Offset: 0x28, Size: 1]
	InputComponent* InputComponent;//[Offset: 0xa0, Size: 1]
	FName GlobalRouteName;//[Offset: 0xe4, Size: 1]
	InputComponent* ContextActionInputComponent;//[Offset: 0xf0, Size: 1]
	SoftObjectPath ContextActionDataTableClassName;//[Offset: 0xf8, Size: 1]
	DataTable* ContextActionDT;//[Offset: 0x110, Size: 1]
	<FName,RouteContextInfo> RouteContextInfoMap;//[Offset: 0x118, Size: 1]
	FName ActiveRoute;//[Offset: 0x168, Size: 1]
	FName[] OverrideRouteStack;//[Offset: 0x170, Size: 1]
	void SetInputActions(ContextActionData*[] ActionData);// 0xe6a220
	void SetContextHoldReleaseAction(FName Route, FName ContextName, out const delegate UpdateCallback, out const delegate EventCallback);// 0xe6a010
	void SetContextCycleAction(FName Route, FName ContextName, out const delegate EventCallback);// 0xe69ee0
	void SetContextAction(FName Route, FName ContextName, out const delegate EventCallback);// 0xe69db0
	void SetActiveRoute(FName Route);// 0xe69d30
	bool RemoveOverrideRoute(FName Route);// 0xe69ba0
	void PushOverrideRoute(FName Route);// 0xe699f0
	FName PopOverrideRoute();// 0xe699b0
	void HandleModeChange(byte Mode);// 0xe697e0
	bool GetFocusedWidget(PUMG_Widget* ParentWidget, out Widget* FocusWidget);// 0xe69080
	FName GetCurrentRoute();// 0xe69020
	FName GetCurrentContextRoute();// 0xe68fb0
	void ClearOverrideRouteStack();// 0xe68dc0
	void ClearNavInputThrottled();// 0xe68da0
	void ClearNavInputDebouncedThrottled();// 0xe68d80
	void ClearContextAction(FName Route, FName ContextName);// 0xe68cc0
	void ClearAllContextActions(FName Route);// 0xe68c20
	void AddContextActions(FName Route, FName[] ContextNames);// 0xe68a10
	void AddContextAction(FName Route, FName ContextName, FText FormatAdditive);// 0xe688b0

--------------------------------
Class: ContextActionData.Object
	FName RowName;//[Offset: 0x30, Size: 1]
	FText FormatAdditive;//[Offset: 0x38, Size: 1]
	ContextAction RowData;//[Offset: 0x50, Size: 1]
	delegate OnContextAction;//[Offset: 0xa0, Size: 1]
	delegate OnCycleAction;//[Offset: 0xb0, Size: 1]
	delegate OnHoldActionUpdate;//[Offset: 0xc0, Size: 1]
	delegate OnHoldReleaseAction;//[Offset: 0xd0, Size: 1]
	void TriggerHoldReleaseContextAction(enum Status);// 0xe6a840
	void TriggerCycleContextActionPrev();// 0xe6a820
	void TriggerCycleContextActionNext();// 0xe6a800
	void TriggerCycleContextAction(bool bNext);// 0xe6a770
	void TriggerContextAction();// 0xe6a750
	void StartTriggerHoldAction();// 0xe6a5c0
	void ClearTriggerHoldAction();// 0xe68de0

--------------------------------
Class: ContextAction.TableRowBase
	FText Text;//[Offset: 0x8, Size: 1]
	FName ActionName;//[Offset: 0x20, Size: 1]
	byte[] ValidInputTypes;//[Offset: 0x28, Size: 1]
	int SortOrder;//[Offset: 0x38, Size: 1]
	enum Anchor;//[Offset: 0x3c, Size: 1]
	enum ActionType;//[Offset: 0x3d, Size: 1]
	class PUMG_Widget* PromptWidget;//[Offset: 0x40, Size: 1]
	float HoldDuration;//[Offset: 0x48, Size: 1]
	bool IsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnGamepadHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnMouseEntered;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateBack;//[Size: 1]
	MulticastInlineDelegateProperty OnTextureLoadComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateUpFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateDownFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateLeftFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateRightFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusGroupNavigateUpFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusGroupNavigateDownFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusGroupNavigateLeftFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusGroupNavigateRightFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnHideSequenceFinished;//[Size: 1]
	MulticastInlineDelegateProperty OnShowSequenceFinished;//[Size: 1]
	PUMG_HUD* MyHud;//[Offset: 0x318, Size: 1]
	FName MyRouteName;//[Offset: 0x320, Size: 1]
	bool CloseOnLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool IsComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	bool StartsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32a, Size: 1]
	bool InputComponentUsesWidgetPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32b, Size: 1]
	bool UsesBlocker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	bool BlockerClickToClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 1]
	bool EnableGameStateSetNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 1]
	Texture2D* LoadedTexture;//[Offset: 0x338, Size: 1]
	PUMG_MobileLayoutSequencePlayer* MobileLayoutSequencePlayer;//[Offset: 0x4b0, Size: 1]
	WidgetAnimation* MobileLayoutAnim;//[Offset: 0x4b8, Size: 1]
	bool bMobileLayoutActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	void UpdateRegistrationToInputManager(Widget* Widget, int FocusGroup, Widget* Up, Widget* Down, Widget* Left, Widget* Right);// 0xe80550
	void UnregisterWidgetFromInputManager(Widget* Widget);// 0xe804d0
	void UnregisterFocusGroup(int FocusGroup);// 0xe80450
	void UninitializeWidget();// 0xe80430
	void ToggleMobileLayout(byte InputState);// 0xe803b0
	bool SwapViewRoute(FName RouteName, FName SwapTargetRoute, bool ForceTransition);// 0xe802b0
	void StartShowSequence(FName FromRoute, FName ToRoute);// 0xe800e0
	void StartHideSequence(FName FromRoute, FName ToRoute);// 0xe80010
	void ShowWidget();// 0xe7fff0
	bool ShouldUseMobileLayout();// 0xe7ffc0
	void SetRouteName(FName RouteName);// 0xe7fe20
	void SetPendingRouteData(FName RouteName, Object* Data);// 0xe7fd60
	void SetFocusToWidgetOfGroup(int FocusGroup, PUMG_Widget* Widget);// 0xe7fb60
	Widget* SetFocusToThis();// 0xe7fb30
	void SetFocusToGroup(int FocusGroup, bool KeepLastFocus);// 0xe7fa60
	void SetDefaultFocusForGroup(Widget* Widget, int FocusGroup);// 0xe7f9a0
	void SetContextHoldReleaseAction(FName ContextName, out const delegate UpdateCallback, out const delegate EventCallback);// 0xe7f840
	void SetContextCycleAction(FName ContextName, out const delegate EventCallback);// 0xe7f750
	void SetContextAction(FName ContextName, out const delegate EventCallback);// 0xe7f660
	bool RemoveViewRoute(FName RouteName, bool ForceTransition);// 0xe7f490
	bool RemoveTopViewRoute(bool ForceTransition);// 0xe7f400
	void RegisterWidgetToInputManager(Widget* Widget, int FocusGroup, Widget* Up, Widget* Down, Widget* Left, Widget* Right);// 0xe7f180
	void OnShown();// 0xe7efc0
	void OnHide();// 0xe7ef00
	void OnGamepadUnhover();// 0xe7eee0
	void OnGamepadHover();// 0xe7eec0
	void OnExitMobileLayout();// 0x2cbecb0
	void OnEnterMobileLayout();// 0x2cbecb0
	void NavigateUpFailure();// 0x2cbecb0
	void NavigateRightFailure();// 0x2cbecb0
	void NavigateLeftFailure();// 0x2cbecb0
	void NavigateDownFailure();// 0x2cbecb0
	bool NavigateConfirmPressed();// 0xe7ee90
	void NavigateConfirmCancelled();// 0xe7ee70
	bool NavigateConfirm();// 0xe7ee40
	bool NavigateBackPressed();// 0xe7ee10
	void NavigateBackCancelled();// 0xe7edf0
	bool NavigateBack();// 0xe7edc0
	void NativeFocusGroupNavigateUpFailure(int FocusGroup, PUMG_Widget* Widget);// 0xe7ecf0
	void NativeFocusGroupNavigateRightFailure(int FocusGroup, PUMG_Widget* Widget);// 0xe7ec20
	void NativeFocusGroupNavigateLeftFailure(int FocusGroup, PUMG_Widget* Widget);// 0xe7eb50
	void NativeFocusGroupNavigateDownFailure(int FocusGroup, PUMG_Widget* Widget);// 0xe7ea80
	bool IsTopViewRoute();// 0xe7ea50
	bool IsFocusEnabled();// 0xe7e900
	void InitializeWidgetNavigation();// 0xe7e880
	void InitializeWidgetButtonListeners();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0xe7e7f0
	void InheritFocusGroupFromWidget(int TargetFocusGroupNum, PUMG_Widget* SourceWidget, int SourceFocusGroupNum);// 0xe7e650
	void HideWidget();// 0xe7e630
	PUMG_ViewManager* GetViewManager();// 0xe7e300
	bool GetUsesBlocker();// 0xe7e2e0
	bool GetPendingRouteData(FName RouteName, out Object* Data);// 0xe7e170
	bool GetIsComponent();// 0xe7e080
	Geometry GetGeometryFromLastTick();// 0xe7e010
	bool GetCurrentFocusGroup(out int OutFocusGroup);// 0xe7ddc0
	Widget* GetCurrentFocusForGroup(int FocusGroup);// 0xe7dd30
	bool GetBlockerClickToClose();// 0xe7dd10
	void GameStateSet(GameStateBase* GameState);// 0xe7da20
	void GamepadUnhover();// 0x2cbecb0
	void GamepadHover();// 0x2cbecb0
	EventReply GamepadButtonUp(Key Button);// 0xe7dbe0
	EventReply GamepadButtonDown(Key Button);// 0xe7dab0
	void FocusGroupNavigateUpFailure(int FocusGroup);// 0x2cbecb0
	void FocusGroupNavigateRightFailure(int FocusGroup);// 0x2cbecb0
	void FocusGroupNavigateLeftFailure(int FocusGroup);// 0x2cbecb0
	void FocusGroupNavigateDownFailure(int FocusGroup);// 0x2cbecb0
	bool ExplicitNavigateUp();// 0xe7d9f0
	bool ExplicitNavigateRight();// 0xe7d9c0
	bool ExplicitNavigateLeft();// 0xe7d990
	bool ExplicitNavigateDown();// 0xe7d960
	void DisplayGenericPopup(FString sTitle, FString sDesc);// 0xe7d870
	void DisplayGenericError(FString sDesc);// 0xe7d7d0
	void ClearNavigationInputThrottle();// 0xe7d720
	void ClearContextAction(FName ContextName);// 0xe7d6a0
	void ClearAllContextActions();// 0xe7d680
	bool CanCloseOnLogout();// 0xe7d650
	void CallOnShowSequenceFinished();// 0xe7d630
	void CallOnHideSequenceFinished();// 0xe7d610
	void BindToInputManager(int DefaultFocusGroup);// 0xe7d590
	void AsyncLoadTexture2D(Texture2D* Texture2DRef);// 0xe7d4b0
	bool AddViewRoute(FName RouteName, bool ClearRouteStack, bool ForceTransition, Object* Data);// 0xe7d340
	void AddContextActions(FName[] ContextNames);// 0xe7d260
	void AddContextAction(FName ContextName, FText FormatAdditive);// 0xe7d130

--------------------------------
Class: PUMG_ViewManager.Object
	PUMG_ViewLayer*[] ViewLayers;//[Offset: 0x28, Size: 1]
	<FName,PUMG_Widget*> StickyWidgetMap;//[Offset: 0x38, Size: 1]
	MulticastInlineDelegateProperty OnViewStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnViewStateChangeStarted;//[Size: 1]
	PUMG_HUD* HudRef;//[Offset: 0xa8, Size: 1]
	CanvasPanel*[] CanvasPanels;//[Offset: 0xb0, Size: 1]
	StickyWidgetData[] StickyWidgets;//[Offset: 0xc0, Size: 1]
	DataTable* Routes;//[Offset: 0xd0, Size: 1]
	ViewRouteRedirectData[] AlwaysCheckRouteData;//[Offset: 0xd8, Size: 1]
	bool SwapRoute(FName RouteName, FName SwapTargetRoute, bool ForceTransition);// 0xe801b0
	void SetPendingRouteData(FName RouteName, Object* Data);// 0xe7fca0
	bool ReplaceRoute(FName RouteName, bool ForceTransition, Object* Data);// 0xe7f550
	bool RemoveRoute(FName RouteName, bool ForceTransition);// 0xe7f340
	bool PushRoute(FName RouteName, bool ForceTransition, Object* Data);// 0xe7f070
	bool PopRoute(bool ForceTransition);// 0xe7efe0
	bool IsLayerIdle(enum LayerType);// 0xe7e930
	bool IsEveryLayerIdle();// 0xe7e8d0
	bool IsBlockingAcquisitions();// 0xe7e8a0
	void InitializeRoutes(DataTable* RouteTable);// 0xe7e770
	void Initialize();// 0xe7e750
	bool HasCompletedRedirectFlow(enum RedirectPhase);// 0xe7e5a0
	int GetViewRouteCount();// 0xe7e450
	bool GetViewRoute(FName RouteName, out ViewRoute ViewRoute);// 0xe7e330
	PUMG_Widget* GetTopViewRouteWidget();// 0xe7e2b0
	FName GetTopViewRoute();// 0xe7e270
	enum GetTopLayer();// 0xe7e240
	bool GetPendingRouteData(FName RouteName, out Object* Data);// 0xe7e0a0
	FName GetDefaultRouteForLayer(enum LayerType);// 0xe7df80
	FName GetCurrentTransitionRoute(enum Layer);// 0xe7def0
	FName GetCurrentRoute(enum Layer);// 0xe7de60
	bool ContainsRoute(FName RouteName);// 0xe7d740

--------------------------------
Class: PUMG_ViewLayer.Object
	CanvasPanel* DisplayTarget;//[Offset: 0x28, Size: 1]
	PUMG_ViewManager* MyManager;//[Offset: 0x30, Size: 1]
	enum CurrentTransitionState;//[Offset: 0x38, Size: 1]
	FName[] CurrentRouteStack;//[Offset: 0x40, Size: 1]
	FName[] CurrentTransitionRouteStack;//[Offset: 0x50, Size: 1]
	<FName,PUMG_Widget*> RouteWidgetMap;//[Offset: 0x60, Size: 1]
	FName DefaultRoute;//[Offset: 0xb0, Size: 1]
	<FName,Object*> PendingRouteData;//[Offset: 0xc0, Size: 1]
	DataTable* Routes;//[Offset: 0x110, Size: 1]
	bool IsRouteValid(FName RouteName);// 0xe7e9c0
	void GoToRoute_InternalShowStep();// 0xe7e580
	void GoToRoute_HandleShowFinished(PUMG_Widget* Widget);// 0xe7e500
	void GoToRoute_HandleHideFinished(PUMG_Widget* Widget);// 0xe7e480

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x3b54ce0

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 1]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int ZOrder;//[Offset: 0x64, Size: 1]
	void SetZOrder(int InZOrder);// 0x3b56df0
	void SetSize(Vector2D InSize);// 0x3b56990
	void SetPosition(Vector2D InPosition);// 0x3b56810
	void SetOffsets(Margin InOffset);// 0x3b56430
	void SetMinimum(Vector2D InMinimumAnchors);// 0x3b56330
	void SetMaximum(Vector2D InMaximumAnchors);// 0x3b562b0
	void SetLayout(out const AnchorData InLayoutData);// 0x3b56090
	void SetAutoSize(bool InbAutoSize);// 0x3b55570
	void SetAnchors(Anchors InAnchors);// 0x3b55450
	void SetAlignment(Vector2D InAlignment);// 0x3b553d0
	int GetZOrder();// 0x3b55310
	Vector2D GetSize();// 0x3b55070
	Vector2D GetPosition();// 0x3b55030
	Margin GetOffsets();// 0x3b54ff0
	AnchorData GetLayout();// 0x3b54f60
	bool GetAutoSize();// 0x3b54ed0
	Anchors GetAnchors();// 0x3b54e90
	Vector2D GetAlignment();// 0x3b54e50

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 1]
	Anchors Anchors;//[Offset: 0x10, Size: 1]
	Vector2D Alignment;//[Offset: 0x20, Size: 1]

--------------------------------
Class: StickyWidgetData
	FName StickyWidgetName;//[Offset: 0x0, Size: 1]
	PUMG_Widget* Widget;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ViewRouteRedirectData
	FName RouteName;//[Offset: 0x0, Size: 1]
	int CheckOrder;//[Offset: 0x8, Size: 1]
	bool OpenOverOriginal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	PUMG_ViewRedirecter* Redirector;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PUMG_ViewRedirecter.Object
	bool ShouldRedirect(PUMG_HUD* HUD, FName Route, out Object* SceneData);// 0xe7fea0

--------------------------------
Class: ViewRoute.TableRowBase
	class PUMG_Widget* ViewWidget;//[Offset: 0x8, Size: 1]
	FName[] ViewStickyWidgets;//[Offset: 0x10, Size: 1]
	enum ViewLayer;//[Offset: 0x20, Size: 1]
	bool IsDefaultRoute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool ShouldPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool RequiresLoggedIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool AlwaysShowContextBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	enum RedirectionPhase;//[Offset: 0x25, Size: 1]
	int RedirectionPhaseOrder;//[Offset: 0x28, Size: 1]
	class PUMG_ViewRedirecter* ViewRedirector;//[Offset: 0x30, Size: 1]
	bool OpenOverOriginal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool BlockAcquisitions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]

--------------------------------
Class: PUMG_MobileLayoutSequencePlayer.UMGSequencePlayer.Object

--------------------------------
Class: PUMG_InputFocusDetails
	PUMG_InputFocusGroup[] FocusGroups;//[Offset: 0x0, Size: 1]
	int DefaultFocusGroupIndex;//[Offset: 0x10, Size: 1]
	int CurrentFocusGroupIndex;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PUMG_InputFocusGroup

--------------------------------
Class: RouteContextInfo
	ContextActionData*[] ActionData;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PUMG_UISoundTheme.Object
	<FName,PUMG_SoundThemeEventMapping> SoundEventBindings;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PUMG_SoundThemeEventMapping
	FName SoundEventName;//[Offset: 0x0, Size: 1]
	SoundCue* SoundToPlay;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x160, Size: 1]
	SoundNode* FirstNode;//[Offset: 0x168, Size: 1]
	float VolumeMultiplier;//[Offset: 0x170, Size: 1]
	float PitchMultiplier;//[Offset: 0x174, Size: 1]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x178, Size: 1]
	float SubtitlePriority;//[Offset: 0x518, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 1]
	int CookedQualityIndex;//[Offset: 0x524, Size: 1]
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 1]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PUMG_PopupManager.PUMG_Widget.UserWidget.Widget.Visual.Object
	PUMG_PopupConfig[] PopupQueue;//[Offset: 0x4d8, Size: 1]
	int m_nPopupId;//[Offset: 0x4e8, Size: 1]
	FText CommittedText;//[Offset: 0x5d0, Size: 1]
	void ShowPopup(PUMG_PopupConfig popupData);// 0x2cbecb0
	void RemovePopup(int PopupId);// 0xe74570
	void OnPopupResponse(int nPopupId, int nResponseIndex);// 0xe744b0
	void OnPopupCanceled();// 0xe74490
	void NextPopup();// 0xe74470
	void HidePopup();// 0x2cbecb0
	void CloseUnimportantPopups();// 0xe73490
	void CloseAllPopups();// 0xe73470
	int AddPopup(out const PUMG_PopupConfig popupData);// 0xe73000

--------------------------------
Class: PUMG_PopupConfig
	FText Header;//[Offset: 0x0, Size: 1]
	FText SubHeading;//[Offset: 0x18, Size: 1]
	Texture2D* HeadingIcon;//[Offset: 0x30, Size: 1]
	FText Description;//[Offset: 0x58, Size: 1]
	FText Warning;//[Offset: 0x70, Size: 1]
	bool TextEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	FText TextEntryHint;//[Offset: 0x90, Size: 1]
	bool IsImportant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool TreatAsBlocker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	PUMG_PopupButtonConfig[] Buttons;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty CancelAction;//[Size: 1]
	byte TextAlignment;//[Offset: 0xd0, Size: 1]
	int PopupId;//[Offset: 0xd4, Size: 1]
	enum PopupFormat;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: PUMG_PopupButtonConfig
	FText Label;//[Offset: 0x0, Size: 1]
	MulticastInlineDelegateProperty Action;//[Size: 1]
	enum Type;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InventoryId
	int64 PlayerId;//[Offset: 0x0, Size: 1]
	int64 ItemId;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSPushNotificationManager.Object
	KSJsonDataFactory* JsonDataFactory;//[Offset: 0x28, Size: 1]
	FString JsonPanel;//[Offset: 0x30, Size: 1]
	KSJsonPushNotification*[] Notifications;//[Offset: 0x40, Size: 1]
	enum State;//[Offset: 0x50, Size: 1]
	bool bNotificationPermissionGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	void HandleRegisteredForUserNotifications(int Types);// 0x2777a00
	void HandleRegisteredForRemoteNotifications(byte[] InToken);// 0x2777920
	void HandleJsonReady(FString JsonName);// 0x2777800

--------------------------------
Class: KSJsonPushNotification.KSJsonData.Object
	FString Header;//[Offset: 0x88, Size: 1]
	FString Body;//[Offset: 0x98, Size: 1]
	FString ActivationEvent;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: KSJsonData.Object
	FName UniqueId;//[Offset: 0x28, Size: 1]
	int AssociatedLootId;//[Offset: 0x30, Size: 1]
	int[] HideIfItemOwned;//[Offset: 0x38, Size: 1]
	int[] ShowIfItemOwned;//[Offset: 0x48, Size: 1]
	bool HideIfOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int MinLevel;//[Offset: 0x5c, Size: 1]
	int MaxLevel;//[Offset: 0x60, Size: 1]
	bool showSteam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool showEpic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool showPS4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool showPS5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool showXB1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool showXSX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool showNX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	bool showIOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 1]
	bool showAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: KSLoadoutDataFactory.PUMG_LoadoutDataFactory.Object
	int StartingArmoryLoadoutSlotsCount;//[Offset: 0xf8, Size: 1]
	int RoguePerkSlotsCount;//[Offset: 0xfc, Size: 1]
	MulticastInlineDelegateProperty OnArmoryLoadoutCleared;//[Size: 1]
	MulticastInlineDelegateProperty OnArmoryAllLoadoutsCleared;//[Size: 1]
	MulticastInlineDelegateProperty OnInventoryChanged;//[Size: 1]
	bool TryCreateArmoryLoadout(out KSArmoryLoadoutEntry OutArmoryLoadoutEntry, int LoadoutNumber);// 0x26e8240
	void SetFavoriteArmoryLoadoutIndex(int NewIndex, bool SaveToServer);// 0x26e7e50
	bool SetEquippedAttachmentAtSlot(const int LoadoutNumber, int WeaponId, const int AttachmentNumber, const KSItem* Item, const bool bSave);// 0x26e7cc0
	bool SetArmoryLoadoutWeaponWrap(int LoadoutNumber, int WeaponId, const KSItem* WeaponWrap, const bool bSave);// 0x26e7b80
	void SaveLoadoutByType(enum LoadoutType);// 0x26e7b00
	bool RequestXPCardExchange(Object* ContextObject, <KSItem_XPCard*,int> CardToQuantityMap);// 0x26e7950
	bool RemoveEquippedAttachmentAtSlot(const int LoadoutNumber, int WeaponId, const int AttachmentNumber, const bool bSave);// 0x26e7810
	void RemoveArmoryPerkFromSlot(int SlotPosition, KSJobItem* JobItem, KSItem* PerkItem);// 0x26e7710
	bool IsSpecialSlotUnlockedOnItem(KSItem* TargetItem, int SlotIndex);// 0x26e70d0
	bool IsSlotUnlockedOnItem(KSItem* TargetItem, int SlotIndex);// 0x26e6f50
	bool IsSlotUnlocked_Internal(KSItem* TargetItem, int SlotIndex);// 0x26e7010
	bool IsLoadoutEquipRelationUnlocked(KSItem* InEquipItem, KSItem* InTargetItem);// 0x26e6e70
	bool IsEquipUnlockOwned(KSItem_LoadoutEquipUnlock* EquipUnlock);// 0x26e6b70
	bool IsArmoryLoadoutUnlocked(int SlotIndex);// 0x26e6dc0
	bool IsArmoryItemEquippedToLoadout(int ItemId, int LoadoutNumber);// 0x26e6d00
	bool IsAccountItemEquippedInSlot(KSItem* AccountItem, enum eSlot);// 0x26e6c00
	bool IsAbilityUpgradeUnlocked(KSPlayerModAttachment* InModAttachment);// 0x26e6b70
	int GetUnlockTierForEquipUnlockItems(const KSItem* InEquipItem, const KSItem* InTargetItem);// 0x26e6570
	int GetUnlockTierForEquipUnlock(KSItem_LoadoutEquipUnlock* InEquipUnlock);// 0x26e64e0
	bool GetUnlockedSpecialSlotsCountOnItem(KSItem* TargetItem, out int OutUnlockedCount);// 0x26e6900
	bool GetUnlockedSlotsCountOnItem(KSItem* TargetItem, out int OutUnlockedCount);// 0x26e6760
	bool GetUnlockedSlotsCount_Internal(KSItem* TargetItem, out int OutUnlockedCount);// 0x26e6830
	int GetUnlockedLoadoutPerkUpgrades(KSPlayerMod* Perk);// 0x26e66d0
	bool GetUnlockedArmoryLoadoutsCount(out int OutUnlockedCount);// 0x26e6630
	void GetSlotUnlockTiersOnItem(KSItem* TargetItem, out int[] OutUnlockTiers);// 0x26e6300
	void GetSlotUnlockTiers_Internal(KSItem* TargetItem, out int[] OutUnlockTiers);// 0x26e63f0
	KSItem_LoadoutSlotUnlock* GetSlotUnlockItemOnItem(KSItem* TargetItem);// 0x26e61e0
	KSItem_LoadoutSlotUnlock* GetSlotUnlockItem_Internal(KSItem* TargetItem);// 0x26e6270
	KSItem_MobileRogueTier* GetRogueTierItem_Internal(KSJobItem* TargetJobItem);// 0x26e6150
	int GetRogueShardItemId(KSJobItem* InJobItem);// 0x26e6030
	FName[] GetRogueShardItemCTAPath(KSJobItem* InJobItem);// 0x26e5f50
	KSRogueShard* GetRogueShardItem_Internal(KSJobItem* TargetJobItem);// 0x26e60c0
	KSActivityInstance* GetProgressInstanceForTargetItem(KSItem* TargetItem);// 0x26e5ec0
	KSActivityInstance* GetProgressInstanceForLoadoutSlots();// 0x26e5e90
	static KSJobItem* GetPreferredJob(const Object* WorldContextObject);// 0x26e5e10
	bool GetOwnedShardsForRogue(KSJobItem* InJobItem, out int OutShardsCount);// 0x26e5b60
	bool GetOwnedMobileReputation(out int OutMobileReputation);// 0x26e5ac0
	bool GetOrFindAvailableXPCardsForObject(Object* ContextObject, out <KSItem_XPCard*,int> OutXPCardsToOwnedCount);// 0x26e5940
	KSItem_XPCard*[] GetOrFindAllXPCardsForObject_Internal(Object* ContextObject);// 0x26e5860
	bool GetOrCreateTierUpRewards(KSJobItem* InJobItem, int InTier, out KSItem*[] OutTierUpRewards);// 0x26e5740
	bool GetOrCreateTierUpRequirements(KSJobItem* InJobItem, int InTier, out <int,int> OutRequirementIdsToQuantities);// 0x26e5590
	bool GetOrCreateMaxTierForRogue(KSJobItem* InJobItem, out int OutMaxTier);// 0x26e54c0
	bool GetOrCreateIsTierValidForRogue(KSJobItem* InJobItem, int InTier);// 0x26e5400
	bool GetOrCreateIsItemIdTierRewardForRogue(int InItemId, KSJobItem* InJobItem);// 0x26e5340
	bool GetOrCreateCanRogueUpgradeCurrentTier(KSJobItem* InJobItem, out bool bOutCanUpgrade);// 0x26e5270
	bool GetOrCreateAbilityUpgradeLevels(KSJobItem* InJobItem, out int OutCurrentLevel, out int OutMaxLevel);// 0x26e5150
	int GetMobileReputationItemId();// 0x26e5120
	bool GetLoadoutByType(out PUMG_Loadout* Loadout, enum LoadoutType, bool bCreateIfNeeded);// 0x26e5010
	static KSLoadoutDataFactory* GetKSLoadoutDataFactory(const Object* WorldContextObject);// 0x26e4f90
	int GetFavoriteArmoryLoadoutIndex();// 0x26e4f60
	KSItem_LoadoutEquipUnlock* GetEquipUnlockItemForItems(const KSItem* InEquipItem, const KSItem* InTargetItem);// 0x26e4990
	bool GetEquippedCosmeticForWeapon(KSWeaponAsset* WeaponItem, out KSWeaponAttachment* CosmeticItem);// 0x26e4e90
	bool GetEquippedAttachmentsForWeaponId(int LoadoutNumber, int WeaponId, out KSItem*[] OutItems);// 0x26e4d40
	bool GetEquippedArmoryPerkBySlot(int SlotPosition, KSJobItem* JobItem, out KSItem* PerkItem);// 0x26e4c30
	bool GetEquippedArmoryItemAtSlot(enum eSlot, int LoadoutNumber, out KSItem* EquippedItem);// 0x26e4b20
	bool GetEquippedAccountItem(enum eSlot, out KSItem* EquippedItem);// 0x26e4a50
	bool GetDefaultCosmeticItem(enum eSlot, int SlotPosition, KSJobItem* JobItem, out KSItem* DefaultCosmeticItem, bool SkipGlobal);// 0x26e4740
	bool GetCurrentTierForRogue(KSJobItem* InJobItem, out int OutCurrentTier);// 0x26e4670
	static KSJobItem* GetBestJobToPreviewItem(KSItem* InItem, const Object* WorldContextObject);// 0x26e4410
	void GetArmoryLoadoutUnlockTiers(out int[] OutUnlockTiers);// 0x26e41c0
	KSItem_LoadoutSlotUnlock* GetArmoryLoadoutUnlockItem();// 0x26e4190
	bool GetArmoryLoadoutEntry(out KSArmoryLoadoutEntry OutArmoryLoadoutEntry, int LoadoutNumber);// 0x26e4010
	KSItem_LoadoutEquipUnlock*[] GetAllEquipUnlocksForTargetItem(const KSItem* InTargetItem);// 0x26e3e30
	bool GetAllEquippedArmoryPerks(KSJobItem* JobItem, out KSItem*[] OutPerks);// 0x26e3f10
	bool GetAllArmorySpecialistPerks(out KSPlayerMod*[] OutPerks);// 0x26e3d70
	bool GetAllArmoryPerks(out KSPlayerMod*[] OutPerks);// 0x26e3cb0
	bool GetAllArmoryLoadouts(out KSArmoryLoadoutEntry[] OutArmoryLoadoutEntries);// 0x26e3b60
	KSPlayerModAttachment*[] GetAbilityUpgradesForMod(KSPlayerMod* InPlayerMod);// 0x26e3a80
	KSPlayerModAttachment*[] GetAbilityUpgradesForJob(KSJobItem* InJobItem);// 0x26e39a0
	ActivityTier[] FindRewardTiers(KSActivityInstance* ActivityInstance, KSItem* RewardItem);// 0x26e36a0
	bool EquipCosmeticToWeapon(KSWeaponAttachment* CosmeticItem, KSWeaponAsset* WeaponItem, bool bGlobal);// 0x26e34d0
	bool EquipArmoryPerkToSlot(int SlotPosition, KSJobItem* JobItem, KSItem* PerkItem);// 0x26e33d0
	bool EquipArmoryItemToSlot(enum eSlot, int LoadoutNumber, KSItem* Item, bool bCreateIfNeeded, bool bSave);// 0x26e3230
	bool EquipAccountItemToSlot(enum eSlot, KSItem* Item, bool bSave);// 0x26e3130
	bool ClearEquippedCosmeticForWeapon(KSWeaponAsset* WeaponItem, bool bGlobal);// 0x26e3010
	bool ClearArmoryLoadouts();// 0x26e2fe0
	bool ClearArmoryLoadout(int LoadoutIndex);// 0x26e2f50
	bool AttemptUpgradeCurrentTier(KSJobItem* InJobItem);// 0x26e2e90

--------------------------------
Class: PUMG_LoadoutDataFactory.Object
	MulticastInlineDelegateProperty OnLoadoutsInitialized;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutsUpdatedFromServer;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutFactoryReadyNoLoadouts;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutDeleted;//[Size: 1]
	PUMG_Loadout*[] Loadouts;//[Offset: 0x98, Size: 1]

--------------------------------
Class: PUMG_Loadout.Object
	MulticastInlineDelegateProperty OnRenamed;//[Size: 1]
	MulticastInlineDelegateProperty OnNumberChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTypeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnServerUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalUpdate;//[Size: 1]

--------------------------------
Class: KSArmoryLoadoutEntry
	KSItem* PrimaryWeapon;//[Offset: 0x0, Size: 1]
	KSItem* SecondaryWeapon;//[Offset: 0x28, Size: 1]
	KSItem* Gadget;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSItem_XPCard.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int ExchangeVendorId;//[Offset: 0x280, Size: 1]
	int GetOrFindExchangeValueOnObject(Object* ContextObject, const Object* WorldContextObject);// 0x26d1960
	int GetOrFindExchangeIdOnObject(Object* ContextObject, const Object* WorldContextObject);// 0x26d18a0

--------------------------------
Class: KSItem_LoadoutEquipUnlock.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSItem* EquipItem;//[Offset: 0x280, Size: 1]
	KSItem* TargetItem;//[Offset: 0x2a8, Size: 1]
	void InitNewlyCreatedEquipUnlock(KSItem* InEquipItem, KSItem* InTargetItem);// 0x26d2110

--------------------------------
Class: KSItem_LoadoutSlotUnlock.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	enum SlotType;//[Offset: 0x280, Size: 1]
	int StartingUnlockedCount;//[Offset: 0x284, Size: 1]
	KSItem* TargetItem;//[Offset: 0x288, Size: 1]
	bool MatchesItem(KSItem* InItem);// 0x26d2380
	FText GetFormattedSlotName();// 0x26d0e20
	FText GetFormattedSlotDesc();// 0x26d0d80

--------------------------------
Class: KSItem_MobileRogueTier.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int StartingTierCount;//[Offset: 0x280, Size: 1]
	KSJobItem* TargetJobItem;//[Offset: 0x288, Size: 1]
	int TierUpgradeVendorId;//[Offset: 0x2b0, Size: 1]
	bool MatchesJobItem(KSJobItem* InJobItem);// 0x26d2550
	bool GetOrCreateTierUpRewards(int InTier, out int[] OutTierUpRewards);// 0x26d16e0
	bool GetOrCreateTierUpRequirements(int InTier, out <int,int> OutRequirementIdsToQuantities);// 0x26d1570
	bool GetOrCreateTierUpgradeVendorId(int InTier, out int OutVendorId);// 0x26d17d0
	bool GetOrCreateMaxTier(out int OutMaxTier);// 0x26d14d0
	bool GetOrCreateIsTierValid(int InTier);// 0x26d1440

--------------------------------
Class: KSRogueShard.KSCurrency.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSJobItem* TargetJobItem;//[Offset: 0x300, Size: 1]
	bool MatchesJobItem(KSJobItem* InJobItem);// 0x27893b0

--------------------------------
Class: KSCurrency.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool IsDLCVoucher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	int SortOrder;//[Offset: 0x284, Size: 1]
	DataTable* CurrencyDataByQtyTable;//[Offset: 0x288, Size: 1]
	Texture2D* FullSplash;//[Offset: 0x2b0, Size: 1]
	Texture2D* CurrencySmallIcon;//[Offset: 0x2d8, Size: 1]
	Texture2D* GetSoftFullSplashImage();// 0x26849e0
	Texture2D* GetSoftCurrencySmallIcon();// 0x2684940
	bool GetCurrencyDataForQuantity(int Quantity, out CurrencyImageRow Data);// 0x26844f0

--------------------------------
Class: CurrencyImageRow.TableRowBase
	int Quantity;//[Offset: 0x8, Size: 1]
	int BonusQuantity;//[Offset: 0xc, Size: 1]
	Texture2D* Image;//[Offset: 0x10, Size: 1]
	Texture2D* FullSplashImage;//[Offset: 0x38, Size: 1]
	<enum,FString> ExternalProductSkus;//[Offset: 0x60, Size: 1]

--------------------------------
Class: KSArmoryLoadoutData.Object
	GameplayTagContainer ArmoryItemTags;//[Offset: 0x28, Size: 1]
	KSArmoryLoadoutEntry[] ArmoryLoadoutEntries;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSUISessionManager.Object
	bool bAchievementIntegrationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb, Size: 1]
	bool bHasInitialInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	int DivertFromQueueId;//[Offset: 0xc0, Size: 1]
	int DivertToQueueId;//[Offset: 0xc4, Size: 1]
	enum QueueDivertType;//[Offset: 0xc8, Size: 1]
	float ShelteredMMAttemptTimeout;//[Offset: 0xcc, Size: 1]
	float ShelteredMMLevelLimit;//[Offset: 0xd0, Size: 1]
	int ForcedBotMatchLimit;//[Offset: 0xd4, Size: 1]
	int SisterQueueId;//[Offset: 0xd8, Size: 1]
	int MercyMatchLossesRequired;//[Offset: 0xdc, Size: 1]
	bool bHasReceivedPlayerEmail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bEmailCallWasSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	FString PlayerEmail;//[Offset: 0xe8, Size: 1]

--------------------------------
Class: KSSupplyDropManager.Object
	MulticastInlineDelegateProperty OnSupplyDropOpenStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnSupplyDropOpenFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnSupplyDropContentsReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnDisplaySupplyDropIntro;//[Size: 1]
	MulticastInlineDelegateProperty OnDisplaySupplyDropIntroAndOpen;//[Size: 1]
	MulticastInlineDelegateProperty OnSupplyDropLeave;//[Size: 1]
	MulticastInlineDelegateProperty OnSupplyDropOpenSequenceCompleted;//[Size: 1]
	int64[] SupplyDropLootIds;//[Offset: 0x98, Size: 1]
	PUMG_StoreItemHelper* StoreItemHelper;//[Offset: 0xb0, Size: 1]
	<int64,KSSupplyDropDetails*> UnopenedSupplyDropIdToContents;//[Offset: 0xb8, Size: 1]
	void OnStoreVendorsLoaded(int GroupId, out const int[] VendorIds);// 0x2797730
	static FText GetContentCategoryName(byte Category);// 0x2796490
	void CallOnSupplyDropOpeningSequenceComplete();// 0x2795950

--------------------------------
Class: KSSupplyDropDetails.Object
	PUMG_StoreItem* SupplyDrop;//[Offset: 0x28, Size: 1]
	KSSupplyDropContents*[] Contents;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSSupplyDropContents.Object
	int LootTableItemId;//[Offset: 0x28, Size: 1]
	PUMG_StoreItem*[] BundleContents;//[Offset: 0x30, Size: 1]
	FText[] GetContentsFilterOptions();// 0x2796570

--------------------------------
Class: KSActivityInstanceManager.Object

--------------------------------
Class: KSPlayerInventoryHelper.PUMG_PlayerInventoryHelper.Object
	<InventoryId,DynamicCallbacksPerInventoryId(MulticastInlineDelegateProperty)> DynamicCallbacksPerInventoryId;//[Offset: 0x118, Size: 1]
	<InventoryTypeId,DynamicCallbacksPerInventoryTypeId(MulticastInlineDelegateProperty)> DynamicCallbacksPerInventoryTypeId;//[Offset: 0x168, Size: 1]
	MulticastInlineDelegateProperty OnInventoryItemsUpdatedDynamicCallbacks;//[Size: 1]
	void RemoveInventoryItemsUpdatedCallback(out const delegate Callback);// 0x273b6f0
	void RemoveAllItemUpdatedCallbacks(out const delegate Callback);// 0x273b640
	void RemoveAllItemTypeUpdatedCallbacks(out const delegate Callback);// 0x273b590
	int GetCountByType(int ItemTypeId, int ItemSubTypeId, KSPlayerController* Player);// 0x273a490
	int GetCount(int64 ItemId, KSPlayerController* Player);// 0x273a3d0
	DateTime GetAcquiredTime(int64 ItemId, KSPlayerController* Player);// 0x273a300
	void AddItemUpdatedCallback(out const delegate Callback, int64 ItemId, KSPlayerController* Player);// 0x273a130
	void AddItemTypeUpdatedCallback(out const delegate Callback, int ItemTypeId, int ItemSubTypeId, KSPlayerController* Player);// 0x2739fb0
	void AddInventoryItemsUpdatedCallback(out const delegate Callback);// 0x2739f00

--------------------------------
Class: PUMG_PlayerInventoryHelper.Object

--------------------------------
Class: DateTime

--------------------------------
Class: InventoryTypeId
	int64 PlayerId;//[Offset: 0x0, Size: 1]
	int ItemTypeId;//[Offset: 0x8, Size: 1]
	int ItemSubTypeId;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSPlayerStatsManager.KSActivityManagerBase.Object
	FString ForceActivityDataTablePath;//[Offset: 0x238, Size: 1]

--------------------------------
Class: KSPlayerChallengesManager.KSActivityManagerBase.Object
	MulticastInlineDelegateProperty OnPlayerChallengesReady;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChallengesChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDailyContractTimerChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerWeeklyContractTimerChanged;//[Size: 1]
	bool ChallengesReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	MulticastInlineDelegateProperty TestPlayerChallengeComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnLoginRewardClaimed;//[Size: 1]
	bool SaveSeenChallenges(out const KSActivityInstance*[] SeenChallenges);// 0x272b8a0
	void RequestNewContracts(bool ForceRequest);// 0x272b7f0
	void OnWeeklyContractTimerRefresh(out const InventoryId InventoryId);// 0x272b440
	void OnStoredContractUpdated(out const InventoryId InventoryId);// 0x272b390
	void OnLastRankedWeekActiveUpdated(out const InventoryId InventoryId);// 0x272b1e0
	void OnDailyContractTimerRefresh(out const InventoryId InventoryId);// 0x272b130
	void OnChallengeProgressUpdated(out const InventoryTypeId InventoryTypeId);// 0x272b070
	bool GetUnseenChallenges(out KSActivityInstance*[] OutActivityInstances, bool UnlockedOnly);// 0x272ae20
	int GetSecondsUntilRankedContractEnds();// 0x272adf0
	int GetSecondsUntilNewWeeklyContract();// 0x272adc0
	int GetSecondsUntilNewDailyContract();// 0x272ad90
	<int,KSActivityInstance*> GetNewDailyContractsRelativeTo(out const KSActivityInstance*[] PriorList);// 0x272a780
	KSActivityInstance* GetCurrentWeeklyMasteryInstance(KSPlayerController* Player, KSPlayerState* PlayerState);// 0x272a600
	KSActivityInstance* GetCurrentRankedMasteryInstance(KSPlayerController* Player, KSPlayerState* PlayerState);// 0x272a540
	KSActivityInstance*[] GetActiveWeeklyContracts();// 0x272a4c0
	KSActivityInstance*[] GetActiveRankedContracts();// 0x272a440

--------------------------------
Class: KSNPETrackManager.KSActivityManagerBase.Object

--------------------------------
Class: KSMercMasteryManager.KSActivityManagerBase.Object
	static KSActivity* StaticGetMercMasteryActivity(const Object* WorldContextObject, KSJobItem* Job);// 0x26ffe50
	float GetWinPercentForJob(KSJobItem* JobItem, KSPlayerController* Player);// 0x26fe990
	KSActivityInstance* GetMercXpActivityInstanceForJob(KSJobItem* JobItem);// 0x26fe2d0
	KSActivity* GetMercMasteryActivity(KSJobItem* Job);// 0x26fe240
	KSJobItem* GetLowestJobForActivityType(GameplayTag ActivityTag, KSPlayerController* Player);// 0x26fe150
	int GetJobMasteryLevelForXpValue(KSJobItem* JobItem, int XpValue);// 0x26fd9d0
	KSJobItem* GetHighestJobForActivityType(GameplayTag ActivityTag, KSPlayerController* Player);// 0x26fd820

--------------------------------
Class: KSMercManager.Object
	void Uninitialize();// 0x26fff70
	bool IsItemEquippedInSlot(KSItem* CosmeticItem, enum eSlot, int SlotPosition, KSJobItem* JobItem);// 0x26ff0e0
	bool IsItemEquippedInAnySlot(KSItem* CosmeticItem, enum eSlot, int[] SlotPosition, KSJobItem* JobItem);// 0x26fef50
	void Initialize();// 0x2601810
	KSLoadoutDataFactory* GetLoadoutDataFactory();// 0x26fe0f0
	KSJobItem*[] GetJobItems();// 0x26fd8e0
	bool GetEquippedPassiveBySlot(int SlotPosition, KSJobItem* JobItem, out KSItem* PassiveItem);// 0x26fd710
	bool GetEquippedCosmeticItemBySlot(enum eSlot, int SlotPosition, KSJobItem* JobItem, out KSItem* CosmeticItem);// 0x26fd5c0
	bool EquipPassiveToSlot(int SlotPosition, KSJobItem* JobItem, KSItem* PassiveItem);// 0x26fcaf0
	bool EquipCosmeticItemToSlot(enum eSlot, int SlotPosition, KSJobItem* JobItem, KSItem* CosmeticItem, bool bGlobal);// 0x26fc960
	void ClearCosmeticItemOnSlot(enum eSlot, int SlotPosition, KSJobItem* JobItem, bool bGlobal);// 0x26fc670

--------------------------------
Class: KSWeaponManager.Object
	bool bLockedWeaponsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	void Uninitialize();// 0x26fff70
	bool IsWeaponUnlocked(const KSWeaponAsset* InWeaponAsset);// 0x27dabd0
	bool IsWeaponCategoryUnlocked(const KSWeaponCategoryAsset* InWeaponCategoryAsset);// 0x27daa80
	void Initialize(KSGameInstance* KSGameInstance);// 0x27da9f0
	KSWeaponCategoryAsset* GetWeaponCategoryAssetByXPInstance(KSActivityInstance* MasteryProgressInstance);// 0x27da4f0
	KSWeaponAsset* GetWeaponAssetByActivityInstance(KSActivityInstance* MasteryProgressInstance);// 0x27da460
	bool GetUnlockTierForWeapon(const KSWeaponAsset* InWeaponAsset, out int OutUnlockTier);// 0x27da390
	KSWeaponCategoryAsset* GetCategoryByTag(GameplayTag CategoryTag);// 0x27da150

--------------------------------
Class: KSAwardsManager.KSActivityManagerBase.Object

--------------------------------
Class: KSGeneralProgressionManager.KSActivityManagerBase.Object

--------------------------------
Class: KSRankedManager.KSActivityManagerBase.Object
	int GetRequiredPlacementMatches(FString SeasonKey);// 0x277b700
	bool GetRankedSeasonKeyForQueue(int QueueId, out FString OutKey);// 0x277b5e0
	KSRankedSeason*[] GetAllRankedSeasons();// 0x277b330
	int GetAllowedPartyRankRange(FString SeasonKey);// 0x277b3b0
	KSRankedSeason*[] GetAllActiveRankedSeasons();// 0x277b2b0

--------------------------------
Class: KSRankedSeason.KSEvent.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int RankedYear;//[Offset: 0x2d8, Size: 1]
	int RankedYearSeason;//[Offset: 0x2dc, Size: 1]
	bool UsesPlacementMatches;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int PlacementMatchItemId;//[Offset: 0x2e4, Size: 1]
	int PlacementMatchLootId;//[Offset: 0x2e8, Size: 1]
	int InitXpLootId;//[Offset: 0x2ec, Size: 1]
	int XpTableId;//[Offset: 0x2f0, Size: 1]
	float WinBaseRankedXP;//[Offset: 0x2f4, Size: 1]
	float LossBaseRankedXP;//[Offset: 0x2f8, Size: 1]
	float MinBonusClamp;//[Offset: 0x2fc, Size: 1]
	float MaxBonusClamp;//[Offset: 0x300, Size: 1]
	float RankDifferenceMultiplier;//[Offset: 0x304, Size: 1]
	int RequiredPlacementMatches;//[Offset: 0x308, Size: 1]
	int PartyRankRange;//[Offset: 0x30c, Size: 1]
	int InitialPlacementDifference;//[Offset: 0x310, Size: 1]
	int MinPlacementPartyLevel;//[Offset: 0x314, Size: 1]
	int MaxPlacementPartyLevel;//[Offset: 0x318, Size: 1]
	KSFavoredMatchBonusStruct[] FavoredMatchBonuses;//[Offset: 0x320, Size: 1]
	float[] MMRZoneList;//[Offset: 0x330, Size: 1]

--------------------------------
Class: KSEvent.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	FName EventTag;//[Offset: 0x280, Size: 1]
	bool CanBeEquippedPostEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int[] ActivityVendorIds;//[Offset: 0x290, Size: 1]
	int[] ActivityRewardVendorIds;//[Offset: 0x2a0, Size: 1]
	int OwnershipItemId;//[Offset: 0x2b0, Size: 1]
	KSContainerItem_Item*[] EquipSlots;//[Offset: 0x2b8, Size: 1]
	FName[] PairedEventTags;//[Offset: 0x2c8, Size: 1]
	bool ShouldFetchVendors(const Object* WorldContextObject);// 0x269d3d0
	bool ShouldDisplayCallToAction(const Object* WorldContextObject);// 0x269d340
	bool IsToggledActive();// 0x269d140
	bool IsPastStartDate();// 0x269cf90
	bool IsOwned(const Object* WorldContextObject, int64 InPlayerNetId);// 0x269cea0
	bool IsEquipped(const Object* WorldContextObject, int64 InPlayerNetId);// 0x269ccf0
	bool IsBeforeEndDate();// 0x269ccc0
	bool IsActiveForCurrentQueue(const KSPlayerState* PlayerState);// 0x269cc30
	bool IsActiveByTimeframe();// 0x269cc00
	bool IsActiveByEquip(const Object* WorldContextObject, int64 InPlayerNetId);// 0x269cb40
	bool IsActive(const Object* WorldContextObject, int64 InPlayerNetId);// 0x269ca80
	int GetRemainingSeconds();// 0x269c820
	bool GetCallToActionTag(const Object* WorldContextObject, out FName Tag);// 0x269bea0
	void EquipEvent(const Object* WorldContextObject, bool ShouldReplaceSlot, int SlotToReplace);// 0x269bcf0
	void ClearCallToAction(const Object* WorldContextObject);// 0x269bc40

--------------------------------
Class: KSContainerItem_Item.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: KSFavoredMatchBonusStruct
	float MaxMMRDifference;//[Offset: 0x0, Size: 1]
	int BonusValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSBattlePassProgressionManager.KSActivityManagerBase.Object
	MulticastInlineDelegateProperty OnBattlePassProgressionActivitiesReady;//[Size: 1]
	bool BattlePassReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool ShouldDisplayBattlePass(GameplayTag BattlepassTag);// 0x263e990
	bool IsBattlePassPurchaseItem(PUMG_StoreItem* StoreItem);// 0x263c8b0
	bool HasPremiumBattlePass(GameplayTag BattlepassTag);// 0x263c4c0
	PUMG_StoreItem*[] GetTierRewardItems(int StartTier, int EndTier);// 0x263c060
	GameplayTag GetSeasonTag();// 0x263b400
	bool GetSeasonalChallengeInstances(out KSActivityInstance*[] ActivityInstances, KSPlayerController* Player, KSPlayerState* PlayerState);// 0x263b440
	PUMG_StoreItem*[] GetPurchaseConfirmDisplayItems(PUMG_StoreItem* BattlePassPurchaseItem, int Quantity);// 0x263adf0
	PUMG_StoreItem*[] GetPurchasableBattlePassBundles(GameplayTag BattlepassTag);// 0x263ad10
	int GetLockedRogueBucksCount();// 0x2639a20
	int GetLockedItemsCount(bool IncludeInstantUnlocks, int AdditionalTiers);// 0x2639950
	PUMG_StoreItem*[] GetLockedItems(bool IncludeInstantUnlock, int AdditionalTiers);// 0x2639830
	enum GetItemBattlePassSource(const PUMG_StoreItem* StoreItem);// 0x2638fd0
	KSActivityInstance* GetHighestCompletionUnlockedSeasonalChallenge(KSPlayerController* Player, KSPlayerState* PlayerState);// 0x2638d40
	KSActivityInstance* GetCurrentSeasonMasteryInstance(KSPlayerController* Player, KSPlayerState* PlayerState);// 0x2637e30
	KSBattlepass* GetCurrentBattlepass();// 0x2637d80
	int GetBattlePassXpItemId(GameplayTag BattlepassTag);// 0x2637b60
	int64 GetBattlePassPremiumItemId(GameplayTag BattlepassTag);// 0x2637ad0
	KSBattlepass* GetBattlepassForSeason(GameplayTag BattlepassTag);// 0x2637bf0
	KSActivityInstance* GetBattlePassActivityInstance(GameplayTag BattlepassTag);// 0x2637a40
	FText GetBattleBassTimeRemainingText(GameplayTag BattlepassTag);// 0x2637950
	KSBattlepass*[] GetAllBattlepasses();// 0x26373f0
	PUMG_StoreItem*[] GetActiveTierBundles();// 0x2637370

--------------------------------
Class: KSBattlepass.KSEvent.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	BattlepassUpsellData UpsellScreenData;//[Offset: 0x2d8, Size: 1]
	int ProgressItemId;//[Offset: 0x418, Size: 1]
	int PremiumRewardVendorId;//[Offset: 0x41c, Size: 1]
	int64 LevelPurchaseLootTableId;//[Offset: 0x420, Size: 1]
	int64 LevelPurchaseLootId;//[Offset: 0x428, Size: 1]
	int64 InstantUnlockRewardVendorId;//[Offset: 0x430, Size: 1]
	Texture2D* FreeIcon;//[Offset: 0x438, Size: 1]
	Texture2D* PremiumIcon;//[Offset: 0x460, Size: 1]
	DataTable* ActivitySequenceTable;//[Offset: 0x488, Size: 1]
	FName[] ChallengeWeekRowNames;//[Offset: 0x490, Size: 1]

--------------------------------
Class: BattlepassUpsellData
	Texture2D* background;//[Offset: 0x0, Size: 1]
	Texture2D* Shade;//[Offset: 0x28, Size: 1]
	Texture2D* Outfits;//[Offset: 0x50, Size: 1]
	Texture2D* Wingsuits;//[Offset: 0x78, Size: 1]
	Texture2D* WeaponWraps;//[Offset: 0xa0, Size: 1]
	Texture2D* ChaseSkin;//[Offset: 0xc8, Size: 1]
	Texture2D* Smoke;//[Offset: 0xf0, Size: 1]
	Texture2D* Currency;//[Offset: 0x118, Size: 1]

--------------------------------
Class: KSEventChallengesManager.KSActivityManagerBase.Object
	MulticastInlineDelegateProperty OnEventChallengeActivitiesReady;//[Size: 1]
	MulticastInlineDelegateProperty OnSelectedChallengeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnEventChallengeDisplayed;//[Size: 1]
	bool EventChallengesReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool SetSelectedEventChallenge(KSActivityInstance* ActivityInstance);// 0x269d2b0
	bool IsPremiumChallengeInstance(const KSActivityInstance* ActivityInstance);// 0x269d080
	bool IsPremiumChallenge(const KSActivity* Activity);// 0x269cff0
	bool GetSortedEventChallenges(out KSActivityInstance*[] OutActivityInstances, KSPlayerController* Player, KSPlayerState* PlayerState);// 0x269c880
	KSActivityInstance* GetSelectedEventChallenge();// 0x269c850
	PUMG_StoreItem*[] GetPurchasableEventBundles();// 0x269c6b0
	PUMG_StoreItem* GetPremiumUnlockItem();// 0x269c680
	int GetHolidayEventEndTimeRemainingSeconds();// 0x269c510
	GrandPrizeProgression GetGrandPrizeProgression();// 0x269c4d0
	KSRankedSeason* GetFirstActiveRankedSeason(Object* WorldContextObject);// 0x269c3b0
	KSNarrativeEvent* GetFirstActiveNarrativeEvent(Object* WorldContextObject);// 0x269c320
	PUMG_StoreItem* GetEventGrandPrizeBundle();// 0x269c2c0
	KSEvent* GetEventForKey(FString InKey);// 0x269c210
	static int GetEventCreditsItemId();// 0x269c1e0
	FText GetEventChallengesTimeRemainingText();// 0x269c140
	enum GetEventChallengesDisplayState();// 0x269c110
	static GameplayTag GetEventActivityTag();// 0x269c0d0
	KSEvent*[] GetAllEvents();// 0x269be20
	bool ClearSelectedEventChallenge();// 0x269bcc0
	bool CanSelectChallenge(KSActivityInstance* ActivityInstance);// 0x269bbb0

--------------------------------
Class: GrandPrizeProgression
	int CurrentProgression;//[Offset: 0x0, Size: 1]
	int EndingProgression;//[Offset: 0x4, Size: 1]
	bool IsUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: KSNarrativeEvent.KSEvent.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	NarrativePanelData[] NarrativePanels;//[Offset: 0x2d8, Size: 1]
	DataTable* ActivitySequenceTable;//[Offset: 0x2e8, Size: 1]
	FName ChallengeSequenceName;//[Offset: 0x2f0, Size: 1]

--------------------------------
Class: NarrativePanelData
	Texture2D* background;//[Offset: 0x0, Size: 1]
	FText Header;//[Offset: 0x28, Size: 1]
	FText Body;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSSeasonalEventChallengesManager.KSActivityManagerBase.Object

--------------------------------
Class: KSActivitySequenceManager.KSActivityManagerBase.Object
	bool IsActivitySequenceUnlocked(out const ActivitySequenceRow ActivitySequence, const KSPlayerController* PlayerController);// 0x2611720
	bool IsActivitySequenceComplete(out const ActivitySequenceRow ActivitySequence, const KSPlayerController* PlayerController);// 0x26115e0
	bool IsActivityFirstInSequence(const DataTable* ActivitySequenceTable, const KSActivity* Activity, FName SequenceRowName);// 0x26114e0
	bool IsActivityActiveInSequence(out const ActivitySequenceRow ActivitySequence, int64 PlayerId, const KSActivity* TargetActivity);// 0x2611350
	bool GetPrecedingActivityInSequence(const DataTable* ActivitySequenceTable, const KSActivity* Activity, FName SequenceRowName, out KSActivity* OutPrecedingActivity);// 0x2611200
	bool GetFirstIncompleteInSequence(out const ActivitySequenceRow ActivitySequence, const KSPlayerController* PlayerController, out KSActivityInstance* IncompleteActivityInstance);// 0x2611060
	int GetCompletedCountInSequence(out const ActivitySequenceRow ActivitySequence, const KSPlayerController* PlayerController);// 0x2610f20
	bool GetActivitySequence(const DataTable* ActivitySequenceTable, const FName SequenceRowName, out ActivitySequenceRow OutActivitySequenceRow);// 0x2610db0

--------------------------------
Class: ActivitySequenceRow.TableRowBase
	FText DisplayName;//[Offset: 0x8, Size: 1]
	KSActivity*[] ActivitySequence;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSAudioManager.Object
	KSAudioPlayerStateParameterData* AudioPlayerStateParameters;//[Offset: 0x28, Size: 1]
	<FString,DataTable*> LoadedAudioDataTables;//[Offset: 0x50, Size: 1]
	KSGameInstance* WeakGameInstance;//[Offset: 0x170, Size: 1]
	KSJobSelectionRules* JobSelectionRules;//[Offset: 0x188, Size: 1]
	void HandleViewStateChanged(FName NewRoute, FName PreviousRoute, enum Layer);// 0x2630310
	void HandleSkydiveStarted(KSCharacter* Diver);// 0x2630290
	void HandleSkydiveSkipped(KSCharacter* Diver);// 0x2630210
	void HandleSkydiveEnded(KSCharacter* Diver);// 0x2630190
	void HandleRoundHasEnded(int RoundWinner, int MatchWinner);// 0x26300d0
	void HandlePostSelectionPhaseBeginFadeOut();// 0x262fff0
	void HandlePhaseChanged(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x262fef0
	void HandleMatchTimerUpdate(float TimeInWholeSeconds);// 0x262fe70
	void HandleLoadingScreenEnded();// 0x262fe50
	void HandleLoadingScreenBegan();// 0x262fe30
	void HandleLeavingMap();// 0x262fe10
	void HandleLastManStanding(KSPlayerState* LastPlayer);// 0x262fd90
	void HandleLandAfterDropship(KSCharacter* Jumper);// 0x262fd10
	void HandleJobSelectorAddedToController(KSJobSelector* NewSelector);// 0x262fc90
	void HandleGameStateEndPlay(KSGameState* GameState);// 0x262fc10
	void HandleGameStateBeginPlay(KSGameState* GameState);// 0x262fb90
	void HandleGameModeReceived();// 0x262fb70
	void HandleExitDropship(KSCharacter* Jumper);// 0x262faf0
	void HandleDropshipDoorOpened();// 0x262fad0
	void HandleControlPointCaptured(KSTeamState* CapturingTeam);// 0x262fa50
	void HandleCinematicSubLevelsChanged(FString CinematicSubLevel);// 0x262f9b0
	void HandleActiveDraftTasksUpdated();// 0x262f990

--------------------------------
Class: KSJobSelectionRules.DraftRules.Object
	enum BlacklistOrWhitelist;//[Offset: 0x90, Size: 1]
	KSJobItem*[] FilteredJobs;//[Offset: 0x98, Size: 1]
	GameplayTagQuery AIJobSelectionQuery;//[Offset: 0xa8, Size: 1]
	JobCollection* JobCollection;//[Offset: 0xf0, Size: 1]
	KSJobItem* RandomJob;//[Offset: 0xf8, Size: 1]
	bool bAllowRandomJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bDelayRandomSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	class KSJobSelectionRules* AlternateSecondaryRules;//[Offset: 0x128, Size: 1]
	static bool DraftPlayerEqualsPersistentPlayer(out const DraftPlayerIdHandle InDraftPlayerId, const KSPersistentPlayerData* InPersistentPlayerData);// 0x26ddfc0
	static KSPersistentPlayerId ConvertToKSPlayerId(out const DraftPlayerIdHandle InDraftPlayerId);// 0x26ddf00
	static DraftPlayerIdHandle ConvertToDraftPlayerIdHandle(out const KSPersistentPlayerId InPlayerId);// 0x26dde50

--------------------------------
Class: DraftRules.Object
	enum PickExclusivity;//[Offset: 0x28, Size: 1]
	enum PickProxyRules;//[Offset: 0x29, Size: 1]
	bool bProxyAlwaysCompletesPicks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool bCanAbstainFromBan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	enum BanEffects;//[Offset: 0x2c, Size: 1]
	enum BanProxyRules;//[Offset: 0x2d, Size: 1]
	bool bProxyAlwaysCompletesBans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	enum LockProxyRules;//[Offset: 0x2f, Size: 1]
	bool bProxyAlwaysCompletesLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float ReselectTime;//[Offset: 0x34, Size: 1]
	bool bRequireChoiceOwnership;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bShowUnavailableChoicesOnUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	GameplayTagQuery AIDraftQuery;//[Offset: 0x40, Size: 1]
	class DraftReplicatedActor* DraftReplicatedActorClass;//[Offset: 0x88, Size: 1]
	FText GetOverallStatusTextAndTimer(const DraftReplicatedActor* InDraftActor, out PGame_ReplicatedTimerId OutActiveTimerId, out DraftTask PrimaryTask);// 0x1249170

--------------------------------
Class: DraftReplicatedActor.Info.Actor.Object
	FName DraftName;//[Offset: 0x220, Size: 1]
	class DraftRules* DraftRules;//[Offset: 0x228, Size: 1]
	DraftTask PersonalActiveTask;//[Offset: 0x230, Size: 1]
	DraftTask LocalPersonalActiveTask;//[Offset: 0x278, Size: 1]
	bool bLocalPersonalTaskPendingComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	DraftChoice[] Choices;//[Offset: 0x2c8, Size: 1]
	DraftTaskList CompletedTasks;//[Offset: 0x2d8, Size: 1]
	DraftTaskList ActiveTasks;//[Offset: 0x408, Size: 1]
	DraftTaskList PendingTasks;//[Offset: 0x538, Size: 1]
	bool bAllPersonalTasksAreComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	bool bLocalAllPersonalTasksAreComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 1]
	bool bDraftHasEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66a, Size: 1]
	MulticastInlineDelegateProperty OnRequestSelectSuccessful;//[Size: 1]
	MulticastInlineDelegateProperty OnRequestSelectFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnRequestCompleteSuccessful;//[Size: 1]
	MulticastInlineDelegateProperty OnRequestCompleteFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftChoicesChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTasksChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPendingTasksChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTaskCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnPersonalActiveTaskChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAllPersonalTasksCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnEndDraft;//[Size: 1]
	DraftAuthority* DraftAuthority;//[Offset: 0x720, Size: 1]
	float PostDraftLifeSpan;//[Offset: 0x728, Size: 1]
	int DraftActorId;//[Offset: 0x72c, Size: 1]
	DraftPlayerIdHandle CachedDraftPlayerId;//[Offset: 0x730, Size: 1]
	PGame_ReplicatedTimerManagerSlave TimerManager;//[Offset: 0x740, Size: 1]
	bool bChoicesAreDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool bTasksAreDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 1]
	bool bPendingTasksAreDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c2, Size: 1]
	bool bPersonalTaskIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c3, Size: 1]
	bool bAllPersonTasksCompleteIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bOwnerIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	<DraftTaskId> BroadcastedTasks;//[Offset: 0x8c8, Size: 1]
	<Object*,int> ObjectToChoiceIndexMap;//[Offset: 0x918, Size: 1]
	PlayerController* OwningPlayerController;//[Offset: 0x9b8, Size: 1]
	Object* PrevLocalSelectedChoice;//[Offset: 0x9c0, Size: 1]
	Object* PrevLockedChoiceForLocalPlayer;//[Offset: 0x9c8, Size: 1]
	static bool TasksEqual(out const DraftTask A, out const DraftTask B);// 0x1249d40
	void ServerRequestSelect(DraftTaskId TaskId, Object* ChoiceObject);// 0x1249c40
	void ServerRequestComplete(DraftTaskId TaskId, Object* ChoiceObject);// 0x1249b40
	enum RequestSelect(Object* ChoiceObject);// 0x1249ab0
	enum RequestCompleteTask(Object* ChoiceObject);// 0x1249a20
	void OnRep_PersonalActiveTask();// 0x1249a00
	void OnRep_DraftName();// 0x12499e0
	void OnRep_Choices();// 0x12499c0
	void OnRep_AllPersonalTasksAreComplete();// 0x12499a0
	void OnPlayerOwnerLogout(Actor* InActor);// 0x1249920
	enum IsValidChoiceForPersonalActiveTask(Object* ChoiceObject);// 0x1249890
	static bool IsTaskValid(out const DraftTask InTask);// 0x12497b0
	static bool IsTaskIdValid(out const DraftTaskId InTaskId);// 0x1249640
	static bool IsTaskIdsEqual(out const DraftTaskId A, out const DraftTaskId B);// 0x12496d0
	float GetTimeUntilNextActiveTaskExpires();// 0x12494d0
	float GetTimeUntilLastActiveTaskExpires();// 0x12494a0
	enum GetTimerStateByTimerId(out const PGame_ReplicatedTimerId TimerId);// 0x12495a0
	enum GetTimerStateByTaskId(out const DraftTaskId TaskId);// 0x1249500
	float GetTimeRemainingByTimerId(out const PGame_ReplicatedTimerId TimerId);// 0x1249400
	float GetTimeRemainingByTaskId(out const DraftTaskId TaskId);// 0x1249360
	PlayerController* GetOwningPlayerController();// 0x1249340
	DraftTask[] GetCompletedTasksForPlayer(out const DraftPlayerIdHandle InPlayerId);// 0x1248f60
	DraftTask GetActiveTaskForPlayer(out const DraftPlayerIdHandle InPlayerId, out bool bPendingComplete);// 0x1248dd0
	DraftChoice FindChoiceByUObject(Object* ChoiceObject);// 0x1248d30
	void ClientAcknowledgeSelect(DraftTaskId TaskId, bool bSuccess);// 0x1248c60
	void ClientAcknowledgeComplete(DraftTaskId TaskId, bool bSuccess);// 0x1248b90

--------------------------------
Class: DraftTask.FastArraySerializerItem
	DraftTaskId TaskId;//[Offset: 0xc, Size: 1]
	enum TaskType;//[Offset: 0xe, Size: 1]
	Object* SelectedChoice;//[Offset: 0x10, Size: 1]
	DraftPlayerIdHandle Player;//[Offset: 0x18, Size: 1]
	DraftPlayerIdHandle SelectingProxy;//[Offset: 0x28, Size: 1]
	int TeamNum;//[Offset: 0x38, Size: 1]
	bool bHaltingTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float TimeForTask;//[Offset: 0x40, Size: 1]
	PGame_ReplicatedTimerId TimerId;//[Offset: 0x44, Size: 1]

--------------------------------
Class: DraftTaskId
	uint16 ID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DraftPlayerIdHandle

--------------------------------
Class: PGame_ReplicatedTimerId
	byte ID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DraftChoice
	Object* ChoiceObject;//[Offset: 0x0, Size: 1]
	bool bIsVisibleToUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bIsUnavailable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bIsUnavailableByOwnership;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bIsBanned;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bAlreadyPicked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bAlreadyLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bCannotLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bSelectedByTeammate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bSelectedByOpponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bSelectedBySelf;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bPendingCompleteBySelf;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bPickedByLocalTeam;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bPickedByOpponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bLockedByLocalPlayer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	enum OwnershipState;//[Offset: 0xa, Size: 1]

--------------------------------
Class: DraftTaskList.FastArraySerializer
	DraftTask[] Tasks;//[Offset: 0x108, Size: 1]

--------------------------------
Class: DraftAuthority.Info.Actor.Object
	FName DraftName;//[Offset: 0x290, Size: 1]
	bool bAllowUnownedChoices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	<Object*> AllowUnownedSpecificChoices;//[Offset: 0x2a0, Size: 1]
	class DraftRules* DraftRules;//[Offset: 0x2f0, Size: 1]
	DraftChoice[] Choices;//[Offset: 0x2f8, Size: 1]
	DraftTaskList CompletedDraftTasks;//[Offset: 0x308, Size: 1]
	DraftTaskList ActiveDraftTasks;//[Offset: 0x438, Size: 1]
	DraftTaskList PendingDraftTasks;//[Offset: 0x568, Size: 1]
	DraftTaskList DelayedDraftTasks;//[Offset: 0x698, Size: 1]
	<DraftPlayerIdHandle> ParticipatingPlayers;//[Offset: 0x7c8, Size: 1]
	<DraftPlayerIdHandle> RemainingPlayers;//[Offset: 0x818, Size: 1]
	<DraftPlayerIdHandle,DraftReplicatedActor*> ActiveDraftReplicatedActors;//[Offset: 0x868, Size: 1]
	<DraftPlayerIdHandle> KnownDisconnectPlayers;//[Offset: 0x8b8, Size: 1]
	DraftPlayerIdHandle[] AvailableProxies;//[Offset: 0x908, Size: 1]
	<DraftPlayerIdHandle> AIPlayers;//[Offset: 0x918, Size: 1]
	bool bHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	bool bHasCompletedInitialDraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 1]
	int TimesStarted;//[Offset: 0x96c, Size: 1]
	PGame_ReplicatedTimerManager TimerManager;//[Offset: 0x970, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimerManager.PGame_ReplicatedTimerManagerBase.FastArraySerializer
	byte NextTimerId;//[Offset: 0x120, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimerManagerBase.FastArraySerializer
	PGame_ReplicatedTimerManagerEntry[] Timers;//[Offset: 0x108, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimerManagerEntry.FastArraySerializerItem
	PGame_ReplicatedTimerId ID;//[Offset: 0xc, Size: 1]
	PGame_ReplicatedTimer Timer;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimer
	enum TimerState;//[Offset: 0x8, Size: 1]
	float InitialTime;//[Offset: 0xc, Size: 1]
	float TimeRemaining;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimerManagerSlave.PGame_ReplicatedTimerManagerBase.FastArraySerializer

--------------------------------
Class: JobCollection.ItemCollection.PrimaryDataAsset.DataAsset.Object
	FText CollectionName;//[Offset: 0x98, Size: 1]
	FText CollectionDescription;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: MatchPhase
	FName Name;//[Offset: 0x0, Size: 1]
	FName Description;//[Offset: 0x8, Size: 1]
	int ID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSJobSelector.DraftReplicatedActor.Info.Actor.Object
	MulticastInlineDelegateProperty OnTaskGroupsChanged;//[Size: 1]
	KSDraftTaskGroup[] TaskGroups;//[Offset: 0x9e0, Size: 1]
	int ActionTaskGroupsCount;//[Offset: 0x9f0, Size: 1]
	MulticastInlineDelegateProperty OnPinnedJobChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnInspectedJobChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHoveredJobChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRemoteInspectedJobChanged;//[Size: 1]
	KSJobItem* HoveredJob;//[Offset: 0xa48, Size: 1]
	KSJobItem* InspectedJob;//[Offset: 0xa50, Size: 1]
	void UpdateTaskGroups();// 0x26df560
	void SetPinnedJob(KSJobItem* JobItem);// 0x26df4e0
	void SetInspectedJob(KSJobItem* InJob);// 0x26df140
	void SetHoveredJob(KSJobItem* InHoveredJob);// 0x26df0a0
	void ServerRemoteInspectedJobChanged(DraftPlayerIdHandle Player, KSJobItem* InJob);// 0x26decf0
	bool IsPinnedJob(KSJobItem* JobItem);// 0x26dea20
	bool IsCasualTaskGroups();// 0x26de9c0
	bool IsAllActionPending();// 0x26de990
	bool IsAllActionComplete();// 0x26de960
	KSJobItem* GetPersonalSelectedJob(out bool OutIsLockedIn);// 0x26de810
	KSJobItem* GetPersonalActiveTaskChoice();// 0x26de7e0
	bool GetLastCompletedTaskGroup(out KSDraftTaskGroup OutTaskGroup);// 0x26de5f0
	KSJobItem* GetInspectedJob();// 0x26de580
	KSJobItem* GetHoveredJob();// 0x26de560
	bool GetFirstPendingTaskGroup(out KSDraftTaskGroup OutTaskGroup);// 0x26de4a0
	void GetAllTasks(out DraftTask[] OutAllTasks);// 0x26de290
	bool GetActiveTaskGroup(out KSDraftTaskGroup OutActiveTaskGroup, out int OutIndex);// 0x26de180
	int GetActionTaskGroupsCount();// 0x26de160
	bool DraftPlayerMatches(DraftPlayerIdHandle InPlayer);// 0x26de0b0
	void ClientRemoteInspectedJobChanged(DraftPlayerIdHandle Player, KSJobItem* InJob);// 0x26ddd70
	void ClearPinnedJob(KSJobItem* JobItem);// 0x26ddbe0

--------------------------------
Class: KSDraftTaskGroup
	enum GroupState;//[Offset: 0x0, Size: 1]
	bool HasGroupType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum GroupType;//[Offset: 0x2, Size: 1]
	enum GroupAlignment;//[Offset: 0x3, Size: 1]
	KSDraftTaskClientInfo[] GroupTaskInfo;//[Offset: 0x8, Size: 1]
	float TimeForTasks;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSDraftTaskClientInfo
	DraftTask Task;//[Offset: 0x0, Size: 1]
	enum TaskState;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSPunishmentManager.KSActivityManagerBase.Object

--------------------------------
Class: KSBoosterManager.KSActivityManagerBase.Object

--------------------------------
Class: KSWeaponMasteryManager.KSActivityManagerBase.Object
	DataTable* MiscRewardsTable;//[Offset: 0x238, Size: 1]
	bool IsWeaponUnlockedInStore(KSWeaponAsset* WeaponAsset, KSPlayerState* PlayerState);// 0x27dac60
	bool IsWeaponMastered(KSWeaponAsset* WeaponAsset, KSPlayerState* PlayerState);// 0x27dab10
	bool IsWeaponFullyMastered(KSWeaponAsset* WeaponAsset, KSPlayerState* PlayerState);// 0x27dab10
	void GetWeaponMasteryRewardDisplayData(enum MasteryType, ActivityTier RewardTier, FText[] RewardItemsTypeTexts, Object* MasteryContextObject, out WeaponMasteryRewardDisplayData[] RewardData);// 0x27da650
	bool GetWeaponMasteryLevel(KSWeaponAsset* WeaponAsset, out int OutLevel);// 0x27da580
	int GetLockedMilestonesCount(KSWeaponAsset* WeaponAsset);// 0x27da300
	bool GetAllObjectiveProgressInstances(KSWeaponAsset* WeaponAsset, out KSActivityInstance*[] OutObjectiveInstances, KSPlayerState* PlayerState);// 0x27da020
	KSActivityInstance* FindActivityInstanceByProgressLootId(const int64 ProgressLootId, KSPlayerController* Player);// 0x27d9240

--------------------------------
Class: WeaponMasteryRewardDisplayData
	FText Name;//[Offset: 0x0, Size: 1]
	FText Description;//[Offset: 0x18, Size: 1]
	Texture2D* SoftIcon;//[Offset: 0x30, Size: 1]
	GameplayTag RarityTag;//[Offset: 0x58, Size: 1]
	FText ItemTypeText;//[Offset: 0x60, Size: 1]
	enum RewardGroup;//[Offset: 0x78, Size: 1]
	int DisplayQuantity;//[Offset: 0x7c, Size: 1]
	bool AlreadyOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	PUMG_StoreItem* PreviewStoreItem;//[Offset: 0x88, Size: 1]
	enum RewardPreviewType;//[Offset: 0x90, Size: 1]

--------------------------------
Class: PUMG_VoiceChatManager.Object
	bool bPendingPartyVoipJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bPendingMatchVoipJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	FString CurrentPartyVoiceChatChannel;//[Offset: 0x30, Size: 1]
	int CurrentPartyId;//[Offset: 0x40, Size: 1]
	FString CurrentMatchVoiceChatChannel;//[Offset: 0x48, Size: 1]
	enum CurrentMatchStatus;//[Offset: 0x58, Size: 1]
	SerializedMatchId CurrentMatchId;//[Offset: 0x60, Size: 1]
	bool bCurrentIsTokenForTaskForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	PUMG_PartyDataFactory* PartyDataFactory;//[Offset: 0x78, Size: 1]
	PUMG_QueueDataFactory* QueueDataFactory;//[Offset: 0x80, Size: 1]
	void OnPartyDataUpdated();// 0xe7efa0
	void OnMatchStatusUpdated(enum MatchStatus);// 0xe7ef20

--------------------------------
Class: SerializedMatchId

--------------------------------
Class: PUMG_PartyDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnPartyDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyLocalPlayerLeft;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyLocalPlayerPromoted;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMemberPromoted;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMemberDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPendingPartyMemberDataAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnPendingPartyMemberAccepted;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMemberRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMemberLeft;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyDisbanded;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationError;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationSent;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMessageReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationAccepted;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationRejected;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationExpired;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInfoUpdated;//[Size: 1]
	PUMG_PartyMemberData[] PartyMembers;//[Offset: 0x158, Size: 1]
	PUMG_PlayerInfo* PartyInviter;//[Offset: 0x168, Size: 1]
	FString LastInviteSentErrorMessage;//[Offset: 0x170, Size: 1]
	int MaxPartySize;//[Offset: 0x198, Size: 1]
	void UIX_PromoteMemberToLeader(int64 PlayerId);// 0xe70640
	void UIX_LeaveParty();// 0xe6fa80
	void UIX_KickMemberFromParty(int64 PlayerId);// 0xe6f9f0
	bool UIX_InviteMemberToParty(int64 PlayerId);// 0xe6f950
	void UIX_GiveInvitePermission(int64 PlayerId);// 0xe6f8c0
	void UIX_DisbandParty();// 0xe6f8a0
	void UIX_DenyPartyInvitation();// 0xe6f880
	void UIX_AcceptPartyInvitation();// 0xe6f860
	void SetPartyInfo(FString Key, FString Value);// 0xe6f670
	void SendPartyMessage(FString Data);// 0xe6f5d0
	void PartyPromoteResponse();// 0xe6f530
	void PartyLeaveResponse();// 0xe6f510
	void PartyKickResponse();// 0xe6f4f0
	bool IsPlayerInParty(int64 PlayerId);// 0xe6efe0
	bool IsPartyMaxed();// 0xe6efc0
	bool IsLeader();// 0xe6ef90
	bool IsInParty();// 0xe6ef60
	bool HasInvitePrivileges(int64 PlayerId);// 0xe6eed0
	FText GetPartyMemeberName(int64 PlayerId);// 0xe6ea20
	PUMG_PartyMemberData[] GetPartyMembers();// 0xe6e890
	int GetPartyMemberCount();// 0xe6e870
	PUMG_PartyMemberData GetPartyMemberByID(int64 PlayerId);// 0xe6e740
	PUMG_PlayerInfo* GetPartyInviter();// 0xe6e720
	enum GetPartyInviteMode();// 0xe6e700
	FString GetPartyInfo(FString Key);// 0xe6e610
	int GetMaxPartyMembers();// 0xe6e5f0
	bool CheckPartyMemberIsLeader(int64 PlayerId);// 0xe6e2a0

--------------------------------
Class: PUMG_PartyMemberData
	PUMG_PlayerInfo* PlayerData;//[Offset: 0x0, Size: 1]
	bool IsFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FText StatusMessage;//[Offset: 0x10, Size: 1]
	bool Online;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool IsPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool CanInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool IsLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	bool IsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: PUMG_QueueDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnQueueJoined;//[Size: 1]
	MulticastInlineDelegateProperty OnQueueLeft;//[Size: 1]
	MulticastInlineDelegateProperty OnQueueStatusChange;//[Size: 1]
	MulticastInlineDelegateProperty OnQueueDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnMatchStatusUpdatedError;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomMatchJoined;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomQueueMemberAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomQueueMemberRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomQueueMemberUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomQueueChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomInviteErrorRecieved;//[Size: 1]
	int PendingCustomMatchMapId;//[Offset: 0xe8, Size: 1]
	PUMG_ActivityQueuePair[] ActivityQueuePairs;//[Offset: 0xf0, Size: 1]
	FString ActivityToJoin;//[Offset: 0x100, Size: 1]
	bool bActivityToJoinIsMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bRequestedMatchRejoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	int[] QueueIds;//[Offset: 0x118, Size: 1]
	float QueueUpdatePollInterval;//[Offset: 0x188, Size: 1]
	TimerHandle QueueUpdateTimerHandle;//[Offset: 0x190, Size: 1]
	PUMG_CustomMatchMember[] CustomMatchMembers;//[Offset: 0x198, Size: 1]
	int CustomMatchSpectateTeamId;//[Offset: 0x218, Size: 1]
	int[] RepeatMapGameIds;//[Offset: 0x220, Size: 1]
	float RepeatMapOdds;//[Offset: 0x230, Size: 1]
	void StartCustomMatch(bool bDoChecks);// 0xe74840
	void SetPlayerTeamCustomMatch(int64 PlayerId, int TeamId);// 0xe74780
	void SetPendingMapForCustomQueue(int MapId);// 0xe74700
	void SetMapForCustomMatch(int MapId);// 0xe74680
	bool LeaveQueue(bool bLeaveMatch);// 0xe743d0
	void KickFromCustomMatch(int64 PlayerId);// 0xe74350
	bool JoinQueue(int QueueId);// 0xe742b0
	bool IsQueueActive(int QueueId);// 0xe74210
	static bool IsInQueue();// 0xe741e0
	static bool IsInGame();// 0xe741b0
	static bool IsInCustomMatch();// 0xe74180
	bool IsCustomInvitePending(int64 PlayerId);// 0xe740c0
	void InviteToCustomMatch(int64 PlayerId);// 0xe74040
	void IncrementPlayerTeamCustomMatch(int64 PlayerId);// 0xe73fc0
	static bool HasCurrentMatchId();// 0xe73f90
	void HandleInviteCooldowns();// 0xe73f70
	void HandleConfirmKickCustomPlayer();// 0xe73f50
	float GetTimeInQueueSeconds();// 0xe73f20
	int GetTeamMemberCount(int TeamId);// 0xe73e90
	int[] GetQueueIds();// 0xe73d10
	int GetPlayerTeamId(int64 PlayerId);// 0xe73c80
	int GetPendingCustomMatchMapId();// 0xe73c40
	int GetNextTeamId(int RelativeToTeamId);// 0xe73bb0
	bool GetIsJoiningBackfillGame();// 0xe73a60
	enum GetCustomMatchPermissions(int64 PlayerId);// 0xe739d0
	PUMG_CustomMatchMember[] GetCustomMatchMembers();// 0xe73940
	int GetCustomMatchMapId();// 0xe73910
	PUMG_PlayerInfo* GetCustomMatchInviterPlayerInfo();// 0xe738e0
	enum GetCurrentQueueMatchState();// 0xe738b0
	static bool GetCurrentQueueId(out int QueueId);// 0xe73820
	bool GetBaseQueueInfoById(int QueueId, out PUMG_ClientQueueInfo InClientQueueInfo);// 0xe73660
	void DeclineMatchInvite();// 0xe735a0
	void CreateCustomMatch(int QueueId, int TeamSize, int TaskForceCount);// 0xe734b0
	enum CheckCustomMatch(bool bAllowGMOverride);// 0xe733e0
	bool CanQueue();// 0xe733b0
	bool CanLocalPlayerPromoteCustomLobbyPlayer(int64 PlayerId);// 0xe73320
	bool CanLocalPlayerKickCustomLobbyPlayer(int64 PlayerId);// 0xe73290
	bool CanLocalPlayerControlCustomLobbyPlayer(int64 PlayerId);// 0xe73200
	bool BackfillQueue(int QueueId);// 0xe73160
	bool AttemptRejoinMatch(bool Forced);// 0xe730c0
	void AcceptMatchInvite();// 0xe72fe0

--------------------------------
Class: PUMG_CustomMatchMember
	PUMG_PlayerInfo* playerinfo;//[Offset: 0x0, Size: 1]
	int TeamId;//[Offset: 0x8, Size: 1]
	enum Permissions;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PUMG_ClientQueueInfo
	FText Name;//[Offset: 0x8, Size: 1]
	FText Description;//[Offset: 0x20, Size: 1]
	int ID;//[Offset: 0x38, Size: 1]
	int LevelLock;//[Offset: 0x3c, Size: 1]
	int MinPartySize;//[Offset: 0x40, Size: 1]
	int MaxPartySize;//[Offset: 0x44, Size: 1]
	bool IsCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: PUMG_ActivityQueuePair
	FString ActivityId;//[Offset: 0x0, Size: 1]
	int QueueId;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSInstancePlayerStatManager.KSActivityManagerBase.Object
	<int64,KSInstancePlayerStatEntry*> PlayerStatMap;//[Offset: 0x248, Size: 1]
	FString StatWrapperDataTablePath;//[Offset: 0x298, Size: 1]
	DataTable* StatWrapperDataTable;//[Offset: 0x2a8, Size: 1]
	KSStatWrapper* GetStatWrapperForTag(out const GameplayTag StatTag);// 0x26cbae0

--------------------------------
Class: KSInstancePlayerStatEntry.Object
	<GameplayTag,float> playerStats;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSStatWrapper.Object
	Texture2D* Icon;//[Offset: 0x28, Size: 1]
	GameplayTag StatTag;//[Offset: 0x50, Size: 1]
	FText DisplayName;//[Offset: 0x58, Size: 1]
	FText SingularName;//[Offset: 0x70, Size: 1]
	FText PluralName;//[Offset: 0x88, Size: 1]
	bool ShouldRepresentValueAsFloat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float GetTotalProgressSum(out const KSActivityInstance*[] InActivityInstances);// 0x2797520
	float GetTotalProgress(const KSActivityInstance* InActivityInstance);// 0x2797480
	FText GetStatValueText(const Object* InWorldContextObject, const KSPlayerState* InPlayerState, const int DescriptorId, FString DescriptorString, const bool ShouldOverwriteValue, const float OverwriteValue);// 0x2797170
	float GetStatValue(const Object* InWorldContextObject, const KSPlayerState* InPlayerState, const int DescriptorId, FString DescriptorString, const bool ShouldOverwriteValue, const float OverwriteValue);// 0x2796f90
	float GetInventoryQuantitySum(out const KSActivityInstance*[] InActivityInstances);// 0x2796a80
	float GetInventoryQuantity(const KSActivityInstance* InActivityInstance);// 0x27969e0
	float GetCurrentProgressSum(out const KSActivityInstance*[] InActivityInstances);// 0x2796870
	float GetCurrentProgress(const KSActivityInstance* InActivityInstance);// 0x27967d0
	float GetCurrentAccumulatedProgressSum(out const KSActivityInstance*[] InActivityInstances);// 0x2796710
	float GetCurrentAccumulatedProgress(const KSActivityInstance* InActivityInstance);// 0x2796670
	KSActivityInstance*[] GetActivityInstancesByDescriptors(const Object* InWorldContextObject, out const KSActivityDescriptor[] InActivityDescriptors, const KSPlayerState* InPlayerState);// 0x2795f80
	KSActivityInstance*[] GetActivityInstancesByDescriptor(const Object* InWorldContextObject, out const KSActivityDescriptor InActivityDescriptor, const KSPlayerState* InPlayerState);// 0x2795de0
	KSActivityInstance* GetActivityInstanceByDescriptors(const Object* InWorldContextObject, out const KSActivityDescriptor[] InActivityDescriptors, const KSPlayerState* InPlayerState);// 0x2795c80
	KSActivityInstance* GetActivityInstanceByDescriptor(const Object* InWorldContextObject, out const KSActivityDescriptor InActivityDescriptor, const KSPlayerState* InPlayerState);// 0x2795b40

--------------------------------
Class: KSActivityDescriptor
	GameplayTag ActivityTag;//[Offset: 0x0, Size: 1]
	int64 DescriptorId;//[Offset: 0x8, Size: 1]
	FString DescriptorString;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSMobileActivityManager.KSActivityManagerBase.Object
	bool IsLootIdMobileXPActivityReward(int LootId);// 0x26ff300
	KSActivityInstance* GetMobileXPActivityInstanceByLootId(int64 InLootId);// 0x26fe570
	bool GetMobileWeaponProgress(KSWeaponAsset* InWeaponAsset, out int OutWeaponLevel, out int OutCurrentLevelProgress, out int OutCurrentLevelSize);// 0x26fe3d0
	KSActivityInstance* GetMobilePlayerXpActivityInstance();// 0x26fe3a0
	KSActivityInstance* FindMobileWeaponProgressActivityInstance(KSWeaponAsset* InWeaponAsset);// 0x26fd1f0

--------------------------------
Class: KSMarketingEventHelper.Object
	KSGameInstance* GameInstance;//[Offset: 0x28, Size: 1]
	class KSMarketingAPI[] MarketingPlugins;//[Offset: 0x30, Size: 1]
	KSMarketingAPI*[] MarketingHelpers;//[Offset: 0x40, Size: 1]
	void HandleTutorialComplete();// 0x26f8870
	void HandleLevelUp(KSActivityInstance* ActivityInstance, int Tier, int Count);// 0x26f8490
	void BindPlayerStatsDelegates(int64 InPlayerId, out const KSActivityInstance*[] ActivityInstances);// 0x26f7d50
	void BindGameStateDelegates(KSGameState* InGameState);// 0x26f7cd0

--------------------------------
Class: KSMarketingAPI.Object

--------------------------------
Class: KSCallToActionManager.Object
	bool UnregisterCTAStateChanged(out const FName[] CTAPath, delegate Callback);// 0x2650490
	bool UnregisterCTASeenAmountChanged(out const FName[] CTAPath, delegate Callback);// 0x2650370
	int UnregisterCTAActiveChildrenCountChanged(out const FName[] CTAPath, delegate Callback);// 0x2650250
	int SetCTASeenAmount(out const FName[] CTAPath, int SeenAmount);// 0x2650160
	bool SetCTASeen(out const FName[] CTAPath, bool bSetChildrenSeen);// 0x2650060
	bool RegisterCTAStateChanged(out const FName[] CTAPath, delegate Callback);// 0x264ff20
	bool RegisterCTASeenAmountChanged(out const FName[] CTAPath, delegate Callback);// 0x264fe00
	int RegisterCTAActiveChildrenCountChanged(out const FName[] CTAPath, delegate Callback);// 0x264fce0
	void OnInventoryItemsUpdated(out const <InventoryId> UpdatedItems);// 0x264faf0
	bool IsCTAActive(out const FName[] CTAPath);// 0x264f890
	bool GetCTAStateAndAmounts(out const FName[] CTAPath, out int OutInventoryAmount, out int OutSeenAmount, out int OutActiveChildrenCount);// 0x264f510
	int GetCTAActiveChildrenCount(out const FName[] CTAPath);// 0x264f450

--------------------------------
Class: KSAnimStats
	float PlayTime;//[Offset: 0x0, Size: 1]
	float PlayTimeWeighted;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSGameMode.PGame_GameMode.PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	MulticastInlineDelegateProperty OnPlayerLogin;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerLogout;//[Size: 1]
	float PlayerReadyTimeoutTime;//[Offset: 0x538, Size: 1]
	class KSPlayerJoinRuleComponent* KSPlayerJoinRuleComponentClass;//[Offset: 0x540, Size: 1]
	KSPlayerJoinRuleComponent* KSPlayerJoinRuleComponent;//[Offset: 0x548, Size: 1]
	KSChargeRuleComponent* ChargeRuleComponent;//[Offset: 0x550, Size: 1]
	KSBackfillRuleComponent* BackfillRuleComponent;//[Offset: 0x558, Size: 1]
	KSPointsToCashRuleComponent* PointsToCashRuleComponent;//[Offset: 0x560, Size: 1]
	bool bCachedShouldPlayersStartSpectatingDefaultCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	KSRespawnConfig RespawnConfiguration;//[Offset: 0x578, Size: 1]
	MulticastInlineDelegateProperty OnPhaseChangeDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPhaseTimerExpired;//[Size: 1]
	MatchPhase MatchPhase;//[Offset: 0x5c0, Size: 1]
	bool bUseMatchTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 1]
	float MatchSetupTime;//[Offset: 0x5d8, Size: 1]
	bool bUseSelectionPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	float PreSelectionPhaseTime;//[Offset: 0x5e0, Size: 1]
	float SelectionPhaseTime;//[Offset: 0x5e4, Size: 1]
	float PostSelectionPhaseTime;//[Offset: 0x5e8, Size: 1]
	float PostSelectionPhaseMinTime;//[Offset: 0x5ec, Size: 1]
	bool bSkipPostSelectionCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	float PostSelectionCinematicPhaseTime;//[Offset: 0x5f4, Size: 1]
	bool bUsePostMatchMVPLineup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	float TimeBeforeMVPLineupCinematicBegins;//[Offset: 0x5fc, Size: 1]
	float PostMatchMVPLineupPhaseTime;//[Offset: 0x600, Size: 1]
	float MatchDefaultPhaseTime;//[Offset: 0x604, Size: 1]
	float MatchTimerUpdatePeriod;//[Offset: 0x638, Size: 1]
	class KSSpawnSelectorComponent* KSSpawnSelectorComponentClass;//[Offset: 0x650, Size: 1]
	class KSSpawnSelectorComponent* KSSpawnSelectorComponentSoftClass;//[Offset: 0x658, Size: 1]
	KSSpawnSelectorComponent* KSSpawnSelectorComponent;//[Offset: 0x680, Size: 1]
	bool bAllowFindInactivePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	bool bUseLoginStartSpotForPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 1]
	bool bAIPlayersUseLoginStartSpotForPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 1]
	int DefaultTeamCount;//[Offset: 0x6c0, Size: 1]
	enum TeamAssignmentType;//[Offset: 0x6c4, Size: 1]
	bool bFirstDebugPlayerIsOnlySpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c5, Size: 1]
	KSRevealManager* RevealManager;//[Offset: 0x738, Size: 1]
	class KSRevealManager* RevealManagerClass;//[Offset: 0x740, Size: 1]
	MulticastInlineDelegateProperty MatchStatsFinalizedDelegate;//[Size: 1]
	float MatchStartTime;//[Offset: 0x780, Size: 1]
	float MatchEndTime;//[Offset: 0x784, Size: 1]
	bool bIsTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	bool bIsPractice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 1]
	bool bIsAiPvpMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78a, Size: 1]
	bool bIsPlayerSpectateOnlyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78b, Size: 1]
	float DefaultMinimapWidth;//[Offset: 0x78c, Size: 1]
	class KSTeamState* DefaultTeamState;//[Offset: 0x790, Size: 1]
	float ReverseFriendlyFireStartThreshold;//[Offset: 0x798, Size: 1]
	float FriendlyFireModiferBase;//[Offset: 0x79c, Size: 1]
	float ReverseFriendlyFireModiferBase;//[Offset: 0x7a0, Size: 1]
	bool bCanDownPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	bool bCanDownBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a5, Size: 1]
	bool bCreditInstantKillWithDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a6, Size: 1]
	bool bCreditSuicideWithDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a7, Size: 1]
	bool bImmediateDeathForLastManStanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	bool bEliminatePlayerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 1]
	bool bPivotToKillerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7aa, Size: 1]
	bool bTrackKillerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ab, Size: 1]
	bool bRevealKillerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 1]
	bool bShouldRandomizeSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ad, Size: 1]
	bool bStartJobSelectionOnSideSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ae, Size: 1]
	bool bAssistOnReveal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7af, Size: 1]
	bool bClearAssistWithFullHp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7af, Size: 1]
	bool bIsMobileGameMode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7af, Size: 1]
	bool bUseMobileArmoryLoadouts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7af, Size: 1]
	KSGlobalShotListener* ShotListener;//[Offset: 0x7b0, Size: 1]
	MulticastInlineDelegateProperty OnTeamSidesFlipped;//[Size: 1]
	bool bClearObjectivesMarkedUsedOnSidesFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	Actor* Winner;//[Offset: 0x7d8, Size: 1]
	Actor* CheatWinner;//[Offset: 0x7e0, Size: 1]
	class KSRewardsCalculator* DefaultRewardsCalculatorClass;//[Offset: 0x7e8, Size: 1]
	bool bIncludeInitialInventoryFromDefaultPawnInStartingInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	KSItem*[] StartingInventory;//[Offset: 0x7f8, Size: 1]
	bool bGiveStartingInventoryToBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 1]
	KSItem*[] PlayerSpawnInventory;//[Offset: 0x810, Size: 1]
	KSItem*[] PlayerInitialSpawnInventory;//[Offset: 0x820, Size: 1]
	KSItem*[] PlayerRespawnInventory;//[Offset: 0x830, Size: 1]
	KSPlayerMod*[] PlayerSpawnMods;//[Offset: 0x840, Size: 1]
	KSPlayerMod*[] PlayerInitialSpawnMods;//[Offset: 0x850, Size: 1]
	KSPlayerMod*[] PlayerRespawnMods;//[Offset: 0x860, Size: 1]
	KSPlayerMod* FreefallMod;//[Offset: 0x870, Size: 1]
	bool bIsBotMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 1]
	int StartingCash;//[Offset: 0x8ac, Size: 1]
	MulticastInlineDelegateProperty OnSpecialtyItemVendorLoaded;//[Size: 1]
	bool bUsePlayerLoadouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bDisableLoadoutValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	float WaitForPlayersTimeout;//[Offset: 0xb10, Size: 1]
	<KSWeaponAsset*,int> LoadingLoot;//[Offset: 0xb28, Size: 1]
	bool bPopulateLootSites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 1]
	<enum,KSLootGroupGuaranteeMap> LootGroupGuarantees;//[Offset: 0xb80, Size: 1]
	bool bSpawnLootOnMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 1]
	KSLootRaritySwapInfo[] LootRaritySwaps;//[Offset: 0xc28, Size: 1]
	enum LootRespawnMode;//[Offset: 0xc38, Size: 1]
	<enum,float> LootSiteRespawnPeriods;//[Offset: 0xc40, Size: 1]
	KSAIActorCollection* AIActorCollection;//[Offset: 0xce0, Size: 1]
	bool bRecordKillCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	float AFKIdleTime;//[Offset: 0xcec, Size: 1]
	DataTable* AccoladeTrackerDataTable;//[Offset: 0xd28, Size: 1]
	KSAccoladeTracker*[] AccoladeTrackerInstances;//[Offset: 0xd30, Size: 1]
	class KSAccoladeTracker[] AccoladeTrackerClasses;//[Offset: 0xd40, Size: 1]
	KSGameHUDSettings GameModeHUDSettings;//[Offset: 0xd50, Size: 1]
	Actor*[] InteractiveObjectCache;//[Offset: 0xd88, Size: 1]
	class KSOutOfBoundsManager* OutOfBoundsManagerClass;//[Offset: 0xd98, Size: 1]
	KSMatchDataRecorder* MatchDataRecorder;//[Offset: 0xda0, Size: 1]
	bool ShouldForceCompetitiveLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	enum PerSecondChargeMode;//[Offset: 0xdb1, Size: 1]
	float PerSecondChargePercent;//[Offset: 0xdb4, Size: 1]
	float WeaponChargeRateMultiplier;//[Offset: 0xdb8, Size: 1]
	KSGameRuleComponent*[] GameRules;//[Offset: 0xdc0, Size: 1]
	<FName,FString> EditorPropertyMap;//[Offset: 0xdd0, Size: 1]
	FString FriendlyAudioName;//[Offset: 0xe70, Size: 1]
	class KSAnnouncer* KSAnnouncerClass;//[Offset: 0xe80, Size: 1]
	float RoundTimeRunningOutTime;//[Offset: 0xe88, Size: 1]
	int BurnTestNumberOfRoundToWin;//[Offset: 0xe8c, Size: 1]
	MulticastInlineDelegateProperty OnCharacterControlTransferred;//[Size: 1]
	bool bAllowPlayersToUseUnownedJobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	int[] AllowedUnownedJobIds;//[Offset: 0xeb8, Size: 1]
	enum EnforcedJobUniqueness;//[Offset: 0xec8, Size: 1]
	class KSJobSelectionRules* JobSelectionRules;//[Offset: 0xed0, Size: 1]
	KSJobSelectionAuthority* JobSelectionAuthority;//[Offset: 0xed8, Size: 1]
	bool bFubarIfNoVendorsByMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	bool bOnlyFubarIfNoJobVendor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee1, Size: 1]
	bool bFubarIfAbsentPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee2, Size: 1]
	enum BotNamingMethod;//[Offset: 0xee5, Size: 1]
	bool bUseIntraScoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	FText GameModeDisplayName;//[Offset: 0xef8, Size: 1]
	class KSEmoteMusicManager* EmoteMusicManagerClass;//[Offset: 0xf10, Size: 1]
	bool bRequireJobToEnterPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf18, Size: 1]
	KSCinematicDataContainer* CinematicDataContainer;//[Offset: 0xf20, Size: 1]
	KSMVPDeterminant* MVPDeterminant;//[Offset: 0xf28, Size: 1]
	KSSeamlessTravelTransferInfo* SeamlessTravelInfo;//[Offset: 0xf30, Size: 1]
	KSSeamlessTravelSettings SeamlessTravelSettings;//[Offset: 0xf38, Size: 1]
	GameplayTag[] GameModeTags;//[Offset: 0xf50, Size: 1]
	KSScoreboardConfig* ScoreboardConfig;//[Offset: 0xf60, Size: 1]
	int NumericId;//[Offset: 0xf68, Size: 1]
	bool bAbandonPlayersOnLogOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6c, Size: 1]
	KSBotDefinition* BackfillBotDefinition;//[Offset: 0xf70, Size: 1]
	byte NextPawnId;//[Offset: 0xf88, Size: 1]
	GameplayTag[] AllowedJobTags;//[Offset: 0xf90, Size: 1]
	bool UsePlayerLoadouts();// 0x26a69e0
	bool UseMobileArmoryLoadouts();// 0x26a69b0
	bool UseInitialSpawnPoint();// 0x266f520
	void StartPreSelectionPhase(bool bReset);// 0x26a6920
	bool ShouldGrantAssistOnReveal();// 0x26a68f0
	bool ShouldClearAssistAtFullHp();// 0x26a68c0
	void SetInfiniteAmmo(bool bValue);// 0x26a6830
	Actor* SelectAWinner();// 0x26a6800
	void PopulateLootSites();// 0x1f12b60
	void PopulateInteractiveObjects();// 0x26a67e0
	bool PlayerCanRestartCommon(Controller* Player);// 0x26a6740
	bool PlayerCanEnterPlay(Controller* C);// 0x26a66a0
	void PawnLeavingGame(PlayerController* PawnController);// 0x26a6610
	void OnWaitForPlayersExpired();// 0x26a65f0
	void OnTeamEliminated(KSTeamState* Team);// 0x26a6560
	void OnPlayerEliminated(KSPlayerState* Player);// 0x26a64d0
	void OnPlayerDownStateChanged(KSPlayerState* Player);// 0x26a6440
	void OnKSCharacterRevived(KSCharacter* InRevivee, KSPlayerState* InReviver);// 0x26a6370
	void OnKSCharacterRadialMenuItemUsed(KSCharacter* InCharacter, PlayerState* CharacterPlayer, KSRadialMenuItem* RadialMenuItem);// 0x26a6270
	void OnKSCharacterDowned(KSCharacter* InCharacter, Controller* EventInstigator, class DamageType DamageType, enum HitLocationType, Actor* DamageCauser, float DamageDealt);// 0x26a60b0
	void OnKSCharacterDownAssist(KSCharacter* InVictim, Controller* DownInstigator, Controller* DownAssistant, float RawDamage, float DamagePercent);// 0x26a5f30
	void OnKSCharacterCombatSummary(out const AdvancedCombatSummary CombatSummary);// 0x26a5e80
	void OnKSCharacterCombatEvent(out const AdvancedCombatEvent CombatEvent);// 0x26a5da0
	void OnKSCharacterBaseDied(KSCharacterBase* InCharacter, PlayerState* CharacterPlayer, Controller* EventInstigator, class DamageType DamageType, enum HitLocationType, out const KSEventAssistants EventAssistants, Actor* DamageCauser, float DamageDealt);// 0x26a5b40
	void OnCosmeticItemVendorsLoaded(int GroupId, out const int[] VendorIds);// 0x26a5a60
	void K2_OnMatchPhaseSet(FName NewPhase);// 0x2cbecb0
	bool IsMobileGameMode();// 0x26a5a30
	enum IsAWinner(Actor* Other);// 0x26a5990
	void HandleStartingNewAIPlayer(KSAIController* NewPlayer);// 0x1ebeeb0
	void HandleAllPlayersFinishedPrePrep();// 0x1f1a700
	float GetWeaponChargeRateMultiplier();// 0x26a5970
	int GetStartingTeamNum(Player* NewPlayer, PGame_PlayerController* NewPlayerController);// 0x26a58a0
	KSGlobalShotListener* GetShotListener();// 0x26a5870
	class KSRewardsCalculator GetRewardsCalculatorClass();// 0x26a5830
	KSRevealManager* GetRevealManager();// 0x26a5810
	float GetPerSecondChargePercent();// 0x26a57f0
	enum GetPerSecondChargeMode();// 0x26a57d0
	KSMVPDeterminant* GetMVPDeterminant();// 0x26a5720
	float GetMatchTimeElapsed();// 0x26a5790
	FName GetMatchPhaseName();// 0x26a5770
	MatchPhase GetMatchPhase();// 0x26a5740
	bool GetIsTutorial();// 0x26a5700
	bool GetIsPractice();// 0x26a56e0
	bool GetIsPlayerSpectateOnlyMode();// 0x26a56c0
	bool GetIsAIPvpMode();// 0x26a56a0
	FName GetGamePhase();// 0x26a5660
	KSGameHUDSettings GetGameModeHUDSettings();// 0x26a55c0
	KSPlayerMod*[] GetDefaultPlayerMods();// 0x26a5540
	Actor*[] GetCachedInteractiveObjects();// 0x26a5360
	int GetBounty(PlayerState* PlayerState);// 0x26a52c0
	bool FlippingTeamSidesThisRound();// 0x26a52a0
	void EventOnTeamCreated(KSTeamState* Team);// 0x26a5210
	bool DoesClearObjectivesMarkedUsedOnSidesFlipped();// 0x26a51f0
	void DestroyDynamicZipLines();// 0x26a51d0
	void DestroyActive(class Object ActorClass);// 0x26a5150
	void CreateRevealManager();// 0x26a5130
	void ClearLootSites();// 0x26a5110
	void ClearInteractiveObjects();// 0x26a50f0
	bool CanUsePlayerStart(Controller* Player, PlayerStart* PlayerStart);// 0x26a5020
	bool CanSpawnBotsNow();// 0x26a4ff0
	void AllPlayersLockedInForComponent();// 0x1f2b6d0
	bool AllowsHumanBackfill();// 0x26a4fc0
	bool AllowDamageNow();// 0x26a4f90
	bool AIPlayerCanRestart(KSAIController* Player);// 0x26a4e10
	void AddInteractiveObject(Actor* ObjectToAdd);// 0x26a4eb0

--------------------------------
Class: PGame_GameMode.PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	bool bAutoEnableCombatLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bUploadCombatLogOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	bool bFubarForCPUFramerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool bFubarForPacketLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	float FubarShutdownWaitTimeoutTime;//[Offset: 0x444, Size: 1]
	bool bDeferWelcomeUntilAllPlayersConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bReadyForWelcome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	FString SonyActivityId;//[Offset: 0x4a8, Size: 1]
	float SonyMatchOwnerNetTimeout;//[Offset: 0x4b8, Size: 1]
	PGame_SonyMatchData SonyMatchData;//[Offset: 0x4c0, Size: 1]
	uint32[] SonyIneligibleMatchOwners;//[Offset: 0x4d8, Size: 1]
	PGame_InactivePlayerStateEntry[] PGame_InactivePlayerArray;//[Offset: 0x4f8, Size: 1]
	bool bGlobalDisableAIBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool bAllowAIBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	bool bHasPerformedInitialAIBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 1]
	void OnFubarShutdownTimeout();// 0xd76e90
	void InactivePlayerStateDestroyed(Actor* InActor);// 0xd767a0
	void FinalShutdown();// 0xd760a0
	void FinalizeMatchEnded();// 0xd760c0

--------------------------------
Class: PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	FString PersistentMapSuffix;//[Offset: 0x388, Size: 1]
	FString[] SublevelSuffixes;//[Offset: 0x398, Size: 1]
	FString[] HighMemorySublevelSuffixes;//[Offset: 0x3a8, Size: 1]
	FString[] LowMemorySublevelSuffixes;//[Offset: 0x3b8, Size: 1]
	bool bPlayerEx_TriggerMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bPlayerEx_TriggerMatchHasEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	float CalculateMatchCloseness();// 0xd75b30

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c0, Size: 1]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 1]
	int NumSpectators;//[Offset: 0x2cc, Size: 1]
	int NumPlayers;//[Offset: 0x2d0, Size: 1]
	int NumBots;//[Offset: 0x2d4, Size: 1]
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 1]
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 1]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 1]
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 1]
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 1]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	void StartMatch();// 0x1f12380
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x44a8160
	void Say(FString Msg);// 0x44a80c0
	void RestartGame();// 0x1f122a0
	bool ReadyToStartMatch();// 0x44a7a80
	bool ReadyToEndMatch();// 0x4478f20
	void K2_OnSetMatchState(FName NewState);// 0x2cbecb0
	bool IsMatchInProgress();// 0x44a5d80
	bool HasMatchEnded();// 0x44a5b90
	FName GetMatchState();// 0x44a4b60
	void EndMatch();// 0x1f12360
	void AbortMatch();// 0x1f12280

--------------------------------
Class: KSPlayerJoinRuleComponent.KSGameRuleComponent.ActorComponent.Object
	void ProcessNextTaskForPlayer(PlayerController* Player);// 0x273b510
	bool PlayerHasJoinTasks(PlayerController* Player);// 0x273b480
	void OnAllTasksCompleteForPlayer(PlayerController* Player);// 0x273b400
	void NewKSPlayerReadyForPlay(KSPlayerController* NewKSPlayer);// 0x273b380
	void GetJoinTasksForPlayer(PlayerController* Player, out KSPlayerJoinTask*[] OutTasksForPlayer);// 0x273a720

--------------------------------
Class: KSGameRuleComponent.ActorComponent.Object
	void OnTeamSidesFlipped();// 0x26aad50
	void OnTeamChanged(KSPlayerState* Player, KSTeamState* OldTeam, KSTeamState* NewTeam);// 0x26aac30
	void OnLogout(Controller* Controller);// 0x26aa970
	void OnLogin(Controller* Controller);// 0x26aa8f0
	void NewPlayerStarting(PlayerController* NewPlayer);// 0x26aa660
	void NewBotStarting(KSAIController* NewBot);// 0x26aa5d0

--------------------------------
Class: KSPlayerJoinTask.Object
	MulticastInlineDelegateProperty OnPlayerJoinTaskComplete;//[Size: 1]
	bool BeginTask(PlayerController* Player);// 0x2630550

--------------------------------
Class: KSAIController.AIController.Controller.Actor.Object
	KSCharacterBase* KSCharacter;//[Offset: 0x378, Size: 1]
	KSCharacter* CachedKSCharacter;//[Offset: 0x380, Size: 1]
	bool bAutoManageWayPointSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	KSWayPointSet* WayPointSet;//[Offset: 0x3a8, Size: 1]
	bool bShouldReverseWayPointSetDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	KSPlayerShop* Shop;//[Offset: 0x3c8, Size: 1]
	Actor* StartPointToSpawnAt;//[Offset: 0x400, Size: 1]
	class KSCharacter* CharacterToSpawn;//[Offset: 0x408, Size: 1]
	BehaviorTree* TreeToRun;//[Offset: 0x410, Size: 1]
	KSBTDifficulty* InitialDifficulty;//[Offset: 0x418, Size: 1]
	DataTable* DifficultyTable;//[Offset: 0x428, Size: 1]
	KSBTDifficultyConfig SpawnDifficultyConfig;//[Offset: 0x430, Size: 1]
	DataTable* ObjectivePriorityTable;//[Offset: 0x4a8, Size: 1]
	DataTable* ItemPriorityTable;//[Offset: 0x4b0, Size: 1]
	DataTable* AbilityTable;//[Offset: 0x4b8, Size: 1]
	KSInitialLoadout InitialLoadout;//[Offset: 0x4c0, Size: 1]
	KSAIPerceptionComponent* KSAIPerception;//[Offset: 0x4f8, Size: 1]
	KSAIReasonerComponent* KSAIReasoner;//[Offset: 0x500, Size: 1]
	Actor* ActorForFocalOffset;//[Offset: 0x530, Size: 1]
	float CrowdCollisionQueryRange;//[Offset: 0x548, Size: 1]
	float CrowdPathOptimizationRange;//[Offset: 0x54c, Size: 1]
	float CrowdAvoidanceRangeMultiplier;//[Offset: 0x550, Size: 1]
	float CrowdSeparationWeight;//[Offset: 0x554, Size: 1]
	bool bStartWithCrowdFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	int TeamNumber;//[Offset: 0x55c, Size: 1]
	GameplayTagQuery AllowedJobQuery;//[Offset: 0x590, Size: 1]
	KSAIItemPriorityComponent* ItemPriorityComponent;//[Offset: 0x5d8, Size: 1]
	KSAIItemPriorityComponent* TempItemPriorityComponent;//[Offset: 0x5e0, Size: 1]
	KSAIObjectivePriorityComponent* ObjectivePriorityComponent;//[Offset: 0x5e8, Size: 1]
	KSAIDifficultyComponent* DifficultyComponent;//[Offset: 0x5f0, Size: 1]
	void SetNavigationInteractTarget(Actor* InteractTargetIn);// 0x2617640
	void OnPawnKilled(const KSCharacterFoundation* KillerCharacter, const KSCharacterFoundation* KilledCharacter);// 0x2616f60
	void OnCosmeticLoadoutComplete();// 0x2616e80
	void HandleTeamSidesFlipped();// 0x2616c60
	void HandleJobChanged();// 0x2616c40
	KSCharacter* GetOwnedCharacter();// 0x2616aa0
	Actor* GetNavigationInteractTarget();// 0x2616a70
	KSAIReasonerComponent* GetKSReasonerComponent();// 0xf89c90
	KSAIPerceptionComponent* GetKSPerceptionComponent();// 0x2616a30
	void ClearNavigationInteractTarget();// 0x2616960

--------------------------------
Class: KSAIReasonerComponent.ActorComponent.Object
	float ConsiderationPeriod;//[Offset: 0xb0, Size: 1]
	KSReasonerOptionBase* CurrentActiveOption;//[Offset: 0x118, Size: 1]
	void SetNearbyEnemies(KSCharacterBase*[] Enemies);// 0x261ef90
	void SetNearbyAllies(KSCharacterBase*[] Allies);// 0x261ee90
	KSCharacterBase*[] GetNearbyEnemies();// 0x261e950
	KSCharacterBase*[] GetNearbyAllies();// 0x261e890
	KSReasonerOptionBase*[] GetAllActiveOptions();// 0x261e680
	void ClearSquadOptions();// 0x261e660
	void AddSquadTaskOptions(class KSReasonerOptionBase[] NewOptions, bool ReplaceOldOptions);// 0x261e490
	void AddSquadTaskOption(class KSReasonerOptionBase NewOption, bool ReplaceOldOptions);// 0x261e3c0

--------------------------------
Class: KSReasonerOptionBase.ActorComponent.Object
	FName Name;//[Offset: 0xb0, Size: 1]
	float Stickiness;//[Offset: 0xb8, Size: 1]
	KSReasonerCondition[] ActivationConditions;//[Offset: 0xc0, Size: 1]
	KSAIConsiderationBase*[] Considerations;//[Offset: 0xd0, Size: 1]
	bool TickAction(float DeltaSeconds, BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x277c0f0
	bool StopAction(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x277c020
	bool StartAction(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x277bf50
	bool CheckAllConditions(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x277b0a0
	bool CheckActivationCondition(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x277afd0
	float CalculateConsiderationWeight(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x277aba0
	float CalculateAllConsiderations(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x277aae0

--------------------------------
Class: KSReasonerCondition
	enum ActivationType;//[Offset: 0x0, Size: 1]
	enum TargetType;//[Offset: 0x1, Size: 1]
	enum ComparisonType;//[Offset: 0x2, Size: 1]
	bool AsPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	FName BlackboardKey;//[Offset: 0x4, Size: 1]
	bool BooleanValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float FloatValue;//[Offset: 0x10, Size: 1]
	Vector VectorValue;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSAIConsiderationBase.DataAsset.Object
	FName Name;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSAIPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	void GetCurrentlyPerceivedStimuli(class AISense SenseToUse, out KSStimulusEvent[] Stimuli);// 0x261e7a0

--------------------------------
Class: KSStimulusEvent
	Actor* Actor;//[Offset: 0x0, Size: 1]
	AIStimulus Stimulus;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSPlayerShop.Info.Actor.Object
	KSPlayerState* PlayerState;//[Offset: 0x230, Size: 1]
	MulticastInlineDelegateProperty OnPurchaseAcknowledged;//[Size: 1]
	MulticastInlineDelegateProperty OnRefundAcknowledged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopManifestChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopOfferingsChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemPurchased;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemRefunded;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemActive;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemInactive;//[Size: 1]
	MulticastInlineDelegateProperty OnShopOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnShopClosed;//[Size: 1]
	bool bWeaponMasterySwapEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	float CashPerKSPoint;//[Offset: 0x2ec, Size: 1]
	bool bDelayApplyPurchases;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	ShopManifest ShopManifestMap;//[Offset: 0x308, Size: 1]
	Object* ConfiguratorObject;//[Offset: 0x428, Size: 1]
	<KSItem*,int> OverridePricingMap;//[Offset: 0x4d0, Size: 1]
	int NextTransactionId;//[Offset: 0x820, Size: 1]
	bool bShopOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	bool bShopInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x832, Size: 1]
	bool bPlayersCanAccessShopWhileDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x833, Size: 1]
	uint32 MinimumUndoableTransactionId;//[Offset: 0x834, Size: 1]
	KSPlayerShopHistoryComponent* PlayerShopHistoryComponent;//[Offset: 0x838, Size: 1]
	bool bAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	MulticastInlineDelegateProperty OnShopAvailabilityChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopOptionsChanged;//[Size: 1]
	ShopOptions ShopOptions;//[Offset: 0x868, Size: 1]
	PrimaryOffering[] PrimaryOneOfferings;//[Offset: 0x870, Size: 1]
	PrimaryOffering[] PrimaryTwoOfferings;//[Offset: 0x880, Size: 1]
	KSWeaponCategoryAsset* PistolWeaponCategory;//[Offset: 0x890, Size: 1]
	PrimaryOffering[] PistolOfferings;//[Offset: 0x898, Size: 1]
	KSWeaponCategoryAsset* MeleeWeaponCategory;//[Offset: 0x8a8, Size: 1]
	PrimaryOffering[] MeleeOfferings;//[Offset: 0x8b0, Size: 1]
	KSWeaponCategoryAsset* GadgetWeaponCategory;//[Offset: 0x8c0, Size: 1]
	PrimaryOffering[] GadgetOneOfferings;//[Offset: 0x8c8, Size: 1]
	PrimaryOffering[] GadgetTwoOfferings;//[Offset: 0x8d8, Size: 1]
	bool bDisableShopOnClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ea, Size: 1]
	void Undo();// 0x2751940
	void TryToSetItemActive(enum ShopItemType, bool bActive);// 0x2751870
	void TryToPurchaseItem(enum ShopItemType);// 0x27517f0
	void TryToChangeOfferingForType(enum ShopItemType, KSItem* Item);// 0x2751730
	void ToggleShop();// 0x2751710
	static bool ShopItem_Equals(out const ShopItem A, out const ShopItem B);// 0x2751530
	bool ShopHasWeaponMasterySwap();// 0x273e9a0
	void ServerTryToOpenShop();// 0x2751460
	void ServerTryToCloseShop();// 0x2751410
	void ServerAttemptRefund(PlayerShopTransaction InRefundTransactionInfo, PlayerShopTransaction InPurchaseTransactionInfo);// 0x2751300
	void ServerAttemptPurchase(PlayerShopTransaction InTransactionInfo);// 0x2751240
	void ServerAttemptChangeOfferingForType(enum ShopItemType, KSItem* Item);// 0x2751140
	void ServerAttemptActivate(PlayerShopTransaction InTransactionInfo, bool bActivate);// 0x2751040
	void ResetManifest();// 0x2751020
	void OpenShop();// 0x2750df0
	void OnRoundStarted(out const RoundInitState RoundState);// 0x2750d50
	void OnRep_ShopOptions();// 0x1ef1100
	void OnRep_ShopOpen();// 0x2750d10
	void OnRep_PrimaryTwoOfferings();// 0x2750cf0
	void OnRep_PrimaryOneOfferings();// 0x2750cd0
	void OnRep_ConfiguratorObject();// 0x2750cb0
	void OnRep_bAvailable();// 0x2750d30
	void OnPlayerSpawned(KSPlayerState* InPlayerState, KSCharacterBase* Character);// 0x2750bf0
	void OnPlayerKilled(CombatEventInfo EventInfo);// 0x2750ab0
	void OnPlayerJobChanged();// 0x1eeffa0
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x2750a30
	void OnKilledPlayerPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x2750970
	void OnInShopZoneChanged(KSPlayerState* Player, bool bInZone);// 0x27508a0
	void OnAFKTimerRefreshed(KSPlayerController* InPlayerController);// 0x2750820
	void NotifyShopItemRefunded(out const ShopItem ShopItem);// 0x2750730
	void NotifyShopItemPurchased(out const ShopItem ShopItem);// 0x2750640
	void NotifyShopItemInactive(out const ShopItem ShopItem);// 0x2750550
	void NotifyShopItemChanged(out const ShopItem ShopItem);// 0x2750460
	void NotifyShopItemActive(out const ShopItem ShopItem);// 0x2750370
	ShopItem MakeShopItem(KSItem* Item);// 0x2750130
	bool IsShopOpen();// 0x2750110
	bool IsCircleGameShopEnabled();// 0x27500f0
	void InitializeShopItems();// 0x1f128e0
	void HandlePlayerStateJobChanged();// 0x274fec0
	enum GetTypeOfFavoriteItem();// 0x274fab0
	ShopOptions GetShopOptions();// 0x274fa70
	bool GetShopItemByType(enum ShopItemType, out ShopItem Item);// 0x274f930
	bool GetShopAvailability();// 0x274f910
	enum[] GetRestrictionsForType(enum ShopItemType);// 0x274f840
	int GetPriceOfItem(KSItem* InItem, bool bIsUpgrade);// 0x274f770
	enum[] GetPrerequisitesForType(enum ShopItemType);// 0x274f6a0
	int GetNumPurchasedForCategory(enum ShopCategoryType);// 0x274f5e0
	int GetMaxPurchasedForCategory(enum ShopCategoryType);// 0x274f270
	static enum GetCategoryTypeForItemType(enum ItemType);// 0x274f0f0
	KSItem*[] GetAppliedItems();// 0x274f070
	void ForceSetItemIndex(enum ShopItemType, GameplayTag PreferredEquipPoint, int CurrentIndex);// 0x274ee70
	void ForceSetItemActive(enum ShopItemType, GameplayTag PreferredEquipPoint, bool bActive);// 0x274ed60
	void EnableShopForPlayer(KSPlayerState* InPlayerState);// 0x274ece0
	void DisableShopForPlayer(KSPlayerState* InPlayerState);// 0x274ec60
	void CreateShopManifest();// 0x1ef3000
	void CloseShop();// 0x274ec40
	void ClientRefundAcknowledge(PlayerShopTransaction InRefundTransactionInfo, PlayerShopTransaction InPurchaseTransactionInfo, bool bSuccess);// 0x274eb40
	void ClientPurchaseAcknowledge(PlayerShopTransaction InTransactionInfo, bool bSuccess);// 0x274ea70
	void ClientOpenShop();// 0x1ef10c0
	void ClientCloseShop();// 0x1eef160
	bool CanRefundItemNow(enum ShopItemType);// 0x274e9e0
	bool CanPurchaseItemNow(enum ShopItemType);// 0x274e950
	bool CanPlayersAccessShopWhileDead();// 0x274e930
	bool CanChangeShopOfferingForType(enum ShopItemType, KSItem* Item);// 0x274e870
	bool CanAffordItemNow(enum ShopItemType);// 0x274e7e0
	void ApplyTransactions();// 0x274e7c0

--------------------------------
Class: ShopItem.FastArraySerializerItem
	enum Type;//[Offset: 0xc, Size: 1]
	GameplayTag PreferredEquipPoint;//[Offset: 0x10, Size: 1]
	ShopSubItem[] CurrentSubItemList;//[Offset: 0x18, Size: 1]
	ShopSubItem[] AppliedSubItemList;//[Offset: 0x28, Size: 1]
	bool bResetable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	int NextSubItemIndex;//[Offset: 0x3c, Size: 1]
	int CurrentSubItemIndex;//[Offset: 0x40, Size: 1]
	int AppliedSubItemIndex;//[Offset: 0x44, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bIsAppliedActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool bStartInactive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool bOneTimePurchase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	bool bResetOnExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bResetOnRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bAuthorityIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	int AuthorityPurchaseIndex;//[Offset: 0x50, Size: 1]
	int AuthorityLatestTransactionId;//[Offset: 0x54, Size: 1]
	bool bSimulatedIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int SimulatedPurchaseIndex;//[Offset: 0x5c, Size: 1]
	int SimulatedLatestTransactionId;//[Offset: 0x60, Size: 1]

--------------------------------
Class: ShopSubItem
	KSItem* Item;//[Offset: 0x0, Size: 1]
	int Price;//[Offset: 0x8, Size: 1]
	bool bPurchased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ShopManifest.FastArraySerializer
	ShopItem[] Manifest;//[Offset: 0x108, Size: 1]
	KSPlayerShop* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: KSPlayerShopHistoryComponent.ActorComponent.Object
	void ClearTransactionHistory();// 0x275a4c0

--------------------------------
Class: ShopOptions
	bool bPrimary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSecondary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bGadgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bPerks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bGambits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bGlobals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]

--------------------------------
Class: PrimaryOffering
	KSItem* Offering;//[Offset: 0x0, Size: 1]
	bool Mastered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool Favorited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: PlayerShopTransaction
	enum TransactionType;//[Offset: 0x0, Size: 1]
	enum ItemType;//[Offset: 0x1, Size: 1]
	uint32 TransactionRequestId;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSBTDifficulty.DataAsset.Object
	FString DifficultyName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSBTDifficultyConfig
	float AccuracyMultiplierStandard;//[Offset: 0x0, Size: 1]
	float AccuracyMultiplierThrownMelee;//[Offset: 0x4, Size: 1]
	float AccuracyMultiplierThrownGrenade;//[Offset: 0x8, Size: 1]
	float AccuracyMultiplierWhenBlinded;//[Offset: 0xc, Size: 1]
	float AccuracyMultiplierWhenCrosshairHidden;//[Offset: 0x10, Size: 1]
	float NewTargetAccuracyMultiplier;//[Offset: 0x14, Size: 1]
	float NewTargetTime;//[Offset: 0x18, Size: 1]
	float SpeedMultiplier;//[Offset: 0x1c, Size: 1]
	float AttackDelayClipPercentMin;//[Offset: 0x20, Size: 1]
	float AttackDelayClipPercentMax;//[Offset: 0x24, Size: 1]
	float AttackDelay;//[Offset: 0x28, Size: 1]
	float DamageDealtMultiplier;//[Offset: 0x2c, Size: 1]
	float HeadshotDamageDealtMultiplier;//[Offset: 0x30, Size: 1]
	float DamageTakenMultiplier;//[Offset: 0x34, Size: 1]
	float HeadshotDamageTakenMultiplier;//[Offset: 0x38, Size: 1]
	float AimForHeadshotProbability;//[Offset: 0x3c, Size: 1]
	float DodgeRollProbability;//[Offset: 0x40, Size: 1]
	float StrafeProbability;//[Offset: 0x44, Size: 1]
	float ThrowGrenadeProbability;//[Offset: 0x48, Size: 1]
	float ThrowMeleeProbability;//[Offset: 0x4c, Size: 1]
	float PerceptionStrengthMin;//[Offset: 0x50, Size: 1]
	float PerceptionStrengthMax;//[Offset: 0x54, Size: 1]
	KSBTAction*[] AllowedActions;//[Offset: 0x58, Size: 1]
	KSBTAction*[] DisallowedActions;//[Offset: 0x68, Size: 1]

--------------------------------
Class: KSBTAction.DataAsset.Object
	FString ActionName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSInitialLoadout
	KSItem*[] LoadoutItems;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSAIItemPriorityComponent.ActorComponent.Object
	KSBTItemPriorityTableRow[] ItemPriorities;//[Offset: 0xb0, Size: 1]
	void InsertPriority(out const KSBTItemPriorityTableRow ItemPriority);// 0x261a6a0
	void InsertPriorities(const DataTable* ItemPriorityTable);// 0x261a620
	float GetWeightByName(FString ItemName);// 0x261a530
	float GetWeight(KSItem* Item);// 0x261a440
	float GetShopPurchaseWeightByName(FString ItemName);// 0x261a350
	float GetShopPurchaseWeight(KSItem* Item);// 0x261a260
	float GetShopPriorityGroupByName(FString ItemName);// 0x261a170
	float GetShopPriorityGroup(KSItem* Item);// 0x261a080
	float GetPriorityMultiplierByName(FString ItemName);// 0x2619e50
	float GetPriorityMultiplier(KSItem* Item);// 0x2619d60
	void ClearPriorities();// 0x2619a30

--------------------------------
Class: KSBTItemPriorityTableRow.TableRowBase
	KSItem* ItemAsset;//[Offset: 0x8, Size: 1]
	float Weight;//[Offset: 0x30, Size: 1]
	float ShopPurchaseWeight;//[Offset: 0x34, Size: 1]
	float ShopPriorityGroup;//[Offset: 0x38, Size: 1]
	float Multiplier;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: KSAIObjectivePriorityComponent.ActorComponent.Object
	DataTable* ObjectivePriorityTable;//[Offset: 0xb0, Size: 1]
	<FName,KSBTObjectivePriorityTableRow> ObjectivePriorities;//[Offset: 0xb8, Size: 1]
	KSBTObjectivePriorityTableRow[] SortedPriorities;//[Offset: 0x108, Size: 1]
	void UpdatePriority(out const FName Key, out const KSBTObjectivePriorityTableRow ObjectivePriority, bool ShouldResort);// 0x261f190
	void UpdatePriorities(DataTable* ObjectivePriorityTableIn);// 0x261f110
	void Setup(DataTable* ObjectivePriorityTableIn);// 0x261f090
	void InsertPriority(out const FName Key, out const KSBTObjectivePriorityTableRow ObjectivePriority, bool ShouldResort);// 0x261eb30
	void InsertPriorities(DataTable* ObjectivePriorityTableIn);// 0x261eab0
	float GetPriority(out const FName Key);// 0x261ea10
	void ClearPriorities();// 0x261e640
	void ApplyPrioritiesFromDifficulty(DataTable* ObjectivePriorityTableIn);// 0x261e5c0

--------------------------------
Class: KSBTObjectivePriorityTableRow.TableRowBase
	KSBTObjective* Objective;//[Offset: 0x8, Size: 1]
	float MinDistance;//[Offset: 0x10, Size: 1]
	float MaxDistance;//[Offset: 0x14, Size: 1]
	float MaxSecondsElapsed;//[Offset: 0x18, Size: 1]
	float MinSecondsElapsed;//[Offset: 0x1c, Size: 1]
	float MaxSecondsRemaining;//[Offset: 0x20, Size: 1]
	float MinSecondsRemaining;//[Offset: 0x24, Size: 1]
	float Priority;//[Offset: 0x28, Size: 1]
	KSPlayerMod*[] RequiredAbilities;//[Offset: 0x30, Size: 1]
	KSBTTargetSelector*[] ObjectiveValidationArray;//[Offset: 0x40, Size: 1]
	DataTable* TargetSelectionTable;//[Offset: 0x50, Size: 1]
	DataTable* OverrideDataTable;//[Offset: 0x58, Size: 1]
	GameplayTag[] RequiredGameplayTags;//[Offset: 0x60, Size: 1]

--------------------------------
Class: KSBTObjective.DataAsset.Object
	FString ObjectiveName;//[Offset: 0x30, Size: 1]
	FString ObjectiveTargetKeyName;//[Offset: 0x40, Size: 1]
	KSBTAction*[] RequiredActions;//[Offset: 0x50, Size: 1]
	KSPlayerMod*[] RequiredAbilities;//[Offset: 0x60, Size: 1]

--------------------------------
Class: KSBTTargetSelector.DataAsset.Object
	class AISense[] SensesToUse;//[Offset: 0x30, Size: 1]
	KSPerceptionFilter PerceptionFilter;//[Offset: 0x40, Size: 1]
	bool SelectCombatTargetOfResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool SelectClosestTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool SelectFurthestTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	bool SelectRandomTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x233, Size: 1]

--------------------------------
Class: KSPerceptionFilter
	FName PerceptionEvent;//[Offset: 0x0, Size: 1]
	KSAffiliationFilter AffiliationFilter;//[Offset: 0x8, Size: 1]
	KSCharacterStateFilter CharacterStateFilter;//[Offset: 0x10, Size: 1]
	KSInteractableStateFilter InteractableStateFilter;//[Offset: 0xe8, Size: 1]
	KSDestructibleStateFilter DestructibleStateFilter;//[Offset: 0x120, Size: 1]
	KSItemDropStateFilter ItemDropStateFilter;//[Offset: 0x124, Size: 1]
	KSLootSiteFilter LootSiteFilter;//[Offset: 0x134, Size: 1]
	KSDestroyableHazardStateFilter DestroyableHazardStateFilter;//[Offset: 0x136, Size: 1]
	KSMapPointStateFilter MapPointStateFilter;//[Offset: 0x140, Size: 1]
	KSObjectiveStateFilter ObjectiveStateFilter;//[Offset: 0x170, Size: 1]
	bool bCheckDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	byte DistanceOperation;//[Offset: 0x189, Size: 1]
	float Distance;//[Offset: 0x18c, Size: 1]
	bool bCheckDistanceRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	float MinDistance;//[Offset: 0x194, Size: 1]
	float MaxDistance;//[Offset: 0x198, Size: 1]
	bool bCheckActorClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	class Actor* ActorClass;//[Offset: 0x1a0, Size: 1]
	bool bCheckActorClassArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	class Actor[] ActorClassArray;//[Offset: 0x1d0, Size: 1]
	bool bCheckLOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bCheckForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	float MaxForwardAngle;//[Offset: 0x1e4, Size: 1]
	bool bCheckIntersectsNavMeshPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]

--------------------------------
Class: KSAffiliationFilter
	bool bCountEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bCountAllies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bCountSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bCountUnaffiliated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: KSCharacterStateFilter
	bool bCheckHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte HealthOperation;//[Offset: 0x1, Size: 1]
	float HealthPercent;//[Offset: 0x4, Size: 1]
	bool bCheckDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte Downed;//[Offset: 0x9, Size: 1]
	bool bCheckDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	byte Dead;//[Offset: 0xb, Size: 1]
	bool bCheckCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	byte Crouched;//[Offset: 0xd, Size: 1]
	bool bCheckFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	byte Falling;//[Offset: 0xf, Size: 1]
	bool bCheckSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte Sprinting;//[Offset: 0x11, Size: 1]
	bool bCheckSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	byte Swimming;//[Offset: 0x13, Size: 1]
	bool bCheckRidingZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	byte RidingZipline;//[Offset: 0x15, Size: 1]
	bool bCheckIsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	byte IsBot;//[Offset: 0x17, Size: 1]
	bool bCheckBehaviorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte BehaviorOperation;//[Offset: 0x19, Size: 1]
	enum BehaviorState;//[Offset: 0x1a, Size: 1]
	bool bCheckInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	byte Interacting;//[Offset: 0x1c, Size: 1]
	bool bCheckInteractableClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor* InteractableClass;//[Offset: 0x20, Size: 1]
	float MinInteractTimeRemaining;//[Offset: 0x48, Size: 1]
	float MaxInteractTimeRemaining;//[Offset: 0x4c, Size: 1]
	bool bCheckADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	byte ADS;//[Offset: 0x51, Size: 1]
	bool bCheckHasReviver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	byte HasReviver;//[Offset: 0x53, Size: 1]
	bool bCheckReviverAffiliation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	KSAffiliationFilter ReviverAffiliation;//[Offset: 0x55, Size: 1]
	bool bCheckIsOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	byte IsOnFire;//[Offset: 0x5a, Size: 1]
	bool bCheckIsWeaponEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	byte IsWeaponEquipped;//[Offset: 0x5c, Size: 1]
	class KSWeapon* EquippedWeaponClass;//[Offset: 0x60, Size: 1]
	bool bCheckIsWeaponAssetEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	byte IsWeaponAssetEquipped;//[Offset: 0x89, Size: 1]
	KSWeaponAsset* EquippedWeaponAsset;//[Offset: 0x90, Size: 1]
	bool bCheckRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	enum[] RolesToCheck;//[Offset: 0xc0, Size: 1]
	bool bRequireAllRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: KSInteractableStateFilter
	bool bCheckIsInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte IsInteracting;//[Offset: 0x1, Size: 1]
	bool bCheckInteractorAffiliation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	KSAffiliationFilter InteractorAffiliation;//[Offset: 0x3, Size: 1]
	bool bCheckCanInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	byte CanInteract;//[Offset: 0x8, Size: 1]
	bool bCheckInteractableClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	class Actor* InteractableClass;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSDestructibleStateFilter
	bool bCheckIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte Destroyed;//[Offset: 0x1, Size: 1]

--------------------------------
Class: KSItemDropStateFilter
	bool bCheckEquipPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	GameplayTag EquipPoint;//[Offset: 0x4, Size: 1]
	bool bCheckHasBeenSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	byte HasBeenSeen;//[Offset: 0xd, Size: 1]
	bool bCheckIsInActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	byte IsInActiveState;//[Offset: 0xf, Size: 1]

--------------------------------
Class: KSLootSiteFilter
	bool bCheckHasBeenSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte HasBeenSeen;//[Offset: 0x1, Size: 1]

--------------------------------
Class: KSDestroyableHazardStateFilter
	bool bReturnTrueIfNotDestroyableHazard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bCheckCanBotDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	byte CanBotDetect;//[Offset: 0x2, Size: 1]
	bool bCheckShouldDestroyWithGunfire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	byte ShouldDestroyWithGunfire;//[Offset: 0x4, Size: 1]
	bool bCheckShouldDestroyWithEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	byte ShouldDestroyWithEMP;//[Offset: 0x6, Size: 1]

--------------------------------
Class: KSMapPointStateFilter
	bool bCheckMapPointType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	GameplayTagContainer RequiredMapPointTypes;//[Offset: 0x8, Size: 1]
	bool bCheckIsPointActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	byte IsPointActive;//[Offset: 0x29, Size: 1]
	bool bCheckIsPointAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	byte IsPointAvailable;//[Offset: 0x2b, Size: 1]
	bool bCheckIsPointFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	byte IsPointFriendly;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: KSObjectiveStateFilter
	bool bCheckObjectiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MatchesObjectiveState;//[Offset: 0x1, Size: 1]
	FName[] StateNamesToCheck;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAIDifficultyComponent.ActorComponent.Object
	KSBTDifficulty* Difficulty;//[Offset: 0xb0, Size: 1]
	DataTable* DifficultyTable;//[Offset: 0xb8, Size: 1]
	bool AllowDynamicDifficulty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	KSBTDifficultyConfig DifficultySpawnConfig;//[Offset: 0xc8, Size: 1]
	float AccuracyMultiplierStandard;//[Offset: 0x140, Size: 1]
	float AccuracyMultiplierThrownMelee;//[Offset: 0x144, Size: 1]
	float AccuracyMultiplierThrownGrenade;//[Offset: 0x148, Size: 1]
	float AccuracyMultiplierWhenBlinded;//[Offset: 0x14c, Size: 1]
	float AccuracyMultiplierWhenCrosshairHidden;//[Offset: 0x150, Size: 1]
	float NewTargetAccuracyMultiplier;//[Offset: 0x154, Size: 1]
	float NewTargetTime;//[Offset: 0x158, Size: 1]
	float AttackDelayClipPercentMin;//[Offset: 0x15c, Size: 1]
	float AttackDelayClipPercentMax;//[Offset: 0x160, Size: 1]
	float AttackDelay;//[Offset: 0x164, Size: 1]
	float DamageDealtMultiplier;//[Offset: 0x168, Size: 1]
	float HeadshotDamageDealtMultiplier;//[Offset: 0x16c, Size: 1]
	float DamageTakenMultiplier;//[Offset: 0x170, Size: 1]
	float HeadshotDamageTakenMultiplier;//[Offset: 0x174, Size: 1]
	float AimForHeadshotProbability;//[Offset: 0x178, Size: 1]
	float DodgeRollProbability;//[Offset: 0x17c, Size: 1]
	float StrafeProbability;//[Offset: 0x180, Size: 1]
	float ThrowGrenadeProbability;//[Offset: 0x184, Size: 1]
	float ThrowMeleeProbability;//[Offset: 0x188, Size: 1]
	float PerceptionStrengthMin;//[Offset: 0x18c, Size: 1]
	float PerceptionStrengthMax;//[Offset: 0x190, Size: 1]
	float PerceptionStrength;//[Offset: 0x194, Size: 1]
	KSBTAction*[] AllowedActions;//[Offset: 0x198, Size: 1]
	KSBTAction*[] DisallowedActions;//[Offset: 0x1a8, Size: 1]
	float SpeedMultiplier;//[Offset: 0x1b8, Size: 1]
	KSWeapon* LastFiredWeapon;//[Offset: 0x1bc, Size: 1]
	int AttacksSinceLastAttackDelay;//[Offset: 0x1c4, Size: 1]
	int AttacksNeededToTriggerAttackDelay;//[Offset: 0x1c8, Size: 1]
	KSBTDifficulty* GetCurrentDifficulty();// 0x25fa760
	void ChangeDifficulty(KSBTDifficulty* DifficultyIn);// 0x26199b0

--------------------------------
Class: KSChargeRuleComponent.KSGameRuleComponent.ActorComponent.Object
	bool bDefaultChargeOnRoundStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	float ChargePerRound;//[Offset: 0xbc, Size: 1]
	bool bDefaultChargePerSecond;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	float ChargePerSecond;//[Offset: 0xc4, Size: 1]
	float ChargePerDown;//[Offset: 0xc8, Size: 1]
	float ChargePerElimination;//[Offset: 0xcc, Size: 1]
	float ChargePerAssist;//[Offset: 0xd0, Size: 1]
	float ChargePerRevive;//[Offset: 0xd4, Size: 1]
	void OnRoundStarted(out const RoundInitState RoundState);// 0x267c790
	void OnRoundOver(KSGameState* KSGameState, out const RoundResult RoundResult);// 0x267c6b0

--------------------------------
Class: RoundResult
	byte RoundNumber;//[Offset: 0x0, Size: 1]
	KSTeamState* WinningTeam;//[Offset: 0x8, Size: 1]
	int WinnerScore;//[Offset: 0x10, Size: 1]
	bool WinByElimination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	byte LastTriggeredRound;//[Offset: 0x15, Size: 1]
	KSObjectiveBase* ObjectiveChosen;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSBackfillRuleComponent.KSGameRuleComponent.ActorComponent.Object
	float BackfillRequestTimeToLive;//[Offset: 0xe8, Size: 1]
	float BackfillRequestOverlapTime;//[Offset: 0xec, Size: 1]
	float BackfillRequestBatchDelay;//[Offset: 0xf0, Size: 1]
	enum BackfillRankingType;//[Offset: 0x100, Size: 1]
	float MinRankRangeOffset;//[Offset: 0x104, Size: 1]
	float MaxRankRangeOffset;//[Offset: 0x108, Size: 1]
	bool bStartSealed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bDynamicSeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	KSBackfillDynamicSealInfo DynamicSealInfo;//[Offset: 0x110, Size: 1]
	float BackfillPlayerReserveTime;//[Offset: 0x12c, Size: 1]
	float BackfillPartyReserveTime;//[Offset: 0x130, Size: 1]
	void SendBackfillRequest();// 0x26308b0
	void PlayerReserveTimerExpired(int PlayerId);// 0x2630780
	void PartyReserveTimerExpired(int PartyId);// 0x2630700

--------------------------------
Class: KSBackfillDynamicSealInfo
	bool bRoundCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int RoundCount;//[Offset: 0x4, Size: 1]
	bool bLeadCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int LeadCount;//[Offset: 0xc, Size: 1]
	bool bWinsUntilVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int WinsUntilVictory;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSPointsToCashRuleComponent.KSGameRuleComponent.ActorComponent.Object
	float CashPerPoint;//[Offset: 0xb0, Size: 1]
	void OnScoreEvent(KSScoreChangeEvent ScoreEvent);// 0x2766f60

--------------------------------
Class: KSScoreChangeEvent
	int Delta;//[Offset: 0x0, Size: 1]
	FText Reason;//[Offset: 0x8, Size: 1]
	bool bBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	KSPlayerState* Instigator;//[Offset: 0x24, Size: 1]

--------------------------------
Class: AdvancedCombatSummary
	Pawn* DamageInstigatorPawn;//[Offset: 0x0, Size: 1]
	Actor* DamageCauser;//[Offset: 0x8, Size: 1]
	AdvancedCombatEvent[] CombatEvents;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AdvancedCombatEvent
	PlayerState* DamageInstigator;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize DamageInstigatorLocation;//[Offset: 0x8, Size: 1]
	int KSCharacterAimMode;//[Offset: 0x14, Size: 1]
	bool IsAimingDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsAimingOverTheShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsAimingAlternate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsAimingDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0x1c, Size: 1]
	Actor* DamageCauser;//[Offset: 0x24, Size: 1]
	float Damage;//[Offset: 0x2c, Size: 1]
	class DamageType* DamageType;//[Offset: 0x30, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x38, Size: 1]
	int VictimId;//[Offset: 0x40, Size: 1]
	FString Victim;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize VictimLocation;//[Offset: 0x58, Size: 1]
	int VictimTeamNum;//[Offset: 0x64, Size: 1]
	int InstigatorId;//[Offset: 0x68, Size: 1]
	FString Instigator;//[Offset: 0x70, Size: 1]
	enum FriendlyFireType;//[Offset: 0x80, Size: 1]
	float GameTimeStamp;//[Offset: 0x84, Size: 1]
	Vector_NetQuantize HitLocation;//[Offset: 0x88, Size: 1]
	FName HitBone;//[Offset: 0x94, Size: 1]
	bool Headshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool DowningHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	bool FatalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 1]
	bool bResisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f, Size: 1]
	bool bReduced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bShielded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]

--------------------------------
Class: PGame_SonyMatchData
	FString MatchID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PGame_InactivePlayerStateEntry
	PlayerState* PlayerState;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSEventAssistants
	PlayerState*[] Assistants;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSGlobalShotListener.Actor.Object
	MulticastInlineDelegateProperty ShotNotifyDelegate;//[Size: 1]
	void ShotNotify(KSGlobalShotInfo ShotInfo);// 0x26c42a0

--------------------------------
Class: KSGlobalShotInfo
	PlayerState* FiringPlayer;//[Offset: 0x0, Size: 1]
	Vector FiringLocation;//[Offset: 0x8, Size: 1]
	float AudibleRange;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSRewardsCalculator.Object
	void CalcPlayerRewards(int PlayerTeamNum, KSPlayerMatchStats* playerStats, out PlayerRewardsSummary Rewards, KSPlayerController* PlayerController);// 0x2784d40

--------------------------------
Class: KSPlayerMatchStats.Object
	<enum,PlayerMatchStatInfo> StatsByType;//[Offset: 0x28, Size: 1]
	bool GetStat(enum StatType, out PlayerMatchStatInfo OutStat);// 0x2796eb0

--------------------------------
Class: PlayerMatchStatInfo
	enum StatType;//[Offset: 0x0, Size: 1]
	float StatValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PlayerRewardsSummary
	<int64,RewardProgress> ActivityRewards;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RewardProgress
	int InitialQuantity;//[Offset: 0x0, Size: 1]
	int Quantity;//[Offset: 0x4, Size: 1]
	enum[] SourceKeys;//[Offset: 0x8, Size: 1]
	float[] SourceValues;//[Offset: 0x18, Size: 1]
	FString[] EventKeys;//[Offset: 0x28, Size: 1]
	float[] EventValues;//[Offset: 0x38, Size: 1]
	FString[] BoosterKeys;//[Offset: 0x48, Size: 1]
	float[] BoosterValues;//[Offset: 0x58, Size: 1]
	FString[] ExtraDataKeys;//[Offset: 0x68, Size: 1]
	float[] ExtraDataValues;//[Offset: 0x78, Size: 1]
	bool InitialUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: KSRevealManager.Actor.Object
	MulticastInlineDelegateProperty OnServerRevealAdded;//[Size: 1]
	LinearColor FriendlyColor;//[Offset: 0x230, Size: 1]
	LinearColor EnemyColor;//[Offset: 0x240, Size: 1]
	LinearColor NeutralColor;//[Offset: 0x250, Size: 1]
	LinearColor FriendlyObjectiveColor;//[Offset: 0x260, Size: 1]
	LinearColor EnemyObjectiveColor;//[Offset: 0x270, Size: 1]
	LinearColor NeutralObjectiveColor;//[Offset: 0x280, Size: 1]
	KSGameState* GameStateRef;//[Offset: 0x290, Size: 1]
	KSRevealInfoSerializerContainer ActiveRevealInfoContainer;//[Offset: 0x298, Size: 1]
	KSRevealInfo[] LocalActiveRevealInfos;//[Offset: 0x3b8, Size: 1]
	void SetGameStateRef(KSGameState* NewGameState);// 0x2786120
	void ReevaluateRevealedStatusForActor(Actor* ActorToCheck);// 0x2785de0
	void Local_RemoveAllRevealsOfSourceForActor(enum RevealSourcesToRemove, const Actor* ActorToRemove);// 0x2785d20
	void Local_RemoveAllRevealsOfActor(const Actor* ActorToRemove);// 0x2785ca0
	void Local_AddRevealInfo(out const KSRevealInfo NewRevealInfo, float RevealTimeSeconds, float RevealDelaySeconds);// 0x2785b70
	bool HasMatchingRevealInfo(const Actor* RevealedActor, const KSPlayerState* Revealer, enum RevealSource);// 0x27859d0
	void HandOffReveals(KSPlayerState* OriginalRevealer, KSPlayerState* NewRevealer);// 0x2785820
	KSGameState* GetGameStateRef();// 0x27854e0
	KSPlayerState*[] GetAllRevealersForRevealedActor(Actor* RevealedActor, bool bIncludeSelfOnlyReveals);// 0x27853d0
	void DetermineRevealParameters(const Actor* RevealTargetToCheck, const KSPlayerState* PlayerStateToCheck, out bool bRevealTargetToPlayer, out LinearColor OutRevealColor, out bool bShowPlayerRevealedUI, out bool bShowEnemyDetectedUI);// 0x2785100
	void Authority_RequestReevaluateRevealedStatusForAllActorsOnAllClients();// 0x2784c80
	void Authority_RequestReevaluateRevealedStatusForActorOnAllClients(Actor* ActorToCheck);// 0x2784c00
	void Authority_RemoveRevealInfo(out const KSRevealInfo RevealInfoToRemove);// 0x2784b60
	void Authority_RemoveAllRevealsOfSourceForPlayer(enum RevealSourcesToRemove, const KSPlayerState* PlayerStateToRemove);// 0x2784aa0
	void Authority_RemoveAllRevealsOfActorForInstigator(const Actor* ActorToRemove, const Object* OwningInstigator);// 0x27849e0
	void Authority_RemoveAllRevealsOfActorAtPriority(const Actor* ActorToRemove, enum MaxRemovePriority);// 0x2784920
	void Authority_RemoveAllRevealsOfActor(const Actor* ActorToRemove);// 0x27848a0
	void Authority_RemoveAllRevealsForPlayerById(out const KSPersistentPlayerId PlayerId);// 0x2784800
	void Authority_RemoveAllRevealsForPlayer(const KSPlayerState* PlayerStateToRemove);// 0x2784780
	void Authority_RemoveAllRevealsForInstigator(const Object* OwningInstigator);// 0x2784700
	void Authority_AddRevealInfo(out const KSRevealInfo NewRevealInfo, float RevealTimeSeconds, float RevealDelaySeconds);// 0x27845d0

--------------------------------
Class: KSRevealInfo
	int RevealID;//[Offset: 0x0, Size: 1]
	KSPlayerState* Revealer;//[Offset: 0x4, Size: 1]
	Actor* RevealTarget;//[Offset: 0xc, Size: 1]
	Object* RevealInstigator;//[Offset: 0x14, Size: 1]
	class Object* RevealClass;//[Offset: 0x20, Size: 1]
	enum TargetAudience;//[Offset: 0x28, Size: 1]
	enum RevealSource;//[Offset: 0x29, Size: 1]
	enum RevealPriority;//[Offset: 0x2a, Size: 1]
	bool bUseRevealOverrideColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	LinearColor RevealOverrideColor;//[Offset: 0x2c, Size: 1]
	bool bFilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bOutlineTargetOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bNotifyTargetRevealed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool bDisplayEnemyDetectedUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	bool bForcedDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: KSRevealInfoSerializerContainer.FastArraySerializer
	KSRevealInfoSerializerItem[] RevealInfoSerializerItems;//[Offset: 0x108, Size: 1]

--------------------------------
Class: KSRevealInfoSerializerItem.FastArraySerializerItem
	KSRevealInfo RevealInfo;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSMVPDeterminant.DataAsset.Object
	GameplayTag[] TopStats;//[Offset: 0x30, Size: 1]
	<GameplayTag,float> StatToWeightMap;//[Offset: 0x40, Size: 1]
	GameplayTag[] GetSortedTopStatsForPersistentPlayerData(KSPersistentPlayerData* PersistentPlayerData);// 0x27124e0
	KSPersistentPlayerData*[] GetOrderedPersistentPlayerDatasForMVPPoints(KSPersistentPlayerData*[] UnorderedPersistentPlayerDatas);// 0x2712350
	int ComputeMVPScoreForPlayerState(const KSPlayerState* PlayerState);// 0x2711cf0
	bool ComputeMVPPointsForPersistentPlayerData(KSPersistentPlayerData* PersistentPlayerData, out int OutMVPPoints);// 0x2711c20

--------------------------------
Class: KSGameHUDSettings
	bool ShouldShowEnemyCaptureProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class UserWidget* GameModeWidget;//[Offset: 0x8, Size: 1]
	bool ShowRoundEndResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x248, Size: 1]

--------------------------------
Class: KSSpawnSelectorComponent.ActorComponent.Object
	KSSpawnSelectorTreeNode BaseRoot;//[Offset: 0xb0, Size: 1]
	KSSpawnSelectorTreeNode SideRoot;//[Offset: 0xd8, Size: 1]
	KSSpawnSelectorTreeNode FlipRoot;//[Offset: 0x100, Size: 1]
	KSSpawnSelectorTreeNode GameRoot;//[Offset: 0x128, Size: 1]
	PlayerStart*[] PlayerStarts;//[Offset: 0x150, Size: 1]
	FName FriendlyName;//[Offset: 0x160, Size: 1]
	bool bCanEverFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	float InvalidFlipPercent;//[Offset: 0x17c, Size: 1]
	bool bFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	void RemovePlayerStart(PlayerStart* NewPlayerStart);// 0x2792a00
	void OnRoundOver(KSGameState* KSGameState, out const RoundResult RoundResult);// 0x2792920
	void InitSideRoot(out KSSpawnSelectorTreeNode InSideRoot);// 0x2cbecb0
	void InitGameRoot(out KSSpawnSelectorTreeNode InGameRoot);// 0x2cbecb0
	void InitFlipRoot(out KSSpawnSelectorTreeNode InFlipRoot);// 0x2cbecb0
	void InitBaseRoot(out KSSpawnSelectorTreeNode InBaseRoot);// 0x2cbecb0
	FName[] GetSelectorComponentFriendlyNameHierarchy();// 0x2792350
	PlayerStart*[] GetPlayerStarts();// 0x2792020
	FName GetFriendlyName();// 0x2791fd0
	bool AreSidesFlipped();// 0x2791c80
	void AddPlayerStart(PlayerStart* NewPlayerStart);// 0x2791c00

--------------------------------
Class: KSSpawnSelectorTreeNode
	KSSpawnSelectorTier SelectorTier;//[Offset: 0x0, Size: 1]
	KSSpawnSelectorTierBranch* SelectorTierBranch;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSSpawnSelectorTier
	FName Name;//[Offset: 0x0, Size: 1]
	float Tolerance;//[Offset: 0x8, Size: 1]
	float MinScore;//[Offset: 0xc, Size: 1]
	KSSpawnSelectorTierRule[] SpawnSelectorTierRules;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSSpawnSelectorTierRule
	KSSpawnRule* SpawnRule;//[Offset: 0x0, Size: 1]
	float Multiplier;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSpawnRule.Object
	FName RuleName;//[Offset: 0x28, Size: 1]
	FName[] OverridePropertyNames;//[Offset: 0x30, Size: 1]
	void Initialize();// 0x26fff70
	bool GetWorldSettingsPropertyInt(out const FName PropertyName, out int OutInt);// 0x27926f0
	bool GetWorldSettingsPropertyFloat(out const FName PropertyName, out float OutFloat);// 0x2792600
	bool GetWorldSettingsPropertyBool(out const FName PropertyName, out bool OutBool);// 0x2792510
	float GetScoreForSpawn(const Controller* Controller, const PlayerStart* PlayerStart);// 0x2792280
	FName GetRuleName();// 0x2792160
	KSSpawnSelectorComponent* GetOuterSpawnSelectorComponent();// 0x2791ff0

--------------------------------
Class: KSSpawnSelectorTierBranch.KSSpawnRule.Object
	KSSpawnSelectorTreeNode DefaultBranch;//[Offset: 0x40, Size: 1]
	bool bDoesHandleFailure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	KSSpawnSelectorTreeNode FailureBranch;//[Offset: 0x70, Size: 1]
	KSSpawnSelectorTreeNode SelectSpawnSelectorTreeNode(const Controller* Controller, out const PlayerStart*[] SpawnPoints);// 0x2792a80
	void GetBranches(out KSSpawnSelectorTreeNode[] OutBranches);// 0x2791e20

--------------------------------
Class: KSLootGroupGuaranteeMap
	int TotalLootSitesActive;//[Offset: 0x0, Size: 1]
	<byte,KSLootGroupGuarantee> GuaranteeMap;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSLootGroupGuarantee
	int Quantity;//[Offset: 0x0, Size: 1]
	int[] ObjectiveLootGroups;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSLootRaritySwapInfo
	float Chance;//[Offset: 0x0, Size: 1]
	int Amount;//[Offset: 0x4, Size: 1]
	enum OldRarity;//[Offset: 0x8, Size: 1]
	enum NewRarity;//[Offset: 0x9, Size: 1]

--------------------------------
Class: KSAIActorCollection.ActorComponent.Object
	KSDropLocation*[] DropLocations;//[Offset: 0xb0, Size: 1]
	DataTable* BotNameTable;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: KSAccoladeTracker.Object
	AccoladeDisplayInfo AccoladeDisplayInfo;//[Offset: 0x38, Size: 1]
	void StartTracking();// 0x2601810
	void ResetTracker();// 0xe6f840
	void NativeHandleElimEvent(CombatEventInfo ElimEvent);// 0x2601590
	void NativeHandleDownEvent(CombatEventInfo DownEvent);// 0x2601450
	void HandleElimEvent(CombatEventInfo ElimEvent);// 0x26006f0
	void HandleDownEvent(CombatEventInfo DownEvent);// 0x26005b0
	AccoladeDisplayInfo GetPrimaryAccoladeDisplayInfo();// 0x26001e0
	bool GetOwningGameMode(out KSGameMode* OutGameMode);// 0x2600110
	void DispatchGameStateAccoladeDisplay(KSPlayerState* RelevantPlayer, AccoladeDisplayInfo AccoladeToDisplay, bool IgnoreRelevantPlayerId);// 0x25ff7e0

--------------------------------
Class: AccoladeDisplayInfo
	enum Category;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x1, Size: 1]
	Texture2D* DisplayIcon;//[Offset: 0x8, Size: 1]
	FText DisplayTitle;//[Offset: 0x10, Size: 1]
	float DisplayDuration;//[Offset: 0x28, Size: 1]
	int Multiplier;//[Offset: 0x2c, Size: 1]
	KSVoicelineEvent AccoladeVoiceLine;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSVoicelineEvent
	FName EventName;//[Offset: 0x0, Size: 1]
	FName SelfEventName;//[Offset: 0x8, Size: 1]
	enum Audience;//[Offset: 0x10, Size: 1]
	enum VoicelineType;//[Offset: 0x11, Size: 1]
	float ActivationChance;//[Offset: 0x14, Size: 1]
	bool bAffectedByGlobalCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int CooldownGroup;//[Offset: 0x1c, Size: 1]
	float CooldownDuration;//[Offset: 0x20, Size: 1]
	float VoicelineChangeValue;//[Offset: 0x24, Size: 1]
	enum LinePriority;//[Offset: 0x28, Size: 1]
	bool bPlayedByOwnerAlready;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bPlaySpecificVoiceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	AkAudioEvent* SpecificAkAudioEvent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSOutOfBoundsManager.ActorComponent.Object
	float OutOfBoundsWarningTime;//[Offset: 0xc4, Size: 1]
	float OutOfBoundsTickDamageTime;//[Offset: 0xc8, Size: 1]
	float OutOfBoundsTickDamage;//[Offset: 0xcc, Size: 1]
	float TimeSpentGroundedAllowedBeforeSave;//[Offset: 0xd0, Size: 1]
	class DamageType* OutOfBoundsDamageType;//[Offset: 0xd8, Size: 1]
	bool bAllowSaving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	AkAudioEvent* AnnouncerLineOnSaved;//[Offset: 0xe8, Size: 1]
	AkAudioEvent* AnnouncerLineOnEntered;//[Offset: 0xf0, Size: 1]
	int CharacterOverlaps;//[Offset: 0xf8, Size: 1]
	TimerHandle CharacterWarningTimer;//[Offset: 0x100, Size: 1]
	TimerHandle CharacterDamageTickTimer;//[Offset: 0x108, Size: 1]
	int VehicleOverlaps;//[Offset: 0x110, Size: 1]
	TimerHandle VehicleWarningTimer;//[Offset: 0x118, Size: 1]
	TimerHandle VehicleDamageTickTimer;//[Offset: 0x120, Size: 1]
	PrimitiveComponent* OverlapCheckComponent;//[Offset: 0x128, Size: 1]
	TimerHandle TimeSpentGroundedTimerHandle;//[Offset: 0x130, Size: 1]
	float DefaultRecoveryUseTime;//[Offset: 0x138, Size: 1]
	void TickDamage();// 0x2717d30
	void OnOutOfBoundsWarningExpired();// 0x2717a10
	void OnCharacterOutOfWorld(KSCharacter* Character);// 0x2717970
	void OnActorOverlapZoneEnd(Actor* OverlappedActor, Actor* OtherActor);// 0x27178a0
	void OnActorOverlapZoneBegin(Actor* OverlappedActor, Actor* OtherActor);// 0x2717700
	void OnActorOverlapVolumeEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x27174f0
	void OnActorOverlapVolumeBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x27171c0
	void ExpireTimeSpentGroundedTimer();// 0x2716b30

--------------------------------
Class: KSMatchDataRecorder.Object
	MatchRecord MatchRecord;//[Offset: 0x28, Size: 1]
	<uint64,WeaponUseSummaryRecord> InProgressWeaponSummaries;//[Offset: 0x288, Size: 1]
	void SendGeneralEvents();// 0x26f8d40
	void PushJsonMatchData();// 0xd76f80
	void OnPlayerLogout(GameModeBase* GameMode, Controller* Player);// 0x26f8c00
	void OnPlayerLogin(GameModeBase* GameMode, PlayerController* NewPlayer);// 0x26f8b40

--------------------------------
Class: MatchRecord
	int version_major;//[Offset: 0x0, Size: 1]
	int version_minor;//[Offset: 0x4, Size: 1]
	SerializedInstanceId instance_id;//[Offset: 0x8, Size: 1]
	int instance_site_id;//[Offset: 0x18, Size: 1]
	SerializedMatchId match_id;//[Offset: 0x20, Size: 1]
	FString map_name;//[Offset: 0x30, Size: 1]
	FString mode_name;//[Offset: 0x40, Size: 1]
	int map_game_id;//[Offset: 0x50, Size: 1]
	int queue_id;//[Offset: 0x54, Size: 1]
	int team_size;//[Offset: 0x58, Size: 1]
	int winning_team;//[Offset: 0x5c, Size: 1]
	FString match_start_time;//[Offset: 0x60, Size: 1]
	FString match_end_time;//[Offset: 0x70, Size: 1]
	int match_fubar_state;//[Offset: 0x80, Size: 1]
	int Duration;//[Offset: 0x84, Size: 1]
	int total_rounds;//[Offset: 0x88, Size: 1]
	int total_players;//[Offset: 0x8c, Size: 1]
	int total_bots;//[Offset: 0x90, Size: 1]
	int total_human_backfills;//[Offset: 0x94, Size: 1]
	int total_bot_backfills;//[Offset: 0x98, Size: 1]
	int total_earned;//[Offset: 0x9c, Size: 1]
	int total_spent;//[Offset: 0xa0, Size: 1]
	int total_refunded;//[Offset: 0xa4, Size: 1]
	int total_on_time;//[Offset: 0xa8, Size: 1]
	int total_deserters;//[Offset: 0xac, Size: 1]
	int total_deserter_rounds;//[Offset: 0xb0, Size: 1]
	int total_surrender_polls;//[Offset: 0xb4, Size: 1]
	bool ended_in_surrender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int total_penalized_players;//[Offset: 0xbc, Size: 1]
	MinimapData Minimap;//[Offset: 0xc0, Size: 1]
	PlayerRecord[] Players;//[Offset: 0xe0, Size: 1]
	JobSelectionRecord[] job_selection_records;//[Offset: 0xf0, Size: 1]
	JobBanRecord[] job_ban_records;//[Offset: 0x100, Size: 1]
	ClientContextRecord[] client_context_records;//[Offset: 0x110, Size: 1]
	<int,ObjectDictionaryRecord> object_dictionary_records;//[Offset: 0x120, Size: 1]
	RoundEventRecord[] rounds;//[Offset: 0x170, Size: 1]
	PlayerConnectionEventRecord[] player_connections;//[Offset: 0x180, Size: 1]
	BotBackfillEventRecord[] bot_backfill;//[Offset: 0x190, Size: 1]
	HumanBackfillEventRecord[] human_backfill;//[Offset: 0x1a0, Size: 1]
	ObjectiveCaptureEventRecord[] objective_capture_events;//[Offset: 0x1b0, Size: 1]

--------------------------------
Class: SerializedInstanceId

--------------------------------
Class: MinimapData
	LocationRecord northwest_corner;//[Offset: 0x0, Size: 1]
	float Width;//[Offset: 0xc, Size: 1]
	ObjectiveRecord[] objectives;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocationRecord
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ObjectiveRecord
	int Type;//[Offset: 0x0, Size: 1]
	LocationRecord Location;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PlayerRecord.PlayerStatisticsBase
	FString login_session_uuid;//[Offset: 0xb0, Size: 1]
	FString installation_uuid;//[Offset: 0xc0, Size: 1]
	int ue_player_id;//[Offset: 0xd0, Size: 1]
	int hz_player_id;//[Offset: 0xd4, Size: 1]
	FString player_name;//[Offset: 0xd8, Size: 1]
	int team_id;//[Offset: 0xe8, Size: 1]
	int class_id;//[Offset: 0xec, Size: 1]
	int player_type;//[Offset: 0xf0, Size: 1]
	int portal_id;//[Offset: 0xf4, Size: 1]
	int input_type;//[Offset: 0xf8, Size: 1]
	int platform_type;//[Offset: 0xfc, Size: 1]
	int ranking_id;//[Offset: 0x100, Size: 1]
	float ranking;//[Offset: 0x104, Size: 1]
	float ranking_variance;//[Offset: 0x108, Size: 1]
	int task_force_id;//[Offset: 0x10c, Size: 1]
	Guid group_id;//[Offset: 0x110, Size: 1]
	int party_id;//[Offset: 0x120, Size: 1]
	int party_size;//[Offset: 0x124, Size: 1]
	int backfill_round;//[Offset: 0x128, Size: 1]
	FString backfill_time;//[Offset: 0x130, Size: 1]
	int skin_id;//[Offset: 0x140, Size: 1]
	int account_level;//[Offset: 0x144, Size: 1]
	int ranked_level;//[Offset: 0x148, Size: 1]
	int class_level;//[Offset: 0x14c, Size: 1]
	float time_played;//[Offset: 0x150, Size: 1]
	float time_alive;//[Offset: 0x154, Size: 1]
	int eliminations;//[Offset: 0x158, Size: 1]
	int total_earned;//[Offset: 0x15c, Size: 1]
	int total_spent;//[Offset: 0x160, Size: 1]
	int total_refunded;//[Offset: 0x164, Size: 1]
	int on_time;//[Offset: 0x168, Size: 1]
	int connect_count;//[Offset: 0x16c, Size: 1]
	int disconnect_round;//[Offset: 0x170, Size: 1]
	int deserter_rounds;//[Offset: 0x174, Size: 1]
	int penalties;//[Offset: 0x178, Size: 1]
	int afk_kicked;//[Offset: 0x17c, Size: 1]
	int client_selected_site_id;//[Offset: 0x180, Size: 1]
	int client_selected_queue_id;//[Offset: 0x184, Size: 1]
	FString client_current_language;//[Offset: 0x188, Size: 1]

--------------------------------
Class: PlayerStatisticsBase
	int starting_cash;//[Offset: 0x0, Size: 1]
	int spent_cash;//[Offset: 0x4, Size: 1]
	int executes;//[Offset: 0x8, Size: 1]
	int Assists;//[Offset: 0xc, Size: 1]
	int downs;//[Offset: 0x10, Size: 1]
	int Revives;//[Offset: 0x14, Size: 1]
	int Downed;//[Offset: 0x18, Size: 1]
	int deaths;//[Offset: 0x1c, Size: 1]
	int ability_uses;//[Offset: 0x20, Size: 1]
	int gadget_uses;//[Offset: 0x24, Size: 1]
	int kills_single;//[Offset: 0x28, Size: 1]
	int kills_double;//[Offset: 0x2c, Size: 1]
	int kills_triple;//[Offset: 0x30, Size: 1]
	int kills_quadra;//[Offset: 0x34, Size: 1]
	int kills_penta;//[Offset: 0x38, Size: 1]
	int accumulated_damage;//[Offset: 0x3c, Size: 1]
	int accumulated_self_damage;//[Offset: 0x40, Size: 1]
	int accumulated_friendly_damage;//[Offset: 0x44, Size: 1]
	int accumulated_reverse_friendly_damage;//[Offset: 0x48, Size: 1]
	float average_shots_hit_distance;//[Offset: 0x4c, Size: 1]
	float average_head_shots_distance;//[Offset: 0x50, Size: 1]
	float average_non_head_shots_distance;//[Offset: 0x54, Size: 1]
	int bad_distances;//[Offset: 0x58, Size: 1]
	int missing_instigators;//[Offset: 0x5c, Size: 1]
	int shots_fired;//[Offset: 0x60, Size: 1]
	int shots_fired_sniper;//[Offset: 0x64, Size: 1]
	int shots_fired_shotgun;//[Offset: 0x68, Size: 1]
	int shots_hit;//[Offset: 0x6c, Size: 1]
	int head_shots;//[Offset: 0x70, Size: 1]
	int non_head_shots;//[Offset: 0x74, Size: 1]
	int shots_hit_aiming_down_sights;//[Offset: 0x78, Size: 1]
	int shots_hit_aiming_over_the_shoulder;//[Offset: 0x7c, Size: 1]
	int shots_hit_aiming_alternate;//[Offset: 0x80, Size: 1]
	int shots_hit_aiming_default;//[Offset: 0x84, Size: 1]
	int shots_hit_primary_slot_weapon;//[Offset: 0x88, Size: 1]
	int shots_hit_sniper_weapon;//[Offset: 0x8c, Size: 1]
	int shots_hit_shotgun_weapon;//[Offset: 0x90, Size: 1]
	int shots_hit_secondary_slot_weapon;//[Offset: 0x94, Size: 1]
	int shots_hit_melee_slot_weapon;//[Offset: 0x98, Size: 1]
	int shots_hit_other;//[Offset: 0x9c, Size: 1]
	int self_downs;//[Offset: 0xa0, Size: 1]
	int self_executes;//[Offset: 0xa4, Size: 1]
	int own_team_downs;//[Offset: 0xa8, Size: 1]
	int own_team_executes;//[Offset: 0xac, Size: 1]

--------------------------------
Class: JobSelectionRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	int class_id;//[Offset: 0xc, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]
	int skin_id;//[Offset: 0x20, Size: 1]
	int wingsuit_id;//[Offset: 0x24, Size: 1]
	int primary_weapon_1_wrap_id;//[Offset: 0x28, Size: 1]
	int primary_weapon_2_wrap_id;//[Offset: 0x2c, Size: 1]
	int secondary_weapon_wrap_id;//[Offset: 0x30, Size: 1]
	int melee_weapon_wrap_id;//[Offset: 0x34, Size: 1]
	int[] emotes_and_sprays;//[Offset: 0x38, Size: 1]
	int[] quips;//[Offset: 0x48, Size: 1]
	int[] communications;//[Offset: 0x58, Size: 1]

--------------------------------
Class: JobBanRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	int class_id;//[Offset: 0xc, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ClientContextRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	FString login_session_uuid;//[Offset: 0x8, Size: 1]
	FString installation_uuid;//[Offset: 0x18, Size: 1]
	FString build_version;//[Offset: 0x28, Size: 1]
	FString client_current_language;//[Offset: 0x38, Size: 1]
	int client_selected_site_id;//[Offset: 0x48, Size: 1]
	int divert_from_queue_id;//[Offset: 0x4c, Size: 1]
	int divert_to_queue_id;//[Offset: 0x50, Size: 1]
	enum queue_divert_type;//[Offset: 0x54, Size: 1]
	float sheltered_mm_attempt_timeout;//[Offset: 0x58, Size: 1]
	float sheltered_mm_level_limit;//[Offset: 0x5c, Size: 1]
	int forced_bot_match_limit;//[Offset: 0x60, Size: 1]
	int mercy_match_losses_required;//[Offset: 0x64, Size: 1]
	FString device_model;//[Offset: 0x68, Size: 1]
	int available_ram_megabytes;//[Offset: 0x78, Size: 1]
	int total_ram_megabytes;//[Offset: 0x7c, Size: 1]
	FString cpu_type;//[Offset: 0x80, Size: 1]
	int cpu_cores;//[Offset: 0x90, Size: 1]
	FString gpu_type;//[Offset: 0x98, Size: 1]
	int screen_resolution;//[Offset: 0xa8, Size: 1]
	int viewport_size_x;//[Offset: 0xac, Size: 1]
	int viewport_size_y;//[Offset: 0xb0, Size: 1]
	float resolution_quality;//[Offset: 0xb4, Size: 1]
	float cpu_benchmark_results;//[Offset: 0xb8, Size: 1]
	float gpu_benchmark_results;//[Offset: 0xbc, Size: 1]
	int global_quality;//[Offset: 0xc0, Size: 1]
	int view_distance_quality;//[Offset: 0xc4, Size: 1]
	int antialiasing_quality;//[Offset: 0xc8, Size: 1]
	int shadow_quality;//[Offset: 0xcc, Size: 1]
	int postprocess_quality;//[Offset: 0xd0, Size: 1]
	int texture_quality;//[Offset: 0xd4, Size: 1]
	int effects_quality;//[Offset: 0xd8, Size: 1]
	int foliage_quality;//[Offset: 0xdc, Size: 1]
	int shading_quality;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: ObjectDictionaryRecord
	int weapon_id;//[Offset: 0x0, Size: 1]
	FString weapon_name;//[Offset: 0x8, Size: 1]
	FString item_type_name;//[Offset: 0x18, Size: 1]
	int weapon_category_type_value;//[Offset: 0x28, Size: 1]
	enum weapon_category_type_name;//[Offset: 0x2c, Size: 1]
	int weapon_slot_type_value;//[Offset: 0x30, Size: 1]
	enum weapon_slot_type_name;//[Offset: 0x34, Size: 1]
	bool is_accuracy_weapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float base_accuracy;//[Offset: 0x38, Size: 1]
	float max_aimed_accuracy;//[Offset: 0x3c, Size: 1]
	float max_hip_fire_accuracy;//[Offset: 0x40, Size: 1]
	int fire_mode_type_value;//[Offset: 0x44, Size: 1]
	enum fire_mode_type_name;//[Offset: 0x48, Size: 1]
	int reload_type_value;//[Offset: 0x4c, Size: 1]
	enum reload_type_name;//[Offset: 0x50, Size: 1]
	int rounds_per_burst;//[Offset: 0x54, Size: 1]

--------------------------------
Class: RoundEventRecord
	int round_id;//[Offset: 0x0, Size: 1]
	FString round_start_time;//[Offset: 0x8, Size: 1]
	int Duration;//[Offset: 0x18, Size: 1]
	TeamSideRecord[] team_sides;//[Offset: 0x20, Size: 1]
	int winning_team;//[Offset: 0x30, Size: 1]
	FString win_condition;//[Offset: 0x38, Size: 1]
	MirrorMatchupRecord[] mirror_matchup_records;//[Offset: 0x48, Size: 1]
	PlayerStartingCashRecord[] round_starting_cash;//[Offset: 0x58, Size: 1]
	PurchasedItemEventRecord[] purchased_item_events;//[Offset: 0x68, Size: 1]
	PurchasedItemEventRecord[] refunded_item_events;//[Offset: 0x78, Size: 1]
	CashCollectionEventRecord[] cash_collection_events;//[Offset: 0x88, Size: 1]
	DownEventRecord[] down_events;//[Offset: 0x98, Size: 1]
	ExecuteEventRecord[] execute_events;//[Offset: 0xa8, Size: 1]
	AssistEventRecord[] assist_events;//[Offset: 0xb8, Size: 1]
	ReviveEventRecord[] revive_events;//[Offset: 0xc8, Size: 1]
	WeaponUseSummaryRecord[] weapon_use_summaries;//[Offset: 0xd8, Size: 1]
	AbilityUseEventRecord[] ability_use_events;//[Offset: 0xe8, Size: 1]
	RadialMenuItemUseEventRecord[] radial_menu_item_use_events;//[Offset: 0xf8, Size: 1]
	CommunicationUseEventRecord[] communication_use_events;//[Offset: 0x108, Size: 1]
	GadgetUseEventRecord[] gadget_use_events;//[Offset: 0x118, Size: 1]
	EliminationStreakEventRecord[] elimination_streak_events;//[Offset: 0x128, Size: 1]
	MultipleKillEventRecord[] multiple_kill_events;//[Offset: 0x138, Size: 1]
	BotStartingDifficultyRecord[] round_starting_bot_difficulties;//[Offset: 0x148, Size: 1]
	BotDifficultyChangeEventRecord[] bot_difficulty_change_events;//[Offset: 0x158, Size: 1]
	OrientationEventRecord[] orientation_events;//[Offset: 0x168, Size: 1]
	PollEndEventRecord[] poll_end_events;//[Offset: 0x178, Size: 1]
	RoundClientInputTypeUse[] client_input_use;//[Offset: 0x188, Size: 1]
	<uint64,RoundPlayerSummary> round_player_summary;//[Offset: 0x198, Size: 1]
	RoundSummary round_summary;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: TeamSideRecord
	int team_id;//[Offset: 0x0, Size: 1]
	int side_id;//[Offset: 0x4, Size: 1]
	int team_role;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MirrorMatchupRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int team_id;//[Offset: 0x8, Size: 1]
	int class_id;//[Offset: 0xc, Size: 1]
	int has_mirror_match;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PlayerStartingCashRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int cash;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PurchasedItemEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int item_id;//[Offset: 0x8, Size: 1]
	int cost;//[Offset: 0xc, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CashCollectionEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord Location;//[Offset: 0x8, Size: 1]
	FString Timestamp;//[Offset: 0x18, Size: 1]
	int Amount;//[Offset: 0x28, Size: 1]

--------------------------------
Class: DownEventRecord
	int instigator_ue_player_id;//[Offset: 0x0, Size: 1]
	int instigator_hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord instigator_location;//[Offset: 0x8, Size: 1]
	int victim_ue_player_id;//[Offset: 0x14, Size: 1]
	int victim_hz_player_id;//[Offset: 0x18, Size: 1]
	LocationRecord victim_location;//[Offset: 0x1c, Size: 1]
	int weapon_id;//[Offset: 0x28, Size: 1]
	FString weapon_name;//[Offset: 0x30, Size: 1]
	float Distance;//[Offset: 0x40, Size: 1]
	bool self_or_own_team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	FString Timestamp;//[Offset: 0x48, Size: 1]

--------------------------------
Class: ExecuteEventRecord
	int instigator_ue_player_id;//[Offset: 0x0, Size: 1]
	int instigator_hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord instigator_location;//[Offset: 0x8, Size: 1]
	int victim_ue_player_id;//[Offset: 0x14, Size: 1]
	int victim_hz_player_id;//[Offset: 0x18, Size: 1]
	LocationRecord victim_location;//[Offset: 0x1c, Size: 1]
	int weapon_id;//[Offset: 0x28, Size: 1]
	FString weapon_name;//[Offset: 0x30, Size: 1]
	float Distance;//[Offset: 0x40, Size: 1]
	bool self_or_own_team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	FString Timestamp;//[Offset: 0x48, Size: 1]

--------------------------------
Class: AssistEventRecord
	int assistor_ue_player_id;//[Offset: 0x0, Size: 1]
	int assistor_hz_player_id;//[Offset: 0x4, Size: 1]
	int victim_ue_player_id;//[Offset: 0x8, Size: 1]
	int victim_hz_player_id;//[Offset: 0xc, Size: 1]
	LocationRecord victim_location;//[Offset: 0x10, Size: 1]
	FString Timestamp;//[Offset: 0x20, Size: 1]

--------------------------------
Class: ReviveEventRecord
	int reviver_ue_player_id;//[Offset: 0x0, Size: 1]
	int reviver_hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord reviver_location;//[Offset: 0x8, Size: 1]
	int revivee_ue_player_id;//[Offset: 0x14, Size: 1]
	int revivee_hz_player_id;//[Offset: 0x18, Size: 1]
	LocationRecord revivee_location;//[Offset: 0x1c, Size: 1]
	FString Timestamp;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WeaponUseSummaryRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int weapon_id;//[Offset: 0x8, Size: 1]
	FString weapon_name;//[Offset: 0x10, Size: 1]
	FString item_type_name;//[Offset: 0x20, Size: 1]
	int weapon_category_type_value;//[Offset: 0x30, Size: 1]
	enum weapon_category_type_name;//[Offset: 0x34, Size: 1]
	int weapon_slot_type_value;//[Offset: 0x38, Size: 1]
	enum weapon_slot_type_name;//[Offset: 0x3c, Size: 1]
	bool is_accuracy_weapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	int shots_fired;//[Offset: 0x40, Size: 1]
	int shots_hit;//[Offset: 0x44, Size: 1]
	int head_shots;//[Offset: 0x48, Size: 1]
	int non_head_shots;//[Offset: 0x4c, Size: 1]
	float average_shots_hit_distance;//[Offset: 0x50, Size: 1]
	float average_head_shots_distance;//[Offset: 0x54, Size: 1]
	float average_non_head_shots_distance;//[Offset: 0x58, Size: 1]
	int bad_distances;//[Offset: 0x5c, Size: 1]
	int missing_instigators;//[Offset: 0x60, Size: 1]
	int[] character_aim_modes;//[Offset: 0x68, Size: 1]
	int shots_hit_aiming_down_sights;//[Offset: 0x78, Size: 1]
	int shots_hit_aiming_over_the_shoulder;//[Offset: 0x7c, Size: 1]
	int shots_hit_aiming_alternate;//[Offset: 0x80, Size: 1]
	int shots_hit_aiming_default;//[Offset: 0x84, Size: 1]
	int accumulated_damage;//[Offset: 0x88, Size: 1]
	int accumulated_self_damage;//[Offset: 0x8c, Size: 1]
	int accumulated_friendly_damage;//[Offset: 0x90, Size: 1]
	int accumulated_reverse_friendly_damage;//[Offset: 0x94, Size: 1]
	float AccumulatingDamage;//[Offset: 0x98, Size: 1]
	float AccumulatingSelfDamage;//[Offset: 0x9c, Size: 1]
	float AccumulatingFriendlyDamage;//[Offset: 0xa0, Size: 1]
	float AccumulatingReverseFriendlyDamage;//[Offset: 0xa4, Size: 1]

--------------------------------
Class: AbilityUseEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord Location;//[Offset: 0x8, Size: 1]
	int ability_id;//[Offset: 0x14, Size: 1]
	FString Timestamp;//[Offset: 0x18, Size: 1]
	int accumulated_damage;//[Offset: 0x28, Size: 1]
	int accumulated_self_damage;//[Offset: 0x2c, Size: 1]
	int accumulated_friendly_damage;//[Offset: 0x30, Size: 1]
	int accumulated_reverse_friendly_damage;//[Offset: 0x34, Size: 1]
	float AccumulatingDamage;//[Offset: 0x38, Size: 1]
	float AccumulatingSelfDamage;//[Offset: 0x3c, Size: 1]
	float AccumulatingFriendlyDamage;//[Offset: 0x40, Size: 1]
	float AccumulatingReverseFriendlyDamage;//[Offset: 0x44, Size: 1]
	float FireGameTime;//[Offset: 0x48, Size: 1]

--------------------------------
Class: RadialMenuItemUseEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	FString cosmetic_type;//[Offset: 0x10, Size: 1]
	int item_id;//[Offset: 0x20, Size: 1]
	FString item_name;//[Offset: 0x28, Size: 1]
	LocationRecord Location;//[Offset: 0x38, Size: 1]
	RotationRecord Rotation;//[Offset: 0x44, Size: 1]
	FString game_phase;//[Offset: 0x50, Size: 1]
	FString Timestamp;//[Offset: 0x60, Size: 1]

--------------------------------
Class: RotationRecord
	float Yaw;//[Offset: 0x0, Size: 1]
	float Pitch;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CommunicationUseEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	FString cosmetic_type;//[Offset: 0x10, Size: 1]
	int item_id;//[Offset: 0x20, Size: 1]
	FString item_name;//[Offset: 0x28, Size: 1]
	LocationRecord Location;//[Offset: 0x38, Size: 1]
	RotationRecord Rotation;//[Offset: 0x44, Size: 1]
	FString game_phase;//[Offset: 0x50, Size: 1]
	FString Timestamp;//[Offset: 0x60, Size: 1]

--------------------------------
Class: GadgetUseEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord Location;//[Offset: 0x8, Size: 1]
	int gadget_id;//[Offset: 0x14, Size: 1]
	FString Timestamp;//[Offset: 0x18, Size: 1]
	int accumulated_damage;//[Offset: 0x28, Size: 1]
	int accumulated_self_damage;//[Offset: 0x2c, Size: 1]
	int accumulated_friendly_damage;//[Offset: 0x30, Size: 1]
	int accumulated_reverse_friendly_damage;//[Offset: 0x34, Size: 1]
	float AccumulatingDamage;//[Offset: 0x38, Size: 1]
	float AccumulatingSelfDamage;//[Offset: 0x3c, Size: 1]
	float AccumulatingFriendlyDamage;//[Offset: 0x40, Size: 1]
	float AccumulatingReverseFriendlyDamage;//[Offset: 0x44, Size: 1]
	float FireGameTime;//[Offset: 0x48, Size: 1]

--------------------------------
Class: EliminationStreakEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int Count;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MultipleKillEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int Count;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BotStartingDifficultyRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int difficulty_index;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BotDifficultyChangeEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int difficulty_index;//[Offset: 0x4, Size: 1]
	FString Timestamp;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OrientationEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord Location;//[Offset: 0x8, Size: 1]
	RotationRecord Rotation;//[Offset: 0x14, Size: 1]
	int movement_state;//[Offset: 0x1c, Size: 1]
	FString Timestamp;//[Offset: 0x20, Size: 1]
	int ping_ms;//[Offset: 0x30, Size: 1]
	<FString,ClientStatisticsRecord> client_statistics;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ClientStatisticsRecord
	float smoothed;//[Offset: 0x0, Size: 1]
	float Maximum;//[Offset: 0x4, Size: 1]
	float Minimum;//[Offset: 0x8, Size: 1]
	float average;//[Offset: 0xc, Size: 1]
	int sample_count;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PollEndEventRecord
	int round_id;//[Offset: 0x0, Size: 1]
	bool poll_passed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FString poll_name;//[Offset: 0x8, Size: 1]
	int team_id;//[Offset: 0x18, Size: 1]
	int[] hz_player_ids_for;//[Offset: 0x20, Size: 1]
	int[] hz_player_ids_against;//[Offset: 0x30, Size: 1]
	FString game_phase;//[Offset: 0x40, Size: 1]
	FString Timestamp;//[Offset: 0x50, Size: 1]

--------------------------------
Class: RoundClientInputTypeUse
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int16 input_type_kbm;//[Offset: 0x4, Size: 1]
	int16 input_type_gpad;//[Offset: 0x6, Size: 1]
	int16 input_type_touch;//[Offset: 0x8, Size: 1]
	int16 input_type_other;//[Offset: 0xa, Size: 1]

--------------------------------
Class: RoundPlayerSummary.PlayerStatisticsBase
	int round_id;//[Offset: 0xb0, Size: 1]
	int ue_player_id;//[Offset: 0xb4, Size: 1]
	int hz_player_id;//[Offset: 0xb8, Size: 1]
	int class_id;//[Offset: 0xbc, Size: 1]

--------------------------------
Class: RoundSummary.PlayerStatisticsBase
	int round_id;//[Offset: 0xb0, Size: 1]
	FString round_start_time;//[Offset: 0xb8, Size: 1]
	int Duration;//[Offset: 0xc8, Size: 1]
	int winning_team;//[Offset: 0xcc, Size: 1]
	int first_blood_team;//[Offset: 0xd0, Size: 1]
	int first_capture_team;//[Offset: 0xd4, Size: 1]
	int surrender_polls;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: PlayerConnectionEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	int8 is_connected;//[Offset: 0xc, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BotBackfillEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int bot_ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: HumanBackfillEventRecord
	int backfill_hz_player_id;//[Offset: 0x0, Size: 1]
	int backfill_ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ObjectiveCaptureEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int team_id;//[Offset: 0x8, Size: 1]
	FString mode_name;//[Offset: 0x10, Size: 1]
	int round_id;//[Offset: 0x20, Size: 1]
	int objective_type;//[Offset: 0x24, Size: 1]
	FString capture_action;//[Offset: 0x28, Size: 1]
	LocationRecord Location;//[Offset: 0x38, Size: 1]
	RotationRecord Rotation;//[Offset: 0x44, Size: 1]
	FString Timestamp;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSAnnouncer.Info.Actor.Object
	MulticastInlineDelegateProperty OnAllyLivingPlayersChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnEnemyLivingPlayersChanged;//[Size: 1]
	KSVOPriorityManager* PriorityManager;//[Offset: 0x258, Size: 1]
	AkComponent* AnnouncerAkComponent;//[Offset: 0x270, Size: 1]
	<FName,TimeAnnouncementList> PhaseTimeAnnouncements;//[Offset: 0x278, Size: 1]
	AkAudioEvent* SuddenDeathAnnouncement;//[Offset: 0x2c8, Size: 1]
	AkAudioEvent* FallbackEliminationAnnouncement;//[Offset: 0x2d8, Size: 1]
	AkAudioEvent* FallbackEliminationAnnouncementAlly;//[Offset: 0x2e0, Size: 1]
	float MaxAnnouncementDuration;//[Offset: 0x328, Size: 1]
	delegate OnVOLineFinished;//[Offset: 0x32c, Size: 1]
	float VODuckingAmount;//[Offset: 0x33c, Size: 1]
	bool ShouldPlayTimeAnnouncementFromGroup(out const FName[] Groups);// 0x2628560
	void QueueAnnouncementStruct(Announcement Announcement, int TeamNum, bool DelayProcessing);// 0x2628360
	void QueueAnnouncement(AkAudioEvent* AkEvent, AkAudioEvent* AltAkEvent, enum Priority, float Lifetime, float Delay, float Lockout, int TeamNum, bool DelayProcessing, KSPlayerState* TargetPlayer, AkAudioEvent* TargetPlayerAkEvent);// 0x2628090
	void ProcessTimeAnnouncementList(out TimeAnnouncementList TimeAnnouncementList, float Time, int TeamNum);// 0x2627f70
	void OnObjectiveTimerZero();// 0x2cbecb0
	void OnObjectiveSpawned(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveReset(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveHeld(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveExploded(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDropped(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDisarming(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDisarmed(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDeactivated(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveContested(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveArming(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveArmed(out const interface classNone GameObjective);// 0x2cbecb0
	void OnMatchTimerUpdate(float TimeInWholeSeconds);// 0x2627bf0
	void OnLocalViewTargetMovementModeChanged(byte OldMode, byte OldCustomMode, byte NewMode, byte NewCustomMode);// 0x2cbecb0
	void OnLocalViewTargetChanged(KSPlayerController* Controller, Actor* OldViewTarget, Actor* NewViewTarget);// 0x2cbecb0
	void OnGameObjectiveStateChanged(interface classNone GameObjective);// 0x2627b50
	void LocalPlayerControllerDestroyed(Actor* PlayerController);// 0x2627820
	int GetTeamOverrideForAnnouncementGroup(out const FName[] Groups);// 0x2627500
	KSPlayerController* GetPlayerController();// 0x26274d0
	void FinishedLineCallback(enum in_eType, AkCallbackInfo* in_pCallbackInfo);// 0x2627160
	void EventQueueInGame();// 0x2cbecb0
	void EventLocalPlayerControllerDestroyed(KSPlayerController* PlayerController);// 0x2cbecb0
	void CurrentAnnouncementComplete();// 0x2627140
	void AnnouncePlayerDeath(out const CombatEventInfo CombatEvent);// 0x2626e00

--------------------------------
Class: KSVOPriorityManager.ActorComponent.Object
	enum AnnouncerSquelchThreshold;//[Offset: 0xb0, Size: 1]
	enum AnnouncerDuckThreshold;//[Offset: 0xb1, Size: 1]
	enum CharacterSquelchThreshold;//[Offset: 0xb2, Size: 1]
	enum CharacterDuckThreshold;//[Offset: 0xb3, Size: 1]
	PriorityVoiceLine[] PlayingLines;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: PriorityVoiceLine
	enum State;//[Offset: 0x0, Size: 1]
	enum Priority;//[Offset: 0x1, Size: 1]
	interface class None* Source;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Announcement
	AkAudioEvent* AkEvent;//[Offset: 0x0, Size: 1]
	AkAudioEvent* AltAkEvent;//[Offset: 0x8, Size: 1]
	enum Priority;//[Offset: 0x10, Size: 1]
	float Lifetime;//[Offset: 0x14, Size: 1]
	float ValidUntil;//[Offset: 0x18, Size: 1]
	float Delay;//[Offset: 0x1c, Size: 1]
	float Lockout;//[Offset: 0x20, Size: 1]
	float RTPC;//[Offset: 0x24, Size: 1]
	int TeamNum;//[Offset: 0x28, Size: 1]
	SerializedMctsNetId PlayerId;//[Offset: 0x30, Size: 1]
	AkAudioEvent* TargetPlayerAkEvent;//[Offset: 0x38, Size: 1]

--------------------------------
Class: TimeAnnouncementList
	TimeAnnouncement[] TimeAnnouncements;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TimeAnnouncement
	float Time;//[Offset: 0x0, Size: 1]
	Announcement Announcement;//[Offset: 0x8, Size: 1]
	FName[] AnnouncementGroups;//[Offset: 0x48, Size: 1]
	bool Block;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSJobSelectionAuthority.DraftAuthority.Info.Actor.Object
	void BroadcastRemoteInspectedJobChanged(DraftPlayerIdHandle Player, KSJobItem* JobItem);// 0x26d92b0

--------------------------------
Class: KSEmoteMusicManager.Actor.Object
	float MaxAudibleEmoteDistance;//[Offset: 0x248, Size: 1]
	void RemovePlayingMusic(AkComponent* Sound);// 0x2691480
	void AddPlayingMusic(AkComponent* Sound);// 0x2690b20

--------------------------------
Class: KSCinematicDataContainer.DataAsset.Object
	<FName,KSCinematicData> CinematicDatas;//[Offset: 0x30, Size: 1]
	FName GetDefaultCameraTag(out const FName CinematicName);// 0x2684730
	FString GetCinematicSubLevelName(out const FName CinematicName, const Object* WorldContextObject);// 0x26843a0
	enum GetCinematicLevelStreamingMethod(out const FName CinematicName);// 0x2684300
	FText GetCinematicDisplayName(out const FName CinematicName);// 0x2684200
	FName[] GetAllCinematicNames();// 0x2683fb0

--------------------------------
Class: KSCinematicData
	FText CinematicDisplayName;//[Offset: 0x0, Size: 1]
	FString CinematicSubLevelName;//[Offset: 0x18, Size: 1]
	enum CinematicLevelStreamingMethod;//[Offset: 0x28, Size: 1]
	FName DefaultCameraTag;//[Offset: 0x2c, Size: 1]
	bool bPerMapCinematicSubLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: KSSeamlessTravelTransferInfo.Object

--------------------------------
Class: KSSeamlessTravelSettings
	bool bRestoreLoadouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSkipDestinationDefaultInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bRestoreCharacterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	CharacterRestoreOptions CharacterStateRestoreOptions;//[Offset: 0x4, Size: 1]
	bool bCanReuseControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bRestoreBotDataPlayerStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: CharacterRestoreOptions
	bool bReplaceAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bReplaceInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bReplaceHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	float MinimumStartingHealthPercentage;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSScoreboardConfig.DataAsset.Object
	class KSStatWrapper[] ScoreboardStats;//[Offset: 0x30, Size: 1]
	GameplayTag ScoreboardStatForSorting;//[Offset: 0x40, Size: 1]
	class KSStatWrapper[] MatchSummaryStats;//[Offset: 0x48, Size: 1]
	class KSStatWrapper[] TopStatsOrder;//[Offset: 0x58, Size: 1]

--------------------------------
Class: KSBotDefinition.DataAsset.Object
	FString FriendlySearchName;//[Offset: 0x30, Size: 1]
	BotSpawnTableRow Info;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BotSpawnTableRow.TableRowBase
	class KSCharacter* Character;//[Offset: 0x8, Size: 1]
	class KSAIController* Controller;//[Offset: 0x30, Size: 1]
	BehaviorTree* BehaviorTree1;//[Offset: 0x58, Size: 1]
	KSBTDifficulty* InitialDifficulty;//[Offset: 0x80, Size: 1]
	DataTable* DifficultyTable;//[Offset: 0x88, Size: 1]
	bool AllowDynamicDifficulty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	KSBTDifficultyConfig SpawnDifficultyConfig;//[Offset: 0x98, Size: 1]
	DataTable*[] ItemLoadoutTables;//[Offset: 0x110, Size: 1]
	DataTable* ObjectivePriorityTable;//[Offset: 0x120, Size: 1]
	DataTable* ItemPriorityTable;//[Offset: 0x128, Size: 1]
	GameplayTagQuery AllowedJobQuery;//[Offset: 0x130, Size: 1]
	DataTable* AbilityTable;//[Offset: 0x178, Size: 1]
	DataTable* RandomCharacterSkinTable;//[Offset: 0x180, Size: 1]
	DataTable* RandomEquipmentSkinTable;//[Offset: 0x188, Size: 1]
	bool bIsPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bUseGameModeInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	bool bDelayPawnUntilLoadoutComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x192, Size: 1]

--------------------------------
Class: KSPlayerActivityInstanceContainer.Object
	<int,KSActivityInstance*> ActivityInstances;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Timespan

--------------------------------
Class: ActivityTierStructure
	int ProgressRequired;//[Offset: 0x0, Size: 1]
	FText Name;//[Offset: 0x8, Size: 1]
	FText Description;//[Offset: 0x20, Size: 1]
	Texture2D* Image;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSEventTrackerPlayerData.Object
	bool UsesPlacementMatches();// 0x269d840
	int SetInitialRankedXp();// 0x269d280
	bool IsRankedLossPreventionBoosterActive();// 0x269d110
	bool IsPlayerDeserter();// 0x269cfc0
	bool IsLossPreventionEnabled();// 0x269ce70
	bool IsInLastPlacementMatch();// 0x269cde0
	void IncrementPlacementMatches();// 0x269ca40
	bool HasCompletedPlacementMatches();// 0x269ca10
	int GetTeamNum();// 0x269c9b0
	float GetRankedXpWinBaseValue();// 0x269c7f0
	float GetRankedXpMinBonusClamp();// 0x269c7c0
	float GetRankedXpMaxBonusClamp();// 0x269c790
	float GetRankedXpLossBaseValue();// 0x269c760
	float GetRankDifferenceMultiplier();// 0x269c730
	FString GetPlayerName();// 0x269c5d0
	int GetPlacementMatchCount();// 0x269c5a0
	int GetMmrZoneRankedLevel();// 0x269c570
	float GetMMR();// 0x269c540
	int GetFavoredMatchBonusXp();// 0x269c2f0
	int GetCurrentRankedLevel();// 0x269c000

--------------------------------
Class: KSActivityComponent_WeaponMastery_Milestone.KSActivityComponent.DataAsset.Object
	int MilestoneTier;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSActivityComponent.DataAsset.Object

--------------------------------
Class: KSActivityRequirement.DataAsset.Object

--------------------------------
Class: KSActivityRewardCondition.DataAsset.Object
	bool IsCombatConditionMet(out const CombatEventInfo InDamageInfo);// 0x260ccc0

--------------------------------
Class: KSActivityComponent_MercMastery.KSActivityComponent.DataAsset.Object
	GameplayTag MercMasteryStatTag;//[Offset: 0x30, Size: 1]
	Texture2D* Icon;//[Offset: 0x38, Size: 1]
	FText DisplayName;//[Offset: 0x60, Size: 1]

--------------------------------
Class: KSActivityComponent_LoginReward.KSActivityComponent.DataAsset.Object
	int64 LoginNewRewardLootId;//[Offset: 0x30, Size: 1]
	int64 LoginChallengeTracker;//[Offset: 0x38, Size: 1]
	bool CanGrabNewLoginReward();// 0x2604d80
	void AttemptClaimLoginReward();// 0x2604d40

--------------------------------
Class: KSActivityComponent_Job.KSActivityComponent.DataAsset.Object
	KSJobItem* JobItem;//[Offset: 0x30, Size: 1]
	void LoadJobItem();// 0x2607ca0
	int64 GetJobItemId();// 0x2606b60
	KSJobItem* GetJobItem();// 0x2606b30

--------------------------------
Class: KSActivityComponent_Contract.KSActivityComponent.DataAsset.Object
	GameplayTag TimedContractTag;//[Offset: 0x30, Size: 1]
	bool AllowRerolls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	int RerollTrackerItemId;//[Offset: 0x3c, Size: 1]
	int RerollsAllowed;//[Offset: 0x40, Size: 1]
	void RerollContract();// 0x26088f0
	void PromptRerollContract(PUMG_HUD* HUD, const KSActivity* OwningActivity);// 0x26084e0
	int GetRerollLootId(const KSActivity* OwningActivity);// 0x26073b0
	bool CanRerollContract(const KSActivityInstance* OwningActivityInstance);// 0x2604db0

--------------------------------
Class: KSActivityComponent_BattlePass.KSActivityComponent.DataAsset.Object
	GameplayTag SeasonTag;//[Offset: 0x30, Size: 1]
	KSBattlepass* Battlepass;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSActivityComponent_Award.KSActivityComponent.DataAsset.Object

--------------------------------
Class: KSActivityComponent_Achievement.KSActivityComponent.DataAsset.Object
	<FName,FString> AchievementIdByOSSName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSSubActivityEntry
	bool bOverrideProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ProgressOverride;//[Offset: 0x4, Size: 1]
	KSActivity* SubActivity;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSJobSelectionComponent.ActorComponent.Object
	JobSelectionList JobSelectionList;//[Offset: 0xb0, Size: 1]
	SelectionActivityStatus SelectionActivityStatus;//[Offset: 0x1d0, Size: 1]
	KSJobSelectionAllowUnownedJobs AllowUnownedJobsStruct;//[Offset: 0x220, Size: 1]
	enum EnforcedJobUniqueness;//[Offset: 0x240, Size: 1]
	int JobTableVendorId;//[Offset: 0x244, Size: 1]
	JobCollection* JobCollection;//[Offset: 0x248, Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionEntryAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionEntryChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionInitialized;//[Size: 1]
	MulticastInlineDelegateProperty OnAllPlayersLockedIn;//[Size: 1]
	MulticastInlineDelegateProperty OnSelectionActivityStatusChanged;//[Size: 1]
	int[] BannedJobIds;//[Offset: 0x300, Size: 1]
	int ExpectedBanCount;//[Offset: 0x310, Size: 1]
	KSTeamState* CachedOwner;//[Offset: 0x318, Size: 1]
	bool bSelectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	int EntryCount;//[Offset: 0x324, Size: 1]
	KSAudioManager* pAudioManager;//[Offset: 0x330, Size: 1]
	void OnRep_SelectionActivityStatus();// 0x26db630
	void OnRep_EntryCount();// 0x26db610
	void OnRep_AllowUnownedJobs();// 0x26db610
	void OnPhaseChange(out const MatchPhase NewPhase);// 0x26db570
	void NewPlayerStarting(PlayerController* NewPlayer);// 0x26db4f0
	void NewBotStarting(KSAIController* NewBot);// 0x26db4f0
	static bool JobSelectEntryMatchesPlayerState(out const JobSelectionEntry Entry, const KSPlayerState* PlayerState);// 0x26db3f0
	static bool JobSelectEntryMatchesPersistentPlayer(out const JobSelectionEntry Entry, const KSPersistentPlayerData* PersistentPlayer);// 0x26db2f0
	bool IsReady();// 0x26db220
	bool IsPlayerCurrentlySelecting(const KSPlayerState* InPlayerState);// 0x26db190
	void InitializeJobSelectionList();// 0x26db140
	KSPlayerState*[] GetSortedPlayers();// 0x26db0c0
	SelectionActivityStatus GetSelectionActivityStatusInfo();// 0x26dab00
	enum GetSelectionActivityState();// 0x26daae0
	JobSelectionEntry[] GetJobSelectionEntries();// 0x26da4d0
	enum FindOpponentSelectionActivityState();// 0x26d94a0
	bool CanPlayerLockInSelection(const KSPlayerState* InPlayerState);// 0x26d9390

--------------------------------
Class: JobSelectionEntry.FastArraySerializerItem
	int JobId;//[Offset: 0xc, Size: 1]
	PlayerJobSelectInfo[] CurrentPlayerInfos;//[Offset: 0x10, Size: 1]
	enum LocalAvailability;//[Offset: 0x20, Size: 1]
	enum CachedJobUniquenessRule;//[Offset: 0x21, Size: 1]

--------------------------------
Class: PlayerJobSelectInfo
	KSPlayerState* PlayerState;//[Offset: 0x0, Size: 1]
	SerializedMctsNetId NetId;//[Offset: 0x8, Size: 1]
	int SkinId;//[Offset: 0x10, Size: 1]
	int JobMasteryXp;//[Offset: 0x14, Size: 1]
	enum SelectionState;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SelectionActivityStatus
	enum SelectionState;//[Offset: 0x30, Size: 1]
	KSPlayerState*[] CurrentlySelectingPlayers;//[Offset: 0x38, Size: 1]
	int NumBansOccurred;//[Offset: 0x48, Size: 1]

--------------------------------
Class: JobSelectionList.FastArraySerializer
	JobSelectionEntry[] EntryMap;//[Offset: 0x108, Size: 1]
	KSJobSelectionComponent* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: KSJobSelectionAllowUnownedJobs
	enum AllowUnownedJobsState;//[Offset: 0x0, Size: 1]
	int[] AllowedUnownedJobIds;//[Offset: 0x8, Size: 1]
	bool IsInitializationFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: MultiPlayerSkinMapReplicator.FastArraySerializer
	MultiSkinMapReplicatorEntry[] RepItems;//[Offset: 0x108, Size: 1]
	<KSPersistentPlayerId,PlayerSkinMap> PlayerSkinMaps;//[Offset: 0x118, Size: 1]

--------------------------------
Class: MultiSkinMapReplicatorEntry.FastArraySerializerItem
	KSPersistentPlayerId PlayerId;//[Offset: 0x10, Size: 1]
	KSItem* Item;//[Offset: 0x20, Size: 1]
	KSItem* Skin;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PlayerSkinMap
	KSPersistentPlayerId PlayerId;//[Offset: 0x0, Size: 1]
	<KSItem*,KSItem*> SkinMap;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSPollData
	int VoterCount;//[Offset: 0x0, Size: 1]
	int VotesInFavor;//[Offset: 0x4, Size: 1]
	int VotesAgainst;//[Offset: 0x8, Size: 1]
	float TimeElapsed;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSPlayerStateAssistant.Info.Actor.Object
	KSResourceManagerComponent* ResourceManagerComponent;//[Offset: 0x220, Size: 1]
	KSPersistentPlayerId LastOwnerPlayerId;//[Offset: 0x228, Size: 1]
	KSPlayerState* PlayerStateOwner;//[Offset: 0x238, Size: 1]
	KSPlayerModManager* PlayerModManager;//[Offset: 0x240, Size: 1]
	void SetPlayerStateOwner(KSPlayerState* NewPlayerState);// 0x2767520
	void SetPlayerModManager(KSPlayerModManager* InPlayerModManager);// 0x27674a0
	void RemoveAndDestroyPlayerStateAssistant();// 0x27672a0
	KSResourceManagerComponent* GetResourceManagerComponent();// 0x2765de0
	KSPlayerState* GetPlayerStateOwner();// 0x2765a30
	KSPlayerModManager* GetPlayerModManager();// 0x2765a10
	KSPersistentPlayerId GetLastOwnerPlayerId();// 0x2765880

--------------------------------
Class: KSResourceManagerComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnResourceAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnResourceRemovedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnResourceValueChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnResourceFilledDel;//[Size: 1]
	MulticastInlineDelegateProperty OnResourceDepletedDel;//[Size: 1]
	KSResourceInfo[] StartingResources;//[Offset: 0x100, Size: 1]
	KSResourceInfoSerializerContainer ActiveResourceInfoContainer;//[Offset: 0x110, Size: 1]
	bool SpendResource(out const FName InResourceKeyName, float InSpentAmount);// 0x2786290
	bool SetResource(out const FName InResourceKeyName, float InSetAmount);// 0x27861a0
	void Server_RemoveResource(const FName InResourceKeyName);// 0x2786090
	void Server_ForceUpdateResource(const FName InResourceKeyName);// 0x2786000
	void Server_AddNewResource(const KSResourceInfo InResourceInfo);// 0x2785f80
	void RequestServerForceUpdateResource(out const FName InResourceKeyName);// 0x2785ef0
	void RemoveResource(out const FName InResourceKeyName);// 0x2785e60
	bool HasResource(out const FName InResourceKeyName);// 0x2785ad0
	bool HasAmountOfResource(out const FName InResourceKeyName, float CheckAmount);// 0x27858e0
	bool GiveResource(out const FName InResourceKeyName, float InGivenAmount);// 0x2785730
	float GetResourceValue(out const FName InResourceKeyName);// 0x2785690
	void GetResourceInfo(out const FName InResourceKeyName, out KSResourceInfo OutResourceInfo);// 0x27855a0
	float GetResourceFillPercent(out const FName InResourceKeyName);// 0x2785500
	bool FillResource(out const FName InResourceKeyName);// 0x2785330
	bool DepleteResource(out const FName InResourceKeyName);// 0x2785060
	void AddNewResource(out const KSResourceInfo InResourceInfo);// 0x2784530

--------------------------------
Class: KSResourceInfo
	FName ResourceKeyName;//[Offset: 0x0, Size: 1]
	enum ResourceReplicationType;//[Offset: 0x8, Size: 1]
	float CurrentResourceValue;//[Offset: 0xc, Size: 1]
	float LastLocalCurrentResourceValue;//[Offset: 0x10, Size: 1]
	float MinResourceValue;//[Offset: 0x14, Size: 1]
	float MaxResourceValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSResourceInfoSerializerContainer.FastArraySerializer
	KSResourceInfoSerializerItem[] ResourceInfoSerializerItems;//[Offset: 0x108, Size: 1]

--------------------------------
Class: KSResourceInfoSerializerItem.FastArraySerializerItem
	KSResourceInfo ResourceInfo;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSPollResults
	KSPollData PollFinalData;//[Offset: 0x0, Size: 1]
	FString PollName;//[Offset: 0x10, Size: 1]
	int TeamNum;//[Offset: 0x20, Size: 1]
	bool bPollPassed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: KSVehicleBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	PGame_PositionHistoryComponent* PositionHistoryComponent;//[Offset: 0xd00, Size: 1]
	MulticastInlineDelegateProperty OnStartVehicleDestruction;//[Size: 1]
	MulticastInlineDelegateProperty OnEndVehicleDestruction;//[Size: 1]
	SpringArmComponent* SpringArm;//[Offset: 0xd28, Size: 1]
	CameraComponent* MainCamera;//[Offset: 0xd30, Size: 1]
	float CameraBlendTime;//[Offset: 0xd38, Size: 1]
	float CameraXTurnRate;//[Offset: 0xd3c, Size: 1]
	float CameraYTurnRate;//[Offset: 0xd40, Size: 1]
	float CameraMinHorizontalAngle;//[Offset: 0xd44, Size: 1]
	float CameraMaxHorizontalAngle;//[Offset: 0xd48, Size: 1]
	float CameraMinVerticalAngle;//[Offset: 0xd4c, Size: 1]
	float CameraMaxVerticalAngle;//[Offset: 0xd50, Size: 1]
	KSSpecialEffect DefaultPPE;//[Offset: 0xd68, Size: 1]
	bool bDisplayDefaultPPE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 1]
	bool bDisplayFadeInOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc1, Size: 1]
	float FadeInDuration;//[Offset: 0xdc4, Size: 1]
	SkinnableStaticMeshComponent* DestroyedMesh;//[Offset: 0xdc8, Size: 1]
	float MaxHealth;//[Offset: 0xdd0, Size: 1]
	bool bShouldDisplayFriendlyOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd4, Size: 1]
	KSVehicleDeathInfo DeathInfo;//[Offset: 0xdd8, Size: 1]
	class KSDamageTypeBase* InstantDeathDamageType;//[Offset: 0xdf8, Size: 1]
	Character* LastCharacterToDamageMe;//[Offset: 0xe00, Size: 1]
	bool bIsSelfDestructing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe09, Size: 1]
	class DamageType* KilledDamageTypeClass;//[Offset: 0xe10, Size: 1]
	MulticastInlineDelegateProperty OnVehicleDeathStateChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityOnePressed;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityOneReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityTwoPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityTwoReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityThreePressed;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityThreeReleased;//[Size: 1]
	FText VehicleDisplayName;//[Offset: 0xea0, Size: 1]
	bool bReportsDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	SoftObjectPath HudIconPath;//[Offset: 0xec0, Size: 1]
	bool bHidesWeaponReticule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	MulticastInlineDelegateProperty OnVehicleHoverChange;//[Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0xef0, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0xef8, Size: 1]
	FName[] SkeletalMeshKeywordList;//[Offset: 0xf08, Size: 1]
	FName DestroyedMeshKeyword;//[Offset: 0xf18, Size: 1]
	void Suicide();// 0x27a6110
	void SetMaxHealth(float NewMaxHealth);// 0x27a5f90
	void ServerRequest_BroadcastOnAbilityTwoReleased();// 0x1f12b00
	void ServerRequest_BroadcastOnAbilityTwoPressed();// 0x1f12b80
	void ServerRequest_BroadcastOnAbilityThreeReleased();// 0x1f12aa0
	void ServerRequest_BroadcastOnAbilityThreePressed();// 0x1f12a20
	void ServerRequest_BroadcastOnAbilityOneReleased();// 0x1f12b60
	void ServerRequest_BroadcastOnAbilityOnePressed();// 0x1ef4350
	void OnViewTargetChanged(Actor* OldViewTarget, Actor* NewViewTarget);// 0x27a5910
	void OnRep_VehicleDeathState();// 0x1f12b40
	void MoveRight(float Value);// 0x27a57d0
	void MoveForward(float Value);// 0x27a5750
	SoftObjectPath GetSoftHudIconAsPath();// 0x27a55c0
	enum GetDeathState();// 0x27a5420
	void GamepadLookUp(float Value);// 0x27a53a0
	void GamepadLookRight(float Value);// 0x27a5320
	bool CanReportDamage();// 0x266f760
	void BroadcastOnVehicleKilled(const KSCharacterFoundation* KillerCharacter);// 0x27a51c0
	void BroadcastOnStartVehicleDestruction();// 0x27a51a0
	void BroadcastOnEndVehicleDestruction();// 0x27a5180
	void BroadcastOnAbilityTwoReleased();// 0x1f12ba0
	void BroadcastOnAbilityTwoPressed();// 0x1f12a40
	void BroadcastOnAbilityThreeReleased();// 0x1f12800
	void BroadcastOnAbilityThreePressed();// 0x1f12a00
	void BroadcastOnAbilityOneReleased();// 0x1f12ae0
	void BroadcastOnAbilityOnePressed();// 0x1ef4f40
	void AbilityTwoReleased();// 0x1f2b7d0
	void AbilityTwoPressed();// 0x1f2b710
	void AbilityThreeReleased();// 0x1ef6db0
	void AbilityThreePressed();// 0x1ece6c0
	void AbilityOneReleased();// 0x1f12b20
	void AbilityOnePressed();// 0x1f12a60

--------------------------------
Class: PGame_PositionHistoryComponent.ActorComponent.Object
	enum PositionRecordMode;//[Offset: 0xb0, Size: 1]
	bool ExtrapolateFromLastEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	bool bAutoPopulateOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	PrimitivePriority[] TrackedPrimitives;//[Offset: 0xc8, Size: 1]
	void RemoveTrackedPrimitive(PrimitiveComponent* InPrimitive);// 0xd770e0
	void AddTrackedPrimitive(PrimitiveComponent* InPrimitive, int Priority);// 0xd758d0

--------------------------------
Class: PrimitivePriority
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 1]
	int Priority;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x208, Size: 1]
	Vector SocketOffset;//[Offset: 0x20c, Size: 1]
	Vector TargetOffset;//[Offset: 0x218, Size: 1]
	float ProbeSize;//[Offset: 0x224, Size: 1]
	byte ProbeChannel;//[Offset: 0x228, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22c, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22c, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22c, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22c, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 1]
	float CameraLagSpeed;//[Offset: 0x230, Size: 1]
	float CameraRotationLagSpeed;//[Offset: 0x234, Size: 1]
	float CameraLagMaxTimeStep;//[Offset: 0x238, Size: 1]
	float CameraLagMaxDistance;//[Offset: 0x23c, Size: 1]
	bool IsCollisionFixApplied();// 0x459a8b0
	Vector GetUnfixedCameraPosition();// 0x459a870
	Rotator GetTargetRotation();// 0x459a830

--------------------------------
Class: KSSpecialEffect
	FName FXID;//[Offset: 0x0, Size: 1]
	float EffectEndTime;//[Offset: 0x8, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopStartTime;//[Offset: 0x10, Size: 1]
	float LoopEndTime;//[Offset: 0x14, Size: 1]
	bool bRemoveOnForwardComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bRemoveOnReverseComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	KSPostProcessFloatCurve[] FloatCurves;//[Offset: 0x20, Size: 1]
	KSPostProcessColorCurve[] ColorCurves;//[Offset: 0x30, Size: 1]
	class KSFXCurveComponent* FXCurveClass;//[Offset: 0x40, Size: 1]
	Object* EffectAsset;//[Offset: 0x48, Size: 1]
	Object* MobileEffectAssetOverride;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSPostProcessFloatCurve
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 1]
	FName FloatParameterName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSPostProcessColorCurve
	CurveLinearColor* ColorCurve;//[Offset: 0x0, Size: 1]
	FName ColorParameterName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSFXCurveComponent.ActorComponent.Object
	MaterialInstanceDynamic* PostProcessMID;//[Offset: 0x108, Size: 1]
	MaterialInterface* PostProcessMIDParent;//[Offset: 0x110, Size: 1]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x118, Size: 1]
	ParticleSystem* ParticleSystemParent;//[Offset: 0x120, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bReversing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 1]
	float CurrentTime;//[Offset: 0x12c, Size: 1]
	void UpdateScalarTrack(FName TrackName, float TrackValue);// 0x1ec42e0
	void UpdateColorTrack(FName TrackName, const LinearColor TrackValue);// 0x26a26c0
	void Stop();// 0x26a2560
	void Reverse();// 0x26a2440
	void ResetTime();// 0x26a2420
	void Play();// 0x26a2400
	bool IsPlaying();// 0x26a2280
	FName GetFxID();// 0x25fa760
	KSCharacter* GetCharacterOwner();// 0x26a1840
	KSCharacterFoundation* GetCharacterFoundationOwner();// 0x26a1810

--------------------------------
Class: SkinnableStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bDelaySkinUpdatesUntilTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bSkinUpdateIsQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	FName StaticMeshKeyword;//[Offset: 0x4ec, Size: 1]
	StaticMesh* FailSafeStaticMesh;//[Offset: 0x4f8, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x500, Size: 1]
	bool bAllowMaterialSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	<FName> MaterialSkinningPrefixes;//[Offset: 0x510, Size: 1]
	void SetStaticMeshKeyword(FName InKeyword, StaticMesh* InFailSafeStaticMesh);// 0xf8b8f0
	int SetPersistentVectorParameterOnAllMaterials(FName ParameterName, LinearColor ParameterValue, bool bForceNewOverride);// 0xf8b540
	int SetPersistentVectorParameter(int MaterialSlot, FName ParameterName, LinearColor ParameterValue, bool bForceNewOverride);// 0xf8b2d0
	int SetPersistentTextureParameterOnAllMaterials(FName ParameterName, Texture* ParameterValue, bool bForceNewOverride);// 0xf8b070
	int SetPersistentTextureParameter(int MaterialSlot, FName ParameterName, Texture* ParameterValue, bool bForceNewOverride);// 0xf8ae30
	int SetPersistentScalarParameterOnAllMaterials(FName ParameterName, float ParameterValue, bool bForceNewOverride);// 0xf8abe0
	int SetPersistentScalarParameter(int MaterialSlot, FName ParameterName, float ParameterValue, bool bForceNewOverride);// 0xf8a980
	int SetPersistentMaterialOverrideOnAllSlots(MaterialInterface* MaterialInterface, bool bForceNewOverride);// 0xf8a770
	int SetPersistentMaterialOverride(int MaterialSlot, MaterialInterface* MaterialInterface, bool bForceNewOverride);// 0xf8a5b0
	void RemovePersistentMaterialParameter(int ParameterId);// 0xf8a250
	MultiSkinObject* GetSkinObject();// 0xf89c90
	bool ChangePersistentVectorOverrideById(int ParameterId, LinearColor ParameterValue);// 0xf87c60
	bool ChangePersistentTextureOverrideById(int ParameterId, Texture* ParameterValue);// 0xf87ac0
	bool ChangePersistentScalarOverrideById(int ParameterId, float ParameterValue);// 0xf87930
	bool ChangePersistentMaterialOverrideById(int ParameterId, MaterialInterface* MaterialInterface);// 0xf877a0

--------------------------------
Class: KSVehicleDeathInfo
	enum DeathState;//[Offset: 0x0, Size: 1]
	class DamageType* DamageType;//[Offset: 0x8, Size: 1]
	Vector DamageDirection;//[Offset: 0x10, Size: 1]
	float FinalBlowDamage;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: KSDamageTypeBase.DamageType.Object
	enum DamageCategory;//[Offset: 0x40, Size: 1]
	ParticleSystem* HitPawnEffect;//[Offset: 0x48, Size: 1]
	AkAudioEvent* HitBodyAudioEvent;//[Offset: 0x50, Size: 1]
	AkAudioEvent* HitHeadAudioEvent;//[Offset: 0x58, Size: 1]
	AkAudioEvent* HitResistedAudioEvent;//[Offset: 0x60, Size: 1]
	AkAudioEvent* HitReducedAudioEvent;//[Offset: 0x68, Size: 1]
	AkAudioEvent* HitByAudioEvent;//[Offset: 0x70, Size: 1]
	AkAudioEvent* HitByResistedAudioEvent;//[Offset: 0x78, Size: 1]
	AkAudioEvent* HitByReducedAudioEvent;//[Offset: 0x80, Size: 1]
	KSSpecialEffect HitSpecialEffect;//[Offset: 0x88, Size: 1]
	FName EffectAttachPointName;//[Offset: 0xe0, Size: 1]
	bool bPreProcessResistable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bRequiresDamageForDebuffs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	bool bUIDisplayable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 1]
	bool bClientPredictable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 1]
	bool bHideDamageDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bCountTowardsTrackedFriendlyFireDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bDoFriendlyDamageWithReverseFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	KSPlayerMod*[] DebuffsAppliedOnDamage;//[Offset: 0xf0, Size: 1]
	float FlinchDuration;//[Offset: 0x100, Size: 1]
	float FlinchRecoveryRate;//[Offset: 0x104, Size: 1]
	float FlinchMinHeightBody;//[Offset: 0x108, Size: 1]
	float FlinchMaxHeightBody;//[Offset: 0x10c, Size: 1]
	float FlinchMinHeightHead;//[Offset: 0x110, Size: 1]
	float FlinchMaxHeightHead;//[Offset: 0x114, Size: 1]
	GameplayTagContainer DamageTags;//[Offset: 0x118, Size: 1]
	float ImpulseMagnitudePerDamage;//[Offset: 0x138, Size: 1]
	bool PreProcessDamageEffects(Actor* DamagedActor, out float Damage, out const KSDamageEventInfo DamageEventInfo, Controller* EventInstigator, Actor* DamageCauser);// 0x26894d0
	void PostProcessDamageEffects(Actor* DamagedActor, float AttemptedDamage, float ActualDamage, out const KSDamageEventInfo DamageEventInfo, out const CombatEventInfo CombatEventInfo, Controller* EventInstigator, Actor* DamageCauser, bool IsKillEvent);// 0x26891b0
	static void GetDefaultObjectPropertiesFromDamageType(class KSDamageTypeBase DamageTypeClass, out ParticleSystem* OutHitPawnEffect, out AkAudioEvent* OutHitBodyAudioEvent, out AkAudioEvent* OutHitHeadAudioEvent, out AkAudioEvent* OutHitByAudioEvent);// 0x26888b0

--------------------------------
Class: KSDamageEventInfo
	class DamageType* DamageTypeClass;//[Offset: 0x0, Size: 1]
	int DamageClassId;//[Offset: 0x8, Size: 1]
	HitResult[] HitResults;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSSpecialty.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int RequiredUnlockLevel;//[Offset: 0x280, Size: 1]
	Texture2D* DynamicPoseImage;//[Offset: 0x288, Size: 1]
	Texture2D* BannerIcon;//[Offset: 0x2b0, Size: 1]
	Texture2D* LeftBannerIcon;//[Offset: 0x2d8, Size: 1]
	Texture2D* RightBannerIcon;//[Offset: 0x300, Size: 1]
	Texture2D* SmallIcon;//[Offset: 0x328, Size: 1]
	KSPlayerMod*[] AvailableKillstreaks;//[Offset: 0x350, Size: 1]
	KSPlayerMod*[] AvailableAbilities;//[Offset: 0x360, Size: 1]
	KSWeaponAsset*[] AvailableGadgets;//[Offset: 0x370, Size: 1]
	KSWeaponAsset*[] AvailablePistols;//[Offset: 0x380, Size: 1]
	KSWeaponAttachment*[] AvailableWeaponAttachments;//[Offset: 0x390, Size: 1]
	enum RoleType;//[Offset: 0x3a0, Size: 1]
	KSPlayerMod*[] AutoEquippedMods;//[Offset: 0x3a8, Size: 1]
	PerkCategory* PerkSlotOneCategory;//[Offset: 0x3b8, Size: 1]
	PerkCategory* PerkSlotTwoCategory;//[Offset: 0x3e0, Size: 1]
	Texture2D* GetDynamicPoseImage(bool bAllowSyncLoad);// 0x2791f00

--------------------------------
Class: KSLoadoutClass.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	Texture2D* DynamicPoseImage;//[Offset: 0x280, Size: 1]
	LinearColor ThemeColorLight;//[Offset: 0x2a8, Size: 1]
	LinearColor ThemeColorDark;//[Offset: 0x2b8, Size: 1]
	PerkCategory*[] PerkCategories;//[Offset: 0x2c8, Size: 1]
	KSPlayerMod*[] AvailablePerks;//[Offset: 0x2d8, Size: 1]
	KSPlayerMod_Activated*[] AvailableAbilities;//[Offset: 0x2e8, Size: 1]
	KSWeaponAsset*[] AvailableGadgets;//[Offset: 0x2f8, Size: 1]
	bool CanUseGlobalGadgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	KSWeaponAsset*[] AvailablePistols;//[Offset: 0x310, Size: 1]
	bool CanUseGlobalPistols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	KSPlayerMod*[] AutoEquippedMods;//[Offset: 0x328, Size: 1]
	Texture2D* GetDynamicPoseImage(bool bAllowSyncLoad);// 0x26e48f0

--------------------------------
Class: KSPlayerMod_Activated.KSPlayerMod.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool bIsCharacterAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	int RequiredCharge;//[Offset: 0x3a4, Size: 1]
	int MaximumCharge;//[Offset: 0x3a8, Size: 1]
	int DefaultCharge;//[Offset: 0x3ac, Size: 1]
	bool bRemoveIfExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	float RefundFactor;//[Offset: 0x3b4, Size: 1]
	bool bHasLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	float LockoutTime;//[Offset: 0x3bc, Size: 1]
	bool bCanActivateBeforeRoundStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool bShouldAutoActivateOnNewCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool bIgnoreNoFireZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	bool bIgnoreWeaponFireCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	bool bEndOnDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	bool bEndOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	KSPlayerMod*[] BuffsGivenOnActivation;//[Offset: 0x3c8, Size: 1]
	bool bKeepsTeamAliveIfUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bKeepsTeamAliveIfActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	float AbilitySetupDuration;//[Offset: 0x3dc, Size: 1]
	bool bSetupLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	float AbilityDuration;//[Offset: 0x3e4, Size: 1]
	float MaximumBonusDuration;//[Offset: 0x3e8, Size: 1]
	bool bCapBonusDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	float AbilityEndWarningTime;//[Offset: 0x3f0, Size: 1]
	float AbilityRecoveryDuration;//[Offset: 0x3f4, Size: 1]
	bool bSelectableNormally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool bSelectableWhileDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	float ChargePerSecond;//[Offset: 0x3fc, Size: 1]
	float ChargePerHundredPoints;//[Offset: 0x400, Size: 1]
	class CameraShake* CameraShake;//[Offset: 0x408, Size: 1]
	FText ActivateWhileDownedPromptText;//[Offset: 0x410, Size: 1]
	bool ShouldRemoveIfExhausted();// 0x273ebd0
	bool ShouldCapBonusDuration();// 0x273eb50
	int GetRequiredCharge();// 0x273e810
	float GetRefundFactor();// 0x273e7f0
	int GetMaximumCharge();// 0x273e6c0
	float GetMaximumBonusDuration();// 0x273e6a0
	int GetDefaultCharge();// 0x273e570
	KSPlayerMod*[] GetBuffs();// 0x273e540
	FText GetActivateWhileDownedPromptText();// 0x273e490
	float GetAbilitySetupDuration();// 0x273e470
	float GetAbilityRecoveryDuration();// 0x273e450
	float GetAbilityEndWarningTime();// 0x273e430
	float GetAbilityDuration();// 0x273e410

--------------------------------
Class: KSModInst_Activated.KSPlayerModInstance.ActorComponent.Object
	bool bCanBecomeFullyChargedOnEndActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 1]
	bool bUsesAbilityMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1, Size: 1]
	byte MovementMode;//[Offset: 0x1d2, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1d3, Size: 1]
	KSTimerComponent* LockoutTimer;//[Offset: 0x1d8, Size: 1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 1]
	MulticastInlineDelegateProperty OnModLocked;//[Size: 1]
	MulticastInlineDelegateProperty OnModLockoutTick;//[Size: 1]
	KSTimerComponent* SetupTimer;//[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnBonusAbilityDurationReceived;//[Size: 1]
	float BonusAbilityDuration;//[Offset: 0x240, Size: 1]
	float LocalBonusAbilityDuration;//[Offset: 0x244, Size: 1]
	KSActionRestrictor SetupActionRestrictor;//[Offset: 0x248, Size: 1]
	int CurrentSetupRestrictor;//[Offset: 0x250, Size: 1]
	KSActionRestrictor RecoveryActionRestrictor;//[Offset: 0x254, Size: 1]
	bool bUseDownedActionRestrictors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	KSActionRestrictor DownedSetupActionRestrictor;//[Offset: 0x25d, Size: 1]
	KSActionRestrictor DownedRecoveryActionRestrictor;//[Offset: 0x265, Size: 1]
	MulticastInlineDelegateProperty OnModActivated;//[Size: 1]
	KSPlayerMod_Activated* ActivateMod;//[Offset: 0x298, Size: 1]
	MulticastInlineDelegateProperty OnChargeChanged;//[Size: 1]
	bool bEndActivationOnNullCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	bool bDelayChargeConsumption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	bool bConsumeChargeOnEndActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 1]
	MulticastInlineDelegateProperty OnModSetup;//[Size: 1]
	AkAudioEvent* ActivationSoundEvent;//[Offset: 0x2c8, Size: 1]
	AkAudioEvent* SpacialActivationSoundEvent;//[Offset: 0x2d0, Size: 1]
	AkAudioEvent* SetupSoundEvent;//[Offset: 0x2d8, Size: 1]
	AkAudioEvent* SpacialSetupSoundEvent;//[Offset: 0x2e0, Size: 1]
	AkAudioEvent* DeactivationSoundEvent;//[Offset: 0x2e8, Size: 1]
	bool bUnCrouchOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	bool bCanActivateWithoutRequiredCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	bool bCanAddPerSecondChargeWhileActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	MulticastInlineDelegateProperty OnModFailedToActivate;//[Size: 1]
	float CurrentCharge;//[Offset: 0x338, Size: 1]
	bool bDeactivateWhenWeaponFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	class KSWeapon[] WeaponsToIgnore;//[Offset: 0x440, Size: 1]
	bool bDeactivateWhenMacGuffinFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	class DamageType[] DamageTypesThatCancel;//[Offset: 0x458, Size: 1]
	MulticastInlineDelegateProperty OnModHoldChanged;//[Size: 1]
	int CurrentlyHeldId;//[Offset: 0x478, Size: 1]
	int LocalHeldId;//[Offset: 0x47c, Size: 1]
	bool bCurrentlyHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480, Size: 1]
	bool bActivateOnInputRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481, Size: 1]
	bool bActivatedByInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x482, Size: 1]
	KSModInst_ActivatedStateMachine* ActivatedStateMachine;//[Offset: 0x488, Size: 1]
	void UpdateChargeDirect(float DeltaCharge, bool bForce);// 0x2700010
	void UpdateCharge(int Delta);// 0x26fff90
	bool TryToCancel();// 0x26fff40
	bool TryToActivate();// 0x26fff10
	bool ShouldActivateOnInputRelease();// 0x26ffe20
	bool ShouldActivateByInput();// 0x26ffdf0
	void SetAbilityMovementMode(byte InMovementMode, byte InCustomMovementMode);// 0x26ffb60
	void SetAbilityMovementDisabled(bool bDisable);// 0x26ffae0
	void RefundCharge();// 0x26ff820
	void Recharge();// 0x26ff800
	void OnSetupComplete();// 0x26ff650
	void OnSetupActive(bool bIsTimerActive);// 0x26ff5c0
	void OnSetup();// 0xe7e630
	void OnRep_SetupTimer();// 0x26ff5a0
	void OnRep_LockoutTimer();// 0x26ff580
	void OnRep_Locked();// 0x26ff560
	void OnRep_CurrentlyHeldId();// 0x26ff540
	void OnRep_CurrentCharge();// 0xcf5d10
	void OnRep_BonusAbilityDuration();// 0x26ff520
	void OnOwnerDownStateChanged(KSPlayerState* DownedPlayer);// 0x1f03be0
	void OnLockoutTimerTick(float Seconds);// 0x26ff4a0
	void OnLockoutTimerActive(bool bIsTimerActive);// 0x26ff410
	void OnFullyCharged();// 0x26ff3f0
	void OnEndRecovery();// 0x2cbecb0
	void OnEndActivationWarning();// 0x2cbecb0
	void OnEndActivation();// 0x1eb9310
	void OnDownOther(KSCharacter* Other);// 0xe7e7f0
	void OnCancelSetup();// 0x26ff3d0
	void OnActivation();// 0x1f03220
	void OnAbilityReleased();// 0x26ff3b0
	bool IsLocked();// 0x26ff2d0
	bool IsInSetup();// 0x26fef20
	bool IsInActivatableState(out enum OutAbilityFailureType);// 0x26fee70
	bool IsCharacterAbility();// 0x26fee40
	bool IsActivated();// 0x26fee10
	bool IsAbilityMovementDisabled();// 0x26fedd0
	void HandleWeaponFireStarted(KSWeapon* Weapon);// 0x26fed50
	void HandleSetupTimerComplete();// 0x26fed30
	void HandleSetupTimerActive(bool bIsTimerActive);// 0x26feca0
	void HandleRoundHasEnded(int RoundWinner, int MatchWinner);// 0x26febe0
	void HandleCharacterOwnerTakeDamage(Actor* InActor, float DamageAmount, const DamageType* DamageTypeCDO, Controller* EventInstigator, Actor* DamageCauser);// 0x26fea50
	KSModInst_ActivatedStateMachine* GetStateMachine();// 0x26fe970
	KSActionRestrictor GetSetupActionRestrictor();// 0x26fe840
	int GetRequiredCharge();// 0x26fe710
	KSActionRestrictor GetRecoveryActionRestrictor();// 0x26fe6d0
	float GetPerSecondCharge();// 0x26fe6a0
	int GetMaximumCharge();// 0x26fe210
	float GetLockoutTimeRemaining();// 0x26fe120
	KSPlayerMod_Activated* GetDisplayActivatedModAsset();// 0x26fd590
	int GetDefaultCharge();// 0x26fd560
	int GetCurrentCharge();// 0x26fd530
	float GetBonusDuration();// 0x26fd4e0
	KSPlayerMod_Activated* GetActivatedModAsset();// 0x26fd4b0
	float GetAbilitySetupDuration();// 0x26fd470
	float GetAbilityRecoveryDuration();// 0x26fd430
	float GetAbilityDuration();// 0x26fd3f0
	void EndActivation();// 0x1eef160
	void DownOtherTriggered(KSCharacter* Other);// 0x26fc8e0
	void ConsumeChargeAmount(float Amount);// 0x26fc860
	void ConsumeCharge();// 0x26fc840
	void ClientModFailedToActivate(enum AbilityFailureType);// 0x26fc7c0
	bool CanTryToCancel();// 0x26fc530
	bool CanActivateWhileDowned();// 0x26fc500
	bool CanActivateNow(out enum OutAbilityFailureType);// 0x26fc460
	void BroadcastModActivated(bool bActive);// 0x26fc3d0
	void BroadcastEndRecovery();// 0xe7fff0
	void BroadcastEndActivationWarning();// 0xe7efc0
	void BroadcastCancel();// 0x26fc3b0
	void BeginActivation();// 0xe7ef00
	void AwardBonusAbilityDuration(float BonusDuration);// 0x26fc330
	void AbilitySetupRequestTimeout();// 0x26fc310
	void AbilityActivationRequestTimeout();// 0x26fc2f0

--------------------------------
Class: KSModInst_ActivatedStateMachine.KSModInst_Activated.KSPlayerModInstance.ActorComponent.Object
	<FName,KSPlayerMod_Activated*> ManagedModAssets;//[Offset: 0x490, Size: 1]
	StateMachineModEntry[] ManagedMods;//[Offset: 0x4e0, Size: 1]
	KSModInst_Activated* CurrentActiveMod;//[Offset: 0x4f0, Size: 1]
	KSModInst_Activated* LocalActiveMod;//[Offset: 0x4f8, Size: 1]
	bool bChargeAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	bool bSharedDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 1]
	bool bDelayActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x502, Size: 1]
	StateMachineObjectEntry[] StateStorage;//[Offset: 0x508, Size: 1]
	MulticastInlineDelegateProperty OnStateStorageChangedDel;//[Size: 1]
	bool TryToSetAsActiveMod(FName Key);// 0x2704b60
	void RemoveFromStateStorage(StateMachineObjectEntry Entry);// 0x2704a00
	void OnRep_StateStorage();// 0x27047b0
	void OnRep_ManagedModsChanged();// 0x2704760
	void OnRep_CurrentActiveMod();// 0x27046e0
	void OnManagedModsChanged();// 0x2cbecb0
	void OnActiveModFailedToActivate(KSModInst_Activated* AttemptedMod, enum AbilityFailureType);// 0x2704290
	void OnActiveModChargeChanged(KSModInst_Activated* ChargingModInstance);// 0x2704210
	bool IsUsingSharedDuration();// 0x27041f0
	bool GetStoredPlayerStates(FName Key, out KSPlayerState*[] OutReferences);// 0x2703bd0
	bool GetStateStorage(FName Key, out StateMachineObjectEntry[] OutReferences);// 0x2703ad0
	void GetManagedModInstances(out KSModInst_Activated*[] OutManagedMods);// 0x27039f0
	KSModInst_Activated* GetCurrentActiveMod();// 0x2684830
	void ClearStateStorage(FName Key);// 0x2703840
	void AddToStateStorage(out const StateMachineObjectEntry Entry);// 0x27032a0
	void AddPlayerStateToStateStorage(FName Key, KSPlayerState* PlayerState);// 0x27031e0
	void ActivateStateMachine();// 0x27031c0

--------------------------------
Class: StateMachineModEntry
	FName Key;//[Offset: 0x0, Size: 1]
	KSModInst_Activated* ModInst;//[Offset: 0x8, Size: 1]

--------------------------------
Class: StateMachineObjectEntry
	FName Key;//[Offset: 0x0, Size: 1]
	Object* Entry;//[Offset: 0x8, Size: 1]
	int64 IntEntry;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSTimerComponent.ActorComponent.Object
	MulticastInlineDelegateProperty TimerActive;//[Size: 1]
	MulticastInlineDelegateProperty TimerComplete;//[Size: 1]
	PGame_ReplicatedTimer ReplicatedTimer;//[Offset: 0xd0, Size: 1]
	KSTimerState TimerState;//[Offset: 0x108, Size: 1]
	KSTimerState LocalTimerState;//[Offset: 0x110, Size: 1]
	void StopTimer();// 0x27a2520
	void StartTimer(float Seconds);// 0x27a24a0
	void SetTimerRefreshRate(float RefreshRate);// 0x27a2420
	void OnRep_TimerState();// 0x27a2400
	bool IsTimerComplete();// 0x27a23e0
	bool IsTimerActive();// 0x27a23c0
	float GetTimeRemaining();// 0x27a23a0
	float GetInitialTime();// 0x27a2370

--------------------------------
Class: KSTimerState
	bool bIsTimerActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsTimerComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int Counter;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSActionRestrictor
	bool bRestrictMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bRestrictFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bRestrictAltFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bRestrictAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bRestrictAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRestrictRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bRestrictWeaponSwaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bRestrictReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]

--------------------------------
Class: KSScoreChangeList.SizedArraySerializer.ReplicatedLog
	KSScoreChangeItem[] Items;//[Offset: 0x78, Size: 1]

--------------------------------
Class: SizedArraySerializer.ReplicatedLog

--------------------------------
Class: ReplicatedLog
	int MaxEntryReplication;//[Offset: 0x0, Size: 1]
	int MaxHistory;//[Offset: 0x4, Size: 1]
	int TailRepIndex;//[Offset: 0x8, Size: 1]
	int HeadRepIndex;//[Offset: 0xc, Size: 1]
	int ItemArrayTail;//[Offset: 0x10, Size: 1]
	int ItemArrayHead;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSScoreChangeItem.ReplicatedLogItem
	KSScoreChangeEvent ScoreChange;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ReplicatedLogItem

--------------------------------
Class: KSCashChangeList.KSScoreChangeList.SizedArraySerializer.ReplicatedLog

--------------------------------
Class: KSCharacterGender
	enum Apparel;//[Offset: 0x0, Size: 1]
	enum Vocal;//[Offset: 0x1, Size: 1]

--------------------------------
Class: KSPollBase.Object
	enum PollAudience;//[Offset: 0x28, Size: 1]
	FText PollTitle;//[Offset: 0x30, Size: 1]
	FText PollSuccessfulMessage;//[Offset: 0x48, Size: 1]
	FText PollUnsuccessfulMessage;//[Offset: 0x60, Size: 1]
	FText AffirmativeOption;//[Offset: 0x78, Size: 1]
	FText NegativeOption;//[Offset: 0x90, Size: 1]
	FText AffirmativeOptionVoteCastMessage;//[Offset: 0xa8, Size: 1]
	FText NegativeOptionVoteCastMessage;//[Offset: 0xc0, Size: 1]
	float PollLengthInSeconds;//[Offset: 0xd8, Size: 1]
	void OnPollStarted(KSGameState* GameState, int TeamNum);// 0x27667e0
	void OnPollPassed(KSGameState* GameState, int TeamNum);// 0x2766710
	void OnPollFailed(KSGameState* GameState, int TeamNum);// 0x2766640
	int GetNumberOfVotesToEnd(int VoterCount, bool bIsFullTeam);// 0x2765920
	bool CanPlayerProposeThisPoll(const KSPlayerState* Player);// 0x27650d0
	bool CanGameProposeThisPoll(const KSGameState* GameState);// 0x26d0400

--------------------------------
Class: KSPlayerModInputBinding
	FName ActionName;//[Offset: 0x0, Size: 1]
	bool bListenForPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bListenForRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSInteractionType.Object
	FName InteractionMode;//[Offset: 0x28, Size: 1]
	bool bInteractionStartsCameraLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	SkinnableAudioEvent CharacterStartSound;//[Offset: 0x38, Size: 1]
	SkinnableAudioEvent InteractableStartSound;//[Offset: 0x48, Size: 1]
	SkinnableAudioEvent LocalStartSound;//[Offset: 0x58, Size: 1]
	<enum,SkinnableAudioEvent> CharacterEndSound;//[Offset: 0x68, Size: 1]
	<enum,SkinnableAudioEvent> InteractableEndSound;//[Offset: 0xb8, Size: 1]
	<enum,SkinnableAudioEvent> LocalEndSound;//[Offset: 0x108, Size: 1]
	bool bAutomaticallyPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bAttachCharacterAutoAudioToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bAttachInteractableAutoAudioToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	KSParticleSystemAttachment CharacterStartEffect;//[Offset: 0x160, Size: 1]
	KSParticleSystemAttachment InteractableStartEffect;//[Offset: 0x198, Size: 1]
	<enum,KSParticleSystemAttachment> CharacterEndEffect;//[Offset: 0x1d0, Size: 1]
	<enum,KSParticleSystemAttachment> InteractableEndEffect;//[Offset: 0x220, Size: 1]
	ParticleSystemComponent* CurrentCharacterEffect;//[Offset: 0x270, Size: 1]
	ParticleSystemComponent* CurrentInteractableEffect;//[Offset: 0x278, Size: 1]
	FName StartInteractionMontageRow;//[Offset: 0x280, Size: 1]
	<GameplayTag,FName> TagToInteractMontageRowMap;//[Offset: 0x288, Size: 1]
	<enum,FName> EndInteractionMontageSection;//[Offset: 0x2d8, Size: 1]
	<enum,FName> EndInteractionMontageRow;//[Offset: 0x328, Size: 1]
	GameplayTagContainer DontSuppressRetrieveForWeaponTypes;//[Offset: 0x378, Size: 1]
	void PlayInteractionAnimation(bool bIsStart, KSCharacter* Character, Actor* InInteractionTarget, enum Result, Vector InteractableLocation);// 0x26cbfe0
	ParticleSystemComponent* MakeInteractableEffect(bool bIsStart, KSCharacter* Character, Actor* Interactable, enum Result, Vector InteractableLocation);// 0x26cbd70
	ParticleSystemComponent* MakeCharacterEffect(bool bIsStart, KSCharacter* Character, Actor* Interactable, enum Result, Vector InteractableLocation);// 0x26cbba0
	KSParticleSystemAttachment GetInteractableEffect(bool bIsStart, enum Result);// 0x26cb600
	KSParticleSystemAttachment GetCharacterEffect(bool bIsStart, enum Result);// 0x26cb450

--------------------------------
Class: SkinnableAudioEvent
	FName SoundRowName;//[Offset: 0x0, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSParticleSystemAttachment
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 1]
	FName SocketName;//[Offset: 0x8, Size: 1]
	Vector Scale;//[Offset: 0x10, Size: 1]
	Vector AttachmentOffset;//[Offset: 0x1c, Size: 1]
	Rotator AttachmentRotationOffset;//[Offset: 0x28, Size: 1]

--------------------------------
Class: HitReaction
	Vector WorldHitDirection;//[Offset: 0x0, Size: 1]
	float Damage;//[Offset: 0xc, Size: 1]
	float HitTime;//[Offset: 0x10, Size: 1]

--------------------------------
Class: FloatHitSpringState

--------------------------------
Class: MantleConfig
	FName MantleSequenceName;//[Offset: 0x0, Size: 1]
	AnimSequence* DefaultMantleSequence;//[Offset: 0x8, Size: 1]
	enum DistanceScaleMethod;//[Offset: 0x10, Size: 1]
	float IdealHeight;//[Offset: 0x14, Size: 1]
	float MaxHeight;//[Offset: 0x18, Size: 1]
	float DefaultMinHeight;//[Offset: 0x1c, Size: 1]
	float ShaveCutoffTime;//[Offset: 0x20, Size: 1]
	bool bHasDropSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bUseOnJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanStartWhileFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float EarlyOutTime;//[Offset: 0x28, Size: 1]
	bool bCanEndWithStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bCanEndWithSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bCanEndWithFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	AnimSequence* CachedSequence;//[Offset: 0x78, Size: 1]

--------------------------------
Class: BoneMirrorPair
	BoneReference BoneOne;//[Offset: 0x0, Size: 1]
	BoneReference BoneTwo;//[Offset: 0x10, Size: 1]
	Vector RotationFlipAxis;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BoneMirrorConfig
	BoneReference[] UnpairedMirrorBones;//[Offset: 0x0, Size: 1]
	BoneMirrorPair[] PairedMirrorBones;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSEquipmentManagerComponent.ActorComponent.Object
	<GameplayTag,KSEquipment*> EquippedInventory;//[Offset: 0xb0, Size: 1]
	KSEquipment*[] SlotlessInventory;//[Offset: 0x150, Size: 1]
	GameplayTagContainer MultiUseEquipPoints;//[Offset: 0x160, Size: 1]
	interface class None* EquipmentManagerOwner;//[Offset: 0x180, Size: 1]
	MulticastInlineDelegateProperty OnEquipmentAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentRemovedDel;//[Size: 1]
	float EmoteCooldownExpireTime;//[Offset: 0x208, Size: 1]
	float QuipCooldownExpireTime;//[Offset: 0x20c, Size: 1]
	float CommunicationCooldownExpireTime;//[Offset: 0x210, Size: 1]
	float RadialMenuItemCooldownExpireTime;//[Offset: 0x214, Size: 1]
	void SetEquipmentContainerOwner(out const interface classNone InEquipmentContainerOwner);// 0x269d1e0
	KSEquipment* GetEquipmentByEquipPoint(out const GameplayTag InEquipPoint);// 0x269c030

--------------------------------
Class: AuxiliaryWeaponInfo
	FName AuxiliarySlot;//[Offset: 0x0, Size: 1]
	KSWeapon* ParentWeapon;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WeaponStateChangeRequest
	uint16 RequestID;//[Offset: 0x0, Size: 1]
	bool bChangeWeaponState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	enum PreviousState;//[Offset: 0x3, Size: 1]
	enum NextState;//[Offset: 0x4, Size: 1]
	bool bChangeWeaponAimMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	enum AimMode;//[Offset: 0x6, Size: 1]
	RandomStream RandomStream;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAimLockData.KSAimAssistDataBase.DataAsset.Object
	<enum,bool> RequireInputForAimLock;//[Offset: 0x38, Size: 1]
	<enum,CurveVector*> AimLockCurve;//[Offset: 0x88, Size: 1]
	<enum,CurveFloat*> AimLockDistanceCurve;//[Offset: 0xd8, Size: 1]
	KSAimAssistPropertyBool[] RequireInputOverride;//[Offset: 0x128, Size: 1]
	KSAimAssistPropertyCurveVector[] LockCurveOverride;//[Offset: 0x138, Size: 1]
	KSAimAssistPropertyCurveFloat[] DistanceCurveOverride;//[Offset: 0x148, Size: 1]
	<enum,bool> FullRequireInputForAimLock;//[Offset: 0x158, Size: 1]
	<enum,CurveVector*> FullAimLockCurve;//[Offset: 0x1a8, Size: 1]
	<enum,CurveFloat*> FullAimLockDistanceCurve;//[Offset: 0x1f8, Size: 1]

--------------------------------
Class: KSAimAssistDataBase.DataAsset.Object
	enum JoyConFallback;//[Offset: 0x30, Size: 1]
	enum JoyConADSFallback;//[Offset: 0x31, Size: 1]
	enum TouchFallback;//[Offset: 0x32, Size: 1]
	enum TouchADSFallback;//[Offset: 0x33, Size: 1]
	enum PCGamepadADSFallback;//[Offset: 0x34, Size: 1]

--------------------------------
Class: KSAimAssistPropertyBool
	enum InputType;//[Offset: 0x0, Size: 1]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: KSAimAssistPropertyCurveVector
	enum InputType;//[Offset: 0x0, Size: 1]
	CurveVector* Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAimAssistPropertyCurveFloat
	enum InputType;//[Offset: 0x0, Size: 1]
	CurveFloat* Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAimSnapData.KSAimAssistDataBase.DataAsset.Object
	<enum,Rotator> MaxAimSnapRotation;//[Offset: 0x38, Size: 1]
	<enum,CurveFloat*> AimSnapDistanceCurve;//[Offset: 0x88, Size: 1]
	<enum,CurveVector*> AimSnapCurve;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: KSWeaponAssetDrop.KSItemDrop.Actor.Object
	MulticastInlineDelegateProperty OnProjectileSpawned;//[Size: 1]
	KSProjectile* ReturnProjectile;//[Offset: 0x3b8, Size: 1]
	KSWeaponComponent* WeaponComponent;//[Offset: 0x3c8, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x3d0, Size: 1]
	KSEquipmentId WeaponComponentEquipmentId;//[Offset: 0x3d8, Size: 1]
	KSWeaponAsset* CachedWeaponAsset;//[Offset: 0x3e0, Size: 1]
	BundledAmmoInfo BundledAmmo;//[Offset: 0x4d0, Size: 1]
	KSWeaponDropAttachmentContainer AttachmentContainer;//[Offset: 0x4f0, Size: 1]
	bool bAttachWeaponComponentOnDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	KSEquipmentContainer EquipmentContainer;//[Offset: 0x620, Size: 1]
	float ReleasedCachedTimeSeconds;//[Offset: 0x848, Size: 1]
	float CosmeticZOffset;//[Offset: 0x84c, Size: 1]
	void SetBundledAmmoToDefault();// 0x27c7540
	void OverrideDropAmmo(int ReserveAmmo, int AmmoInClip);// 0x27c7460
	void OnReturnProjectileStopped(out const HitResult HitResult);// 0x27c73a0
	void OnRep_ReturnProjectile();// 0x27c7380
	KSWeaponComponent* GetWeaponComponent();// 0x26a1d40
	KSWeaponAsset* GetWeaponAsset();// 0x26a1790
	KSProjectile* GetReturnProjectile();// 0x26a1ee0
	bool GetLabelInfoForFireModeType(out enum FireModeType);// 0x27c69a0
	bool GetLabelInfoForAmmoType(out enum AmmoType);// 0x27c68f0
	bool CanPickupReplenishAmmo();// 0x27c64a0
	void BroadcastPickupFailedInventoryFull(KSCharacter* Receiver);// 0x2766520
	bool AddAttachment(KSWeaponAttachment* InAttachment);// 0x27c62e0

--------------------------------
Class: KSProjectile.KSLagCompensatedActor.Actor.Object
	KSEquipmentContainer EquipmentContainer;//[Offset: 0x2d8, Size: 1]
	KSWeaponComponent* WeaponComponent;//[Offset: 0x500, Size: 1]
	KSEquipmentId WeaponComponentEquipmentId;//[Offset: 0x508, Size: 1]
	KSWeaponAsset* CachedWeaponAsset;//[Offset: 0x510, Size: 1]
	enum WeaponComponentType;//[Offset: 0x518, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0x520, Size: 1]
	GameplayTagContainer SkinTagContainer;//[Offset: 0x530, Size: 1]
	float HorizontalThrowSpeed;//[Offset: 0x568, Size: 1]
	float MaxSpeed;//[Offset: 0x56c, Size: 1]
	bool bModifyInitialSpeedWithPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	bool bDeadOrDownedDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	bool bCanBeIntercepted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 1]
	SceneComponent* CollisionComponent0;//[Offset: 0x578, Size: 1]
	ProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x580, Size: 1]
	HitResult ProjectileHit;//[Offset: 0x588, Size: 1]
	float LifeSpanAfterDeactivate;//[Offset: 0x610, Size: 1]
	bool bShouldHideOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	bool bStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 1]
	int NumBounces;//[Offset: 0x618, Size: 1]
	int NumPenetrations;//[Offset: 0x61c, Size: 1]
	float AdditionalPredictionTimeLenience;//[Offset: 0x630, Size: 1]
	float AdditionalPredictionArcTime;//[Offset: 0x634, Size: 1]
	float HitValidationLenience;//[Offset: 0x638, Size: 1]
	bool bValidateHitsWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	HitResult StoppingHit;//[Offset: 0x640, Size: 1]
	bool bAttachWhenStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	bool bDetachWhenBumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	bool bSimulatePhysicsWhenStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ca, Size: 1]
	bool bFreezeProjectileOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cb, Size: 1]
	bool bDeflectOffShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	bool bDealPointDamageAfterDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	float DebugDrawLifetime;//[Offset: 0x6e4, Size: 1]
	bool bCreateClusterSegmentsOnStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	bool bCreateClusterSegmentsOnExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 1]
	MulticastInlineDelegateProperty OnWeaponAssetSet;//[Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x710, Size: 1]
	KSWeaponAsset* ParentWeaponAsset;//[Offset: 0x718, Size: 1]
	KSWeaponAsset* DamageWeaponAssetOverride;//[Offset: 0x720, Size: 1]
	KSWeapon* SpawningWeapon;//[Offset: 0x728, Size: 1]
	float TimeCooked;//[Offset: 0x730, Size: 1]
	Vector SpawnLocation;//[Offset: 0x734, Size: 1]
	Rotator SpawnRotation;//[Offset: 0x740, Size: 1]
	PrimitiveComponent* PrimitiveCollisionComponent;//[Offset: 0x750, Size: 1]
	Vector LocationLastFrame;//[Offset: 0x758, Size: 1]
	bool bDestroyUponMVPStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x764, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x765, Size: 1]
	enum DeactivateExplosionType;//[Offset: 0x766, Size: 1]
	bool bDeactivateInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x767, Size: 1]
	MulticastInlineDelegateProperty OnProjectileDeactivated;//[Size: 1]
	MulticastInlineDelegateProperty OnProjectileInitializationComplete;//[Size: 1]
	bool bCanBeKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	float MaxHealth;//[Offset: 0x794, Size: 1]
	bool bSetInstigatorToKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 1]
	float CurrentHealth;//[Offset: 0x79c, Size: 1]
	float LifeSpanAfterKilled;//[Offset: 0x7a0, Size: 1]
	bool bExplodeOnKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	Controller* FriendlyKiller;//[Offset: 0x7a8, Size: 1]
	bool bProjectileKillPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 1]
	MulticastInlineDelegateProperty OnProjectileKilled;//[Size: 1]
	bool bAffectsFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bAllowFriendlyPlayersToDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	bool bPenetratesFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ca, Size: 1]
	bool bAffectsEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cb, Size: 1]
	bool bPenetratesEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 1]
	bool bHasPlayedExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd, Size: 1]
	MulticastInlineDelegateProperty OnPlayExplosion;//[Size: 1]
	ParticleSystem* DefaultSpang;//[Offset: 0x7e0, Size: 1]
	<byte,ParticleSystem*> SurfaceSpangs;//[Offset: 0x7e8, Size: 1]
	float SpinsPerSecond;//[Offset: 0x838, Size: 1]
	float SpeedToReachSpinsPerSecond;//[Offset: 0x83c, Size: 1]
	Vector SpinAxis;//[Offset: 0x840, Size: 1]
	bool bSpinAfterDetaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool bCanBreakDestructibles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	KSInteractableComponent* InteractableComponent;//[Offset: 0x850, Size: 1]
	bool bCanReclaim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	bool bDestroyOnReclaim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	float InteractionDistanceOffset;//[Offset: 0x85c, Size: 1]
	enum ReclaimPermissions;//[Offset: 0x860, Size: 1]
	bool bShouldRestoreWeaponAssetOnReclaim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	KSCharacter* Reclaimer;//[Offset: 0x868, Size: 1]
	bool bReclaimPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	int ReclaimStock;//[Offset: 0x874, Size: 1]
	MulticastInlineDelegateProperty OnReclaim;//[Size: 1]
	bool bShouldModifyVisibilityChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	float VisibilityDistance;//[Offset: 0x88c, Size: 1]
	bool bShowOnHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	Object* WidgetIcon;//[Offset: 0x898, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0x8a0, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0x8c8, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x8f0, Size: 1]
	enum WidgetIconAudience;//[Offset: 0x918, Size: 1]
	enum OverlayIconAudience;//[Offset: 0x919, Size: 1]
	ProjectileWidgetInfo[] WidgetInfos;//[Offset: 0x920, Size: 1]
	int OriginalOwnerId;//[Offset: 0x930, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x938, Size: 1]
	void UpdateSpinRotation(float DeltaSeconds);// 0x2767d70
	void UpdateIgnoreActorWhenMovingOnCollider();// 0x2767d50
	void TriggerExplosionFromHitResult(out const HitResult HitResult, enum ExplosionType);// 0x2767c20
	void TriggerExplosion(out const ProjectileExplosionInfo ExplosionInfo);// 0x2767b80
	void TakeoverDelayComplete();// 0x2767b60
	void SpawnSpang(out const HitResult Hit);// 0x2767a80
	void SimulateExplosion();// 0x2cbecb0
	bool ShouldPenetrate(out const HitResult HitResult);// 0x2767820
	bool ShouldBounceOff(out const HitResult HitResult);// 0x2767750
	void SetWeaponAsset(KSWeaponAsset* InAsset);// 0x2767620
	void SetSkinObjectParent(MultiSkinObject* InParent);// 0x2cbecb0
	void SetHorizontalThrowSpeed(float InSpeed);// 0x2767420
	void SetFumbled();// 0x2767400
	void SetDamageOverrideWeaponAsset(KSWeaponAsset* InWeaponAsset);// 0x2767380
	void ServerProcessPredictedHits(const LaggedProjectileHit[] PredictedHits);// 0x27672c0
	void RestartMovementAfterStop();// 0x1f121c0
	void RecordPredictedHits(out HitResult[] HitResults, enum PredictionType);// 0x2767190
	void RecordPredictedHit(out const HitResult HitResult, enum PredictionType);// 0x2767080
	bool Reclaim(KSCharacter* ReclaimingCharacter);// 0x2708fb0
	void PlayFizzle(out const ProjectileExplosionInfo ExplosionInfo);// 0x2cbecb0
	void PlayExplosion(out const ProjectileExplosionInfo ExplosionInfo);// 0x2cbecb0
	void OnTimeCookedSet();// 0x1eeffa0
	void OnRootComponentDetached(SceneComponent* DetachedComponent);// 0x2766ed0
	void OnRep_WeaponAsset();// 0x1f16430
	void OnRep_TimeCooked();// 0x2766eb0
	void OnRep_StoppingHit();// 0x2766e90
	void OnRep_ReclaimStock();// 0x2766e70
	void OnRep_ProjectileHit();// 0xdd2860
	void OnRep_ParentWeaponAsset();// 0x1f2b930
	void OnRep_CurrentHealth();// 0x2766e30
	bool OnProjectileStopped(out const HitResult HitResult);// 0x2766aa0
	bool OnProjectilePenetrated(out const HitResult HitResult);// 0x27669d0
	bool OnProjectileBounced(out const HitResult HitResult, out const Vector ImpactVelocity);// 0x27668b0
	void OnNewPlayerState(KSPlayerState* NewState);// 0x27665b0
	void OnKilled(Controller* EventInstigator);// 0x2766520
	void OnInstigatorChanged();// 0x1f11f90
	void NotifyPredictedHitRejected();// 0x1f128e0
	void NativeOnProjectileStopped(out const HitResult HitResult);// 0x2766460
	void NativeOnProjectilePenetrated(out const HitResult HitResult);// 0x27663a0
	void NativeOnProjectileBounced(out const HitResult HitResult, out const Vector ImpactVelocity);// 0x2766290
	float ModifyDamageDealt(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor);// 0x27660c0
	bool IsStopped();// 0x27660a0
	bool IsFullyCooked();// 0x2766070
	bool IsActive();// 0x2766050
	void HandleMVPPhase(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x2765ec0
	KSWeaponComponent* GetWeaponComponent();// 0xf89c90
	KSWeaponAsset* GetWeaponAsset();// 0x2765ea0
	float GetTimeCooked();// 0x2765e80
	Rotator GetSpawnRotation();// 0x2765e30
	Vector GetSpawnLocation();// 0x2765e00
	KSWeapon* GetSpawningWeapon();// 0x2765e60
	int GetReclaimStock();// 0x2765dc0
	FText GetReclaimPromptText(KSCharacter* Character);// 0x2765cc0
	FText GetReclaimProgressText(KSCharacter* Character);// 0x2765bc0
	SceneComponent* GetProjectileUpdatedComponent();// 0x2765ba0
	KSWeaponAsset* GetParentWeaponAsset();// 0x27659f0
	void GetOutlineableMeshes(out PrimitiveComponent*[] OutMeshes);// 0x2cbecb0
	int GetNumPenetrations();// 0x2765900
	int GetNumBounces();// 0x27658e0
	ProjectileMovementComponent* GetMovementComponent();// 0x27658c0
	float GetHorizontalThrowSpeed();// 0x2765860
	KSWeaponAsset* GetDamageWeaponAsset();// 0x2765830
	Controller* GetDamageInstigator();// 0x2765800
	float GetDamageFalloffRangeScaler();// 0x27657d0
	float GetDamageFalloffRangeExtender();// 0x27657a0
	SceneComponent* GetComponentToRotate();// 0x2765770
	KSProjectileClusterComponent* GetClusterComponent();// 0x2765740
	void GetAttachments(out KSWeaponAttachment*[] OutWeaponAttachments);// 0x2765690
	void FixupWeaponComponent();// 0x1f12780
	void DoRadialDamageDefault();// 0x27654f0
	bool DoesPenetrateFriendly();// 0x2765570
	bool DoesPenetrateEnemy();// 0x2765550
	bool DoesAffectFriendly();// 0x2765530
	bool DoesAffectEnemy();// 0x2765510
	Actor*[] DetermineIgnoredActors(out const HitResult HitResult);// 0x27653e0
	void Deactivate();// 0x1f2baf0
	void CreateClusterSegmentsFromStoppingHit();// 0x27653c0
	float ComponentTakeDamage(PrimitiveComponent* HitComponent, float DamageAmount);// 0x27652f0
	void ChangeOwnerWithCollisionUpdates(Actor* NewOwner, Pawn* NewInstigator);// 0x2765170
	bool CanEverBreakDestructibles();// 0x27650a0
	bool CanCharacterReclaim(KSCharacter* QueriedCharacter);// 0x2765000
	void BroadcastExplosion(const ProjectileExplosionInfo ExplosionInfo);// 0x2764ef0
	bool AffectsActor(Actor* InActor);// 0x2764e50
	bool AddAttachment(KSWeaponAttachment* InAttachment);// 0x2764dc0

--------------------------------
Class: KSLagCompensatedActor.Actor.Object
	KSLagCompensatedActor* RealActor;//[Offset: 0x220, Size: 1]
	KSLagCompensatedActor* FakeActor;//[Offset: 0x228, Size: 1]
	float PredictedSpawnTimeoutTime;//[Offset: 0x230, Size: 1]
	bool bDestroyFakeOnYieldToReal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	int DefaultTeamNum;//[Offset: 0x238, Size: 1]
	SerializedMctsNetId InstigatorId;//[Offset: 0x240, Size: 1]
	uint64 LagCompActorID;//[Offset: 0x248, Size: 1]
	void YieldToRealActor();// 0x1ef10c0
	void TryToDestroy();// 0x26e83c0
	void SetLagCompActorIDFromWeapon(KSWeapon* SpawningWeapon);// 0x26e8110
	void SetLagCompActorIDFromParentProjectile(KSProjectile* ParentProjectile, int Index);// 0x26e8050
	void SetLagCompActorIDFromParentAgent(KSAgentBase* ParentAgent, int Index);// 0x26e7f90
	void SetLagCompActorIDFromModInstance(KSPlayerModInstance* SpawningModInst);// 0x26e7f10
	void RealActorTakeOver();// 0x1ef4dd0
	void RealActorDestroyed(Actor* Real);// 0x26e7690
	void OnTakeOverAsRealActor();// 0x1eef160
	void OnRep_LagCompActorID();// 0x26e73e0
	void OnRealActorSpawn(KSLagCompensatedActor* Real);// 0x26aaaa0
	void OnPlayerStateChanged(PlayerState* InPlayerState);// 0x26e7360
	void OnPlayerSpawned(KSCharacterBase* InCharacter);// 0x26e72e0
	bool IsClientPredictedActor();// 0x26e6e50
	bool IsActiveRealActor();// 0x26e6cc0
	void InitializeRealActor();// 0xcf5d10
	void InitializeFakeActor();// 0x268d7b0
	void FakeDestroyCleanup();// 0x1ef3000

--------------------------------
Class: KSAgentBase.KSLagCompensatedActor.Actor.Object
	MulticastInlineDelegateProperty OnAgentRefund;//[Size: 1]
	bool BeginMissionOnPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	InterpToMovementComponent* MovementComponent;//[Offset: 0x288, Size: 1]
	BoxComponent* CollisionBox;//[Offset: 0x290, Size: 1]
	Controller* OwningPlayer;//[Offset: 0x298, Size: 1]
	SkinnableMergedMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x2a8, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0x2b0, Size: 1]
	FName[] FullKeywordList;//[Offset: 0x2c0, Size: 1]
	float MaxHealth;//[Offset: 0x2d0, Size: 1]
	enum RefundMethod;//[Offset: 0x2d4, Size: 1]
	KSWeaponAsset* AssociatedWeaponAsset;//[Offset: 0x2d8, Size: 1]
	float CurrentHealth;//[Offset: 0x2e0, Size: 1]
	MulticastInlineDelegateProperty OnHealthUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnAgentMissionBegin;//[Size: 1]
	int OriginalOwnerId;//[Offset: 0x308, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x310, Size: 1]
	void RefundAgentAsset();// 0xcf5e70
	void OnRep_CurrentHealth();// 0x2617020
	void OnOwnerControlTransferred(KSPlayerState* OldPlayerState, KSPlayerState* NewPlayerState);// 0x2616ea0
	void OnMissionBegin();// 0x2cbecb0
	void MovementPlaybackStop(out const HitResult ImpactResult, float Time);// 0x2616ce0
	bool IsOwnerLocal();// 0x2616cb0
	KSPlayerState* GetPlayerStateOwner();// 0x2616ad0
	KSCharacter* GetCharacterOwner();// 0x26169e0
	KSWeaponAsset* GetAssociatedWeaponAsset();// 0x26169c0
	void BroadcastMissionBegin();// 0x1ef4110

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xf0, Size: 1]
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	enum TeleportType;//[Offset: 0xf9, Size: 1]
	enum BehaviourType;//[Offset: 0xfa, Size: 1]
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	MulticastInlineDelegateProperty OnInterpToReverse;//[Size: 1]
	MulticastInlineDelegateProperty OnInterpToStop;//[Size: 1]
	MulticastInlineDelegateProperty OnWaitBeginDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnWaitEndDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnResetDelegate;//[Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x150, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x154, Size: 1]
	InterpControlPoint[] ControlPoints;//[Offset: 0x158, Size: 1]
	void StopSimulating(out const HitResult HitResult);// 0x44bd370
	void RestartMovement(float InitialDirection);// 0x44bd2f0
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2cbecb0
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2cbecb0
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2cbecb0
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2cbecb0
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2cbecb0
	void FinaliseControlPoints();// 0x44bd2d0

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 1]
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x448, Size: 1]
	float LineThickness;//[Offset: 0x454, Size: 1]
	void SetLineThickness(float InLineThickness);// 0x4471020
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x4470f40
	Vector GetUnscaledBoxExtent();// 0x44707a0
	Vector GetScaledBoxExtent();// 0x4470730

--------------------------------
Class: ProjectileExplosionInfo
	enum ExplosionType;//[Offset: 0x0, Size: 1]
	byte SurfaceType;//[Offset: 0x1, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x4, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSEquipmentContainer.FastArraySerializer
	Actor* Owner;//[Offset: 0x108, Size: 1]
	interface class None* OwnerAsEquipmentContainerOwner;//[Offset: 0x110, Size: 1]
	<KSEquipmentId,KSEquipmentContainerEntry> PendingEquipment;//[Offset: 0x120, Size: 1]
	KSEquipmentContainerEntry[] Equipment;//[Offset: 0x170, Size: 1]
	KSEquipmentContainerEntry[] PropEquipment;//[Offset: 0x180, Size: 1]
	uint16 NextEquipmentId;//[Offset: 0x190, Size: 1]
	uint16 NextPropId;//[Offset: 0x192, Size: 1]
	KSEquipmentContainerEntry[] StaleEquipment;//[Offset: 0x198, Size: 1]

--------------------------------
Class: KSEquipmentContainerEntry.FastArraySerializerItem
	uint16 EquipmentId;//[Offset: 0xc, Size: 1]
	uint16 ParentEquipmentId;//[Offset: 0x10, Size: 1]
	GameplayTag EquipPoint;//[Offset: 0x14, Size: 1]
	bool bAlwaysReplicateExtraInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	uint16 ExtraInfo;//[Offset: 0x26, Size: 1]
	KSItem* Item;//[Offset: 0x30, Size: 1]
	KSItem* LocalItem;//[Offset: 0x38, Size: 1]
	bool bWeaponComponentIsReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	KSEquipmentCosmeticComponent* CosmeticComponent;//[Offset: 0x44, Size: 1]
	KSWeaponAttachmentCosmeticInst* AttachmentCosmeticComponent;//[Offset: 0x4c, Size: 1]
	bool bMarkedStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	KSItem* ParentAsset;//[Offset: 0x90, Size: 1]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf0, Size: 1]
	float MaxSpeed;//[Offset: 0xf4, Size: 1]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf8, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf8, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf8, Size: 1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf8, Size: 1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf8, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf8, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf9, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf9, Size: 1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf9, Size: 1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf9, Size: 1]
	float PreviousHitTime;//[Offset: 0xfc, Size: 1]
	Vector PreviousHitNormal;//[Offset: 0x100, Size: 1]
	float ProjectileGravityScale;//[Offset: 0x10c, Size: 1]
	float Buoyancy;//[Offset: 0x110, Size: 1]
	float Bounciness;//[Offset: 0x114, Size: 1]
	float Friction;//[Offset: 0x118, Size: 1]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x11c, Size: 1]
	float MinFrictionFraction;//[Offset: 0x120, Size: 1]
	MulticastInlineDelegateProperty OnProjectileBounce;//[Size: 1]
	MulticastInlineDelegateProperty OnProjectileStop;//[Size: 1]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 1]
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x158, Size: 1]
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 1]
	float InterpLocationTime;//[Offset: 0x160, Size: 1]
	float InterpRotationTime;//[Offset: 0x164, Size: 1]
	float InterpLocationMaxLagDistance;//[Offset: 0x168, Size: 1]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x16c, Size: 1]
	void StopSimulating(out const HitResult HitResult);// 0x456e730
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x456e6a0
	void SetInterpolatedComponent(SceneComponent* Component);// 0x456e510
	void ResetInterpolation();// 0x26ff3d0
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2cbecb0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x2cbecb0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x456e2a0
	Vector LimitVelocity(Vector NewVelocity);// 0x456e1f0
	bool IsVelocityUnderSimulationThreshold();// 0x456e190
	bool IsInterpolationComplete();// 0x456e160

--------------------------------
Class: KSInteractableComponent.ActorComponent.Object
	class KSInteractionType* InteractionType;//[Offset: 0xb0, Size: 1]
	int InteractionPriority;//[Offset: 0xb8, Size: 1]
	enum InputType;//[Offset: 0xbc, Size: 1]
	float InteractionDuration;//[Offset: 0xc0, Size: 1]
	bool bPredictInteractionLocally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool bAutomaticInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool bAllowMultipleInteractors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	bool bCanInteractWithModifiedRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 1]
	bool bShouldCauseWeaponRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	FName AnimationTag;//[Offset: 0xcc, Size: 1]
	bool bCanInteractFromBehind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bInteractRestrictsMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool bCanInteractWhileSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool bCanInteractWhileVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool bMustCrouchWhileInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	KSInteractableCameraTransition CameraTransition;//[Offset: 0xe0, Size: 1]
	bool bHiddenInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bShouldDisplayPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool bShouldDisplayProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]
	MulticastInlineDelegateProperty OnHoveringInteractorsChanged;//[Size: 1]
	int NumActiveInteractions;//[Offset: 0x128, Size: 1]
	bool bInteractionBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	KSInteractionBlocker[] InteractionBlockers;//[Offset: 0x130, Size: 1]
	Actor*[] HoveringInteractors;//[Offset: 0x140, Size: 1]
	KSInteractionManager*[] ActiveInteractions;//[Offset: 0x150, Size: 1]
	bool ShouldPredictInteractionLocally();// 0x26cc690
	bool ShouldInteractRestrictMovement();// 0x26cc670
	bool ShouldDisplayPrompt();// 0x26cc650
	bool ShouldDisplayProgress();// 0x26cc630
	bool ShouldCrouchWhileInteracting();// 0x26cc610
	bool ShouldCauseWeaponRetrieve();// 0x26cc5f0
	void RemoveInteractionBlocker(KSInteractionBlocker InInteractionBlocker);// 0x26cc220
	void RemoveHoveringInteractor(Actor* InInteractor);// 0x26cc1a0
	bool IsHiddenInteraction();// 0xe69060
	bool IsAutomaticInteraction();// 0x26cbb80
	class KSInteractionType GetInteractionType();// 0x25fa760
	int GetInteractionPriority();// 0x26cb7f0
	float GetInteractionDuration();// 0x2607980
	enum GetInputType();// 0x2689b70
	KSInteractableCameraTransition GetCameraTransition();// 0x26cb410
	FName GetAnimationTag();// 0x26cb340
	bool CanInteractWithModifiedRange();// 0x26cadf0
	bool CanInteractWhileVaulting();// 0x26cadd0
	bool CanInteractWhileSkydiving();// 0x26cadb0
	bool CanInteractFromBehind();// 0x26cad90
	bool AllowsMultipleInteractors();// 0x26cad70
	void AddInteractionBlocker(KSInteractionBlocker InInteractionBlocker);// 0x26cacf0

--------------------------------
Class: KSInteractableCameraTransition
	FName CameraName;//[Offset: 0x0, Size: 1]
	float TransitionInTime;//[Offset: 0x8, Size: 1]
	byte TransitionInFunction;//[Offset: 0xc, Size: 1]
	float TransitionInExp;//[Offset: 0x10, Size: 1]
	float TransitionOutTime;//[Offset: 0x14, Size: 1]
	bool bForceCameraShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	enum CameraShoulder;//[Offset: 0x19, Size: 1]
	float RotationLockAngle;//[Offset: 0x1c, Size: 1]
	bool RotationLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bLockPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bLockYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool bFaceInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool bCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	class CameraShake* CameraShake;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSInteractionBlocker
	FName BlockReason;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSInteractionManager.ActorComponent.Object
	float CachedInteractionTimeStamp;//[Offset: 0xe8, Size: 1]
	byte InteractRequestId;//[Offset: 0xf0, Size: 1]
	KSInteractionState* State;//[Offset: 0xf8, Size: 1]
	KSInteractionState* PreviousState;//[Offset: 0x100, Size: 1]
	KSCharacter* User;//[Offset: 0x108, Size: 1]
	interface class None* Interactable;//[Offset: 0x110, Size: 1]
	KSInteractableCameraTransition CameraTransition;//[Offset: 0x120, Size: 1]
	void ServerTap(bool bAllowTapAsHold);// 0x26cc530
	void ServerStartNew(int InInteractionId, Actor* InInteractable, KSCharacter* InUser);// 0x26cc400
	void ServerHoldRelease();// 0x26cc3b0
	void ServerHold(bool bAllowHoldAsTap);// 0x26cc2f0
	void ServerCancel();// 0x26cc2a0
	void OnInteractableDestroyed(Actor* DestroyedInteractable);// 0x26cbf40
	void ClientInteractionStopped(int InInteractionId, enum Result);// 0x26cafb0
	void ClientInteractionStarted(int InInteractionId, float Duration);// 0x26caee0

--------------------------------
Class: KSInteractionState.Object
	enum Result;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ProjectileWidgetInfo

--------------------------------
Class: LaggedProjectileHit
	HitResult HitResult;//[Offset: 0x0, Size: 1]
	float ClientHitTimeStamp;//[Offset: 0x88, Size: 1]
	float AdditionalPredictionTime;//[Offset: 0x8c, Size: 1]
	enum PredictionType;//[Offset: 0x90, Size: 1]

--------------------------------
Class: KSProjectileClusterComponent.ActorComponent.Object
	enum ProjectileClusterSpreadType;//[Offset: 0xbc, Size: 1]
	Vector ClusterSegmentSpawnOffset;//[Offset: 0xc0, Size: 1]
	bool bLinkSpreadGrenades;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bIgnoreZAxisForClusterDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool bAlwaysUseInitialClusterDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	float RandomMinPitch;//[Offset: 0xd0, Size: 1]
	float RandomMaxPitch;//[Offset: 0xd4, Size: 1]
	float RandomMinYaw;//[Offset: 0xd8, Size: 1]
	float RandomMaxYaw;//[Offset: 0xdc, Size: 1]
	KSProjectileClusterSegment[] ClusterSegmentDefinitions;//[Offset: 0xe0, Size: 1]
	KSProjectile*[] ClusterSegments;//[Offset: 0xf0, Size: 1]
	MulticastInlineDelegateProperty OnOwnedSegmentKilled;//[Size: 1]
	void OnSegmentKilled(KSProjectile* Segment);// 0x2772330
	KSProjectile*[] GetSpawnedSegments();// 0x261e890
	Vector GetInitialClusterDirection();// 0x2772000
	Transform GetImpactRelativeSegmentTransform(HitResult Hit, Vector PassThroughVector, Vector AdditionalOffset);// 0x2771e20
	Vector GetClusterSegmentSpawnOffset();// 0x2771df0
	KSProjectileClusterSegment[] GetClusterSegmentDefinitions();// 0x2771d60
	void CreateClusterSegments(HitResult Hit, KSWeapon* WeaponUsed);// 0x2771c20

--------------------------------
Class: KSProjectileClusterSegment
	class KSProjectile* ProjectileClass;//[Offset: 0x0, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x8, Size: 1]
	Vector SpawnOffset;//[Offset: 0x10, Size: 1]
	Rotator InitialRotation;//[Offset: 0x1c, Size: 1]
	Vector Direction;//[Offset: 0x28, Size: 1]

--------------------------------
Class: BundledAmmoInfo
	enum BundleType;//[Offset: 0x0, Size: 1]
	int ReserveAmmo;//[Offset: 0x4, Size: 1]
	int AmmoInClip;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSWeaponDropAttachmentContainer.FastArraySerializer
	KSWeaponDropAttachmentContainerEntry[] Attachments;//[Offset: 0x108, Size: 1]
	KSWeaponAssetDrop* Owner;//[Offset: 0x120, Size: 1]

--------------------------------
Class: KSWeaponDropAttachmentContainerEntry.FastArraySerializerItem
	KSWeaponAttachment* Attachment;//[Offset: 0x10, Size: 1]
	GameplayTag ReplicatedAttachPoint;//[Offset: 0x20, Size: 1]
	uint16 ExtraInfo;//[Offset: 0x34, Size: 1]

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 1]
	Vector2D OutVal;//[Offset: 0x4, Size: 1]
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 1]
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 1]
	byte InterpMode;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WeaponStateGraph

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 1]
	float MinimumDamage;//[Offset: 0x4, Size: 1]
	float InnerRadius;//[Offset: 0x8, Size: 1]
	float OuterRadius;//[Offset: 0xc, Size: 1]
	float DamageFalloff;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PrefireSkipWindow
	float WindowDuration;//[Offset: 0x0, Size: 1]
	float WindowExpiration;//[Offset: 0x4, Size: 1]
	FString LungeMontageSequence;//[Offset: 0x8, Size: 1]
	FString TargetMontageSequence;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KickbackModule.Object
	InterpCurveVector2D MakeKickbackInstance(int ShotIndex, float AbsoluteMaxDuration);// 0x25fa930
	float GetMaximumVerticalKick();// 0x25fa820
	float GetMaximumHorizontalKick();// 0x25fa7e0

--------------------------------
Class: ADSBlurValues
	bool AdsBlurDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlurDistance;//[Offset: 0x4, Size: 1]
	float MaskExponential;//[Offset: 0x8, Size: 1]
	float HardnessOfMask;//[Offset: 0xc, Size: 1]
	float SphereMaskRadius;//[Offset: 0x10, Size: 1]
	float SphereMaskScaleX;//[Offset: 0x14, Size: 1]
	float SphereMaskScaleY;//[Offset: 0x18, Size: 1]
	bool EnableCubeMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float CubeMaskPosX;//[Offset: 0x20, Size: 1]
	float CubeMaskPosY;//[Offset: 0x24, Size: 1]
	float CubeMaskScaleX;//[Offset: 0x28, Size: 1]
	float CubeMaskScaleY;//[Offset: 0x2c, Size: 1]
	bool EnableCustomMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Texture2D* CustomMaskTexture;//[Offset: 0x38, Size: 1]

--------------------------------
Class: DropItemParameters
	int OriginalOwnerId;//[Offset: 0x0, Size: 1]
	int OriginalOwnerTeamNum;//[Offset: 0x4, Size: 1]
	bool bIsPlayerDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bAllowAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int ObjectiveId;//[Offset: 0xc, Size: 1]
	KSWeaponAttachment*[] Attachments;//[Offset: 0x10, Size: 1]
	int Price;//[Offset: 0x20, Size: 1]
	enum DropPickupConfig;//[Offset: 0x24, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x28, Size: 1]

--------------------------------
Class: DeferredViewTargetChangeInfo
	Actor* OldTarget;//[Offset: 0x0, Size: 1]
	Actor* NewTarget;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ClientContext
	FString InstallationUUID;//[Offset: 0x0, Size: 1]
	FString LoginSessionUUID;//[Offset: 0x10, Size: 1]
	FString ClientCurrentLanguage;//[Offset: 0x20, Size: 1]
	int ClientSelectedSiteId;//[Offset: 0x30, Size: 1]
	int DivertFromQueueId;//[Offset: 0x34, Size: 1]
	int DivertToQueueId;//[Offset: 0x38, Size: 1]
	enum QueueDivertType;//[Offset: 0x3c, Size: 1]
	float ShelteredMMAttemptTimeout;//[Offset: 0x40, Size: 1]
	float ShelteredMMLevelLimit;//[Offset: 0x44, Size: 1]
	int ForcedBotMatchLimit;//[Offset: 0x48, Size: 1]
	int MercyMatchLossesRequired;//[Offset: 0x4c, Size: 1]
	int SisterQueueId;//[Offset: 0x50, Size: 1]
	FString BuildVersion;//[Offset: 0x58, Size: 1]
	int ScreenResolution;//[Offset: 0x68, Size: 1]
	int ViewportSizeX;//[Offset: 0x6c, Size: 1]
	int ViewportSizeY;//[Offset: 0x70, Size: 1]
	float resolution_quality;//[Offset: 0x74, Size: 1]
	float cpu_benchmark_results;//[Offset: 0x78, Size: 1]
	float gpu_benchmark_results;//[Offset: 0x7c, Size: 1]
	FString DeviceModel;//[Offset: 0x80, Size: 1]
	FString CPUType;//[Offset: 0x90, Size: 1]
	int CPUCores;//[Offset: 0xa0, Size: 1]
	FString GPUType;//[Offset: 0xa8, Size: 1]
	int TotalRamMegabytes;//[Offset: 0xb8, Size: 1]
	int AvailableRamMegabytes;//[Offset: 0xbc, Size: 1]
	float CPUBenchmarkResults;//[Offset: 0xc0, Size: 1]
	float GPUBenchmarkResults;//[Offset: 0xc4, Size: 1]
	float ResolutionQuality;//[Offset: 0xc8, Size: 1]
	int GlobalQuality;//[Offset: 0xcc, Size: 1]
	int ViewDistanceQuality;//[Offset: 0xd0, Size: 1]
	int AntiAliasingQuality;//[Offset: 0xd4, Size: 1]
	int ShadowQuality;//[Offset: 0xd8, Size: 1]
	int PostProcessQuality;//[Offset: 0xdc, Size: 1]
	int TextureQuality;//[Offset: 0xe0, Size: 1]
	int EffectsQuality;//[Offset: 0xe4, Size: 1]
	int FoliageQuality;//[Offset: 0xe8, Size: 1]
	int ShadingQuality;//[Offset: 0xec, Size: 1]
	FString DesiredPlatforms;//[Offset: 0xf0, Size: 1]
	FString DesiredInputs;//[Offset: 0x100, Size: 1]

--------------------------------
Class: ClientInputTypeUse
	int16 InputTypeKbm;//[Offset: 0x0, Size: 1]
	int16 InputTypeGpad;//[Offset: 0x2, Size: 1]
	int16 InputTypeTouch;//[Offset: 0x4, Size: 1]
	int16 InputTypeOther;//[Offset: 0x6, Size: 1]

--------------------------------
Class: ClientStatistics
	float smoothed;//[Offset: 0x0, Size: 1]
	float Maximum;//[Offset: 0x4, Size: 1]
	float Minimum;//[Offset: 0x8, Size: 1]
	float average;//[Offset: 0xc, Size: 1]
	int SampleCount;//[Offset: 0x10, Size: 1]
	double DoublePrecisionSmoothed;//[Offset: 0x18, Size: 1]
	double DoublePrecisionAverage;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSPlayerShotListener.ActorComponent.Object
	MulticastInlineDelegateProperty MinimapShotNofify;//[Size: 1]
	FString[] EnemyShotPingWidgetPools;//[Offset: 0x118, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x128, Size: 1]
	void OnKSGameStateDestroyed(Actor* Actor);// 0x275e800
	void ClientRecieveShotInfo(KSClientShotInfo ShotInfo);// 0x275a4e0
	void Authority_ProcessShotInfo(KSGlobalShotInfo ShotInfo);// 0x275a020

--------------------------------
Class: KSClientShotInfo
	Vector FiringLocation;//[Offset: 0x0, Size: 1]
	int UniqueId;//[Offset: 0xc, Size: 1]
	float FadeTime;//[Offset: 0x10, Size: 1]
	enum PingType;//[Offset: 0x14, Size: 1]

--------------------------------
Class: RenderThreadInputHandler.Object

--------------------------------
Class: KSGamepadLookSpeedManager.Object
	KSPlayerController* PlayerController;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KickbackPlayback
	float AccumulatedTime;//[Offset: 0x0, Size: 1]
	InterpCurveVector2D KickbackCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAimAssistComponent.ActorComponent.Object
	KSPlayerController* PlayerOwner;//[Offset: 0xb0, Size: 1]
	RankedAimAssistTarget[] AssistTargetStack;//[Offset: 0xb8, Size: 1]
	float CurrentTargetWeightStickiness;//[Offset: 0xc8, Size: 1]
	float ProjectionSpaceStackBoundary;//[Offset: 0xcc, Size: 1]
	bool bUseStackBoundaryFovScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	float FovBaseline;//[Offset: 0xd4, Size: 1]
	CurveFloat* AimAssistEffectivenessCurve;//[Offset: 0xd8, Size: 1]
	enum ActivationType;//[Offset: 0xe0, Size: 1]
	enum FrictionAllowedInputMode;//[Offset: 0xe1, Size: 1]
	enum LockAllowedInputMode;//[Offset: 0xe2, Size: 1]
	enum SnapAllowedInputMode;//[Offset: 0xe3, Size: 1]
	enum CorrectionAllowedInputMode;//[Offset: 0xe4, Size: 1]
	bool bAssistGadgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bAimLockUsesTargetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bAimLockMeshSmoothCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	bool bAimLockUsesOwnVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 1]
	bool bComplexAimLockDeltaRotCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bComplexLookLocationCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	float MaxAimLockEvaluationInterval;//[Offset: 0xf4, Size: 1]
	float KickbackIgnoreFactor;//[Offset: 0xf8, Size: 1]
	float CrossAxisWeaknessPoint;//[Offset: 0xfc, Size: 1]
	bool bOldLockValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	Vector OldLockRelativeLocation;//[Offset: 0x104, Size: 1]
	Rotator OldInputRot;//[Offset: 0x110, Size: 1]
	Object* LastAimAssistTarget;//[Offset: 0x120, Size: 1]
	bool bLastTargetCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bLastSelfCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	Vector2D LastLockAssistPosition;//[Offset: 0x12c, Size: 1]
	Vector2D LastAnchorScreenLocation;//[Offset: 0x134, Size: 1]
	float AimAssistVisibilityUpdatePeriod;//[Offset: 0x13c, Size: 1]
	float CrouchAnimTimeLength;//[Offset: 0x140, Size: 1]
	float CrouchAnimTimeLengthRemaining;//[Offset: 0x144, Size: 1]
	Vector2D ScaledScreenSpaceJukeDistanceThreshold;//[Offset: 0x148, Size: 1]
	static bool GetScaledProjectionBoundsForActor(PlayerController* Player, const Actor* InActor, out Box2D OutBounds);// 0x2619f70
	float GetProjectionSpaceStackBoundary();// 0x2619f40
	KSPlayerController* GetPlayerOwner();// 0x25fa760
	static float GetAssistRingScreenSize(PlayerController* Player, float ProjectionSpaceSize);// 0x2619c10
	static bool GetActorScreenBoundsForActor(PlayerController* Player, const Actor* InActor, out Box2D OutBounds);// 0x2619ad0

--------------------------------
Class: RankedAimAssistTarget
	KSAimAssistAnchorComponent* Anchor;//[Offset: 0x0, Size: 1]
	interface class None* Target;//[Offset: 0x8, Size: 1]
	float HeadWeight;//[Offset: 0x18, Size: 1]
	Vector2D BodyLocation;//[Offset: 0x1c, Size: 1]
	Vector2D HeadLocation;//[Offset: 0x24, Size: 1]
	Box2D ScaledProjectionBounds;//[Offset: 0x2c, Size: 1]
	float DistanceFromCamera;//[Offset: 0x40, Size: 1]
	int UpdateCount;//[Offset: 0x44, Size: 1]

--------------------------------
Class: KSAimAssistAnchorComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AimAssistPriority;//[Offset: 0x450, Size: 1]

--------------------------------
Class: KSHUDAnnouncementComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnEndOfMatch;//[Size: 1]
	KSPlayerController* OwningPlayer;//[Offset: 0xc0, Size: 1]
	MulticastInlineDelegateProperty OnAnnouncement;//[Size: 1]
	MulticastInlineDelegateProperty OnResultAnnouncement;//[Size: 1]
	void OnObjectiveSpawned(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveReset(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveHeld(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveExploded(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDropped(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDisarming(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDisarmed(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDeactivated(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveContested(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveArming(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveArmed(out const interface classNone GameObjective);// 0x2cbecb0
	void OnGameObjectiveStateChanged(interface classNone GameObjective);// 0x26c7c50
	KSPlayerController* GetPlayerController();// 0x26c7810

--------------------------------
Class: KSPingManager.ActorComponent.Object
	MulticastInlineDelegateProperty OnPingFailureDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPingAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnPingRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnPingChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSentVoiceLineOnly;//[Size: 1]
	MulticastInlineDelegateProperty OnSelfPingAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnSelfPingRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnSelfPingChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHoveredActorChanged;//[Size: 1]
	PingInfoChangeList ReplicatedPings;//[Offset: 0x140, Size: 1]
	PingInfo[] LocallyPredictedPings;//[Offset: 0x260, Size: 1]
	<enum,float> PingLifetimes;//[Offset: 0x270, Size: 1]
	<enum,class KSPingBeaconBase> PingBeaconTypes;//[Offset: 0x2c0, Size: 1]
	<enum,int> MaxPingsForType;//[Offset: 0x310, Size: 1]
	<enum,Vector_NetQuantize> PingIconOffsets;//[Offset: 0x360, Size: 1]
	enum ObjectPingMessage;//[Offset: 0x3b0, Size: 1]
	DataTable* ContextualPingTypesDT;//[Offset: 0x3b8, Size: 1]
	DataTable* ContextualPingMessagesDT;//[Offset: 0x3c0, Size: 1]
	bool bDisplaySelfPingsOnNameplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bWorldSelfPingsFollowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	float MaxPingDistance;//[Offset: 0x418, Size: 1]
	KSPingBeaconBase*[] ActiveBeacons;//[Offset: 0x420, Size: 1]
	bool bAllowPingRemoval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	<enum,AkAudioEvent*> PingAudioCues;//[Offset: 0x438, Size: 1]
	KSGameState_RoundGame* CachedRoundState;//[Offset: 0x490, Size: 1]
	KSPlayerController* CachedOwner;//[Offset: 0x498, Size: 1]
	KSTeamState* CachedTeam;//[Offset: 0x4a0, Size: 1]
	Actor* CachedHoveredActor;//[Offset: 0x4d0, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0x4e0, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0x508, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x530, Size: 1]
	void UpdateCachedHoveredActor(Actor* NewCachedHoveredActor);// 0x272bd80
	void ServerSendVoiceLineOnly(enum PingMessage);// 0x272bcd0
	void ServerRemovePing(int PingId, KSPlayerState* PingingPlayer);// 0x272bbd0
	void ServerPingRequest(PingInfo PingInfo);// 0x272ba90
	void ServerChangePing(int PingId, KSPlayerState* PingingPlayer, KSPlayerState* AcknowledgingPlayer);// 0x272b960
	void ResetCachedHoveredActor();// 0x272b880
	void RemovePing(int PingId, KSPlayerState* PingingPlayer);// 0x272b730
	bool RemoveInternalPingInfo(int NewPingId, KSPlayerState* NewCreatingPlayer);// 0x272b670
	bool RemoveHoveredPing(int PingId, KSPlayerState* PingingPlayer);// 0x272b5b0
	void OnPingExpired(PingInfo ExpiringPing);// 0x272b290
	bool IsThrottled();// 0x272b040
	bool IsSelfPing(enum PingType);// 0x272afb0
	bool IsInvisiblePingType(enum PingType);// 0x272af20
	enum[] GetPingTypesToCheck(enum PingType);// 0x272acc0
	float GetPingLifetimes(enum PingType);// 0x272aba0
	bool GetPingInfoByIdAndPlayer(int PingId, KSPlayerState* PingingPlayer, out PingInfo OutPingInfo);// 0x272aa00
	int GetPingIdForDisplayId(int DisplayId, KSPlayerState* CreatingPlayer);// 0x272a940
	int GetDisplayIdForPingId(int PingId, KSPlayerState* CreatingPlayer);// 0x272a6c0
	void GameRoundOver(KSGameState* GameState, out const RoundResult RoundResult);// 0x272a360
	void ForceLocalRemovePing(int PingId, KSPlayerState* PingingPlayer);// 0x272a2a0
	bool DoesWorldSelfPingFollowPlayer();// 0x272a270
	void ClientPingRejected(enum Reason, int PingId);// 0x272a1a0
	void ClearPingsOfType(enum PingType);// 0x272a120
	void ClearAllPingsForPlayer();// 0x272a100
	bool CheckIfPingable(Actor* ActorToCheck, KSCharacter* PlayerCharacter);// 0x272a040
	bool CheckIfFriendlyCharacter(Actor* ActorToCheck, KSCharacter* PlayerCharacter);// 0x2729f80
	bool CheckIfEnemyCharacter(Actor* ActorToCheck, KSCharacter* PlayerCharacter);// 0x2729ec0
	bool CheckIfDeployable(Actor* ActorToCheck, KSCharacter* PlayerCharacter, bool bMustBeEnemyDeployable);// 0x2729dc0
	void ChangePing(int PingId, KSPlayerState* PingingPlayer, KSPlayerState* AcknowledgingPlayer);// 0x2729cc0
	void AttemptRemovePing(int PingId, KSPlayerState* PingingPlayer);// 0x2729c00
	void AttemptPing2D(Vector2D WorldLocation2D);// 0x2729b80
	void AttemptManualPing(enum PingType, enum PingMessage, Actor* PingedActor, bool bRemoveOtherPingsOfType);// 0x2729a30
	void AttemptContextualPing(bool DoubleClick);// 0x27299a0
	void AttemptCommunicationPing(enum PingType, enum PingMessage);// 0x27298e0
	void AddPing(out const PingInfo PingInfo);// 0x27297d0
	void AddInternalPingInfo(int NewPingId, int NewDisplayId, KSPlayerState* NewCreatingPlayer);// 0x27296d0
	void AddHoveredPing(int PingId, KSPlayerState* PingingPlayer);// 0x2729610

--------------------------------
Class: PingInfoChangeList.FastArraySerializer
	PingInfoChangeItem[] Items;//[Offset: 0x108, Size: 1]

--------------------------------
Class: PingInfoChangeItem.FastArraySerializerItem
	PingInfo PingInfo;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSPingBeaconBase.Actor.Object
	DataTable* ContextualPingTypesDT;//[Offset: 0x220, Size: 1]
	KSPlayerState* PlayerOwner;//[Offset: 0x228, Size: 1]
	PingInfo BeaconPingInfo;//[Offset: 0x230, Size: 1]
	void SetupBeaconDisplay();// 0x2cbecb0
	void PingRemoved(int PingId, KSPlayerState* OwningPlayer);// 0x272b4f0

--------------------------------
Class: KSGameState_RoundGame.KSGameState.PGame_GameState.GameState.GameStateBase.Info.Actor.Object
	ReplicatedRoundInfo RoundInfo;//[Offset: 0x1bb0, Size: 1]
	ReplicatedRoundInfo PreviousRoundInfo;//[Offset: 0x1bc8, Size: 1]
	float RoundEndFadeOutAtMatchTime;//[Offset: 0x1be0, Size: 1]
	float RoundEndFadeOutDelayTime;//[Offset: 0x1be4, Size: 1]
	float RoundEndFadeOutTime;//[Offset: 0x1be8, Size: 1]
	bool bUsingRoundDelayedGarbageCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bec, Size: 1]
	MulticastInlineDelegateProperty OnRoundInfoChangedDel;//[Size: 1]
	RoundResult RoundResult;//[Offset: 0x1c18, Size: 1]
	RoundResult[] AllRoundResults;//[Offset: 0x1c38, Size: 1]
	int TotalRounds;//[Offset: 0x1c48, Size: 1]
	int RoundsToWin;//[Offset: 0x1c4c, Size: 1]
	MulticastInlineDelegateProperty OnTotalRoundsSet;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundsToWinSet;//[Size: 1]
	RoundInitState RoundInitState;//[Offset: 0x1c70, Size: 1]
	MulticastInlineDelegateProperty OnRoundSetupDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundStartDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundOverDel;//[Size: 1]
	int CashPerWinningPlayer;//[Offset: 0x1cf8, Size: 1]
	int[] ConsecutiveCashPerLosingPlayer;//[Offset: 0x1d00, Size: 1]
	int CashPerSurvivingPlayer;//[Offset: 0x1d18, Size: 1]
	enum SurvivorCashOverridesWinCash;//[Offset: 0x1d1c, Size: 1]
	enum SurvivorCashOverridesLossCash;//[Offset: 0x1d1d, Size: 1]
	int CashPerDeadPlayer;//[Offset: 0x1d20, Size: 1]
	enum DeadPlayerCashOverridesWinCash;//[Offset: 0x1d24, Size: 1]
	enum DeadPlayerCashOverridesLossCash;//[Offset: 0x1d25, Size: 1]
	float RoundEndCamPreDeathDuration;//[Offset: 0x1d28, Size: 1]
	float RoundEndCamPostDeathDuration;//[Offset: 0x1d2c, Size: 1]
	float RoundEndCamPreDeathDilation;//[Offset: 0x1d30, Size: 1]
	float RoundEndCamTimeDilation;//[Offset: 0x1d34, Size: 1]
	float EndOfMatchKillCamDelay;//[Offset: 0x1d38, Size: 1]
	void TryToReplayLastKill();// 0x1f2b590
	bool RoundHasStarted();// 0x26c41e0
	bool RoundHasEnded();// 0x26c41b0
	bool PreparingForNextRound();// 0x26c4180
	void OnRep_TotalRounds();// 0x26c4150
	void OnRep_RoundsToWin();// 0x26c4120
	void OnRep_RoundResult();// 0x1f12340
	void OnRep_RoundInitState();// 0x1eefba0
	void OnRep_RoundInfo();// 0x1f2bab0
	void OnMatchTimerUpdate(float TimeInWholeSeconds);// 0x26c40a0
	bool IsTieBreakerRound();// 0x26c4070
	bool IsTeamAtMatchPoint(KSTeamState* Team);// 0x26c3fe0
	bool IsRoundInProgress();// 0x26c3fb0
	bool IsAtMatchPoint();// 0x26c3e70
	bool HasTriggeredRoundStart();// 0x26c3e40
	bool HasTriggeredRoundSetup();// 0x26c3e10
	bool HasTriggeredRoundOver();// 0x26c3de0
	int GetWinsUntilVictory();// 0x26c3d30
	int GetTotalRounds();// 0x26c3b50
	int GetTeamWinsUntilVictory(KSTeamState* Team);// 0x26c3a90
	KSTeamState* GetRoundWinner();// 0x26c3a20
	enum GetRoundTimerState();// 0x26bda70
	void GetRoundTimer(out float OutRoundTimeRemaining, out float OutTotalRoundTime);// 0x26bd990
	int GetRoundsToWin();// 0x26c3a40
	FName GetRoundStateName();// 0x26c3a00
	MatchPhase GetRoundState();// 0x26c39d0
	float GetRoundStartTime();// 0x26c39b0
	int[] GetRoundResultWiningTeams();// 0x26c3930
	byte GetRoundNumber();// 0x26c3910
	<byte,int> GetCashToSpendEachRound();// 0x26c3610
	int GetCashPerWinningPlayer();// 0x26c35e0
	int GetCashPerSurvivingPlayer();// 0x26c35c0
	int GetCashPerLosingPlayer(int NumConsecutiveLosses);// 0x26c3530
	int GetCashPerDeadPlayer();// 0x26c3510
	RoundResult[] GetAllRoundResults();// 0x26c3450

--------------------------------
Class: ReplicatedRoundInfo
	MatchPhase RoundState;//[Offset: 0x0, Size: 1]
	byte RoundNumber;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSRadialMenuManager.ActorComponent.Object
	KSPlayerController* CachedOwner;//[Offset: 0xb0, Size: 1]
	bool bThrottleQuipsAndComms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int QuipsAndCommsAllowedBeforeThrottle;//[Offset: 0xbc, Size: 1]
	float QuipAndCommThrottleDetectionPeriod;//[Offset: 0xc0, Size: 1]
	float QuipAndCommThrottleCooldown;//[Offset: 0xc4, Size: 1]
	int CurrentQuipsAndCommsBeforeThrottle;//[Offset: 0xc8, Size: 1]
	bool bQuipsAndCommsCurrentlyThrottled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool IsThrottled(enum CosmeticSlot);// 0x277b870
	void IncreaseUseCount(enum CosmeticSlot);// 0x1ec4730
	void EndThrottle(enum CosmeticSlot);// 0x277b1e0
	void DecreaseUseCount(enum CosmeticSlot);// 0x277b160

--------------------------------
Class: KSJobSelectionManager.ActorComponent.Object
	bool bJobManagerReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionManagerReady;//[Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionAcknowledge;//[Size: 1]
	KSPlayerController* CachedOwner;//[Offset: 0xd8, Size: 1]
	KSJobSelectionComponent* CachedSelectionComponent;//[Offset: 0xe0, Size: 1]
	void ServerRequestSelectionState(const int ItemId, const enum State);// 0x26dee10
	bool RequestSelectionState(const int ItemId, const enum State);// 0x26dec30
	void PlayerTeamSet(KSPlayerState* PlayerState);// 0x26debb0
	void PlayerStateSet(KSPlayerState* PlayerState);// 0x26deb30
	void JobSelectionComponentReady(KSJobSelectionComponent* InSelectionComponent);// 0x26deab0
	bool IsReady();// 0x262bc70
	KSJobSelectionComponent* GetJobSelectionComponent();// 0x26de5d0
	void ClientAcknowledgeStateSelection(const int ItemId, bool bSuccess, enum RequestState);// 0x26ddc60

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x230, Size: 1]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x248, Size: 1]
	SoftObjectPath LevelSequence;//[Offset: 0x250, Size: 1]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x268, Size: 1]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x278, Size: 1]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x280, Size: 1]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x288, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x298, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a0, Size: 1]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	void ShowBurnin();// 0x3cecdb0
	void SetSequence(LevelSequence* InSequence);// 0x3cecd30
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x3cecca0
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x3cecb60
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3cec970
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3cec820
	void ResetBindings();// 0x3cec800
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x3cec750
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x3cec620
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x3cec530
	void OnLevelSequenceLoaded__DelegateSignature();// 0x2cbecb0
	LevelSequence* LoadSequence();// 0x3cec4c0
	void HideBurnin();// 0x3cec4a0
	LevelSequencePlayer* GetSequencePlayer();// 0x3cec450
	LevelSequence* GetSequence();// 0x3cec400
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x3cec2e0
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x3cec230
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3cebf30
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3cebdf0

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 1]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 1]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 1]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 1]
	class Object* DirectorClass;//[Offset: 0x490, Size: 1]
	void RemoveMetaDataByClass(class Object InClass);// 0x3cec6e0
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x3cec040
	Object* FindMetaDataByClass(class Object InClass);// 0x3cec040
	Object* CopyMetaData(Object* InMetaData);// 0x3cec040

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 1]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 1]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 1]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 1]
	FString ObjectPath;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 1]
	FString ComponentName;//[Offset: 0x20, Size: 1]
	Object* CachedComponent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnCameraCut;//[Size: 1]
	CameraComponent* GetActiveCameraComponent();// 0x3cec3c0
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x3cec0c0

--------------------------------
Class: MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayReverse;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	MulticastInlineDelegateProperty OnFinished;//[Size: 1]
	byte Status;//[Offset: 0x458, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 1]
	FrameNumber StartTime;//[Offset: 0x468, Size: 1]
	int DurationFrames;//[Offset: 0x46c, Size: 1]
	int CurrentNumLoops;//[Offset: 0x470, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 1]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 1]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 1]
	void StopAtCurrentTime();// 0x39e8780
	void Stop();// 0x39e8760
	void SetTimeRange(float StartTime, float Duration);// 0x39e86a0
	void SetPlayRate(float PlayRate);// 0x39e83e0
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x39e8560
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x39e8460
	void SetFrameRate(FrameRate FrameRate);// 0x39e8350
	void SetFrameRange(int StartFrame, int Duration);// 0x39e8290
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x39e8200
	void ScrubToSeconds(float TimeInSeconds);// 0x39e7ba0
	bool ScrubToMarkedFrame(FString InLabel);// 0x39e8150
	void ScrubToFrame(FrameTime NewPosition);// 0x39e80c0
	void Scrub();// 0x39e80a0
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x39e8010
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x39e7f40
	void PlayToSeconds(float TimeInSeconds);// 0x39e7ec0
	bool PlayToMarkedFrame(FString InLabel);// 0x39e7e10
	void PlayToFrame(FrameTime NewPosition);// 0x39e7d80
	void PlayReverse();// 0x39e7d60
	void PlayLooping(int NumLoops);// 0x39e7ce0
	void Play();// 0x39e7cc0
	void Pause();// 0x39e7ca0
	void JumpToSeconds(float TimeInSeconds);// 0x39e7c20
	void JumpToPosition(float NewPlaybackPosition);// 0x39e7ba0
	bool JumpToMarkedFrame(FString InLabel);// 0x39e7af0
	void JumpToFrame(FrameTime NewPosition);// 0x39e7a60
	bool IsReversed();// 0x39e7a30
	bool IsPlaying();// 0x39e7a00
	bool IsPaused();// 0x39e79d0
	void GoToEndAndStop();// 0x39e79b0
	QualifiedFrameTime GetStartTime();// 0x39e7960
	float GetPlayRate();// 0x2708d70
	float GetPlaybackStart();// 0x39e78b0
	float GetPlaybackPosition();// 0x39e77c0
	float GetPlaybackEnd();// 0x39e7730
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x39e7650
	float GetLength();// 0x39e7620
	FrameRate GetFrameRate();// 0x39e7600
	int GetFrameDuration();// 0x39e75d0
	QualifiedFrameTime GetEndTime();// 0x39e7570
	QualifiedFrameTime GetDuration();// 0x39e7530
	bool GetDisableCameraCuts();// 0x39e7500
	QualifiedFrameTime GetCurrentTime();// 0x39e74c0
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x39e73c0
	void ChangePlaybackDirection();// 0x39e73a0

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 1]
	FrameRate Rate;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 1]
	byte LastKnownStatus;//[Offset: 0x8, Size: 1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 1]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 1]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 1]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x3cecaa0

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x18, Size: 1]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x238, Size: 1]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2f0, Size: 1]
	void SetSettings(Object* InSettings);// 0x2cbecb0
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x3cec480

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 1]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 1]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 1]
	FString CurrentShotName;//[Offset: 0x30, Size: 1]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 1]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 1]
	FString SourceTimecode;//[Offset: 0x60, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 1]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 1]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 1]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 1]

--------------------------------
Class: TelemetrySettings
	bool bPingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bPacketLossEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bFPSEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bTelemetryFeatureActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: KSMobileXpChangeEvent
	int Delta;//[Offset: 0x0, Size: 1]
	FText Reason;//[Offset: 0x8, Size: 1]
	bool bBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	KSPlayerState* Instigator;//[Offset: 0x24, Size: 1]

--------------------------------
Class: ScoreboardStats
	int userPlayerID;//[Offset: 0x0, Size: 1]
	int winTeamNum;//[Offset: 0x4, Size: 1]
	FString mapName;//[Offset: 0x8, Size: 1]
	SerializedMatchId MatchID;//[Offset: 0x18, Size: 1]
	int QueueId;//[Offset: 0x28, Size: 1]
	int GameMode;//[Offset: 0x2c, Size: 1]
	TeamStats[] teams;//[Offset: 0x30, Size: 1]
	PlayerEntryStats[] playerStats;//[Offset: 0x40, Size: 1]
	KSScoreboardStat[] StatOrder;//[Offset: 0x50, Size: 1]
	GameplayTag SortStat;//[Offset: 0x60, Size: 1]

--------------------------------
Class: TeamStats
	int TeamNum;//[Offset: 0x0, Size: 1]
	FString teamName;//[Offset: 0x8, Size: 1]
	int teamScore;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PlayerEntryStats
	int PlayerId;//[Offset: 0x0, Size: 1]
	int64 netPlayerID;//[Offset: 0x8, Size: 1]
	FString PlayerName;//[Offset: 0x10, Size: 1]
	FString EOSProductUserId;//[Offset: 0x20, Size: 1]
	int TeamNum;//[Offset: 0x30, Size: 1]
	KSJobItem* PlayerJob;//[Offset: 0x38, Size: 1]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool IsDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	PlayerMatchStatInfo timePlayed;//[Offset: 0x44, Size: 1]
	float[] StatData;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSScoreboardStat
	GameplayTag StatTag;//[Offset: 0x0, Size: 1]
	FText StatHeaderText;//[Offset: 0x8, Size: 1]
	bool DisplayOnScoreboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool DisplayInMatchSummary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool DisplayInTopStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	int MatchSummaryOrder;//[Offset: 0x24, Size: 1]
	int TopStatsOrder;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PlayerRewardsSummaryReplicated
	int64[] ActivityKeys;//[Offset: 0x0, Size: 1]
	RewardProgress[] ActivityValues;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSVelocityCameraShake.KSCharacterCameraShake.CameraShake.Object
	float VelocityForMinShaking;//[Offset: 0x178, Size: 1]
	float VelocityForMaxShaking;//[Offset: 0x17c, Size: 1]

--------------------------------
Class: KSCharacterCameraShake.CameraShake.Object
	float ADSShakeScale;//[Offset: 0x158, Size: 1]
	KSCharacterFoundation* AttachedCharacterFoundation;//[Offset: 0x160, Size: 1]
	void StopShakeOnViewTargetChanged(PlayerController* NewController);// 0x2673a90
	void StopShakeOnActorDestroyed(Actor* DestroyedActor);// 0xe70640
	void StopShakeDynamic();// 0x2673a70
	void OnAimStateChanged(enum NextAimState);// 0x2672a60

--------------------------------
Class: KSOutOfBoundsComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnOutOfBoundsBeginDel;//[Size: 1]
	MulticastInlineDelegateProperty OnOutOfBoundsWarningEndDel;//[Size: 1]
	MulticastInlineDelegateProperty OnOutOfBoundsEndDel;//[Size: 1]
	KSOutOfBoundsInfo OutOfBoundsInfo;//[Offset: 0xe8, Size: 1]
	bool bLocalOutOfBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	KSOutOfBoundsManager* OutOfBoundsManager;//[Offset: 0xf8, Size: 1]
	KSFXCurveComponent* OutOfBoundsEffectCurve;//[Offset: 0x100, Size: 1]
	KSSpecialEffect OutOfBoundsPPEffect;//[Offset: 0x108, Size: 1]
	MaterialInterface* OutOfBoundsPPMaterial;//[Offset: 0x160, Size: 1]
	MaterialInstanceDynamic* OutOfBoundsPPMaterialInstance;//[Offset: 0x168, Size: 1]
	KSCharacterFoundation* CharacterFoundationOwner;//[Offset: 0x170, Size: 1]
	void OutOfBoundsWarningEnd();// 0x2717b90
	void OutOfBoundsOverlapEnd();// 0x2717b70
	void OutOfBoundsOverlapBegin(float WarningLength);// 0x2717af0
	void OnRep_OutOfBoundsInfo();// 0x1ec42c0
	void OnEndOutOfBounds();// 0x2cbecb0
	void OnBeginOutOfBounds();// 0x2cbecb0
	bool IsOutOfBounds(out float RemainingTime);// 0x2716de0
	void EndOutOfBounds();// 0x2716b10
	void BeginOutOfBounds(float WarningLength);// 0x2716850

--------------------------------
Class: KSOutOfBoundsInfo
	bool bOutOfBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WarningLength;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSPowerSlideInfo
	bool bIsInPowerSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum EndReason;//[Offset: 0x1, Size: 1]

--------------------------------
Class: KSObjectiveInfo
	int ID;//[Offset: 0x0, Size: 1]
	KSObjectiveState ObjectiveState;//[Offset: 0x8, Size: 1]
	KSObjectiveState PreviousObjectiveState;//[Offset: 0x30, Size: 1]
	delegate[] ObjectiveStateChangedCallbacks;//[Offset: 0x58, Size: 1]

--------------------------------
Class: KSObjectiveState
	enum State;//[Offset: 0x0, Size: 1]
	int Team;//[Offset: 0x4, Size: 1]
	KSPlayerState* Holder;//[Offset: 0x8, Size: 1]
	interface class None* PointOfInterest;//[Offset: 0x10, Size: 1]
	Object* POI;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSObjectiveTimerInfo
	KSTimerComponent* ObjectiveTimer;//[Offset: 0x0, Size: 1]
	delegate[] ObjectiveTimerActiveCallbacks;//[Offset: 0x8, Size: 1]
	delegate[] ObjectiveTimerCompleteCallbacks;//[Offset: 0x18, Size: 1]
	delegate[] ObjectiveTimerTickCallbacks;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSObjectiveCaptureInfo
	float BaseCaptureTime;//[Offset: 0x0, Size: 1]
	float BaseRecaptureTime;//[Offset: 0x4, Size: 1]
	float CaptureRatePercentIncreasePerPlayer;//[Offset: 0x8, Size: 1]
	float FullCaptureDecayTime;//[Offset: 0xc, Size: 1]
	bool bPlayerMustBePresentToKeep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: KSAutoPickupComponent.ActorComponent.Object
	float AutoPickupMinPickupTimeSinceCreation;//[Offset: 0xb0, Size: 1]
	float AutoPickupDistance;//[Offset: 0xb4, Size: 1]
	float AutoPickupQueryInterval;//[Offset: 0xb8, Size: 1]
	bool bActivateAutoPickups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	<KSItem*,int> ItemPriorityMap;//[Offset: 0xc0, Size: 1]
	bool bAutoPickupClusivityEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	GameplayTagQuery ClusivityQuery;//[Offset: 0x118, Size: 1]
	void OnOwnerPossessionChanged(Controller* Controller);// 0x2630680
	void OnAutoPickupPreferenceChanged(bool bAutoPickupEnabled);// 0x26305f0

--------------------------------
Class: KSDamageRecord
	KSWeaponAsset*[] WeaponsUsed;//[Offset: 0x0, Size: 1]
	float TotalRecordedDamage;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSShotgunHitChangeList.ReplicatedLog
	KSShotgunHitChangeItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: KSShotgunHitChangeItem.ReplicatedLogItem
	CompressedShotgunHitData ShotgunHitData;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CompressedShotgunHitData
	KSWeaponAsset_Shotgun* ShotgunAsset;//[Offset: 0x0, Size: 1]
	uint64 CompressedHitResults;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSWeaponAsset_Shotgun.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int PelletsPerShot;//[Offset: 0x9c8, Size: 1]
	float AimDownSightsAccuracy;//[Offset: 0x9cc, Size: 1]
	bool bUseSpreadPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 1]
	Vector2D[] SpreadPattern;//[Offset: 0x9d8, Size: 1]
	float HitPercentageForHeadshot;//[Offset: 0x9e8, Size: 1]
	CurveFloat* NonlinearPelletDamageCurve;//[Offset: 0x9f0, Size: 1]
	void GetSpreadPattern(out Vector2D[] OutPattern);// 0x27c7170
	int GetPelletsPerShot();// 0x27c6d00
	CurveFloat* GetNonlinearPelletDamageCurve();// 0x27c6c60
	float GetHitPercentageForHeadshot();// 0x27c68b0
	float GetAimDownSightsAccuracy();// 0x27c6580
	bool DoesUseSpreadPattern();// 0x27c6560

--------------------------------
Class: KSRepossessState
	bool bPendingRepossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int LockID;//[Offset: 0x4, Size: 1]
	Rotator ReturnToRotation;//[Offset: 0x8, Size: 1]
	bool bReturnCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: SmoothedComponentInfo
	SceneComponent* Component;//[Offset: 0x0, Size: 1]
	Vector InitialTranslationOffset;//[Offset: 0x8, Size: 1]
	Quat InitialRotationOffset;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSSmoothingComponent.SceneComponent.ActorComponent.Object
	bool bSmoothTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	bool bSmoothRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 1]
	Vector TranslationOffset;//[Offset: 0x20c, Size: 1]
	Quat RotationOffset;//[Offset: 0x220, Size: 1]
	KSCharacter* CharacterOwner;//[Offset: 0x230, Size: 1]

--------------------------------
Class: KSCharacterCameraHandler.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnShoulderSwapChanged;//[Size: 1]
	KSSmoothingComponent* CameraRootComponent;//[Offset: 0x218, Size: 1]
	KSSpringArmComponent* MainCameraBoom;//[Offset: 0x220, Size: 1]
	CameraComponent* MainCameraComponent;//[Offset: 0x228, Size: 1]
	KSSpringArmComponent* SprintCameraBoom;//[Offset: 0x230, Size: 1]
	CameraComponent* SprintCameraComponent;//[Offset: 0x238, Size: 1]
	KSSpringArmComponent* TransitionCameraBoom;//[Offset: 0x240, Size: 1]
	CameraComponent* TransitionCameraComponent;//[Offset: 0x248, Size: 1]
	KSSpringArmComponent* ShoulderCameraBoom;//[Offset: 0x250, Size: 1]
	CameraComponent* ShoulderCameraComponent;//[Offset: 0x258, Size: 1]
	CameraComponent* FirstPersonCameraComponent;//[Offset: 0x260, Size: 1]
	KSSpringArmComponent* TabletCameraBoom;//[Offset: 0x268, Size: 1]
	CameraComponent* TabletCameraComponent;//[Offset: 0x270, Size: 1]
	KSSpringArmComponent* ActionCameraBoom1;//[Offset: 0x278, Size: 1]
	CameraComponent* ActionCameraComponent;//[Offset: 0x280, Size: 1]
	KSSpringArmComponent* SwimCameraBoom;//[Offset: 0x288, Size: 1]
	CameraComponent* SwimCameraComponent;//[Offset: 0x290, Size: 1]
	KSSpringArmComponent* MountedCameraBoom;//[Offset: 0x298, Size: 1]
	CameraComponent* MountedCameraComponent;//[Offset: 0x2a0, Size: 1]
	CameraComponent* ActiveCameraComponent;//[Offset: 0x2a8, Size: 1]
	CameraComponent* PendingCameraComponent;//[Offset: 0x2b8, Size: 1]
	enum CameraShoulder;//[Offset: 0x2c8, Size: 1]
	enum DesiredCameraShoulder;//[Offset: 0x2c9, Size: 1]
	float NextShoulderSwapTime;//[Offset: 0x2cc, Size: 1]
	float ShoulderSwapCooldownTime;//[Offset: 0x2d0, Size: 1]
	float AutoShoulderSwapTime;//[Offset: 0x2d4, Size: 1]
	FName MeshADSPitchPivotBoneName;//[Offset: 0x2d8, Size: 1]
	float CameraFocualThreshold;//[Offset: 0x2e0, Size: 1]
	float MinimumFocalPointMaintenanceDistance;//[Offset: 0x2e4, Size: 1]
	float AimSnapThrottleTime;//[Offset: 0x2e8, Size: 1]
	float ShoulderSwapTime;//[Offset: 0x2ec, Size: 1]
	float ZipLineShoulderCameraBoomLength;//[Offset: 0x2f0, Size: 1]
	float ZipLineShoulderBoomLengthChangeTime;//[Offset: 0x2f4, Size: 1]
	float CrouchCameraShiftInterpSpeed;//[Offset: 0x2f8, Size: 1]
	float CrouchCameraBoomLengthScale;//[Offset: 0x2fc, Size: 1]
	float SprintCameraChangeDuration;//[Offset: 0x300, Size: 1]
	float SprintOutCameraChangeDuration;//[Offset: 0x304, Size: 1]
	float AimDownSightsScopeInterpSpeed;//[Offset: 0x308, Size: 1]
	bool bMantainFocualPointOnCameraTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bUseAdvancedFocalPointTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	float ShoulderSwapProgress;//[Offset: 0x310, Size: 1]
	float ZiplineAOSCamVertOffset;//[Offset: 0x314, Size: 1]
	float CrouchAOSCamVertOffset;//[Offset: 0x318, Size: 1]
	float SwimCameraBoomFloatHeight;//[Offset: 0x31c, Size: 1]
	float ShoulderSwapBlendExponent;//[Offset: 0x320, Size: 1]
	bool bUseFocalPointDoubleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float FocalPointDoubleCheckAllowedBlockDistance;//[Offset: 0x328, Size: 1]
	bool bFocalPointMaintenanceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	Vector LastManualShoulderSwapLocation;//[Offset: 0x330, Size: 1]
	float LastShoulderSwapTimestamp;//[Offset: 0x33c, Size: 1]
	float CurrentShoulderSwapTime;//[Offset: 0x340, Size: 1]
	Rotator CameraTransitionRotationDelta;//[Offset: 0x344, Size: 1]
	Rotator CameraTransitionRotationDeltaRemaining;//[Offset: 0x350, Size: 1]
	float NextValidAimSnapTime;//[Offset: 0x35c, Size: 1]
	Actor* CameraPivotTargetActor;//[Offset: 0x360, Size: 1]
	bool bPivotCameraToActorNotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 1]
	bool bTrackTargetAfterPivotingToIt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 1]
	KSAimAssistAnchorComponent* CachedSnapAnchor;//[Offset: 0x370, Size: 1]
	Rotator AppliedFocalPointCorrection;//[Offset: 0x378, Size: 1]
	CurveFloat* CameraPivotCurve;//[Offset: 0x3a8, Size: 1]
	float StandEmoteCameraVertOffset;//[Offset: 0x3b0, Size: 1]
	float CrouchEmoteCameraVertOffset;//[Offset: 0x3b4, Size: 1]
	float ProneEmoteCameraVertOffset;//[Offset: 0x3b8, Size: 1]
	float StandEmoteCameraInterpSpeed;//[Offset: 0x3bc, Size: 1]
	float CrouchEmoteCameraInterpSpeed;//[Offset: 0x3c0, Size: 1]
	float ProneEmoteCameraInterpSpeed;//[Offset: 0x3c4, Size: 1]
	bool bFixCameras;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bCrouchAffectsCameras;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	Vector RelativeFocalPoint;//[Offset: 0x3e8, Size: 1]
	Rotator NonFocalPointRotation;//[Offset: 0x3f4, Size: 1]
	Rotator AppliedFocalPointYawRotation;//[Offset: 0x400, Size: 1]
	float CachedPrimaryWeaponFieldOfView;//[Offset: 0x41c, Size: 1]
	float CameraInterpSpeed;//[Offset: 0x438, Size: 1]
	float CurrentEmoteCameraVertOffset;//[Offset: 0x43c, Size: 1]
	float CurrentEmoteCameraInterpSpeed;//[Offset: 0x440, Size: 1]
	bool bUsingEmoteCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	float CachedCameraFOV;//[Offset: 0x448, Size: 1]
	Vector2D CachedViewPortSize;//[Offset: 0x44c, Size: 1]
	float CachedHalfTanFOV;//[Offset: 0x454, Size: 1]
	void ServerChangeShoulderCamera(enum InShoulder, bool bAuto, bool bUseAutoTiming);// 0x26734c0
	void OnShoulderSwapChanged__DelegateSignature(KSCharacter* Character);// 0x2cbecb0
	void OnRep_CameraShoulder();// 0x2672c20
	void OnRep_CameraPivotTargetActor();// 0x2672c00
	bool DoesTransitionSupportFocalPoint(FName ActiveCamera, FName PendingCamera);// 0x2672070

--------------------------------
Class: KSSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bEnableSmoothLengthReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	float SmoothLengthReturnSpeed;//[Offset: 0x294, Size: 1]
	CurveFloat* SmoothingCurve;//[Offset: 0x298, Size: 1]
	CurveVector* OffsetCurve;//[Offset: 0x2a0, Size: 1]
	bool bRelativeTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	KSCharacter* CharacterOwner;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: KSInitialInventoryItem
	GameplayTag EquipPoint;//[Offset: 0x0, Size: 1]
	KSItem* ItemAsset;//[Offset: 0x8, Size: 1]
	KSWeaponAttachment*[] Attachments;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSInitialAmmo
	enum AmmoType;//[Offset: 0x0, Size: 1]
	int AmmoCount;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSLootLockerItem
	KSWeaponAsset* WeaponAsset;//[Offset: 0x0, Size: 1]
	KSWeaponAttachment* Attachment1;//[Offset: 0x8, Size: 1]
	KSWeaponAttachment* Attachment2;//[Offset: 0x10, Size: 1]
	KSWeaponAttachment* Attachment3;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSSwapHandlerProfile.Object
	EquipPointDefinition[] EquipPointDefinitions;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EquipPointDefinition
	GameplayTag EquipPoint;//[Offset: 0x0, Size: 1]
	GameplayTagQuery WeaponTypeQuery;//[Offset: 0x8, Size: 1]
	bool bCanSwapToManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	FName HandlerSubType;//[Offset: 0x54, Size: 1]

--------------------------------
Class: KSWeapon_Melee.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	MulticastInlineDelegateProperty OnMeleeHit;//[Size: 1]
	MulticastInlineDelegateProperty OnProjectileSpawned;//[Size: 1]
	KSProjectile* Projectile;//[Offset: 0x8a0, Size: 1]
	KSProjectile* FakeProjectile;//[Offset: 0x8a8, Size: 1]
	KSWeaponAsset_Melee* MeleeWeaponAsset;//[Offset: 0x8b0, Size: 1]
	bool bMeleeSwinging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 1]
	TimerHandle MeleeSwingingTimerHandle;//[Offset: 0x8c0, Size: 1]
	Actor*[] DamagedTargetsInSwing;//[Offset: 0x8c8, Size: 1]
	bool bIsInQuickMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 1]
	bool ShouldThrowWeapon();// 0x27b7910
	void OnRep_Projectile();// 0x27b7050
	void OnOwnerAimStateChanged(enum WeaponStateChange);// 0x27b6f90
	void OnLungingChanged(bool Lunging);// 0x27b6f00
	void JumpToFire(enum PreviousState);// 0x27b6c40
	void IncPrefireSkipWindow();// 0x27b6980
	KSProjectile* GetProjectile();// 0x27b68a0
	void EndMeleeSwing();// 0x27b63b0
	void BeginMeleeSwing();// 0x27b6350

--------------------------------
Class: KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	AimData CachedAim;//[Offset: 0x720, Size: 1]
	uint16 LastHitValidationRequestId;//[Offset: 0x770, Size: 1]
	<uint16,HitValidationRecoveryInfo> HitValidationRecoveryList;//[Offset: 0x778, Size: 1]
	bool bAimOverShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	float CachedAimBonus;//[Offset: 0x7cc, Size: 1]
	bool bApplyAccuracyServerSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	float Range;//[Offset: 0x7fc, Size: 1]
	enum FiredReplicationFlags;//[Offset: 0x800, Size: 1]
	KSAimCorrectionData* AimAssistCorrectionData;//[Offset: 0x808, Size: 1]
	bool bAllowAimCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 1]
	float HeadAimCorrectionOffset;//[Offset: 0x814, Size: 1]
	float HeadAimCorrectionOffsetPC;//[Offset: 0x818, Size: 1]
	float HeadAimCorrectionRange;//[Offset: 0x81c, Size: 1]
	bool bAllowHipAimCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	float HeadHipAimCorrectionOffset;//[Offset: 0x824, Size: 1]
	float HeadHipMouseAimCorrectionOffset;//[Offset: 0x828, Size: 1]
	float HeadHipAimCorrectionRange;//[Offset: 0x82c, Size: 1]
	float ValidationSweepRadius;//[Offset: 0x830, Size: 1]
	float AimOriginOffsetLenience;//[Offset: 0x834, Size: 1]
	float AimOriginAngularLenience;//[Offset: 0x838, Size: 1]
	float MinimumShotDirCoincidence;//[Offset: 0x83c, Size: 1]
	float CosAngularLenience;//[Offset: 0x840, Size: 1]
	void ValidateReceivedAimData(out AimData ReceivedAim);// 0x27b7da0
	void ValidateHitWithAimData(out HitResult Hit, out const AimData ReceivedAim);// 0x27b7c70
	static AimData StaticDefaultGetAimFromOrigin(out const Transform InOrigin);// 0x27b7ab0
	static AimData StaticDefaultGetAim(KSWeaponAsset* InWeaponAsset, Actor* InWeaponOwner, enum InAimMode);// 0x27b7970
	void ServerSetAimOverShoulder(bool bNewAimDownSights);// 0x27b7850
	void ServerReFireWeaponAimed(const WeaponStateChangeRequest request, const AimData ReceivedAim);// 0x27b7730
	void ServerProcessHits(const AimData ReceivedAim, const KSCompressedHit[] CompressedHits, uint16 RequestID);// 0x27b75b0
	void ServerFireWeaponAimedCompressed(const WeaponStateChangeRequest request, const AimData ReceivedAim, uint16 LastRequestId);// 0x27b7440
	void ServerFireWeaponAimed(const WeaponStateChangeRequest request, const AimData ReceivedAim);// 0x27b7320
	bool IsInOrTransitioningToAOS();// 0x27b6b40
	bool IsInOrTransitioningToAlternate();// 0x27b6b70
	bool IsInOrTransitioningToADS();// 0x27b6b10
	bool IsAimingOverShoulder();// 0x27b6ae0
	bool IsAimingDownSights();// 0x27b6ab0
	bool IsAimingAlternate();// 0x27b6a80
	bool IsAiming();// 0x27b6a50
	void InternalGetActorsToIgnore(out Actor*[] ActorsToIgnore);// 0x27b69a0
	float GetRange();// 0x27b6940
	enum GetOwnerAimMode();// 0x27b6870
	float GetHeadAimCorrectionRange();// 0x27b6830
	float GetHeadAimCorrectionOffset(bool bMouse);// 0x27b6790
	FullFireRepData GetFullFireRepData();// 0x27b6700
	float GetCurrentAccuracy();// 0x27b65e0
	AimData GetCachedAim();// 0x27b6520
	AimData GetAim();// 0x27b6450
	Actor*[] GetActorsToIgnore();// 0x27b63d0
	void ApplyView(out const AimData InAim, out AimData OutAim);// 0x27b6220
	bool ApplyAimAssist(out AimData InOutAim);// 0x27b6160
	void ApplyAccuracy(out const AimData InAim, out AimData OutAim);// 0x27b6030
	bool AllowAimCorrection();// 0x27b6000

--------------------------------
Class: KSWeaponAsset_Melee.KSWeaponAsset_WithProjectile.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	Vector MeleeSphereOffset;//[Offset: 0xa48, Size: 1]
	float MeleeSphereRadius;//[Offset: 0xa54, Size: 1]
	float MeleeSwingActiveTimeSeconds;//[Offset: 0xa58, Size: 1]
	byte[] OverlapObjectTypes;//[Offset: 0xa60, Size: 1]
	byte TraceChannel;//[Offset: 0xa70, Size: 1]
	bool bSprintLunge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa71, Size: 1]
	float MaxLungeDistance;//[Offset: 0xa74, Size: 1]
	float MaxLungeDistanceCorrectionMultiplier;//[Offset: 0xa78, Size: 1]
	float MaxLungeDuration;//[Offset: 0xa7c, Size: 1]
	float LungeConeHalfAngle;//[Offset: 0xa80, Size: 1]
	float LungeConeOriginDistanceOffset;//[Offset: 0xa84, Size: 1]
	byte[] GetOverlapObjectTypes();// 0x27c6c80
	byte GetMeleeTraceChannel();// 0x27c6bf0
	float GetMeleeSwingActiveTimeSeconds();// 0x27c6bc0
	float GetMeleeSphereRadius();// 0x27c6b90
	Vector GetMeleeSphereOffset();// 0x27c6b50
	float GetMaxLungeDuration();// 0x27c6b20
	float GetMaxLungeDistanceCorrectionMultiplier();// 0x27c6af0
	float GetMaxLungeDistance();// 0x27c6ac0
	float GetLungeConeHalfAngle();// 0x27c6a90

--------------------------------
Class: KSWeaponAsset_WithProjectile.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSProjectile* ProjectileClass;//[Offset: 0x9c8, Size: 1]
	KSWeaponAsset* ProjectileWeaponAsset;//[Offset: 0x9f0, Size: 1]
	KSProjectileWeaponInfo[] AdditionalProjectileWeaponInfos;//[Offset: 0xa18, Size: 1]
	float RadialDamageOriginOffsetDistance;//[Offset: 0xa28, Size: 1]
	float TimeToFullyCook;//[Offset: 0xa2c, Size: 1]
	CurveFloat* CookSpeedMultiplierCurve;//[Offset: 0xa30, Size: 1]
	CurveFloat* CookDamageMultiplierCurve;//[Offset: 0xa38, Size: 1]
	CurveFloat* BounceDamageMultiplierCurve;//[Offset: 0xa40, Size: 1]
	float GetTimeToFullyCook();// 0x27c7260
	float GetRadialDamageOriginOffsetDistance();// 0x27c7120
	KSProjectileWeaponInfo GetProjectileWeaponInfo(out const FName Key);// 0x27c7000
	KSWeaponAsset* GetProjectileWeaponAsset();// 0x27c6f60
	float GetProjectileRadius();// 0x27c6f30
	float GetProjectileMaxSpeed();// 0x27c6f00
	float GetProjectileMaxSimulationTimeStep();// 0x27c6ed0
	float GetProjectileMaxSimulationIterations();// 0x27c6ea0
	float GetProjectileInitialSpeed(float PitchAngle);// 0x27c6e10
	float GetProjectileGravityScale();// 0x27c6de0
	class KSProjectile GetProjectileClass();// 0x27c6d40
	float GetCookSpeedMultiplier(float TimeCooked);// 0x27c66e0
	float GetCookDamageMultiplier(float TimeCooked);// 0x27c6650
	float GetBounceDamageMultiplier(int NumBounces);// 0x27c65a0

--------------------------------
Class: KSProjectileWeaponInfo
	FName Key;//[Offset: 0x0, Size: 1]
	class KSProjectile* SoftProjectileClass;//[Offset: 0x8, Size: 1]
	KSWeaponAsset* SoftWeaponAsset;//[Offset: 0x30, Size: 1]

--------------------------------
Class: HitValidationRecoveryInfo
	KSCompressedHit[] Hits;//[Offset: 0x0, Size: 1]
	AimData AimData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSCompressedHit
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize TraceStart;//[Offset: 0x14, Size: 1]
	Vector_NetQuantize TraceEnd;//[Offset: 0x20, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x2c, Size: 1]
	FName BoneName;//[Offset: 0x34, Size: 1]

--------------------------------
Class: KSAimCorrectionData.KSAimAssistDataBase.DataAsset.Object
	<enum,bool> AllowAimCorrection;//[Offset: 0x38, Size: 1]
	<enum,float> AimCorrectionOffset;//[Offset: 0x88, Size: 1]
	<enum,float> AimCorrectionRange;//[Offset: 0xd8, Size: 1]
	KSAimAssistPropertyBool[] AllowOverride;//[Offset: 0x128, Size: 1]
	KSAimAssistPropertyFloat[] OffsetOverride;//[Offset: 0x138, Size: 1]
	KSAimAssistPropertyFloat[] RangeOverride;//[Offset: 0x148, Size: 1]
	<enum,bool> FullAllowAimCorrection;//[Offset: 0x158, Size: 1]
	<enum,float> FullAimCorrectionOffset;//[Offset: 0x1a8, Size: 1]
	<enum,float> FullAimCorrectionRange;//[Offset: 0x1f8, Size: 1]

--------------------------------
Class: KSAimAssistPropertyFloat
	enum InputType;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSPendingWeaponChargeValueUpdate
	float MaxCharge;//[Offset: 0x0, Size: 1]
	float CurrentCharge;//[Offset: 0x4, Size: 1]
	float Timestamp;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSPendingWeaponStateUpdates
	uint32 BroadcastId;//[Offset: 0x0, Size: 1]
	uint16 nEquipmentId;//[Offset: 0x4, Size: 1]
	KSWeaponDataUpdateContainer UpdateData;//[Offset: 0x6, Size: 1]

--------------------------------
Class: KSAmmoDropAsset.KSLootItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	enum AmmoType;//[Offset: 0x2a0, Size: 1]
	enum GetAmmoType();// 0x2627420

--------------------------------
Class: KSLootItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int Amount;//[Offset: 0x280, Size: 1]
	bool bShareWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool ShouldShareWithTeam();// 0x26f8f30
	FText GetReasonText();// 0x26f8360
	int GetAmount();// 0x262bbe0

--------------------------------
Class: KSAmmoManager.FastArraySerializer
	Actor* Owner;//[Offset: 0x108, Size: 1]
	KSAmmoManagerEntry[] AmmoSupply;//[Offset: 0x110, Size: 1]
	KSAmmoTransactions[] UnverifiedAmmoTransactions;//[Offset: 0x120, Size: 1]

--------------------------------
Class: KSAmmoManagerEntry.FastArraySerializerItem
	enum AmmoType;//[Offset: 0xc, Size: 1]
	uint32 UpdateId;//[Offset: 0x10, Size: 1]
	int AmmoCount;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSAmmoTransactions
	uint64 TransactionId;//[Offset: 0x0, Size: 1]
	uint32 UpdateIdAtTimeOfTransaction;//[Offset: 0x8, Size: 1]
	enum AmmoType;//[Offset: 0xc, Size: 1]
	int AmmoDelta;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AssistTag
	float ExpirationTime;//[Offset: 0x0, Size: 1]
	KSPlayerState* Assistant;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ReviveInfo
	bool bIsBeingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bRemoteRevive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bSelectedToRevive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bReviveGuaranteed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	KSPlayerState* Reviver;//[Offset: 0x8, Size: 1]
	KSCharacter* ReviverCharacter;//[Offset: 0x10, Size: 1]
	FName ReviveeOverrideMontage;//[Offset: 0x18, Size: 1]
	float ReviveProgress;//[Offset: 0x20, Size: 1]
	float ReviveRate;//[Offset: 0x24, Size: 1]
	float LocalReviveProgress;//[Offset: 0x28, Size: 1]
	byte RequestID;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: KSFlashBangRecord
	enum FlashBangIntensity;//[Offset: 0x0, Size: 1]
	CurveFloat* IntensityCurve;//[Offset: 0x8, Size: 1]
	float TimeElapsed;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x208, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 1]
	float IntensityMultiplier;//[Offset: 0x214, Size: 1]
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x218, Size: 1]
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x220, Size: 1]
	MulticastInlineDelegateProperty OnForceFeedbackFinished;//[Size: 1]
	void Stop();// 0xe7e880
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x449d0a0
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x449ce20
	void Play(float StartTime);// 0x4475180
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x449c7d0
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x449c6d0

--------------------------------
Class: KSLungeInfo
	Actor* LungeTarget;//[Offset: 0x0, Size: 1]
	float MaxLungeDistance;//[Offset: 0x8, Size: 1]
	float MaxLungeDuration;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSZipLineInfo
	KSZipLine* Zipline;//[Offset: 0x0, Size: 1]
	bool bZipLineReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: KSZipLine.Actor.Object
	KSCharacter*[] ZipLiners;//[Offset: 0x230, Size: 1]
	Vector ZipStart;//[Offset: 0x240, Size: 1]
	Vector ZipEnd;//[Offset: 0x24c, Size: 1]
	Vector ZipHangOffset;//[Offset: 0x258, Size: 1]
	float ZipSpeed;//[Offset: 0x264, Size: 1]
	bool bReadyToRide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float CooldownTime;//[Offset: 0x26c, Size: 1]
	float MinimumInteractTime;//[Offset: 0x270, Size: 1]
	float InteractTime;//[Offset: 0x274, Size: 1]
	float LengthToEndToIgnore;//[Offset: 0x278, Size: 1]
	bool bUpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	bool bForgivingInteractionAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 1]
	float AutoReleaseDistance;//[Offset: 0x280, Size: 1]
	float AutoReleaseSpeed;//[Offset: 0x284, Size: 1]
	float AutoReleasePitchAngle;//[Offset: 0x288, Size: 1]
	bool bSupportsPreHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	KSInteractableComponent* InteractableComponent;//[Offset: 0x290, Size: 1]
	void SetReadyToRide(bool bIsReadyToRide);// 0x27df930
	void OnPlayerZiplineCooldownEnd(KSCharacter* Character);// 0x2cbecb0
	void OnPlayerStopZiplining(KSCharacter* Character);// 0x2cbecb0
	void OnPlayerStartZiplining(KSCharacter* Character);// 0x2cbecb0
	bool IsUpline();// 0x27df540
	float GetAutoReleaseDistance();// 0x262bbe0
	Vector ComputeAutoReleaseVelocity(Rotator CharRotation);// 0x27df1c0

--------------------------------
Class: KSSprintCameraShake.KSVelocityCameraShake.KSCharacterCameraShake.CameraShake.Object
	void StopShakeOnStopSprint(bool NewSprint);// 0x2797990

--------------------------------
Class: ReplicatedViewInfo
	float Pitch;//[Offset: 0x0, Size: 1]
	float Yaw;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSDeathInfo
	enum DeathState;//[Offset: 0x0, Size: 1]
	class DamageType* DamageType;//[Offset: 0x8, Size: 1]
	Vector DamageDirection;//[Offset: 0x10, Size: 1]
	float FinalBlowDamage;//[Offset: 0x1c, Size: 1]
	bool bImmediateRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: KSMantleInfo
	bool bIsMantling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bVaultingOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ApproachDist;//[Offset: 0x4, Size: 1]
	float MantleHeight;//[Offset: 0x8, Size: 1]
	float ForwardDist;//[Offset: 0xc, Size: 1]
	float VaultDrop;//[Offset: 0x10, Size: 1]
	float MantleUpDuration;//[Offset: 0x14, Size: 1]
	float VaultAcrossDuration;//[Offset: 0x18, Size: 1]
	float VaultDownDuration;//[Offset: 0x1c, Size: 1]
	FName MantleName;//[Offset: 0x20, Size: 1]
	Vector WorldSpaceGrabLocation;//[Offset: 0x28, Size: 1]
	Vector WorldTowardsWallDir;//[Offset: 0x34, Size: 1]
	bool bFromStanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: KSCharacterSocketInfo
	FName SocketName;//[Offset: 0x0, Size: 1]
	Transform RelativeTM;//[Offset: 0x10, Size: 1]
	KSCharacterSocketComponent* SocketComponent;//[Offset: 0x40, Size: 1]
	SceneComponent* ParentComponent;//[Offset: 0x48, Size: 1]
	FName ParentSocketName;//[Offset: 0x50, Size: 1]
	enum CrouchHandlingType;//[Offset: 0x58, Size: 1]
	Vector AdditiveCrouchOffset;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: KSCharacterSocketComponent.SceneComponent.ActorComponent.Object
	FName SocketLookupName;//[Offset: 0x208, Size: 1]
	enum OffsetType;//[Offset: 0x210, Size: 1]
	enum CrouchingHandlingType;//[Offset: 0x211, Size: 1]
	Vector AdditiveCrouchOffset;//[Offset: 0x214, Size: 1]

--------------------------------
Class: KSCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnMoveModeChangedDynamic;//[Size: 1]
	float LastNetUpdateTime;//[Offset: 0x6a8, Size: 1]
	float MaxProxyForwardPredictionTime;//[Offset: 0x6ac, Size: 1]
	bool bCanEverSkipProxyPrediction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b2, Size: 1]
	int SkipProxyPredictionLOD;//[Offset: 0x6b4, Size: 1]
	float SkipProxySkydivePredictionDist;//[Offset: 0x6b8, Size: 1]
	bool bSkipProxyPredictionAfterSkydive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	FindFloorResult LastFloor;//[Offset: 0x6c0, Size: 1]
	float SlowToCrouchTime;//[Offset: 0x760, Size: 1]
	float PostCrouchSlowTime;//[Offset: 0x76c, Size: 1]
	float CrouchCooldownTime;//[Offset: 0x778, Size: 1]
	float TeaBagPreventionCrouchCooldownTime;//[Offset: 0x77c, Size: 1]
	Vector SimulatedProxyVelocity;//[Offset: 0x784, Size: 1]
	bool bCanEverPowerSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	float PowerSlideTurnFrictionMinAngle;//[Offset: 0x794, Size: 1]
	float PowerSlideTurnFrictionMaxAngle;//[Offset: 0x798, Size: 1]
	float MinimumStartPowerSlideSpeed;//[Offset: 0x79c, Size: 1]
	float MinimumPowerSlideSpeed;//[Offset: 0x7a0, Size: 1]
	float PowerSlideInitialSpeedBoost;//[Offset: 0x7a4, Size: 1]
	float PowerSlideLockoutTime;//[Offset: 0x7a8, Size: 1]
	float MinimumPowerSlideTime;//[Offset: 0x7ac, Size: 1]
	float PowerSlideMaxStepHeight;//[Offset: 0x7b0, Size: 1]
	InterpCurveFloat PowerSlideTurnDecelerationCurve;//[Offset: 0x7c0, Size: 1]
	InterpCurveFloat PowerSlideDecelerationCurve;//[Offset: 0x7d8, Size: 1]
	float PowerSlideResistDeceleration;//[Offset: 0x7f0, Size: 1]
	float MaxTimeAllowedGrappling;//[Offset: 0x810, Size: 1]
	float GrappleTotalImpulseToApply;//[Offset: 0x818, Size: 1]
	float MaxAllowedGrappleAngle;//[Offset: 0x820, Size: 1]
	float FallAimForgivenessPeriod;//[Offset: 0x830, Size: 1]
	float FallAimForgivenessEndTime;//[Offset: 0x834, Size: 1]
	float AutoVaultInputThreshold;//[Offset: 0x838, Size: 1]
	float AutoVaultDistanceFactor;//[Offset: 0x83c, Size: 1]
	float AutoVaultFacingThreshold;//[Offset: 0x840, Size: 1]
	float MinWalkingAcceleration;//[Offset: 0x844, Size: 1]
	float MaxSprintingSpeed;//[Offset: 0x848, Size: 1]
	float MaxWalkSpeedProne;//[Offset: 0x84c, Size: 1]
	float AimOverShoulderSpeedModifier;//[Offset: 0x850, Size: 1]
	float AimDownSightsSpeedModifier;//[Offset: 0x854, Size: 1]
	float StrafingSpeedFactor;//[Offset: 0x858, Size: 1]
	float ReverseSpeedFactor;//[Offset: 0x85c, Size: 1]
	bool bWantsToSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x860, Size: 1]
	bool bSprintIsHeld;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x860, Size: 1]
	bool bSprintIsToggledOn;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x860, Size: 1]
	bool bSprintInterrupted;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x860, Size: 1]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x860, Size: 1]
	bool bCachedCharacterAllowAdditionalJumpRightNow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x860, Size: 1]
	bool bCachedCharacterAllowSprintingRightNow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x860, Size: 1]
	bool bCachedCharacterAllowPowerSlideRightNow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x860, Size: 1]
	bool bPreventAutoVaultWhileReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x861, Size: 1]
	bool bPreventAutoVaultWhileADS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x861, Size: 1]
	bool bPreventAutoVaultWhileCrouching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x861, Size: 1]
	float CachedWeaponSpeedModifier;//[Offset: 0x864, Size: 1]
	float ReducedJumpZVelocity;//[Offset: 0x868, Size: 1]
	float ReducedJumpHeightWindow;//[Offset: 0x86c, Size: 1]
	bool bSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x870, Size: 1]
	float MinHardLandingHeight;//[Offset: 0x880, Size: 1]
	float HardLandingLockoutTime;//[Offset: 0x884, Size: 1]
	float FreefallLandingLockoutTime;//[Offset: 0x888, Size: 1]
	enum AimState;//[Offset: 0x88c, Size: 1]
	KSCharacterBase* KSCharacterOwner;//[Offset: 0x890, Size: 1]
	float MaxSprintingSwimSpeed;//[Offset: 0x898, Size: 1]
	float MaxSubmergedSwimSpeed;//[Offset: 0x89c, Size: 1]
	float SwimSurfaceAcceleration;//[Offset: 0x8a0, Size: 1]
	float SwimSubmergedAcceleration;//[Offset: 0x8a4, Size: 1]
	float MaxDownedSwimSpeed;//[Offset: 0x8a8, Size: 1]
	float SwimStrafingSpeedFactor;//[Offset: 0x8ac, Size: 1]
	float SwimReverseSpeedFactor;//[Offset: 0x8b0, Size: 1]
	float MaxSwimZSpeed;//[Offset: 0x8b4, Size: 1]
	float SwimZAcceleration;//[Offset: 0x8b8, Size: 1]
	float SurfaceSwimDepth;//[Offset: 0x8bc, Size: 1]
	float SubmergedSwimDepth;//[Offset: 0x8c0, Size: 1]
	float HardMaxSwimDepth;//[Offset: 0x8c4, Size: 1]
	float FallSpeedWaterDeflectionFactor;//[Offset: 0x8c8, Size: 1]
	float CrouchToSwimDepth;//[Offset: 0x8cc, Size: 1]
	MantleConfig[] MantleConfigs;//[Offset: 0x8d0, Size: 1]
	float m_fLedgeGrabDistance;//[Offset: 0x8f0, Size: 1]
	float m_fSprintLedgeGrabDistance;//[Offset: 0x8f4, Size: 1]
	float m_fLedgeGrabbableWallZ;//[Offset: 0x8f8, Size: 1]
	float m_fMaxLedgeCheckHeight;//[Offset: 0x8fc, Size: 1]
	float m_fMinLedgeCheckHeight;//[Offset: 0x900, Size: 1]
	float m_fSwimHeightBoost;//[Offset: 0x904, Size: 1]
	float m_fLedgeGrabbableZ;//[Offset: 0x908, Size: 1]
	float m_fVaultZSpeed;//[Offset: 0x90c, Size: 1]
	float m_fEnhancedZSpeed;//[Offset: 0x910, Size: 1]
	float m_fVaultLateralSpeed;//[Offset: 0x914, Size: 1]
	float m_fVaultFacingThreshold;//[Offset: 0x918, Size: 1]
	float m_fVaultVerticalCheckInterval;//[Offset: 0x91c, Size: 1]
	float m_fVaultHeadClearance;//[Offset: 0x920, Size: 1]
	float m_fMantleDownDistance;//[Offset: 0x924, Size: 1]
	float m_fVaultForwardDistance;//[Offset: 0x928, Size: 1]
	float m_fMantleMaxDistance;//[Offset: 0x92c, Size: 1]
	Vector m_vMantleLaunchVelocity;//[Offset: 0x930, Size: 1]
	float m_fVaultErrorForgiveness;//[Offset: 0x93c, Size: 1]
	float m_fVaultStepFactor;//[Offset: 0x940, Size: 1]
	float MantleStepHeightProxy;//[Offset: 0x944, Size: 1]
	bool bRequireJumpForVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 1]
	float MaximumVelocityPreserveHeight;//[Offset: 0x94c, Size: 1]
	float MinimumSpeedForFromJumpMantles;//[Offset: 0x950, Size: 1]
	bool bAllowMantleEarlyOutOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 1]
	bool bRestrictVaultingIntoCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 1]
	float VaultFromGroundTraceHeightAdjust;//[Offset: 0x958, Size: 1]
	bool bVaultDebugPrinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	MantleConfig CurrentMantleConfig;//[Offset: 0x998, Size: 1]
	InterpCurveFloat MantleClothSimCurve;//[Offset: 0xa88, Size: 1]
	float m_fPostSprintLockoutTime;//[Offset: 0xab0, Size: 1]
	float m_fRemainingPostSprintLockoutTime;//[Offset: 0xab4, Size: 1]
	float FreeFallClearanceHeight;//[Offset: 0xab8, Size: 1]
	float MinFreeFallSpeedZ;//[Offset: 0xabc, Size: 1]
	float DefaultFreeFallSpeedZ;//[Offset: 0xac0, Size: 1]
	float MaxFreeFallSpeedZ;//[Offset: 0xac4, Size: 1]
	float MinFreeFallForwardSpeed;//[Offset: 0xac8, Size: 1]
	float DefaultFreeFallForwardSpeed;//[Offset: 0xacc, Size: 1]
	float MaxFreeFallForwardSpeed;//[Offset: 0xad0, Size: 1]
	float MaxDiveForwardSpeed;//[Offset: 0xad4, Size: 1]
	float MaxFreeFallLateralSpeed;//[Offset: 0xad8, Size: 1]
	float MaxFreeFallLateralAcceleration;//[Offset: 0xadc, Size: 1]
	float MaxFreeFallReverseAcceleration;//[Offset: 0xae0, Size: 1]
	float FreeFallAirControl;//[Offset: 0xae4, Size: 1]
	float FreeFallDelay;//[Offset: 0xae8, Size: 1]
	bool bInFreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 1]
	bool bWingsuitHasBeenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaed, Size: 1]
	float FreeFallBrakingAcceleration;//[Offset: 0xaf0, Size: 1]
	float FreeFallDiveThresholdAngle;//[Offset: 0xaf4, Size: 1]
	float FreeFallDiveForwardInputThreshold;//[Offset: 0xaf8, Size: 1]
	bool bWantsToEndFreeFallEarly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc, Size: 1]
	bool bIsFreeFallDiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 1]
	Rotator LastYawRotation;//[Offset: 0xb14, Size: 1]
	float FreeFallYawAccumDeltaTime;//[Offset: 0xb20, Size: 1]
	float FreeFallYawTotalDeltaTime;//[Offset: 0xb24, Size: 1]
	float FreeFallDelayProgress;//[Offset: 0xb28, Size: 1]
	Actor* FreeFallHeightActor;//[Offset: 0xb2c, Size: 1]
	bool bUseFreeFallStartHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]
	float FreeFallNetSmoothTime;//[Offset: 0xb38, Size: 1]
	float PostFreeFallNetSmoothTimeRecoveryRate;//[Offset: 0xb3c, Size: 1]
	bool bWingsuitControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 1]
	float WingsuitGlideDragCoefficient;//[Offset: 0xb44, Size: 1]
	float WingsuitDiveDragCoefficient;//[Offset: 0xb48, Size: 1]
	float WingsuitGlideSurfaceArea;//[Offset: 0xb4c, Size: 1]
	float WingsuitDiveSurfaceArea;//[Offset: 0xb50, Size: 1]
	Vector CachedVelocityPreDodgeRoll;//[Offset: 0xb54, Size: 1]
	bool bCachedCharacterAllowDodgeRollRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb60, Size: 1]
	bool bStartDodgeRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb60, Size: 1]
	bool bWantsToDodgeRollOnLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb64, Size: 1]
	bool bShouldDodgeRollOnLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb65, Size: 1]
	uint32 MidairDodgeRollCountSinceLastGrounded;//[Offset: 0xb68, Size: 1]
	MulticastInlineDelegateProperty OnDodgeRollStyleChangedDel;//[Size: 1]
	enum DodgeRollStyle;//[Offset: 0xb80, Size: 1]
	float MaxDodgeRollSpeed;//[Offset: 0xb84, Size: 1]
	float DodgeRollDistance;//[Offset: 0xb88, Size: 1]
	bool bCanDodgeRollFromAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 1]
	float DodgeRollCooldownTime;//[Offset: 0xb90, Size: 1]
	float DodgeRollForgivenessPeriod;//[Offset: 0xb98, Size: 1]
	float DodgeRollForgivenessEndTime;//[Offset: 0xb9c, Size: 1]
	float DodgeRollAcceleration;//[Offset: 0xbb4, Size: 1]
	float BrakingDecelerationPostDodgeRoll;//[Offset: 0xbb8, Size: 1]
	bool bEnableBrakingDecelerationPostDodgeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbc, Size: 1]
	InterpCurveFloat DodgeRollVelocityCurve;//[Offset: 0xbc0, Size: 1]
	InterpCurveFloat DodgeRollClothSimCurve;//[Offset: 0xbd8, Size: 1]
	bool bCachedCharacterAllowLungeRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbf0, Size: 1]
	float CurrentLungeDistance;//[Offset: 0xbf4, Size: 1]
	float MaxLungeDistance;//[Offset: 0xbf8, Size: 1]
	Actor* LungeTarget;//[Offset: 0xc00, Size: 1]
	float CurrentLungeDuration;//[Offset: 0xc08, Size: 1]
	float MaxLungeDuration;//[Offset: 0xc0c, Size: 1]
	float LungeAcceleration;//[Offset: 0xc10, Size: 1]
	float MaxLungeSpeed;//[Offset: 0xc14, Size: 1]
	float LungeStopLateralDistance;//[Offset: 0xc18, Size: 1]
	float LungeStopVerticalDistance;//[Offset: 0xc1c, Size: 1]
	float LungeAirControl;//[Offset: 0xc20, Size: 1]
	SplineComponent* FlightRecoverySplineComponent;//[Offset: 0xc40, Size: 1]
	float FlightRecoverySpeed;//[Offset: 0xc4c, Size: 1]
	bool bCachedCharacterAllowAbilityMoveRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc50, Size: 1]
	bool bStartAbilityMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc50, Size: 1]
	bool bCachedCharacterAllowZipLineRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc58, Size: 1]
	bool bZiplineEndsEnforceDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	bool bAllowDodgeRollIntoZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 1]
	bool bRequireJumpForZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc62, Size: 1]
	bool bRequireDownwardMovementToZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc63, Size: 1]
	bool bAllowZiplineReverseViaDodgeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 1]
	float ZiplineAcceleration;//[Offset: 0xc68, Size: 1]
	bool bEnableFriendlyNudging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d, Size: 1]
	float MaxEmoteInterruptDistance;//[Offset: 0xc74, Size: 1]
	float MaxEmoteMovingInterruptDistance;//[Offset: 0xc78, Size: 1]
	float CachedMaxEmoteInteruptDistance;//[Offset: 0xc7c, Size: 1]
	bool bClientManuallyShoulderSwappedNearby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 1]
	bool TryToZipline();// 0x26754e0
	void SetNotifyAfterDropshipLand();// 0x26754c0
	void SetGrappleSpikeAnchor(Vector SpikePostion);// 0x2675430
	void SetDodgeRollStyle(enum InStyle);// 0x26753b0
	void ResetPostFireSprintLockout();// 0x2675390
	void ResetMidairDodgeRollCount();// 0x2675370
	void OnDodgeRollStyleChanged__DelegateSignature(enum NewStyle);// 0x2cbecb0
	void OnChangeMoveModeDynamic__DelegateSignature(byte PreviousMovementMode, int PreviousCustomMode, byte NewMovementMode, int NewCustomMode);// 0x2cbecb0
	bool IsZipLining();// 0x2675340
	bool IsStandingStill();// 0x2675310
	bool IsSprintingWithVelocity();// 0x26752e0
	bool IsSprinting();// 0x26752b0
	bool IsInPowerSlide();// 0x2675290
	bool IsInGrapple();// 0x2675270
	bool IsFlightRecovery();// 0x2675240
	bool IsDowned();// 0x2675210
	bool IsDodgeRolling();// 0x26751e0
	bool IsAimingOverShoulder();// 0x26751b0
	bool IsAimingDownSights();// 0x2675180
	bool IsAimingAlternate();// 0x2675150
	bool IsAiming();// 0x2675120
	bool GetWantsToSprint();// 0x26750e0
	bool GetWantsToPowerSlide();// 0x26750b0
	float GetProratedMaxSpeed();// 0x2675070
	enum GetDodgeRollStyle();// 0x2675050
	Vector FindPointAboveWater(Vector TestPoint);// 0x2674fa0
	void ClientAdjustPositionZipline(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, Vector NewPreVaultLocation, float NewLastEvalTime, const KSZipLineInfo Zipline);// 0x2674ca0
	void ClientAdjustPositionVault(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, Vector NewPreVaultLocation, float NewLastEvalTime);// 0x26749e0
	void ClientAdjustPositionDodgeRoll(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, float NewDodgeDuration, float NewDodgeDirection);// 0x2674730
	bool CanDodgeRollInCurrentState();// 0x2674700
	void CancelDodgeRollIntoCrouch();// 0x1f2ba30

--------------------------------
Class: KSAkComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	enum OcclusionType;//[Offset: 0x404, Size: 1]
	float MinTimeBetweenOcclusionUpdates;//[Offset: 0x408, Size: 1]
	float OcclusionDistanceMultiplier;//[Offset: 0x40c, Size: 1]
	int OcclusionInterpolationMilliseconds;//[Offset: 0x410, Size: 1]
	float CurrentObstruction;//[Offset: 0x414, Size: 1]
	float CurrentOcclusion;//[Offset: 0x418, Size: 1]
	bool RequiresListenerDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	float MinTimeBetweenDistanceUpdates;//[Offset: 0x424, Size: 1]
	bool RequiresListenerDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	float MinTimeBetweenDirectionUpdates;//[Offset: 0x430, Size: 1]
	BakedOcclusionLUT* LUT;//[Offset: 0x440, Size: 1]
	AkAudioEvent*[] PendingStopEvents;//[Offset: 0x448, Size: 1]
	<int,AkAudioEvent*> LoopIdToStopEventMap;//[Offset: 0x458, Size: 1]
	void StopLoopingEvent(int StopHandle);// 0x2628760
	void StopAllLoopingEvents();// 0x2628720
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x2627c70
	int AddLoopingEvent(AkAudioEvent* EventStart, AkAudioEvent* EventStop);// 0x2626b50

--------------------------------
Class: KSHeatSourceComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnTemperatureChanged;//[Size: 1]
	bool bSkipCosmeticIfOwnerIsLocallyViewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bOnlySkipCosmeticForOnAndViewedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	float Temperature;//[Offset: 0xc4, Size: 1]
	float TemperatureScalarModifier;//[Offset: 0xc8, Size: 1]
	bool bDisableTickWhenTemperatureTransitionCompletes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	float TransitionTargetTemp;//[Offset: 0xd0, Size: 1]
	float TransitionRate;//[Offset: 0xd4, Size: 1]
	enum LastKnownViewModeState;//[Offset: 0xd8, Size: 1]
	PrimitiveComponent*[] WithoutHeatVisibilityBlockers;//[Offset: 0xe0, Size: 1]
	PrimitiveComponent*[] HeatOnlyVisibilityBlockers;//[Offset: 0xf0, Size: 1]
	void UnregisterWithoutHeatVisibilityBlocker(PrimitiveComponent* Blocker);// 0x26c8900
	void UnregisterHeatOnlyVisibilityBlocker(PrimitiveComponent* Blocker);// 0x26c8880
	void TransitionToTemperature(float NewTemperature, float RatePerSecond);// 0x26c87c0
	void SetTemperatureScalarModifier(float NewTemperatureModifier);// 0x26c85a0
	void SetTemperature(float NewTemperature);// 0x26c8520
	void RegisterWithoutHeatVisibilityBlocker(PrimitiveComponent* Blocker);// 0x26c7ee0
	void RegisterHeatOnlyVisibilityBlocker(PrimitiveComponent* Blocker);// 0x26c7e60
	void OnThermalVisionStateChanged(enum NewState);// 0x2cbecb0
	void OnOwnerInfoUpdateNotify();// 0x2cbecb0
	void NotifyThermalVisionStateChanged(enum NewState);// 0x26c7bd0
	float GetUnmodifiedTemperature();// 0x26c7b10
	float GetTemperature();// 0x26c7ae0

--------------------------------
Class: KSTranslucencyMaterialInfo
	MaterialInstanceDynamic* TranslucencyMaterial;//[Offset: 0x0, Size: 1]
	bool bIsPersistentMaterialOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bUpdateAllPersistentMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	KSSkeletalMeshComponent* SkeletalMesh;//[Offset: 0x10, Size: 1]
	int PersistentMaterialSlot;//[Offset: 0x18, Size: 1]
	FName[] ScalarParamNames;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSProp_Physical.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x220, Size: 1]
	AkAudioEvent* CollisionAkEvent;//[Offset: 0x228, Size: 1]
	float ImpactSoundThreshold;//[Offset: 0x230, Size: 1]

--------------------------------
Class: KSFootprintInfo
	TimerHandle FootprintTimerHandle;//[Offset: 0x0, Size: 1]
	PoolableDecalComponent* FootprintPoolableDecalComponent;//[Offset: 0x8, Size: 1]
	int FootprintInstancedMeshIndex;//[Offset: 0x10, Size: 1]
	int FootprintId;//[Offset: 0x14, Size: 1]
	Vector FootprintLocation;//[Offset: 0x18, Size: 1]
	Rotator FootprintRotation;//[Offset: 0x24, Size: 1]
	bool bRightFoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4e8, Size: 1]
	int NumCustomDataFloats;//[Offset: 0x4f8, Size: 1]
	float[] PerInstanceSMCustomData;//[Offset: 0x500, Size: 1]
	int InstancingRandomSeed;//[Offset: 0x510, Size: 1]
	int InstanceStartCullDistance;//[Offset: 0x514, Size: 1]
	int InstanceEndCullDistance;//[Offset: 0x518, Size: 1]
	int[] InstanceReorderTable;//[Offset: 0x520, Size: 1]
	int NumPendingLightmaps;//[Offset: 0x578, Size: 1]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x580, Size: 1]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x44b9e30
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x44b9ce0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x44b9c20
	bool RemoveInstance(int InstanceIndex);// 0x44b9b60
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x44b9210
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x44b94a0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x44b9370
	int GetInstanceCount();// 0x44b91e0
	void ClearInstances();// 0x1f13040
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x44b87f0
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x44b85c0
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x44b84e0
	int AddInstance(out const Transform InstanceTransform);// 0x44b8400

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: KSNavModifierComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	Vector ComponentBoundsOffset;//[Offset: 0x140, Size: 1]
	void UpdateNavigationMesh();// 0x2713570
	void UpdateCachedBounds();// 0x2713550
	void SetAreaClassAndCacheBounds(class NavArea NewAreaClass);// 0x2712df0

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 1]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 1]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x4694ad0

--------------------------------
Class: KSVOComponent.ActorComponent.Object
	KSCharacter* CharacterOwner;//[Offset: 0xc8, Size: 1]
	float GlobalCooldownDuration;//[Offset: 0x110, Size: 1]
	<int,float> CooldownGroupMap;//[Offset: 0x118, Size: 1]
	float TimeNextEventCanPlayAfter;//[Offset: 0x168, Size: 1]
	delegate OnVOLineFinished;//[Offset: 0x16c, Size: 1]
	float VODuckingAmount;//[Offset: 0x17c, Size: 1]
	void TeamStateChanged(KSPlayerState* PlayerState);// 0x27aa120
	void StopVO();// 0x27aa0e0
	void ServerPostVO(KSVoicelineEvent VoicelineEvent);// 0x27a9ee0
	void PostVOToServer(KSVoicelineEvent VoicelineEvent);// 0x27a9df0
	void PostVO(KSVoicelineEvent VoicelineEvent);// 0x27a9d00
	void PlayVO(const KSVoicelineEvent VoicelineEvent);// 0x27a9bc0
	void PlayerStateChanged(KSPlayerState* PlayerState);// 0x27a9c80
	void OwnerPossessedBy(Controller* Controller);// 0x27a98f0
	void OnReadyToPlay();// 0x27a9870
	void ForcePlayVO(out const KSVoicelineEvent VoicelineEvent);// 0x27a9520
	void FinishedLineCallback(enum in_eType, AkCallbackInfo* in_pCallbackInfo);// 0x27a9460
	void ConditionalPlayVO(out const KSVoicelineEvent VoicelineEvent);// 0x27a9380
	void BindToTeamStateEvents(KSTeamState* TeamState);// 0x27a9260
	void BindToPlayerStateEvents(KSPlayerState* PlayerState);// 0x27a91d0
	void BindToPlayerControllerEvents(KSPlayerController* PlayerController);// 0x1ec3f70
	void BindToPingManagerEvents(KSPingManager* PingManager);// 0x26aa660
	void BindToGameStateEvents(KSGameState* GameState);// 0x27a9140
	void BindToEvents();// 0x2746060
	void BindToCharacterEvents(KSCharacter* Character);// 0xfb2060
	void BindToActivatableModEvents(KSModInst_Activated* ActivatableMod);// 0x26aa5d0
	void AnnounceBombSpotted(bool Armed);// 0x2cbecb0

--------------------------------
Class: KSVehicle.WheeledVehicle.Pawn.Actor.Object
	KSVehicleMovementComponent4W* KSVehicleMovementComponent;//[Offset: 0x298, Size: 1]
	KSVehicleSeatComponent*[] Seats;//[Offset: 0x2a0, Size: 1]
	<KSCharacter*,KSVehicleSeatComponent*> RiderMap;//[Offset: 0x2b0, Size: 1]
	MulticastInlineDelegateProperty OnVehicleSeatingChanged;//[Size: 1]
	FText VehicleName;//[Offset: 0x310, Size: 1]
	float TimeToGetIn;//[Offset: 0x328, Size: 1]
	float MaxSpeedToEnter;//[Offset: 0x32c, Size: 1]
	float MaxAngleFromVehicleToInteract;//[Offset: 0x330, Size: 1]
	float SwapToDriverSeatHoldTime;//[Offset: 0x334, Size: 1]
	KSCharacter* Driver;//[Offset: 0x338, Size: 1]
	KSRiderSeatPair[] Riders;//[Offset: 0x340, Size: 1]
	KSCharacter*[] Interacters;//[Offset: 0x350, Size: 1]
	bool PreventRiderSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	float DetachedParachuteLinearDamping;//[Offset: 0x364, Size: 1]
	float TimeUntilParachuteDestroyed;//[Offset: 0x368, Size: 1]
	Vector ParachuteDetachImpulse;//[Offset: 0x36c, Size: 1]
	FName[] ParachuteImpulseBoneNames;//[Offset: 0x378, Size: 1]
	SkeletalMeshComponent* ParachuteMesh;//[Offset: 0x388, Size: 1]
	MulticastInlineDelegateProperty OnManualDetachmentAvailable;//[Size: 1]
	MulticastInlineDelegateProperty OnManualDetachmentUnavailable;//[Size: 1]
	FName[] ValidInteractionTypes;//[Offset: 0x3f0, Size: 1]
	SpringArmComponent* SpringArm;//[Offset: 0x400, Size: 1]
	CameraComponent* MainCamera;//[Offset: 0x408, Size: 1]
	float RiderCameraBlendTime;//[Offset: 0x428, Size: 1]
	float RiderCameraBlendExponent;//[Offset: 0x42c, Size: 1]
	float CameraXTurnRate;//[Offset: 0x430, Size: 1]
	float CameraYTurnRate;//[Offset: 0x434, Size: 1]
	float CameraDeadZoneRate;//[Offset: 0x438, Size: 1]
	float CameraMinHorizontalAngle;//[Offset: 0x43c, Size: 1]
	float CameraMaxHorizontalAngle;//[Offset: 0x440, Size: 1]
	float CameraMinVerticalAngle;//[Offset: 0x444, Size: 1]
	float CameraMaxVerticalAngle;//[Offset: 0x448, Size: 1]
	ReplicatedViewInfo ViewInfo;//[Offset: 0x44c, Size: 1]
	float MaxHealth;//[Offset: 0x454, Size: 1]
	float CurrentHealth;//[Offset: 0x458, Size: 1]
	float CurrentHealthStage;//[Offset: 0x460, Size: 1]
	MulticastInlineDelegateProperty OnVehicleHealthChanged;//[Size: 1]
	bool Destroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	Vector LocalImpulsePosition;//[Offset: 0x47c, Size: 1]
	StaticMeshComponent* DestroyedMesh;//[Offset: 0x488, Size: 1]
	PrimitiveComponent*[] DamageableComponents;//[Offset: 0x490, Size: 1]
	<float,KSVehicleDestructionStage> HealthStages;//[Offset: 0x4a8, Size: 1]
	<enum,float> Vulnerabilities;//[Offset: 0x4f8, Size: 1]
	float DamageImpulseMultiplier;//[Offset: 0x548, Size: 1]
	KSWeaponAsset* DestructionDamageWeapon;//[Offset: 0x550, Size: 1]
	class DamageType* DestructionDamageTypeClass;//[Offset: 0x558, Size: 1]
	float MinSpeedToDamageHitPlayer;//[Offset: 0x5a0, Size: 1]
	float MaxSpeedToDamageHitPlayer;//[Offset: 0x5a4, Size: 1]
	float MinPlayerDamageMultiplier;//[Offset: 0x5a8, Size: 1]
	float MaxPlayerDamageMultiplier;//[Offset: 0x5ac, Size: 1]
	float PlayerDamageCooldown;//[Offset: 0x5b0, Size: 1]
	float MinSpeedForImpactDamage;//[Offset: 0x5b4, Size: 1]
	float MaxSpeedForImpactDamage;//[Offset: 0x5b8, Size: 1]
	float MinImpactDamage;//[Offset: 0x5bc, Size: 1]
	float MaxImpactDamage;//[Offset: 0x5c0, Size: 1]
	float VehicleDamageCooldown;//[Offset: 0x5c4, Size: 1]
	float MinImpactAngleFromVehicleUp;//[Offset: 0x5c8, Size: 1]
	float MaxImpactAngleFromVehicleUp;//[Offset: 0x5cc, Size: 1]
	float MinAngleToSlideCorrect;//[Offset: 0x5d0, Size: 1]
	float MaxAngleToSlideCorrect;//[Offset: 0x5d4, Size: 1]
	float MaxSlideCorrectionSpeed;//[Offset: 0x5d8, Size: 1]
	KSWeaponAsset* ImpactDamageWeapon;//[Offset: 0x5e8, Size: 1]
	class DamageType* ImpactDamageTypeClass;//[Offset: 0x5f0, Size: 1]
	CapsuleComponent* PlayerHitComponent;//[Offset: 0x5f8, Size: 1]
	void VehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, Vector NormalImpulse, out const HitResult Hit);// 0x27a6230
	void VehicleFeatureReleased();// 0x1eef180
	void VehicleFeaturePressed();// 0x1ef3940
	void VehicleFeature(bool Pressed);// 0x2cbecb0
	void UseReleased();// 0x1f129c0
	void UsePressed();// 0x1f129e0
	void TurnCameraY(float Rate);// 0x27a61b0
	void TurnCameraX(float Rate);// 0x27a6130
	void SwapReleased();// 0x1f12280
	void SwapPressed();// 0x1f122a0
	void StopParachute();// 0x1f2baf0
	void Steer(float Value);// 0x27a6090
	void StartParachute();// 0x1ef3f30
	void ServerVehicleFeature(bool Pressed);// 0x27a5ed0
	void ServerUpdateRotation(ReplicatedViewInfo NewViewInfo);// 0x27a5e20
	void ServerHorn(bool Pressed);// 0x27a5d60
	void ServerGetOut(KSCharacter* Rider);// 0x27a5ca0
	void ServerGetInNextEmptySeat(KSCharacter* Rider);// 0x27a5be0
	void ServerAirSpeed(float Value);// 0x27a5b30
	void RiderDestroyed(Actor* DestroyedActor);// 0x27a5ab0
	void ResetVehicle(out const RoundInitState RoundInitState);// 0x27a5a10
	void ResetInput();// 0x27a59f0
	void ResetCameraRotations();// 0x27a59d0
	void PlayHealthStageChange(out const KSVehicleDestructionStage Stage);// 0x2cbecb0
	void OnRep_Riders();// 0x27a58f0
	void OnRep_Driver();// 0x27a58b0
	void OnRep_Destroyed();// 0x27a5890
	void OnRep_CurrentHealthStage();// 0x27a5870
	void OnRep_CurrentHealth();// 0x27a5850
	void MoveForward(float Value);// 0x27a56d0
	void HornReleased();// 0x1ef3f10
	void HornPressed();// 0x1f12760
	void Horn(bool Pressed);// 0x2cbecb0
	void HideParachute();// 0x27a5660
	bool GetInHighestPriorityEmptySeat(KSCharacter* Rider);// 0x27a5440
	KSCharacter* GetDriver();// 0x264f760
	void Explode();// 0x2cbecb0
	void ExitPressed();// 0x1f12360
	void Deteriorate();// 0x27a52e0
	void BroadcastVehicleFeature(bool Pressed);// 0x27a5250
	void BroadcastHorn(bool Pressed);// 0x27a50f0
	void Brake(float Value);// 0x27a5070
	void AirSpeed(float Value);// 0x1f123c0

--------------------------------
Class: WheeledVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 1]
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x288, Size: 1]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 1]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 1]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x140, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 1]
	float Mass;//[Offset: 0x148, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x150, Size: 1]
	float DragCoefficient;//[Offset: 0x160, Size: 1]
	float ChassisWidth;//[Offset: 0x164, Size: 1]
	float ChassisHeight;//[Offset: 0x168, Size: 1]
	float DragArea;//[Offset: 0x16c, Size: 1]
	float EstimatedMaxEngineSpeed;//[Offset: 0x170, Size: 1]
	float MaxEngineRPM;//[Offset: 0x174, Size: 1]
	float DebugDragMagnitude;//[Offset: 0x178, Size: 1]
	Vector InertiaTensorScale;//[Offset: 0x17c, Size: 1]
	float MinNormalizedTireLoad;//[Offset: 0x188, Size: 1]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x18c, Size: 1]
	float MaxNormalizedTireLoad;//[Offset: 0x190, Size: 1]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x194, Size: 1]
	float ThresholdLongitudinalSpeed;//[Offset: 0x198, Size: 1]
	int LowForwardSpeedSubStepCount;//[Offset: 0x19c, Size: 1]
	int HighForwardSpeedSubStepCount;//[Offset: 0x1a0, Size: 1]
	VehicleWheel*[] Wheels;//[Offset: 0x1a8, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1d0, Size: 1]
	float RVOAvoidanceHeight;//[Offset: 0x1d4, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x1d8, Size: 1]
	float RVOSteeringStep;//[Offset: 0x1dc, Size: 1]
	float RVOThrottleStep;//[Offset: 0x1e0, Size: 1]
	int AvoidanceUID;//[Offset: 0x1e4, Size: 1]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1e8, Size: 1]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1ec, Size: 1]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1f0, Size: 1]
	float AvoidanceWeight;//[Offset: 0x1f4, Size: 1]
	Vector PendingLaunchVelocity;//[Offset: 0x1f8, Size: 1]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x204, Size: 1]
	float RawSteeringInput;//[Offset: 0x21c, Size: 1]
	float RawThrottleInput;//[Offset: 0x220, Size: 1]
	float RawBrakeInput;//[Offset: 0x224, Size: 1]
	float SteeringInput;//[Offset: 0x228, Size: 1]
	float ThrottleInput;//[Offset: 0x22c, Size: 1]
	float BrakeInput;//[Offset: 0x230, Size: 1]
	float HandbrakeInput;//[Offset: 0x234, Size: 1]
	float IdleBrakeInput;//[Offset: 0x238, Size: 1]
	float StopThreshold;//[Offset: 0x23c, Size: 1]
	float WrongDirectionThreshold;//[Offset: 0x240, Size: 1]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x244, Size: 1]
	VehicleInputRate BrakeInputRate;//[Offset: 0x24c, Size: 1]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x254, Size: 1]
	VehicleInputRate SteeringInputRate;//[Offset: 0x25c, Size: 1]
	Controller* OverrideController;//[Offset: 0x288, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x1f42070
	void SetThrottleInput(float Throttle);// 0x1f41ff0
	void SetTargetGear(int GearNum, bool bImmediate);// 0x1f41f30
	void SetSteeringInput(float Steering);// 0x1f41eb0
	void SetHandbrakeInput(bool bNewHandbrake);// 0x1f41d50
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x1f41cc0
	void SetGroupsToIgnore(int GroupFlags);// 0x1f41c40
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1f41bb0
	void SetGroupsToAvoid(int GroupFlags);// 0x1f41b30
	void SetGearUp(bool bNewGearUp);// 0x1f41aa0
	void SetGearDown(bool bNewGearDown);// 0x1f41a10
	void SetBrakeInput(float Brake);// 0x1f417f0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x1f41760
	void SetAvoidanceGroup(int GroupFlags);// 0x1f416e0
	void SetAvoidanceEnabled(bool bEnable);// 0x1f41650
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x1f41480
	bool GetUseAutoGears();// 0x1f413f0
	int GetTargetGear();// 0x1f413c0
	float GetForwardSpeed();// 0x1f41300
	float GetEngineRotationSpeed();// 0x1f412d0
	float GetEngineMaxRotationSpeed();// 0x1f412a0
	int GetCurrentGear();// 0x1f41270

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 1]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 1]
	bool bDisableSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 1]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	Vector Offset;//[Offset: 0x34, Size: 1]
	float ShapeRadius;//[Offset: 0x40, Size: 1]
	float ShapeWidth;//[Offset: 0x44, Size: 1]
	float Mass;//[Offset: 0x48, Size: 1]
	float DampingRate;//[Offset: 0x4c, Size: 1]
	float SteerAngle;//[Offset: 0x50, Size: 1]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	TireType* TireType;//[Offset: 0x58, Size: 1]
	TireConfig* TireConfig;//[Offset: 0x60, Size: 1]
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 1]
	float LatStiffValue;//[Offset: 0x6c, Size: 1]
	float LongStiffValue;//[Offset: 0x70, Size: 1]
	float SuspensionForceOffset;//[Offset: 0x74, Size: 1]
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 1]
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 1]
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 1]
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 1]
	byte SweepType;//[Offset: 0x88, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 1]
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 1]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 1]
	int WheelIndex;//[Offset: 0xa0, Size: 1]
	float DebugLongSlip;//[Offset: 0xa4, Size: 1]
	float DebugLatSlip;//[Offset: 0xa8, Size: 1]
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 1]
	float DebugWheelTorque;//[Offset: 0xb4, Size: 1]
	float DebugLongForce;//[Offset: 0xb8, Size: 1]
	float DebugLatForce;//[Offset: 0xbc, Size: 1]
	Vector Location;//[Offset: 0xc0, Size: 1]
	Vector OldLocation;//[Offset: 0xcc, Size: 1]
	Vector Velocity;//[Offset: 0xd8, Size: 1]
	bool IsInAir();// 0x1f41450
	float GetSuspensionOffset();// 0x1f41390
	float GetSteerAngle();// 0x1f41360
	float GetRotationAngle();// 0x1f41330

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 1]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 1]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 1]
	float FrictionScale;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 1]
	float ThrottleInput;//[Offset: 0x4, Size: 1]
	float BrakeInput;//[Offset: 0x8, Size: 1]
	float HandbrakeInput;//[Offset: 0xc, Size: 1]
	int CurrentGear;//[Offset: 0x10, Size: 1]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 1]
	float FallRate;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool ParachuteDeployed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool ParachuteDetached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	float SpeedToConsiderParachuteDeployment;//[Offset: 0x40c, Size: 1]
	float DistanceToDeployParachute;//[Offset: 0x410, Size: 1]
	float DistanceToDetachParachute;//[Offset: 0x414, Size: 1]
	float DistanceToAllowManualDetachment;//[Offset: 0x418, Size: 1]
	float TimeUntilParachuteDeployed;//[Offset: 0x41c, Size: 1]
	float ParachuteDownwardSpeed;//[Offset: 0x420, Size: 1]
	bool ManualDetachmentAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	float ReorientedPitch;//[Offset: 0x428, Size: 1]
	float TimeToReorientPitch;//[Offset: 0x42c, Size: 1]
	float FallingTurnSpeed;//[Offset: 0x430, Size: 1]
	float SlowFallingSpeed;//[Offset: 0x434, Size: 1]
	float DefaultFallingSpeed;//[Offset: 0x438, Size: 1]
	float FastFallingSpeed;//[Offset: 0x43c, Size: 1]
	float TimeToReachDesiredFallSpeed;//[Offset: 0x440, Size: 1]
	float AirSpeedInput;//[Offset: 0x444, Size: 1]
	float MaxAngleToPreventRoll;//[Offset: 0x448, Size: 1]
	void StopParachute();// 0x27aa0c0
	void StartParachute();// 0x27aa0a0
	void OnRep_ParachuteDeployed();// 0x27a98b0
	void OnRep_ManualDetachmentAllowed();// 0x27a9890
	void AttemptManualDetachment();// 0x27a90a0

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x290, Size: 1]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x330, Size: 1]
	float AckermannAccuracy;//[Offset: 0x34c, Size: 1]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x350, Size: 1]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x380, Size: 1]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 1]
	float MaxRPM;//[Offset: 0x88, Size: 1]
	float MOI;//[Offset: 0x8c, Size: 1]
	float DampingRateFullThrottle;//[Offset: 0x90, Size: 1]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x94, Size: 1]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x98, Size: 1]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 1]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 1]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 1]
	float CentreBias;//[Offset: 0x10, Size: 1]
	float FrontBias;//[Offset: 0x14, Size: 1]
	float RearBias;//[Offset: 0x18, Size: 1]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 1]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 1]
	float FinalRatio;//[Offset: 0xc, Size: 1]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 1]
	float ReverseGearRatio;//[Offset: 0x20, Size: 1]
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 1]
	float ClutchStrength;//[Offset: 0x28, Size: 1]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 1]
	float DownRatio;//[Offset: 0x4, Size: 1]
	float UpRatio;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSVehicleSeatComponent.SceneComponent.ActorComponent.Object
	float SeatPriority;//[Offset: 0x208, Size: 1]
	ReplicatedViewInfo MainCameraViewInfo;//[Offset: 0x20c, Size: 1]
	ReplicatedViewInfo AimCameraViewInfo;//[Offset: 0x214, Size: 1]
	FName AttachSocket;//[Offset: 0x234, Size: 1]
	AnimMontage* GetInSequence;//[Offset: 0x240, Size: 1]
	AnimMontage* GetOutSequence;//[Offset: 0x248, Size: 1]
	AnimSequence* IdleSequence;//[Offset: 0x250, Size: 1]
	AnimSequence* LeanOutSequence;//[Offset: 0x258, Size: 1]
	SpringArmComponent* GetSeatSpringArm();// 0x27a9800

--------------------------------
Class: KSRiderSeatPair
	KSCharacter* Rider;//[Offset: 0x0, Size: 1]
	KSVehicleSeatComponent* Seat;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSVehicleDestructionStage
	ParticleSystem* StageVFX;//[Offset: 0x0, Size: 1]
	AkAudioEvent* StageSFX;//[Offset: 0x8, Size: 1]
	AkAudioEvent* StageEcho;//[Offset: 0x10, Size: 1]
	Transform StageEffectTransform;//[Offset: 0x20, Size: 1]
	float StageDeteriorationRate;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSApparelAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int Priority;//[Offset: 0x280, Size: 1]
	GameplayTag ApparelSlot;//[Offset: 0x284, Size: 1]
	GameplayTagContainer SlotsToOverride;//[Offset: 0x290, Size: 1]
	int AsyncLoadPriority;//[Offset: 0x2d8, Size: 1]
	int LocalPlayerAsyncLoadPriority;//[Offset: 0x2dc, Size: 1]
	GameplayTag GetSlot();// 0x262bc00

--------------------------------
Class: AppliedApparelKey
	int ID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkinObjectManagerComponent.ActorComponent.Object
	<FName,MultiSkinObject*> SkinObjects;//[Offset: 0xb0, Size: 1]
	<MultiSkinObject*> SkinObjectsSet;//[Offset: 0x100, Size: 1]

--------------------------------
Class: KSActiveEmotePropInfo
	Guid EmotePropGuid;//[Offset: 0x0, Size: 1]
	MeshComponent* SpawnedEmotePropMeshComponent;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSArmorComponent.ActorComponent.Object
	bool bAllowArmorStacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float AbsoluteMaximumDurability;//[Offset: 0xb4, Size: 1]
	class DamageType[] IgnoredDamageTypes;//[Offset: 0xb8, Size: 1]
	enum[] IgnoredDamageCategories;//[Offset: 0xc8, Size: 1]
	float Durability;//[Offset: 0xd8, Size: 1]
	float MaxDurability;//[Offset: 0xdc, Size: 1]
	KSEquippedArmor[] EquippedArmorList;//[Offset: 0xe0, Size: 1]
	void RepairArmor(float DurabilityToRepair);// 0x262c5e0
	bool RemoveArmor(const KSArmorAsset* Armor, bool bDropArmor);// 0x262c520
	void OnRep_DurabiltyUpdate();// 0x262bcc0
	bool IsArmorStackingAllowed();// 0x262bc70
	bool IsAnyRepairableArmorEquipped();// 0x262bc40
	float GetCurrentMaxDurability();// 0x262bba0
	float GetCurrentDurability();// 0x262bb80
	float GetAbsoluteMaximumDurability();// 0x2606ac0
	bool EquipArmor(const KSArmorAsset* Armor, out GiveItemParameters GiveParameters);// 0x262b910
	bool CanRepairArmor();// 0x262b8e0

--------------------------------
Class: KSArmorAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	float Durability;//[Offset: 0x280, Size: 1]
	float StartingDurability;//[Offset: 0x284, Size: 1]
	bool bArmorIsRepairable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bArmorIsAlwaysStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bDestroyArmorOnBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool ShouldDestroyArmorOnBreak();// 0xe77a30
	bool IsArmorRepairable();// 0xe77a70
	bool IsArmorAlwaysStackable();// 0xe77a50
	float GetStartingDurability();// 0x262bc20
	float GetMaxDurability();// 0x262bbe0

--------------------------------
Class: KSEquippedArmor
	KSArmorAsset* ArmorAsset;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSNudgeComponent.ActorComponent.Object
	class Actor[] NudgeClassFilters;//[Offset: 0xb0, Size: 1]
	float NudgeSpeed;//[Offset: 0xc0, Size: 1]
	float MaxNudgeDistance;//[Offset: 0xc4, Size: 1]
	Actor*[] CachedNudgingActors;//[Offset: 0xc8, Size: 1]
	void GetNudgingActors(out Actor*[] NudgingActors);// 0x2712160
	Vector GetNudgeVectorWithActors(out const Actor*[] NudgingActors);// 0x2712090
	Vector GetNudgeVector();// 0x2712050

--------------------------------
Class: KSWeaponPropManagerComponent.ActorComponent.Object
	ActiveWeaponProp[] ActiveNamelessProps;//[Offset: 0x188, Size: 1]
	<PropIdentifier,ActiveWeaponProp> ActiveProps;//[Offset: 0x198, Size: 1]
	<PropIdentifier,LegacyWeaponProp> LegacyProps;//[Offset: 0x1e8, Size: 1]
	bool bAllowAnimNotifyStatesToCreatePropSpawners;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]

--------------------------------
Class: ActiveWeaponProp
	SkinnableSkeletalMeshComponent* MeshComp;//[Offset: 0x88, Size: 1]

--------------------------------
Class: PropIdentifier
	FName PropIdentifierName;//[Offset: 0x0, Size: 1]
	SkeletalMeshComponent* SkelMeshComp;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LegacyWeaponProp
	LobbySkeletalPropInfo LegacyInfo;//[Offset: 0x10, Size: 1]
	SkinnableSkeletalMeshComponent* MeshComp;//[Offset: 0x98, Size: 1]

--------------------------------
Class: SkelPropManagerComponent.ActorComponent.Object
	ActiveSkelProp[] ActiveNamelessProps;//[Offset: 0x188, Size: 1]
	<PropIdentifier,ActiveSkelProp> ActiveProps;//[Offset: 0x198, Size: 1]
	bool bAllowSpawnerPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	float SpawnerPoolingLifespan;//[Offset: 0x1ec, Size: 1]

--------------------------------
Class: ActiveSkelProp
	SkinnableSkeletalMeshComponent* MeshComp;//[Offset: 0x80, Size: 1]

--------------------------------
Class: StaticPropManagerComponent.ActorComponent.Object
	ActiveStaticProp[] ActiveNamelessProps;//[Offset: 0x188, Size: 1]
	<PropIdentifier,ActiveStaticProp> ActiveProps;//[Offset: 0x198, Size: 1]
	bool bAllowSpawnerPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	float SpawnerPoolingLifespan;//[Offset: 0x1ec, Size: 1]

--------------------------------
Class: ActiveStaticProp
	SkinnableStaticMeshComponent* MeshComp;//[Offset: 0x80, Size: 1]

--------------------------------
Class: KSWeaponAsset_Grenade.KSWeaponAsset_WithProjectile.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool bAllowCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa48, Size: 1]
	float MinimumCookTime;//[Offset: 0xa4c, Size: 1]
	float FuseTime;//[Offset: 0xa50, Size: 1]
	float MinHandRemainingFuse;//[Offset: 0xa54, Size: 1]
	bool bFuseTicksInHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa58, Size: 1]
	class KSProjectile_Grenade* GrenadeClass;//[Offset: 0xa60, Size: 1]
	float GetMinimumCookTime();// 0x27c68d0
	float GetMinHandRemainingFuse();// 0x27c6c30
	float GetFuseTime();// 0x27c6890
	bool GetFuseTicksInHand();// 0x27c6870
	bool AllowCooking();// 0x27c6370

--------------------------------
Class: KSProjectile_Grenade.KSProjectile.KSLagCompensatedActor.Actor.Object
	bool bBlocksTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	class UserWidget* OverlayWarningDisplayWidget;//[Offset: 0x968, Size: 1]
	MulticastInlineDelegateProperty OnGrenadeProximity;//[Size: 1]
	enum MarkerTeamVisibility;//[Offset: 0x9a0, Size: 1]
	bool bTakeOverOnStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a1, Size: 1]
	float RepFuseTimeRemaining;//[Offset: 0x9a4, Size: 1]
	float CurrentFuseTime;//[Offset: 0x9ac, Size: 1]
	TimerHandle FuseTimerHandle;//[Offset: 0x9b0, Size: 1]
	TimerHandle FuseCookPauseTimerHandle;//[Offset: 0x9b8, Size: 1]
	float ProximityWarningDelay;//[Offset: 0x9c0, Size: 1]
	bool bSetFuseOnBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 1]
	float BounceFuseTime;//[Offset: 0x9d4, Size: 1]
	bool bSetFuseOnStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 1]
	float StoppedFuseTime;//[Offset: 0x9dc, Size: 1]
	bool bExplodesOnStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 1]
	SphereComponent* DetectionSphere;//[Offset: 0x9e8, Size: 1]
	bool bGeneratesTouchSenseEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x9f8, Size: 1]
	void UnregisterTouchEvent(KSCharacter* KSCharacter);// 0x276fa10
	bool ShouldSetFuseOnStopped(out const HitResult HitResult);// 0x276f920
	bool ShouldExplodeOnStopped(out const HitResult HitResult);// 0x276f850
	bool ShouldExplodeOnBounce(out const HitResult HitResult, out const Vector ImpactVelocity);// 0x2cbecb0
	bool ShouldBlockTargeting();// 0x276f830
	void SetOverlayWarningDisplayWidget(class UserWidget InWidget, const bool bForce);// 0x276f690
	void SetFuseTime(float InFuseTime);// 0x276f610
	void RegisterTouchEvent(KSCharacter* KSCharacter);// 0x276f510
	void OnRep_FuseTimeRemaining();// 0x276f370
	bool IsInProximityOfLocalCharacter();// 0x276ec50
	bool IsFuseActive();// 0x276ec20
	enum GetMarkerTeamVisibility();// 0x276e860
	float GetCurrentFuseTime();// 0x276e780
	void FuseTimeExpired();// 0x1f12bc0
	bool CanSeeProximityWarning(Controller* QueriedPlayer);// 0x276e4c0
	void CallOnLocalViewTargetChanged(KSPlayerController* InController, Actor* OldViewTarget, Actor* NewViewTarget);// 0x276e3c0

--------------------------------
Class: ShotgunHitData
	KSWeaponAsset_Shotgun* ShotgunAsset;//[Offset: 0x0, Size: 1]
	enum[] HitResults;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSDamageHistory
	Controller* DamageInstigator;//[Offset: 0x0, Size: 1]
	class DamageType* DamageType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSWeaponAnimInstance.KSAnimInstance.SkinnedAnimInstance.AnimInstance.Object
	bool m_bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float m_fIKAlpha;//[Offset: 0x34c, Size: 1]
	float m_fIKBlendInTime;//[Offset: 0x350, Size: 1]
	float m_fIKBlendOutTime;//[Offset: 0x354, Size: 1]
	Vector m_vADSOffset;//[Offset: 0x358, Size: 1]
	bool m_bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	float m_fMovingAlpha;//[Offset: 0x368, Size: 1]
	int m_nFireImpulseCounter;//[Offset: 0x36c, Size: 1]
	bool m_bFireImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	float m_fADSAlpha;//[Offset: 0x374, Size: 1]
	bool m_bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float m_fLeadingPitch;//[Offset: 0x37c, Size: 1]
	float m_fLeadingYaw;//[Offset: 0x380, Size: 1]
	float m_fLeadingPitchADS;//[Offset: 0x384, Size: 1]
	float m_fLeadingYawADS;//[Offset: 0x388, Size: 1]
	WeaponLeadingInfo LeadingPitch;//[Offset: 0x38c, Size: 1]
	WeaponLeadingInfo LeadingYaw;//[Offset: 0x39c, Size: 1]
	WeaponLeadingInfo LeadingPitchADS;//[Offset: 0x3ac, Size: 1]
	WeaponLeadingInfo LeadingYawADS;//[Offset: 0x3bc, Size: 1]
	int m_LandImpulseCounter;//[Offset: 0x3d8, Size: 1]
	int m_JumpImpulseCounter;//[Offset: 0x3dc, Size: 1]
	bool m_bFoldIronSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	int WeaponAnimIndex;//[Offset: 0x3e4, Size: 1]
	bool bPlayerCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	float TempPhoneFlip;//[Offset: 0x3ec, Size: 1]
	Rotator TargetBarrelRotation;//[Offset: 0x3f0, Size: 1]
	bool bEnableBarrelRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool bEnableRogueSelectPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool bEnableWalkInPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	bool bNeedsWalkInStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff, Size: 1]
	float WalkInStartTime;//[Offset: 0x400, Size: 1]
	void SetWeaponState(KSWeaponComponent* OwningWeaponComponent, enum OldState, enum NewState);// 0x2cbecb0
	void SetScopeScaleAlpha(float NewAlpha);// 0x2cbecb0
	void SetRevolverChamberRotatae(Rotator NewRevolverChamberRot);// 0x2cbecb0
	void SetReactiveAdditiveAlpha(float NewAlpha);// 0x2cbecb0
	void SetHideMagazine(const float HideMagazineAlpha);// 0x2cbecb0
	void PlayFireAnimationBP();// 0x2cbecb0
	void InitWeaponIsARevolver(bool bIsRevolver);// 0x2cbecb0
	void InitSetWeaponState(enum NewWeaponState);// 0x2cbecb0
	void InitSetUseWeaponAdditive(bool bUseAdditive);// 0x2cbecb0
	void InitSetUseReactiveAdditive(bool bUseReactiveAdditive);// 0x2cbecb0
	void InitSetScopeMeshScale(float NewAlpha, bool bIsMultiStageReload);// 0x2cbecb0
	void InitSetHideMagazine(float HideMagazineAlpha);// 0x2cbecb0
	void InitSetFoldingStock(bool bIsStockFolded, Rotator StockRotationTarget, Rotator StockAltRotationTarget);// 0x2cbecb0

--------------------------------
Class: WeaponLeadingInfo
	float fMaxWeaponLeading;//[Offset: 0x0, Size: 1]
	float fWeaponLeadingSmoothingFactor;//[Offset: 0x4, Size: 1]
	float fWeaponLeadingInterpSpeed;//[Offset: 0x8, Size: 1]
	float fWeaponLeadingRecoverInterpSpeed;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSTranslucencyModifier
	Object* TranslucencySource;//[Offset: 0x0, Size: 1]
	float OpacityValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSCallToActionCondition.DataAsset.Object

--------------------------------
Class: ImageIconInfo.IconInfo.Object
	SoftObjectPath IconImage;//[Offset: 0x28, Size: 1]
	Texture2D* LegacyIconTexture;//[Offset: 0x40, Size: 1]

--------------------------------
Class: IconInfo.Object

--------------------------------
Class: IconReference
	FName IconType;//[Offset: 0x0, Size: 1]
	Texture2D* Icon;//[Offset: 0x8, Size: 1]
	SoftObjectPath IconPath;//[Offset: 0x30, Size: 1]
	Texture2D* LegacySoftTexture;//[Offset: 0x48, Size: 1]

--------------------------------
Class: ItemDisplayStat
	FName Name;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]
	ItemDisplayStatParams StatProperties;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ItemDisplayStatParams.TableRowBase
	FText DisplayText;//[Offset: 0x8, Size: 1]
	float RangeMin;//[Offset: 0x20, Size: 1]
	float RangeMax;//[Offset: 0x24, Size: 1]
	bool ShowsBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool DecreasingStat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool WholeNumbersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: RestoreInfoInitParams
	enum BindType;//[Offset: 0x0, Size: 1]
	enum RestoreType;//[Offset: 0x1, Size: 1]
	bool bRestoreOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bRestoreExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bIncludeDefaultCosmetics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: KSMiniMapAssistant.Info.Actor.Object
	void GetRelativeMinimapHeightToLocalPlayer(Vector ActorLocation, out enum RelativeHeight);// 0x1efcd50

--------------------------------
Class: CombatEventList.SizedArraySerializer.ReplicatedLog
	CombatEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: CombatEventItem.ReplicatedLogItem
	CombatEventInfo CombatEvent;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RadialMenuItemEventList.SizedArraySerializer.ReplicatedLog
	RadialMenuItemEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: RadialMenuItemEventItem.ReplicatedLogItem
	RadialMenuItemEventInfo RadialMenuItemEvent;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RadialMenuItemEventInfo
	PlayerState* EventInstigator;//[Offset: 0x0, Size: 1]
	KSRadialMenuItem* RadialMenuItem;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AssistEventList.SizedArraySerializer.ReplicatedLog
	AssistEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AssistEventItem.ReplicatedLogItem
	AssistInfo AssistInfo;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AssistInfo
	KSPlayerState* Assistant;//[Offset: 0x0, Size: 1]
	float DamageContributed;//[Offset: 0x8, Size: 1]
	float ContributionPercent;//[Offset: 0xc, Size: 1]
	int PointsAwarded;//[Offset: 0x10, Size: 1]
	KSPlayerState* Victim;//[Offset: 0x14, Size: 1]
	KSPlayerState* DownInstigator;//[Offset: 0x1c, Size: 1]
	bool bLethal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: ReviveEventList.SizedArraySerializer.ReplicatedLog
	ReviveEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: ReviveEventItem.ReplicatedLogItem
	ReviveEvent ReviveEvent;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ReviveEvent
	KSPlayerState* Reviver;//[Offset: 0x0, Size: 1]
	KSPlayerState* Revivee;//[Offset: 0x8, Size: 1]
	int ExpBonus;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSCinematicSequenceManager.Actor.Object
	LevelSequenceActor* SequenceActor;//[Offset: 0x220, Size: 1]
	LevelSequence* Sequence;//[Offset: 0x228, Size: 1]
	KSCinematicCharacterManager*[] CinematicCharacterHandles;//[Offset: 0x230, Size: 1]
	class KSLobbyCharacter* CinematicCharacterClass;//[Offset: 0x240, Size: 1]
	bool VerifyAllCinematicCharactersLoaded();// 0x2685700
	void SetCinematicCharactersTimeDilation(float NewDilation);// 0x26853c0
	void SetCinematicCharactersFromWinningTeam();// 0x26853a0
	void SetCinematicCharactersFromTopMVP(int NumPlayersToShow);// 0x2685320
	void SetCinematicCharactersFromPlayerTeam();// 0x2685300
	bool PlaySequence(bool bRequireCharactersLoaded, LevelSequence* InLevelSequence);// 0x2684ff0
	LevelSequence* GetSequence();// 0x2684880
	KSSkinBundle* GetDebugPreviewSkinByIndex(int InIndex);// 0x2684660
	KSCharacter*[] GetCinematicCharacters();// 0x2684180
	KSCinematicCharacterManager*[] GetCinematicCharacterManagers();// 0x26840c0
	void FillCharacterManagersWithPreviewRogues(int NumToFill);// 0x2683f30

--------------------------------
Class: KSCinematicCharacterManager.KSJobSelectPreviewActor.Info.Actor.Object
	KSCinematicSequenceManager* CinematicSequenceManager;//[Offset: 0x428, Size: 1]
	enum CinematicCharacterType;//[Offset: 0x430, Size: 1]
	bool bRequireCharacterToBeVisibleToCountAsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool VerifyCinematicCharacterLoaded();// 0x2616770
	void OnNewCharacterTimeDilationSet(float NewDilation);// 0x2cbecb0
	void OnCharacterSpawned(KSCharacter* SpawnedCharacter);// 0x2cbecb0
	KSCharacter* GetCinematicCharacter();// 0x2684090

--------------------------------
Class: KSJobSelectPreviewActor.Info.Actor.Object
	KSPersistentPlayerData* OwningPersistantPlayerData;//[Offset: 0x220, Size: 1]
	class KSLobbyCharacter* LobbyCharacterClass;//[Offset: 0x228, Size: 1]
	KSLobbyCharacter* ChildLobbyCharacter;//[Offset: 0x230, Size: 1]
	float ModelViewerDelay;//[Offset: 0x238, Size: 1]
	enum JobSelectionState;//[Offset: 0x23c, Size: 1]
	FName[] SkinPreloadBundles;//[Offset: 0x268, Size: 1]
	int PositionIndex;//[Offset: 0x278, Size: 1]
	bool bOffsetCharacterByCapsuleHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	bool bKeepActiveJobVisibleWhileLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 1]
	SceneComponent* BaseComponent;//[Offset: 0x280, Size: 1]
	TimerHandle JobModelViewerTimer;//[Offset: 0x288, Size: 1]
	KSJobItem* ActiveJobItem;//[Offset: 0x290, Size: 1]
	KSSkinBundle* ActiveSkinBundle;//[Offset: 0x298, Size: 1]
	<KSItem*,KSItem*> ActiveFullSkinMap;//[Offset: 0x2a0, Size: 1]
	KSJobItem* QueuedJob;//[Offset: 0x2f0, Size: 1]
	enum CachedState;//[Offset: 0x318, Size: 1]
	bool bHideChildCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	MulticastInlineDelegateProperty OnJobPreviewStateChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPersistentPlayerDataSetDel;//[Size: 1]
	KSJobItem* JobFromLoadout;//[Offset: 0x370, Size: 1]
	<KSItem*,KSItem*> PendingFullSkinMap;//[Offset: 0x378, Size: 1]
	<KSItem*,PreviewActorPropSkinInfo> PropsAndSkins;//[Offset: 0x3c8, Size: 1]
	bool bHasTriggeredVO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	void SetPersistantPlayerData(KSPersistentPlayerData* PersistantPlayerData);// 0x26df460
	void SetModelViewerDelay(float Timer);// 0x26df3e0
	void SetJobToQueuedId();// 0x26df3c0
	void SetJobAndSkin(out const KSJobItem* InJobItem, out const KSSkinBundle* InSkinItem);// 0x26df280
	void SetJob(out const KSJobItem* InJobItem);// 0x26df1c0
	void SetHoveredJob(int JobId, int SkinId, enum InJobSelectionState);// 0x26defa0
	void SetCharacterHidden(bool bShouldHide);// 0x26def10
	void PreLobbyCharacterDestroy();// 0x2cbecb0
	void PostLobbyCharacterSpawned();// 0x2cbecb0
	bool IsLockedIn();// 0x26de9f0
	bool HasQueuedJob();// 0x26de930
	KSSkinBundle* GetSkinBundle();// 0x26de900
	enum GetPreviewLoadState();// 0x26de8d0
	int GetPositionIndex();// 0x26de8b0
	KSPersistentPlayerData* GetPersistantPlayerData();// 0x26de7a0
	class KSLobbyCharacter GetLobbyCharacterClassToUse(KSJobItem* JobToUse, KSSkinBundle* SkinToUse);// 0x26de6d0
	KSLobbyCharacter* GetLobbyCharacter();// 0x26de6b0
	KSJobItem* GetJobItem();// 0x26de5a0
	bool GetCharacterShouldBeHidden();// 0x26de480
	FText GetCharacterName();// 0x26de3e0
	FString GetCharacterFriendlySearchName();// 0x26de360
	void CheatSetJobAndSkin(out const KSJobItem* InJobItem, out const KSSkinBundle* InSkinItem);// 0x26ddaa0
	void CheatClearJob();// 0x26dda80
	void CallShowLobbyCharacterFromEnablingCinematic(FString CinematicSubLevelName);// 0x26dd9e0
	void CallHideLobbyCharacterFromDisablingCinematic(FString CinematicSubLevelName);// 0x26dd940
	void BlueprintStateChanged(enum PreviousState);// 0x2cbecb0

--------------------------------
Class: PreviewActorPropSkinInfo
	KSItem* Prop;//[Offset: 0x0, Size: 1]
	bool bIsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	KSItem* LastSetSkin;//[Offset: 0x10, Size: 1]
	KSItem* ActiveSkin;//[Offset: 0x18, Size: 1]
	KSItem* PendingSkin;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSLootSiteBase.Actor.Object
	MulticastInlineDelegateProperty OnLootSiteSpawned;//[Size: 1]
	MulticastInlineDelegateProperty OnLootSiteStateChanged;//[Size: 1]
	enum RarityTag;//[Offset: 0x250, Size: 1]
	MulticastInlineDelegateProperty OnLootSiteRarityChanged;//[Size: 1]
	byte SiteGroupNumber;//[Offset: 0x268, Size: 1]
	<enum,DataTable*> RarityLootSiteTableMap;//[Offset: 0x270, Size: 1]
	KSItemDrop* SpawnedDrop;//[Offset: 0x2d0, Size: 1]
	Object*[] ObjectsToKeepAround;//[Offset: 0x2d8, Size: 1]
	float SpawnRate;//[Offset: 0x2e8, Size: 1]
	float SpawnDelay;//[Offset: 0x2ec, Size: 1]
	float RespawnDelay;//[Offset: 0x2f0, Size: 1]
	bool bAutoRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool bDestroySiteOnLooted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	bool bDisableWeaponCosmeticZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 1]
	KSLootSiteBase*[] ChildSpawners;//[Offset: 0x2f8, Size: 1]
	float SurfaceCheckHeight;//[Offset: 0x308, Size: 1]
	bool bUsePrecisePlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	LootSiteState LootSiteState;//[Offset: 0x30d, Size: 1]
	bool CosmeticVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f, Size: 1]
	TimerHandle SpawnDelayTimer;//[Offset: 0x310, Size: 1]
	Vector NavigationLocation;//[Offset: 0x318, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x330, Size: 1]
	Actor*[] ActorsSeenBy;//[Offset: 0x338, Size: 1]
	static void WeightedSiteShuffle(out KSLootSiteBase*[] SiteArray);// 0x26f91c0
	void SpawnSpecificLoot(out const LootSiteDropInfo Loot);// 0x26f9080
	void SpawnSpecificItemDrop(KSItem* ItemAsset);// 0x26f9000
	void SpawnItemDropInternal();// 0x26f8fe0
	void SpawnItemDrop(bool UseDelay);// 0x26f8f50
	void SpawnedDropDestroyed(Actor* DestroyedActor);// 0x26f9140
	bool SetSiteActive(bool Active);// 0x26f8e80
	void SetRarity(enum NewRarity);// 0x26f8e00
	void Reset();// 0x26f8d20
	void OnRep_RarityTag();// 0x26f8d00
	void OnRep_LootSiteState();// 0x26f8ce0
	void OnRep_CosmeticVisible();// 0x26f8cc0
	void OnCosmeticVisibilityChanged(bool Visible);// 0x2cbecb0
	bool IsLooted();// 0x26f8980
	bool IsActive();// 0x26f8920
	LootSiteState GetLootSiteState();// 0x26f8270
	Vector FindBestDropLocation(KSItemDrop* InDrop);// 0x26f8040
	LootSiteDropInfo ChoostLoot();// 0x26f7f50
	static LootSiteDropInfo ChooseRandomLoot(out const LootSiteDropInfo[] InLoot, const Object* WorldContextObject);// 0x26f7e40
	KSItem* ChooseItemAsset();// 0x2cbecb0

--------------------------------
Class: LootSiteState
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bLooted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: LootSiteDropInfo
	KSItem* Item;//[Offset: 0x0, Size: 1]
	KSWeaponAttachment* Attachment1;//[Offset: 0x8, Size: 1]
	KSWeaponAttachment* Attachment2;//[Offset: 0x10, Size: 1]
	KSWeaponAttachment* Attachment3;//[Offset: 0x18, Size: 1]
	float Weight;//[Offset: 0x20, Size: 1]
	int Price;//[Offset: 0x24, Size: 1]
	float ChanceToSkipAttachment;//[Offset: 0x28, Size: 1]
	bool bRandomizeAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: KSFlightPoint.TargetPoint.Actor.Object
	SplineComponent* SplineComponent;//[Offset: 0x220, Size: 1]
	byte SplinePointType;//[Offset: 0x228, Size: 1]
	bool bIsEndPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: KSDestructibleBase.Actor.Object
	bool bRenderTrueCollisionUntilDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	SceneComponent* SceneRoot;//[Offset: 0x230, Size: 1]
	DestructibleComponent* VisualMesh;//[Offset: 0x238, Size: 1]
	StaticMeshComponent* TrueCollision;//[Offset: 0x240, Size: 1]
	BoxComponent* SpeedOverlap;//[Offset: 0x248, Size: 1]
	bool bAllowDestructibleMeshSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bAllowPlayerToWalkOnSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	bool bAllowDestructionAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 1]
	AkAudioEvent* DefaultDestructionEvent;//[Offset: 0x258, Size: 1]
	bool bSpawnBreakParticleAtActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	ParticleSystem* BreakParticles;//[Offset: 0x268, Size: 1]
	ParticleSystem* ImpactParticles;//[Offset: 0x270, Size: 1]
	ParticleSystem* FakeHitDecalParticle;//[Offset: 0x278, Size: 1]
	class CameraShake* CharacterSpeedOverlapCameraShake;//[Offset: 0x280, Size: 1]
	MulticastInlineDelegateProperty OnDestructibleDestroyed;//[Size: 1]
	float MaxHealth;//[Offset: 0x298, Size: 1]
	float Health;//[Offset: 0x29c, Size: 1]
	float LocalHealth;//[Offset: 0x2a0, Size: 1]
	bool bResetOnRoundChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bAllowsWeaponPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool bCanBreakWithSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool bAllProjectilesInstantBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	float SpeedBreakThreshold;//[Offset: 0x2a8, Size: 1]
	bool bTransparentDestructible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	<enum,float> DamageTypeMultipliers;//[Offset: 0x2b0, Size: 1]
	float BreakingDamage;//[Offset: 0x300, Size: 1]
	float BreakingImpulse;//[Offset: 0x304, Size: 1]
	bool bUseRadialDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	float BreakingRadius;//[Offset: 0x30c, Size: 1]
	float ImpactImpulseOffset;//[Offset: 0x310, Size: 1]
	bool bIgnoreCharacterVerticalSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	float BadDestroyCheckTime;//[Offset: 0x318, Size: 1]
	float EventlessDestroyWaitTime;//[Offset: 0x31c, Size: 1]
	bool MeshDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x328, Size: 1]
	DestructibleMesh* MeshAsset;//[Offset: 0x330, Size: 1]
	Vector LastHitLocation;//[Offset: 0x338, Size: 1]
	Vector LastHitDirection;//[Offset: 0x344, Size: 1]
	Vector LastHitNormal;//[Offset: 0x350, Size: 1]
	ParticleSystemComponent*[] FakeHitDecals;//[Offset: 0x360, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x380, Size: 1]
	void UndoBadDestroy();// 0x2689df0
	void SpeedGateOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2689c00
	bool ShouldProjectilesInstantBreak();// 0x2689bb0
	void SetupPreBroken();// 0x2689af0
	void ResetDestructible();// 0x2689980
	int PostDestructionEvent(AkAudioEvent* InEvent);// 0x2689120
	void OnRoundChange(out const RoundInitState RoundInitState);// 0x2689080
	void OnRep_Health();// 0x2689060
	void OnDestructionChange(bool Destroyed, bool bInitialSetup);// 0x2688f90
	void OnDamageEvent(float NewHealth, Vector HitLocation, Vector HitDirection, Vector HitNormal, bool FromServer);// 0x2688de0
	float GetMaxHealth();// 0x2688bf0
	float GetCurrentHealth();// 0x2688860
	void BlueprintPrepareKillCamPlayback();// 0x2cbecb0

--------------------------------
Class: DestructibleComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bFractureEffectOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x670, Size: 1]
	FractureEffect[] FractureEffects;//[Offset: 0x678, Size: 1]
	bool bEnableHardSleeping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	float LargeChunkThreshold;//[Offset: 0x68c, Size: 1]
	MulticastInlineDelegateProperty OnComponentFracture;//[Size: 1]
	void SetDestructibleMesh(DestructibleMesh* NewMesh);// 0xc4f740
	DestructibleMesh* GetDestructibleMesh();// 0xc4f710
	void ApplyRadiusDamage(float BaseDamage, out const Vector HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);// 0xc4f560
	void ApplyDamage(float DamageAmount, out const Vector HitLocation, out const Vector ImpulseDir, float ImpulseStrength);// 0xc4f3f0

--------------------------------
Class: DestructibleMesh.SkeletalMesh.StreamableRenderAsset.Object
	DestructibleParameters DefaultDestructibleParameters;//[Offset: 0x388, Size: 1]
	FractureEffect[] FractureEffects;//[Offset: 0x410, Size: 1]

--------------------------------
Class: DestructibleParameters
	DestructibleDamageParameters DamageParameters;//[Offset: 0x0, Size: 1]
	DestructibleDebrisParameters DebrisParameters;//[Offset: 0x1c, Size: 1]
	DestructibleAdvancedParameters AdvancedParameters;//[Offset: 0x48, Size: 1]
	DestructibleSpecialHierarchyDepths SpecialHierarchyDepths;//[Offset: 0x58, Size: 1]
	DestructibleDepthParameters[] DepthParameters;//[Offset: 0x70, Size: 1]
	DestructibleParametersFlag Flags;//[Offset: 0x80, Size: 1]

--------------------------------
Class: DestructibleDamageParameters
	float DamageThreshold;//[Offset: 0x0, Size: 1]
	float DamageSpread;//[Offset: 0x4, Size: 1]
	bool bEnableImpactDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float ImpactDamage;//[Offset: 0xc, Size: 1]
	int DefaultImpactDamageDepth;//[Offset: 0x10, Size: 1]
	bool bCustomImpactResistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ImpactResistance;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DestructibleDebrisParameters
	float DebrisLifetimeMin;//[Offset: 0x0, Size: 1]
	float DebrisLifetimeMax;//[Offset: 0x4, Size: 1]
	float DebrisMaxSeparationMin;//[Offset: 0x8, Size: 1]
	float DebrisMaxSeparationMax;//[Offset: 0xc, Size: 1]
	Box ValidBounds;//[Offset: 0x10, Size: 1]

--------------------------------
Class: DestructibleAdvancedParameters
	float DamageCap;//[Offset: 0x0, Size: 1]
	float ImpactVelocityThreshold;//[Offset: 0x4, Size: 1]
	float MaxChunkSpeed;//[Offset: 0x8, Size: 1]
	float FractureImpulseScale;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DestructibleSpecialHierarchyDepths
	int SupportDepth;//[Offset: 0x0, Size: 1]
	int MinimumFractureDepth;//[Offset: 0x4, Size: 1]
	bool bEnableDebris;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DebrisDepth;//[Offset: 0xc, Size: 1]
	int EssentialDepth;//[Offset: 0x10, Size: 1]

--------------------------------
Class: DestructibleDepthParameters
	byte ImpactDamageOverride;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DestructibleParametersFlag
	bool bAccumulateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAssetDefinedSupport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bWorldSupport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bDebrisTimeout;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bDebrisMaxSeparation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bCrumbleSmallestChunks;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bAccurateRaycasts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bUseValidBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bFormExtendedStructures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]

--------------------------------
Class: FractureEffect
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 1]
	SoundBase* Sound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSGameShop.Info.Actor.Object
	MulticastInlineDelegateProperty OnLoadoutChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAvailable;//[Size: 1]
	MulticastInlineDelegateProperty OnUnavailable;//[Size: 1]
	bool bAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	MulticastInlineDelegateProperty OnEnabled;//[Size: 1]
	MulticastInlineDelegateProperty OnDisabled;//[Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	MulticastInlineDelegateProperty OnOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnClosed;//[Size: 1]
	bool bAllowUnmasteredWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	bool bLockUndoTransactionHistoryOnRoundReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	bool bResetOnRoundReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 1]
	bool bResetOnTeamSidesFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 1]
	MulticastInlineDelegateProperty OnShopItemAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemRemoved;//[Size: 1]
	<FName,KSGameShopItemComponent*> ShopItemComponentMap;//[Offset: 0x2d8, Size: 1]
	int MinimumUndoableTransactionId;//[Offset: 0x338, Size: 1]
	KSGameShopMod*[] Mods;//[Offset: 0x340, Size: 1]
	void Undo();// 0x26abbf0
	void ToggleShop();// 0x26abbd0
	void SetEnabled(bool bInEnabled);// 0x26ab6d0
	void SetAvailable(bool bInAvailable);// 0x26ab480
	void ServerTryToOpen();// 0x26ab430
	void ServerTryToClose();// 0x26ab3e0
	void ResetItems(KSGameShopItemComponent*[] GameShopItemComponents);// 0x26ab300
	void ResetAllItems();// 0x26ab2e0
	void RemoveMod(KSGameShopMod* Mod);// 0x26ab260
	void Open();// 0x26aad70
	void OnTeamSidesFlipped();// 0x26aad30
	void OnShopItemRefunded(KSGameShopItemComponent* ShopItemComponent);// 0x26aabb0
	void OnShopItemPurchased(KSGameShopItemComponent* ShopItemComponent);// 0x26aab30
	void OnShopItemComponentRemoved(KSGameShopItemComponent* ShopItemComponent);// 0x26aaaa0
	void OnShopItemComponentAdded(KSGameShopItemComponent* ShopItemComponent);// 0x26aaa10
	void OnRep_Open();// 0x26aa9f0
	void OnRep_bEnabled();// 0x1ef3f90
	void OnRep_bAvailable();// 0xcf5e70
	void OnModeInitiatedReset();// 0x2cbecb0
	void OnGamePhaseChangedWrapper(MatchPhase PreviousPhase, MatchPhase NewPhase);// 0x26aa7f0
	void OnGamePhaseChanged(out const MatchPhase PreviousPhase, out const MatchPhase NewPhase);// 0x26aa6f0
	void LockUndoTransactionHistory();// 0x26aa510
	bool IsOpen();// 0xe77a30
	bool IsLockedForUndo(KSGameShopItemComponent* ShopItemComponent);// 0x26aa420
	bool IsEnabled();// 0xe77a70
	bool IsAvailable();// 0x26aa400
	KSGameShopItemComponent* GetShopItemComponent(FName Name);// 0x26aa2c0
	KSGameShopMod*[] GetMods();// 0x26aa180
	void GetComponentsToResetOnTeamSidesFlipped(out KSGameShopItemComponent*[] OutGameShopItemComponents);// 0x26aa0d0
	void GetComponentsToResetOnRoundReset(out KSGameShopItemComponent*[] OutGameShopItemComponents);// 0x26aa020
	KSItem*[] GetAppliedItems();// 0x26a9fa0
	bool GetAllowUnmasteredWeapons();// 0x26a9f80
	void ForceRemoveFromPurchaseHistory(KSGameShopItemComponent* ShopItemComponent, bool IgnoreTransactionLock);// 0x26a9eb0
	void FirstRoundInitialization();// 0x2cbecb0
	void DestroyShopItemComponent(KSGameShopItemComponent* ShopItemComponent);// 0x26a97f0
	KSGameShopItemComponent* CreateShopItemComponent(class KSGameShopItemComponent ShopItemComponentClass);// 0x26a9760
	void Close();// 0x26a9740
	void ClientOpen();// 0x1ef4dd0
	void ClientClose();// 0x268d7b0
	bool CanOpen();// 0x26a9440
	bool CanClose();// 0x26a9410
	void ApplyItems();// 0x26a93b0
	KSGameShopMod* AddMod(class KSGameShopMod ModClass);// 0x26a9320

--------------------------------
Class: KSGameShopItemComponent.KSGameShopComponent.ActorComponent.Object
	KSGameShop* GameShopOwner;//[Offset: 0xb0, Size: 1]
	bool bRegisteredToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName Name;//[Offset: 0xbc, Size: 1]
	FName Category;//[Offset: 0xc4, Size: 1]
	int ID;//[Offset: 0xcc, Size: 1]
	KSGameShopItem InitialGameShopItem;//[Offset: 0xd0, Size: 1]
	int StartingIndex;//[Offset: 0xe0, Size: 1]
	MulticastInlineDelegateProperty OnGameShopItemChanged;//[Size: 1]
	KSGameShopItem GameShopItem;//[Offset: 0xf8, Size: 1]
	KSItem* AppliedItem;//[Offset: 0x108, Size: 1]
	bool bExcludeFromTransactionHistory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	MulticastInlineDelegateProperty OnItemPurchased;//[Size: 1]
	MulticastInlineDelegateProperty OnItemRefunded;//[Size: 1]
	MulticastInlineDelegateProperty OnItemIndexChanged;//[Size: 1]
	int AuthoratativeIndex;//[Offset: 0x148, Size: 1]
	int AbsoluteIndex;//[Offset: 0x14c, Size: 1]
	MulticastInlineDelegateProperty OnItemEnabledStatusChanged;//[Size: 1]
	bool bItemEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	MulticastInlineDelegateProperty OnItemActiveStatusChanged;//[Size: 1]
	bool bItemActiveByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bAuthoratativeItemActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	MulticastInlineDelegateProperty OnToggleRelationshipChanged;//[Size: 1]
	bool bDefaultToggleRelationship;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool bIsInToggleRelationship;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	void TryToSetToggleRelationshipOn();// 0x26b00f0
	void TryToSetToggleRelationshipOff();// 0x26b00d0
	void TryToRefund();// 0x26b00b0
	bool TryToPurchase();// 0x26b0080
	void TryToDeactivateItem();// 0x26b0040
	bool TryToActivateItem();// 0x26b0010
	void SetItemEnabled(bool bEnabled);// 0x26aff80
	void SetGameShopItem(out const KSGameShopItem InGameShopItem);// 0x26afed0
	void SetCurrentIndex(int Index);// 0x26afe50
	void SetAbsoluteIndex(int Index);// 0x26afdd0
	void Server_Refund();// 0x26afbc0
	void Server_Purchase();// 0x26afb70
	void Server_DeactivateItem();// 0x26afb20
	void Server_ActivateItem();// 0x26afad0
	void RemoveAppliedItem();// 0x26afab0
	void PreApplyItem();// 0x26afa90
	void OnRep_GameShopOwner();// 0x26af8c0
	void OnRep_GameShopItem();// 0x26af8a0
	void OnRep_bItemEnabled();// 0x26af940
	void OnRep_bIsInToggleRelationship();// 0x26af920
	void OnRep_bAuthoratativeItemActive();// 0x26af900
	void OnRep_AuthoratativeIndex();// 0x26af860
	bool IsRegisteredToOwner();// 0x2606ae0
	bool IsPurchased();// 0x26af2e0
	bool IsLocked();// 0x26af2b0
	bool IsItemEnabled();// 0x26af290
	bool IsItemActive();// 0x26af230
	bool IsInToggleRelationship();// 0x26af260
	bool IsEquipped();// 0x26af230
	bool IsAffordable();// 0x26af200
	int GetRarityValue();// 0x26af1d0
	int GetNextPrice();// 0x26af070
	KSItem* GetNextItem();// 0x26af040
	int GetNextIndex();// 0x26af010
	int GetMaxIndex();// 0x26aefe0
	KSItem* GetItemToApply();// 0x26aefb0
	KSItem*[] GetItems();// 0x26aed90
	int GetItemPrice(KSItem* KSItem);// 0x26aee00
	KSGameShopItem GetGameShopItem();// 0x26aed90
	int GetFirstPrice();// 0x26aed60
	KSItem* GetFirstItem();// 0x26aed30
	int GetCurrentPrice();// 0x26aed00
	KSItem* GetCurrentItem();// 0x26aecd0
	int GetCurrentIndex();// 0x26aeca0
	KSItem* GetAppliedItem();// 0x26aebc0
	int GetAbsoluteIndex();// 0x26aeb90
	void Client_RefundAck(bool bSuccess, int AuthoratativeIndexRep);// 0x26aeac0
	void Client_PurchaseAck(bool bSuccess, int AuthoratativeIndexRep);// 0x26ae9f0
	void Client_DeactivateItemAck(bool bSuccess, bool bItemActiveAuthorityRep);// 0x26ae920
	void Client_ActivateItemAck(bool bSuccess, bool bItemActiveAuthorityRep);// 0x26ae850
	bool CanSetToggleRelationshipOn();// 0x26ae760
	bool CanSetToggleRelationshipOff();// 0x26ae730
	bool CanRefund();// 0x26ae700
	bool CanPurchase();// 0x26ae6d0
	bool CanDeactivateItem();// 0x26ae6a0
	bool CanActivateItem();// 0x26ae670
	void ApplyItem();// 0x26ae650

--------------------------------
Class: KSGameShopComponent.ActorComponent.Object
	bool OwnerHasAuthority();// 0x26afa60
	KSGameShop* GetGameShopOwner();// 0x26aedd0

--------------------------------
Class: KSGameShopItem
	KSItem*[] Items;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSGameShopMod.ActorComponent.Object
	bool GetItemPriceOverride(out int OutValue, const KSGameShopItemComponent* GameShopItemComponent, const KSItem* KSItem);// 0x26aee90

--------------------------------
Class: KSPlayerShopZone.Actor.Object
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	MulticastInlineDelegateProperty OnInShopZoneChanged;//[Size: 1]
	void ZoneLeftByPlayer(KSPlayerState* PlayerState);// 0x275ff10
	void ZoneEnteredByPlayer(KSPlayerState* PlayerState);// 0x275fe90
	void OnRep_Active();// 0x275e900
	void OnPlayerStateDestroyed(Actor* DestroyedPlayerState);// 0x275e880
	void OnDeactivated();// 0x2cbecb0
	void OnActivated();// 0x2cbecb0

--------------------------------
Class: KSRoyaleSafeZone.Actor.Object
	BoxComponent* ValidityZone;//[Offset: 0x220, Size: 1]
	KSWeaponAsset* ZoneDamageAsset;//[Offset: 0x228, Size: 1]
	float StartingRadius;//[Offset: 0x230, Size: 1]
	SafeZoneParams OldParams;//[Offset: 0x234, Size: 1]
	SafeZoneParams NewParams;//[Offset: 0x244, Size: 1]
	float ZoneLerpVelocity;//[Offset: 0x254, Size: 1]
	float ZoneLerpAlpha;//[Offset: 0x258, Size: 1]
	Vector CurrentCenter;//[Offset: 0x25c, Size: 1]
	float CurrentRadius;//[Offset: 0x268, Size: 1]
	bool ZoneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool IsShrinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	KSAkComponent* Sound;//[Offset: 0x278, Size: 1]
	AkAudioEvent* SoundStart;//[Offset: 0x280, Size: 1]
	AkAudioEvent* SoundStop;//[Offset: 0x288, Size: 1]
	bool TryToDamage(Actor* TargetActor, float AttemptedDamage);// 0x278aa30
	void StartShrink();// 0x278a950
	void SetNewZoneParams(float NewRadius, float TimeToChange, Actor* MustContainActor, float MustContainSafeRadius);// 0x2789840
	void PlayShrinkSound();// 0x1ef3000
	void OnZoneShrinkStart();// 0x2cbecb0
	void OnZoneShrinkEnd();// 0x2cbecb0
	void OnZoneActivated();// 0x2cbecb0
	void OnRep_ZoneActive();// 0x2789800
	void OnRep_Shrinking();// 0x27897e0
	void OnRep_NewParams();// 0x27897c0
	void OnCircleUpdate(float NewRadius, Vector NewLocation);// 0x2cbecb0
	bool IsZoneShrinking();// 0x2789390
	bool IsZoneActive();// 0x2789370
	bool IsActorInZone(Actor* Actor);// 0x27892b0
	void ForceEndShrink();// 0x2789150

--------------------------------
Class: SafeZoneParams
	Vector CenterPosition;//[Offset: 0x0, Size: 1]
	float Radius;//[Offset: 0xc, Size: 1]

--------------------------------
Class: InitialGameObjectiveInfo
	int ID;//[Offset: 0x0, Size: 1]
	Actor* ObjectiveAsActor;//[Offset: 0x8, Size: 1]
	KSObjectiveState ObjectiveState;//[Offset: 0x10, Size: 1]
	KSObjectiveState PreviousObjectiveState;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSTimerPriorityConfig
	enum RoundTimerPriority;//[Offset: 0x0, Size: 1]
	enum PhaseTimerPriority;//[Offset: 0x1, Size: 1]
	enum ObjectiveTimerPriority;//[Offset: 0x2, Size: 1]

--------------------------------
Class: KSLootRarityTimerPair
	enum Rarity;//[Offset: 0x0, Size: 1]
	KSTimerComponent* Timer;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AccoladeEventList.SizedArraySerializer.ReplicatedLog
	AccoladeEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AccoladeEventItem.ReplicatedLogItem
	AccoladeEventEntry AccoladeEventEntry;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AccoladeEventEntry
	KSPlayerState* RelevantPlayer;//[Offset: 0x0, Size: 1]
	AccoladeDisplayInfo AccoladeDisplayInfo;//[Offset: 0x8, Size: 1]
	bool IgnoreRelevantPlayerId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]

--------------------------------
Class: ReplicatedPreloader.FastArraySerializer
	RepPreloaderItem[] RepArray;//[Offset: 0x158, Size: 1]
	FName[] AlwaysIncludeBundles;//[Offset: 0x168, Size: 1]

--------------------------------
Class: RepPreloaderItem.FastArraySerializerItem
	PrimaryAssetId PrimaryAssetId;//[Offset: 0xc, Size: 1]
	FName BundleName;//[Offset: 0x1c, Size: 1]
	bool bEntryWasReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 1]
	FName PrimaryAssetName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSPersistentMinPlayerDataContainer.FastArraySerializer
	KSPersistentMinPlayerData[] ReplicatedPlayerData;//[Offset: 0x108, Size: 1]
	<KSPersistentPlayerId,KSPersistentPlayerData*> LocalPlayerData;//[Offset: 0x118, Size: 1]
	<KSPersistentPlayerData*> AllLocalPlayerData;//[Offset: 0x168, Size: 1]
	<int> KnownDeadEnginePlayerIds;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: KSPersistentMinPlayerData.FastArraySerializerItem
	KSPersistentPlayerId ID;//[Offset: 0x10, Size: 1]
	int TeamNum;//[Offset: 0x20, Size: 1]
	FString PlayerName;//[Offset: 0x28, Size: 1]
	bool bAbandoned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: KSPersistentDataReplicator.Info.Actor.Object
	AccountJobStatReplicator StatsReplicator;//[Offset: 0x220, Size: 1]
	int RequestJobMasteryExperience(out const KSPersistentPlayerId InPlayerId, KSJobItem* InJob);// 0x2723260
	int GetJobMastery(out const KSPersistentPlayerId InPlayerId, KSJobItem* InJob);// 0x27229d0

--------------------------------
Class: AccountJobStatReplicator.FastArraySerializer
	AccountJobStatReplicatorEntry[] RepItems;//[Offset: 0x118, Size: 1]
	<AccountJobStatKey,int> AccountJobStatsMap;//[Offset: 0x128, Size: 1]
	<InventoryId,AccountJobStatKey> InventoryIdToStatKeyMap;//[Offset: 0x1c8, Size: 1]

--------------------------------
Class: AccountJobStatReplicatorEntry.FastArraySerializerItem
	AccountJobStatKey Key;//[Offset: 0x10, Size: 1]
	int Value;//[Offset: 0x50, Size: 1]

--------------------------------
Class: AccountJobStatKey
	KSPersistentPlayerId PlayerId;//[Offset: 0x0, Size: 1]
	KSJobItem* Job;//[Offset: 0x10, Size: 1]
	enum AccountJobStatType;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSWayPointSetCollection.Object

--------------------------------
Class: KSSquadManagerBase.Info.Actor.Object
	float ConsiderationPeriod;//[Offset: 0x220, Size: 1]
	KSAIController*[] GetTeamBots(int TeamNum);// 0x27973b0
	KSCharacterBase*[] GetProximityListofEnemies(KSAIController* TargetBot);// 0x2796dd0
	KSCharacterBase*[] GetProximityListofAllies(KSAIController* TargetBot);// 0x2796cf0
	int[] GetAllTeamNums();// 0x2796130
	KSSquadManagerAction* DetermineCurrentAction();// 0x2684880
	void AddBot(KSAIController* NewBot);// 0x2764f70

--------------------------------
Class: KSSquadManagerAction.ActorComponent.Object
	float Stickiness;//[Offset: 0xb0, Size: 1]
	KSSquadManagerBase* SquadManager;//[Offset: 0xb8, Size: 1]
	bool TickAction(float DeltaSeconds);// 0x2797a20
	bool StopAction();// 0x2797960
	bool StartAction();// 0x2797930
	bool CheckActivationCondition();// 0x2795a00
	float CalculateConsiderationWeight();// 0x2795910

--------------------------------
Class: KSHUDComponent_Objective.KSHUDComponent.ActorComponent.Object
	Texture2D* TopBarObjectiveIcon;//[Offset: 0xb0, Size: 1]
	Texture2D* NameplateObjectiveIcon;//[Offset: 0xd8, Size: 1]
	Texture2D* ScoreIcon;//[Offset: 0x100, Size: 1]
	Texture2D* TicketIcon;//[Offset: 0x128, Size: 1]
	bool ShowNameplateObjectiveForEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool ForceAlwaysShowNameplateObjective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool ShowTopBarObjectiveMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	bool ShowBombIconInTopBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	bool ShowEnemyBombIconInTopBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool ConnectTopBarMarkerToTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	bool ShowInWorldMarkerTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool ObjectiveMarkerProgressFills;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	bool ScoreboardDisplayIntraScoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool UseIntraScoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool UseTicketSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	bool HideTeams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 1]
	enum PointsBarType;//[Offset: 0x15c, Size: 1]
	enum TicketDisplaySide;//[Offset: 0x15d, Size: 1]
	enum MarkerTimerType;//[Offset: 0x15e, Size: 1]
	static KSHUDComponent_Objective* GetActiveObjectiveHUDComponent(const Object* WorldContextObject);// 0x26c7760

--------------------------------
Class: KSHUDComponent.ActorComponent.Object

--------------------------------
Class: DisplayInfo
	<enum,class UserWidget> DisplayWidgetMap;//[Offset: 0x0, Size: 1]
	bool bUseWidgetPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	FString[] WidgetPoolName;//[Offset: 0x58, Size: 1]
	int UniqueId;//[Offset: 0x68, Size: 1]
	KSPlayerState* CreatingPlayer;//[Offset: 0x70, Size: 1]
	Actor* AssociatedActor;//[Offset: 0x78, Size: 1]
	Object* AssociatedObject;//[Offset: 0x80, Size: 1]
	Vector DefaultLocation;//[Offset: 0x88, Size: 1]
	float Lifespan;//[Offset: 0x94, Size: 1]
	TimerHandle TimerHandle;//[Offset: 0x98, Size: 1]

--------------------------------
Class: KSNavModifierVolume.NavModifierVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x230, Size: 1]
	void SetRadius(float NewRadius);// 0x4564670
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x45644f0

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x220, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	void ToggleEnabled();// 0x451e4b0
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x451dd40
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x451dc40
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x451db40
	void SetLightColor(LinearColor NewLightColor);// 0x451d970
	void SetEnabled(bool bSetEnabled);// 0x451d5d0
	void SetCastShadows(bool bNewValue);// 0x451d1d0
	void SetBrightness(float NewBrightness);// 0x451d030
	void SetAffectTranslucentLighting(bool bNewValue);// 0x451cd20
	void OnRep_bEnabled();// 0x1ef3000
	bool IsEnabled();// 0x451c620
	LinearColor GetLightColor();// 0x451c560
	float GetBrightness();// 0x451c500

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x238, Size: 1]
	float MaxDrawDistance;//[Offset: 0x23c, Size: 1]
	float MaxDistanceFadeRange;//[Offset: 0x240, Size: 1]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	int ShadowMapChannel;//[Offset: 0x248, Size: 1]
	float MinRoughness;//[Offset: 0x250, Size: 1]
	float SpecularScale;//[Offset: 0x254, Size: 1]
	float ShadowResolutionScale;//[Offset: 0x258, Size: 1]
	float ShadowBias;//[Offset: 0x25c, Size: 1]
	float ShadowSlopeBias;//[Offset: 0x260, Size: 1]
	float ShadowSharpen;//[Offset: 0x264, Size: 1]
	float ContactShadowLength;//[Offset: 0x268, Size: 1]
	bool ContactShadowLengthInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 1]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26c, Size: 1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x270, Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x278, Size: 1]
	Vector LightFunctionScale;//[Offset: 0x280, Size: 1]
	TextureLightProfile* IESTexture;//[Offset: 0x290, Size: 1]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 1]
	float IESBrightnessScale;//[Offset: 0x29c, Size: 1]
	float LightFunctionFadeDistance;//[Offset: 0x2a0, Size: 1]
	float DisabledBrightness;//[Offset: 0x2a4, Size: 1]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	float BloomScale;//[Offset: 0x2ac, Size: 1]
	float BloomThreshold;//[Offset: 0x2b0, Size: 1]
	float BloomMaxBrightness;//[Offset: 0x2b4, Size: 1]
	Color BloomTint;//[Offset: 0x2b8, Size: 1]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2c0, Size: 1]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x451e430
	void SetUseIESBrightness(bool bNewValue);// 0x451e3a0
	void SetTransmission(bool bNewValue);// 0x451e310
	void SetTemperature(float NewTemperature);// 0x451e290
	void SetSpecularScale(float NewValue);// 0x451e210
	void SetShadowSlopeBias(float NewValue);// 0x451e100
	void SetShadowBias(float NewValue);// 0x451e080
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x451de60
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x451ddd0
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x451dcc0
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x451dbc0
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x451dac0
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x451d9f0
	void SetIntensity(float NewIntensity);// 0x451d870
	void SetIndirectLightingIntensity(float NewIntensity);// 0x451d7f0
	void SetIESTexture(TextureLightProfile* NewValue);// 0x451d770
	void SetIESBrightnessScale(float NewValue);// 0x451d6f0
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x451d660
	void SetEnableLightShaftBloom(bool bNewValue);// 0x451d540
	void SetBloomTint(Color NewValue);// 0x451cfc0
	void SetBloomThreshold(float NewValue);// 0x451cf40
	void SetBloomScale(float NewValue);// 0x451cec0
	void SetBloomMaxBrightness(float NewValue);// 0x451ce40
	void SetAffectTranslucentLighting(bool bNewValue);// 0x451cdb0
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x451cb70

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x208, Size: 1]
	float Brightness;//[Offset: 0x218, Size: 1]
	float Intensity;//[Offset: 0x21c, Size: 1]
	Color LightColor;//[Offset: 0x220, Size: 1]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 1]
	bool bTransmission;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 1]
	bool bCastDeepShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 1]
	bool bCastRaytracedShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x225, Size: 1]
	bool bAffectReflection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x225, Size: 1]
	bool bAffectGlobalIllumination;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x225, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x228, Size: 1]
	float VolumetricScatteringIntensity;//[Offset: 0x22c, Size: 1]
	int SamplesPerPixel;//[Offset: 0x230, Size: 1]
	void SetSamplesPerPixel(int NewValue);// 0x451e000
	void SetCastVolumetricShadow(bool bNewValue);// 0x451d2f0
	void SetCastShadows(bool bNewValue);// 0x451d260
	void SetCastRaytracedShadow(bool bNewValue);// 0x451d140
	void SetCastDeepShadow(bool bNewValue);// 0x451d0b0
	void SetAffectReflection(bool bNewValue);// 0x451cc90
	void SetAffectGlobalIllumination(bool bNewValue);// 0x451cc00
	LinearColor GetLightColor();// 0x451c5a0

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.StreamableRenderAsset.Object
	float Brightness;//[Offset: 0xe8, Size: 1]
	float TextureMultiplier;//[Offset: 0xec, Size: 1]

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x350, Size: 1]
	float LightFalloffExponent;//[Offset: 0x354, Size: 1]
	float SourceRadius;//[Offset: 0x358, Size: 1]
	float SoftSourceRadius;//[Offset: 0x35c, Size: 1]
	float SourceLength;//[Offset: 0x360, Size: 1]
	void SetSourceRadius(float bNewValue);// 0x45647f0
	void SetSourceLength(float NewValue);// 0x4564770
	void SetSoftSourceRadius(float bNewValue);// 0x45646f0
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x4564570

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x338, Size: 1]
	float Radius;//[Offset: 0x33c, Size: 1]
	float AttenuationRadius;//[Offset: 0x340, Size: 1]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x344, Size: 1]
	void SetIntensityUnits(enum NewIntensityUnits);// 0x45202c0
	void SetAttenuationRadius(float NewRadius);// 0x4520240
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x4520140

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 1]
	float ShadowExponent;//[Offset: 0x4, Size: 1]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bExcludeFromVolumetricLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: MusicAudioPlayer_C.KSAudioPlayer.Info.Actor.Object
	void Append String to Event Array(FString AppendStringIn, out FString[] EventNameArrayIn, out FString[] EventNameArrayOut, FString[] TempArray, FString CurrentEntry, FString AppendString, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Array_Get_Item, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x2cbecb0
	void PrependStringToEventArray(FString PrependStringIn, out FString[] EventNameArrayIn, out FString[] EventNameArrayOut, FString[] TempArray, FString CurrentEntry, FString PrependString, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Array_Get_Item, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Array_Get_Item, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x2cbecb0
	FString[] ComposeEventNamePriorityArray(FString EventName, KSAudioPlayerStateParameterData* CurrentStateParameters, KSAudioPlayerStateParameterData* StateParameters, FString[] EventPriorityArray, FString CallFunc_GetActiveMusicPack_ReturnValue, FString CallFunc_GetActivePlayerCharacter_ReturnValue, FString CallFunc_GetActiveMapLevel_ReturnValue, FString CallFunc_GetActiveGameMode_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString[] CallFunc_PrependStringToEventArray_EventNameArrayOut, FString[] CallFunc_PrependStringToEventArray_EventNameArrayOut, FString[] CallFunc_PrependStringToEventArray_EventNameArrayOut, FString[] CallFunc_PrependStringToEventArray_EventNameArrayOut);// 0x2cbecb0
	FString[] ComposeBankNamePriorityArray(FString BankPrefix, KSAudioPlayerStateParameterData* CurrentStateParameters, FString[] EventPriorityArray, KSAudioPlayerStateParameterData* StateParameters, FString CallFunc_GetActiveGameMode_ReturnValue, FString CallFunc_GetActiveMapLevel_ReturnValue, FString CallFunc_GetActivePlayerCharacter_ReturnValue, FString CallFunc_GetActiveMusicPack_ReturnValue, FString[] CallFunc_Append_String_to_Event_Array_EventNameArrayOut, FString[] CallFunc_Append_String_to_Event_Array_EventNameArrayOut, int CallFunc_Array_AddUnique_ReturnValue, FString[] CallFunc_Append_String_to_Event_Array_EventNameArrayOut, FString[] CallFunc_Append_String_to_Event_Array_EventNameArrayOut);// 0x2cbecb0

--------------------------------
Class: KSTeamState_Control.KSTeamState.Info.Actor.Object
	int ControlScore;//[Offset: 0x6e8, Size: 1]

--------------------------------
Class: GameShop_Global_Standard_C.KSGameShop_Global.KSGameShop.Info.Actor.Object
	KSGameShopItemComponent_Job* GadgetOne;//[Offset: 0x370, Size: 1]
	KSGameShopItemComponent_Job* GadgetZero;//[Offset: 0x378, Size: 1]
	KSGameShopItemComponent_Job* PerkSeven;//[Offset: 0x380, Size: 1]
	KSGameShopItemComponent_Job* PerkSix;//[Offset: 0x388, Size: 1]
	KSGameShopItemComponent_Job* PerkFive;//[Offset: 0x390, Size: 1]
	KSGameShopItemComponent_Job* PerkFour;//[Offset: 0x398, Size: 1]
	KSGameShopItemComponent_Job* PerkThree;//[Offset: 0x3a0, Size: 1]
	KSGameShopItemComponent_Job* PerkTwo;//[Offset: 0x3a8, Size: 1]
	KSGameShopItemComponent_Job* PerkOne;//[Offset: 0x3b0, Size: 1]
	KSGameShopItemComponent_Job* PerkZero;//[Offset: 0x3b8, Size: 1]
	GameShopItemComponent_Single_C* MeleeMastery;//[Offset: 0x3c0, Size: 1]
	GameShopItemComponent_Single_C* PistolMastery;//[Offset: 0x3c8, Size: 1]
	GameShopItemComponent_Multiple_C* PrimaryMastery;//[Offset: 0x3d0, Size: 1]
	KSGameShopTableComponent_Mastery* KSGameShopTableComponent_MeleeMastery;//[Offset: 0x3d8, Size: 1]
	KSGameShopTableComponent_Mastery* KSGameShopTableComponent_SecondaryMastery;//[Offset: 0x3e0, Size: 1]
	KSGameShopTableComponent_Mastery* KSGameShopTableComponent_Mastery2;//[Offset: 0x3e8, Size: 1]
	KSGameShopTableComponent_Mastery* KSGameShopTableComponent_Mastery1;//[Offset: 0x3f0, Size: 1]
	KSGameShopTableComponent_Loadout* KSGameShopTableComponent_Loadout;//[Offset: 0x3f8, Size: 1]
	KSWidgetInfoComponent* KSWidgetInfo;//[Offset: 0x400, Size: 1]

--------------------------------
Class: KSGameShop_Global.KSGameShop.Info.Actor.Object
	bool bAllowBuyWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 1]
	bool bLockUndoTransactionHistoryBuyWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35a, Size: 1]
	bool bResetOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 1]
	void UpdateInputBindingConsumption();// 0x26b01d0
	void OnSignificantActionTakenAfterSpawn(KSPlayerController* InPlayerController);// 0x26af9e0
	void OnPlayerInZoneChanged(KSPlayerState* InPlayerState, bool bInZone);// 0x26af790
	void OnPlayerDeath(CombatEventInfo EventInfo);// 0x26af520
	void OnDeadPlayerSpawned(KSPlayerState* InPlayerState, KSCharacterBase* Character);// 0x26af3e0
	void OnDeadPlayerPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x26af320
	void GetComponentsToResetOnDeath(out KSGameShopItemComponent*[] OutGameShopItemComponents);// 0x26aebf0
	void BlueprintOnPlayerDeath(out const CombatEventInfo EventInfo);// 0x2cbecb0

--------------------------------
Class: KSGameShopItemComponent_Job.KSGameShopItemComponent.KSGameShopComponent.ActorComponent.Object
	void OnShopItemTableChanged(KSGameShopTableComponent* GameShopTableComponent);// 0x26af960

--------------------------------
Class: KSGameShopTableComponent.KSGameShopComponent.ActorComponent.Object
	CompositeDataTable* ItemTable;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: CompositeDataTable.DataTable.Object
	DataTable*[] ParentTables;//[Offset: 0xc8, Size: 1]
	DataTable*[] OldParentTables;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: GameShopItemComponent_Single_C.KSGameShopItemComponent_Mastery.KSGameShopItemComponent.KSGameShopComponent.ActorComponent.Object

--------------------------------
Class: KSGameShopItemComponent_Mastery.KSGameShopItemComponent.KSGameShopComponent.ActorComponent.Object
	bool bAllowUnmastered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	KSItem* FavoriteItem;//[Offset: 0x2a8, Size: 1]
	int SlotPosition;//[Offset: 0x2b0, Size: 1]
	int[] AdditionalOfferingIds;//[Offset: 0x2c8, Size: 1]
	MulticastInlineDelegateProperty OnOfferingsChanged;//[Size: 1]
	KSShopItemMasteryOffering[] Offerings;//[Offset: 0x2e8, Size: 1]
	bool TryToSwapToSelection(int OfferingIndex, int SelectionIndex);// 0x26b0110
	void Server_SwapToSelection(int OfferingIndex, int SelectionIndex);// 0x26afcd0
	void Server_SetFavoriteItem(KSItem* Item);// 0x26afc10
	void OnRep_Offerings();// 0x26af8e0
	KSShopItemMasteryOffering[] GetOfferings();// 0x26af0a0
	bool CanSwapToSelection(out const KSShopItemMasterySelection Selection);// 0x26ae790

--------------------------------
Class: KSShopItemMasteryOffering
	KSWeaponCategoryAsset* WeaponCategoryAsset;//[Offset: 0x0, Size: 1]
	KSShopItemMasterySelection[] Selections;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSShopItemMasterySelection
	KSGameShopItem GameShopItem;//[Offset: 0x0, Size: 1]
	bool bDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	bool bMastered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	bool bFavorite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 1]

--------------------------------
Class: GameShopItemComponent_Multiple_C.KSGameShopItemComponent_Mastery.KSGameShopItemComponent.KSGameShopComponent.ActorComponent.Object

--------------------------------
Class: KSGameShopTableComponent_Mastery.KSGameShopTableComponent_Job.KSGameShopTableComponent.KSGameShopComponent.ActorComponent.Object
	DataTable* JobMasteryTable;//[Offset: 0x108, Size: 1]
	DataTable* WeaponCategoryItemTable;//[Offset: 0x110, Size: 1]

--------------------------------
Class: KSGameShopTableComponent_Job.KSGameShopTableComponent.KSGameShopComponent.ActorComponent.Object
	KSJobItem* CachedJob;//[Offset: 0x100, Size: 1]
	void TryToLoadJob();// 0x26b0060
	void OnRep_CachedJob();// 0x26af880
	void OnOwnerLoadoutChanged(KSGameShop* GameShop);// 0x26af4a0

--------------------------------
Class: KSGameShopTableComponent_Loadout.KSGameShopTableComponent_Job.KSGameShopTableComponent.KSGameShopComponent.ActorComponent.Object
	DataTable*[] JobLoadoutDataTables;//[Offset: 0x108, Size: 1]

--------------------------------
Class: KSWidgetInfoComponent.ActorComponent.Object
	KSWidgetInfoParams[] WidgetParamsToCreate;//[Offset: 0xb8, Size: 1]
	void OnHUDSetup();// 0x27df710

--------------------------------
Class: KSWidgetInfoParams
	class UserWidget* Widget;//[Offset: 0x0, Size: 1]
	bool bPreloadWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	FString WidgetParentTarget;//[Offset: 0x30, Size: 1]
	Actor* InfoActor;//[Offset: 0x40, Size: 1]

--------------------------------
Class: Strikeout_Announcer_C.ControlObjective_Announcer_C.ModularAnnouncerBase_C.RoundGameAnnouncer_C.KSGameModeAnnouncer_C.KSAnnouncer.Info.Actor.Object
	RespawnTicket_AnnouncerComponent_C* RespawnTicket_AnnouncerComponent;//[Offset: 0x520, Size: 1]

--------------------------------
Class: ControlObjective_Announcer_C.ModularAnnouncerBase_C.RoundGameAnnouncer_C.KSGameModeAnnouncer_C.KSAnnouncer.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x508, Size: 1]
	Crate_AnnouncerComponent_C* Crate_AnnouncerComponent;//[Offset: 0x510, Size: 1]
	ControlObj_AnnouncerComponent_C* ControlObj_AnnouncerComponent;//[Offset: 0x518, Size: 1]
	byte Get Objective Met State(KSTeamState* Winning Team);// 0x2cbecb0
	void OnObjectiveContested(out const interface classNone GameObjective);// 0x2cbecb0
	void ExecuteUbergraph_ControlObjective_Announcer(int EntryPoint, const interface classNone K2Node_Event_GameObjective);// 0x2cbecb0

--------------------------------
Class: ModularAnnouncerBase_C.RoundGameAnnouncer_C.KSGameModeAnnouncer_C.KSAnnouncer.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x478, Size: 1]
	MulticastInlineDelegateProperty BombDropped;//[Size: 1]
	MulticastInlineDelegateProperty BombExploded;//[Size: 1]
	MulticastInlineDelegateProperty BombHeld;//[Size: 1]
	MulticastInlineDelegateProperty BombArmed;//[Size: 1]
	MulticastInlineDelegateProperty BombDisarmed;//[Size: 1]
	bool Custom Team Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	int Announcement Group Team Override;//[Offset: 0x4d4, Size: 1]
	MulticastInlineDelegateProperty TeamOverridesAnnouncementGroup;//[Size: 1]
	MulticastInlineDelegateProperty BindToTeamStateEvents;//[Size: 1]
	MulticastInlineDelegateProperty BombDisarming;//[Size: 1]
	int GetTeamOverrideForAnnouncementGroup(out const FName[] Groups, int CallFunc_GetTeamOverrideForAnnouncementGroup_ReturnValue);// 0x2cbecb0
	void Set Team Override For Announcement Group(int Team);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void OnObjectiveDropped(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveExploded(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveHeld(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveArmed(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDisarmed(out const interface classNone GameObjective);// 0x2cbecb0
	void OnPhaseChange(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x2cbecb0
	void OnObjectiveDisarming(out const interface classNone GameObjective);// 0x2cbecb0
	void ExecuteUbergraph_ModularAnnouncerBase(int EntryPoint, const interface classNone K2Node_Event_GameObjective, bool Temp_bool_IsClosed_Variable, const interface classNone K2Node_Event_GameObjective, const interface classNone K2Node_Event_GameObjective, const interface classNone K2Node_Event_GameObjective, const interface classNone K2Node_Event_GameObjective, const interface classNone K2Node_Event_GameObjective, MatchPhase K2Node_Event_NewPhase, MatchPhase K2Node_Event_PreviousPhase, bool Temp_bool_Has_Been_Initd_Variable);// 0x2cbecb0
	void BombDisarming__DelegateSignature(interface classNone NewParam);// 0x2cbecb0
	void BindToTeamStateEvents__DelegateSignature();// 0x2cbecb0
	void TeamOverridesAnnouncementGroup__DelegateSignature(out FName[] Groups);// 0x2cbecb0
	void BombDisarmed__DelegateSignature(interface classNone Objective);// 0x2cbecb0
	void BombArmed__DelegateSignature(interface classNone Objective);// 0x2cbecb0
	void BombHeld__DelegateSignature(interface classNone Objective);// 0x2cbecb0
	void BombExploded__DelegateSignature(interface classNone Objective);// 0x2cbecb0
	void BombDropped__DelegateSignature(interface classNone Objective);// 0x2cbecb0

--------------------------------
Class: RoundGameAnnouncer_C.KSGameModeAnnouncer_C.KSAnnouncer.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3a0, Size: 1]
	AkAudioEvent* VictoryByElimination;//[Offset: 0x3a8, Size: 1]
	AkAudioEvent* DefeatedByElimination;//[Offset: 0x3b0, Size: 1]
	AkAudioEvent* RoundDraw;//[Offset: 0x3b8, Size: 1]
	AkAudioEvent* BothMatchPoint;//[Offset: 0x3c0, Size: 1]
	AkAudioEvent* FriendlyMatchPoint;//[Offset: 0x3c8, Size: 1]
	AkAudioEvent* EnemyMatchPoint;//[Offset: 0x3d0, Size: 1]
	AkAudioEvent* OverTime;//[Offset: 0x3d8, Size: 1]
	FName PreviousPhase;//[Offset: 0x3e0, Size: 1]
	byte EndState;//[Offset: 0x3e8, Size: 1]
	AkAudioEvent* VictoryBecauseObjNotMet;//[Offset: 0x3f0, Size: 1]
	AkAudioEvent* DefeatedBecauseObjNotMet;//[Offset: 0x3f8, Size: 1]
	AkAudioEvent* VictoryBySuddenDeath;//[Offset: 0x400, Size: 1]
	AkAudioEvent* DefeatedBySuddenDeath;//[Offset: 0x408, Size: 1]
	bool bSingleRoundMatchPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	bool Announced RoundStart Instruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x411, Size: 1]
	AkAudioEvent* GenericGameModeIntro;//[Offset: 0x418, Size: 1]
	MulticastInlineDelegateProperty AnnounceEndState;//[Size: 1]
	MulticastInlineDelegateProperty AnnounceAttackDefendPreSelect;//[Size: 1]
	MulticastInlineDelegateProperty AnnounceAttackDefendInstruction;//[Size: 1]
	AkAudioEvent* MatchVictory;//[Offset: 0x450, Size: 1]
	AkAudioEvent* MatchDefeat;//[Offset: 0x458, Size: 1]
	AkAudioEvent* MatchDraw;//[Offset: 0x460, Size: 1]
	AkAudioEvent* VictoryBecauseObjMet;//[Offset: 0x468, Size: 1]
	AkAudioEvent* DefeatedBecauseObjMet;//[Offset: 0x470, Size: 1]
	byte Get Objective Met State(KSTeamState* Winning Team, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState* CallFunc_GetAttackingTeam_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, byte K2Node_Select_Default);// 0x2cbecb0
	void Play End State Announcer VO(KSTeamState* WinningTeamState, AkAudioEvent* Temp_object_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, AkAudioEvent* Temp_object_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, byte Temp_byte_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, KSGameState* CallFunc_GetKSGameState_ReturnValue, byte Temp_byte_Variable, bool CallFunc_BlueprintHasMatchEnded_ReturnValue, AkAudioEvent* K2Node_Select_Default, AkAudioEvent* K2Node_Select_Default);// 0x2cbecb0
	int GetTeamOverrideForAnnouncementGroup(out const FName[] Groups, const FName Temp_name_Variable, int CallFunc_GetTeamOverrideForAnnouncementGroup_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, const FName Temp_name_Variable, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, KSTeamState* CallFunc_GetAttackingTeam_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void TryToAlertMatchPoint(bool bEnemyMatchPoint, bool bFriendlyMatchPoint, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_BooleanAND_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, KSPlayerController* CallFunc_GetPlayerController_ReturnValue, KSTeamState* CallFunc_GetPerceivedLocalTeamForController_ReturnValue, KSTeamState*[] CallFunc_GetAllEnemyTeams_EnemyTeams, bool CallFunc_IsTeamAtMatchPoint_ReturnValue, KSTeamState* CallFunc_Array_Get_Item, bool CallFunc_IsTeamAtMatchPoint_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	bool ShouldPlayTimeAnnouncementFromGroup(out const FName[] Groups, const FName Temp_name_Variable, bool CallFunc_ShouldPlayTimeAnnouncementFromGroup_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2cbecb0
	void TryToTriggerCurrentRoundsState(KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_HasTriggeredRoundSetup_ReturnValue, bool CallFunc_HasTriggeredRoundStart_ReturnValue, bool CallFunc_HasTriggeredRoundOver_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void ShouldStartMusicOnBeginPlay(out bool StartMusic, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_RoundHasStarted_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void RoundSetup(out const RoundInitState RoundInitState);// 0x2cbecb0
	void RoundOver(KSGameState* GameState, out const RoundResult RoundResult);// 0x2cbecb0
	void OnPhaseChange(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x2cbecb0
	void OnLastManStanding(KSPlayerState* LastPlayer);// 0x2cbecb0
	void RoundStart(out const RoundInitState RoundInitState);// 0x2cbecb0
	void ExecuteUbergraph_RoundGameAnnouncer(int EntryPoint, bool Temp_bool_Has_Been_Initd_Variable, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_IsKillCamWorld_ReturnValue, bool CallFunc_IsValid_ReturnValue, const RoundInitState K2Node_CustomEvent_RoundInitState, KSGameState* K2Node_CustomEvent_GameState, const RoundResult K2Node_CustomEvent_RoundResult, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_Get_Objective_Met_State_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, MatchPhase K2Node_Event_NewPhase, MatchPhase K2Node_Event_PreviousPhase, KSPlayerState* K2Node_Event_LastPlayer, bool K2Node_SwitchName_CmpSuccess, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_IsRoundInProgress_ReturnValue, const RoundInitState K2Node_CustomEvent_RoundInitState, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool Temp_bool_IsClosed_Variable, byte CallFunc_MakeLiteralByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSGameState_Modular* CallFunc_GetKSGameState_Modular_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, AttackDefend_AnnouncerComponent_C* CallFunc_GetComponentByClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue);// 0x2cbecb0
	void AnnounceAttackDefendInstruction__DelegateSignature();// 0x2cbecb0
	void AnnounceAttackDefendPreSelect__DelegateSignature();// 0x2cbecb0
	void AnnounceEndState__DelegateSignature(KSTeamState* Winning Team);// 0x2cbecb0

--------------------------------
Class: KSGameModeAnnouncer_C.KSAnnouncer.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 1]
	AkAudioEvent* TeamsFlipped;//[Offset: 0x348, Size: 1]
	AkAudioEvent* LastManStanding;//[Offset: 0x350, Size: 1]
	KSCharacter* CachedViewedCharacter;//[Offset: 0x358, Size: 1]
	KSPlayerState* CachedViewedPlayerState;//[Offset: 0x360, Size: 1]
	bool InFreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	AkAudioEvent* KillstreakReady;//[Offset: 0x370, Size: 1]
	int LocalPlayerTeamNum;//[Offset: 0x378, Size: 1]
	AkAudioEvent* FriendlyDowned;//[Offset: 0x380, Size: 1]
	AkAudioEvent* LastEnemyStanding;//[Offset: 0x388, Size: 1]
	FName PreviousPhaseName;//[Offset: 0x390, Size: 1]
	AkAudioEvent* Team Wipe SFX;//[Offset: 0x398, Size: 1]
	void ShouldStartMusicOnBeginPlay(out bool StartMusic, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_HasMatchStarted_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2cbecb0
	void SetViewedPlayerStateBindings(KSPlayerState* NewPlayerState, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void SetViewedCharacterBindings(KSCharacter* NewCharacter, bool CallFunc_IsValid_ReturnValue, KSPlayerState* CallFunc_GetKSBestPlayerState_ReturnValue);// 0x2cbecb0
	void BindToNewViewTarget(Actor* NewViewTarget, KSPlayerController* CallFunc_GetPlayerController_ReturnValue, KSCharacter* CallFunc_GetCharacterFromViewTarget_Character, int CallFunc_GetPerceivedTeamNumForController_ReturnValue, KSPlayerState* CallFunc_GetKSBestPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void ClearViewedCharacterBindings();// 0x2cbecb0
	void ClearViewedPlayerStateBindings(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void GetCharacterFromViewTarget(Actor* InActor, out KSCharacter* Character, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSCharacter* CallFunc_GetUIKSCharacter_ReturnValue);// 0x2cbecb0
	void OnLocalViewTargetMovementModeChanged(byte OldMode, byte OldCustomMode, byte NewMode, byte NewCustomMode);// 0x2cbecb0
	void OnLocalViewTargetChanged(KSPlayerController* Controller, Actor* OldViewTarget, Actor* NewViewTarget);// 0x2cbecb0
	void EventLocalPlayerControllerDestroyed(KSPlayerController* PlayerController);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void OnWinnerSet(int TeamNumber);// 0x2cbecb0
	void ReceiveEndPlay(byte EndPlayReason);// 0x2cbecb0
	void OnTeamSidesFlipped();// 0x2cbecb0
	void OnLastManStanding(KSPlayerState* LastPlayer);// 0x2cbecb0
	void OnKillstreakPointsEarned(KSPlayerMod_Activated* ActivatedMod);// 0x2cbecb0
	void OnPlayerDeath(CombatEventInfo EventInfo);// 0x2cbecb0
	void OnPlayerDown(CombatEventInfo EventInfo, int ExpBonus);// 0x2cbecb0
	void Living Enemies Changed(int TicketsRemaining);// 0x2cbecb0
	void OnPhaseChange(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x2cbecb0
	void ExecuteUbergraph_KSGameModeAnnouncer(int EntryPoint, MatchPhase K2Node_CustomEvent_NewPhase, MatchPhase K2Node_CustomEvent_PreviousPhase, byte K2Node_Event_OldMode, byte K2Node_Event_OldCustomMode, byte K2Node_Event_NewMode, byte K2Node_Event_NewCustomMode, KSPlayerController* K2Node_Event_Controller, Actor* K2Node_Event_OldViewTarget, Actor* K2Node_Event_NewViewTarget, KSPlayerController* K2Node_Event_PlayerController, bool CallFunc_IsKillCamWorld_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, MatchPhase CallFunc_GetMatchPhase_ReturnValue, bool CallFunc_IsValid_ReturnValue, int K2Node_CustomEvent_TeamNumber, byte K2Node_Event_EndPlayReason, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* K2Node_CustomEvent_LastPlayer, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsKillCamWorld_ReturnValue, KSPlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsEnemy_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, KSPlayerMod_Activated* K2Node_CustomEvent_ActivatedMod, KSModInst_Activated*[] CallFunc_GetActivatableMods_OutMods, bool CallFunc_GetActivatableMods_ReturnValue, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetViewTarget_ReturnValue, int Temp_int_Array_Index_Variable, KSModInst_Activated* CallFunc_Array_Get_Item, KSPlayerMod* CallFunc_GetModAsset_ReturnValue, int CallFunc_GetRequiredCharge_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_GetCurrentCharge_ReturnValue, CombatEventInfo K2Node_CustomEvent_EventInfo, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsKillCamWorld_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BlueprintIsMatchInProgress_ReturnValue, CombatEventInfo K2Node_CustomEvent_EventInfo, int K2Node_CustomEvent_ExpBonus, bool CallFunc_IsEnemy_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsKillCamWorld_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_BlueprintIsMatchInProgress_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, const delegate Temp_delegate_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int K2Node_CustomEvent_TicketsRemaining, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSGameState_Modular.KSGameState_RoundGame.KSGameState.PGame_GameState.GameState.GameStateBase.Info.Actor.Object
	KSHUDComponent_Objective* GetKSObjectiveComponent();// 0x2cbecb0

--------------------------------
Class: Crate_AnnouncerComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	ModularAnnouncerBase_C* Owner;//[Offset: 0xb8, Size: 1]
	TimerHandle CrateVOIsPlayingTimer;//[Offset: 0xc0, Size: 1]
	bool CrateVOIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	void ReceiveBeginPlay();// 0x2cbecb0
	void OnCrateActivated();// 0x2cbecb0
	void CustomEvent();// 0x2cbecb0
	void ExecuteUbergraph_Crate_AnnouncerComponent(int EntryPoint, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int Temp_int_Array_Index_Variable, Actor* CallFunc_GetOwner_ReturnValue, ModularAnnouncerBase_C* K2Node_DynamicCast_AsModular_Announcer_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsDedicatedServer_ReturnValue, KSLootCrate*[] CallFunc_GetAllActorsOfClass_OutActors, delegate K2Node_CreateDelegate_OutputDelegate, KSLootCrate* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSLootCrate.KSBlueprintableInteractable.Actor.Object
	int SideAlignment;//[Offset: 0x2a0, Size: 1]
	bool bRequiresSideAlignmentToLoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	bool bIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ca, Size: 1]
	MulticastInlineDelegateProperty OnLootcrateInfoChangedDel;//[Size: 1]
	KSLootCrateInfo LootCrateInfo;//[Offset: 0x2e0, Size: 1]
	KSLootItemInfo[] LootItemInfos;//[Offset: 0x308, Size: 1]
	KSTimerComponent* ActivationTimer;//[Offset: 0x318, Size: 1]
	MulticastInlineDelegateProperty OnActivationTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnActivationTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnActivationTimerComplete;//[Size: 1]
	void StartActivationTimer(float Seconds);// 0x26ecf90
	void SetOpen(bool bOpen);// 0x26eca80
	void SetEnabled(bool bEnabled);// 0x26ec8e0
	void SetActive(bool bActive);// 0x26ec750
	void Reset();// 0xcf5e70
	void OnRep_LootItemInfos();// 0x26ec690
	void OnRep_LootCrateInfo();// 0x26ec530
	void OnRep_IsOpen();// 0x26ec4d0
	void OnRep_IsEnabled();// 0x26ec470
	void OnRep_IsActive();// 0x26ec410
	void OnRep_ActivationTimer();// 0x26ec3f0
	void OnOpenStatusChanged(bool bOpen);// 0x26ec360
	void OnLootItemInfosChanged(out const KSLootItemInfo[] Infos);// 0x26ec2b0
	void OnLootCrateInteractionStarted(KSCharacter* InteractingCharacter, float InteractDuration);// 0x26ec1e0
	void OnLootCrateInteractionEnded(KSCharacter* InteractingCharacter);// 0x1ef3020
	void OnLootCrateInteractionComplete(KSCharacter* InteractingCharacter, enum Result);// 0x26ec110
	void OnLootCrateInfoChanged(KSLootCrateInfo Info);// 0x26ebff0
	void OnEnabledStatusChanged(bool bEnabled);// 0x1f2e9d0
	void OnActiveStatusChanged(bool bActive);// 0x26def10
	bool IsOpen();// 0x26ebf30
	bool IsEnabled();// 0x26ebeb0
	bool IsActive();// 0x26ebe90
	bool IsActivating();// 0x26ebe60
	void InitLoot(const DataTable* CrateTable);// 0x26ebde0
	int GetSideAlignment();// 0x26ebd80
	float GetRemainingActivationTime();// 0x26ebd50
	enum GetRarity();// 0x26ebd00
	int GetPrice();// 0x26ebce0
	void GetLootItemInfos(out KSLootItemInfo[] OutLootItemInfos);// 0x26ebc30
	FText GetLabel();// 0x26ebb80
	void GetItemsToSpawn(out KSItem*[] OutItemsToSpawn);// 0x26ebab0
	Color GetColor();// 0x26eba40
	bool CanCharacterAfford(const KSCharacterFoundation* Character);// 0x26eb750
	void ActivationTimerTick(float Seconds);// 0x26eb590
	void ActivationTimerComplete();// 0x26eb570
	void ActivationTimerActive(bool bActive);// 0x26eb4e0

--------------------------------
Class: KSBlueprintableInteractable.Actor.Object
	KSInteractableComponent* InteractableComponent;//[Offset: 0x228, Size: 1]
	bool bInteractionAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	FText ProgressText;//[Offset: 0x238, Size: 1]
	FText PromptText;//[Offset: 0x250, Size: 1]
	MulticastInlineDelegateProperty OnInteractionStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractionEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractionComplete;//[Size: 1]
	void SetInteractability(bool NewInteractable);// 0x263e3c0
	bool InternalCanInteractOnPress(KSCharacter* InteractingCharacter);// 0x263c5c0
	bool InternalCanInteractOnHold(KSCharacter* InteractingCharacter);// 0x2619910
	void BlueprintInteractionStarted(KSCharacter* InteractingCharacter, float InDuration);// 0x2cbecb0
	Vector BlueprintInteractionPoint();// 0x2635870
	void BlueprintInteractionEnded(KSCharacter* InteractingCharacter);// 0x2cbecb0

--------------------------------
Class: KSLootCrateInfo
	enum Rarity;//[Offset: 0x0, Size: 1]
	Color Color;//[Offset: 0x4, Size: 1]
	FText Label;//[Offset: 0x8, Size: 1]
	int Price;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSLootItemInfo
	enum Rarity;//[Offset: 0x0, Size: 1]
	Color Color;//[Offset: 0x4, Size: 1]

--------------------------------
Class: AttackDefend_AnnouncerComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	ModularAnnouncerBase_C* Owner;//[Offset: 0xb8, Size: 1]
	AkAudioEvent* DefeatedByAttackingTeam;//[Offset: 0xc0, Size: 1]
	AkAudioEvent* DefeatedByDefendingTeam;//[Offset: 0xc8, Size: 1]
	AkAudioEvent* VictoryAsAttackingTeam;//[Offset: 0xd0, Size: 1]
	AkAudioEvent* VictoryAsDefendingTeam;//[Offset: 0xd8, Size: 1]
	bool FirstPreSelectionPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	AkAudioEvent* FirstAttackingTeamIntro;//[Offset: 0xe8, Size: 1]
	AkAudioEvent* FirstDefendingTeamIntro;//[Offset: 0xf0, Size: 1]
	AkAudioEvent* SecondAttackingTeamIntro;//[Offset: 0xf8, Size: 1]
	AkAudioEvent* SecondDefendingTeamIntro;//[Offset: 0x100, Size: 1]
	AkAudioEvent* AttackInstruction;//[Offset: 0x108, Size: 1]
	AkAudioEvent* DefendInstruction;//[Offset: 0x110, Size: 1]
	void ReceiveBeginPlay();// 0x2cbecb0
	void Announce End State(KSTeamState* Winning Team);// 0x2cbecb0
	void Announce PreSelect();// 0x2cbecb0
	void Announce Round Instructions();// 0x2cbecb0
	void ExecuteUbergraph_AttackDefend_AnnouncerComponent(int EntryPoint, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, byte Temp_byte_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, Actor* CallFunc_GetOwner_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ModularAnnouncerBase_C* K2Node_DynamicCast_AsModular_Announcer_Base, bool K2Node_DynamicCast_bSuccess, KSTeamState* K2Node_CustomEvent_Winning_Team, int CallFunc_GetTeamNum_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, AkAudioEvent* K2Node_Select_Default, byte Temp_byte_Variable, AkAudioEvent* K2Node_Select_Default, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState* CallFunc_GetAttackingTeam_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, KSTeamState* CallFunc_GetAttackingTeam_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSTeamState* CallFunc_GetAttackingTeam_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetTeamNum_ReturnValue);// 0x2cbecb0

--------------------------------
Class: ControlObj_AnnouncerComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	ModularAnnouncerBase_C* Owner;//[Offset: 0xb8, Size: 1]
	byte EndState;//[Offset: 0xc0, Size: 1]
	KSTeamState* PreviousTeamOwner;//[Offset: 0xc8, Size: 1]
	AkAudioEvent* PointCapturedFriendly;//[Offset: 0xd0, Size: 1]
	AkAudioEvent* PointCapturedEnemy;//[Offset: 0xd8, Size: 1]
	AkAudioEvent* Friendly Contesting;//[Offset: 0xe0, Size: 1]
	AkAudioEvent* Enemy Contesting;//[Offset: 0xe8, Size: 1]
	KSTeamState* PreviousTeamCap;//[Offset: 0xf0, Size: 1]
	int Capturing Team;//[Offset: 0xf8, Size: 1]
	AkAudioEvent* Point Moved;//[Offset: 0x100, Size: 1]
	bool Instant Capture Unless Contested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	AkAudioEvent* FriendlyCaptured, was Neutral;//[Offset: 0x110, Size: 1]
	AkAudioEvent* EnemyCaptured, was Neutral;//[Offset: 0x118, Size: 1]
	AkAudioEvent* Neutral, was Friendly;//[Offset: 0x120, Size: 1]
	AkAudioEvent* Neutral, was Enemy;//[Offset: 0x128, Size: 1]
	float Time Elapsed;//[Offset: 0x130, Size: 1]
	<int,AkAudioEvent*> ObjectiveMoveTimes;//[Offset: 0x138, Size: 1]
	float Time Until Point Moves_Cached;//[Offset: 0x188, Size: 1]
	float Time Until Point Moves_Rep;//[Offset: 0x18c, Size: 1]
	int Control Points Used;//[Offset: 0x190, Size: 1]
	int Total Control Points;//[Offset: 0x194, Size: 1]
	GameMode_KOTH_Modular_C* KOTH Gamemode;//[Offset: 0x198, Size: 1]
	AkAudioEvent* LastPoint;//[Offset: 0x1a0, Size: 1]
	bool Skip Hill Update Sounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	void OnRep_Time Until Point Moves_Rep();// 0x2cbecb0
	void Set Last Point();// 0x2cbecb0
	void Update Objective Move Time(float Time Elapsed, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, AkAudioEvent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue);// 0x2cbecb0
	void Control Point Contested(KSControlPoint* Control Point, KSTeamState* CallFunc_GetOwningTeam_ReturnValue, int CallFunc_GetTeamNum_ReturnValue);// 0x2cbecb0
	void Control Point Capturing Changed(KSTeamState* Capturing Team, int CallFunc_GetTeamNum_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void Control Point Owner Changed(KSTeamState* New Owner, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void ReceiveTick(float DeltaSeconds);// 0x2cbecb0
	void OnControlPointCapturingTeamChanged(KSControlPoint* ControlPoint);// 0x2cbecb0
	void Custom Team Announcement Override(out FName[] NewParam);// 0x2cbecb0
	void On Contested(KSControlPoint* ControlPoint);// 0x2cbecb0
	void OnOwningTeamChanged(KSTeamState* Owning Team);// 0x2cbecb0
	void On Control Point Moved();// 0x2cbecb0
	void On Round Prepare();// 0x2cbecb0
	void ExecuteUbergraph_ControlObj_AnnouncerComponent(int EntryPoint, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, float K2Node_Event_DeltaSeconds, Actor* CallFunc_GetOwner_ReturnValue, ModularAnnouncerBase_C* K2Node_DynamicCast_AsModular_Announcer_Base, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSControlPoint* K2Node_CustomEvent_ControlPoint, StrikeOut_ControlPoint_C*[] CallFunc_GetAllActorsOfClass_OutActors, KSTeamState* CallFunc_GetOwningTeam_ReturnValue, StrikeOut_ControlPoint_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName[] K2Node_CustomEvent_NewParam, delegate K2Node_CreateDelegate_OutputDelegate, KSControlPoint* K2Node_CustomEvent_ControlPoint, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, KSTeamState* K2Node_CustomEvent_Owning_Team, delegate K2Node_CreateDelegate_OutputDelegate, GameMode_KOTH_Modular_C* CallFunc_GetActorOfClass_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const FName Temp_name_Variable, bool CallFunc_Array_Contains_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSControlPoint.KSObjectiveBase.Actor.Object
	enum POIState;//[Offset: 0x390, Size: 1]
	KSObjectiveInfo ObjectiveInfo;//[Offset: 0x398, Size: 1]
	KSObjectiveTimerInfo ObjectiveTimerInfo;//[Offset: 0x400, Size: 1]
	KSObjectiveCaptureInfo ObjectiveCaptureInfo;//[Offset: 0x438, Size: 1]
	MulticastInlineDelegateProperty OnCapturedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnUncapturedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnContestedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnUncontestedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnOwningTeamChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCapturingTeamChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnScorePeriodElapsedDelegate;//[Size: 1]
	KSControlPointSettings ControlPointSettings;//[Offset: 0x4c0, Size: 1]
	KSTeamState* OwningTeam;//[Offset: 0x4f0, Size: 1]
	KSTeamState* CapturingTeam;//[Offset: 0x4f8, Size: 1]
	float CaptureProgress;//[Offset: 0x500, Size: 1]
	float ScoreUpdatePeriod;//[Offset: 0x504, Size: 1]
	byte NumTeamMembersCapturing;//[Offset: 0x508, Size: 1]
	float SimulatedProgressRate;//[Offset: 0x50c, Size: 1]
	float SimulatedTimeUntilScore;//[Offset: 0x510, Size: 1]
	int FavoredSide;//[Offset: 0x514, Size: 1]
	bool bHideLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x518, Size: 1]
	PrimitiveComponent*[] RegisteredPawnOverlapComponents;//[Offset: 0x520, Size: 1]
	KSCharacterBase*[] OverlappingPawns;//[Offset: 0x530, Size: 1]
	void UpdateControlPointSettings(out const KSControlPointSettings NewSettings);// 0x2685650
	void ResetScoreProgress();// 0x26852e0
	void RemovePrimitiveToPawnOverlapCheck(PrimitiveComponent* InPrimitive);// 0x2685260
	void OnRep_OwningTeam();// 0x2684f90
	void OnRep_ObjectiveTimer();// 0x26625f0
	void OnRep_GenericCaptureProgress();// 0x2684f70
	void OnRep_CapturingTeam();// 0x2684f50
	void OnOwningTeamChanged(KSTeamState* NewTeam);// 0x2684ec0
	void OnObjectiveTimerTickEvent(float Time);// 0x2cbecb0
	void OnObjectiveTimerCompleteEvent();// 0x2cbecb0
	void OnObjectiveTimerActiveEvent(bool Active);// 0x2cbecb0
	void OnObjectiveStateChangedEvent();// 0x2cbecb0
	void OnObjectiveInactiveEvent();// 0x2cbecb0
	void OnObjectiveActiveEvent();// 0x2cbecb0
	void OnEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2684d80
	void OnCapturingTeamChanged(KSTeamState* NewTeam);// 0x2684cf0
	void OnBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2684b00
	float GetUpdateRateForControlPoint();// 0x2684ab0
	float GetScorePeriodForControlPoint();// 0x2684850
	KSTeamState* GetOwningTeam();// 0x2684830
	KSTeamState* GetCapturingTeam();// 0x2616a30
	bool CheckIfPointCausesSuddenDeath();// 0x2683f00
	void BroadcastPointUncaptured();// 0xcf5e50
	void BroadcastPointScored();// 0x1ef10e0
	void BroadcastPointCaptured();// 0x1ef2f10
	void AddPrimitiveToPawnOverlapCheck(PrimitiveComponent* InPrimitive);// 0x2683e80

--------------------------------
Class: KSControlPointSettings
	bool bCanEverBeCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BaseControlPointCaptureTime;//[Offset: 0x4, Size: 1]
	float BaseControlPointRecaptureTime;//[Offset: 0x8, Size: 1]
	float CaptureRatePercentIncreasePerPlayer;//[Offset: 0xc, Size: 1]
	float FullCaptureDecayTime;//[Offset: 0x10, Size: 1]
	float ScoreUpdatePeriod;//[Offset: 0x14, Size: 1]
	float SuddenDeathScoreUpdatePeriod;//[Offset: 0x18, Size: 1]
	bool bPlayerMustBePresentToKeep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	int[] AcceptedTeamNums;//[Offset: 0x20, Size: 1]

--------------------------------
Class: StrikeOut_ControlPoint_C.KSControlPoint.KSObjectiveBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 1]
	StaticMeshComponent* Cube;//[Offset: 0x548, Size: 1]
	BoxComponent* Box;//[Offset: 0x550, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x558, Size: 1]
	LinearColor NeutralColor;//[Offset: 0x560, Size: 1]
	LinearColor EnemyColor;//[Offset: 0x570, Size: 1]
	LinearColor FriendlyColor;//[Offset: 0x580, Size: 1]
	MaterialInstanceDynamic* DynamicMaterialInstance;//[Offset: 0x590, Size: 1]
	float SuddenDeathScorePeriod;//[Offset: 0x598, Size: 1]
	MulticastInlineDelegateProperty On Owning Team Changed;//[Size: 1]
	BP_BreadcrumbTrail_C*[] BreadcrumbTrail;//[Offset: 0x5b0, Size: 1]
	bool isKOTH;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	Vector GetDefinableNavLocation(Vector tempVector, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_FMin_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_K2_GetRandomPointInNavigableRadius_RandomLocation, bool CallFunc_K2_GetRandomPointInNavigableRadius_ReturnValue);// 0x2cbecb0
	void UpdateBreadcrumbTrail(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, BP_BreadcrumbTrail_C* CallFunc_Array_Get_Item, BP_BreadcrumbTrail_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter*[] CallFunc_GetAllActorsOfClass_OutActors, int Temp_int_Loop_Counter_Variable, KSCharacter* CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsMobile_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, BP_BreadcrumbTrail_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, FName CallFunc_GetCurrentState_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, BP_BreadcrumbTrail_C* CallFunc_FinishSpawningActor_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0
	void UpdateVisibleComponents(FName CallFunc_GetCurrentState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, FName CallFunc_GetCurrentState_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue);// 0x2cbecb0
	bool CheckIfPointCausesSuddenDeath(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSTeamState* CallFunc_GetOwningTeam_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState*[] CallFunc_GetTeams_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSTeamState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_GetRemainingRespawns_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, KSTeamState* CallFunc_GetOwningTeam_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void On Local Controller View Target Changed(KSPlayerController* Controller, Actor* OldViewTarget, Actor* NewViewTarget);// 0x2cbecb0
	void UpdateTeamAlignmentColor(bool CallFunc_IsOwnedByLocalPlayerTeam_OwnedByLocalPlayerTeam, LinearColor CallFunc_SelectColor_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void BindToViewTargetChanged(delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void IsOwnedByLocalPlayerTeam(out bool OwnedByLocalPlayerTeam, enum CallFunc_IsFriendlyWithLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2cbecb0
	void UpdateColor(LinearColor Color, MaterialInterface* CallFunc_GetMaterial_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x2cbecb0
	void HandleNewState();// 0x2cbecb0
	void InitTeamColor();// 0x2cbecb0
	void OnOwningTeamChanged(KSTeamState* NewTeam);// 0x2cbecb0
	void OnCapturingTeamChanged(KSTeamState* NewTeam);// 0x2cbecb0
	void ReceiveTick(float DeltaSeconds);// 0x2cbecb0
	void OnObjectiveStateChangedEvent();// 0x2cbecb0
	void ExecuteUbergraph_StrikeOut_ControlPoint(int EntryPoint, Actor* K2Node_Event_OtherActor, KSTeamState* K2Node_Event_NewTeam, KSTeamState* K2Node_Event_NewTeam, Strikeout_Announcer_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, Strikeout_Announcer_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, float K2Node_Event_DeltaSeconds, Vector CallFunc_GetDefinableNavLocation_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, KSGameMode_Modular* CallFunc_GetKSGameMode_Modular_ReturnValue, int CallFunc_Array_Length_ReturnValue, GameplayTag CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_GameplayTag_ReturnValue);// 0x2cbecb0
	void On Owning Team Changed__DelegateSignature(KSTeamState* NewParam);// 0x2cbecb0

--------------------------------
Class: BP_BreadcrumbTrail_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 1]
	SplineComponent* Spline;//[Offset: 0x228, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x230, Size: 1]
	float Tether Distance for Path;//[Offset: 0x238, Size: 1]
	StaticMeshComponent*[] Waypoints;//[Offset: 0x240, Size: 1]
	KSCharacter* Character to Track;//[Offset: 0x250, Size: 1]
	Vector[] Path Points;//[Offset: 0x258, Size: 1]
	int Num Beacons on Spline;//[Offset: 0x268, Size: 1]
	bool True = Static Mesh / False = Particles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	Actor* Level that Owns Me;//[Offset: 0x270, Size: 1]
	ParticleSystemComponent*[] Particle Waypoints;//[Offset: 0x278, Size: 1]
	float Waypoint Scale;//[Offset: 0x288, Size: 1]
	ParticleSystem* Particle System;//[Offset: 0x290, Size: 1]
	float Space Between Waypoints;//[Offset: 0x298, Size: 1]
	Vector Waypoint Offset;//[Offset: 0x29c, Size: 1]
	Rotator Waypoint Rotation;//[Offset: 0x2a8, Size: 1]
	bool Persistent Waypoint at Target;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4, Size: 1]
	LinearColor Color;//[Offset: 0x2b8, Size: 1]
	bool Unique Final Waypoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	ParticleSystem* Final Waypoint Particle System;//[Offset: 0x2d0, Size: 1]
	Vector Final Waypoint Offset;//[Offset: 0x2d8, Size: 1]
	bool Hide Target Waypoint when close;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	float Final Waypoint Hide Distance;//[Offset: 0x2e8, Size: 1]
	float Particle Velocity Increase;//[Offset: 0x2ec, Size: 1]
	SplineMeshComponent*[] PathMeshes;//[Offset: 0x2f0, Size: 1]
	float BreadcrumbArrowAmount;//[Offset: 0x300, Size: 1]
	float BreadCrumbArrowMinDistance;//[Offset: 0x304, Size: 1]
	float BreadCrumbArrowMinAngle;//[Offset: 0x308, Size: 1]
	void BuildPath();// 0x2cbecb0
	void BuildPath_Debug(bool NewParam);// 0x2cbecb0
	void OnRep_Path Points();// 0x2cbecb0
	void ClearSplineAndDeleteWaypoints(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, SplineMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, ParticleSystemComponent* CallFunc_Array_Get_Item, StaticMeshComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void BuildSpline(out Vector[] Path Points, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Abs_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Transform CallFunc_MakeTransform_ReturnValue, bool Temp_bool_Variable, SplineMeshComponent* CallFunc_AddComponent_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, float K2Node_Select_Default, Vector CallFunc_MakeVector_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetNumberOfSplinePoints_ReturnValue, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, SplineMeshComponent* CallFunc_Array_Get_Item, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Vector CallFunc_GetLocationAtSplinePoint_ReturnValue, Vector CallFunc_GetLocationAtSplinePoint_ReturnValue, Vector CallFunc_GetLocationAtSplinePoint_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Square_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_GetLocationAndTangentAtSplinePoint_Location, Vector CallFunc_GetLocationAndTangentAtSplinePoint_Tangent, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Square_ReturnValue, Vector CallFunc_GetLocationAndTangentAtSplinePoint_Location, Vector CallFunc_GetLocationAndTangentAtSplinePoint_Tangent, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Vector_Distance_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Abs_ReturnValue, float CallFunc_DegAcos_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_GetTangentAtSplinePoint_ReturnValue, Vector CallFunc_Normal_ReturnValue);// 0x2cbecb0
	void FindPath(out Vector[] PathPoints, Vector CallFunc_K2_GetActorLocation_ReturnValue, NavigationPath* CallFunc_FindPathToActorSynchronously_ReturnValue);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void Build Nav();// 0x2cbecb0
	void ReceiveTick(float DeltaSeconds);// 0x2cbecb0
	void MultiCast_BuildSpline();// 0x2cbecb0
	void Set New Target(Vector Location);// 0x2cbecb0
	void Server_SetNewTarget(Vector Location);// 0x2cbecb0
	void Server Get Level Owner(Actor* NewParam);// 0x2cbecb0
	void SelectCharacter(KSCharacter* Character to Track);// 0x2cbecb0
	void KeepOnlyLocal(MaterialInstanceDynamic* Target);// 0x2cbecb0
	void ExecuteUbergraph_BP_BreadcrumbTrail(int EntryPoint, Vector[] CallFunc_FindPath_PathPoints, float K2Node_Event_DeltaSeconds, KSCharacter*[] CallFunc_GetAllActorsOfClass_OutActors, KSCharacter* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsServer_ReturnValue, bool CallFunc_IsStandalone_ReturnValue, Vector K2Node_CustomEvent_location, bool CallFunc_BooleanOR_ReturnValue, Vector K2Node_CustomEvent_location, Actor* K2Node_CustomEvent_NewParam, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, KSCharacter* K2Node_CustomEvent_Character_to_Track, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, MaterialInstanceDynamic* K2Node_CustomEvent_Target, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2cbecb0

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x4f0, Size: 1]
	Vector SplineUpDir;//[Offset: 0x548, Size: 1]
	float SplineBoundaryMin;//[Offset: 0x554, Size: 1]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x558, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x568, Size: 1]
	float SplineBoundaryMax;//[Offset: 0x570, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x574, Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x574, Size: 1]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x574, Size: 1]
	byte ForwardAxis;//[Offset: 0x575, Size: 1]
	float VirtualTextureMainPassMaxDrawDistance;//[Offset: 0x578, Size: 1]
	void UpdateMesh();// 0x459b890
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x459b7b0
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x459b6f0
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x459b620
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x459b540
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x459b480
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x459b2c0
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x459b1e0
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x459af10
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x459ae30
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x459ad70
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x459aca0
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x459abc0
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x459ab00
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x459aa30
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x459a960
	Vector GetStartTangent();// 0x459a7f0
	Vector2D GetStartScale();// 0x459a7b0
	float GetStartRoll();// 0x459a780
	Vector GetStartPosition();// 0x459a740
	Vector2D GetStartOffset();// 0x459a700
	Vector GetSplineUpDir();// 0x459a6c0
	byte GetForwardAxis();// 0x459a310
	Vector GetEndTangent();// 0x459a2d0
	Vector2D GetEndScale();// 0x459a290
	float GetEndRoll();// 0x459a260
	Vector GetEndPosition();// 0x459a220
	Vector2D GetEndOffset();// 0x459a1e0
	float GetBoundaryMin();// 0x459a110
	float GetBoundaryMax();// 0x459a0e0

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 1]
	Vector StartTangent;//[Offset: 0xc, Size: 1]
	Vector2D StartScale;//[Offset: 0x18, Size: 1]
	float StartRoll;//[Offset: 0x20, Size: 1]
	Vector2D StartOffset;//[Offset: 0x24, Size: 1]
	Vector EndPos;//[Offset: 0x2c, Size: 1]
	Vector2D EndScale;//[Offset: 0x38, Size: 1]
	Vector EndTangent;//[Offset: 0x40, Size: 1]
	float EndRoll;//[Offset: 0x4c, Size: 1]
	Vector2D EndOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: NavigationPath.Object
	MulticastInlineDelegateProperty PathUpdatedNotifier;//[Size: 1]
	Vector[] PathPoints;//[Offset: 0x38, Size: 1]
	byte RecalculateOnInvalidation;//[Offset: 0x48, Size: 1]
	bool IsValid();// 0x4691cd0
	bool IsStringPulled();// 0x26c3b20
	bool IsPartial();// 0x4691ca0
	float GetPathLength();// 0x46915b0
	float GetPathCost();// 0x4691360
	FString GetDebugString();// 0x4691260
	void EnableRecalculationOnInvalidation(byte DoRecalculation);// 0x4690e40
	void EnableDebugDrawing(bool bShouldDrawDebugData, LinearColor PathColor);// 0x4690d60

--------------------------------
Class: KSGameMode_Modular.KSGameMode_RoundGame.KSGameMode.PGame_GameMode.PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	MulticastInlineDelegateProperty OnTeamWiped;//[Size: 1]
	MulticastInlineDelegateProperty OnTimerModifiedMidPhase;//[Size: 1]
	bool bEnableWeaponDropVFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	bool bMarkedInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b9, Size: 1]
	bool bUseInitialSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ba, Size: 1]
	bool bAutoRestoreRespawnConfigOnNewRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bb, Size: 1]
	bool bAutoRevertTeamSwapsOnNewRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10bc, Size: 1]
	MulticastInlineDelegateProperty OnTeamChanged;//[Size: 1]
	KSSquadManagerDefinition* SquadManager;//[Offset: 0x10d0, Size: 1]
	bool bAwardBonusPointToRoundWinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d8, Size: 1]
	<KSPlayerState*,KSTeamState*> OriginalPlayersToTeams;//[Offset: 0x10e0, Size: 1]
	<int,int> ScoreAtRoundStart;//[Offset: 0x1130, Size: 1]
	KSPhaseRuleComponent* ActivePhaseRule;//[Offset: 0x1180, Size: 1]
	void SortObjectivesByLootGroup(out KSObjectiveBase*[] ObjectivesToSort, bool ShouldSortDescending);// 0x26abab0
	void SortObjectivesByDisplayId(out KSObjectiveBase*[] ObjectivesToSort, bool ShouldSortDescending);// 0x26ab9b0
	void ShuffleObjectives(out KSObjectiveBase*[] ObjectivesToShuffle);// 0x26ab900
	void PushNewRespawnConfigToTeams(out const KSRespawnConfig NewConfig, enum Filter, bool bInverseFilter, bool bReset);// 0x26ab070
	void PushNewRespawnConfigToAllTeams(out const KSRespawnConfig Config, bool bReset);// 0x26aaf70
	void PushModeDefaultRespawnConfigToTeams(enum Filter, bool bInverseFilter, bool bReset);// 0x26aae60
	void PushModeDefaultRespawnConfigToAllTeams(bool bReset);// 0x26aadd0
	void OnRoundStart();// 0x2cbecb0
	void OnRoundPrepare();// 0x265e530
	void OnRoundEnd();// 0x2cbecb0
	void ModifyTimerBySeconds(float Seconds);// 0x26aa550
	void MarkWonByElimination();// 0x26aa530
	bool FilterTeamObjectives(KSObjectiveBase*[] AvailableObjectives, out KSObjectiveBase*[] FilteredObjectives);// 0x26a9d50
	bool FilterObjectiveForTeams(KSObjectiveBase*[] AvailableObjectives, KSTeamState* FavoredTeam, out KSObjectiveBase*[] FilteredObjectives);// 0x26a9bc0
	bool FilterObjectiveAgainstTeams(KSObjectiveBase*[] AvailableObjectives, KSTeamState* DiscouragedTeam, out KSObjectiveBase*[] FilteredObjectives);// 0x26a9a30
	bool FilterNeutralObjectives(KSObjectiveBase*[] AvailableObjectives, out KSObjectiveBase*[] FilteredObjectives);// 0x26a98d0
	void EndRoundPrepare();// 0x26a98b0
	KSObjectiveBase* ChooseRandomObjective(KSObjectiveBase*[] AvailableObjectives);// 0x26a9640
	void ChangePlayerTeam(KSPlayerState* Player, KSTeamState* NewTeam, enum ShouldRestartPlayer);// 0x26a9540

--------------------------------
Class: KSGameMode_RoundGame.KSGameMode.PGame_GameMode.PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	float PostRoundDuration;//[Offset: 0xfa0, Size: 1]
	float FinalPostRoundDuration;//[Offset: 0xfa4, Size: 1]
	bool bSkipSelectionCinematicAfterFirstRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa8, Size: 1]
	FName RoundStateSetupComplete;//[Offset: 0xfac, Size: 1]
	int RoundNumber;//[Offset: 0xfb4, Size: 1]
	int RoundsNeededToWin;//[Offset: 0xfb8, Size: 1]
	int TotalNumberOfRounds;//[Offset: 0xfbc, Size: 1]
	bool bPlayersCanRestartDuringRoundInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc0, Size: 1]
	bool bHoldPlayerRestartUntilFirstRoundSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc1, Size: 1]
	bool bWinRoundByElimination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc2, Size: 1]
	bool bAwardPointOnDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc3, Size: 1]
	float RoundSetupTime;//[Offset: 0xfc4, Size: 1]
	float RoundDuration;//[Offset: 0xfc8, Size: 1]
	FName RoundStartPhase;//[Offset: 0xfcc, Size: 1]
	bool bNewPawnOnRoundStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd4, Size: 1]
	KSTeamState* WinByEliminationTeam;//[Offset: 0xfe0, Size: 1]
	int NumberOfConsecutiveLossesToEnableEpicGroupSiteGuarantees;//[Offset: 0x1004, Size: 1]
	bool bKillDownedPlayersAtEndOfRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1008, Size: 1]
	bool bSpareWinningDownedPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1009, Size: 1]
	enum InventoryRestore;//[Offset: 0x100b, Size: 1]
	bool bAllowPlayersToKeepInventoryBetweenRounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100c, Size: 1]
	bool bRequirePlayerToBeAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100d, Size: 1]
	bool bRequirePlayerToBeStanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100e, Size: 1]
	bool bRequirePlayerToBeOnWinningTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100f, Size: 1]
	bool bSideSwapWipesEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1010, Size: 1]
	bool bRestoreEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1011, Size: 1]
	GameplayTagQuery InventoryRestoreEquipPointRequirements;//[Offset: 0x1018, Size: 1]
	bool bRestoreSlotlessEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1060, Size: 1]
	bool bRestoreNonEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1061, Size: 1]
	InventoryRestoreInfo[] GuaranteedInventory;//[Offset: 0x1068, Size: 1]
	int FlipTeamSideFrequency;//[Offset: 0x1078, Size: 1]
	int MaxTeamSideFlipsPerMatch;//[Offset: 0x107c, Size: 1]
	bool bSideSwapClearsConsecutiveLosses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1080, Size: 1]
	int TeamSideFlipsThisMatch;//[Offset: 0x1084, Size: 1]
	int LatestTeamSideFlipRoundNumber;//[Offset: 0x1088, Size: 1]
	bool bBlockWeaponsPostRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108c, Size: 1]
	void StartRound();// 0x26abbb0
	bool ShouldTeamsFlip(byte Round);// 0x26ab870
	bool ShouldSkipSelectionCinematicAfterFirstRound();// 0x26ab850
	bool ShouldPlayEndRoundKillCam();// 0x26ab820
	bool ReadyToStartNextRound();// 0x26ab230
	bool ReadyToPrepareNextRound();// 0x26ab200
	void PrepareForNextRound();// 0x26aad90
	void K2_OnSetRoundState(FName InRoundState);// 0x2cbecb0
	bool IsRoundSetupComplete();// 0x26aa4e0
	bool IsRoundInProgress();// 0x26aa4b0
	bool HasRoundStarted();// 0x26aa3d0
	bool HasRoundEnded();// 0x26aa3a0
	bool HasPreparedNextRound();// 0x26aa370
	int GetTeamSideFlipsThisMatch();// 0x26aa350
	FName GetRoundStateName();// 0x26a5770
	MatchPhase GetRoundState();// 0x26a5740
	float GetRoundStartTime();// 0x26aa2a0
	byte GetRoundNumber();// 0x26aa280
	int GetNumRoundsSinceSideFlip();// 0x26aa250
	void EndRoundKillCam();// 0x26a9890
	void EndRound();// 0x26a9870
	bool CanPlayerKeepInventoryBetweenRounds(const KSCharacter* Character, const Controller* Player);// 0x26a9470

--------------------------------
Class: KSSquadManagerDefinition.DataAsset.Object
	FString FriendlySearchName;//[Offset: 0x30, Size: 1]
	class KSSquadManagerBase* SquadManagerActor;//[Offset: 0x40, Size: 1]
	class KSSquadManagerAction[] Options;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSPhaseRuleComponent.KSGameRuleComponent.ActorComponent.Object
	MulticastInlineDelegateProperty PhaseCompletedDel;//[Size: 1]
	float ScoringScalar;//[Offset: 0xd0, Size: 1]
	float LastInitiatedPhaseTime;//[Offset: 0xd4, Size: 1]
	bool bRejectPhaseTimerExpiredForPostRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	bool bUseInitialSpawnPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 1]
	FName LastPhaseName;//[Offset: 0xdc, Size: 1]
	bool bPhaseActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4, Size: 1]
	void SetTeamType(KSTeamState* Team, enum TeamType);// 0x2723900
	void SetTeamIntraScoreGoal(KSTeamState* Team, int Value);// 0x2723840
	void SetTeamIntraScore(KSTeamState* Team, int Value);// 0x2723780
	void SetGameModePhaseTime(float TimeSeconds, bool bCallTimerHasExpiredIfZero);// 0x27236b0
	void SetGameModePhaseAndTimer(FName NewPhaseName, FName NewPhaseDescription, int NewPhaseId, float InTimerDuration, bool bCallTimerHasExpiredIfZero);// 0x2723520
	void SetGameModePhase(FName NewPhaseName, FName NewPhaseDescription, int NewPhaseId);// 0x2723420
	void ResetTicketsForTeam(KSTeamState* Team, bool bToZero);// 0x2723350
	void PhaseTimerExpired(FName PhaseName);// 0x2723110
	void OnPhaseTimerExpired(FName PhaseName);// 0x2723090
	void OnPhaseStarted(out const MatchPhase MatchPhase, float TimeSeconds);// 0x2722fa0
	void OnObjectiveSpawned(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveReset(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveHeld(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveExploded(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDropped(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDisarming(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDisarmed(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveDeactivated(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveContested(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveArming(out const interface classNone GameObjective);// 0x2cbecb0
	void OnObjectiveArmed(out const interface classNone GameObjective);// 0x2cbecb0
	void OnGameObjectiveStateChanged(interface classNone GameObjective);// 0x2722f00
	bool IsPhaseActive();// 0x2722ee0
	void HandleTeamSidesFlipped();// 0x2cbecb0
	void HandlePhaseStarted();// 0x2cbecb0
	void HandlePhaseInterrupted();// 0x2cbecb0
	void HandlePhaseCompleted();// 0x2cbecb0
	void GivePointsToTeam(KSTeamState* Team, int Points);// 0x2722d90
	bool GiveIntraPointsToTeam(KSTeamState* Team, int Points, bool bUseScoreScalar);// 0x2722c90
	KSGameState_Modular* GetGameStateModular();// 0x2722970
	float GetGameModeRemainingPhaseTime();// 0x2722940
	KSGameMode_Modular* GetGameModeModular();// 0x2722910
	FName GetCurrentGamePhase();// 0x2722840
	void CompletePhase(KSTeamState* LeadingTeam);// 0x2722760
	void ChangeTicketsForTeam(KSTeamState* Team, int Count);// 0x27226a0

--------------------------------
Class: InventoryRestoreInfo
	GameplayTag EquipPoint;//[Offset: 0x0, Size: 1]
	KSItem* Item;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameMode_KOTH_Modular_C.KSGameMode_Modular.KSGameMode_RoundGame.KSGameMode.PGame_GameMode.PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1188, Size: 1]
	RandomCrateSpawnerRule_V2_C* RandomCrateSpawnerRule_V2;//[Offset: 0x1190, Size: 1]
	KSLimitDeployablesRuleComponent* KSLimitDeployablesRule;//[Offset: 0x1198, Size: 1]
	BaseSpawnSelectorComponent_C* KOTHSpawnSelectorComponent;//[Offset: 0x11a0, Size: 1]
	RandomAfterInitialPointOfInterestSelectionRule_C* RandomAfterInitialPointOfInterestSelectionRule;//[Offset: 0x11a8, Size: 1]
	KSDropRuleComponent* KSDropRule;//[Offset: 0x11b0, Size: 1]
	JobSelectionPhaseRule_C* JobSelectionPhaseRule;//[Offset: 0x11b8, Size: 1]
	KOTHOvertimeControlPhase_C* KOTHOvertimeControlPhase;//[Offset: 0x11c0, Size: 1]
	PointOfInterestSelectionRuleByID_C* PointOfInterestSelectionRuleByID;//[Offset: 0x11c8, Size: 1]
	KOTHControlPhase_C* KOTHControlPhase;//[Offset: 0x11d0, Size: 1]
	ForceChimeraOpenPhase_C* ForceChimeraOpenPhase;//[Offset: 0x11d8, Size: 1]
	KSPunishmentRuleComponent* KSPunishmentRule;//[Offset: 0x11e0, Size: 1]
	KSShopRuleComponent* KSShopRule;//[Offset: 0x11e8, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x11f0, Size: 1]
	int NumPhases;//[Offset: 0x11f8, Size: 1]
	float PhaseTime;//[Offset: 0x11fc, Size: 1]
	float PreviewTime;//[Offset: 0x1200, Size: 1]
	int NumCompletePhases;//[Offset: 0x1204, Size: 1]
	interface classNone[] StagedPOI;//[Offset: 0x1208, Size: 1]
	interface classNone[] EnabledPOI;//[Offset: 0x1218, Size: 1]
	int PointsToWin;//[Offset: 0x1228, Size: 1]
	float OvertimeTime;//[Offset: 0x122c, Size: 1]
	TimerHandle PreviewTimer;//[Offset: 0x1230, Size: 1]
	MulticastInlineDelegateProperty OnControlPhaseStarted;//[Size: 1]
	bool bIsCrazyKing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1248, Size: 1]
	MulticastInlineDelegateProperty OnRoundPrepareStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnMythicSpawned;//[Size: 1]
	DataTable* Mythic Table;//[Offset: 0x1270, Size: 1]
	<int,float> RoundMythicChance;//[Offset: 0x1278, Size: 1]
	int Side11;//[Offset: 0x12c8, Size: 1]
	int Side12;//[Offset: 0x12cc, Size: 1]
	int NumCrates;//[Offset: 0x12d0, Size: 1]
	int EliminationScoreToAdd;//[Offset: 0x12d4, Size: 1]
	float MythicActivationDelay;//[Offset: 0x12d8, Size: 1]
	DataTable* Mythic Table2;//[Offset: 0x12e0, Size: 1]
	bool Spawn Mythic Crates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e8, Size: 1]
	void BindArmorCrateEvent(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_Armor_LootCrate_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_Armor_LootCrate_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void BindRocketCrateEvent(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_Rocket_LootCrate_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_Rocket_LootCrate_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void Set Up Mythic Crates2(float Respawn Time, bool SpawnedMythic, byte CallFunc_GetRoundNumber_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, float CallFunc_RandomFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x2cbecb0
	void InitMythicCrateLoot2(int side, int Num 2 Spawn, float Respawn Time, KSLootCrate*[] TeamMythicCrates, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, KSLootCrate* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, KSLootCrate*[] CallFunc_GetCratesForSide_Crates);// 0x2cbecb0
	void Set Up Mythic Crates(float Respawn Time, bool SpawnedMythic, float CallFunc_RandomFloat_ReturnValue, byte CallFunc_GetRoundNumber_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, float CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x2cbecb0
	void InitMythicCrateLoot(int side, int Num 2 Spawn, float Respawn Time, KSLootCrate*[] TeamMythicCrates, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, KSLootCrate* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, KSLootCrate*[] CallFunc_GetCratesForSide_Crates);// 0x2cbecb0
	void GetPointOfInterestSelector(out PointOfInterestSelectionRule_C* Selection Rule, bool Temp_bool_Variable, PointOfInterestSelectionRule_C* K2Node_Select_Default);// 0x2cbecb0
	void Reset POI(int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, PointOfInterestSelectionRule_C* CallFunc_GetPointOfInterestSelector_Selection_Rule, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, interface classNone CallFunc_Array_Get_Item, interface classNone CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void Reset Teams(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState*[] CallFunc_GetTeams_ReturnValue, int CallFunc_Array_Length_ReturnValue, KSTeamState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void Change to Staged POI(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, interface classNone CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, interface classNone CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void OnGameObjectiveActive(interface classNone GameObjective, KSObjectiveCaptureInfo CallFunc_GetCaptureInfoForObjective_CaptureInfo);// 0x2cbecb0
	void Preview Next Point(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PointOfInterestSelectionRule_C* CallFunc_GetPointOfInterestSelector_Selection_Rule, interface classNone CallFunc_Array_Get_Item, interface classNone[] CallFunc_SelectPoints_SelectedPOI, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void OnFailedToStart_70E805BB41A52A0707CDFCAC9810858C(KSTeamState* LeadingTeam);// 0x2cbecb0
	void OnPhaseCompleted_70E805BB41A52A0707CDFCAC9810858C(KSTeamState* LeadingTeam);// 0x2cbecb0
	void OnFailedToStart_6DF03A624246DCAED18226923EA6E7A7(KSTeamState* LeadingTeam);// 0x2cbecb0
	void OnPhaseCompleted_6DF03A624246DCAED18226923EA6E7A7(KSTeamState* LeadingTeam);// 0x2cbecb0
	void OnFailedToStart_4AF30B2845CFA061EE410D94F79479BA(KSTeamState* LeadingTeam);// 0x2cbecb0
	void OnPhaseCompleted_4AF30B2845CFA061EE410D94F79479BA(KSTeamState* LeadingTeam);// 0x2cbecb0
	void OnFailedToStart_02794A85489D2F28CDEC7EBE4D1F2F85(KSTeamState* LeadingTeam);// 0x2cbecb0
	void OnPhaseCompleted_02794A85489D2F28CDEC7EBE4D1F2F85(KSTeamState* LeadingTeam);// 0x2cbecb0
	void OnRoundPrepare();// 0x2cbecb0
	void OnRoundStart();// 0x2cbecb0
	void StartControlPhase();// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void Try To Start Overtime Phase();// 0x2cbecb0
	void Try To Set Preview Point Timer();// 0x2cbecb0
	void Start Overtime Phase();// 0x2cbecb0
	void TryToForcePreview();// 0x2cbecb0
	void OnKSCharacterBaseDied(KSCharacterBase* InCharacter, PlayerState* CharacterPlayer, Controller* EventInstigator, class DamageType DamageType, enum HitLocationType, out const KSEventAssistants EventAssistants, Actor* DamageCauser, float DamageDealt);// 0x2cbecb0
	void RespawnRockets(BP_Red7_LootCrate_C* LootCrate);// 0x2cbecb0
	void RespawnArmor(BP_Red7_LootCrate_C* LootCrate);// 0x2cbecb0
	void RocketsLooted(KSLootCrate* Loot Crate);// 0x2cbecb0
	void ArmorLooted(KSLootCrate* Loot Crate);// 0x2cbecb0
	void ExecuteUbergraph_GameMode_KOTH_Modular(int EntryPoint, KSLootCrate* K2Node_CustomEvent_Loot_Crate, KSTeamState* K2Node_CustomEvent_LeadingTeam, delegate K2Node_CreateDelegate_OutputDelegate, KSTeamState* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, KSTeamState* K2Node_CustomEvent_LeadingTeam, KSTeamState* K2Node_CustomEvent_LeadingTeam, delegate K2Node_CreateDelegate_OutputDelegate, KSTeamState* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, KSTeamState* K2Node_CustomEvent_LeadingTeam, KSTeamState* K2Node_CustomEvent_LeadingTeam, delegate K2Node_CreateDelegate_OutputDelegate, KSTeamState* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, KSTeamState* K2Node_CustomEvent_LeadingTeam, delegate K2Node_CreateDelegate_OutputDelegate, byte CallFunc_GetRoundNumber_ReturnValue, KSTeamState* K2Node_CustomEvent_LeadingTeam, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSRuleBasedPhaseProxy* CallFunc_StartRuleBasedPhase_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Add_IntInt_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSTeamState* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Subtract_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, KSTeamState* CallFunc_Try_to_Decide_Winner_Winning_Team, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, KSRuleBasedPhaseProxy* CallFunc_StartRuleBasedPhase_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSRuleBasedPhaseProxy* CallFunc_StartRuleBasedPhase_ReturnValue, KSTeamState* K2Node_CustomEvent_LeadingTeam, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, KSRuleBasedPhaseProxy* CallFunc_StartRuleBasedPhase_ReturnValue, KSGameState_Modular* CallFunc_GetKSGameState_Modular_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, KSGameState_Modular* CallFunc_GetKSGameState_Modular_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PointOfInterestSelectionRule_C* CallFunc_GetPointOfInterestSelector_Selection_Rule, float CallFunc_Multiply_IntFloat_ReturnValue, KSCharacterBase* K2Node_Event_InCharacter, PlayerState* K2Node_Event_CharacterPlayer, Controller* K2Node_Event_EventInstigator, class DamageType K2Node_Event_DamageType, enum K2Node_Event_HitLocationType, const KSEventAssistants K2Node_Event_EventAssistants, Actor* K2Node_Event_DamageCauser, float K2Node_Event_DamageDealt, delegate K2Node_CreateDelegate_OutputDelegate, BP_Red7_LootCrate_C* K2Node_CustomEvent_LootCrate, BP_Red7_LootCrate_C* K2Node_CustomEvent_LootCrate, KSLootCrate* K2Node_CustomEvent_Loot_Crate);// 0x2cbecb0
	void OnMythicSpawned__DelegateSignature();// 0x2cbecb0
	void OnRoundPrepareStarted__DelegateSignature();// 0x2cbecb0
	void OnControlPhaseStarted__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: RandomCrateSpawnerRule_V2_C.KSBehaviorRuleComponent.KSBehaviorRuleBaseComponent.KSGameRuleComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	void GetCratesForSide(int side, out KSLootCrate*[] Crates, KSLootCrate*[] CratesToReturn, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSLootCrate*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, KSLootCrate* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_GetSideAlignment_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2cbecb0
	void ActivateCrates(out KSLootCrate*[] LootCrates, int CallFunc_Array_Length_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, KSLootCrate* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	void DisableCrates(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSLootCrate*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, KSLootCrate* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void EnableCrates(int side, int Num, out KSLootCrate*[] EnabledCrates, KSLootCrate*[] CratesToReturn, KSLootCrate*[] Crates, int CallFunc_Subtract_IntInt_ReturnValue, KSLootCrate*[] CallFunc_GetCratesForSide_Crates, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, KSLootCrate* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void ResetCrates(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSLootCrate*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, KSLootCrate* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void OnActivated(ActorComponent* Component, bool bReset);// 0x2cbecb0
	void ReceiveEndPlay(byte EndPlayReason);// 0x2cbecb0
	void OnDeactivated(ActorComponent* Component);// 0x2cbecb0
	void ExecuteUbergraph_RandomCrateSpawnerRule_V2(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, ActorComponent* K2Node_CustomEvent_Component, bool K2Node_CustomEvent_bReset, byte K2Node_Event_EndPlayReason, delegate K2Node_CreateDelegate_OutputDelegate, ActorComponent* K2Node_CustomEvent_Component, KSLootCrate*[] CallFunc_EnableCrates_EnabledCrates);// 0x2cbecb0

--------------------------------
Class: KSBehaviorRuleComponent.KSBehaviorRuleBaseComponent.KSGameRuleComponent.ActorComponent.Object
	void ClearBehaviorChange();// 0x2635970
	void ApplyBehaviorChange();// 0x2635680

--------------------------------
Class: KSBehaviorRuleBaseComponent.KSGameRuleComponent.ActorComponent.Object
	void HandleTeamSidesFlipped();// 0x2cbecb0

--------------------------------
Class: KSLimitDeployablesRuleComponent.KSGameRuleComponent.ActorComponent.Object
	uint32 LimitThreshold;//[Offset: 0xb0, Size: 1]
	bool bLimitPerAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 1]
	void OnDeployed(Actor* DeployableActor);// 0x26e71b0

--------------------------------
Class: BaseSpawnSelectorComponent_C.KSSpawnSelectorComponent.ActorComponent.Object
	float Game Spawn Selector Tier Tolerance;//[Offset: 0x188, Size: 1]
	float Game Spawn Selector Tier Min Score;//[Offset: 0x18c, Size: 1]
	float Friendly Player Proximity Outer Radius;//[Offset: 0x190, Size: 1]
	float Friendly Player Proximity Inner Radius;//[Offset: 0x194, Size: 1]
	float Friendly Player Proximity Multiplier;//[Offset: 0x198, Size: 1]
	float Friendly Player Spawn Outer Radius;//[Offset: 0x19c, Size: 1]
	float Friendly Player Spawn Inner Radius;//[Offset: 0x1a0, Size: 1]
	float Friendly Player Spawn Multiplier;//[Offset: 0x1a4, Size: 1]
	float Friendly Player Spawn Duration;//[Offset: 0x1a8, Size: 1]
	float Objective Proximity Outer Radius;//[Offset: 0x1ac, Size: 1]
	float Objective Proximity Inner Radius;//[Offset: 0x1b0, Size: 1]
	float Objective Proximity Multiplier;//[Offset: 0x1b4, Size: 1]
	bool Friendly Player Spawn Decay Score;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 1]
	float Self Player Death Outer Radius;//[Offset: 0x1bc, Size: 1]
	float Self Player Death Inner Radius;//[Offset: 0x1c0, Size: 1]
	float Self Player Death Multiplier;//[Offset: 0x1c4, Size: 1]
	float Self Player Death Duration;//[Offset: 0x1c8, Size: 1]
	bool Self Player Death Decay Score;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	float Friendly Player Death Outer Radius;//[Offset: 0x1d0, Size: 1]
	float Friendly Player Death Inner Radius;//[Offset: 0x1d4, Size: 1]
	float Friendly Player Death Multiplier;//[Offset: 0x1d8, Size: 1]
	float Friendly Player Death Duration;//[Offset: 0x1dc, Size: 1]
	bool Friendly Player Death Decay Score;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	float Enemy Player Proximity Outer Radius;//[Offset: 0x1e4, Size: 1]
	float Enemy Player Proximity Inner Radius;//[Offset: 0x1e8, Size: 1]
	float Enemy Player Proximity Multiplier;//[Offset: 0x1ec, Size: 1]
	float Enemy Player Spawn Outer Radius;//[Offset: 0x1f0, Size: 1]
	float Enemy Player Spawn Inner Radius;//[Offset: 0x1f4, Size: 1]
	float Enemy Player Spawn Multiplier;//[Offset: 0x1f8, Size: 1]
	float Enemy Player Spawn Duration;//[Offset: 0x1fc, Size: 1]
	bool Enemy Player Spawn Decay Score;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	bool Friendly Player Proximity Average Score;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x201, Size: 1]
	bool Enemy Player Proximity Average Score;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x202, Size: 1]
	float Null Team Score;//[Offset: 0x204, Size: 1]
	float Enemy Player Proximity Flip Radius;//[Offset: 0x208, Size: 1]
	void Construct Enemy Player Proximity Flip Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_PlayerProximity* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Make Enemy Proximity Flip Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Enemy_Player_Proximity_Flip_Rule_Spawn_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void Make Enemy Proximity Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Enemy_Player_Proximity_Rule_Spawn_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void InitSideRoot(out KSSpawnSelectorTreeNode InSideRoot, KSSpawnSelectorTreeNode CallFunc_Make_Side_Node_Node);// 0x2cbecb0
	void InitGameRoot(out KSSpawnSelectorTreeNode InGameRoot, KSSpawnSelectorTreeNode CallFunc_Make_Game_Node_Node);// 0x2cbecb0
	void InitFlipRoot(out KSSpawnSelectorTreeNode InFlipRoot, KSSpawnSelectorTreeNode CallFunc_Make_Enemy_Proximity_Flip_Node_Node);// 0x2cbecb0
	void InitBaseRoot(out KSSpawnSelectorTreeNode InBaseRoot, KSSpawnSelectorTreeNode CallFunc_Make_Initial_Node_Node, KSSpawnSelectorTreeNode CallFunc_Make_Respawn_Node_Node, KSSpawnSelectorTierBranch_InitialRespawn_C* CallFunc_Create_Initial_vs_Respawn_Branch_ReturnValue, KSSpawnSelectorTreeNode CallFunc_Make_Blocked_Node_Node, KSSpawnSelectorTierBranch* CallFunc_Create_Single_Branch_ReturnValue, KSSpawnSelectorTreeNode CallFunc_Make_Bot_Node_Node);// 0x2cbecb0
	void Make Default Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void Make Side Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Side_Rule_Spawn_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void Make Game Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Enemy_Player_Spawn_Proximity_Rule_Spawn_Rule, KSSpawnRule* CallFunc_Construct_Friendly_Player_Death_Proximity_Rule_Spawn_Rule, KSSpawnRule* CallFunc_Construct_Enemy_Player_Spawn_Proximity_Rule_Spawn_Rule, KSSpawnRule* CallFunc_Construct_Friendly_Player_Spawn_Proximity_Rule_Spawn_Rule, KSSpawnRule* CallFunc_Construct_Objective_Proximity_Rule_Spawn_Rule, KSSpawnRule* CallFunc_Construct_Enemy_Player_Proximity_Rule_Spawn_Rule, KSSpawnRule* CallFunc_Construct_Friendly_Player_Proximity_Rule_Spawn_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void Make Respawn Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Respawn_Rule_Spawn_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void Make Initial Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Initial_Rule_Spawn_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	KSSpawnSelectorTierBranch_InitialRespawn_C* Create Initial vs Respawn Branch(KSSpawnSelectorTreeNode Respawn Branch, KSSpawnSelectorTreeNode Initial Branch, bool Does Handle Failure, KSSpawnSelectorTreeNode Failure Branch, FName Name, KSSpawnSelectorTierBranch_InitialRespawn_C* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Make Bot Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Bot_Rule_Spawn_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	KSSpawnSelectorTierBranch* Create Single Branch(KSSpawnSelectorTreeNode Normal Branch, bool Does Handle Failure, KSSpawnSelectorTreeNode Failure Branch, FName Branch Name, KSSpawnSelectorTierBranch* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Make PIE Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_PIE_Rule_Spawn_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void Make Occlusion Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Occlusion_Rule_Rule, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void Make Blocked Node(KSSpawnSelectorTierBranch* Branch, out KSSpawnSelectorTreeNode Node, KSSpawnRule* CallFunc_Construct_Vacant_Rule_NewParam, KSSpawnSelectorTierRule K2Node_MakeStruct_KSSpawnSelectorTierRule, KSSpawnSelectorTierRule[] K2Node_MakeArray_Array, KSSpawnSelectorTier K2Node_MakeStruct_KSSpawnSelectorTier, KSSpawnSelectorTreeNode K2Node_MakeStruct_KSSpawnSelectorTreeNode);// 0x2cbecb0
	void Construct Bot Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_Bot* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Enemy Player Spawn Proximity Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_PlayerSpawnEventProximity_C* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Occlusion Rule(out KSSpawnRule* Rule, const FName Temp_name_Variable, KSSpawnRule_Occlusion* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Vacant Rule(out KSSpawnRule* NewParam, const FName Temp_name_Variable, KSSpawnRule_Vacant* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Side Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_Side* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Respawn Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_Respawn* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Initial Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_Initial* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct PIE Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_PIE* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Friendly Player Death Proximity Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_PlayerDeathEventProximity_C* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Self Player Death Proximity Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_PlayerDeathEventProximity_C* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Friendly Player Spawn Proximity Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_PlayerSpawnEventProximity_C* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Objective Proximity Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_ObjectiveProximity* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Enemy Player Proximity Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_PlayerProximity* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0
	void Construct Friendly Player Proximity Rule(out KSSpawnRule* Spawn Rule, const FName Temp_name_Variable, KSSpawnRule_PlayerProximity* CallFunc_SpawnObject_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSSpawnRule_PlayerProximity.KSSpawnRule_Proximity.KSSpawnRule.Object
	bool bConsiderFriendlies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bConsiderEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool bUseAverageScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]

--------------------------------
Class: KSSpawnRule_Proximity.KSSpawnRule.Object
	float OuterRadius;//[Offset: 0x40, Size: 1]
	float InnerRadius;//[Offset: 0x44, Size: 1]
	float GetScoreForDistance(out const Vector To, out const Vector From);// 0x2792180

--------------------------------
Class: KSSpawnSelectorTierBranch_InitialRespawn_C.KSSpawnSelectorTierBranch.KSSpawnRule.Object
	KSSpawnSelectorTreeNode Respawn Branch;//[Offset: 0x98, Size: 1]
	KSSpawnSelectorTreeNode SelectSpawnSelectorTreeNode(const Controller* Controller, out const PlayerStart*[] SpawnPoints, bool Temp_bool_Variable, KSGameMode* CallFunc_GetKSGameMode_ReturnValue, bool CallFunc_UseInitialSpawnPoint_ReturnValue, KSSpawnSelectorTreeNode K2Node_Select_Default);// 0x2cbecb0
	void GetBranches(out KSSpawnSelectorTreeNode[] OutBranches, KSSpawnSelectorTreeNode[] CallFunc_GetBranches_OutBranches, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSSpawnRule_Bot.KSSpawnRule.Object

--------------------------------
Class: KSSpawnRule_PlayerSpawnEventProximity_C.KSSpawnRule_PlayerEventProximity.KSSpawnRule_Proximity.KSSpawnRule.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x60, Size: 1]
	void BindToEvent();// 0x2cbecb0
	void On Player Spawn(KSCharacterBase* NewCharacter);// 0x2cbecb0
	void ExecuteUbergraph_KSSpawnRule_PlayerSpawnEventProximity(int EntryPoint, KSCharacterBase* K2Node_CustomEvent_NewCharacter, Controller* CallFunc_GetController_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: KSSpawnRule_PlayerEventProximity.KSSpawnRule_Proximity.KSSpawnRule.Object
	float RecordDuration;//[Offset: 0x48, Size: 1]
	bool bScoreDecaysWithTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bConsidersFriendlies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bConsidersEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	bool bConsidersSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f, Size: 1]
	void OnPlayerEventRecordExpire(KSPlayerEventRecord KSPlayerEventRecord);// 0x2792860
	void OnPlayerEvent(Controller* Controller);// 0x27927e0
	void BindToEvent();// 0x2791ca0

--------------------------------
Class: KSPlayerEventRecord
	int PlayerId;//[Offset: 0x0, Size: 1]
	int PlayerSide;//[Offset: 0x4, Size: 1]
	Vector EventLocation;//[Offset: 0x8, Size: 1]
	float Timestamp;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSSpawnRule_Occlusion.KSSpawnRule.Object
	bool bConsiderFriendlies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bConsiderEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bUseAverageScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	float FallbackLOSScore;//[Offset: 0x44, Size: 1]

--------------------------------
Class: KSSpawnRule_Vacant.KSSpawnRule.Object
	float OccupiedByPawnScore;//[Offset: 0x40, Size: 1]
	float RequiresAdjustmentScore;//[Offset: 0x44, Size: 1]

--------------------------------
Class: KSSpawnRule_Side.KSSpawnRule.Object
	float NullTeamScore;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSSpawnRule_Respawn.KSSpawnRule.Object

--------------------------------
Class: KSSpawnRule_Initial.KSSpawnRule.Object

--------------------------------
Class: KSSpawnRule_PIE.KSSpawnRule.Object

--------------------------------
Class: KSSpawnRule_PlayerDeathEventProximity_C.KSSpawnRule_PlayerEventProximity.KSSpawnRule_Proximity.KSSpawnRule.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x60, Size: 1]
	void BindToEvent();// 0x2cbecb0
	void On Player Death(CombatEventInfo EventInfo);// 0x2cbecb0
	void ExecuteUbergraph_KSSpawnRule_PlayerDeathEventProximity(int EntryPoint, CombatEventInfo K2Node_CustomEvent_EventInfo, Pawn* K2Node_DynamicCast_AsPawn, bool K2Node_DynamicCast_bSuccess, KSGameState* CallFunc_GetKSGameState_ReturnValue, Controller* CallFunc_GetController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSSpawnRule_ObjectiveProximity.KSSpawnRule_Proximity.KSSpawnRule.Object

--------------------------------
Class: BP_Armor_LootCrate_C.BP_Royale_LootCrate_C.BP_Red7_LootCrate_C.KSLootCrate.KSBlueprintableInteractable.Actor.Object

--------------------------------
Class: BP_Royale_LootCrate_C.BP_Red7_LootCrate_C.KSLootCrate.KSBlueprintableInteractable.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x568, Size: 1]
	bool bIsMythic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	<enum,class UserWidget> LootCrateMarkerMap;//[Offset: 0x578, Size: 1]
	Vector BlueprintInteractionPoint(Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x2cbecb0
	void Reset();// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void ExecuteUbergraph_BP_Royale_LootCrate(int EntryPoint, Vector CallFunc_K2_GetActorLocation_ReturnValue, DisplayInfo K2Node_MakeStruct_DisplayInfo, KSGameState* CallFunc_GetKSGameState_ReturnValue, int CallFunc_AddGameDisplayInfo_ReturnValue);// 0x2cbecb0

--------------------------------
Class: BP_Red7_LootCrate_C.KSLootCrate.KSBlueprintableInteractable.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x350, Size: 1]
	StaticMeshComponent* MythicCloakDistortion;//[Offset: 0x358, Size: 1]
	StaticMeshComponent* MythicBeamActive;//[Offset: 0x360, Size: 1]
	StaticMeshComponent* MythicBeam;//[Offset: 0x368, Size: 1]
	Distance_OcclusionKSAkComponent_C* MythicCrateAmbSFX;//[Offset: 0x370, Size: 1]
	Distance_OcclusionKSAkComponent_C* CrateAmbSFX;//[Offset: 0x378, Size: 1]
	SkeletalMeshComponent* SkeletalMesh;//[Offset: 0x380, Size: 1]
	bool StartingLoadout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	int TotalClips;//[Offset: 0x38c, Size: 1]
	byte LootType;//[Offset: 0x390, Size: 1]
	BP_Red7_LootCrate_C*[] ConnectedTerminals;//[Offset: 0x398, Size: 1]
	KSItem*[] SelectedItems;//[Offset: 0x3a8, Size: 1]
	KSItemDrop*[] GeneratedItems;//[Offset: 0x3b8, Size: 1]
	SlateColor[] Rarity;//[Offset: 0x3c8, Size: 1]
	WidgetComponent* WItem00;//[Offset: 0x3d8, Size: 1]
	WidgetComponent* WItem01;//[Offset: 0x3e0, Size: 1]
	WidgetComponent* WItem02;//[Offset: 0x3e8, Size: 1]
	<int,Struct_RarityChance> CrateRarityChance;//[Offset: 0x3f0, Size: 1]
	<byte,SlateColor> RarityColors;//[Offset: 0x440, Size: 1]
	<int,byte> SlotsRarity;//[Offset: 0x490, Size: 1]
	int StopCrateAmbSoundLoop;//[Offset: 0x4e0, Size: 1]
	int StopMythicCrateAmbSoundLoop;//[Offset: 0x4e4, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x4e8, Size: 1]
	MaterialInstanceDynamic*[] TrayMaterials;//[Offset: 0x4f8, Size: 1]
	bool MultiTeamGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool MultiTeamBeamVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	KSCharacter* CachedInteractingCharacter;//[Offset: 0x510, Size: 1]
	float MythicCloakTransitionProgress;//[Offset: 0x518, Size: 1]
	TimerHandle MythicCrateReadyToOpenTimerHandle;//[Offset: 0x520, Size: 1]
	bool bEditorDemoState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	MulticastInlineDelegateProperty InteractComplete;//[Size: 1]
	KSItemDrop*[] ItemsLeftToLoot;//[Offset: 0x540, Size: 1]
	MulticastInlineDelegateProperty OnLooted;//[Size: 1]
	bool MythicCloakTransitionActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	bool bCrateShouldCloak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x561, Size: 1]
	int StopMythicCrateInvisSoundLoop;//[Offset: 0x564, Size: 1]
	void UpdateCrateVFX(float DeltaSeconds, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool K2Node_Select_Default, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_FClamp_ReturnValue);// 0x2cbecb0
	bool InternalCanInteractOnPress(KSCharacter* InteractingCharacter, bool CallFunc_InternalCanInteractOnPress_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	bool InternalCanInteractOnHold(KSCharacter* InteractingCharacter, bool CallFunc_InternalCanInteractOnHold_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void SetBeamVisibility(bool MultiTeamBeamVisibility);// 0x2cbecb0
	void OnRep_MultiTeamGameMode(enum CallFunc_GetRarity_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void OnRep_MultiTeamBeamVisibility();// 0x2cbecb0
	void SetMultiTeam(bool MultiTeamGameMode);// 0x2cbecb0
	void Contains Rarity Type(enum TypeRarity, out bool bDoesContainType, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSLootItemInfo[] CallFunc_GetLootItemInfos_OutLootItemInfos, int CallFunc_Array_Length_ReturnValue, KSLootItemInfo CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2cbecb0
	bool BPIF_IsPingableRightNow();// 0x2cbecb0
	Texture2D* BPIF_GetCustomIconTexture();// 0x2cbecb0
	void UpdatePrompt(FText CallFunc_GetLabel_ReturnValue, int CallFunc_GetPrice_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	void ChangeLightColor(LightComponent* PointLight, LinearColor Color);// 0x2cbecb0
	void UpdateCrateColor(enum Rarity, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* Temp_object_Variable, MaterialInterface* K2Node_Select_Default, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue);// 0x2cbecb0
	void SetUIPanelStat();// 0x2cbecb0
	void RemoveUIPanel(int Index);// 0x2cbecb0
	void GiveAmmo(KSWeaponAsset* Object, KSCharacter* Character, int CallFunc_GetClipSize_ReturnValue, enum CallFunc_GetAmmoType_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue);// 0x2cbecb0
	void InitializeWidgets();// 0x2cbecb0
	void OnPickup(KSItemDrop* ItemDrop, KSCharacter* PickupCharacter, bool CallFunc_Array_RemoveItem_ReturnValue, KSItem* CallFunc_GetItemAsset_ReturnValue, KSWeaponAsset* K2Node_DynamicCast_AsKSWeapon_Asset, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void SetupUIPanelPosition();// 0x2cbecb0
	void Spawn Loot(FName Temp_name_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FName Temp_name_Variable, FName Temp_name_Variable, KSItem*[] CallFunc_GetItemsToSpawn_OutItemsToSpawn, DropItemParameters K2Node_MakeStruct_DropItemParameters, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, FName K2Node_Select_Default, Transform CallFunc_GetSocketTransform_ReturnValue, KSItem* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, KSItemDrop* CallFunc_CreateDrop_ReturnValue, FString CallFunc_GetDisplayName_ReturnValue, bool CallFunc_IsSimulatingPhysics_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_BoolToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0
	void ItemSelected(KSItemDrop* InputPin, LightComponent* Temp_object_Variable, int CallFunc_Array_Find_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, LightComponent* Temp_object_Variable, int Temp_int_Array_Index_Variable, LightComponent* Temp_object_Variable, KSItemDrop* CallFunc_Array_Get_Item, LightComponent* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	void UserConstructionScript(bool CallFunc_IsWithEditor_ReturnValue);// 0x2cbecb0
	void PlayCrateAmbSound();// 0x2cbecb0
	void StopCrateAmbSound();// 0x2cbecb0
	void PlayMythicCrateAmbSound();// 0x2cbecb0
	void StopMythicCrateAmbSound();// 0x2cbecb0
	void PlayMythicCrateUnCloakSound();// 0x2cbecb0
	void PlayMythicCrateTransparentLoopSound();// 0x2cbecb0
	void StopMythicCrateTransparentLoopSound();// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void OpenCrateTop(bool Open);// 0x2cbecb0
	void BlueprintInteractionStarted(KSCharacter* InteractingCharacter, float InDuration);// 0x2cbecb0
	void CloseScreen(bool Interrupted);// 0x2cbecb0
	void CrateAnimCompleted();// 0x2cbecb0
	void OnLootCrateInteractionComplete(KSCharacter* InteractingCharacter, enum Result);// 0x2cbecb0
	void OnOpenStatusChanged(bool bOpen);// 0x2cbecb0
	void OnLootCrateInfoChanged(KSLootCrateInfo Info);// 0x2cbecb0
	void OnLootItemInfosChanged(out const KSLootItemInfo[] Infos);// 0x2cbecb0
	void OnEnabledStatusChanged(bool bEnabled);// 0x2cbecb0
	void Reset();// 0x2cbecb0
	void Interacting Players Changed(out const Actor*[] HoveringInteractors);// 0x2cbecb0
	void MythicCrateReadyToOpen();// 0x2cbecb0
	void ReceiveTick(float DeltaSeconds);// 0x2cbecb0
	void OnActiveStatusChanged(bool bActive);// 0x2cbecb0
	void EvaluateTransparentAudio();// 0x2cbecb0
	void ExecuteUbergraph_BP_Red7_LootCrate(int EntryPoint, const FName Temp_name_Variable, const FName Temp_name_Variable, const FName Temp_name_Variable, const FName Temp_name_Variable, const FName Temp_name_Variable, const FName Temp_name_Variable, int Temp_int_Array_Index_Variable, const FName Temp_name_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const FName Temp_name_Variable, const FName Temp_name_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_HasAuthority_ReturnValue, int CallFunc_AddLoopingEvent_ReturnValue, int CallFunc_AddLoopingEvent_ReturnValue, int CallFunc_AddLoopingEvent_ReturnValue, bool K2Node_CustomEvent_Open, KSItemDrop* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, const FName Temp_name_Variable, KSCharacter* K2Node_Event_InteractingCharacter, float K2Node_Event_InDuration, bool K2Node_CustomEvent_Interrupted, KSCharacter* K2Node_Event_InteractingCharacter, enum K2Node_Event_Result, bool K2Node_Event_bOpen, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue, KSLootCrateInfo K2Node_Event_Info, bool CallFunc_IsOpen_ReturnValue, const KSLootItemInfo[] K2Node_Event_Infos, KSLootItemInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, LinearColor CallFunc_Conv_ColorToLinearColor_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, bool K2Node_Event_bEnabled, const FName Temp_name_Variable, enum CallFunc_GetRarity_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, enum CallFunc_GetRarity_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, const FName Temp_name_Variable, GunCrate_Royale_ABP_C* K2Node_DynamicCast_AsGun_Crate_Royale_ABP, bool K2Node_DynamicCast_bSuccess, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, GunCrate_Royale_ABP_C* K2Node_DynamicCast_AsGun_Crate_Royale_ABP, bool K2Node_DynamicCast_bSuccess, KSItemDrop* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, MaterialInstanceDynamic* CallFunc_Array_Get_Item, GunCrate_Royale_ABP_C* K2Node_DynamicCast_AsGun_Crate_Royale_ABP, bool K2Node_DynamicCast_bSuccess, Vector Temp_struct_Variable, bool CallFunc_HasAuthority_ReturnValue, const Actor*[] K2Node_CustomEvent_HoveringInteractors, MaterialInterface* CallFunc_GetMaterial_ReturnValue, int CallFunc_Array_Length_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool Temp_bool_Variable, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, GunCrate_Royale_ABP_C* K2Node_DynamicCast_AsGun_Crate_Royale_ABP, bool K2Node_DynamicCast_bSuccess, Vector K2Node_Select_Default, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, const FName Temp_name_Variable, LinearColor K2Node_MakeStruct_LinearColor, const FName Temp_name_Variable, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_GetPrice_ReturnValue, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue, bool CallFunc_SpendCash_ReturnValue, int CallFunc_GetPrice_ReturnValue, bool CallFunc_SpendCash_ReturnValue, bool CallFunc_Contains_Rarity_Type_bDoesContainType, bool CallFunc_Contains_Rarity_Type_bDoesContainType, bool CallFunc_BooleanOR_ReturnValue, const FName Temp_name_Variable, bool CallFunc_Contains_Rarity_Type_bDoesContainType, bool CallFunc_Contains_Rarity_Type_bDoesContainType, bool CallFunc_BooleanOR_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, GunCrate_Royale_ABP_C* K2Node_DynamicCast_AsGun_Crate_Royale_ABP, bool K2Node_DynamicCast_bSuccess, float K2Node_Event_DeltaSeconds, bool K2Node_Event_bActive, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_SelectFloat_ReturnValue, int Temp_int_Variable, const FName K2Node_Select_Default, enum CallFunc_GetRarity_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Variable, bool K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsActive_ReturnValue);// 0x2cbecb0
	void OnLooted__DelegateSignature(KSLootCrate* Loot Crate);// 0x2cbecb0
	void InteractComplete__DelegateSignature(BP_Red7_LootCrate_C* CrateInteractComplete);// 0x2cbecb0

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 1]
	byte ArgumentValueType;//[Offset: 0x10, Size: 1]
	FText ArgumentValue;//[Offset: 0x18, Size: 1]
	int ArgumentValueInt;//[Offset: 0x30, Size: 1]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 1]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 1]

--------------------------------
Class: Distance_OcclusionKSAkComponent_C.KSAkAmbientComponent.KSAkComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object

--------------------------------
Class: KSAkAmbientComponent.KSAkComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bUseWidgetPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	bool bPrimePoolOnFirstUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x459, Size: 1]
	int MaxPoolSize;//[Offset: 0x45c, Size: 1]
	enum Space;//[Offset: 0x460, Size: 1]
	enum TimingPolicy;//[Offset: 0x461, Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x468, Size: 1]
	IntPoint DrawSize;//[Offset: 0x470, Size: 1]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479, Size: 1]
	float RedrawTime;//[Offset: 0x47c, Size: 1]
	IntPoint CurrentDrawSize;//[Offset: 0x488, Size: 1]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	Vector2D Pivot;//[Offset: 0x494, Size: 1]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d, Size: 1]
	enum WindowVisibility;//[Offset: 0x49e, Size: 1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49f, Size: 1]
	bool bApplyColorDeficiencyCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x4a8, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x4b0, Size: 1]
	LinearColor TintColorAndOpacity;//[Offset: 0x4c0, Size: 1]
	float OpacityFromTexture;//[Offset: 0x4d0, Size: 1]
	enum BlendMode;//[Offset: 0x4d4, Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d5, Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d6, Size: 1]
	UserWidget* Widget;//[Offset: 0x4d8, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x500, Size: 1]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x508, Size: 1]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x510, Size: 1]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x518, Size: 1]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x520, Size: 1]
	MaterialInterface* MaskedMaterial;//[Offset: 0x528, Size: 1]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x530, Size: 1]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x538, Size: 1]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x540, Size: 1]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	FName SharedLayerName;//[Offset: 0x54c, Size: 1]
	int LayerZOrder;//[Offset: 0x554, Size: 1]
	enum GeometryMode;//[Offset: 0x558, Size: 1]
	float CylinderArcAngle;//[Offset: 0x55c, Size: 1]
	void SetWindowVisibility(enum InVisibility);// 0x3b7f890
	void SetWindowFocusable(bool bInWindowFocusable);// 0x3b7f800
	void SetWidgetSpace(enum NewSpace);// 0x3b7f780
	void SetWidget(UserWidget* Widget);// 0x3b7f6f0
	void SetTwoSided(const bool bWantTwoSided);// 0x3b7f660
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x3b7f5e0
	void SetTickWhenOffscreen(const bool bWantTickWhenOffscreen);// 0x3b7f560
	void SetRedrawTime(float InRedrawTime);// 0x3b7f4e0
	void SetPivot(out const Vector2D InPivot);// 0x3b7f450
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x3b7f3d0
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x3b7f340
	void SetGeometryMode(enum InGeometryMode);// 0x3b7f2c0
	void SetDrawSize(Vector2D Size);// 0x3b7f1c0
	void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);// 0x3b7f140
	void SetCylinderArcAngle(const float InCylinderArcAngle);// 0x3b7f0c0
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x3b7ef80
	void RequestRedraw();// 0x1f12300
	enum GetWindowVisiblility();// 0x3b7e6c0
	bool GetWindowFocusable();// 0x3b7e6a0
	enum GetWidgetSpace();// 0x3b7e680
	UserWidget* GetUserWidgetObject();// 0x3b7e470
	bool GetTwoSided();// 0x3b7e450
	bool GetTickWhenOffscreen();// 0x3b7e430
	TextureRenderTarget2D* GetRenderTarget();// 0x3b7e400
	float GetRedrawTime();// 0x3b7e3e0
	Vector2D GetPivot();// 0x3b7e2f0
	LocalPlayer* GetOwnerPlayer();// 0x3b7e2c0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x3b7e0a0
	bool GetManuallyRedraw();// 0x3b7e080
	enum GetGeometryMode();// 0x2932910
	Vector2D GetDrawSize();// 0x3b7df90
	bool GetDrawAtDesiredSize();// 0x3b7df70
	float GetCylinderArcAngle();// 0x3b7df50
	Vector2D GetCurrentDrawSize();// 0x3b7df10

--------------------------------
Class: GunCrate_Royale_ABP_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 1]
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x278, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2b8, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2f0, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x328, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x360, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x398, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x3d0, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x408, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x440, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x478, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x4b0, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x4e8, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x570, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5b0, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x638, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x678, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x700, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x740, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x7c8, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x808, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x890, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x8d0, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x958, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x998, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0xa20, Size: 1]
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0xa60, Size: 1]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xb20, Size: 1]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xc38, Size: 1]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0xd50, Size: 1]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0xe68, Size: 1]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0xe98, Size: 1]
	float CrateOpenSpeedMultiplier;//[Offset: 0xec8, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecc, Size: 1]
	bool bPlayLongerOpenAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecd, Size: 1]
	bool bPlayerNearby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xece, Size: 1]
	bool bTray1Vacant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xecf, Size: 1]
	bool bTray2Vacant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed0, Size: 1]
	bool bTray3Vacant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed1, Size: 1]
	bool bEditorDemoState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed2, Size: 1]
	void AnimGraph(out PoseLink AnimGraph);// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_TransitionResult_AAB50CDE4FE4DD42289636B824621F3B();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_TransitionResult_CB250DBC4443FE3191C74D9DA6BCB505();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_TransitionResult_B064D23045E6C06252A2F2AA296450B1();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_TransitionResult_3D6B10E2401FF32E2C42F2B94F77BCBB();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_TransitionResult_572DBF5947824392C8F97B9F6EF1C672();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_ModifyBone_C253811D418971A7094BB9BC5F2BDACB();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_ModifyBone_F4A667E2446EF38B8F0D45A5F1BB105F();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_ModifyBone_62819C24462FD58BC8944884EBEA775B();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GunCrate_Royale_ABP_AnimGraphNode_TransitionResult_D5C11FE1404439B571D029B120F7E6AA();// 0x2cbecb0
	void Open Crate(bool Partial Open Only);// 0x2cbecb0
	void Close Crate();// 0x2cbecb0
	void Update Interact Status(bool Player Is Nearby);// 0x2cbecb0
	void AnimNotify_DeviceOpened();// 0x2cbecb0
	void BlueprintInitializeAnimation();// 0x2cbecb0
	void BeginPlay();// 0x2cbecb0
	void ExecuteUbergraph_GunCrate_Royale_ABP(int EntryPoint, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanNOR_ReturnValue, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool K2Node_CustomEvent_Partial_Open_Only, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_CustomEvent_Player_Is_Nearby, Actor* CallFunc_GetOwningActor_ReturnValue, BP_Red7_LootCrate_C* K2Node_DynamicCast_AsBP_Red_7_Loot_Crate, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwningActor_ReturnValue, bool CallFunc_IsWithEditor_ReturnValue, BP_Red7_LootCrate_C* K2Node_DynamicCast_AsBP_Red_7_Loot_Crate, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0

--------------------------------
Class: PoseLink.PoseLinkBase

--------------------------------
Class: PoseLinkBase
	int LinkID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimNode_Root.AnimNode_Base
	PoseLink Result;//[Offset: 0x20, Size: 1]
	FName Name;//[Offset: 0x30, Size: 1]
	FName Group;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AnimNode_Base
	bool bDeferOnInitializeAnimInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNode_TransitionResult.AnimNode_Base
	bool bCanEnterTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: AnimNode_SequencePlayer.AnimNode_AssetPlayerBase.AnimNode_Base
	AnimSequenceBase* Sequence;//[Offset: 0x40, Size: 1]
	float PlayRateBasis;//[Offset: 0x48, Size: 1]
	float PlayRate;//[Offset: 0x4c, Size: 1]
	InputScaleBiasClamp PlayRateScaleBiasClamp;//[Offset: 0x50, Size: 1]
	float StartPosition;//[Offset: 0x80, Size: 1]
	bool bLoopAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]

--------------------------------
Class: AnimNode_AssetPlayerBase.AnimNode_Base
	int GroupIndex;//[Offset: 0x20, Size: 1]
	byte GroupRole;//[Offset: 0x24, Size: 1]
	bool bIgnoreForRelevancyTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	float BlendWeight;//[Offset: 0x28, Size: 1]
	float InternalTimeAccumulator;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: InputScaleBiasClamp
	bool bMapRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bClampResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bInterpResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	InputRange InRange;//[Offset: 0x4, Size: 1]
	InputRange OutRange;//[Offset: 0xc, Size: 1]
	float Scale;//[Offset: 0x14, Size: 1]
	float Bias;//[Offset: 0x18, Size: 1]
	float ClampMin;//[Offset: 0x1c, Size: 1]
	float ClampMax;//[Offset: 0x20, Size: 1]
	float InterpSpeedIncreasing;//[Offset: 0x24, Size: 1]
	float InterpSpeedDecreasing;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputRange
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: AnimNode_StateResult.AnimNode_Root.AnimNode_Base

--------------------------------
Class: AnimNode_StateMachine.AnimNode_Base
	int StateMachineIndexInClass;//[Offset: 0x20, Size: 1]
	int MaxTransitionsPerFrame;//[Offset: 0x24, Size: 1]
	bool bSkipFirstUpdateTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bReinitializeOnBecomingRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: AnimNode_ModifyBone.AnimNode_SkeletalControlBase.AnimNode_Base
	BoneReference BoneToModify;//[Offset: 0xd8, Size: 1]
	Vector Translation;//[Offset: 0xe8, Size: 1]
	Rotator Rotation;//[Offset: 0xf4, Size: 1]
	Vector Scale;//[Offset: 0x100, Size: 1]
	byte TranslationMode;//[Offset: 0x10c, Size: 1]
	byte RotationMode;//[Offset: 0x10d, Size: 1]
	byte ScaleMode;//[Offset: 0x10e, Size: 1]
	byte TranslationSpace;//[Offset: 0x10f, Size: 1]
	byte RotationSpace;//[Offset: 0x110, Size: 1]
	byte ScaleSpace;//[Offset: 0x111, Size: 1]

--------------------------------
Class: AnimNode_SkeletalControlBase.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x20, Size: 1]
	int LODThreshold;//[Offset: 0x30, Size: 1]
	float ActualAlpha;//[Offset: 0x34, Size: 1]
	enum AlphaInputType;//[Offset: 0x38, Size: 1]
	bool bAlphaBoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	float Alpha;//[Offset: 0x3c, Size: 1]
	InputScaleBias AlphaScaleBias;//[Offset: 0x40, Size: 1]
	InputAlphaBoolBlend AlphaBoolBlend;//[Offset: 0x48, Size: 1]
	FName AlphaCurveName;//[Offset: 0x90, Size: 1]
	InputScaleBiasClamp AlphaScaleBiasClamp;//[Offset: 0x98, Size: 1]

--------------------------------
Class: ComponentSpacePoseLink.PoseLinkBase

--------------------------------
Class: InputScaleBias
	float Scale;//[Offset: 0x0, Size: 1]
	float Bias;//[Offset: 0x4, Size: 1]

--------------------------------
Class: InputAlphaBoolBlend
	float BlendInTime;//[Offset: 0x0, Size: 1]
	float BlendOutTime;//[Offset: 0x4, Size: 1]
	enum BlendOption;//[Offset: 0x8, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x10, Size: 1]
	AlphaBlend AlphaBlend;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AnimNode_ConvertComponentToLocalSpace.AnimNode_Base
	ComponentSpacePoseLink ComponentPose;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AnimNode_ConvertLocalToComponentSpace.AnimNode_Base
	PoseLink LocalPose;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Struct_RarityChance
	<int,enum> ItemInSlot_11_B159B75A4AC5106D51B6E78CECCE121D;//[Offset: 0x0, Size: 1]

--------------------------------
Class: BP_Rocket_LootCrate_C.BP_Royale_LootCrate_C.BP_Red7_LootCrate_C.KSLootCrate.KSBlueprintableInteractable.Actor.Object
	RandomCrateSpawnerRule_V2_C* RandomCrateSpawnerRule_V2;//[Offset: 0x5c8, Size: 1]
	MulticastInlineDelegateProperty OnCrateOpened;//[Size: 1]
	void OnCrateOpened__DelegateSignature(BP_Rocket_LootCrate_C* Crate);// 0x2cbecb0

--------------------------------
Class: RandomAfterInitialPointOfInterestSelectionRule_C.PointOfInterestSelectionRule_C.KSGameRuleComponent.ActorComponent.Object
	void OrderPointsOfInterest(interface classNone[] ElementsToShuffle, interface classNone FirstElement, interface classNone[] CallFunc_GetPOI_POI, int CallFunc_Array_Add_ReturnValue, interface classNone CallFunc_Array_Get_Item);// 0x2cbecb0

--------------------------------
Class: PointOfInterestSelectionRule_C.KSGameRuleComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	int CurrentIndex;//[Offset: 0xb8, Size: 1]
	int NumObjectives;//[Offset: 0xbc, Size: 1]
	interface classNone[] PointsOfInterest;//[Offset: 0xc0, Size: 1]
	interface classNone[] SelectedPointsOfInterest;//[Offset: 0xd0, Size: 1]
	bool bEnableOnSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bStageOnSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	interface classNone[] OrderedPointsOfInterest;//[Offset: 0xe8, Size: 1]
	void SelectSinglePOI(out interface classNone POI, interface classNone[] CallFunc_SelectPOI_SelectedPOI, interface classNone CallFunc_Array_Get_Item);// 0x2cbecb0
	void SelectPOI(int NumberofPOI, out interface classNone[] SelectedPOI, interface classNone[] Chosen Points of Interest, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, interface classNone CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0
	void ClearPOI(interface classNone POI, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x2cbecb0
	void SelectPoints(out interface classNone[] SelectedPOI, interface classNone[] Chosen Points of Interest, interface classNone[] CallFunc_SelectPOI_SelectedPOI);// 0x2cbecb0
	void GetPOI(out interface classNone[] POI);// 0x2cbecb0
	void OrderPointsOfInterest();// 0x2cbecb0
	void TryToEnableOnSelect();// 0x2cbecb0
	void TryToStageOnSelect();// 0x2cbecb0
	void Disable Selected POI(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, interface classNone CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void Enable Selected POI(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, interface classNone CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void Stage Selected POI(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, interface classNone CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void Shuffle Points Of Interest();// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void Restart Selection();// 0x2cbecb0
	void ReceiveEndPlay(byte EndPlayReason);// 0x2cbecb0
	void On Activated(ActorComponent* Component, bool bReset);// 0x2cbecb0
	void On Deactivated(ActorComponent* Component);// 0x2cbecb0
	void ExecuteUbergraph_PointOfInterestSelectionRule(int EntryPoint, interface classNone[] CallFunc_SelectPoints_SelectedPOI, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, byte K2Node_Event_EndPlayReason, delegate K2Node_CreateDelegate_OutputDelegate, ActorComponent* K2Node_CustomEvent_Component, bool K2Node_CustomEvent_bReset, delegate K2Node_CreateDelegate_OutputDelegate, ActorComponent* K2Node_CustomEvent_Component, interface classNone CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, interface classNone[] CallFunc_GetAllPointsOfInterest_OutPointsOfInterest);// 0x2cbecb0

--------------------------------
Class: KSDropRuleComponent.KSGameRuleComponent.ActorComponent.Object
	GameplayTagContainer WeaponSlotsToDropOnDeath;//[Offset: 0xb0, Size: 1]
	KSRandomDropEntry[] RandomDeathDropList;//[Offset: 0xd0, Size: 1]
	GameplayTagContainer WeaponSlotsToDropOnDowned;//[Offset: 0xe0, Size: 1]
	KSRandomDropEntry[] RandomDownDropList;//[Offset: 0x100, Size: 1]
	float PlayerDropLifetime;//[Offset: 0x110, Size: 1]
	float RequiredAmmoPercent;//[Offset: 0x114, Size: 1]
	bool bDropArmorOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	bool bDropCashOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x119, Size: 1]
	int PercentCashToDrop;//[Offset: 0x11c, Size: 1]
	KSCash*[] CashAssets;//[Offset: 0x120, Size: 1]
	void OnPlayerDowned(CombatEventInfo EventInfo, int ExpBonus);// 0x268d4c0
	void OnPlayerDeath(CombatEventInfo EventInfo);// 0x268d380
	float GetPlayerDropLifetime();// 0x268cfe0

--------------------------------
Class: KSRandomDropEntry
	DataTable* RandomDropTable;//[Offset: 0x0, Size: 1]
	int[] SidesToDropItems;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSCash.KSLootItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: JobSelectionPhaseRule_C.KSPhaseRuleComponent.KSGameRuleComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 1]
	bool ShouldSkipCinematicOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	float WalkInCinematicTimeOut;//[Offset: 0xf4, Size: 1]
	void CinematicWillPlay(out bool PlayingCinematic, KSGameMode_RoundGame* CallFunc_GetKSGameMode_RoundGame_ReturnValue, bool CallFunc_ShouldSkipSelectionCinematicAfterFirstRound_ReturnValue, byte CallFunc_GetRoundNumber_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2cbecb0
	void HandlePhaseStarted();// 0x2cbecb0
	void PhaseTimerExpired(FName PhaseName);// 0x2cbecb0
	void CloseTimeoutGate();// 0x2cbecb0
	void OpenTimeoutGate();// 0x2cbecb0
	void ExecuteUbergraph_JobSelectionPhaseRule(int EntryPoint, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_IsClosed_Variable, KSGameMode* CallFunc_GetKSGameMode_ReturnValue, FName K2Node_Event_PhaseName, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_CinematicWillPlay_PlayingCinematic);// 0x2cbecb0

--------------------------------
Class: KOTHOvertimeControlPhase_C.KOTHControlPhase_C.ControlPhase_C.KSPhaseRuleComponent.KSGameRuleComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x118, Size: 1]
	void PhaseTimerExpired(FName PhaseName, KSTeamState* Leading Team, KSTeamState* CallFunc_GetLeadingTeam_TeamState, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Try to Decide Winner(out KSTeamState* Winning Team, enum[] FootInPointObjectiveStates, KSTeamState* Leading Team, int Temp_int_Array_Index_Variable, enum[] K2Node_MakeArray_Array, bool CallFunc_IsValid_ReturnValue, KSTeamState* CallFunc_GetLeadingTeam_TeamState, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, interface classNone[] CallFunc_GetGameObjectives_Objectives, int CallFunc_Array_Length_ReturnValue, interface classNone CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2cbecb0
	void OnObjectiveStateChanged(interface classNone KSObjective, KSTeamState* CallFunc_Try_to_Decide_Winner_Winning_Team);// 0x2cbecb0
	void HandlePhaseStarted();// 0x2cbecb0
	void OnPhaseComplete(KSTeamState* Team);// 0x2cbecb0
	void ExecuteUbergraph_KOTHOvertimeControlPhase(int EntryPoint, KSGameState* CallFunc_GetKSGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSTeamState* K2Node_Event_Team, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTimerPriorityConfig K2Node_MakeStruct_KSTimerPriorityConfig);// 0x2cbecb0

--------------------------------
Class: KOTHControlPhase_C.ControlPhase_C.KSPhaseRuleComponent.KSGameRuleComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x110, Size: 1]
	void OnObjectiveContested(out const interface classNone GameObjective);// 0x2cbecb0
	void OnTeamGoalReached(KSTeamState* Team State);// 0x2cbecb0
	void GetLeadingTeam(out KSTeamState* TeamState, bool Temp_bool_Variable, KSTeamState*[] CallFunc_GetTeamsWithHighestIntraScore_TeamsWithHighestIntraScore, int CallFunc_GetTeamsWithHighestIntraScore_OutScore, KSTeamState* CallFunc_GetLeadingTeam_TeamState, KSTeamState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, KSTeamState* K2Node_Select_Default);// 0x2cbecb0
	void OnObjectiveExploded(out const interface classNone GameObjective, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, KSTeamState* CallFunc_GetTeamConst_ReturnValue, bool CallFunc_GiveIntraPointsToTeam_ReturnValue);// 0x2cbecb0
	void HandlePhaseStarted();// 0x2cbecb0
	void ExecuteUbergraph_KOTHControlPhase(int EntryPoint, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTimerPriorityConfig K2Node_MakeStruct_KSTimerPriorityConfig, KSTimerPriorityConfig K2Node_MakeStruct_KSTimerPriorityConfig);// 0x2cbecb0

--------------------------------
Class: ControlPhase_C.KSPhaseRuleComponent.KSGameRuleComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 1]
	float TimeToExplode;//[Offset: 0xf0, Size: 1]
	float TimeToResetOnDropped;//[Offset: 0xf4, Size: 1]
	KSObjectiveCaptureInfo ObjectiveCaptureInfo;//[Offset: 0xf8, Size: 1]
	void Handle Pending Explode(interface classNone Objective, delegate K2Node_CreateDelegate_OutputDelegate, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, KSObjectiveState K2Node_MakeStruct_KSObjectiveState);// 0x2cbecb0
	void GetLeadingTeam(out KSTeamState* TeamState);// 0x2cbecb0
	void GetTimeToExplodeForObjective(interface classNone Objective, out float TimeToExplode);// 0x2cbecb0
	void GetCaptureInfoForObjective(interface classNone Objective, out KSObjectiveCaptureInfo CaptureInfo);// 0x2cbecb0
	void OnObjectiveSpawned(out const interface classNone GameObjective, KSObjectiveCaptureInfo CallFunc_GetCaptureInfoForObjective_CaptureInfo);// 0x2cbecb0
	void OnObjectiveDropped(out const interface classNone GameObjective, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void Handle Pending Reset(interface classNone Game Objective);// 0x2cbecb0
	void OnObjectiveHeld(out const interface classNone GameObjective, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void OnObjectiveArmed(out const interface classNone GameObjective, delegate K2Node_CreateDelegate_OutputDelegate, KSTimerComponent* CallFunc_GetObjectiveTimer_ReturnValue, bool CallFunc_IsTimerActive_ReturnValue, KSObjectiveState CallFunc_GetPreviousObjectiveState_ReturnValue, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, float CallFunc_GetTimeToExplodeForObjective_TimeToExplode, bool CallFunc_NotEqual_IntInt_ReturnValue, KSObjectiveState CallFunc_GetPreviousObjectiveState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void OnObjectiveExploded(out const interface classNone GameObjective, enum CachedPreviousState, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, KSObjectiveState CallFunc_GetPreviousObjectiveState_ReturnValue, KSObjectiveState K2Node_MakeStruct_KSObjectiveState, KSObjectiveState K2Node_MakeStruct_KSObjectiveState);// 0x2cbecb0
	void OnObjectiveDisarmed(out const interface classNone GameObjective, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, KSObjectiveState K2Node_MakeStruct_KSObjectiveState);// 0x2cbecb0
	void OnTeamEliminated(KSTeamState* TeamState, KSTeamState*[] CallFunc_GetEnemyTeamsFor_ReturnValue, int Temp_int_Array_Index_Variable, KSTeamState* CallFunc_Array_Get_Item, KSTeamState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, KSTeamState* Temp_object_Variable, bool Temp_bool_Variable, KSTeamState* K2Node_Select_Default);// 0x2cbecb0
	void PhaseTimerExpired(FName PhaseName);// 0x2cbecb0
	void HandlePhaseStarted();// 0x2cbecb0
	void OnPhaseComplete(KSTeamState* Team);// 0x2cbecb0
	void ExecuteUbergraph_ControlPhase(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState* K2Node_CustomEvent_Team);// 0x2cbecb0

--------------------------------
Class: PointOfInterestSelectionRuleByID_C.PointOfInterestSelectionRule_C.KSGameRuleComponent.ActorComponent.Object
	bool bShouldSortByDescending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	void OrderPointsOfInterest(interface classNone[] CallFunc_GetPOI_POI);// 0x2cbecb0

--------------------------------
Class: ForceChimeraOpenPhase_C.KSPhaseRuleComponent.KSGameRuleComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe8, Size: 1]
	void HandlePhaseStarted();// 0x2cbecb0
	void PhaseTimerExpired(FName PhaseName);// 0x2cbecb0
	void ExecuteUbergraph_ForceChimeraOpenPhase(int EntryPoint, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, FName K2Node_Event_PhaseName, Dropship_Base_C*[] CallFunc_GetAllActorsOfClass_OutActors, Dropship_Base_C*[] CallFunc_GetAllActorsOfClass_OutActors, Dropship_Base_C* CallFunc_Array_Get_Item, Dropship_Base_C* CallFunc_Array_Get_Item, interface classNone K2Node_DynamicCast_AsBPI_Dropship, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsBPI_Dropship, bool K2Node_DynamicCast_bSuccess, interface classNone K2Node_DynamicCast_AsBPI_Dropship, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, BP_LTM_Zone_C*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, BP_LTM_Zone_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0

--------------------------------
Class: Dropship_Base_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x228, Size: 1]
	void BPI_InitializePlane();// 0x2cbecb0
	void BPI_SetupDoor();// 0x2cbecb0
	void BPI_OpenDoor();// 0x2cbecb0
	void ExecuteUbergraph_Dropship_Base(int EntryPoint);// 0x2cbecb0

--------------------------------
Class: BP_LTM_Zone_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x220, Size: 1]
	StaticMeshComponent* Cube;//[Offset: 0x228, Size: 1]
	BoxComponent* Box2;//[Offset: 0x230, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x238, Size: 1]
	PlayerShopZone_C* NewVar;//[Offset: 0x240, Size: 1]
	void ToggleCollision(bool TurnCollisionOn);// 0x2cbecb0
	void ExecuteUbergraph_BP_LTM_Zone(int EntryPoint, bool K2Node_CustomEvent_TurnCollisionOn);// 0x2cbecb0

--------------------------------
Class: PlayerShopZone_C.KSPlayerShopZone.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	BoxComponent* Box;//[Offset: 0x240, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x248, Size: 1]
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2cbecb0
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2cbecb0
	void OnCharacterPossessed(Controller* NewController);// 0x2cbecb0
	void ExecuteUbergraph_PlayerShopZone(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, bool K2Node_ComponentBoundEvent_bFromSweep, const HitResult K2Node_ComponentBoundEvent_SweepResult, PrimitiveComponent* K2Node_ComponentBoundEvent_OverlappedComponent, Actor* K2Node_ComponentBoundEvent_OtherActor, PrimitiveComponent* K2Node_ComponentBoundEvent_OtherComp, int K2Node_ComponentBoundEvent_OtherBodyIndex, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue, Controller* K2Node_CustomEvent_NewController, bool CallFunc_IsValid_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: KSPunishmentRuleComponent.KSGameRuleComponent.ActorComponent.Object
	class KSPunishmentConfig* PunishmentConfigClass;//[Offset: 0xb0, Size: 1]
	KSPunishmentConfig* PunishmentConfig;//[Offset: 0xb8, Size: 1]
	bool UseDeserterPenalty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	<int64,PlayerPunishmentTracker> PlayerPunishmentTrackers;//[Offset: 0xc8, Size: 1]
	void HandlePlayerDisconnected(Controller* QuitPlayer);// 0x27778a0

--------------------------------
Class: KSPunishmentConfig.DataAsset.Object
	PunishmentConfigEntry[] GoodBehaviorConfig;//[Offset: 0x30, Size: 1]
	BadBehaviorConfigEntry[] BadBehaviorConfig;//[Offset: 0x40, Size: 1]
	EndMatchPunishConfigEntry[] EndMatchPunishConfig;//[Offset: 0x50, Size: 1]

--------------------------------
Class: PunishmentConfigEntry
	int PunishmentLootTableId;//[Offset: 0x0, Size: 1]
	int PunishmentQuantity;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BadBehaviorConfigEntry
	enum BehaviorType;//[Offset: 0x0, Size: 1]
	int TimeRequired;//[Offset: 0x4, Size: 1]
	bool IsRepeatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool IsImmediate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool AppliesDeserterPenalty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	PunishmentConfigEntry[] Punishments;//[Offset: 0x10, Size: 1]

--------------------------------
Class: EndMatchPunishConfigEntry
	int PointsRequired;//[Offset: 0x0, Size: 1]
	bool PassThresholdOnDecrease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	PunishmentConfigEntry[] Punishments;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PlayerPunishmentTracker

--------------------------------
Class: KSShopRuleComponent.KSGameRuleComponent.ActorComponent.Object
	class KSGameShop_Global* GameShopClass;//[Offset: 0xb8, Size: 1]
	KSGameShopGlobalConfig GameShopGlobalConfig;//[Offset: 0xc0, Size: 1]
	int StartingCash;//[Offset: 0xc8, Size: 1]
	enum StartingCashRoundBonus;//[Offset: 0xcc, Size: 1]
	bool bResetShopsOnTeamSidesFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	<enum> TypesToNotResetOnTeamSidesFlipped;//[Offset: 0xd0, Size: 1]
	bool bResetShopsOnRoundPrepare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	<enum> TypesToNotResetOnRoundPrepare;//[Offset: 0x128, Size: 1]
	bool bLockUndoEachRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bAllowShopAccessWhileDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bDisableShopOnClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	bool bDisableShopOnSignificantAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b, Size: 1]
	bool bAllowUnmasteredWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c, Size: 1]
	bool bCircleGameShopEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17d, Size: 1]
	class KSPlayerShop* ShopClass;//[Offset: 0x180, Size: 1]
	<int64,KSPlayerShop*> PlayerShops;//[Offset: 0x188, Size: 1]
	KSShopPricing ShopPricing;//[Offset: 0x228, Size: 1]
	<enum> PermanentItems;//[Offset: 0x330, Size: 1]
	<enum> StartActiveItems;//[Offset: 0x380, Size: 1]
	<enum> OneTimePurchaseItems;//[Offset: 0x3d0, Size: 1]
	<enum> ExhaustibleItems;//[Offset: 0x420, Size: 1]
	<enum> RoundItems;//[Offset: 0x470, Size: 1]
	<enum,ShopItemList> PrerequisiteMap;//[Offset: 0x4c0, Size: 1]
	<enum,ShopItemList> RestrictionMap;//[Offset: 0x510, Size: 1]
	KSMaxCategoryPurchases MaxCategoryPurchases;//[Offset: 0x560, Size: 1]
	KSGlobalGambitList[] GlobalGambitList;//[Offset: 0x580, Size: 1]
	KSGlobalPerkList GlobalPerkList;//[Offset: 0x5c0, Size: 1]
	ShopOptions ShopOptions;//[Offset: 0x640, Size: 1]
	void OnGamePhaseChanged(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x278df20
	int GetStartingCash();// 0x278dea0
	KSPlayerShop* GetShopForPlayer(KSPlayerState* InPlayerState);// 0x278de10
	bool CanPlayersAccessShopWhileDead();// 0x278d280

--------------------------------
Class: KSGameShopGlobalConfig.KSGameShopConfig
	bool bAllowBuyWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bLockUndoTransactionHistoryBuyWhenDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bResetOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]

--------------------------------
Class: KSGameShopConfig
	bool bLockUndoTransactionHistoryOnRoundReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bResetOnRoundReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bResetOnTeamSidesFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bAllowUnmasteredWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: KSShopPricing
	bool bOverridePistolPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int PistolPrice;//[Offset: 0x4, Size: 1]
	bool bOverridePistolUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int PistolUpgradePrice;//[Offset: 0xc, Size: 1]
	bool bOverrideAssaultRiflePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int AssaultRiflePrice;//[Offset: 0x14, Size: 1]
	bool bOverrideAssaultRifleUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int AssaultRifleUpgradePrice;//[Offset: 0x1c, Size: 1]
	bool bOverrideDMRPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	int DMRPrice;//[Offset: 0x24, Size: 1]
	bool bOverrideDMRUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	int DMRUpgradePrice;//[Offset: 0x2c, Size: 1]
	bool bOverrideSMGPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	int SMGPrice;//[Offset: 0x34, Size: 1]
	bool bOverrideSMGUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	int SMGUpgradePrice;//[Offset: 0x3c, Size: 1]
	bool bOverrideLMGPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	int LMGPrice;//[Offset: 0x44, Size: 1]
	bool bOverrideLMGUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	int LMGUpgradePrice;//[Offset: 0x4c, Size: 1]
	bool bOverrideShotgunPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int ShotgunPrice;//[Offset: 0x54, Size: 1]
	bool bOverrideShotgunUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int ShotgunUpgradePrice;//[Offset: 0x5c, Size: 1]
	bool bOverrideSniperPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int SniperPrice;//[Offset: 0x64, Size: 1]
	bool bOverrideSniperUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	int SniperUpgradePrice;//[Offset: 0x6c, Size: 1]
	bool bOverrideMeleePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	int MeleePrice;//[Offset: 0x74, Size: 1]
	bool bOverrideMeleeUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	int MeleeUpgradePrice;//[Offset: 0x7c, Size: 1]
	bool bOverrideLethalPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	int LethalPrice;//[Offset: 0x84, Size: 1]
	bool bOverrideLethalUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	int LethalUpgradePrice;//[Offset: 0x8c, Size: 1]
	bool bOverrideUtilityPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	int UtilityPrice;//[Offset: 0x94, Size: 1]
	bool bOverrideUtilityUpgradePrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	int UtilityUpgradePrice;//[Offset: 0x9c, Size: 1]
	bool bOverrideTier1PerkPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	int Tier1PerkPrice;//[Offset: 0xa4, Size: 1]
	bool bOverrideTier2PerkPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	int Tier2PerkPrice;//[Offset: 0xac, Size: 1]
	bool bOverrideTier3PerkPrice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int Tier3PerkPrice;//[Offset: 0xb4, Size: 1]
	<KSItem*,int> OverridePricingMap;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: ShopItemList
	enum[] ShopItems;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSMaxCategoryPurchases
	int Primary;//[Offset: 0x0, Size: 1]
	int Secondary;//[Offset: 0x4, Size: 1]
	int Melee;//[Offset: 0x8, Size: 1]
	int Gadget;//[Offset: 0xc, Size: 1]
	int Perk;//[Offset: 0x10, Size: 1]
	int Gambit;//[Offset: 0x14, Size: 1]
	int GlobalPerk;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSGlobalGambitList
	KSItem* GlobalGambit1;//[Offset: 0x0, Size: 1]
	KSItem* GlobalGambit2;//[Offset: 0x8, Size: 1]
	KSItem* GlobalGambit3;//[Offset: 0x10, Size: 1]
	KSItem* GlobalGambit4;//[Offset: 0x18, Size: 1]
	KSItem* GlobalGambit5;//[Offset: 0x20, Size: 1]
	KSItem* GlobalGambit6;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSGlobalPerkList
	KSItem* GlobalPerk1;//[Offset: 0x0, Size: 1]
	KSItem* GlobalPerk2;//[Offset: 0x8, Size: 1]
	KSItem* GlobalPerk3;//[Offset: 0x10, Size: 1]
	KSItem* GlobalPerk4;//[Offset: 0x18, Size: 1]
	KSItem* GlobalPerk5;//[Offset: 0x20, Size: 1]
	KSItem* GlobalPerk6;//[Offset: 0x28, Size: 1]
	KSItem* GlobalPerk7;//[Offset: 0x30, Size: 1]
	KSItem* GlobalPerk8;//[Offset: 0x38, Size: 1]
	KSItem* GlobalPerk9;//[Offset: 0x40, Size: 1]
	KSItem* GlobalPerk10;//[Offset: 0x48, Size: 1]
	KSItem* GlobalPerk11;//[Offset: 0x50, Size: 1]
	KSItem* GlobalPerk12;//[Offset: 0x58, Size: 1]
	KSItem* GlobalPerk13;//[Offset: 0x60, Size: 1]
	KSItem* GlobalPerk14;//[Offset: 0x68, Size: 1]
	KSItem* GlobalPerk15;//[Offset: 0x70, Size: 1]
	KSItem* GlobalPerk16;//[Offset: 0x78, Size: 1]

--------------------------------
Class: KSRuleBasedPhaseProxy.KSGamePhaseProxyBase.Object
	MulticastInlineDelegateProperty OnPhaseCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnFailedToStart;//[Size: 1]
	MatchPhase MatchPhase;//[Offset: 0x5c, Size: 1]
	static KSRuleBasedPhaseProxy* StartRuleBasedPhase(Object* WorldContextObject, KSPhaseRuleComponent* Rule, float TimeSeconds, FName PhaseName, FName PhaseDescription, int PhaseId);// 0x278a7a0
	void OnCompletedWithLeadingTeam(KSTeamState* LeadingTeam);// 0x2789720
	void OnCompleted();// 0x2789700

--------------------------------
Class: KSGamePhaseProxyBase.Object
	void Activate();// 0x2601810

--------------------------------
Class: RespawnTicket_AnnouncerComponent_C.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xb0, Size: 1]
	ModularAnnouncerBase_C* Owner;//[Offset: 0xb8, Size: 1]
	<int,AkAudioEvent*> AllyRespawnAnnouncementMap;//[Offset: 0xc0, Size: 1]
	<int,AkAudioEvent*> EnemyRespawnAnnouncementMap;//[Offset: 0x110, Size: 1]
	<int,FString> MusicThresholdTicketScore;//[Offset: 0x160, Size: 1]
	void Bind to Team State Events(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState*[] CallFunc_GetTeams_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSTeamState* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void On Respawns Changed(KSTeamState* Team);// 0x2cbecb0
	void Reset Music Trigger Do Once();// 0x2cbecb0
	void OnRoundSetup(out const RoundInitState RoundInitState);// 0x2cbecb0
	void ExecuteUbergraph_RespawnTicket_AnnouncerComponent(int EntryPoint, bool Temp_bool_Has_Been_Initd_Variable, Actor* CallFunc_GetOwner_ReturnValue, KSTeamState* K2Node_CustomEvent_Team, ModularAnnouncerBase_C* K2Node_DynamicCast_AsModular_Announcer_Base, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, AkAudioEvent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, AkAudioEvent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_IsClosed_Variable, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, KSGameState_Modular* CallFunc_GetKSGameState_Modular_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const RoundInitState K2Node_CustomEvent_RoundInitState);// 0x2cbecb0

--------------------------------
Class: GameState_StrikeOut_Modular_C.KSGameState_Modular.KSGameState_RoundGame.KSGameState.PGame_GameState.GameState.GameStateBase.Info.Actor.Object
	BP_KSObjectiveComponent_C* BP_KSObjectiveComponent;//[Offset: 0x1d50, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x1d58, Size: 1]

--------------------------------
Class: BP_KSObjectiveComponent_C.KSHUDComponent_Objective.KSHUDComponent.ActorComponent.Object

--------------------------------
Class: EmoteSoundManager_C.KSEmoteMusicManager.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 1]

--------------------------------
Class: GamePlayerController_Strikeout_C.GamePlayerController_C.GamePlayerControllerNoHUD_C.KSPlayerController.PGame_PlayerController.PlayerController.Controller.Actor.Object

--------------------------------
Class: GamePlayerController_C.GamePlayerControllerNoHUD_C.KSPlayerController.PGame_PlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x1018, Size: 1]
	void ReceiveBeginPlay();// 0x2cbecb0
	void ReceiveTick(float DeltaSeconds);// 0x2cbecb0
	void ExecuteUbergraph_GamePlayerController(int EntryPoint, float K2Node_Event_DeltaSeconds);// 0x2cbecb0

--------------------------------
Class: GamePlayerControllerNoHUD_C.KSPlayerController.PGame_PlayerController.PlayerController.Controller.Actor.Object
	PlayerControllerThreatComponent_C* PlayerControllerThreatComponent;//[Offset: 0x1000, Size: 1]
	AkComponent* ControllerAkComponent;//[Offset: 0x1008, Size: 1]
	DefaultEnvironmentListener_C* DefaultEnvironmentListener;//[Offset: 0x1010, Size: 1]

--------------------------------
Class: PlayerControllerThreatComponent_C.ConfigurableThreatComponent_C.KSThreatComponent.ActorComponent.Object

--------------------------------
Class: ConfigurableThreatComponent_C.KSThreatComponent.ActorComponent.Object

--------------------------------
Class: KSThreatComponent.ActorComponent.Object
	int ThreatUpdateIndex;//[Offset: 0xb0, Size: 1]
	float CurrentThreat;//[Offset: 0xb4, Size: 1]
	float ThreatBucketValue;//[Offset: 0xb8, Size: 1]
	KSThreatComponent* OwningThreat;//[Offset: 0xc0, Size: 1]
	KSThreatComponent*[] OwnedThreats;//[Offset: 0xc8, Size: 1]
	KSCharacter* OwningCharacter;//[Offset: 0xd8, Size: 1]
	KSCharacter* LocalPlayerCharacter;//[Offset: 0xe0, Size: 1]
	float SelfThreatValue;//[Offset: 0xf8, Size: 1]
	float AllyThreatValue;//[Offset: 0xfc, Size: 1]
	float DefaultThreatValue;//[Offset: 0x100, Size: 1]
	float[] BucketValues;//[Offset: 0x108, Size: 1]
	bool bUseFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	float FocusedValue;//[Offset: 0x11c, Size: 1]
	float FocusedWeight;//[Offset: 0x120, Size: 1]
	float FocusedInnerAngle;//[Offset: 0x124, Size: 1]
	float FocusedOuterAngle;//[Offset: 0x12c, Size: 1]
	bool bUseFocusTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	float FocusTargetValue;//[Offset: 0x138, Size: 1]
	float FocusTargetWeight;//[Offset: 0x13c, Size: 1]
	float FocusTargetInnerAngle;//[Offset: 0x140, Size: 1]
	float FocusTargetOuterAngle;//[Offset: 0x148, Size: 1]
	bool bUseProximity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	float ProximityValue;//[Offset: 0x154, Size: 1]
	float ProximityWeight;//[Offset: 0x158, Size: 1]
	float ProximityInnerDistance;//[Offset: 0x15c, Size: 1]
	float ProximityOuterDistance;//[Offset: 0x160, Size: 1]
	bool bUseBehind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x164, Size: 1]
	float BehindValue;//[Offset: 0x168, Size: 1]
	float BehindWeight;//[Offset: 0x16c, Size: 1]
	float BehindInnerAngle;//[Offset: 0x170, Size: 1]
	float BehindOuterAngle;//[Offset: 0x178, Size: 1]
	bool bUseEffectiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	float EffectiveRangeValue;//[Offset: 0x184, Size: 1]
	float EffectiveRangeWeight;//[Offset: 0x188, Size: 1]
	void DebugThreatLevels(bool Show);// 0x2cbecb0

--------------------------------
Class: DefaultEnvironmentListener_C.EnvironmentListenerComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc8, Size: 1]
	FName LevelStateGroup;//[Offset: 0xd0, Size: 1]
	<FString,FName> LevelToStateGroupMap;//[Offset: 0xd8, Size: 1]
	void OnEnvironmentChanged(FName OldEnvironmentTag);// 0x2cbecb0
	void Print State(bool Print to Screen, bool Print to Log, LinearColor Text Color, float Duration);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void ExecuteUbergraph_DefaultEnvironmentListener(int EntryPoint, bool Temp_bool_Variable, FName CallFunc_GetCurrentEnvironment_ReturnValue, FName K2Node_Event_OldEnvironmentTag, bool K2Node_CustomEvent_Print_to_Screen, bool K2Node_CustomEvent_Print_to_Log, LinearColor K2Node_CustomEvent_Text_Color, float K2Node_CustomEvent_Duration, FName CallFunc_GetCurrentEnvironment_ReturnValue, FText CallFunc_Conv_NameToText_ReturnValue, FText CallFunc_Conv_NameToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_GetCurrentLevelName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FName CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, FName K2Node_Select_Default);// 0x2cbecb0

--------------------------------
Class: EnvironmentListenerComponent.ActorComponent.Object
	FName CurrentEnvironmentTag;//[Offset: 0xb0, Size: 1]
	FName StartingEnvironment;//[Offset: 0xb8, Size: 1]
	EnvironmentTrackerComponent* LastTrackerComponent;//[Offset: 0xc0, Size: 1]
	void ViewTargetEnvironmentChanged(FName OldEnvironmentTag, FName NewEnvironmentTag);// 0x25fb050
	void OnEnvironmentChanged(FName OldEnvironmentTag);// 0x2cbecb0
	FName GetCurrentEnvironment();// 0x25fa760

--------------------------------
Class: EnvironmentTrackerComponent.ActorComponent.Object
	Object*[] EnvironmentVolumes;//[Offset: 0xb0, Size: 1]
	<FName,int> CachedEnvironmentCounts;//[Offset: 0xc0, Size: 1]
	FName CachedCurrentEnvironment;//[Offset: 0x110, Size: 1]
	FName LastEnvironment;//[Offset: 0x118, Size: 1]
	FName DefaultEnvironment;//[Offset: 0x120, Size: 1]
	MulticastInlineDelegateProperty OnEnvironmentChanged;//[Size: 1]
	FName ReevalulateEnvironment();// 0x25faa70
	void OnRep_CurrentEnvironment();// 0x25faa50
	FName GetCurrentEnvironment();// 0x25fa780
	void EndTouchingOwnerUpdatedComponent(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x25fa4f0
	void BlueprintEnvironmentChanged(FName OldEnvironment);// 0x2cbecb0
	void BeginTouchingOwnerUpdatedComponent(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x25fa270

--------------------------------
Class: KSCameraManager_C.KSPlayerCameraManager.PlayerCameraManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x27d0, Size: 1]
	Vector Vault_Medium_Running_Rotation_19357AD44276670DB6B495B6695BBF6C;//[Offset: 0x27d8, Size: 1]
	Vector Vault_Medium_Running_Location_19357AD44276670DB6B495B6695BBF6C;//[Offset: 0x27e4, Size: 1]
	float Vault_Medium_Running_FOV_19357AD44276670DB6B495B6695BBF6C;//[Offset: 0x27f0, Size: 1]
	byte Vault_Medium_Running__Direction_19357AD44276670DB6B495B6695BBF6C;//[Offset: 0x27f4, Size: 1]
	TimelineComponent* Vault_Medium_Running;//[Offset: 0x27f8, Size: 1]
	Vector Vault_Short_Rotation_F73D9F61446F5474502BD8BF3252D762;//[Offset: 0x2800, Size: 1]
	Vector Vault_Short_Location_F73D9F61446F5474502BD8BF3252D762;//[Offset: 0x280c, Size: 1]
	float Vault_Short_FOV_F73D9F61446F5474502BD8BF3252D762;//[Offset: 0x2818, Size: 1]
	byte Vault_Short__Direction_F73D9F61446F5474502BD8BF3252D762;//[Offset: 0x281c, Size: 1]
	TimelineComponent* Vault_Short;//[Offset: 0x2820, Size: 1]
	Vector Vault_Medium_Rotation_973BB77943BEA34D1A27C0A9070CFD1F;//[Offset: 0x2828, Size: 1]
	Vector Vault_Medium_Location_973BB77943BEA34D1A27C0A9070CFD1F;//[Offset: 0x2834, Size: 1]
	float Vault_Medium_FOV_973BB77943BEA34D1A27C0A9070CFD1F;//[Offset: 0x2840, Size: 1]
	byte Vault_Medium__Direction_973BB77943BEA34D1A27C0A9070CFD1F;//[Offset: 0x2844, Size: 1]
	TimelineComponent* Vault_Medium;//[Offset: 0x2848, Size: 1]
	Vector Vault_Tall_Rotation_7F94194A49D4BE17D3B299B0FF993F6D;//[Offset: 0x2850, Size: 1]
	Vector Vault_Tall_Location_7F94194A49D4BE17D3B299B0FF993F6D;//[Offset: 0x285c, Size: 1]
	float Vault_Tall_FOV_7F94194A49D4BE17D3B299B0FF993F6D;//[Offset: 0x2868, Size: 1]
	byte Vault_Tall__Direction_7F94194A49D4BE17D3B299B0FF993F6D;//[Offset: 0x286c, Size: 1]
	TimelineComponent* Vault_Tall;//[Offset: 0x2870, Size: 1]
	Vector Mantle_Short_Rotation_CF02379640077BEA8312A4A97CABFFE5;//[Offset: 0x2878, Size: 1]
	Vector Mantle_Short_Location_CF02379640077BEA8312A4A97CABFFE5;//[Offset: 0x2884, Size: 1]
	float Mantle_Short_FOV_CF02379640077BEA8312A4A97CABFFE5;//[Offset: 0x2890, Size: 1]
	byte Mantle_Short__Direction_CF02379640077BEA8312A4A97CABFFE5;//[Offset: 0x2894, Size: 1]
	TimelineComponent* Mantle_Short;//[Offset: 0x2898, Size: 1]
	Vector Mantle_Medium_Rotation_BD9A8E7641CB9B707C1CE6BA8842B569;//[Offset: 0x28a0, Size: 1]
	Vector Mantle_Medium_Location_BD9A8E7641CB9B707C1CE6BA8842B569;//[Offset: 0x28ac, Size: 1]
	float Mantle_Medium_FOV_BD9A8E7641CB9B707C1CE6BA8842B569;//[Offset: 0x28b8, Size: 1]
	byte Mantle_Medium__Direction_BD9A8E7641CB9B707C1CE6BA8842B569;//[Offset: 0x28bc, Size: 1]
	TimelineComponent* Mantle_Medium;//[Offset: 0x28c0, Size: 1]
	Vector Mantle_Tall_Rotation_745F8D394D1BA4D0F0F12C9F36C8F1F2;//[Offset: 0x28c8, Size: 1]
	Vector Mantle_Tall_Location_745F8D394D1BA4D0F0F12C9F36C8F1F2;//[Offset: 0x28d4, Size: 1]
	float Mantle_Tall_FOV_745F8D394D1BA4D0F0F12C9F36C8F1F2;//[Offset: 0x28e0, Size: 1]
	byte Mantle_Tall__Direction_745F8D394D1BA4D0F0F12C9F36C8F1F2;//[Offset: 0x28e4, Size: 1]
	TimelineComponent* Mantle_Tall;//[Offset: 0x28e8, Size: 1]
	Vector JumpLanding_Rotation_F0A9B6BE484D0B52D2A1D2A14592B75A;//[Offset: 0x28f0, Size: 1]
	Vector JumpLanding_Location_F0A9B6BE484D0B52D2A1D2A14592B75A;//[Offset: 0x28fc, Size: 1]
	float JumpLanding_FOV_F0A9B6BE484D0B52D2A1D2A14592B75A;//[Offset: 0x2908, Size: 1]
	byte JumpLanding__Direction_F0A9B6BE484D0B52D2A1D2A14592B75A;//[Offset: 0x290c, Size: 1]
	TimelineComponent* JumpLanding;//[Offset: 0x2910, Size: 1]
	Vector JumpStart_Rotation_626F506A47DB820B20B53DBAEA84159F;//[Offset: 0x2918, Size: 1]
	Vector JumpStart_Location_626F506A47DB820B20B53DBAEA84159F;//[Offset: 0x2924, Size: 1]
	float JumpStart_FOV_626F506A47DB820B20B53DBAEA84159F;//[Offset: 0x2930, Size: 1]
	byte JumpStart__Direction_626F506A47DB820B20B53DBAEA84159F;//[Offset: 0x2934, Size: 1]
	TimelineComponent* JumpStart;//[Offset: 0x2938, Size: 1]
	void GetMantleHeightFromKSChar(out bool NoMantleCamera, CameraModifier* CallFunc_FindCameraModifierByClass_ReturnValue, Actor* CallFunc_GetViewTarget_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSCharacterAnimInst* CallFunc_GetKSCharacterAnimInst_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x2cbecb0
	void NotifyCamModFinished(class CameraModifier Modifier Class, CameraModifier* CurrentCameraMod, CameraModifier* CallFunc_FindCameraModifierByClass_ReturnValue, CamMod_Master_C* K2Node_DynamicCast_AsCam_Mod_Master, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void UpdateCamModValues(class CameraModifier Modifier Class, Vector In Location, Vector In Rotation, float In FOV, out bool Success, CameraModifier* CurrentCamMod, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, CameraModifier* CallFunc_FindCameraModifierByClass_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_IsValid_ReturnValue, CamMod_Master_C* K2Node_DynamicCast_AsCam_Mod_Master, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void JumpStart__FinishedFunc();// 0x2cbecb0
	void JumpStart__UpdateFunc();// 0x2cbecb0
	void JumpLanding__FinishedFunc();// 0x2cbecb0
	void JumpLanding__UpdateFunc();// 0x2cbecb0
	void Mantle_Tall__FinishedFunc();// 0x2cbecb0
	void Mantle_Tall__UpdateFunc();// 0x2cbecb0
	void Mantle_Medium__FinishedFunc();// 0x2cbecb0
	void Mantle_Medium__UpdateFunc();// 0x2cbecb0
	void Mantle_Short__FinishedFunc();// 0x2cbecb0
	void Mantle_Short__UpdateFunc();// 0x2cbecb0
	void Vault_Tall__FinishedFunc();// 0x2cbecb0
	void Vault_Tall__UpdateFunc();// 0x2cbecb0
	void Vault_Medium__FinishedFunc();// 0x2cbecb0
	void Vault_Medium__UpdateFunc();// 0x2cbecb0
	void Vault_Short__FinishedFunc();// 0x2cbecb0
	void Vault_Short__UpdateFunc();// 0x2cbecb0
	void Vault_Medium_Running__FinishedFunc();// 0x2cbecb0
	void Vault_Medium_Running__UpdateFunc();// 0x2cbecb0
	void Play Jump Start();// 0x2cbecb0
	void PlayJumpLanding();// 0x2cbecb0
	void Play Mantle(int Mantle Index);// 0x2cbecb0
	void ExecuteUbergraph_KSCameraManager(int EntryPoint, bool CallFunc_GetMantleHeightFromKSChar_NoMantleCamera, bool CallFunc_UpdateCamModValues_Success, bool CallFunc_UpdateCamModValues_Success, bool CallFunc_UpdateCamModValues_Success, bool CallFunc_UpdateCamModValues_Success, bool CallFunc_UpdateCamModValues_Success, bool CallFunc_UpdateCamModValues_Success, bool CallFunc_UpdateCamModValues_Success, bool CallFunc_UpdateCamModValues_Success, bool CallFunc_UpdateCamModValues_Success, int K2Node_CustomEvent_Mantle_Index, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_GetMantleHeightFromKSChar_NoMantleCamera);// 0x2cbecb0

--------------------------------
Class: KSPlayerCameraManager.PlayerCameraManager.Actor.Object
	int ThermalScopePPCount;//[Offset: 0x27c8, Size: 1]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	void Stop();// 0x45a5ce0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x45a5c20
	void SetTimelineLengthMode(byte NewLengthMode);// 0x45a5ba0
	void SetTimelineLength(float NewLength);// 0x45a5b20
	void SetPlayRate(float NewRate);// 0x45a5990
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x45a5a10
	void SetNewTime(float NewTime);// 0x45a5910
	void SetLooping(bool bNewLooping);// 0x45a5880
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x45a57c0
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x45a5730
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x45a5670
	void ReverseFromEnd();// 0x45a5650
	void Reverse();// 0x45a5630
	void PlayFromStart();// 0x45a5610
	void Play();// 0x45a55f0
	void OnRep_Timeline();// 0x45a55d0
	bool IsReversing();// 0x45a55a0
	bool IsPlaying();// 0x45a5570
	bool IsLooping();// 0x45a5540
	float GetTimelineLength();// 0x45a5510
	float GetPlayRate();// 0x45a5400
	float GetPlaybackPosition();// 0x45a5430
	bool GetIgnoreTimeDilation();// 0x45a53d0

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	float Length;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float Position;//[Offset: 0xc, Size: 1]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 1]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 1]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 1]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 1]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 1]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 1]
	Object* PropertySetObject;//[Offset: 0x70, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 1]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 1]
	delegate EventFunc;//[Offset: 0x4, Size: 1]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName VectorPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName FloatPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CamMod_Master_C.CameraModifier.Object
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	Vector AddViewLocation;//[Offset: 0x4c, Size: 1]
	Rotator AddViewRotation;//[Offset: 0x58, Size: 1]
	float AddFOV;//[Offset: 0x64, Size: 1]
	void OnCamModFinished();// 0x2cbecb0
	void PlayTimeline();// 0x2cbecb0
	void ShouldModifyCamera(out bool bSuccess, bool CallFunc_GetKSCharacterData_Success, KSCharacter* CallFunc_GetKSCharacterData_KSCharacter, KSCharacterMovementComponent* CallFunc_GetKSCharacterData_MovementComponent, KSCameraManager_C* CallFunc_GetKSCharacterData_Camera_Manager);// 0x2cbecb0
	void UpdateValues(Vector InLocation, Rotator InRotation, float InFOV);// 0x2cbecb0
	void GetKSCharacterData(out bool Success, out KSCharacter* KSCharacter, out KSCharacterMovementComponent* MovementComponent, out KSCameraManager_C* Camera Manager, bool bSuccess, KSCameraManager_C* OutKSCameraManager, KSCharacterMovementComponent* OutKSCharMoveComp, KSCharacter* OutKSCharacter, Actor* CallFunc_GetViewTarget_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSCharacterMovementComponent* K2Node_DynamicCast_AsKSCharacter_Movement_Component, bool K2Node_DynamicCast_bSuccess, Controller* CallFunc_GetController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSCameraManager_C* K2Node_DynamicCast_AsKSCamera_Manager, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV, bool CallFunc_ShouldModifyCamera_bSuccess, float CallFunc_Add_FloatFloat_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x2cbecb0

--------------------------------
Class: BP_GameHUD_Strikeout_C.BP_GameHUDNew_C.KSGameHUDNew.KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	HUDController_DisableWidget_C* HUDController_DisableWidget;//[Offset: 0x860, Size: 1]
	HUDController_GameInfo_Objective_C* HUDController_GameInfo_Objective;//[Offset: 0x868, Size: 1]

--------------------------------
Class: BP_GameHUDNew_C.KSGameHUDNew.KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x770, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x778, Size: 1]
	GameHUDWidget_C* HUD Widget;//[Offset: 0x780, Size: 1]
	float HUDXRatio;//[Offset: 0x788, Size: 1]
	float HUDYRatio;//[Offset: 0x78c, Size: 1]
	bool AccuracyDebugMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	MulticastInlineDelegateProperty OnSwimmingChanged;//[Size: 1]
	MulticastInlineDelegateProperty HUDMessage;//[Size: 1]
	<UserWidget*,FString> WidgetsToAddToHUD;//[Offset: 0x7b8, Size: 1]
	MulticastInlineDelegateProperty OnRuleWidgetCreated;//[Size: 1]
	AsyncWidgetInfoParams[] AsyncWidgetInfos;//[Offset: 0x818, Size: 1]
	UserWidget* WatermarkWidget;//[Offset: 0x828, Size: 1]
	CINE_Walkin_Widget_C* WalkInWidget;//[Offset: 0x830, Size: 1]
	MulticastInlineDelegateProperty OnHUDReady;//[Size: 1]
	UserWidget*[] AddedWidgetsArray;//[Offset: 0x848, Size: 1]
	CINE_MVPLineup_Widget_C* MVP Widget;//[Offset: 0x858, Size: 1]
	void ShouldDisplayIndicator(out bool ShouldDisplay, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_HasMatchStarted_ReturnValue, bool CallFunc_IsAnyCinematicSubLevelActive_ReturnValue, bool CallFunc_HasCompletedMatchPrePrep_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsInSelection_ReturnValue, bool CallFunc_BlueprintHasMatchEnded_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void HandleLagStateChanged(byte InputPin, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool CallFunc_ShouldDisplayIndicator_ShouldDisplay, KSGameState* CallFunc_GetKSGameState_ReturnValue, FName CallFunc_GetMatchPhaseName_ReturnValue, bool Temp_bool_Variable, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	void HandleVarianceChanged(enum Index, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_ShouldDisplayIndicator_ShouldDisplay, int K2Node_Select_Default, bool K2Node_SwitchInteger_CmpSuccess);// 0x2cbecb0
	void HandleLatencyChanged(enum Index, enum Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_ShouldDisplayIndicator_ShouldDisplay, int K2Node_Select_Default, bool K2Node_SwitchInteger_CmpSuccess);// 0x2cbecb0
	void AddHudWidgetToScreen(UserWidget* Widget, int ZOrder, bool CallFunc_AddToPlayerScreen_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0
	void FocusFirstFocusableWidget(out PUMG_Widget*[] PUMG Widgets, int CallFunc_Array_Length_ReturnValue, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, PUMG_Widget* CallFunc_Array_Get_Item, KSWidget* K2Node_DynamicCast_AsKSWidget, bool K2Node_DynamicCast_bSuccess, KSWidget* K2Node_DynamicCast_AsKSWidget, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_SetFocusToThis_ReturnValue, bool CallFunc_IsFocusEnabled_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, KSWidget* K2Node_DynamicCast_AsKSWidget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void GetFocusableWidgets(out PUMG_Widget*[] FocusableWidgets, PUMG_Widget*[] WidgetsToTest, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, CanvasPanel*[] K2Node_MakeArray_Array, CanvasPanel* CallFunc_Array_Get_Item, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void ToggleWatermarkDisplay(bool Show, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	void GetAsyncWidgetsForString(FString String, out UserWidget*[] UserWidgets, UserWidget*[] ToReturn, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, UserWidget*[] CallFunc_Map_Keys_Keys, int CallFunc_Array_Length_ReturnValue, UserWidget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Map_Remove_ReturnValue, int CallFunc_Array_Add_ReturnValue, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void SetupJobSelectionManager(KSHUDStateTracker* CallFunc_GetHUDStateTracker_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	PUMG_PopupManager* GetPopupManager();// 0x2cbecb0
	void OnLoaded_9A584D3E423F982EA7A073A29FBFC2FD(class Object Loaded);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void OnShowHUD(Object* Showing Object);// 0x2cbecb0
	void OnHideHUD(Object* HidingObject);// 0x2cbecb0
	void Spawn Tutorial Widget();// 0x2cbecb0
	void OnToggleHUD();// 0x2cbecb0
	void OnToggleTopBar(bool ShouldShow);// 0x2cbecb0
	void SetHUDVisible(bool bVisible);// 0x2cbecb0
	void CreateGameRuleWidget(KSWidgetInfoParams WidgetInfoParams);// 0x2cbecb0
	void BroadcastWidgetMessage(FName Message);// 0x2cbecb0
	void BindEventToWidgetMessages(out const delegate Callback);// 0x2cbecb0
	void HandleOpenTextChat(bool BeginChatCommand);// 0x2cbecb0
	void DisplayWatermark();// 0x2cbecb0
	void OnAsyncWidgetInfoLoaded(class Object LoadedClass, FString ParentWidget, Actor* WidgetInfoActor);// 0x2cbecb0
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x2cbecb0
	void ApplySafeFrameScale(float SafeFrameScale);// 0x2cbecb0
	void SetUIFocus();// 0x2cbecb0
	void Play Cinematic Nameplate Anim(int Index, int NumWalking);// 0x2cbecb0
	void Set Cinematic Nameplate Data(KSPersistentPlayerData* Player Data, int Index);// 0x2cbecb0
	void EvaluateFocus();// 0x2cbecb0
	void Init WalkIn Widget(out const KSJobSelectPreviewActor*[] Players);// 0x2cbecb0
	void ReceiveEndPlay(byte EndPlayReason);// 0x2cbecb0
	void OnPhaseChanged(MatchPhase CurrentPhase, MatchPhase PreviousPhase);// 0x2cbecb0
	void Play Cinematic MVP Nameplat Anim(int Index);// 0x2cbecb0
	void Init MVP Widget(out const KSJobSelectPreviewActor*[] Players);// 0x2cbecb0
	void GameModeWidgetReady(class UserWidget GameModeWidgetClass);// 0x2cbecb0
	void OnNetworkLagStateUpdated(enum Ping, enum Jitter, byte LagType);// 0x2cbecb0
	void ExecuteUbergraph_BP_GameHUDNew(int EntryPoint, bool CallFunc_IsMobile_ReturnValue, int Temp_int_Array_Index_Variable, enum Temp_byte_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, enum Temp_byte_Variable, GameHUDWidget_C* CallFunc_Create_ReturnValue, AccuracyDebug_C* CallFunc_Create_ReturnValue, Object* K2Node_CustomEvent_Showing_Object, Object* K2Node_CustomEvent_HidingObject, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsVisible_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_ShouldShow, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, bool K2Node_Event_bVisible, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, KSWidgetInfoParams K2Node_Event_WidgetInfoParams, enum K2Node_Select_Default, AsyncWidgetInfoParams K2Node_MakeStruct_AsyncWidgetInfoParams, FName K2Node_Event_Message, const delegate K2Node_Event_Callback, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, UserWidget*[] CallFunc_Map_Keys_Keys, PUMG_Widget* CallFunc_Get_Job_Selection_Manager_Manager_Widget, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_Event_BeginChatCommand, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, WatermarkWidget_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int Temp_int_Array_Index_Variable, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, UserWidget* CallFunc_Array_Get_Item, Anchors K2Node_MakeStruct_Anchors, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, int CallFunc_Array_Add_ReturnValue, class Object K2Node_CustomEvent_LoadedClass, FString K2Node_CustomEvent_ParentWidget, Actor* K2Node_CustomEvent_WidgetInfoActor, class UserWidget K2Node_ClassDynamicCast_AsUser_Widget, bool K2Node_ClassDynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, UserWidget* CallFunc_Create_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PanelWidget* CallFunc_GetParent_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsKSInfo_Actor_Widget_Interface, bool K2Node_DynamicCast_bSuccess, bool CallFunc_SetInfoActor_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, bool Temp_bool_Variable, PUMG_PlayerInfo* K2Node_Event_Player, FString CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, enum Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Array_Index_Variable, AsyncWidgetInfoParams CallFunc_Array_Get_Item, bool CallFunc_Array_RemoveItem_ReturnValue, float K2Node_Event_SafeFrameScale, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, CINE_Walkin_Widget_C* CallFunc_Create_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, PUMG_Widget*[] CallFunc_GetFocusableWidgets_FocusableWidgets, int K2Node_Event_Index, int K2Node_Event_NumWalking, bool K2Node_SwitchInteger_CmpSuccess, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, KSPersistentPlayerData* K2Node_Event_Player_Data, int K2Node_Event_Index, const KSJobSelectPreviewActor*[] K2Node_Event_Players, byte K2Node_Event_EndPlayReason, MatchPhase K2Node_CustomEvent_CurrentPhase, MatchPhase K2Node_CustomEvent_PreviousPhase, UserWidget* CallFunc_Array_Get_Item, FString CallFunc_Conv_NameToString_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchString_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, int K2Node_Event_Index, const KSJobSelectPreviewActor*[] K2Node_Event_Players, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, CINE_MVPLineup_Widget_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, class UserWidget K2Node_Event_GameModeWidgetClass, bool CallFunc_IsValid_ReturnValue, class Object Temp_class_Variable, class Object CallFunc_Conv_ClassToSoftClassReference_ReturnValue, bool CallFunc_EqualEqual_SoftClassReference_ReturnValue, enum K2Node_Event_Ping, enum K2Node_Event_Jitter, byte K2Node_Event_LagType, class Object K2Node_CustomEvent_Loaded, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void OnHUDReady__DelegateSignature();// 0x2cbecb0
	void OnRuleWidgetCreated__DelegateSignature(UserWidget* UserWidget, FString Placement);// 0x2cbecb0
	void HUDMessage__DelegateSignature(FName Message);// 0x2cbecb0
	void OnSwimmingChanged__DelegateSignature(bool IsSwimming);// 0x2cbecb0

--------------------------------
Class: KSGameHUDNew.KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	<class UserWidget,class KSHUDController> WidgetControllerMap;//[Offset: 0x620, Size: 1]
	class UserWidget* AimAssistDebugWidgetClass;//[Offset: 0x670, Size: 1]
	UserWidget* AimAssistDebugWidget;//[Offset: 0x678, Size: 1]
	class UserWidget* AutoFireDebugWidgetClass;//[Offset: 0x680, Size: 1]
	UserWidget* AutoFireDebugWidget;//[Offset: 0x688, Size: 1]
	KSPlayerState* CurrentKSPlayerState;//[Offset: 0x690, Size: 1]
	DataTableInfo[] BaseAssetDataTables;//[Offset: 0x698, Size: 1]
	DynamicSkinTable* AssetDataTableManager;//[Offset: 0x6a8, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x6b0, Size: 1]
	KSHUDStateTracker* HUDStateTracker;//[Offset: 0x6b8, Size: 1]
	MulticastInlineDelegateProperty OnHudFubarDel;//[Size: 1]
	class UserWidget* LoadedGameModeWidgetClass;//[Offset: 0x728, Size: 1]
	class UserWidget* DesiredGameModeWidgetClass;//[Offset: 0x730, Size: 1]
	bool bGameModeWidgetReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758, Size: 1]
	void UIX_ReturnLobby();// 0x29136d0
	void ToggleAutoFireDebug();// 0xd76f80
	void ToggleAimAssistDebug();// 0xd76f80
	void SetHUDVisible(bool bVisible);// 0x2913420
	void ReturnToHome();// 0x29132e0
	void RegisterWidgetToController(UserWidget* InWidget);// 0x29131c0
	void OnViewedPlayerStateModRemoved(KSPlayerMod* PlayerMod, KSPlayerModInstance* ModInstance);// 0x2912e60
	void OnViewedPlayerStateModAdded(KSPlayerMod* PlayerMod, KSPlayerModInstance* ModInstance);// 0x2912da0
	void OnViewedPawnChanged(KSPlayerController* Controller, Actor* OldViewTarget, Actor* NewViewTarget);// 0x2912ca0
	void OnToggleHUD();// 0x2912c70
	void OnNetworkLagStateUpdated(enum Ping, enum Jitter, byte LagType);// 0x2cbecb0
	void OnAssetDataTableManagerChanged(out const <FName> UpdatedKeywords);// 0x2912890
	void NetworkLagStateChanged(World* World, NetDriver* NetDriver, byte LagType);// 0x2cbecb0
	bool IsPlayerMuted(KSPlayerState* KSPlayerState);// 0x2912800
	bool IsPlayerInVoiceChannel(KSPlayerState* KSPlayerState);// 0x2912770
	void HandleLoginStateChange(enum LoginState);// 0x2912620
	void HandleFubar(enum Reason);// 0x29125a0
	KSHUDStateTracker* GetHUDStateTracker();// 0x2912240
	void GameModeWidgetReady(class UserWidget GameModeWidgetClass);// 0x2911de0

--------------------------------
Class: KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	MulticastInlineDelegateProperty OnPreferredSiteUpdated;//[Size: 1]
	PUMG_LoginDataFactory* LoginDataFactory;//[Offset: 0x5b0, Size: 1]
	KSSettingsDataFactory* SettingsFactory;//[Offset: 0x5b8, Size: 1]
	KSChatDataFactory* ChatDataFactory;//[Offset: 0x5c0, Size: 1]
	KSPartyDataFactory* PartyDataFactory;//[Offset: 0x5c8, Size: 1]
	KSNPEDataFactory* NPEDataFactory;//[Offset: 0x5d0, Size: 1]
	KSPlayerDataFactory* PlayerDataFactory;//[Offset: 0x5d8, Size: 1]
	bool bDisplayWatermark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	float WatermarkAlpha;//[Offset: 0x5e4, Size: 1]
	float WatermarkOffsetLeft;//[Offset: 0x5e8, Size: 1]
	float WatermarkOffsetTop;//[Offset: 0x5ec, Size: 1]
	float WatermarkOffsetRight;//[Offset: 0x5f0, Size: 1]
	float WatermarkOffsetBottom;//[Offset: 0x5f4, Size: 1]
	float WatermarkChangePositionTime;//[Offset: 0x5f8, Size: 1]
	DataTable* ColorPaletteDT;//[Offset: 0x600, Size: 1]
	DataTable* FontPaletteDT;//[Offset: 0x608, Size: 1]
	KSSettingsColorOptionsAsset* CrosshairColorOptions;//[Offset: 0x610, Size: 1]
	void UIX_ReportServer();// 0x291ba30
	void TestChallengeNotification();// 0xd76f80
	void ShowErrorPopup(FText ErrorMsg);// 0x291b900
	bool ShouldShowCrossplayIconForPlayerState(KSPlayerState* PlayerState);// 0x291b870
	bool ShouldShowCrossplayIconForPlayer(int64 PlayerId);// 0x291b7e0
	void SetPreferredSiteId(int SiteId);// 0x291b340
	void SetDumpMarshalsOut(bool On);// 0x291b0e0
	void SetDumpMarshalsIn(bool On);// 0x291b050
	void SetDumpMarshals(bool On);// 0x291afc0
	void PrintToLog(FText InText);// 0x291ae80
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x291adf0
	void OnInvalidVoucherAcquisition(PUMG_StoreItem* StoreItem);// 0x291abd0
	bool MutePlayer(int64 PlayerId, bool Mute);// 0x291a7e0
	void LogErrorMessage(FText ErrorMsg);// 0x291a700
	bool IsSamePortalAsLocalPlayer(int64 PlayerId);// 0x291a670
	bool IsMuted(int64 PlayerId);// 0x291a5e0
	void HandleOpenTextChat(bool BeginChatCommand);// 0x291a3d0
	void HandleControllerDisconnect();// 0x291a390
	KSUISessionManager* GetUISessionManager();// 0x291a260
	void GetSiteList(out <int,FText> OutSiteIdToNameMap);// 0x291a100
	KSSettingsDataFactory* GetSettingsDataFactory();// 0x291a0d0
	bool GetPreferredSiteId(out int OutSiteId);// 0x291a030
	KSPlayerDataFactory* GetPlayerDataFactory();// 0x291a000
	KSPartyDataFactory* GetPartyDataFactory();// 0x2919fd0
	KSNPEDataFactory* GetNPEDataFactory();// 0x2919fa0
	KSMercManager* GetMercManager();// 0x2919f70
	PUMG_LoginDataFactory* GetLoginDataFactory();// 0x2919f40
	KSLoadoutDataFactory* GetLoadoutDataFactory();// 0x2919f10
	KSStoreItemHelper* GetItemHelper();// 0x2919ee0
	bool GetFont(FName FontName, out SlateFontInfo ReturnFont);// 0x2919dc0
	PanelWidget*[] GetFocusableWidgetContainers();// 0x2cbecb0
	bool GetColor(FName ColorName, out LinearColor ReturnColor);// 0x2919c80
	KSChatDataFactory* GetChatDataFactory();// 0x2919c50
	KSAcquisitionManager* GetAcquisitionManager();// 0x2919c20
	void EvaluateFocus();// 0x2cbecb0
	void DisplayWatermark();// 0x2cbecb0
	void ConfirmReportServer();// 0x2919510
	void ApplySafeFrameScale(float SafeFrameScale);// 0x2cbecb0

--------------------------------
Class: PUMG_LoginDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnLoginUserChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLoginStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLoginError;//[Size: 1]
	MulticastInlineDelegateProperty OnControllerDisconnected;//[Size: 1]
	bool bAllowLoginDuringPartialInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	DataTable* ErrorMsgsDT;//[Offset: 0x88, Size: 1]
	bool bAttemptedDeferredInviteAutoLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	FString RefreshToken;//[Offset: 0xf8, Size: 1]
	bool bNeedsValidateDisplayName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	FString CustomDisplayName;//[Offset: 0x120, Size: 1]
	int MinCustomDisplayNameLength;//[Offset: 0x130, Size: 1]
	int MaxCustomDisplayNameLength;//[Offset: 0x134, Size: 1]
	FString CustomDisplayNameInvalidChars;//[Offset: 0x138, Size: 1]
	FString SavedCredentialPrefix;//[Offset: 0x148, Size: 1]
	FName NicknameOSS;//[Offset: 0x158, Size: 1]
	MulticastInlineDelegateProperty OnLoginWaitQueueMessage;//[Size: 1]
	bool UpdateControllers();// 0xe706f0
	void UIX_TriggerAutoLogin();// 0xe706d0
	void UIX_OnTwoFactorSubmit(FString AuthCode);// 0xe70560
	void UIX_OnTwoFactorDecline();// 0xe6fce0
	void UIX_OnSubmitLogin(FString UserName, FString password);// 0xe703f0
	void UIX_OnSubmitConsoleLogin(int ControllerId);// 0xe70370
	void UIX_OnSubmitAutoLogin(int ControllerId);// 0xe70370
	void UIX_OnSignInWithGoogle(int ControllerId);// 0xe702f0
	void UIX_OnSignInWithApple(int ControllerId);// 0xe70270
	void UIX_OnSignInAsGuest(int ControllerId);// 0xe701f0
	void UIX_OnPlayerCreate(FString PlayerName);// 0xe70110
	void UIX_OnLinkExistingAccount(FString UserName, FString password);// 0xe6ffa0
	void UIX_OnLinkDecline();// 0xe6ff80
	void UIX_OnLinkCreateAccount(FString UserName, FString password, FString Email, bool bAcceptAgeReqs);// 0xe6fd40
	void UIX_OnEulaDecline();// 0xe6fce0
	void UIX_OnEulaAccept();// 0xe6fd20
	void UIX_OnChangeUserAccount();// 0xe6fd00
	void UIX_OnCancelLogin();// 0xe6fce0
	void UIX_OnAccountCreate(FString UserName, FString password, FString Email, bool bAcceptAgeReqs);// 0xe6faa0
	void TriggerAutoLogin();// 0xe6f840
	bool ShouldDisplayUsername();// 0xe6f810
	bool ShouldDisplayDisconnectError();// 0xe6f7e0
	void SetUserErrorDataTable(DataTable* ErrorMsgTable);// 0xe6f760
	void RecordLoginState(enum NewState);// 0xe6f550
	void LoginEvent_ShowAgreements(bool bNeedsEULA, bool bNeedsTOS, bool bNeedsPP);// 0xe6f3d0
	void LoginEvent_Queued(uint32 QueuePosition, uint32 QueueSize, uint32 queueEstimatedWait);// 0xe6f2d0
	void LoginEvent_LoginRequested();// 0xe6f2b0
	void LoginEvent_LoggedIn();// 0xe6f290
	void LoginEvent_FailedClient(FText ErrorMsg);// 0xe6f1b0
	void LoginEvent_Failed(uint32 ErrorMsgId);// 0xe6f130
	static bool LoadEULAFile(out FString SaveText);// 0xe6f080
	void HandleLoginComplete();// 0xe6eeb0
	void HandleControllerPairingChange(int ControllerIndex, int NewUserId, int OldUserId);// 0xe6ec90
	void HandleControllerConnectionChange(bool IsConnection, int UserId, int ControllerIndex);// 0xe6eb90
	static FString GetVersion();// 0xe6eb10
	bool GetLastDisconnectReason(out FText ErrorMsg);// 0xe6e510
	bool GetCurrentPlayerName(out FText NameText);// 0xe6e430
	bool GetCurrentPlayerId(out FText ID);// 0xe6e350
	enum GetCurrentLoginState();// 0xe6e330
	enum CheckCustomPlayerName(FString InPlayerName);// 0xe6e1f0

--------------------------------
Class: KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	bool bIsUIOnlyWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool bIsExclusiveMenuWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	int AmbientSoundRtpc;//[Offset: 0x4cc, Size: 1]
	TickAnimationManager* TickAnimations;//[Offset: 0x4d0, Size: 1]
	delegate ViewportEvent;//[Offset: 0x4d8, Size: 1]
	bool bSubstituteKillCamWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bSubstituteKillCamOwningPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	bool bWantsKillCamCallbacks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 1]
	float OpacityWhenAiming;//[Offset: 0x508, Size: 1]
	bool DoesFadeOutWhenAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	float AimTransitionProgress;//[Offset: 0x510, Size: 1]
	void UpdateOpacityWhenAiming();// 0x26ff650
	void UnbindFromViewportSizeChange();// 0x2976e10
	void TriggerGlobalInvalidate();// 0x2976df0
	void StopTickAnimation(FName AnimName);// 0x2976d70
	void SkipToEndTickAnimation(FName AnimName);// 0x2976cf0
	bool ShouldUpdateOpacityWhenAiming();// 0x27d2d30
	void SetPositionRTPC();// 0x2976c50
	void SetAllAnimationsPlaybackSpeed(float PlaybackSpeed);// 0x2976a20
	void ResumeTickAnimation(FName AnimName);// 0x29769a0
	void RemoveTickAnimation(FName AnimName);// 0x2976920
	void PlayTickAnimation(FName AnimName);// 0x2976370
	void PauseTickAnimation(FName AnimName);// 0x29762f0
	bool IsInKillCamPlayback();// 0x2976170
	void InitializeTickAnimations();// 0x2cbecb0
	void HandleAimStateChange(enum NewAimState);// 0x2975d30
	bool GetTickAnimationInfo(FName AnimName, out TickAnimationParams OutAnimParams);// 0x2975b80
	PlayerController* GetNormalOwningPlayer();// 0x2975a40
	PlayerController* GetKillCamSpectatorController();// 0x26fd590
	PlayerController* GetActivePlayerController();// 0x29759e0
	void BlueprintPrepareKillCamPlayback();// 0x2cbecb0
	void BlueprintFinishKillCamPlayback();// 0x2cbecb0
	void BindToViewportSizeChange(out const delegate InViewportEvent);// 0x29756f0
	void AddTickAnimation(FName AnimName, float Duration, out const delegate UpdateEvent, out const delegate FinishedEvent);// 0x2975560

--------------------------------
Class: TickAnimationManager.Object
	<FName,TickAnimationParams> AnimsByName;//[Offset: 0x28, Size: 1]
	void StopAnimation(FName AnimName);// 0x2978170
	void SkipToEndAnimation(FName AnimName);// 0x29780f0
	void ResumeAnimation(FName AnimName);// 0x2978070
	void RemoveAnimation(FName AnimName);// 0x2977ff0
	void PlayAnimation(FName AnimName);// 0x2977e60
	void PauseAnimation(FName AnimName);// 0x2977de0
	bool GetAnimationInfo(FName AnimName, out TickAnimationParams OutAnimParams);// 0x2977cd0
	void ApplyTick(float DeltaTime);// 0x2977b00
	void AddAnimation(FName AnimName, float Duration, out const delegate UpdateEvent, out const delegate FinishedEvent);// 0x2977970

--------------------------------
Class: TickAnimationParams
	float Duration;//[Offset: 0x0, Size: 1]
	delegate UpdateEvent;//[Offset: 0x4, Size: 1]
	delegate FinishedEvent;//[Offset: 0x14, Size: 1]
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float ElapsedTime;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSHUDStateTracker.Object
	MulticastInlineDelegateProperty OnHUDMatchPhaseChanged;//[Size: 1]
	float PhaseTime;//[Offset: 0x38, Size: 1]
	MatchPhase TrackedCurrentMatchPhase;//[Offset: 0x3c, Size: 1]
	void PollMatchPhase();// 0x291f840
	void HandleUpdatedMatchPhase(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x291f330
	void HandleGameStateBeginPlay(KSGameState* GameState);// 0x291f2b0

--------------------------------
Class: KSHUDController.ActorComponent.Object
	void OnWidgetRegistered(UserWidget* InWidget);// 0x2cbecb0

--------------------------------
Class: KSSettingsDataFactory.PUMG_SettingsDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnSettingsReceivedFromPlayerAccount;//[Size: 1]
	MulticastInlineDelegateProperty OnKeyBindSettingsApplied;//[Size: 1]
	MulticastInlineDelegateProperty OnKeyBindSettingsSaved;//[Size: 1]
	KSSettingPropertyId[] BoolSettingPropertyIds;//[Offset: 0x1b0, Size: 1]
	KSSettingPropertyId[] IntSettingPropertyIds;//[Offset: 0x210, Size: 1]
	KSSettingPropertyId[] FloatSettingPropertyIds;//[Offset: 0x270, Size: 1]
	KSSettingsMenuConfigAsset* KSSettingsMenuConfigAssetSoftObjectPtr;//[Offset: 0x330, Size: 1]
	KSSettingsMenuConfigAsset* KSSettingsMenuConfigAsset;//[Offset: 0x358, Size: 1]
	KSSettingsMenuConfigAsset* TouchSettingsConfigAssetPath;//[Offset: 0x360, Size: 1]
	KSSettingsMenuConfigAsset* TouchSettingsConfigAsset;//[Offset: 0x388, Size: 1]
	MulticastInlineDelegateProperty OnDisplayLanguageApplied;//[Size: 1]
	MulticastInlineDelegateProperty OnDisplayLanguageSaved;//[Size: 1]
	MulticastInlineDelegateProperty OnScreenResolutionApplied;//[Size: 1]
	MulticastInlineDelegateProperty OnScreenResolutionSaved;//[Size: 1]
	bool SetSelectedRegion(int SiteId);// 0x2954c30
	void SaveSettings();// 0x2954760
	void SaveSettingAsInt(FName Name);// 0x29546e0
	void SaveSettingAsFloat(FName Name);// 0x2954660
	void SaveSettingAsBool(FName Name);// 0x29545e0
	void SaveScreenResolution();// 0x29545c0
	void SaveLanguage();// 0x29545a0
	void SaveKeyBindings();// 0x2954580
	void RevertScreenResolution();// 0x2954230
	void RevertPlayerPreferences();// 0x2954210
	void RevertLanguageToDefault();// 0x29541f0
	void RevertKeyBindings();// 0x29541d0
	bool IsUserLoggedIn();// 0x29537e0
	bool GetSettingAsInt_Legacy(FName Name, out int OutInt);// 0x29530d0
	bool GetSettingAsFloat_Legacy(FName Name, out float OutFloat);// 0x2952ff0
	bool GetSettingAsBool_Legacy(FName Name, out bool OutBool);// 0x2952f10
	int GetSelectedRegion();// 0x2952ee0
	IntPoint GetScreenResolution();// 0x2952ea0
	KSPlayerInput* GetKSPlayerInput();// 0x2952cf0
	void GetDefaultKSInputActionKeys(out const FName Name, enum InputType, out KSInputActionKey[] OutKeys);// 0x29528c0
	void GetDefaultInputAxisKeys(out const FName Name, enum InputType, float Scale, out Key[] OutKeys);// 0x29526f0
	void GetDefaultInputActionKeys(out const FName Name, enum InputType, out Key[] OutKeys);// 0x2952570
	void GetCustomKSInputActionKeys(FName Name, enum InputType, out KSInputActionKey[] OutKeys);// 0x2952400
	void GetCustomInputAxisKeys(FName Name, enum InputType, float Scale, out Key[] OutKeys);// 0x2952240
	void GetCustomInputActionKeys(FName Name, enum InputType, out Key[] OutKeys);// 0x29520d0
	FString GetCurrentLanguage();// 0x2952050
	FString[] GetAvailableLanguages();// 0x2951f70
	void BindSettingCallbacks_Legacy(FName Name, out const SettingDelegateStruct SettingDelegateStruct);// 0x2951ac0
	void ApplySettingAsInt(FName Name, int Value);// 0x2951a00
	void ApplySettingAsFloat(FName Name, float Value);// 0x2951930
	void ApplySettingAsBool(FName Name, bool Value);// 0x2951860
	void ApplyScreenResolution(IntPoint ScreenResolution);// 0x29517e0
	void ApplyLanguage(FString LanguageCulture);// 0x2951510

--------------------------------
Class: PUMG_SettingsDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnPopulateUserSettings;//[Size: 1]
	MulticastInlineDelegateProperty OnPopulateUserBindings;//[Size: 1]
	MulticastInlineDelegateProperty OnPopulateUserGPBindings;//[Size: 1]
	MulticastInlineDelegateProperty OnPostLogin;//[Size: 1]
	MulticastInlineDelegateProperty OnPostLogoff;//[Size: 1]
	MulticastInlineDelegateProperty OnSettingValueChanged;//[Size: 1]
	bool OnSettingChanged(FName SettingId, int SettingValue);// 0xe79760
	void InitSettingsForPlayer();// 0xe6f840

--------------------------------
Class: KSPlayerInput.PGame_PlayerInput.PlayerInput.Object
	<FName,FString> SavedSettingsConfig;//[Offset: 0x1300, Size: 1]
	Vector2D GamepadLookAcceleration;//[Offset: 0x1444, Size: 1]
	float MinMouseSenseScaling;//[Offset: 0x144c, Size: 1]
	float MaxMouseSenseScaling;//[Offset: 0x1450, Size: 1]
	float TouchLookSensitivityADS;//[Offset: 0x1454, Size: 1]
	MulticastInlineDelegateProperty OnKeyMappingsUpdated;//[Size: 1]
	<FName,KSCustomInputActionKeyMappings> KSCustomActionKeyMappings;//[Offset: 0x1480, Size: 1]
	<FName,KSCustomInputAxisKeyMappings> KSCustomAxisKeyMappings;//[Offset: 0x1520, Size: 1]
	class KSAnalogStickFilter* KSLeftAnalogStickFilterClass;//[Offset: 0x15c0, Size: 1]
	class KSAnalogStickFilter* KSRightAnalogStickFilterClass;//[Offset: 0x15c8, Size: 1]
	KSAnalogStickFilter* LeftAnalogStickFilter;//[Offset: 0x15d0, Size: 1]
	KSAnalogStickFilter* RightAnalogStickFilter;//[Offset: 0x15e8, Size: 1]
	bool DoesInputTypeSupportChords(enum InputType);// 0x273a280

--------------------------------
Class: PGame_PlayerInput.PlayerInput.Object
	float KeyMouseSwitchDelta;//[Offset: 0x12e0, Size: 1]
	float GamepadSwitchDelta;//[Offset: 0x12e8, Size: 1]

--------------------------------
Class: KSCustomInputActionKeyMappings
	KSInputActionKeyMapping[] KBM_Mappings;//[Offset: 0x0, Size: 1]
	KSInputActionKeyMapping[] GP_Mappings;//[Offset: 0x10, Size: 1]
	KSInputActionKeyMapping[] Touch_Mappings;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSInputActionKeyMapping
	InputActionKeyMapping Mapping;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 1]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	Key Key;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSCustomInputAxisKeyMappings
	<float,KSInputAxisKeyMappings> KBM_Mappings;//[Offset: 0x0, Size: 1]
	<float,KSInputAxisKeyMappings> GP_Mappings;//[Offset: 0x50, Size: 1]
	<float,KSInputAxisKeyMappings> Touch_Mappings;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: KSInputAxisKeyMappings
	InputAxisKeyMapping[] InputAxisKeyMappings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 1]
	float Scale;//[Offset: 0x8, Size: 1]
	Key Key;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSAnalogStickFilter.Object
	enum StickType;//[Offset: 0x28, Size: 1]
	KSPlayerInput* PlayerInput;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSInputActionKey
	Key Key;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SettingDelegateStruct
	delegate SettingApplied;//[Offset: 0x0, Size: 1]
	delegate SettingSaved;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSSettingPropertyId
	FName Name;//[Offset: 0x0, Size: 1]
	int ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSettingsMenuConfigAsset.DataAsset.Object
	KSSettingsPageConfigAsset*[] SettingsPageConfigs;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSSettingsPageConfigAsset.DataAsset.Object
	KSSettingsSectionConfigAsset*[] SettingsSectionConfigs;//[Offset: 0x30, Size: 1]
	FText PageName;//[Offset: 0x40, Size: 1]
	<FString,FText> HeadingByPlatform;//[Offset: 0x58, Size: 1]
	FText GetPageName();// 0x2952c80

--------------------------------
Class: KSSettingsSectionConfigAsset.DataAsset.Object
	KSSettingsGroupConfig[] SettingsGroups;//[Offset: 0x30, Size: 1]
	FText Heading;//[Offset: 0x40, Size: 1]
	<FString,FText> HeadingByPlatform;//[Offset: 0x58, Size: 1]
	FText GetHeading();// 0x2952c80

--------------------------------
Class: KSSettingsGroupConfig
	KSSettingsContainerConfigAsset* MainSettingContainerAsset;//[Offset: 0x0, Size: 1]
	KSSettingsContainerConfigAsset*[] SubSettingContainerAssets;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSettingsContainerConfigAsset.DataAsset.Object
	bool bIsAvailableOffline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRequires120HzDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	KSAllowedPlatformTypes AllowedPlatformTypes;//[Offset: 0x32, Size: 1]
	KSRequiredInputTypes RequiredInputTypes;//[Offset: 0x3c, Size: 1]
	FString RequiredExperiment;//[Offset: 0x40, Size: 1]
	KSSwitchDockedModeSetting SwitchDockedModeSetting;//[Offset: 0x50, Size: 1]
	bool bUsePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	class KSSettingsPreview* PreviewWidget;//[Offset: 0x58, Size: 1]
	KSSettingsWidgetConfig[] WidgetConfigs;//[Offset: 0x60, Size: 1]
	FText SettingName;//[Offset: 0x70, Size: 1]
	<FString,FText> SettingNameByPlatform;//[Offset: 0x88, Size: 1]
	FText SettingDescription;//[Offset: 0xd8, Size: 1]
	<FString,FText> SettingDescriptionByPlatform;//[Offset: 0xf0, Size: 1]
	FText GetSettingName();// 0x29531f0
	FText GetSettingDescription();// 0x29531b0

--------------------------------
Class: KSAllowedPlatformTypes
	bool XboxOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool PS4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool Switch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool Windows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool Mac;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool Linux;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool Android;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool XSX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool PS5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: KSRequiredInputTypes
	bool Gamepad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool Mouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool Touch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: KSSwitchDockedModeSetting
	bool ShowDocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool ShowHandheld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: KSSettingsPreview.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnPreviewValueChanged;//[Size: 1]
	KSSettingsInfoBase* SettingsInfo;//[Offset: 0x538, Size: 1]
	void HandleOnValueChanged(bool ChangedExternally);// 0x29589c0
	void HandleOnPreviewValueChanged();// 0x29589a0

--------------------------------
Class: KSSettingsInfoBase.Object
	MulticastInlineDelegateProperty OnSettingValueChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSettingPreviewChanged;//[Size: 1]
	bool bIsAutoApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bIsAutoSaved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	FText[] TextOptions;//[Offset: 0xd0, Size: 1]
	MulticastInlineDelegateProperty OnTextOptionsChanged;//[Size: 1]
	float MinValue;//[Offset: 0xf0, Size: 1]
	float MaxValue;//[Offset: 0xf4, Size: 1]
	bool bOverrideDisplayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float MinDisplayValue;//[Offset: 0xfc, Size: 1]
	float MaxDisplayValue;//[Offset: 0x100, Size: 1]
	float StepValue;//[Offset: 0x104, Size: 1]
	bool bRoundValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	float RoundToNearest;//[Offset: 0x10c, Size: 1]
	bool bIsPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	void UpdateTextOptions(out const FText[] NewOptions);// 0x2954cc0
	bool SetPreviewValueInt(int inInt);// 0x2954ba0
	bool SetPreviewValueFloat(float InFloat);// 0x2954b10
	bool SetPreviewValueBool(bool InBool);// 0x2954a80
	bool SetDesiredValueKeyBind(KSKeyBind InKeyBind);// 0x2954930
	bool SetDesiredValueInt(int inInt);// 0x29548a0
	bool SetDesiredValueFloat(float InFloat);// 0x2954810
	bool SetDesiredValueBool(bool InBool);// 0x2954780
	bool SaveKeyBindValue(KSKeyBind InKeyBind);// 0x2954430
	bool SaveIntValue(int inInt);// 0x2954390
	bool SaveFloatValue(float InFloat);// 0x2954300
	bool SaveBoolValue(bool InBool);// 0xe743d0
	void Save();// 0x29542e0
	float RoundToNearestValueFloat(float ValueToRound);// 0x2954250
	void RevertSettingToDefault();// 0x26fff70
	void Revert();// 0x29541b0
	void ResetPreview();// 0x2954190
	void OnValueKeyBindSaved(KSKeyBind SavedKeyBind);// 0x2954010
	void OnValueKeyBindApplied(KSKeyBind AppliedKeyBind);// 0x2953e90
	void OnValueIntSaved(int SavedInt);// 0x2953e00
	void OnValueIntApplied(int AppliedInt);// 0x2953d70
	void OnValueFloatSaved(float SavedFloat);// 0x2953ce0
	void OnValueFloatApplied(float AppliedFloat);// 0x2953c50
	void OnValueBoolSaved(bool SavedBool);// 0x2953bc0
	void OnValueBoolApplied(bool AppliedBool);// 0x2953b30
	bool IsValidValueKeyBind(KSKeyBind InKey);// 0x29539e0
	bool IsValidValueInt(int inInt);// 0x2953940
	bool IsValidValueFloat(float InFloat);// 0x29538b0
	bool IsValidValueBool(bool InBool);// 0x2953810
	bool IsDirty();// 0x29537a0
	void InitializeValue();// 0x2601810
	KSKeyBind GetValueKeyBind();// 0x2953610
	int GetValueInt();// 0x29535e0
	float GetValueFloat();// 0x29535b0
	bool GetValueBool();// 0x2953580
	FText[] GetTextOptions();// 0x2953470
	FText GetTextOption(int Index);// 0x2953280
	float GetStep();// 0x2953260
	enum GetSettingType();// 0x2953230
	float GetRoundToNearest();// 0x2952e80
	bool GetRound();// 0x27a23c0
	int GetPreviewValueInt();// 0x2952e50
	float GetPreviewValueFloat();// 0x2952e10
	bool GetPreviewValueBool();// 0x2952de0
	int GetNumTextOptions();// 0x262bb80
	float GetMinDisplay();// 0x2952da0
	float GetMin();// 0x2952d80
	float GetMaxDisplay();// 0x2952d40
	float GetMax();// 0x2952d20
	KSHUDCommon* GetKSHUD();// 0x2952cc0
	bool GetIsPercent();// 0xe69060
	KSKeyBind GetDirtyValueKeyBind();// 0x2952ae0
	int GetDirtyValueInt();// 0x2952ab0
	float GetDirtyValueFloat();// 0x2952a70
	bool GetDirtyValueBool();// 0x2952a40
	KSKeyBind FixupInvalidKeyBind(KSKeyBind InKey);// 0x2951dc0
	int FixupInvalidInt(int inInt);// 0x2951d20
	float FixupInvalidFloat(float InFloat);// 0x2951c90
	bool FixupInvalidBool(bool InBool);// 0x2951bf0
	bool CanRevert();// 0x2951bb0
	bool ApplyPreviewIntValue(int inInt);// 0x2951740
	bool ApplyPreviewFloatValue(float InFloat);// 0x29516b0
	bool ApplyPreviewBoolValue(bool InBool);// 0x2951610
	void ApplyPreview();// 0x29515f0
	bool ApplyKeyBindValue(KSKeyBind InKeyBind);// 0x29513c0
	bool ApplyIntValue(int inInt);// 0x2951320
	bool ApplyFloatValue(float InFloat);// 0x2951290
	bool ApplyBoolValue(bool InBool);// 0x29511f0
	void Apply();// 0x29511d0

--------------------------------
Class: KSKeyBind
	Key Primary;//[Offset: 0x0, Size: 1]
	enum PrimaryInputActionType;//[Offset: 0x18, Size: 1]
	Key Secondary;//[Offset: 0x20, Size: 1]
	enum SecondaryInputActionType;//[Offset: 0x38, Size: 1]
	Key Gamepad;//[Offset: 0x40, Size: 1]
	Key Combo;//[Offset: 0x58, Size: 1]
	enum GamepadInputActionType;//[Offset: 0x70, Size: 1]

--------------------------------
Class: KSSettingsWidgetConfig
	class KSSettingsWidget* WidgetClass;//[Offset: 0x0, Size: 1]
	class KSSettingsInfoBase* SettingInfo;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSettingsWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	KSSettingsWidgetConfig WidgetConfig;//[Offset: 0x528, Size: 1]
	FText WidgetContainerTitle;//[Offset: 0x538, Size: 1]
	FText WidgetContainerDescription;//[Offset: 0x550, Size: 1]
	bool bHasPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	KSSettingsPreview* WidgetContainerPreviewWidget;//[Offset: 0x570, Size: 1]
	KSSettingsInfoBase* SettingsInfo;//[Offset: 0x578, Size: 1]
	void SaveSetting();// 0x2958ed0
	void RevertSetting();// 0x2958eb0
	void OnWidgetSettingsInfoSet();// 0x2cbecb0
	void OnWidgetContainerTitleSet();// 0x2cbecb0
	void OnWidgetContainerPreviewSet();// 0x2cbecb0
	void OnWidgetContainerDescriptionSet();// 0x2cbecb0
	void OnWidgetConfigSet();// 0x2cbecb0
	void OnSettingsInfoValueChanged(bool bChangedExternally);// 0x2cbecb0
	void OnInputAttached(bool bGamepadAttached, bool bMouseAttached);// 0x2cbecb0
	bool IsSaved();// 0x2958ab0
	bool IsApplied();// 0x2958a50
	bool HasPreview();// 0x270d650
	bool CanGamepadNavigate();// 0x26ff2d0
	void ApplySetting();// 0x2958630

--------------------------------
Class: KSChatDataFactory.PUMG_ChatDataFactory.PUMG_DataFactory.Object

--------------------------------
Class: PUMG_ChatDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnChatMessageReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnChatMessageRead;//[Size: 1]
	MulticastInlineDelegateProperty OnChatChannelJoined;//[Size: 1]
	MulticastInlineDelegateProperty OnChatChannelLeft;//[Size: 1]
	int[] ChatMessageIds;//[Offset: 0x78, Size: 1]
	int[] PendingChatMessageIds;//[Offset: 0x88, Size: 1]
	<int,PUMG_ChatData> ChatMessagesById;//[Offset: 0x98, Size: 1]
	int LastCreatedMessageId;//[Offset: 0xe8, Size: 1]
	int64[] m_FilteredPlayerIds;//[Offset: 0xf0, Size: 1]
	PUMG_ChatCommand[] ChatCommands;//[Offset: 0x100, Size: 1]
	void SetMaxMessageCount(int MaxMessageCount);// 0xe65ac0
	void SendChatToPlayer(FString Message, int64 TargetPlayerId);// 0xe659e0
	void SendChatToChannel(FString Message, enum Channel);// 0xe65900
	bool RemovePlayerFilter(int64 PlayerId);// 0xe65870
	bool RemoveChatCommand(FString Command);// 0xe657c0
	bool RemoveAllChatCommands(Object* Target);// 0xe65730
	void QueueCheckPendingMessages();// 0xe656f0
	void MarkMessageAsRead(int MessageId);// 0xe655b0
	void ListChatCommands();// 0xe65590
	bool IsValidMessage(out const PUMG_ChatData Message);// 0xe65460
	bool IsPlayerFilteredFromChat(int64 PlayerId);// 0xe653d0
	void HandleCommunicationSettingChanged();// 0xe652e0
	PUMG_ChatData GetMessage(int MessageId);// 0xe65190
	int GetMaxMessageCount();// 0xe65160
	enum GetChatPrivilegeStatus();// 0xe64e30
	void GetActiveChatChannels(bool IncludePersonalChannel, out PUMG_ActiveChatChannelData[] ActiveChatChatChannels);// 0xe64470
	int FindChatCommandIndex(FString Command);// 0xe643c0
	bool ExecuteChatCommandLine(FString CommandLine);// 0xe64310
	void CheckPendingMessages();// 0xe642f0
	void BeginProcessingChatMessage(out PUMG_ChatData Message);// 0xe64200
	void AddSystemMessage(out const FText Message);// 0xe64130
	bool AddPlayerFilter(int64 PlayerId);// 0xe640a0
	void AddGameMessage(out const FText Message, enum Channel);// 0xe63f80
	bool AddChatCommand(FString Command, out const FText Desc, Object* Target, FString Function, FString Alias1, FString Alias2, FString Alias3, FString Alias4);// 0xe63c70

--------------------------------
Class: PUMG_ChatData
	PUMG_PlayerInfo* Sender;//[Offset: 0x0, Size: 1]
	PUMG_PlayerInfo* Recipient;//[Offset: 0x8, Size: 1]
	FText Message;//[Offset: 0x10, Size: 1]
	bool IsOwnMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool IsSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool SystemMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool IsReplayedMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	enum ChatChannel;//[Offset: 0x2c, Size: 1]
	enum ChatPhase;//[Offset: 0x2d, Size: 1]
	enum UserPrivilege;//[Offset: 0x2e, Size: 1]
	enum PortalTextFilterStatus;//[Offset: 0x2f, Size: 1]
	int MessageId;//[Offset: 0x30, Size: 1]
	int64 MctsMessageId;//[Offset: 0x38, Size: 1]

--------------------------------
Class: PUMG_ActiveChatChannelData
	enum ChatChannel;//[Offset: 0x0, Size: 1]
	PUMG_PlayerInfo* PersonalChannelPlayer;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PUMG_ChatCommand
	FString Function;//[Offset: 0x0, Size: 1]
	FString[] Commands;//[Offset: 0x10, Size: 1]
	FText Desc;//[Offset: 0x20, Size: 1]
	Object* Target;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSPartyDataFactory.PUMG_PartyDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnEmoteMessageReceived;//[Size: 1]
	void SetSelectedQueueId(int QueueId);// 0x2937df0
	void PlayEmoteInParty(KSEmote* Emote);// 0x29377d0
	int GetSelectedQueueId();// 0x2936c10
	int GetPartyMinimumLevel();// 0x2936a80
	int GetHighestDeserterPenaltySeconds();// 0x2936800
	bool CanPartyQueueForRanked(FString RankedSeasonKey);// 0x29360c0
	void BroadcastPartyInvitationError(FText InvitationError);// 0x2935fe0

--------------------------------
Class: KSNPEDataFactory.PUMG_DataFactory.Object
	void UIX_ClaimTutorialActivity();// 0x2933230
	void UIX_ClaimRegionSelectedActivity();// 0x2933210
	void SkipTutorial();// 0x29331f0
	bool ShouldForceTutorial();// 0x2933130
	void QueueTutorial();// 0x2932c30
	bool HasClaimedActivity(out const GameplayTag ActivityTag);// 0x2932850
	KSQueueDataFactory* GetQueueDataFactory();// 0x2932220
	void ClaimActivity(out const GameplayTag ActivityTag);// 0x2931ef0

--------------------------------
Class: KSQueueDataFactory.PUMG_QueueDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnSetQueueId;//[Size: 1]
	MulticastInlineDelegateProperty OnQueueErrorRelevantStateChanged;//[Size: 1]
	int ChunksInstallingQueueId;//[Offset: 0x288, Size: 1]
	int DefaultQueueId;//[Offset: 0x28c, Size: 1]
	float CancelJoinMatchDelay;//[Offset: 0x294, Size: 1]
	MulticastInlineDelegateProperty OnSetQueueInputState;//[Size: 1]
	int64[] PreviousCustomMatchMemberIds;//[Offset: 0x2a8, Size: 1]
	int SelectedQueueId;//[Offset: 0x2b8, Size: 1]
	float TimeoutForQueueSwitch;//[Offset: 0x2bc, Size: 1]
	bool bWaitingOnLeaveForQueueSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bWaitingOnJoinForQueueSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	int MaxRetriesForAlternateQueue;//[Offset: 0x2c4, Size: 1]
	float TimeBetweenRetriesForAlternateQueue;//[Offset: 0x2c8, Size: 1]
	float RetryingDisplayTime;//[Offset: 0x2cc, Size: 1]
	bool bRetryingViaAutoRejoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool AttemptRejoinMatchFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int NumRetriesForAlternateQueue;//[Offset: 0x2e4, Size: 1]
	MapDetail[] MapInfos;//[Offset: 0x2e8, Size: 1]
	DataTable* QueueDetailDataTable;//[Offset: 0x2f8, Size: 1]
	void WithdrawAlternateQueue();// 0x2943790
	void StopDisplayingRetrying();// 0x2943690
	ClientQueueInfo[] SortQueues(ClientQueueInfo[] ClientCachedQueueInfo, bool IsAlphanumerical);// 0x2943480
	bool SetSelectedQueueId(int QueueId);// 0x2943340
	void SetPreviousCustomMatchMemberIds(int64[] PreviousMembers);// 0x2943260
	void RetryJoinAlternateQueue(int QueueId);// 0x2942e80
	bool QualifiesForShelteredMM(int QueueId, out const ClientQueueInfo QueueInfo, out bool RetryFlag);// 0x2942c70
	bool QualifiesForMercyMatch(int QueueId, out const ClientQueueInfo QueueInfo, out bool RetryFlag);// 0x2942a60
	bool QualifiesForForcedBots(int QueueId, out const ClientQueueInfo QueueInfo, out bool RetryFlag);// 0x2942850
	bool QualifiesForBackfill(int QueueId);// 0x29427c0
	void PopulateMapInfos();// 0x29426e0
	void OnPartyMemberUpdate(PUMG_PartyMemberData Member);// 0x2942480
	void OnPartyMemberEvent(int64 PlayerId);// 0x2942400
	void OnPartyEvent();// 0x29423e0
	void OnInputStateChanged(byte InputState);// 0x2942360
	bool JoinSelectedQueue();// 0x2942320
	bool IsTutorialQueue(int QueueId);// 0x2942290
	bool IsRankedQueue(int QueueId);// 0x2942200
	bool IsQueueAvailableOnPlatform(out const PUMG_ClientQueueInfo QueueInfo);// 0x2942080
	bool IsCustomSpectateEnabled();// 0xe6f810
	void HandleShelteredMMTimeout(int QueueId);// 0x2941f30
	void HandleQueueSwitchLeave(int QueueId);// 0x2941eb0
	void HandleQueueSwitchJoin(int QueueId);// 0x2941e30
	void HandleQueueSwitchFinish(bool bSendNotify, bool bClearTimer);// 0x2941d60
	void HandlePracticeDiversionTimeout(int QueueId);// 0x2941ce0
	void HandleBackfillTimeout(int QueueId);// 0x2941c60
	void HandleBackfillJoinMatchTimeout();// 0x2941c40
	int GetSelectedShelteredQueueId();// 0x2941bb0
	int GetSelectedQueueId();// 0x2941b80
	bool GetQueueInfoById(int QueueId, out ClientQueueInfo InClientQueueInfo);// 0x29419d0
	int GetPenaltyTime();// 0x2941720
	bool GetMapRotationsByQueueId(int QueueId, out int[] MapIds);// 0x2941590
	bool GetMapInfoById(int MapId, out MapDetail MapDetail);// 0x2941440
	int GetLastJoinedQueueId();// 0x2941410
	ClientQueueInfo[] GetCustomQueues();// 0x29413c0
	bool GetCurrentCustomMatchInfo(out ClientQueueInfo InClientQueueInfo);// 0x2941250
	float GetCancelJoinMatchDelay();// 0x2941150
	KSActivity* GetActivityByGameplayTag(out const GameplayTag ActivityTag);// 0x2941080
	static bool FormatQueueJoinErrorMessage(out const ClientQueueInfo Queue, enum Error, out FText OutErrorMessage);// 0x2940db0
	enum CheckQueueJoinableById(int QueueId, bool allowHidden);// 0x2940c80
	enum CheckQueueJoinable(out const ClientQueueInfo Queue, bool allowHidden);// 0x2940ac0

--------------------------------
Class: MapDetail
	int MapId;//[Offset: 0x0, Size: 1]
	FText mapName;//[Offset: 0x8, Size: 1]
	Texture2D* MapThumbnail;//[Offset: 0x20, Size: 1]

--------------------------------
Class: ClientQueueInfo.PUMG_ClientQueueInfo
	Texture2D* ItemIcon;//[Offset: 0x50, Size: 1]
	enum QueueType;//[Offset: 0x78, Size: 1]
	UIMapInfo[] MapRotationInfos;//[Offset: 0x80, Size: 1]
	MapDetail[] MapList;//[Offset: 0x90, Size: 1]
	int MaxPlayerPerSide;//[Offset: 0xa0, Size: 1]
	int SortOrder;//[Offset: 0xa4, Size: 1]
	FString SoloURL;//[Offset: 0xa8, Size: 1]
	int ShelteredMMQueueId;//[Offset: 0xb8, Size: 1]
	float ShelteredMMLevelLimit;//[Offset: 0xbc, Size: 1]
	float ShelteredMMAttemptTimeout;//[Offset: 0xc0, Size: 1]
	int ForcedBotMatchQueueId;//[Offset: 0xc4, Size: 1]
	int MercyMatchQueueId;//[Offset: 0xd0, Size: 1]
	int PracticeDiversionQueueId;//[Offset: 0xd8, Size: 1]
	float PracticeDiversionTimeout;//[Offset: 0xdc, Size: 1]
	bool UsesDeserterPenalty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	int RequiredOwnedJobsCount;//[Offset: 0xe4, Size: 1]

--------------------------------
Class: UIMapInfo.TableRowBase
	int[] MapIds;//[Offset: 0x8, Size: 1]
	FText DisplayName;//[Offset: 0x18, Size: 1]
	Texture2D* MapThumbnail;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSPlayerDataFactory.PUMG_PlayerDataFactory.PUMG_DataFactory.Object
	KSPlayerStatsManager* PlayerStatsManager;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty OnPlayerLevelChanged;//[Size: 1]
	bool ShouldDisplayRankedLevel();// 0x2937e70
	void HandlePlayerRankIncremented(KSActivityInstance* ActivityInstance, int Count);// 0x29373f0
	void HandlePlayerRankChanged(KSActivityInstance* Activity, int Tier, int Count);// 0x29372f0
	void HandlePlayerLevelIncremented(KSActivityInstance* ActivityInstance, int Count);// 0x2937230
	void HandlePlayerLevelChanged(KSActivityInstance* Activity, int Tier, int Count);// 0x2937130
	int GetRankedLevel();// 0x2936be0
	float GetPlayerLevelPercent();// 0x2936bb0
	int GetPlayerLevel();// 0x2936b80
	int GetPlayerId();// 0x2936b60
	int GetPlatformXpProgressID();// 0x2936b30
	bool GetOwnedJobsCount(out int OutOwnedJobsCount, bool bIncludeFreeRotation);// 0x2936970
	KSCurrency* GetCurrencyItemByItemId(int CurrencyItemId);// 0x2936770
	int GetCurrencyCountByItemId(int CurrencyItemId);// 0x29366e0

--------------------------------
Class: PUMG_PlayerDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnPlayerDataChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerRankChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCrossplayChanged;//[Size: 1]
	int64 PlayerId;//[Offset: 0x68, Size: 1]
	FString PlayerName;//[Offset: 0x70, Size: 1]
	int Level;//[Offset: 0x80, Size: 1]
	int AvatarId;//[Offset: 0x84, Size: 1]
	int LastMMR;//[Offset: 0x88, Size: 1]
	int CurrentMMR;//[Offset: 0x8c, Size: 1]
	int BestMMR;//[Offset: 0x90, Size: 1]
	int CurrentWinRank;//[Offset: 0x94, Size: 1]
	int PreviousWinRank;//[Offset: 0x98, Size: 1]
	int CurrentWinPeak;//[Offset: 0x9c, Size: 1]
	int PreviousWinPeak;//[Offset: 0xa0, Size: 1]
	int CurrentWinStreak;//[Offset: 0xa4, Size: 1]
	int PreviousWinStreak;//[Offset: 0xa8, Size: 1]
	void OnSelectAvatar(int ItemId);// 0xe701f0
	Texture2D* GetAvatarIcon();// 0xe735c0

--------------------------------
Class: KSStoreItemHelper.PUMG_StoreItemHelper.Object
	int StoreVendorGroupId;//[Offset: 0x298, Size: 1]
	bool StoreVendorsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	MulticastInlineDelegateProperty OnStoreItemNewStatusChange;//[Size: 1]
	<int,PUMG_StoreItem*> ActiveStoreItems;//[Offset: 0x2b0, Size: 1]
	bool StoreHasUnseenItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool RedeemInactiveBoost(int InactiveBoostId);// 0x27978a0
	bool RedeemDLCVoucher(PUMG_StoreItem* DLCVoucher);// 0x2797810
	void OnJsonLoaded(FString JsonName);// 0x2797690
	bool HasUnseenItems();// 0x2797670
	bool HasRecentlySeenItem(int LootId);// 0x27975e0
	AccountConsumableDetails[] GetInactiveBoosts();// 0x2796960
	bool GetBundleByLootId(const int BundleLootId, out PUMG_StoreItem* VoucherItem, out bool bIsOwned);// 0x27961b0
	AccountConsumableDetails[] GetActiveBoosts();// 0x2795ac0

--------------------------------
Class: AccountConsumableDetails
	KSItem* KSItem;//[Offset: 0x0, Size: 1]
	int QuantityOwned;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSettingsColorOptionsAsset.DataAsset.Object
	ColorOptions[] ColorOptions;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ColorOptions
	FText OptionName;//[Offset: 0x0, Size: 1]
	LinearColor OptionColor;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 1]
	Object* FontMaterial;//[Offset: 0x8, Size: 1]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 1]
	FName TypefaceFontName;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x48, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 1]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GameHUDWidget_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x530, Size: 1]
	CanvasPanel* AlwaysPersistant;//[Offset: 0x538, Size: 1]
	CanvasPanel* AlwaysVisible;//[Offset: 0x540, Size: 1]
	Blocker_C* Blocker;//[Offset: 0x548, Size: 1]
	CanvasPanel* Content;//[Offset: 0x550, Size: 1]
	DamageModifierDisplay_C* DamageModifierDisplay;//[Offset: 0x558, Size: 1]
	DeathSpectateOverlay_C* DeathSpectateOverlay;//[Offset: 0x560, Size: 1]
	DownedHealthRemaining_C* DownedHealthRemaining;//[Offset: 0x568, Size: 1]
	WBP_EliminationMessageOverlay_C* ElimNotify;//[Offset: 0x570, Size: 1]
	ExpDisplay_C* ExpDisplay;//[Offset: 0x578, Size: 1]
	FontPreloader_C* FontPreloader;//[Offset: 0x580, Size: 1]
	FontPreloader_C* FontPreloader;//[Offset: 0x588, Size: 1]
	CanvasPanel* GameModeWidgetContainer;//[Offset: 0x590, Size: 1]
	CanvasPanel* GameRuleWidgets;//[Offset: 0x598, Size: 1]
	HitIndictor_C* HitIndictor;//[Offset: 0x5a0, Size: 1]
	CanvasPanel* HUDCanvas;//[Offset: 0x5a8, Size: 1]
	PUMG_CanvasPanel* HUDContent;//[Offset: 0x5b0, Size: 1]
	InvalidationBox* InvalidationBox;//[Offset: 0x5b8, Size: 1]
	KillCam_C* KillCam;//[Offset: 0x5c0, Size: 1]
	WidgetSwitcher* LatencySwitcher;//[Offset: 0x5c8, Size: 1]
	PUMG_CanvasPanel* MainCanvas;//[Offset: 0x5d0, Size: 1]
	MarkerDisplay_C* MarkerDisplay;//[Offset: 0x5d8, Size: 1]
	ModsWidget_C* ModsWidget;//[Offset: 0x5e0, Size: 1]
	OutBound_C* OutBound;//[Offset: 0x5e8, Size: 1]
	PickupNotify_C* PickupNotify;//[Offset: 0x5f0, Size: 1]
	PingNotify_C* PingNotify;//[Offset: 0x5f8, Size: 1]
	CanvasPanel* PopupContent;//[Offset: 0x600, Size: 1]
	PopupManager_C* PopupManager;//[Offset: 0x608, Size: 1]
	WBP_RespawnTimer_C* RespawnTimer;//[Offset: 0x610, Size: 1]
	ResultScreen_C* ResultScreen;//[Offset: 0x618, Size: 1]
	ScopeMagnifier_C* ScopeMagnifier;//[Offset: 0x620, Size: 1]
	StatusEffect_C* StatusEffect;//[Offset: 0x628, Size: 1]
	StatusEffectPermant_C* StatusEffectPermant;//[Offset: 0x630, Size: 1]
	SwimmingHUD_C* SwimmingHUD;//[Offset: 0x638, Size: 1]
	WBP_TextChat_C* TextChat;//[Offset: 0x640, Size: 1]
	WidgetSwitcher* VarianceSwitcher;//[Offset: 0x648, Size: 1]
	VehicleOverlay_C* VehicleOverlay;//[Offset: 0x650, Size: 1]
	WBP_WaitForPlayers_C* WaitingForPlayers;//[Offset: 0x658, Size: 1]
	WBP_Context_Bar_C* WBP_Context_Bar;//[Offset: 0x660, Size: 1]
	WBP_DamageNumberMgr_C* WBP_DamageNumberMgr;//[Offset: 0x668, Size: 1]
	WBP_DurationBarContainer_C* WBP_DurationBarContainer;//[Offset: 0x670, Size: 1]
	WBP_EnemyDetected_C* WBP_EnemyDetected;//[Offset: 0x678, Size: 1]
	WBP_GameTouchHudInstantiator_C* WBP_GameTouchHudInstantiator;//[Offset: 0x680, Size: 1]
	WBP_InGameLoadoutSelect_SwapButton_C* WBP_InGameLoadoutSelect_SwapButton;//[Offset: 0x688, Size: 1]
	WBP_InstanceFUBARNotification_C* WBP_InstanceFUBARNotification;//[Offset: 0x690, Size: 1]
	WBP_InventoryFullWarning_C* WBP_InventoryFullWarning;//[Offset: 0x698, Size: 1]
	WBP_NoGadgetWarning_C* WBP_NoGadgetWarning;//[Offset: 0x6a0, Size: 1]
	WBP_ObjectiveMilestoneMessageQueue_C* WBP_ObjectiveMilestoneMessages;//[Offset: 0x6a8, Size: 1]
	WBP_PlayerAccolades_C* WBP_PlayerAccolades;//[Offset: 0x6b0, Size: 1]
	WBP_PostRogueSelectLoading_C* WBP_PostRogueSelectLoading;//[Offset: 0x6b8, Size: 1]
	WBP_RadialSelect_C* WBP_RadialSelect;//[Offset: 0x6c0, Size: 1]
	WBP_SideSwapNotifyScreen_C* WBP_SideSwapNotifyScreen;//[Offset: 0x6c8, Size: 1]
	WBP_SystemNotify_HighLatency_C* WBP_SystemNotify_HighLatency;//[Offset: 0x6d0, Size: 1]
	WBP_SystemNotify_HighVariance_C* WBP_SystemNotify_HighVariance;//[Offset: 0x6d8, Size: 1]
	WBP_SystemNotify_LossyConnection_C* WBP_SystemNotify_LossyConnection;//[Offset: 0x6e0, Size: 1]
	WBP_SystemNotify_NetworkDisconnect_C* WBP_SystemNotify_NetworkDisconnect;//[Offset: 0x6e8, Size: 1]
	WBP_SystemNotify_TerribleLatency_C* WBP_SystemNotify_TerribleLatency;//[Offset: 0x6f0, Size: 1]
	WBP_SystemNotify_TerribleVariance_C* WBP_SystemNotify_TerribleVariance;//[Offset: 0x6f8, Size: 1]
	WBP_TeamMessage_C* WBP_TeamMessages;//[Offset: 0x700, Size: 1]
	WBP_ToastNotification_Manager_C* WBP_ToastNotification_Manager;//[Offset: 0x708, Size: 1]
	WBP_VoiceActivity_C* WBP_VoiceActivity;//[Offset: 0x710, Size: 1]
	WeaponMenuManager_C* WeaponMenuManager;//[Offset: 0x718, Size: 1]
	WorldMessages_C* WorldMessages;//[Offset: 0x720, Size: 1]
	bool PrimaryNeedReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x728, Size: 1]
	bool SecondaryNeedReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x729, Size: 1]
	class UserWidget* DefaultGameModeWidgetClass;//[Offset: 0x730, Size: 1]
	class UserWidget[] ForceLoadedAssets;//[Offset: 0x738, Size: 1]
	PUMG_GenericRouteDataObject* GotoMapData;//[Offset: 0x748, Size: 1]
	EnemyBombCarrierTracker_C* EnemyBombCarrierTracker;//[Offset: 0x750, Size: 1]
	MulticastInlineDelegateProperty OnGameModeWidgetSet;//[Size: 1]
	UserWidget* GameModeWidget;//[Offset: 0x768, Size: 1]
	PUMG_Widget* Job Selection Manager Instance;//[Offset: 0x770, Size: 1]
	bool Is Constructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	<Object*> HUDHidingObjects;//[Offset: 0x780, Size: 1]
	void Get Job Selection Manager(out PUMG_Widget* Manager Widget);// 0x2cbecb0
	void ShouldVoteBlockMenu(out bool ShouldBlock, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_ShouldVoteBlockMenu_ReturnValue);// 0x2cbecb0
	void FlushVoteInput(PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void ReleasePlayerInputs(enum ReleaseType, PlayerController* CallFunc_GetPlayerController_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void GetFocusableWidgets(out PUMG_Widget*[] OutWIdgets, PUMG_Widget*[] FocusableWidgets, int CallFunc_Array_Add_ReturnValue, int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0
	void InitializeHUDContent(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, Widget* CallFunc_Array_Get_Item, Widget* CallFunc_Array_Get_Item, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, int CallFunc_Array_Length_ReturnValue, Widget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void SetSafeFrame(float Scale);// 0x2cbecb0
	void Add Game Rule Widget(UserWidget* Game Rule Widget, FString Parent Widget, FString GameHUDWidgetString, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, Anchors K2Node_MakeStruct_Anchors, Margin K2Node_MakeStruct_Margin, bool CallFunc_EqualEqual_StrStr_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x2cbecb0
	void InitializeKillCam(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsKillCamWorld_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, LocalPlayer* CallFunc_GetOwningLocalPlayer_ReturnValue, KSLocalPlayer* K2Node_DynamicCast_AsKSLocal_Player, bool K2Node_DynamicCast_bSuccess, KSKillCam* CallFunc_GetKillCam_ReturnValue);// 0x2cbecb0
	void InitializeHudWidgets();// 0x2cbecb0
	void InitializeMapWidgets();// 0x2cbecb0
	void Construct Job Selection Manager(class PUMG_Widget Job Select Manager Class, bool Force Reset);// 0x2cbecb0
	void Try To Construct Job Selection Manager();// 0x2cbecb0
	void Check Job Selection Type();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void Map();// 0x2cbecb0
	void InputListeners();// 0x2cbecb0
	void Menu();// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void SetListenersActive(bool Active);// 0x2cbecb0
	void HandleKillCamEnabled(bool IsEnabled);// 0x2cbecb0
	void RemoveHUDHidingObject(Object* ShowingObjectToRemove);// 0x2cbecb0
	void AddHUDHidingObject(Object* Hiding Object To Add);// 0x2cbecb0
	void ToggleTopBarHUD(bool ShouldShow);// 0x2cbecb0
	void InitializeJobSelectionManager();// 0x2cbecb0
	void HandleOpenTextChat(bool BeginChatCommand);// 0x2cbecb0
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x2cbecb0
	void Handle Viewport Size Changed(IntPoint ViewportSize);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void ToggleTabScreen();// 0x2cbecb0
	void DebugOnePress();// 0x2cbecb0
	void DebugOneRelease();// 0x2cbecb0
	void DebugTwoPress();// 0x2cbecb0
	void DebugTwoRelease();// 0x2cbecb0
	void OnInitialized();// 0x2cbecb0
	void GameStateSet(GameStateBase* GameState);// 0x2cbecb0
	void Destruct();// 0x2cbecb0
	void Setup Game Mode Widget(class UserWidget Game Mode Widget Class);// 0x2cbecb0
	void ExecuteUbergraph_GameHUDWidget(int EntryPoint, enum Temp_byte_Variable, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, class PUMG_Widget K2Node_CustomEvent_Job_Select_Manager_Class, bool K2Node_CustomEvent_Force_Reset, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValidClass_ReturnValue, bool Temp_bool_Variable, KSGameState* CallFunc_GetKSGameState_ReturnValue, enum Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, class PUMG_Widget CallFunc_GetObjectClass_ReturnValue, bool CallFunc_NotEqual_ClassClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, PUMG_Widget* CallFunc_Create_ReturnValue, Anchors K2Node_MakeStruct_Anchors, bool Temp_bool_Variable, PanelSlot* CallFunc_AddChild_ReturnValue, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, Margin K2Node_MakeStruct_Margin, KSGameState* CallFunc_GetKSGameState_ReturnValue, Anchors K2Node_MakeStruct_Anchors, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool K2Node_CustomEvent_Active, bool K2Node_CustomEvent_IsEnabled, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Object* K2Node_CustomEvent_ShowingObjectToRemove, Object* K2Node_CustomEvent_Hiding_Object_To_Add, bool K2Node_CustomEvent_ShouldShow, enum K2Node_Select_Default, bool CallFunc_IsVisible_ReturnValue, enum Temp_byte_Variable, bool K2Node_CustomEvent_BeginChatCommand, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_PlayerInfo* K2Node_CustomEvent_Player, IntPoint K2Node_CustomEvent_ViewportSize, PUMG_HUD* K2Node_Event_hud, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetSafeFrameScale_ReturnValue, BP_GameHUDNew_C* K2Node_DynamicCast_AsBP_Game_HUDNew, bool K2Node_DynamicCast_bSuccess, PUMG_ViewManager* CallFunc_SpawnObject_ReturnValue, bool CallFunc_AddViewRoute_ReturnValue, CanvasPanel*[] K2Node_MakeArray_Array, bool CallFunc_AddViewRoute_ReturnValue, bool CallFunc_RemoveTopViewRoute_ReturnValue, bool CallFunc_RemoveTopViewRoute_ReturnValue, enum Temp_byte_Variable, bool CallFunc_AddViewRoute_ReturnValue, PUMG_GenericRouteDataObject* CallFunc_SpawnObject_ReturnValue, bool CallFunc_AddViewRoute_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Select_Default, bool CallFunc_ShouldVoteBlockMenu_ShouldBlock, bool CallFunc_ShouldVoteBlockMenu_ShouldBlock, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_AllowCheats_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, bool CallFunc_BooleanAND_ReturnValue, GameStateBase* K2Node_Event_GameState, int CallFunc_Set_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Set_Remove_ReturnValue, class UserWidget K2Node_CustomEvent_Game_Mode_Widget_Class, bool CallFunc_IsValidClass_ReturnValue, bool CallFunc_IsKillCamWorld_ReturnValue, Margin K2Node_MakeStruct_Margin, delegate K2Node_CreateDelegate_OutputDelegate, class UserWidget K2Node_Select_Default, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UserWidget* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void OnGameModeWidgetSet__DelegateSignature(UserWidget* GameModeWidget);// 0x2cbecb0

--------------------------------
Class: KSLocalPlayer.PCom_LocalPlayer.LocalPlayer.Player.Object
	MulticastInlineDelegateProperty OnLocalViewedPawnChangedDel;//[Size: 1]
	KSKillCam* KillCam;//[Offset: 0x288, Size: 1]
	class KSKillCamController* KillCamControllerClass;//[Offset: 0x290, Size: 1]
	bool IsKillCamReplayActive();// 0x26ebed0
	World* GetRealWorld();// 0x26ebd20
	KSKillCam* GetKillCam();// 0x26ebb60

--------------------------------
Class: PCom_LocalPlayer.LocalPlayer.Player.Object

--------------------------------
Class: KSKillCam.Object
	class KSKillCamController* KillCamControllerClass;//[Offset: 0x28, Size: 1]
	World* KillCamWorld;//[Offset: 0x30, Size: 1]
	Package* KillCamWorldPackage;//[Offset: 0x38, Size: 1]
	KSKillCamController* KillCamSpectatorController;//[Offset: 0x40, Size: 1]
	<AkComponent*,float> OriginalWorldMutedAudio;//[Offset: 0x48, Size: 1]
	MulticastInlineDelegateProperty OnKillCamEnabled;//[Size: 1]
	MulticastInlineDelegateProperty OnKillCamViewPawn;//[Size: 1]
	MulticastInlineDelegateProperty OnKillCamViewProjectile;//[Size: 1]
	MulticastInlineDelegateProperty OnPrepareKillCamPlayback;//[Size: 1]
	MulticastInlineDelegateProperty OnFinishKillCamPlayback;//[Size: 1]
	void KillCamStop();// 0x26e7190
	void DestroySpectatorController();// 0x26e3110

--------------------------------
Class: KSKillCamController.KSPlayerController.PGame_PlayerController.PlayerController.Controller.Actor.Object
	KSKillCamObjectCamera* KillCamObjectCamera;//[Offset: 0x1068, Size: 1]

--------------------------------
Class: KSKillCamObjectCamera.Actor.Object
	KSSpringArmComponent* MainCameraBoom;//[Offset: 0x220, Size: 1]
	CameraComponent* MainCameraComponent;//[Offset: 0x228, Size: 1]
	SceneComponent* EmptyComponent;//[Offset: 0x230, Size: 1]

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 1]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 1]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 1]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 1]
	int WindowPosX;//[Offset: 0x90, Size: 1]
	int WindowPosY;//[Offset: 0x94, Size: 1]
	int FullscreenMode;//[Offset: 0x98, Size: 1]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 1]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 1]
	uint32 Version;//[Offset: 0xa4, Size: 1]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 1]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 1]
	float FrameRateLimit;//[Offset: 0xb0, Size: 1]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 1]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 1]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 1]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 1]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 1]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 1]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 1]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 1]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 1]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 1]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 1]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 1]
	MulticastInlineDelegateProperty OnGameUserSettingsUINeedsUpdate;//[Size: 1]
	void ValidateSettings();// 0x2673a70
	bool SupportsNGXDLSS();// 0x44af130
	bool SupportsNGX();// 0x44af100
	bool SupportsHDRDisplayOutput();// 0x44af0d0
	void SetVSyncEnabled(bool bEnable);// 0x44aef40
	void SetVisualEffectQuality(int Value);// 0x44af050
	void SetViewDistanceQuality(int Value);// 0x44aefd0
	void SetToDefaults();// 0x44aef20
	void SetTextureQuality(int Value);// 0x44aeea0
	void SetShadowQuality(int Value);// 0x44aee20
	void SetShadingQuality(int Value);// 0x44aeda0
	void SetScreenResolution(IntPoint Resolution);// 0x44aed20
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x44aeca0
	void SetResolutionScaleValue(int NewScaleValue);// 0x44aec20
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x44aeba0
	void SetPostProcessingQuality(int Value);// 0x44aeb20
	void SetOverallScalabilityLevel(int Value);// 0x44aea90
	void SetFullscreenMode(byte InFullscreenMode);// 0x44aea10
	void SetFrameRateLimit(float NewLimit);// 0x44ae990
	void SetFoliageQuality(int Value);// 0x44ae910
	void SetDynamicResolutionEnabled(bool bEnable);// 0x44ae880
	void SetBenchmarkFallbackValues();// 0x44ae860
	void SetAudioQualityLevel(int QualityLevel);// 0x44ae7e0
	void SetAntiAliasingQuality(int Value);// 0x44ae760
	void SaveSettings();// 0x4483990
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x44ae660
	void RevertVideoMode();// 0x44ae640
	void ResetToCurrentSettings();// 0x27df6b0
	void NGXDriverUpdateRequired(out bool DriverOutOfDate, out int MinDriverVersionMajor, out int MinDriverVersionMinor);// 0x44ae510
	void LoadSettings(bool bForceReload);// 0x44ae480
	bool IsVSyncEnabled();// 0x44ae450
	bool IsVSyncDirty();// 0x44ae420
	bool IsScreenResolutionDirty();// 0x44ae3f0
	bool IsHDREnabled();// 0x44ae3c0
	bool IsFullscreenModeDirty();// 0x44ae390
	bool IsDynamicResolutionEnabled();// 0x44ae360
	bool IsDynamicResolutionDirty();// 0x44ae330
	bool IsDirty();// 0x44ae300
	int GetVisualEffectQuality();// 0x44ae2a0
	int GetViewDistanceQuality();// 0x44ae270
	int GetTextureQuality();// 0x44ae240
	static int GetSyncInterval();// 0x44ae210
	int GetShadowQuality();// 0x44ae1e0
	int GetShadingQuality();// 0x44ae1b0
	IntPoint GetScreenResolution();// 0x44ae130
	float GetResolutionScaleNormalized();// 0x44ae100
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x44adf60
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x44addc0
	float GetRecommendedResolutionScale();// 0x44add80
	byte GetPreferredFullscreenMode();// 0x44add50
	int GetPostProcessingQuality();// 0x44add20
	int GetOverallScalabilityLevel();// 0x44adbb0
	IntPoint GetLastConfirmedScreenResolution();// 0x44adb70
	byte GetLastConfirmedFullscreenMode();// 0x44adb40
	static GameUserSettings* GetGameUserSettings();// 0x44adb10
	byte GetFullscreenMode();// 0x44adae0
	float GetFrameRateLimit();// 0x44adab0
	static int GetFramePace();// 0x44ada80
	int GetFoliageQuality();// 0x44ada50
	IntPoint GetDesktopResolution();// 0x44ada10
	static IntPoint GetDefaultWindowPosition();// 0x44ad9d0
	static byte GetDefaultWindowMode();// 0x44ad9a0
	float GetDefaultResolutionScale();// 0x44ad960
	static IntPoint GetDefaultResolution();// 0x44ad920
	int GetCurrentHDRDisplayNits();// 0x44ad8f0
	int GetAudioQualityLevel();// 0x39e4220
	int GetAntiAliasingQuality();// 0x1f698c0
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x44ad830
	void ConfirmVideoMode();// 0x2791ca0
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x44ad600
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x44ad570
	void ApplyNonResolutionSettings();// 0x26fff70
	void ApplyHardwareBenchmarkResults();// 0x44ad550

--------------------------------
Class: KSGameUserSettings.GameUserSettings.Object
	int SettingsVersionMajor;//[Offset: 0x158, Size: 1]
	int SettingsVersionMinor;//[Offset: 0x15c, Size: 1]
	enum GamepadIconSet;//[Offset: 0x160, Size: 1]
	IntPoint DefaultScreenResolution;//[Offset: 0x164, Size: 1]
	IntPoint SavedScreenResolution;//[Offset: 0x16c, Size: 1]
	FString SavedDisplayLanguage;//[Offset: 0x1d8, Size: 1]
	int LastJoinedQueuePrimaryId;//[Offset: 0x1e8, Size: 1]
	int SavedSelectedRegion;//[Offset: 0x1ec, Size: 1]
	int LastWhatsNewVersion;//[Offset: 0x1f0, Size: 1]
	int[] SavedTransientAcquisitionIds;//[Offset: 0x1f8, Size: 1]
	int[] SavedReadMailMessageIds;//[Offset: 0x208, Size: 1]
	<FName> SavedViewedNewsPanelIds;//[Offset: 0x218, Size: 1]
	int SavedChallengeVersionId;//[Offset: 0x268, Size: 1]
	<int> SavedViewedChallengeIds;//[Offset: 0x270, Size: 1]
	<int> SavedRecentlySeenStoreItemLootIds;//[Offset: 0x2c0, Size: 1]
	<int> SavedSeenAcquiredItemIds;//[Offset: 0x310, Size: 1]
	<int,int> SavedSeenSlotUnlockItemMap;//[Offset: 0x360, Size: 1]
	<int> SavedPinnedJobIds;//[Offset: 0x3b0, Size: 1]
	<FName,FString> SavedSettingsConfig;//[Offset: 0x400, Size: 1]
	<FName> SavedLocalActions;//[Offset: 0x450, Size: 1]
	MulticastInlineDelegateProperty OnGamepadIconSetSettingsApplied;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalSettingSaved;//[Size: 1]
	MulticastInlineDelegateProperty OnSettingApplied;//[Size: 1]
	void SaveLocalAction(out const FName Name);// 0x26c4210
	bool IsLocalActionSaved(out const FName Name);// 0x26c3ea0
	bool GetVoiceChatEnabled();// 0x26c3d00
	bool GetUseQuickCast();// 0x26c3b70
	bool GetTextChatEnabled();// 0x26c3b20
	float GetSafeFrameScale();// 0x26c3a60
	bool GetQuipsEnabled();// 0x26c38e0
	enum GetMuteMode();// 0x26c38b0
	enum GetCrosshairSize();// 0x26c37c0
	bool GetCommunicationsEnabled();// 0x26c3790
	enum GetColorCorrection();// 0x26c3760

--------------------------------
Class: Blocker_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Button* Closer;//[Offset: 0x530, Size: 1]
	Image* Image;//[Offset: 0x538, Size: 1]
	PUMG_UnsafeZone* PUMG_UnsafeZone;//[Offset: 0x540, Size: 1]
	PUMG_Widget* Target;//[Offset: 0x548, Size: 1]
	bool ClickToClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	void BndEvt__Closer_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void Bind(PUMG_Widget* Widget, bool ClickToClose);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void HandleBlockerChange(bool Show, UserWidget* InWidget);// 0x2cbecb0
	void ExecuteUbergraph_Blocker(int EntryPoint, PUMG_HUD* K2Node_Event_hud, bool CallFunc_NavigateBack_ReturnValue, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_Show, UserWidget* K2Node_CustomEvent_InWidget, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, PanelWidget* CallFunc_GetParent_ReturnValue, PUMG_CanvasPanel* K2Node_DynamicCast_AsPUMG_Canvas_Panel, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_Widget* K2Node_CustomEvent_Widget, bool K2Node_CustomEvent_ClickToClose);// 0x2cbecb0

--------------------------------
Class: KSLobbyHUDNew.KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	MulticastInlineDelegateProperty OnMinuteTimerUpdate;//[Size: 1]
	KSQueueDataFactory* QueueDataFactory;//[Offset: 0x648, Size: 1]
	KSFriendDataFactory* FriendDataFactory;//[Offset: 0x650, Size: 1]
	KSPlayerQueryDataFactory* PlayerQueryDataFactory;//[Offset: 0x658, Size: 1]
	KSEMODataFactory* EMODataFactory;//[Offset: 0x660, Size: 1]
	KSPlayerWhoDataFactory* PlayerWhoDataFactory;//[Offset: 0x668, Size: 1]
	KSSimulmediaDataFactory* SimulmediaDataFactory;//[Offset: 0x670, Size: 1]
	KSMailCenterDataFactory* MailCenterDataFactory;//[Offset: 0x678, Size: 1]
	KSMediaPlayerWidget* CurrentMediaPlayerWidget;//[Offset: 0x680, Size: 1]
	MulticastInlineDelegateProperty OnTriggerBlockerChange;//[Size: 1]
	MulticastInlineDelegateProperty LobbyWidgetReady;//[Size: 1]
	float LoadingScreenFadeInDelay;//[Offset: 0x6cc, Size: 1]
	float LoadingScreenFadeInDuration;//[Offset: 0x6d0, Size: 1]
	void TransitionCamera(FName CameraTag, float BlendTime);// 0x29253b0
	void ToggleDisablePartyLobbyCharacters(bool Disable);// 0x2925320
	void TestSetStoreRotationOverride(FString DateTime);// 0x2925240
	void TestPostMatchLobbyMobileWeapons(int Count, float ExpMultiplier);// 0x2925170
	void TestPostMatchLobbyMobileEasy(float ExpMultiplier);// 0x29250f0
	void TestPostMatchLobbyMobile(int StartingMobileXp, int MobileSecondsPlayed, int MobileGunKills, int MobileGadgetKills, int MobileAbilityKills, int MobileMeleeKills, int MobileThrownKills);// 0x2924f00
	void TestPostMatchLobby(int PlayerXp, int RankedXp, int RogueXp, int ReputationEarned, int PlacementMatchNum, int BattlePassXp, int WeaponMasteryCount, int WeaponMasteryLevels, bool CategoryMasteryCanLevel, int MilestonesPerWeapon);// 0x2924c50
	void TestMediaPlayerUrl(FString MediaUrl, int WatchTimer);// 0x2cbecb0
	void TestEventGrandPrizeAcquisition();// 0x2924c30
	void TestBattlePassAcquisition(int StartTier, int EndTier);// 0x2924b70
	void ShowPopupConfirmation(FText Message, enum MessageType);// 0x2924a50
	void ResetMobileProgressionCTA();// 0x2924990
	void ResetLobbyCharactersByIndex(enum[] IndicesToReset);// 0x29248b0
	void ResetLobbyCharacters();// 0x2924890
	void OnStoreVendorsLoaded(int GroupId, out const int[] VendorIds);// 0x29246b0
	void OnNotEnoughCurrency(PUMG_StorePurchaseRequest* PurchaseRequest);// 0x2924630
	bool IsPlayerMuted(PUMG_PlayerInfo* PlayerData);// 0x29245a0
	void HandleSpecificPartyIdDataUpdated(int64 PlayerId);// 0x2924490
	void HandleSpecificPartyDataUpdated(PUMG_PartyMemberData PartyMember);// 0x2924360
	void HandleSpecificPartyDataAdded(PUMG_PartyMemberData PartyMember);// 0x2924360
	void HandlePartyMemberDataUpdated(out const PUMG_PartyMemberData PartyMember, int MemberIndex);// 0x2924210
	void HandlePartyEmoteMessageReceived(PUMG_PlayerInfo* Sender, KSEmote* SoftEmotePtr);// 0x2924100
	void HandlePartyDataUpdated();// 0x29240e0
	void HandleMatchStatusUpdated(enum MatchStatus);// 0x2cbecb0
	void HandleLoginUserChange();// 0xd76f80
	void HandleLoginStateChange(enum LoginState);// 0x2924060
	void HandleDenyPartyInvitation();// 0x2924040
	void HandleAcceptPartyInvitation();// 0x2923f90
	KSSimulmediaDataFactory* GetSimulmediaDataFactory();// 0x2923e60
	KSPlayerWhoDataFactory* GetPlayerWhoDataFactory();// 0x2923e20
	KSPlayerQueryDataFactory* GetPlayerQueryDataFactory();// 0x2923e00
	KSMailCenterDataFactory* GetMailCenterDataFactory();// 0x2923d30
	KSLobbyWidget* GetLobbyWidget();// 0x2923b70
	bool GetLobbyCharacterByPosition(enum CharacterIndex, out KSLobbyCharacter* LobbyCharacter);// 0x2923aa0
	KSQueueDataFactory* GetKSQueueDataFactory();// 0x2923a70
	KSJsonDataFactory* GetJsonDataFactory();// 0x2923a30
	bool GetJobSelectPreviewActorByPosition(enum CharacterIndex, out KSJobSelectPreviewActor_Lobby* PreviewActor);// 0x2923960
	KSFriendDataFactory* GetFriendDataFactory();// 0x2923920
	KSEMODataFactory* GetEMODataFactory();// 0x2923830
	KSItem* GetDefaultPlayerAccountItem(enum ItemSlot);// 0x2cbecb0
	bool GetCharacterIndexFromPartyIndex(int PartyMemberIndex, out enum OutCharIndex);// 0x2923590
	void ForceMinuteTimerUpdate();// 0x2923470
	void ForceEulaAccept();// 0x2923450
	void FlushMobileTestData();// 0x2923430
	void CreateInitialPlayerLoadout();// 0x2923310
	void CheckForExistingPenaltyTime();// 0x29232f0
	void AddMobileTestData(int ActivityVendorID, int ProgressionAmount);// 0x29231c0

--------------------------------
Class: KSFriendDataFactory.PUMG_FriendDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnUpdateRecentlyPlayedPlayers;//[Size: 1]
	void OnEOMRewardsReceived(PlayerRewardsSummary PlayerRewardsSummary, ScoreboardStats ScoreboardStats);// 0x29129c0
	void KSUpdateRecentlyPlayedPlayers__DelegateSignature(KSFriendDataFactory* Source);// 0x2cbecb0
	PUMG_PlayerInfo*[] GetSuggestedFriends_Info();// 0x2912410
	KSPlayerInfo*[] GetPlayersPlayedWithThisClientSession_Info();// 0x2912360
	PUMG_PlayerInfo*[] GetPendingFriends_Info();// 0x29122e0
	PUMG_PlayerInfo*[] GetOnlineFriends_Info();// 0x2912260
	PUMG_PlayerInfo*[] GetFriends_Info();// 0x2911fa0
	PUMG_PlayerInfo*[] GetFriendRequests_Info();// 0x2911f20

--------------------------------
Class: PUMG_FriendDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnFriendDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendAddSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendAddError;//[Size: 1]
	MulticastInlineDelegateProperty FriendInviteReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendRejected;//[Size: 1]
	int OnlineFriends;//[Offset: 0x98, Size: 1]
	int TotalFriends;//[Offset: 0x9c, Size: 1]
	PUMG_FriendData[] CachedFriends;//[Offset: 0xa0, Size: 1]
	PUMG_FriendData[] CachedPendingFriends;//[Offset: 0xb0, Size: 1]
	PUMG_FriendData[] CachedFriendRequests;//[Offset: 0xc0, Size: 1]
	float FriendsListUpdatePollInterval;//[Offset: 0x100, Size: 1]
	TimerHandle FriendsListUpdatePollingTimerHandle;//[Offset: 0x108, Size: 1]
	bool IsFriendsListUpdatePollingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	void UIX_OnRemoveFriend(int64 PlayerId);// 0xe6aac0
	void UIX_OnRejectFriendRequest(int64 PlayerId);// 0xe6aa40
	void UIX_OnCancelFriendRequest(int64 PlayerId);// 0xe6a9c0
	void UIX_OnAddFriend(const PUMG_PlayerInfo* playerinfo);// 0xe6a940
	void UIX_OnAcceptFriendRequest(int64 PlayerId);// 0xe6a8c0
	void SetEnableFriendsListUpdatePolling(bool InBool);// 0xe6a1a0
	void RequestUpdateFriendsList();// 0xe69d10
	bool IsCrossplaySocialEnabled();// 0xe698e0
	void HandleFriendsListUpdatePolling();// 0xe697c0
	void HandleCrossplaySettingChanged();// 0xe697a0
	PUMG_FriendData[] GetPendingFriends();// 0xe69640
	PUMG_FriendData[] GetFriends();// 0xe694a0
	PUMG_FriendData[] GetFriendRequests();// 0xe693b0
	FText GetFriendName(int64 PlayerId);// 0xe692c0
	Texture2D* GetFriendAvatarTexture(PUMG_FriendData Friend);// 0xe69150
	bool GetEnableFriendsListUpdatePolling();// 0xe69060
	void FriendRemoveResponse();// 0xe68f90
	bool CheckAlreadyFriends(FString FriendName);// 0xe68b30

--------------------------------
Class: PUMG_FriendData
	PUMG_PlayerInfo* PlayerData;//[Offset: 0x0, Size: 1]
	FText StatusMessage;//[Offset: 0x8, Size: 1]
	bool Online;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool CanChallenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool CanSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool HasHRRelationship;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool HasPortalRelationship;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: KSPlayerQueryDataFactory.PUMG_DataFactory.Object
	TimerHandle CheckTimerHandle;//[Offset: 0x138, Size: 1]
	bool QueryPlayersByNameWithProfiles(out const FText PlayerName, delegate OnReponse, out KSPlayerQueryHandle OutHandle);// 0x293c380
	bool QueryPlayersByName(out const FText PlayerName, delegate OnReponse, out KSPlayerQueryHandle OutHandle);// 0x293c1e0
	void OnTimeoutCheck();// 0x293c140
	FText GetQueriedName(out const KSPlayerQueryHandle InHandle);// 0x293af60
	static FText GetPlayerQueryErrorMessage(enum Error);// 0x293ae80
	void CancelQuery(out KSPlayerQueryHandle InHandle);// 0x293aad0

--------------------------------
Class: KSPlayerQueryHandle
	KSPlayerQueryDataFactory* Owner;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSEMODataFactory.PUMG_DataFactory.Object
	bool haveRecieveMatchReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	MulticastInlineDelegateProperty OnRewardsRecieved;//[Size: 1]
	MulticastInlineDelegateProperty OnProgressionRecieved;//[Size: 1]
	void SetupTestData(int PlayerXp, int RankedXp, int RogueXp, int ReputationEarned, int PlacementMatchNum, int BattlePassXp, int WeaponMasteryCount, int WeaponMasteryLevels, bool CategoryMasteryCanLevel, int MilestonesPerWeapon, int BonusPoints);// 0x290e4b0
	void SetUpMobileTestData(int StartingMobileXp, int MobileSecondsPlayed, int MobileGunKills, int MobileGadgetKills, int MobileAbilityKills, int MobileMeleeKills, int MobileThrownKills);// 0x290e2c0
	bool IsLocalPlayer(int64 PlayerId);// 0x290d8d0
	void HandlePlayerRewardsEventTokens();// 0x290d890
	void HandlePlayerRewards(PlayerRewardsSummary PlayerRewardSummary, bool bFakeTestData);// 0x290d6f0
	void HandleEOMDetail();// 0x290d5d0
	ScoreboardStats GetScoreboardStats();// 0x290d440
	PlayerRewardsSummary GetPlayerRewardsSummary();// 0x290d340
	int GetLastMatchQueueId();// 0x290d240
	void FlushMobileProgressionData();// 0x290d0b0
	bool FindReputationProgressionActivity(out KSActivityInstance* ReputationProgressionActivity);// 0x290d010
	bool FindRankedProgressionActivity(out KSActivityInstance* RankedProgressionActivity);// 0x290cf70
	bool FindPlayerXpProgressionActivity(out KSActivityInstance* PlayerXpProgressionActivity);// 0x290ced0
	bool FindBattlePassProgressionActivity(out KSActivityInstance* BattlePassProgressionActivity);// 0x290cda0
	void ComputeEOMResults();// 0x290cd00
	void AddMobileProgressionData(int ActivityVendorID, int ProgressionAmount);// 0x290cc20

--------------------------------
Class: KSPlayerWhoDataFactory.PUMG_PlayerWhoDataFactory.PUMG_DataFactory.Object
	void ClearSearchResults();// 0x293ab90

--------------------------------
Class: PUMG_PlayerWhoDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnSearchByNameResultsUpdated;//[Size: 1]
	PUMG_PlayerInfo*[] CachedSearchByNameResults;//[Offset: 0x48, Size: 1]
	void UIX_SearchByNameForPlayer(FString PlayerName, bool bIncludeOfflinePlayers);// 0xe748d0
	PUMG_PlayerInfo*[] GetSearchByNameResults();// 0xe73dd0

--------------------------------
Class: KSSimulmediaDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnSimulmediaOpportunitiesUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnSimulmediaOpportunityStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnSimulmediaOpportunityCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnSimulmediaOpportunityUpdateFailed;//[Size: 1]
	bool IsSimulmediaEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool SimulmediaDisablePS4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool SimulmediaDisablePS5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool SimulmediaDisableXboxOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool SimulmediaDisableXSX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool SimulmediaDisableWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool SimulmediaDisableMac;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	bool SimulmediaDisableLinux;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 1]
	bool SimulmediaDisableSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool SimulmediaDisableIOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	bool SimulmediaDisableAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	void SubmitCompletedOpportunity(KSOpportunity InOpportunity);// 0x2958fe0
	void StartOpportunity(KSOpportunity InOpportunity);// 0x2958f10
	void SetSimulmediaVisited();// 0x2958ef0
	void RefreshOpportunities();// 0x2958e90
	bool IsSimulmediaUnvisited();// 0x2958ae0
	bool IsOpportunityAvailable();// 0x2958a80
	bool GetSimulmediaEnabled();// 0x2958970
	KSItem* GetRewardItem(out int OutRewardQuantity);// 0x2958840
	bool GetNextOpportunity(out KSOpportunity Opportunity);// 0x2958770
	void AbortOpportunity(KSOpportunity InOpportunity, enum AbortReason, int AbortSeconds);// 0x29584f0

--------------------------------
Class: KSOpportunity
	FString OpportunityId;//[Offset: 0x0, Size: 1]
	FString URL;//[Offset: 0x10, Size: 1]
	int DurationSeconds;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSMailCenterDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnMailMessageUpdated;//[Size: 1]
	void SetMailRead(KSMailMessage* Message);// 0x29249b0
	bool IsMailRead(KSMailMessage* Message);// 0x2924510
	int GetUnreadMailCount();// 0x2923e80
	KSMailMessage*[] GetMailMessages();// 0x2923d50
	bool GetExpiredTime(const KSMailMessage* MailMessage, out DateTime OutExpiredTime);// 0x2923850
	bool GetAcquiredTime(const KSMailMessage* MailMessage, out DateTime OutDateTime);// 0x29234a0
	FText DateTimetoText(out const DateTime InDateTime);// 0x2923330

--------------------------------
Class: KSMailMessage.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int DeleteLootID;//[Offset: 0x280, Size: 1]
	int ClaimableRewardLootId;//[Offset: 0x284, Size: 1]
	int ClaimableRewardVendorId;//[Offset: 0x288, Size: 1]
	bool IsClaimable();// 0x26f8950
	bool HasBeenClaimed(const Object* WorldContextObject);// 0x26f8890
	bool GetClaimableRewards(out PUMG_StoreItem*[] ClaimableRewardItems, const Object* WorldContextObject);// 0x26f8170
	void DeleteMessage();// 0x26f8020
	void ClaimRewardLoot(const Object* WorldContextObject);// 0x26f7fa0

--------------------------------
Class: KSMediaPlayerWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	DataTable* MediaPlayerPlaylistEntries;//[Offset: 0x528, Size: 1]
	bool bOnlyWatchFirstEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	void UIX_SkipEntry();// 0x292e3d0
	void OnShouldShowPromptChanged(bool bCanSkipEntry);// 0x2cbecb0
	void OnReadyForPlayback(const PlatformMediaSource* PlatformMediaSource, const AkAudioEvent* PlayEvent, const AkAudioEvent* StopEvent);// 0x292ded0
	void OnEndLoadingMedia();// 0x2cbecb0
	void OnBeginLoadingMedia();// 0x2cbecb0
	bool IsCurrentEntrySkippable();// 0x292ddc0

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x3cdda90
	void SetMediaOptionString(out const FName Key, FString Value);// 0x3cde540
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x3cde470
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x3cde3a0
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x3cde2d0
	FString GetUrl();// 0xe73a80

--------------------------------
Class: KSLobbyWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object

--------------------------------
Class: KSJobSelectPreviewActor_Lobby.KSJobSelectPreviewActor.Info.Actor.Object
	enum CharacterIndex;//[Offset: 0x428, Size: 1]
	bool bControlChildCharacterNameplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	float ChildCharacterDefaultScaleOverride;//[Offset: 0x42c, Size: 1]
	KSPlayerInfo* WeakPlayerInfo;//[Offset: 0x430, Size: 1]
	bool bPlayerPendingPartyAccept;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool bAllowJobChangeOnPlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool bStopPlayingEmoteWhileLoadingNewEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	<enum,Vector> EmoteCameraPositionLocationOffsets;//[Offset: 0x440, Size: 1]
	<enum,float> EmoteCameraPositionScaleOverrides;//[Offset: 0x490, Size: 1]
	KSJobItem* FailSafeEmoteJob;//[Offset: 0x4e0, Size: 1]
	KSEmote* PendingEmote;//[Offset: 0x508, Size: 1]
	KSEquipmentId PendingEmoteComponentId;//[Offset: 0x520, Size: 1]
	KSEmoteCosmeticComponent* PendingEmoteComponent;//[Offset: 0x528, Size: 1]
	KSJobItem* PendingEmoteExpectedJob;//[Offset: 0x530, Size: 1]
	KSJobItem* ActiveEmoteExpectedJob;//[Offset: 0x558, Size: 1]
	KSEmoteCosmeticComponent* ActiveEmoteComponent;//[Offset: 0x580, Size: 1]
	Vector ChildCharacterDefaultLocation;//[Offset: 0x588, Size: 1]
	void StopActiveEmote();// 0x26e8220
	bool SetPlayerInfo(KSPlayerInfo* InPlayerInfo);// 0x26e8190
	void ReturnCharacterToIdle();// 0xcf5e50
	bool PlayEmote(out const KSEmote* InEmote, out const KSJobItem* DesiredJob);// 0x26e74c0
	void OverrideActiveSkin(out const KSSkinBundle* InSkin);// 0x26e7400
	bool IsPlayerPendingPartyAccept();// 0x26e6f30
	KSPlayerInfo* GetPlayerInfo();// 0x26e5dd0
	enum GetCharacterIndex();// 0x26e4650
	void ClearPlayerInfo();// 0x26e30f0
	void ClearPendingEmote();// 0x26e30d0
	void ClearActiveSkinOverride();// 0x1ef10e0

--------------------------------
Class: PUMG_CanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	void PlaceWidgetUnder(UserWidget* BottomWidget, UserWidget* TopWidget);// 0xe65630

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x128, Size: 1]
	ButtonStyle WidgetStyle;//[Offset: 0x130, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x3a8, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x3b8, Size: 1]
	byte ClickMethod;//[Offset: 0x3c8, Size: 1]
	byte TouchMethod;//[Offset: 0x3c9, Size: 1]
	byte PressMethod;//[Offset: 0x3ca, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	bool bAllowTouchFallthrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x3b56af0
	void SetStyle(out const ButtonStyle InStyle);// 0x3b56a10
	void SetPressMethod(byte InPressMethod);// 0x3b56890
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3b55c00
	void SetClickMethod(byte InClickMethod);// 0x3b55b80
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x3b55600
	bool IsPressed();// 0x3b55370

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x3b59fb0
	PanelSlot* GetContentSlot();// 0x3b597f0
	Widget* GetContent();// 0x3b597c0

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 1]
	SlateBrush Hovered;//[Offset: 0x90, Size: 1]
	SlateBrush Pressed;//[Offset: 0x118, Size: 1]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 1]
	Margin NormalPadding;//[Offset: 0x228, Size: 1]
	Margin PressedPadding;//[Offset: 0x238, Size: 1]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 1]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 1]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x110, Size: 1]
	delegate BrushDelegate;//[Offset: 0x198, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x1a8, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b8, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1cc, Size: 1]
	void SetOpacity(float InOpacity);// 0x3b5ecf0
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3b5e940
	void SetBrushTintColor(SlateColor TintColor);// 0x3b5e7c0
	void SetBrushSize(Vector2D DesiredSize);// 0x3b5e740
	void SetBrushResourceObject(Object* ResourceObject);// 0x3b5e6c0
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x3b5e5f0
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x3b5e520
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x3b5e3f0
	void SetBrushFromSoftPath(out const SoftObjectPath SoftPath, bool bMatchSize);// 0x3b5e2f0
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x3b5e200
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3b5e170
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x3b5e080
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3b5dff0
	void SetBrush(out const SlateBrush InBrush);// 0x3b5de70
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3b5d690

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PUMG_UnsafeZone.SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 1]
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 1]
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x3b68470

--------------------------------
Class: DamageModifierDisplay_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	BruteStrengthModifierWarning_C* BruteStrengthModifierWarning;//[Offset: 0x530, Size: 1]
	HorizontalBox* ModifierTray;//[Offset: 0x538, Size: 1]
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void ExecuteUbergraph_DamageModifierDisplay(int EntryPoint, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, PUMG_HUD* K2Node_Event_hud, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0

--------------------------------
Class: BruteStrengthModifierWarning_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* PerkIcon;//[Offset: 0x530, Size: 1]
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void OnHide();// 0x2cbecb0
	void OnFade();// 0x2cbecb0
	void ExecuteUbergraph_BruteStrengthModifierWarning(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_HUD* K2Node_Event_hud, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x2cbecb0

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x3b5cfb0

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	SlateChildSize Size;//[Offset: 0x50, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3b5f200
	void SetSize(SlateChildSize InSize);// 0x3b5f0f0
	void SetPadding(Margin InPadding);// 0x3b5ed70
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3b5eab0

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 1]
	byte SizeRule;//[Offset: 0x4, Size: 1]

--------------------------------
Class: DeathSpectateOverlay_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	HorizontalBox* GamepadGroup;//[Offset: 0x560, Size: 1]
	Image* GamepadLeft;//[Offset: 0x568, Size: 1]
	Image* GamepadRight;//[Offset: 0x570, Size: 1]
	Image* Image;//[Offset: 0x578, Size: 1]
	Image* Image;//[Offset: 0x580, Size: 1]
	Image* Image;//[Offset: 0x588, Size: 1]
	Image* Image;//[Offset: 0x590, Size: 1]
	HorizontalBox* MouseGroup;//[Offset: 0x598, Size: 1]
	Image* MouseLeft;//[Offset: 0x5a0, Size: 1]
	Image* MouseRight;//[Offset: 0x5a8, Size: 1]
	HorizontalBox* NextTeammateControls;//[Offset: 0x5b0, Size: 1]
	WBP_PlayerIdentity_Full_C* PlayerIdentityCard;//[Offset: 0x5b8, Size: 1]
	VerticalBox* QueueBox;//[Offset: 0x5c0, Size: 1]
	TextBlock* QueueSpawnText;//[Offset: 0x5c8, Size: 1]
	TextBlock* SpectateTitle;//[Offset: 0x5d0, Size: 1]
	WidgetSwitcher* WidgetSwitcher;//[Offset: 0x5d8, Size: 1]
	KSTeamState* CurrentSpectatedTeam;//[Offset: 0x5e0, Size: 1]
	KSPlayerState* OwningKSPlayerState;//[Offset: 0x5e8, Size: 1]
	KSTeamState* OwningTeamState;//[Offset: 0x5f0, Size: 1]
	void HandleKSPlayerStateTeamChanged(KSPlayerState* KSPlayerState, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void BindTeamRespawn(delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void HandleQueueRespawnChanged(KSTeamState* TeamState, int FoundIndex, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText CallFunc_MakeLiteralText_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FText K2Node_Select_Default, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_Array_Find_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	void UpdateViewNextTeammate(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetValidSpectateTargetCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void Handle Input State Changed(byte InputState);// 0x2cbecb0
	void Handle Spectate State Changed(bool IsSpectating);// 0x2cbecb0
	void TeamMemberEliminated(KSPlayerState* PlayerState);// 0x2cbecb0
	void DetermineLocalPlayerControlled();// 0x2cbecb0
	void Refresh Player Identity(KSPlayerState* InKSPlayerState);// 0x2cbecb0
	void PostSetPlayerState();// 0x2cbecb0
	void PreClearPlayerState();// 0x2cbecb0
	void Update Team State Bindings();// 0x2cbecb0
	void Clear Bound Team State();// 0x2cbecb0
	void ExecuteUbergraph_DeathSpectateOverlay(int EntryPoint, byte K2Node_CustomEvent_InputState, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_HUD* K2Node_Event_hud, bool K2Node_CustomEvent_IsSpectating, byte CallFunc_GetCurrentInputState_ReturnValue, KSPlayerState* K2Node_CustomEvent_PlayerState, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerState* K2Node_CustomEvent_InKSPlayerState, byte Temp_byte_Variable, KSPersistentPlayerData* CallFunc_GetPersistentPlayerData_ReturnValue, bool CallFunc_IsValid_ReturnValue, Widget* K2Node_Select_Default, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Key CallFunc_GetGamepadButtonForAction_Button, bool CallFunc_GetGamepadButtonForAction_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon, Key CallFunc_GetGamepadButtonForAction_Button, bool CallFunc_GetGamepadButtonForAction_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon);// 0x2cbecb0

--------------------------------
Class: KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object

--------------------------------
Class: KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void SetPlayerStateUIRelevanceChanged();// 0x28ff550
	void SetPawn(KSCharacterFoundation* NewPawn);// 0x2937d70
	void PreClearPlayerState();// 0x29205e0
	void PreClearPawn();// 0x26f8d20
	void PostSetPlayerState();// 0x2916a30
	void PostSetPawn();// 0x29007b0
	void OnBoundPlayerStateDestroyed(Actor* DestroyedActor);// 0x2937750
	void OnBoundPawnDestroyed(Actor* DestroyedActor);// 0x29376d0
	KSPlayerState* GetPlayerState();// 0x2915bf0
	KSCharacterFoundation* GetPawnFoundation();// 0x2911e90
	KSCharacter* GetPawnAsKSCharacter();// 0x2936ab0
	KSCharacter* GetPawn();// 0x2936ab0

--------------------------------
Class: WBP_PlayerIdentity_Full_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	VerticalBox* LargeAvatarWrapper;//[Offset: 0x530, Size: 1]
	WidgetSwitcher* NameLoadingSwitcher;//[Offset: 0x538, Size: 1]
	ScaleBox* NameLoadingWrapper;//[Offset: 0x540, Size: 1]
	TextBlock* PlayerNameText;//[Offset: 0x548, Size: 1]
	WBP_ThrobberHorizontal_C* PlayerNameThrobber;//[Offset: 0x550, Size: 1]
	HorizontalBox* PlayerNameWrapper;//[Offset: 0x558, Size: 1]
	WBP_RogueMasteryPortrait_C* RogueMasteryPortrait;//[Offset: 0x560, Size: 1]
	CanvasPanel* RogueMasteryWrapper;//[Offset: 0x568, Size: 1]
	SizeBox* SmallAvatarWrapper;//[Offset: 0x570, Size: 1]
	SizeBox* TitleWrapper;//[Offset: 0x578, Size: 1]
	WBP_PlayerIdentity_Avatar_C* WBP_PlayerIdentity_Avatar;//[Offset: 0x580, Size: 1]
	WBP_PlayerIdentity_Avatar_C* WBP_PlayerIdentity_Avatar;//[Offset: 0x588, Size: 1]
	WBP_PlayerIdentity_Banner_C* WBP_PlayerIdentity_Banner;//[Offset: 0x590, Size: 1]
	WBP_PlayerIdentity_PlayerLevel_C* WBP_PlayerIdentity_PlayerLevel;//[Offset: 0x598, Size: 1]
	WBP_PlayerIdentity_Title_C* WBP_PlayerIdentity_Title;//[Offset: 0x5a0, Size: 1]
	byte LayoutType;//[Offset: 0x5a8, Size: 1]
	KSPlayerInfo* Bound Player Info;//[Offset: 0x5b0, Size: 1]
	byte NameHorizontalAlignment;//[Offset: 0x5b8, Size: 1]
	bool UseLocalLoadoutData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	KSPersistentPlayerData* BoundPersistentPlayer;//[Offset: 0x5c0, Size: 1]
	void Populate Lobby Player(KSPlayerInfo* KS Player Info);// 0x2cbecb0
	void Update Title(bool Use Game State Data, KSTitle* Accessed Title, GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, PlatformInventoryItem* CallFunc_GetDefaultAccountItemForSlot_Default_Item, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, KSTitle* K2Node_DynamicCast_AsKSTitle, bool K2Node_DynamicCast_bSuccess, KSTitle* K2Node_DynamicCast_AsKSTitle, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTitle* K2Node_DynamicCast_AsKSTitle, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, KSPlayerIdentityData CallFunc_GetPlayerIdentityDataByPersistentPlayer_PlayerIdentityData, bool CallFunc_GetPlayerIdentityDataByPersistentPlayer_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, KSItem* K2Node_DynamicCast_AsKSItem, bool K2Node_DynamicCast_bSuccess, KSTitle* K2Node_DynamicCast_AsKSTitle, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void Set From Player Info(KSPlayerInfo* KS Player Info, bool Use Game State Data, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Update Border(bool Use Game State Data, KSBorder* Accessed Border, GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSBorder* K2Node_DynamicCast_AsKSBorder, bool K2Node_DynamicCast_bSuccess, KSPlayerIdentityData CallFunc_GetPlayerIdentityDataByPersistentPlayer_PlayerIdentityData, bool CallFunc_GetPlayerIdentityDataByPersistentPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, KSItem* K2Node_DynamicCast_AsKSItem, bool K2Node_DynamicCast_bSuccess, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, KSBorder* K2Node_DynamicCast_AsKSBorder, bool K2Node_DynamicCast_bSuccess, KSBorder* K2Node_DynamicCast_AsKSBorder, bool K2Node_DynamicCast_bSuccess, IconInfo* CallFunc_GetSmallBorderInfo_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlatformInventoryItem* CallFunc_GetDefaultAccountItemForSlot_Default_Item, KSBorder* K2Node_DynamicCast_AsKSBorder, bool K2Node_DynamicCast_bSuccess, IconInfo* CallFunc_GetSmallBorderInfo_ReturnValue);// 0x2cbecb0
	void Update Banner(bool Use Game State Data, KSBanner* Accessed Banner, GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, IconInfo* CallFunc_GetSmallBannerInfo_ReturnValue, KSBanner* K2Node_DynamicCast_AsKSBanner, bool K2Node_DynamicCast_bSuccess, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerIdentityData CallFunc_GetPlayerIdentityDataByPersistentPlayer_PlayerIdentityData, bool CallFunc_GetPlayerIdentityDataByPersistentPlayer_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSItem* K2Node_DynamicCast_AsKSItem, bool K2Node_DynamicCast_bSuccess, KSBanner* K2Node_DynamicCast_AsKSBanner, bool K2Node_DynamicCast_bSuccess, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, KSBanner* K2Node_DynamicCast_AsKSBanner, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, PlatformInventoryItem* CallFunc_GetDefaultAccountItemForSlot_Default_Item, KSBanner* K2Node_DynamicCast_AsKSBanner, bool K2Node_DynamicCast_bSuccess, IconInfo* CallFunc_GetSmallBannerInfo_ReturnValue);// 0x2cbecb0
	void Update Avatar(bool Use Game State Data, KSItem* Accessed Avatar, GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerIdentityData CallFunc_GetPlayerIdentityDataByPersistentPlayer_PlayerIdentityData, bool CallFunc_GetPlayerIdentityDataByPersistentPlayer_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSItem* K2Node_DynamicCast_AsKSItem, bool K2Node_DynamicCast_bSuccess, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, PlatformInventoryItem* CallFunc_GetDefaultAccountItemForSlot_Default_Item, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue);// 0x2cbecb0
	void Update Level(bool CallFunc_IsValid_ReturnValue, int64 CallFunc_GetPlayerId_ReturnValue, bool CallFunc_Less_Int64Int64_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetPlayerLevel_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x2cbecb0
	void Update Current Name(FText Found Player Name, bool Temp_bool_Variable, FString CallFunc_GetPlayerName_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, Widget* K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, FText CallFunc_GetName_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2cbecb0
	void Populate Game Player(KSPersistentPlayerData* PersistentPlayer, KSJobItem* CallFunc_GetJob_ReturnValue, int64 CallFunc_GetPlayerId_ReturnValue, bool CallFunc_IsValid_ReturnValue, PUMG_PlayerInfo* CallFunc_GetPlayerInfo_ReturnValue, KSPlayerInfo* K2Node_DynamicCast_AsKSPlayer_Info, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void Apply Layout Type(byte Layout Type, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, SizeBoxSlot* CallFunc_SlotAsSizeBoxSlot_ReturnValue, byte Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void SetInitialView(byte Temp_byte_Variable, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, WidgetSwitcherSlot* CallFunc_SlotAsWidgetSwitcherSlot_ReturnValue, Margin K2Node_Select_Default);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_PlayerIdentity_Full(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: KSTitle.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	FText TitleText;//[Offset: 0x280, Size: 1]

--------------------------------
Class: KSBorder.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	Texture2D* SmallBorderIcon;//[Offset: 0x280, Size: 1]
	IconInfo* SmallBorderIconInfo;//[Offset: 0x2a8, Size: 1]
	Texture2D* LargeBorderIcon;//[Offset: 0x2b0, Size: 1]
	IconInfo* LargeBorderIconInfo;//[Offset: 0x2d8, Size: 1]
	Texture2D* GetSoftSmallBorderIcon();// 0x262f870
	Texture2D* GetSoftLargeBorderIcon();// 0x263bc10
	IconInfo* GetSmallBorderInfo();// 0x262f500
	IconInfo* GetLargeBorderInfo();// 0x26169c0

--------------------------------
Class: KSBanner.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	Texture2D* SmallBannerIcon;//[Offset: 0x280, Size: 1]
	IconInfo* SmallBannerIconInfo;//[Offset: 0x2a8, Size: 1]
	Texture2D* LargeBannerIcon;//[Offset: 0x2b0, Size: 1]
	IconInfo* LargeBannerIconInfo;//[Offset: 0x2d8, Size: 1]
	Texture2D* GetSoftSmallBannerIcon();// 0x262f870
	Texture2D* GetSoftLargeBannerIcon();// 0x263bc10
	IconInfo* GetSmallBannerInfo();// 0x262f500
	IconInfo* GetLargeBannerInfo();// 0x26169c0

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3b689f0
	void SetPadding(Margin InPadding);// 0x3b681b0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3b67b80

--------------------------------
Class: WidgetSwitcherSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3b81b70
	void SetPadding(Margin InPadding);// 0x3b63200
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3b81740

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x3b74ec0

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 1]
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3b76750
	void SetSize(SlateChildSize InSize);// 0x3b764f0
	void SetPadding(Margin InPadding);// 0x3b76080
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3b75b00

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x128, Size: 1]
	void SetActiveWidgetIndex(int Index);// 0x3b815a0
	void SetActiveWidget(Widget* Widget);// 0x3b5e170
	Widget* GetWidgetAtIndex(int Index);// 0x3b81510
	int GetNumWidgets();// 0x3b814e0
	int GetActiveWidgetIndex();// 0x3b814b0
	Widget* GetActiveWidget();// 0x3b81480

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x128, Size: 1]
	byte StretchDirection;//[Offset: 0x129, Size: 1]
	float UserSpecifiedScale;//[Offset: 0x12c, Size: 1]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x3b688f0
	void SetStretchDirection(byte InStretchDirection);// 0x3b68720
	void SetStretch(byte InStretch);// 0x3b686a0
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x3b67c00

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x130, Size: 1]
	delegate TextDelegate;//[Offset: 0x148, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x158, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x180, Size: 1]
	SlateFontInfo Font;//[Offset: 0x190, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 1]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 1]
	float MinDesiredWidth;//[Offset: 0x290, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 1]
	void SetText(FText InText);// 0x3b6cc30
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x3b6cab0
	void SetShadowOffset(Vector2D InShadowOffset);// 0x3b6c830
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3b6c7b0
	void SetOpacity(float InOpacity);// 0x3b6c730
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3b6c430
	void SetFont(SlateFontInfo InFontInfo);// 0x3b6bda0
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x3b6bb30
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3b6baa0
	FText GetText();// 0x3b6b6c0
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x3b6b4c0
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x3b6b490

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x110, Size: 1]
	byte Justification;//[Offset: 0x113, Size: 1]
	enum WrappingPolicy;//[Offset: 0x114, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x115, Size: 1]
	float WrapTextAt;//[Offset: 0x118, Size: 1]
	Margin Margin;//[Offset: 0x11c, Size: 1]
	float LineHeightPercentage;//[Offset: 0x12c, Size: 1]
	void SetJustification(byte InJustification);// 0x3b6c120

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: WBP_ThrobberHorizontal_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* Cycle;//[Offset: 0x240, Size: 1]
	Image* Diamond;//[Offset: 0x248, Size: 1]
	Image* Diamond;//[Offset: 0x250, Size: 1]
	Image* Diamond;//[Offset: 0x258, Size: 1]
	HorizontalBox* ThrobberBox;//[Offset: 0x260, Size: 1]
	void SetThrobberColor(SlateColor NewColor);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_ThrobberHorizontal(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0

--------------------------------
Class: WBP_RogueMasteryPortrait_C.UserWidget.Widget.Visual.Object
	KSAsyncImage* JobIcon;//[Offset: 0x238, Size: 1]
	Image* MasteryBorder_1to4;//[Offset: 0x240, Size: 1]
	Image* MasteryBorder_5to9;//[Offset: 0x248, Size: 1]
	Image* MasteryBorder_Max;//[Offset: 0x250, Size: 1]
	WidgetSwitcher* MasteryFrameSwitcher;//[Offset: 0x258, Size: 1]
	WBP_RogueMasteryIcon_C* MasteryIcon;//[Offset: 0x260, Size: 1]
	KSPlayerState* PlayerOwner;//[Offset: 0x268, Size: 1]
	KSJobItem* JobItem;//[Offset: 0x270, Size: 1]
	KSPersistentPlayerData* PersistentPlayerOwner;//[Offset: 0x278, Size: 1]
	void Has Player Owner(out bool Return Value, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2cbecb0
	void GetOwnerJobMasteryLevel(out int Mastery Level, int CallFunc_GetJobMasteryLevel_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetJobMasteryLevel_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void GetOwnerJob(out KSJobItem* Job, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void MatchesBoundPlayer(KSPlayerState* PlayerState, KSPersistentPlayerData* PersistentData, out bool Return Value, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void ClearPreviousOwner(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void SetPersistentPlayerOwner(KSPersistentPlayerData* PlayerData, bool CallFunc_MatchesBoundPlayer_Return_Value, bool CallFunc_Not_PreBool_ReturnValue, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue);// 0x2cbecb0
	void SetMasteryLevelExplicit(int MasteryLevel);// 0x2cbecb0
	void SetMasteryFrameToLevel(int MasteryLevel, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, Widget* K2Node_Select_Default, Widget* K2Node_Select_Default);// 0x2cbecb0
	void OnJobMasteryLevelUpdated(int CallFunc_GetOwnerJobMasteryLevel_Mastery_Level, KSJobItem* CallFunc_GetOwnerJob_Job, bool CallFunc_IsValid_ReturnValue, KSActivityInstance* CallFunc_GetJobMasteryActivityInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Has_Player_Owner_Return_Value);// 0x2cbecb0
	void SetJobPortraitFromSoftTexture(Texture2D* SoftTexture);// 0x2cbecb0
	void Set Mastery Frame(bool CallFunc_IsValid_ReturnValue, KSActivityInstance* CallFunc_GetJobMasteryActivityInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, ActivityTier CallFunc_GetProgressTier_ReturnValue);// 0x2cbecb0
	void SetPlayerOwner(KSPlayerState* PlayerState, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_MatchesBoundPlayer_Return_Value, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue);// 0x2cbecb0
	void SetJobInformation(KSJobItem* JobItem, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSAsyncImage.PUMG_AsyncImage.Image.Widget.Visual.Object
	MaterialInstanceDynamic* MaterialToUse;//[Offset: 0x260, Size: 1]
	FName MaterialParameter;//[Offset: 0x268, Size: 1]
	void SetMaterialToUse(MaterialInstanceDynamic* InMID);// 0x262cda0
	void SetBrushFromTextureOnItem(const PlatformInventoryItem* Item, Texture2D* Texture, bool bMatchSize);// 0x262cc40
	void SetBrushFromPathOnItem(const PlatformInventoryItem* Item, out const SoftObjectPath Path, bool bMatchSize);// 0x262cb10
	void SetBrushFromItemIcon(const PlatformInventoryItem* Item, bool bMatchSize);// 0x262ca40
	void SetBrushFromIconInfo(IconInfo* IconInfo, bool bMatchSize);// 0x262c970
	bool IsCurrentlyAsyncLoading();// 0x262bc90

--------------------------------
Class: PUMG_AsyncImage.Image.Widget.Visual.Object
	Widget* WaitingWidget;//[Offset: 0x218, Size: 1]
	MulticastInlineDelegateProperty OnAsyncImageLoadStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnAsyncImageLoadComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnAsyncImageLoadCanceled;//[Size: 1]
	MulticastInlineDelegateProperty OnAsyncImageBrushChanged;//[Size: 1]
	void ShowWaitingWidget();// 0xe65bc0
	void SetWaitingWidget(Widget* InWaitingWidget);// 0xe65b40
	void HideWaitingWidget();// 0xe65380

--------------------------------
Class: WBP_RogueMasteryIcon_C.UserWidget.Widget.Visual.Object
	Image* background;//[Offset: 0x238, Size: 1]
	WidgetSwitcher* BadgeSwitcher;//[Offset: 0x240, Size: 1]
	TextBlock* MasteryLevel;//[Offset: 0x248, Size: 1]
	Image* MaxMastery;//[Offset: 0x250, Size: 1]
	SizeBox* MaxMasteryWrapper;//[Offset: 0x258, Size: 1]
	Overlay* RegularMastery;//[Offset: 0x260, Size: 1]
	void SetMasteryLevelExplicit(int CurrentLevel, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_Variable, Widget* K2Node_Select_Default);// 0x2cbecb0
	void SetMasteryLevelForJob(KSJobItem* JobItem, KSActivityInstance* CallFunc_GetJobMasteryActivityInstance_ReturnValue, int CallFunc_GetCurrentRogueMasteryLevel_MasteryLevel, int CallFunc_GetCurrentRogueMasteryLevel_CurrentXPProgress, int CallFunc_GetCurrentRogueMasteryLevel_XPRequiredForLevel, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x138, Size: 1]
	float HeightOverride;//[Offset: 0x13c, Size: 1]
	float MinDesiredWidth;//[Offset: 0x140, Size: 1]
	float MinDesiredHeight;//[Offset: 0x144, Size: 1]
	float MaxDesiredWidth;//[Offset: 0x148, Size: 1]
	float MaxDesiredHeight;//[Offset: 0x14c, Size: 1]
	float MinAspectRatio;//[Offset: 0x150, Size: 1]
	float MaxAspectRatio;//[Offset: 0x154, Size: 1]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x158, Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x158, Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x158, Size: 1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x158, Size: 1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x158, Size: 1]
	void SetWidthOverride(float InWidthOverride);// 0x3b68af0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3b67f90
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x3b67e90
	void SetMinAspectRatio(float InMinAspectRatio);// 0x3b67e10
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x3b67d90
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x3b67d10
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x3b67c90
	void SetHeightOverride(float InHeightOverride);// 0x3b67a80
	void ClearWidthOverride();// 0x3b661a0
	void ClearMinDesiredWidth();// 0x3b66180
	void ClearMinDesiredHeight();// 0x3b66160
	void ClearMinAspectRatio();// 0x3b66140
	void ClearMaxDesiredWidth();// 0x3b66120
	void ClearMaxDesiredHeight();// 0x3b66100
	void ClearMaxAspectRatio();// 0x3b660e0
	void ClearHeightOverride();// 0x3b660c0

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x3b62310

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3b637d0
	void SetPadding(Margin InPadding);// 0x3b63200
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3b62fd0

--------------------------------
Class: WBP_PlayerIdentity_Avatar_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	WBP_AsyncIcon_C* AvatarIcon;//[Offset: 0x528, Size: 1]
	void SetAvatarFromPath(SoftObjectPath Icon Path);// 0x2cbecb0
	void SetAvatar(Texture2D* Texture);// 0x2cbecb0

--------------------------------
Class: WBP_AsyncIcon_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	KSAsyncImage* Icon;//[Offset: 0x240, Size: 1]
	Throbber* LoadingThrobber;//[Offset: 0x248, Size: 1]
	MulticastInlineDelegateProperty OnIconUpdated;//[Size: 1]
	SlateBrush DefaultBrush;//[Offset: 0x260, Size: 1]
	void Set Brush From Icon Info(IconInfo* Icon Info, bool MatchSize);// 0x2cbecb0
	void Set Brush from Path on Item(KSItem* Item, bool MatchSize, SoftObjectPath Path);// 0x2cbecb0
	void SetBrushFromSoftPath(SoftObjectPath Soft Path, bool MatchSize);// 0x2cbecb0
	void Set Brush from Texture on Item(KSItem* Item, bool MatchSize, Texture2D* Texture);// 0x2cbecb0
	void Get Material(out MaterialInstanceDynamic* MaterialInstanceDynamic);// 0x2cbecb0
	void SetMaterialToUse(MaterialInterface* Material, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void ApplyDefaultBrush();// 0x2cbecb0
	void SetBrushFromSoftTexture(Texture2D* Texture, bool MatchSize);// 0x2cbecb0
	void SetBrushFromTexture(Texture2D* Texture, bool MatchSize);// 0x2cbecb0
	void SetBrushFromItemIcon(PlatformInventoryItem* Item, bool MatchSize);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void OnStartLoad(PUMG_AsyncImage* Image);// 0x2cbecb0
	void OnFinishLoad(PUMG_AsyncImage* Image);// 0x2cbecb0
	void ExecuteUbergraph_WBP_AsyncIcon(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_AsyncImage* K2Node_CustomEvent_Image, PUMG_AsyncImage* K2Node_CustomEvent_Image, bool CallFunc_IsCurrentlyAsyncLoading_ReturnValue, Texture2D* CallFunc_GetBrushResourceAsTexture2D_ReturnValue, bool K2Node_Event_IsDesignTime, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void OnIconUpdated__DelegateSignature(Texture2D* Texture);// 0x2cbecb0

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x110, Size: 1]
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 1]
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 1]
	SlateBrush Image;//[Offset: 0x120, Size: 1]
	void SetNumberOfPieces(int InNumberOfPieces);// 0x3b6c6b0
	void SetAnimateVertically(bool bInAnimateVertically);// 0x3b6ba10
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x3b6b980
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x3b6b8f0

--------------------------------
Class: WBP_PlayerIdentity_Banner_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	WBP_AsyncIcon_C* BannerIcon;//[Offset: 0x528, Size: 1]
	WBP_AsyncIcon_C* BorderIcon;//[Offset: 0x530, Size: 1]
	void SetBorderFromIconInfo(IconInfo* Icon Info);// 0x2cbecb0
	void SetBannerFromIconInfo(IconInfo* Icon Info);// 0x2cbecb0
	void HideBorder();// 0x2cbecb0
	void SetBorder(Texture2D* Texture);// 0x2cbecb0
	void SetBanner(Texture2D* Texture);// 0x2cbecb0

--------------------------------
Class: WBP_PlayerIdentity_PlayerLevel_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x528, Size: 1]
	WidgetSwitcher* LevelLoadingSwitcher;//[Offset: 0x530, Size: 1]
	TextBlock* PlayerLevelText;//[Offset: 0x538, Size: 1]
	Throbber* PlayerLevelThrobber;//[Offset: 0x540, Size: 1]
	WBP_BoxStroke_C* WBP_BoxStroke;//[Offset: 0x548, Size: 1]
	void SetThrobber();// 0x2cbecb0
	void SetPlayerLevelExplicit(int NewLevel, FText CallFunc_Conv_IntToText_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_BoxStroke_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	Image* Image_E;//[Offset: 0x240, Size: 1]
	Image* Image_N;//[Offset: 0x248, Size: 1]
	Image* Image_S;//[Offset: 0x250, Size: 1]
	Image* Image_W;//[Offset: 0x258, Size: 1]
	SizeBox* SB_E;//[Offset: 0x260, Size: 1]
	SizeBox* SB_N;//[Offset: 0x268, Size: 1]
	SizeBox* SB_S;//[Offset: 0x270, Size: 1]
	SizeBox* SB_W;//[Offset: 0x278, Size: 1]
	float StrokeSize;//[Offset: 0x280, Size: 1]
	LinearColor StrokeColor;//[Offset: 0x284, Size: 1]
	void SetStrokeColor(LinearColor NewColor);// 0x2cbecb0
	void SetStrokeSize(float NewSize);// 0x2cbecb0
	void ApplyStrokeColor();// 0x2cbecb0
	void ApplyStrokeSize(Margin K2Node_MakeStruct_Margin, SizeBoxSlot* CallFunc_SlotAsSizeBoxSlot_ReturnValue, SizeBoxSlot* CallFunc_SlotAsSizeBoxSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_BoxStroke(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: WBP_PlayerIdentity_Title_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	TextBlock* PlayerTitleText;//[Offset: 0x530, Size: 1]
	Border* RarityBackground;//[Offset: 0x538, Size: 1]
	void SetTitle(KSTitle* Title, PlatformInventoryItem* CallFunc_GetDefaultAccountItemForSlot_Default_Item, const GameplayTagContainer CallFunc_GetCollectionContainer_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, SlateColor CallFunc_GetRarityColorByTag_RarityColor, bool CallFunc_IsValid_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_PlayerIdentity_Title(int EntryPoint, MaterialInstanceDynamic* CallFunc_GetDynamicFontMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x128, Size: 1]
	byte VerticalAlignment;//[Offset: 0x129, Size: 1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12a, Size: 1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x12c, Size: 1]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x13c, Size: 1]
	Margin Padding;//[Offset: 0x14c, Size: 1]
	SlateBrush background;//[Offset: 0x160, Size: 1]
	delegate BackgroundDelegate;//[Offset: 0x1e8, Size: 1]
	LinearColor BrushColor;//[Offset: 0x1f8, Size: 1]
	delegate BrushColorDelegate;//[Offset: 0x208, Size: 1]
	Vector2D DesiredSizeScale;//[Offset: 0x218, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x224, Size: 1]
	delegate OnMouseButtonUpEvent;//[Offset: 0x234, Size: 1]
	delegate OnMouseMoveEvent;//[Offset: 0x244, Size: 1]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x254, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3b56c70
	void SetPadding(Margin InPadding);// 0x3b565e0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3b55e80
	void SetDesiredSizeScale(Vector2D InScale);// 0x3b55d00
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x3b55c80
	void SetBrushFromTexture(Texture2D* Texture);// 0x3b55a80
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3b55a00
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3b55980
	void SetBrushColor(LinearColor InBrushColor);// 0x3b55900
	void SetBrush(out const SlateBrush InBrush);// 0x3b55780
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3b54f30

--------------------------------
Class: DownedHealthRemaining_C.KSViewedTargetHealthWidget.KSHealthWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x578, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x580, Size: 1]
	WBP_InputCallout_C* BleedOutInputCallout;//[Offset: 0x588, Size: 1]
	Image* BurstImg;//[Offset: 0x590, Size: 1]
	HorizontalBox* GiveUpGroup;//[Offset: 0x598, Size: 1]
	WidgetSwitcher* GiveUpImageSwitcher;//[Offset: 0x5a0, Size: 1]
	ProgressBar* GiveUpProgress;//[Offset: 0x5a8, Size: 1]
	Image* GrayBlur;//[Offset: 0x5b0, Size: 1]
	Image* HealthIcon;//[Offset: 0x5b8, Size: 1]
	Image* MeterFill;//[Offset: 0x5c0, Size: 1]
	Overlay* RadialProgressBarOverlay;//[Offset: 0x5c8, Size: 1]
	Image* ScanLines;//[Offset: 0x5d0, Size: 1]
	TextBlock* Status;//[Offset: 0x5d8, Size: 1]
	bool revive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	float ReviveProgress;//[Offset: 0x5e4, Size: 1]
	bool ShowedDownStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	MaterialInstanceDynamic* Fill_Dyn_Mat;//[Offset: 0x5f0, Size: 1]
	FText ReviverName;//[Offset: 0x5f8, Size: 1]
	float GiveUpMaxSeconds;//[Offset: 0x610, Size: 1]
	float GiveUpLocalTween;//[Offset: 0x614, Size: 1]
	void RefreshGiveUpGroupVisibility(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CanGiveUp_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	FText StatusTextBind(FText RevivingMessaging, FText RevivedByMessaging, FText DownedMessaging, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_IsBeingRevived_Reviver, float CallFunc_IsBeingRevived_Progress, bool CallFunc_IsBeingRevived_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	LinearColor OverallColorBind(LinearColor CallFunc_SelectColor_ReturnValue);// 0x2cbecb0
	float BarPercentBind(KSCharacterFoundation* CallFunc_GetPawnFoundation_ReturnValue, float CallFunc_GetHealthPct_ReturnValue);// 0x2cbecb0
	void Handle Give Up Timer Active(bool bActive);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void DownStateChanged(KSPlayerState* PlayerState);// 0x2cbecb0
	void FadedOutFinished();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void PostSetPlayerState();// 0x2cbecb0
	void PreClearPlayerState();// 0x2cbecb0
	void OnStartRevive(KSCharacter* Reviver, KSCharacter* Revivee, float ReviveTime, bool bRemote);// 0x2cbecb0
	void OnReviveCompleted(KSCharacter* Reviver, KSCharacter* Revivee);// 0x2cbecb0
	void OnReviveInterrupted(KSCharacter* Reviver, KSCharacter* Revivee);// 0x2cbecb0
	void HandleOnDeathStateChanged();// 0x2cbecb0
	void HandleOnGiveUpAllowedChanged(bool bActive);// 0x2cbecb0
	void ExecuteUbergraph_DownedHealthRemaining(int EntryPoint, bool Temp_bool_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, KSPlayerState* K2Node_CustomEvent_PlayerState, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetGiveUpTime_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, PUMG_HUD* K2Node_Event_hud, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, bool K2Node_CustomEvent_bActive, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* K2Node_CustomEvent_Reviver, KSCharacter* K2Node_CustomEvent_Revivee, float K2Node_CustomEvent_ReviveTime, bool K2Node_CustomEvent_bRemote, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* K2Node_CustomEvent_Reviver, KSCharacter* K2Node_CustomEvent_Revivee, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* K2Node_CustomEvent_Reviver, KSCharacter* K2Node_CustomEvent_Revivee, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_bActive, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_IsBeingRevived_Reviver, float CallFunc_IsBeingRevived_Progress, bool CallFunc_IsBeingRevived_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacterFoundation* CallFunc_GetPawnFoundation_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDeadOrDestroyed_ReturnValue, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsInPlay_ReturnValue, bool CallFunc_IsDowned_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum Temp_byte_Variable, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, float Temp_float_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, float CallFunc_Subtract_FloatFloat_ReturnValue, bool Temp_bool_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, enum K2Node_Select_Default, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSViewedTargetHealthWidget.KSHealthWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object

--------------------------------
Class: KSHealthWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	float CachedHealth;//[Offset: 0x548, Size: 1]
	float CachedArmor;//[Offset: 0x54c, Size: 1]
	float CachedMaxHealth;//[Offset: 0x554, Size: 1]
	float CachedOverheal;//[Offset: 0x558, Size: 1]
	void HandleCharacterOverhealChange(const KSCharacterBase* Character);// 0x291a310
	void HandleCharacterHealthChange(const KSCharacterFoundation* Character);// 0x291a290
	void DisplayOverheal(float OldOverheal, float NewOverheal, bool bAnimatedChange);// 0x2919a90
	void DisplayHealth(float OldHealth, float OldMaxHealth, float NewHealth, float NewMaxHealth, bool bAnimatedChange);// 0x29198f0
	void DisplayArmor(float OldArmor, float NewArmor);// 0x2919820
	void ApplyOverhealChange(const KSCharacterBase* Character, bool bAnimatedChange);// 0x2919420
	void ApplyHealthChange(const KSCharacterFoundation* Character, bool bAnimatedChange);// 0x2919350

--------------------------------
Class: WBP_InputCallout_C.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c8, Size: 1]
	TextBlock* ComboText;//[Offset: 0x4d0, Size: 1]
	Image* MeterBkg;//[Offset: 0x4d8, Size: 1]
	SizeBox* PrimaryBox;//[Offset: 0x4e0, Size: 1]
	WBP_KeyCallout_C* PrimaryImage;//[Offset: 0x4e8, Size: 1]
	TextBlock* PrimaryPrompt;//[Offset: 0x4f0, Size: 1]
	WidgetSwitcher* PrimarySwitcher;//[Offset: 0x4f8, Size: 1]
	Image* ProgressCircle;//[Offset: 0x500, Size: 1]
	SizeBox* SecondaryBox;//[Offset: 0x508, Size: 1]
	WBP_KeyCallout_C* SecondaryImage;//[Offset: 0x510, Size: 1]
	TextBlock* SecondaryPrompt;//[Offset: 0x518, Size: 1]
	WidgetSwitcher* SecondarySwitcher;//[Offset: 0x520, Size: 1]
	FName[] ActionNames;//[Offset: 0x528, Size: 1]
	FName KBM_Name;//[Offset: 0x538, Size: 1]
	FName GP_Name;//[Offset: 0x540, Size: 1]
	FName M_Name;//[Offset: 0x548, Size: 1]
	bool IsGamepadDoubleTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	Key SecondaryKey;//[Offset: 0x558, Size: 1]
	Key PrimaryKey;//[Offset: 0x570, Size: 1]
	bool bFallbackToDefaultInputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	void PropogateDefaultSettings();// 0x2cbecb0
	void GetActionKeys(KSSettingsDataFactory* KSSettingsDataFactory, FName Name, byte InputType, out Key PrimaryButton, out Key SecondaryButton, bool bFoundCustomInputs, Key OutButton2, Key OutButton1, Key[] ActionKeys, Key CallFunc_GetGamepadConfirmButton_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, Key CallFunc_GetGamepadCancelButton_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Key_IsGamepadKey_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, Key[] CallFunc_GetDefaultInputActionKeys_OutKeys, Key[] CallFunc_GetCustomInputActionKeys_OutKeys);// 0x2cbecb0
	void UpdateComboIndicator(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, Key K2Node_MakeStruct_Key, bool CallFunc_EqualEqual_KeyKey_ReturnValue, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, byte K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_Key_IsGamepadKey_ReturnValue, FText K2Node_Select_Default, FText K2Node_Select_Default);// 0x2cbecb0
	void IsValidActionNameForCurrentInput(FName Name, out bool Valid, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void ResetHoldProgress(MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2cbecb0
	void SetHoldProgress(float HoldProgress, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2cbecb0
	void SetSecondaryKey(Key Button, Texture2D* CallFunc_GetIconForGamepadButton_Icon, FText CallFunc_Key_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void SetPrimaryKey(Key Button, FText CallFunc_Key_GetDisplayName_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void OnKeyBindSettingChanged(FName KeyBindName);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void ModeChange(byte InputState);// 0x2cbecb0
	void SetActionName(FName KeyBoardAction, FName GamepadAction, FName MobileAction);// 0x2cbecb0
	void RemoveActionName(FName Action);// 0x2cbecb0
	void ClearAllActionName();// 0x2cbecb0
	void ExecuteUbergraph_WBP_InputCallout(int EntryPoint, byte K2Node_CustomEvent_InputState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, FName K2Node_CustomEvent_KeyBoardAction, FName K2Node_CustomEvent_GamepadAction, FName K2Node_CustomEvent_MobileAction, FName K2Node_CustomEvent_Action, Key K2Node_MakeStruct_Key, PUMG_HUD* K2Node_Event_hud, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetCurrentInputState_ReturnValue, KSSettingsDataFactory* CallFunc_GetSettingsDataFactory_ReturnValue, FName K2Node_CustomEvent_KeyBindName, bool CallFunc_IsValidActionNameForCurrentInput_Valid, byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool Temp_bool_Variable, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, enum Temp_byte_Variable, bool CallFunc_NotEqual_NameName_ReturnValue, enum Temp_byte_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, Key CallFunc_GetKeyForBinding_ReturnValue, bool CallFunc_Key_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Key CallFunc_GetKeyForBinding_ReturnValue, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, KSHUDCommon* CallFunc_GetHUDCommon_HUD_Common, byte CallFunc_GetCurrentInputState_ReturnValue, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, byte Temp_byte_Variable, Key K2Node_Select_Default, enum K2Node_Select_Default);// 0x2cbecb0

--------------------------------
Class: WBP_KeyCallout_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WBP_AsyncIcon_C* CalloutIcon;//[Offset: 0x240, Size: 1]
	Key Key;//[Offset: 0x248, Size: 1]
	FName KeyBind;//[Offset: 0x260, Size: 1]
	bool DisplayKeybind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool SecondaryKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool FallbackToDefaults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool GamepadDoubleTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	void SetKeybind(FName KeyBind);// 0x2cbecb0
	void UpdateKeyDisplay(PlayerController* CallFunc_GetPlayerController_ReturnValue, Key CallFunc_GetKeyForBinding_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon, bool CallFunc_IsValid_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void SetKey(Key Key);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_KeyCallout(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsDesignTime, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0

--------------------------------
Class: ProgressBar.Widget.Visual.Object
	ProgressBarStyle WidgetStyle;//[Offset: 0x110, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x2b0, Size: 1]
	SlateBrushAsset* BackgroundImage;//[Offset: 0x2b8, Size: 1]
	SlateBrushAsset* FillImage;//[Offset: 0x2c0, Size: 1]
	SlateBrushAsset* MarqueeImage;//[Offset: 0x2c8, Size: 1]
	float Percent;//[Offset: 0x2d0, Size: 1]
	byte BarFillType;//[Offset: 0x2d4, Size: 1]
	bool bIsMarquee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5, Size: 1]
	Vector2D BorderPadding;//[Offset: 0x2d8, Size: 1]
	delegate PercentDelegate;//[Offset: 0x2e0, Size: 1]
	LinearColor FillColorAndOpacity;//[Offset: 0x2f0, Size: 1]
	delegate FillColorAndOpacityDelegate;//[Offset: 0x300, Size: 1]
	void SetPercent(float InPercent);// 0x3b63290
	void SetIsMarquee(bool InbIsMarquee);// 0x3b63050
	void SetFillColorAndOpacity(LinearColor InColor);// 0x3b62d90

--------------------------------
Class: ProgressBarStyle.SlateWidgetStyle
	SlateBrush BackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush FillImage;//[Offset: 0x90, Size: 1]
	SlateBrush MarqueeImage;//[Offset: 0x118, Size: 1]

--------------------------------
Class: WBP_EliminationMessageOverlay_C.KSEliminationMessageWidget.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x560, Size: 1]
	WBP_KillCardCenter_C* WBP_KillCardCenter;//[Offset: 0x568, Size: 1]
	WBP_KillCardSide_C* WBP_KillCardLeft;//[Offset: 0x570, Size: 1]
	void Show Center Card(KSPlayerState* Victim, bool IsElimination, bool IsAssist, bool Temp_bool_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, FText Temp_text_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, FText K2Node_Select_Default, bool Temp_bool_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, AkAudioEvent* K2Node_Select_Default, FText Temp_text_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, FText K2Node_Select_Default, int CallFunc_PostEvent_ReturnValue, const FText K2Node_Select_Default, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void OnRoundStart(out const RoundInitState RoundInitState);// 0x2cbecb0
	void ClearMessages();// 0x2cbecb0
	void ShowMessageForAssist(KSPlayerState* Victim, bool IsElimination);// 0x2cbecb0
	void ShowMessageForTakedown(KSPlayerState* Victim, bool IsElimination);// 0x2cbecb0
	void ShowMessageForTakenDown(KSPlayerState* Instigator, bool IsElimination);// 0x2cbecb0
	void ExecuteUbergraph_WBP_EliminationMessageOverlay(int EntryPoint, FText Temp_text_Variable, FText Temp_text_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, bool Temp_bool_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, const RoundInitState K2Node_CustomEvent_RoundInitState, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* K2Node_Event_Victim, bool K2Node_Event_IsElimination, KSPlayerState* K2Node_Event_Victim, bool K2Node_Event_IsElimination, KSPlayerState* K2Node_Event_Instigator, bool K2Node_Event_IsElimination, FText K2Node_Select_Default, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSEliminationMessageWidget.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void ShowMessageForTakenDown(KSPlayerState* Instigator, bool IsElimination);// 0x2cbecb0
	void ShowMessageForTakedown(KSPlayerState* Victim, bool IsElimination);// 0x2cbecb0
	void ShowMessageForAssist(KSPlayerState* Victim, bool IsElimination);// 0x2cbecb0
	void OnPlayerDownReceived(CombatEventInfo EventInfo, int ExpBonus);// 0x290dd40
	void OnPlayerDeathReceived(CombatEventInfo EventInfo);// 0x290dc00
	void OnPlayerAssistReceived(AssistInfo EventInfo);// 0x290db20
	void ClearMessages();// 0x2cbecb0

--------------------------------
Class: WBP_KillCardCenter_C.KSKillCardWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x530, Size: 1]
	WidgetAnimation* ShowAnim;//[Offset: 0x538, Size: 1]
	WidgetAnimation* HideAnim;//[Offset: 0x540, Size: 1]
	WidgetAnimation* ShowAnim;//[Offset: 0x548, Size: 1]
	WidgetAnimation* ShowAnim;//[Offset: 0x550, Size: 1]
	WidgetAnimation* HideAnim;//[Offset: 0x558, Size: 1]
	WidgetAnimation* ShowAnim;//[Offset: 0x560, Size: 1]
	VerticalBox* CenterMessageWrapper;//[Offset: 0x568, Size: 1]
	Image* Gradient;//[Offset: 0x570, Size: 1]
	Overlay* KillCardWrapper;//[Offset: 0x578, Size: 1]
	WBP_PlayerIdentity_Full_C* PlayerIdentity;//[Offset: 0x580, Size: 1]
	TextBlock* Text;//[Offset: 0x588, Size: 1]
	TimerHandle Hide Timer;//[Offset: 0x590, Size: 1]
	void Show Sequence();// 0x2cbecb0
	void ShowPlayerAndMessage(KSPlayerState* PlayerState, out const FText Message);// 0x2cbecb0
	void ClearMessage(bool UseAnimations);// 0x2cbecb0
	void Display Duration Finished();// 0x2cbecb0
	void Hide Anim Finished();// 0x2cbecb0
	void ExecuteUbergraph_WBP_KillCardCenter(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* K2Node_Event_PlayerState, const FText K2Node_Event_Message, KSPersistentPlayerData* CallFunc_GetPersistentPlayerData_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_UseAnimations, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: KSKillCardWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	float DisplayDuration;//[Offset: 0x528, Size: 1]
	void ShowPlayerAndMessage(KSPlayerState* PlayerState, out const FText Message);// 0x2cbecb0
	void ShowPersistentPlayerAndMessage(KSPersistentPlayerData* PersistentPlayer, out const FText Message);// 0x2cbecb0
	void ClearMessage(bool UseAnimations);// 0x2cbecb0

--------------------------------
Class: WBP_KillCardSide_C.KSKillCardWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x530, Size: 1]
	WidgetAnimation* HideAnim;//[Offset: 0x538, Size: 1]
	WidgetAnimation* ShowAnim;//[Offset: 0x540, Size: 1]
	Image* Image;//[Offset: 0x548, Size: 1]
	Image* Image;//[Offset: 0x550, Size: 1]
	Image* Image;//[Offset: 0x558, Size: 1]
	WBP_PlayerIdentity_Full_C* PlayerIdentityCard;//[Offset: 0x560, Size: 1]
	TextBlock* Text;//[Offset: 0x568, Size: 1]
	TimerHandle HideTimer;//[Offset: 0x570, Size: 1]
	void Show Sequence();// 0x2cbecb0
	void ShowPlayerAndMessage(KSPlayerState* PlayerState, out const FText Message);// 0x2cbecb0
	void Display Duration Finished();// 0x2cbecb0
	void ClearMessage(bool UseAnimations);// 0x2cbecb0
	void Hide Anim Finished();// 0x2cbecb0
	void ExecuteUbergraph_WBP_KillCardSide(int EntryPoint, KSPlayerState* K2Node_Event_PlayerState, const FText K2Node_Event_Message, KSPersistentPlayerData* CallFunc_GetPersistentPlayerData_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_UseAnimations, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x2cbecb0

--------------------------------
Class: ExpDisplay_C.KSExpDisplayWidget.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 1]
	CashEarnedElement_C* CashBonusElement;//[Offset: 0x578, Size: 1]
	CashEarnedElement_C* CashEarnedElement;//[Offset: 0x580, Size: 1]
	VerticalBox* DisplayScroll;//[Offset: 0x588, Size: 1]
	WidgetSwitcher* ExpDisplaySwitcher;//[Offset: 0x590, Size: 1]
	WBP_XPEarnedElement_C* WBP_XPEarnedElement;//[Offset: 0x598, Size: 1]
	KSPlayerState*[] PlayerStates;//[Offset: 0x5a0, Size: 1]
	KSScoreChangeEvent[] PendingCashChangeEvents;//[Offset: 0x5b0, Size: 1]
	KSMobileXpChangeEvent[] PendingXPChangeEvents;//[Offset: 0x5c0, Size: 1]
	void Make XP Message(KSMobileXpChangeEvent Event, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2cbecb0
	void Make Cash Message(KSScoreChangeEvent Event, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_ShouldUseMobileLayout_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void MakePopup(ExpDisplayInfo ExpInfo, ExpElement_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void OnScoreChanged(KSScoreChangeEvent ScoreChangeEvent);// 0x2cbecb0
	void OnUIRelevantPlayerStateChanged(KSPlayerState* PlayerState);// 0x2cbecb0
	void DisplayExpInfo();// 0x2cbecb0
	void ShowNextQueue();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void OnCashChange(KSScoreChangeEvent Score Change);// 0x2cbecb0
	void OnMobileXpChanged(const KSMobileXpChangeEvent XpEvent);// 0x2cbecb0
	void ExecuteUbergraph_ExpDisplay(int EntryPoint, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, KSScoreChangeEvent K2Node_CustomEvent_ScoreChangeEvent, KSGameState* CallFunc_GetKSGameState_ReturnValue, ExpDisplayInfo K2Node_MakeStruct_ExpDisplayInfo, PlayerState* CallFunc_Array_Get_Item, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsUIRelevant_ReturnValue, KSPlayerState* K2Node_CustomEvent_PlayerState, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, ExpDisplayInfo CallFunc_GetNextExpDisplay_ExpInfo, bool CallFunc_GetNextExpDisplay_ReturnValue, bool K2Node_Event_IsDesignTime, bool CallFunc_Array_Contains_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Add_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSScoreChangeEvent K2Node_CustomEvent_Score_Change, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const KSMobileXpChangeEvent K2Node_CustomEvent_XpEvent, KSScoreChangeEvent CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, KSMobileXpChangeEvent CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSExpDisplayWidget.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	bool bIsWaitingForNextQueue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	void QueueExpDisplays(ExpDisplayInfo ExpInfo);// 0x290df50
	void NativeHandleDisplayExpInfo();// 0x290da50
	bool GetNextExpDisplay(out ExpDisplayInfo ExpInfo);// 0x290d260
	void DisplayExpInfo();// 0x290cd80

--------------------------------
Class: ExpDisplayInfo
	int EventDelta;//[Offset: 0x0, Size: 1]
	FText EventReason;//[Offset: 0x8, Size: 1]
	bool bIsBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: ExpElement_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x240, Size: 1]
	WidgetAnimation* SlideIn;//[Offset: 0x248, Size: 1]
	TextBlock* Amount;//[Offset: 0x250, Size: 1]
	SizeBox* ExpElementWrapper;//[Offset: 0x258, Size: 1]
	Image* Image;//[Offset: 0x260, Size: 1]
	TextBlock* Reason;//[Offset: 0x268, Size: 1]
	int XP;//[Offset: 0x270, Size: 1]
	FText Text;//[Offset: 0x278, Size: 1]
	float SitTime;//[Offset: 0x290, Size: 1]
	bool IsBonusXP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	MulticastInlineDelegateProperty OnAnimFinished;//[Size: 1]
	void Construct();// 0x2cbecb0
	void WidgetAnimationEvt_SlideIn_K2Node_WidgetAnimationEvent();// 0x2cbecb0
	void WidgetAnimationEvt_FadeOut_K2Node_WidgetAnimationEvent();// 0x2cbecb0
	void HandleAnimFinished();// 0x2cbecb0
	void ExecuteUbergraph_ExpElement(int EntryPoint, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, LinearColor K2Node_Select_Default, float K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_TextIsEmpty_ReturnValue);// 0x2cbecb0
	void OnAnimFinished__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: CashEarnedElement_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* HideReason;//[Offset: 0x240, Size: 1]
	WidgetAnimation* ShowReason;//[Offset: 0x248, Size: 1]
	WidgetAnimation* HideValue;//[Offset: 0x250, Size: 1]
	WidgetAnimation* ShowValue;//[Offset: 0x258, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x260, Size: 1]
	WidgetAnimation* SlideIn;//[Offset: 0x268, Size: 1]
	Image* Divider;//[Offset: 0x270, Size: 1]
	SizeBox* ExpElementWrapper;//[Offset: 0x278, Size: 1]
	Image* Image;//[Offset: 0x280, Size: 1]
	TextBlock* ReasonText;//[Offset: 0x288, Size: 1]
	TextBlock* ValueText;//[Offset: 0x290, Size: 1]
	float SitTime;//[Offset: 0x298, Size: 1]
	KSScoreChangeEvent Event;//[Offset: 0x2a0, Size: 1]
	int CashAmout;//[Offset: 0x2d0, Size: 1]
	float DelayClearTime;//[Offset: 0x2d4, Size: 1]
	bool IsPlayingAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool HasBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	void ShowRewardEarned(KSScoreChangeEvent ScoreEvent, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, LinearColor CallFunc_SelectColor_ReturnValue, FText CallFunc_Format_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void HandleShowValueAnimFinished();// 0x2cbecb0
	void HandleHideValueAnimFinished();// 0x2cbecb0
	void ExecuteUbergraph_CashEarnedElement(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_XPEarnedElement_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* BumpValue;//[Offset: 0x530, Size: 1]
	WidgetAnimation* HideReason;//[Offset: 0x538, Size: 1]
	WidgetAnimation* ShowReason;//[Offset: 0x540, Size: 1]
	WidgetAnimation* HideValue;//[Offset: 0x548, Size: 1]
	WidgetAnimation* ShowValue;//[Offset: 0x550, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x558, Size: 1]
	SizeBox* ExpElementWrapper;//[Offset: 0x560, Size: 1]
	Image* Glow;//[Offset: 0x568, Size: 1]
	VerticalBox* ReasonContainer;//[Offset: 0x570, Size: 1]
	TextBlock* Text;//[Offset: 0x578, Size: 1]
	WBP_LerpingXPText_C* WBP_LerpingXPText;//[Offset: 0x580, Size: 1]
	WBP_XPEarned_XPDescElement_C* WBP_XPEarned_XPDescElement;//[Offset: 0x588, Size: 1]
	WBP_XPEarned_XPDescElement_C* WBP_XPEarned_XPDescElement;//[Offset: 0x590, Size: 1]
	WBP_XPEarned_XPDescElement_C* WBP_XPEarned_XPDescElement;//[Offset: 0x598, Size: 1]
	ScaleBox* XPTextWrapper;//[Offset: 0x5a0, Size: 1]
	float SitTime;//[Offset: 0x5a8, Size: 1]
	KSScoreChangeEvent Event;//[Offset: 0x5b0, Size: 1]
	int CashAmout;//[Offset: 0x5e0, Size: 1]
	float DelayClearTime;//[Offset: 0x5e4, Size: 1]
	bool IsPlayingAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	bool HasBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e9, Size: 1]
	WBP_XPEarned_XPDescElement_C*[] DescWidgets;//[Offset: 0x5f0, Size: 1]
	void ClearDescriptions(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, WBP_XPEarned_XPDescElement_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void ShowRewardEarned(KSMobileXpChangeEvent XpEvent, bool DescFound, bool IsNewXPEvent, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, WBP_XPEarned_XPDescElement_C* CallFunc_Create_ReturnValue, WBP_XPEarned_XPDescElement_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, FText CallFunc_GetTextValue_DescText, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, WidgetAnimation* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void HandleHideValueAnimFinished();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void HandleShowValueAnimFinished();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_XPEarnedElement(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Not_PreBool_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_LerpingXPText_C.KSFloatTickLerpWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x260, Size: 1]
	WidgetAnimation* AnimBump;//[Offset: 0x268, Size: 1]
	TextBlock* Text;//[Offset: 0x270, Size: 1]
	float RepeatThreshold;//[Offset: 0x278, Size: 1]
	int CurrentTextDisplay;//[Offset: 0x27c, Size: 1]
	void UpdateTextDisplay(float NewTargetValue, int CallFunc_Round_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_EqualEqual_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	void UpdateCashBalance(int CashValue, bool CallFunc_IsVisible_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue);// 0x2cbecb0
	void DisplayForValue(float Value);// 0x2cbecb0
	void ExecuteUbergraph_WBP_LerpingXPText(int EntryPoint, float K2Node_Event_Value);// 0x2cbecb0

--------------------------------
Class: KSFloatTickLerpWidgetBase.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnLerpComplete;//[Size: 1]
	float LerpTime;//[Offset: 0x248, Size: 1]
	float LerpPower;//[Offset: 0x24c, Size: 1]
	void SetTargetValue(float Value);// 0x29135c0
	void SetLerpTime(float Time);// 0x2913540
	void SetLerpPower(float Power);// 0x29134b0
	bool IsLerping();// 0x2912740
	float GetCurrentValue();// 0x2911e70
	void ForceCurrentValue(float Value);// 0x2911d60
	void DisplayForValue(float Value);// 0x2cbecb0

--------------------------------
Class: WBP_XPEarned_XPDescElement_C.UserWidget.Widget.Visual.Object
	WidgetAnimation* ShowReason;//[Offset: 0x238, Size: 1]
	WidgetAnimation* MultiplierBump;//[Offset: 0x240, Size: 1]
	TextBlock* MultiplierText;//[Offset: 0x248, Size: 1]
	TextBlock* ReasonText;//[Offset: 0x250, Size: 1]
	FText DescText;//[Offset: 0x258, Size: 1]
	int MultiplierCount;//[Offset: 0x270, Size: 1]
	void ClearData();// 0x2cbecb0
	void Set Data(FText InText);// 0x2cbecb0
	void SetMultiplierValue(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int Temp_int_Variable, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_Greater_IntInt_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	void GetTextValue(out FText DescText);// 0x2cbecb0
	void SetText(FText InText, bool CallFunc_NotEqual_TextText_ReturnValue);// 0x2cbecb0

--------------------------------
Class: FontPreloader_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	FontPreloaderText_C* FontPreloaderText;//[Offset: 0x240, Size: 1]
	VerticalBox* MyVerticalBox;//[Offset: 0x248, Size: 1]
	SlateFontInfo[] FontsToLoad;//[Offset: 0x250, Size: 1]
	bool DebugFontPreloader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_FontPreloader(int EntryPoint, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, FontPreloaderText_C* CallFunc_Create_ReturnValue, SlateFontInfo CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue);// 0x2cbecb0

--------------------------------
Class: FontPreloaderText_C.UserWidget.Widget.Visual.Object
	TextBlock* MyText;//[Offset: 0x238, Size: 1]

--------------------------------
Class: HitIndictor_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	CanvasPanel* HitCanvas;//[Offset: 0x560, Size: 1]
	HitIndicatorSub_C*[] HitIndicatorPool;//[Offset: 0x568, Size: 1]
	void ReturnToPool(HitIndicatorSub_C* HitIndicatorSub, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x2cbecb0
	void Init Indicator Pool(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HitIndicatorSub_C* CallFunc_Create_ReturnValue, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Add_ReturnValue, Anchors K2Node_MakeStruct_Anchors, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x2cbecb0
	void CreateHitIndicator(class Object DamageType, Vector DamageOrigin, bool HitArmor, class KSDamageTypeBase K2Node_ClassDynamicCast_AsKSDamage_Type_Base, bool K2Node_ClassDynamicCast_bSuccess, HitIndicatorSub_C* CallFunc_Array_Get_Item, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void On Viewed Pawn Take Damage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin);// 0x2cbecb0
	void HandleViewedPawnTakeArmorDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin);// 0x2cbecb0
	void ExecuteUbergraph_HitIndictor(int EntryPoint, float K2Node_CustomEvent_DamageAmount, class DamageType K2Node_CustomEvent_DamageTypeClass, Actor* K2Node_CustomEvent_DamageCauser, Vector K2Node_CustomEvent_DamageOrigin, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, float K2Node_CustomEvent_DamageAmount, class DamageType K2Node_CustomEvent_DamageTypeClass, Actor* K2Node_CustomEvent_DamageCauser, Vector K2Node_CustomEvent_DamageOrigin, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: HitIndicatorSub_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	WidgetAnimation* Fade;//[Offset: 0x560, Size: 1]
	Image* ArmorArrow;//[Offset: 0x568, Size: 1]
	Image* ArmorDamageGlow;//[Offset: 0x570, Size: 1]
	CanvasPanel* CanvasPanel;//[Offset: 0x578, Size: 1]
	WidgetSwitcher* DamageType;//[Offset: 0x580, Size: 1]
	Image* HealthDamageGlow;//[Offset: 0x588, Size: 1]
	Image* HitArrow;//[Offset: 0x590, Size: 1]
	Vector HitLocation;//[Offset: 0x598, Size: 1]
	float LifeRemaining;//[Offset: 0x5a4, Size: 1]
	bool IsArmorHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	HitIndictor_C* OwnerWidget;//[Offset: 0x5b0, Size: 1]
	void PlayerIsBlinded(out bool IsBlinded, KSCharacter* CallFunc_GetPawn_ReturnValue, bool CallFunc_IsBlinded_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void WidgetAnimationEvt_Fade_K2Node_WidgetAnimationEvent();// 0x2cbecb0
	void StartDamageAnim(Vector InHitLocation, bool bInIsArmorHit);// 0x2cbecb0
	void ExecuteUbergraph_HitIndicatorSub(int EntryPoint, KSCharacterFoundation* CallFunc_GetPawnFoundation_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Vector CallFunc_Subtract_VectorVector_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, const Transform CallFunc_GetTransform_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Vector CallFunc_InverseTransformDirection_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_DegAtan2_ReturnValue, int K2Node_Select_Default, Vector K2Node_CustomEvent_InHitLocation, bool K2Node_CustomEvent_bInIsArmorHit, bool CallFunc_PlayerIsBlinded_IsBlinded, bool CallFunc_IsAnimationPlaying_ReturnValue);// 0x2cbecb0

--------------------------------
Class: InvalidationBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bCanCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool CacheRelativeTransforms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	void SetCanCache(bool CanCache);// 0x3b5e8b0
	void InvalidateCache();// 0xd76f80
	bool GetCanCache();// 0x3b5d5d0

--------------------------------
Class: KillCam_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	TextBlock* EliminatorTitle;//[Offset: 0x560, Size: 1]
	Image* Image;//[Offset: 0x568, Size: 1]
	TextBlock* SpectatedEliminatorText;//[Offset: 0x570, Size: 1]
	KSPlayerState* PreviousPlayerState;//[Offset: 0x578, Size: 1]
	void PostSetPlayerState();// 0x2cbecb0
	void SetPlayerStateUIRelevanceChanged();// 0x2cbecb0
	void ExecuteUbergraph_KillCam(int EntryPoint, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, bool CallFunc_IsUIRelevant_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: MarkerDisplay_C.KSMarkerDisplayBase.KSMapWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6d0, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x6d8, Size: 1]
	WidgetAnimation* Inspect;//[Offset: 0x6e0, Size: 1]
	Image* Bar;//[Offset: 0x6e8, Size: 1]
	CanvasPanel* DisplayRoot;//[Offset: 0x6f0, Size: 1]
	Image* Image;//[Offset: 0x6f8, Size: 1]
	Image* Image;//[Offset: 0x700, Size: 1]
	CanvasPanel* InspectArea;//[Offset: 0x708, Size: 1]
	Image* LootIcon;//[Offset: 0x710, Size: 1]
	CanvasPanel* LootInspectGroup;//[Offset: 0x718, Size: 1]
	TextBlock* LootViewText;//[Offset: 0x720, Size: 1]
	CanvasPanel* ReticleArea;//[Offset: 0x728, Size: 1]
	Image* Tail;//[Offset: 0x730, Size: 1]
	float Margin X;//[Offset: 0x738, Size: 1]
	float Margin Y;//[Offset: 0x73c, Size: 1]
	LootSiteMarker_v2_C* Current Inspect Marker;//[Offset: 0x740, Size: 1]
	Vector2D Inspect Anim Initial Translation;//[Offset: 0x748, Size: 1]
	MulticastInlineDelegateProperty OnMarkerAddedToScreen;//[Size: 1]
	void AddIconToScreen(KSMapIconWidgetBase* Icon, Anchors K2Node_MakeStruct_Anchors, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, enum Temp_byte_Variable, Vector2D K2Node_Select_Default, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x2cbecb0
	KSMapIconWidgetBase* CreateNewIconWidget(class KSMapIconWidgetBase WidgetClass, int UniqueId, KSPlayerState* CreatingPlayer, enum ParentMapDisplayType, Actor* AssociatedActor, Object* AssociatedObject, Vector DefaultLocation, float Lifespan, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSMapIconWidgetBase* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Receive Loot Inspect Off From Marker(LootSiteMarker_v2_C* Marker, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void Receive Loot Inspect Request From Marker(KSLootSiteBase* Loot Site, LootSiteMarker_v2_C* Marker, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, FText CallFunc_MakeLiteralText_ReturnValue, LinearColor K2Node_Select_Default, Texture2D* K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, enum Temp_byte_Variable, FText Temp_text_Variable, FText K2Node_Select_Default, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2cbecb0
	void InitializeTickAnimations();// 0x2cbecb0
	void Inspect Anim Update(float ElapsedTime, float ElapsedAlpha);// 0x2cbecb0
	void Inspect Anim Finished();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void OnScrambleStateChanged(bool Scrambled);// 0x2cbecb0
	void Handle Loot Site State Changed(LootSiteState Loot Site State);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void DisplayToMapWidget(KSMapIconWidgetBase* MapIcon);// 0x2cbecb0
	void ExecuteUbergraph_MarkerDisplay(int EntryPoint, KSMapIconWidgetBase* K2Node_Event_MapIcon, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, Vector2D CallFunc_MakeVector2D_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText K2Node_Select_Default, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, float K2Node_CustomEvent_ElapsedTime, float K2Node_CustomEvent_ElapsedAlpha, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, float CallFunc_MultiplyByPi_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_Sin_ReturnValue, PUMG_HUD* K2Node_Event_hud, Vector CallFunc_Conv_Vector2DToVector_ReturnValue, Vector CallFunc_VLerp_ReturnValue, bool K2Node_Event_Scrambled, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue, LootSiteState K2Node_CustomEvent_Loot_Site_State, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsValid_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_VSize2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_DegAtan2_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x2cbecb0
	void OnMarkerAddedToScreen__DelegateSignature(KSMapIconWidgetBase* Marker);// 0x2cbecb0

--------------------------------
Class: KSMarkerDisplayBase.KSMapWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	bool GetScreenPositionForMarker(Vector TargetLocation, float AnchorHeight, float MarginX, float MarginY, out Vector2D ScreenLocation);// 0x2927fc0

--------------------------------
Class: KSMapWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	enum MapDisplayType;//[Offset: 0x528, Size: 1]
	bool bWasVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]
	uint64 LastUpdateFrame;//[Offset: 0x530, Size: 1]
	MapIconWidgetConfig[] MapIconWidgetsToPool;//[Offset: 0x538, Size: 1]
	KSMapIconWidgetPool*[] MapIconWidgetPool;//[Offset: 0x548, Size: 1]
	KSMapIconWidgetBase*[] MapIconWidgetPoolShown;//[Offset: 0x558, Size: 1]
	<KSPlayerState*,KSMapIconWidgetBase*> PlayerIconMap;//[Offset: 0x5b8, Size: 1]
	bool AbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640, Size: 1]
	bool CanBeScrambled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x641, Size: 1]
	bool IsScrambled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x642, Size: 1]
	bool bAffectedByScramble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x643, Size: 1]
	void UpdateIcon(KSMapIconWidgetBase* Icon);// 0x2929790
	Vector2D ToIconRenderCoords(Vector2D MapCoords);// 0x29296d0
	float ToIconRenderAngle(float PlayerAngle);// 0x2929640
	void TickCachedTransform();// 0x2929620
	void SetScrambleState(bool Scrambled);// 0x29294b0
	void RemoveWidgetFromLoaderById(int InId);// 0x2928ce0
	void OnScrambleStateChanged(bool Scrambled);// 0x2cbecb0
	void OnReceiveDisplayWidgetInfo(DisplayInfo DisplayInfo);// 0x2928b40
	void OnGameStateSet(GameStateBase* GameStateBase);// 0x2928aa0
	bool IsOnMap(Vector2D MapCoords);// 0x29287f0
	void HandleMoveToWidgetPool(KSMapIconWidgetBase* MapIconWidget);// 0x2928620
	void HandleDisplayFromWidgetPool(KSMapIconWidgetBase* MapIconWidget, DisplayInfo DisplayInfo);// 0x2928440
	KSMapIconWidgetBase* GrabMapIconWidget(FString WidgetPoolName);// 0x2928350
	float GetDistanceToIcon(KSMapIconWidgetBase* Icon);// 0x2927dc0
	Pawn* GetCachedViewedPawn();// 0x2927d50
	Transform GetCachedTransform();// 0x2927d10
	void DisplayToMapWidget(KSMapIconWidgetBase* MapIcon);// 0x2916130
	KSMapIconWidgetBase* CreateNewIconWidget(class KSMapIconWidgetBase WidgetClass, int UniqueId, KSPlayerState* CreatingPlayer, enum ParentMapDisplayType, Actor* AssociatedActor, Object* AssociatedObject, Vector DefaultLocation, float Lifespan);// 0x2cbecb0
	void CreateMapIconWidgetPool(MapIconWidgetConfig MapIconWidgetConfig);// 0x2927a70

--------------------------------
Class: KSMapIconWidgetBase.UserWidget.Widget.Visual.Object
	bool bDoesIconRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x238, Size: 1]
	float MarkerAnchorHeight;//[Offset: 0x23c, Size: 1]
	enum MarkerAlignment;//[Offset: 0x240, Size: 1]
	float HeightThreshold;//[Offset: 0x244, Size: 1]
	float CachedRawMetersAway;//[Offset: 0x24c, Size: 1]
	int UniqueId;//[Offset: 0x250, Size: 1]
	KSPlayerState* CreatingPlayer;//[Offset: 0x254, Size: 1]
	enum ParentMapDisplayType;//[Offset: 0x25c, Size: 1]
	Actor* AssociatedActor;//[Offset: 0x260, Size: 1]
	Object* AssociatedObject;//[Offset: 0x268, Size: 1]
	Vector DefaultLocation;//[Offset: 0x270, Size: 1]
	float Lifespan;//[Offset: 0x27c, Size: 1]
	KSMapWidgetBase* ParentMapWidget;//[Offset: 0x280, Size: 1]
	Vector2D ScreenMargins;//[Offset: 0x288, Size: 1]
	float CenterPercentageWidth;//[Offset: 0x290, Size: 1]
	float CenterPercentageHeight;//[Offset: 0x294, Size: 1]
	float OpacityWhenAiming;//[Offset: 0x298, Size: 1]
	bool DoesFadeOutWhenAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float AimTransitionOpacity;//[Offset: 0x2a0, Size: 1]
	Vector IconOffset;//[Offset: 0x2a4, Size: 1]
	float HoverDelaySeconds;//[Offset: 0x2cc, Size: 1]
	MulticastInlineDelegateProperty OnMapIconWidgetReady;//[Size: 1]
	MulticastInlineDelegateProperty OnMapIconWidgetRemove;//[Size: 1]
	bool bIsWidgetPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	FString WidgetPoolName;//[Offset: 0x310, Size: 1]
	void UpdateScreenRegion();// 0x29299c0
	void UpdateOpacityWhenAiming();// 0x2929970
	void UpdateMetersAway(int Meters);// 0x29298e0
	void UpdateMeetsHeightThreshold(bool bHeight, bool bDepth);// 0x2929810
	enum Update();// 0x2929760
	bool ShouldUpdateOpacityWhenAiming();// 0xe7ee10
	bool ShouldUpdateHover();// 0x29295f0
	bool ShouldUpdate();// 0x29295c0
	void SetScreenRegion(enum ScreenRegion);// 0x2929540
	void SetLifeSpan(float InLifespan);// 0x2929430
	void SetDisplayInfo(int InUniqueId, KSPlayerState* InCreatingPlayer, enum InParentMapDisplayType, Actor* InAssociatedActor, Object* InAssociatedObject, Vector InDefaultLocation, float InLifespan);// 0x2929220
	void SetArrowAngle(float Angle);// 0x2928e90
	void ResetDisplayInfo();// 0xe80430
	void OnUnhoverTimerComplete();// 0x2928cc0
	void OnHoverTimerComplete();// 0x2928b20
	void OnHoverStateChanged(enum NewHoverState);// 0x2cbecb0
	void OnAssociatedActorDestroyed(Actor* Actor);// 0x2928a20
	void OnAimStateChanged(enum NewAimState, float NewAimTransitionOffset);// 0x2928960
	void IsScreenRegion(out bool InsideCenter, out bool InsideMargins);// 0x2928880
	bool IsInCenteredScreenRect(float PositionX, float PositionY, float XMargin, float YMargin);// 0x29286a0
	bool IsHovering();// 0xe7e900
	void HandleMapIconWidgetHide();// 0x2928600
	float GetWorldYaw();// 0x2928310
	Vector GetWorldPosition();// 0x29282d0
	enum GetHoverState();// 0x27c7520
	float GetEdgeArrowAngleBase(float Angle);// 0x2927e60
	float GetDistanceToIcon();// 0x2927d90
	enum GetCurrentScreenRegion();// 0x26ebeb0
	void GetArrowPosition(bool IsIconVisible, float Angle, out Vector2D ArrowPosition);// 0x2927c00
	void GameStateSet(GameStateBase* InGameState);// 0x2927b70

--------------------------------
Class: MapIconWidgetConfig
	enum MapDisplayType;//[Offset: 0x0, Size: 1]
	FString WidgetPoolType;//[Offset: 0x8, Size: 1]
	int Count;//[Offset: 0x18, Size: 1]
	class UserWidget* MapIconWidget;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSMapIconWidgetPool.Object
	FString PoolType;//[Offset: 0x28, Size: 1]
	KSMapIconWidgetBase*[] MapIconWidgets;//[Offset: 0x38, Size: 1]
	KSMapIconWidgetBase* GetMapIconWidget();// 0x2927f90
	void AddMapIconWidget(KSMapIconWidgetBase* MapIconWidget);// 0x2927970

--------------------------------
Class: LootSiteMarker_v2_C.KSLootSiteMarkerWidget.KSMapIconWidgetBase.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 1]
	Image* Arrow;//[Offset: 0x348, Size: 1]
	TextBlock* DebugText;//[Offset: 0x350, Size: 1]
	Image* IconBg;//[Offset: 0x358, Size: 1]
	ScaleBox* IconScale;//[Offset: 0x360, Size: 1]
	Image* IconStar;//[Offset: 0x368, Size: 1]
	Image* Image;//[Offset: 0x370, Size: 1]
	Image* Pin;//[Offset: 0x378, Size: 1]
	SizeBox* PinSize;//[Offset: 0x380, Size: 1]
	bool IsInspectMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	Texture2D* Common Loot Texture;//[Offset: 0x390, Size: 1]
	Texture2D* Epic Loot Texture;//[Offset: 0x398, Size: 1]
	Texture2D* Common Pin Texture;//[Offset: 0x3a0, Size: 1]
	FName State;//[Offset: 0x3a8, Size: 1]
	float Hover Distance;//[Offset: 0x3b0, Size: 1]
	float Inspect Hover Tolerance;//[Offset: 0x3b4, Size: 1]
	MarkerDisplay_C* ParentMapWidgetAsMarkerDisplay;//[Offset: 0x3b8, Size: 1]
	int DisplayDistance;//[Offset: 0x3c0, Size: 1]
	Texture2D* Rare Pin Texture;//[Offset: 0x3c8, Size: 1]
	Texture2D* Epic Pin Texture;//[Offset: 0x3d0, Size: 1]
	Texture2D* Legendary Pin Texture;//[Offset: 0x3d8, Size: 1]
	Texture2D* Uncommon Loot Texture;//[Offset: 0x3e0, Size: 1]
	Texture2D* Rare Loot Texture;//[Offset: 0x3e8, Size: 1]
	Texture2D* Legendary Loot Texture;//[Offset: 0x3f0, Size: 1]
	Texture2D* Uncommon Pin Texture;//[Offset: 0x3f8, Size: 1]
	void Get Visibility State For Distance(out enum NewParam, float Max Visibility Distance Before Landing, float Max Visibility Distance, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, float CallFunc_GetDistanceToIcon_ReturnValue, float K2Node_Select_Default, bool CallFunc_LessEqual_FloatFloat_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	bool IsHovering(float CallFunc_GetDistanceToIcon_ReturnValue, float CallFunc_GetHitboxMultiplierByDistance_HitboxMultiplier, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_VSize2D_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	bool ShouldUpdateHover(bool CallFunc_Is_Still_In_Initial_Render_Position_Still_In_Initial_Render_Position, bool CallFunc_Not_PreBool_ReturnValue);// 0x2cbecb0
	void Get Default Icon Visibility(out enum NewParam, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void Get Icon Scale(out float Icon Scale, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, float CallFunc_GetDistanceToIcon_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Log_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x2cbecb0
	void GetLootTexture(out Texture2D* Texture2D, enum Temp_byte_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* K2Node_Select_Default);// 0x2cbecb0
	void GetPinTexture(out Texture2D* Texture, enum Temp_byte_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, Texture2D* K2Node_Select_Default);// 0x2cbecb0
	void Get Pin Height(out float Pin Height, float Max Distance Height, float Min Distance Height, float Max Distance, float Min Distance, float CallFunc_GetDistanceToIcon_ReturnValue, Vector CallFunc_GetWorldPosition_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetScreenPositionForMarker_ScreenLocation, bool CallFunc_GetScreenPositionForMarker_ReturnValue);// 0x2cbecb0
	void Get Render Opacity(out float Render Opacity, float Max Distance Opacity, float Min Distance Opacity, float Max Distance, float Min Distance, bool Temp_bool_Variable, float Temp_float_Variable, float CallFunc_GetDistanceToIcon_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue, float K2Node_Select_Default);// 0x2cbecb0
	void Is Still In Initial Render Position(out bool Still In Initial Render Position, bool CallFunc_EqualEqual_Vector2DVector2D_ReturnValue);// 0x2cbecb0
	void GetHitboxMultiplierByDistance(out float HitboxMultiplier, float Max Distance Multiplier, float Min Distance Multiplier, float Max Distance, float Min Distance, float CallFunc_GetDistanceToIcon_ReturnValue, float CallFunc_MapRangeClamped_ReturnValue);// 0x2cbecb0
	enum Update(enum ReturnVisibility, enum CallFunc_Get_Visibility_State_For_Distance_NewParam, enum CallFunc_Update_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Get_Pin_Height_Pin_Height);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void UpdateMetersAway(int Meters);// 0x2cbecb0
	void OnHoverStateChanged(enum NewHoverState);// 0x2cbecb0
	void HandleLootSiteRarityChanged(enum CurrentRarity);// 0x2cbecb0
	void SetScreenRegion(enum ScreenRegion);// 0x2cbecb0
	void SetArrowAngle(float Angle);// 0x2cbecb0
	void ExecuteUbergraph_LootSiteMarker_v2(int EntryPoint, float K2Node_Event_Angle, float CallFunc_Subtract_FloatFloat_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float Temp_float_Variable, float Temp_float_Variable, float Temp_float_Variable, int K2Node_Event_Meters, KSLootSiteBase* K2Node_DynamicCast_AsKSLoot_Site_Base, bool K2Node_DynamicCast_bSuccess, float CallFunc_Get_Render_Opacity_Render_Opacity, Texture2D* CallFunc_GetPinTexture_Texture, Texture2D* CallFunc_GetLootTexture_Texture2D, float CallFunc_Get_Icon_Scale_Icon_Scale, float CallFunc_GetHitboxMultiplierByDistance_HitboxMultiplier, enum CallFunc_Get_Default_Icon_Visibility_NewParam, Vector2D CallFunc_MakeVector2D_ReturnValue, enum K2Node_Event_NewHoverState, MarkerDisplay_C* K2Node_DynamicCast_AsMarker_Display, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, enum K2Node_CustomEvent_CurrentRarity, Texture2D* CallFunc_GetLootTexture_Texture2D, Texture2D* CallFunc_GetPinTexture_Texture, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Event_ScreenRegion, enum K2Node_Select_Default, float K2Node_Select_Default, LinearColor K2Node_MakeStruct_LinearColor);// 0x2cbecb0

--------------------------------
Class: KSLootSiteMarkerWidget.KSMapIconWidgetBase.UserWidget.Widget.Visual.Object
	KSLootSiteBase* MarkedLootSite;//[Offset: 0x320, Size: 1]
	float MaxDisplayDistance;//[Offset: 0x328, Size: 1]
	bool bViewedPawnHasEndedFreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	enum[] TagsToHide;//[Offset: 0x330, Size: 1]

--------------------------------
Class: PUMG_GenericRouteDataObject.Object
	FString StringValue;//[Offset: 0x28, Size: 1]
	int IntValue;//[Offset: 0x38, Size: 1]
	FName NameValue;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: ModsWidget_C.KSViewedPawnModsWidget.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	Overlay* Overlay;//[Offset: 0x570, Size: 1]
	Overlay* GetOverlay();// 0x2cbecb0

--------------------------------
Class: KSViewedPawnModsWidget.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void OnViewedPawnModAdded(KSPlayerMod* Mod, KSPlayerModInstance* ModInstance, bool bFromPawnChange);// 0x296c2a0
	void HandlePlayerStateModAdded(KSPlayerMod* Mod, KSPlayerModInstance* ModInstance);// 0x296bfa0
	Overlay* GetOverlay();// 0x2cbecb0

--------------------------------
Class: OutBound_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	TextBlock* Timer;//[Offset: 0x560, Size: 1]
	TextBlock* WarningMsg;//[Offset: 0x568, Size: 1]
	TextBlock* WarningTitle;//[Offset: 0x570, Size: 1]
	KSCharacterFoundation* KSCharacterFoundation;//[Offset: 0x578, Size: 1]
	void Construct();// 0x2cbecb0
	void HandleOutBoundsStart();// 0x2cbecb0
	void HandleOutBoundsWarningEnd(KSCharacterFoundation* CharacterFoundation);// 0x2cbecb0
	void HandleOutBoundsEnd();// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void OpenGate();// 0x2cbecb0
	void CloseGate();// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void ExecuteUbergraph_OutBound(int EntryPoint, KSOutOfBoundsComponent* CallFunc_GetOutOfBoundsComponent_ReturnValue, float CallFunc_IsOutOfBounds_RemainingTime, bool CallFunc_IsOutOfBounds_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_GetText_ReturnValue, FText CallFunc_TextToUpper_ReturnValue, KSCharacterFoundation* K2Node_CustomEvent_CharacterFoundation, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool Temp_bool_Has_Been_Initd_Variable, KSCharacterFoundation* CallFunc_GetPawnFoundation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, KSOutOfBoundsComponent* CallFunc_GetOutOfBoundsComponent_ReturnValue, KSCharacterFoundation* CallFunc_GetPawnFoundation_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSOutOfBoundsComponent* CallFunc_GetOutOfBoundsComponent_ReturnValue, float CallFunc_IsOutOfBounds_RemainingTime, bool CallFunc_IsOutOfBounds_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_FFloor_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, bool Temp_bool_IsClosed_Variable);// 0x2cbecb0

--------------------------------
Class: PickupNotify_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x560, Size: 1]
	TextBlock* HoldText;//[Offset: 0x568, Size: 1]
	Image* Image;//[Offset: 0x570, Size: 1]
	WBP_InputCallout_C* InputCallout;//[Offset: 0x578, Size: 1]
	SizeBox* item_container;//[Offset: 0x580, Size: 1]
	WBP_AsyncIcon_C* ItemIcon;//[Offset: 0x588, Size: 1]
	SizeBox* progress_wrapper;//[Offset: 0x590, Size: 1]
	VerticalBox* ProgressWrapper;//[Offset: 0x598, Size: 1]
	Overlay* prompt_container;//[Offset: 0x5a0, Size: 1]
	RichTextBlock* RichPromptText;//[Offset: 0x5a8, Size: 1]
	ProgressBar* TimeRemainingBar;//[Offset: 0x5b0, Size: 1]
	TextBlock* TimeRemainingText;//[Offset: 0x5b8, Size: 1]
	Image* WeaponClassIcon;//[Offset: 0x5c0, Size: 1]
	TextBlock* WeaponFireModeText;//[Offset: 0x5c8, Size: 1]
	HorizontalBox* WeaponSpecificInfo;//[Offset: 0x5d0, Size: 1]
	FText Item Name;//[Offset: 0x5d8, Size: 1]
	FText Pickup Key;//[Offset: 0x5f0, Size: 1]
	bool InteractableFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x608, Size: 1]
	FText Prompt;//[Offset: 0x610, Size: 1]
	FName[] ActionName;//[Offset: 0x628, Size: 1]
	bool Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	float EndTime;//[Offset: 0x63c, Size: 1]
	float StartTime;//[Offset: 0x640, Size: 1]
	float TimeRemaining;//[Offset: 0x644, Size: 1]
	float MinimumShowProgressTime;//[Offset: 0x648, Size: 1]
	FText PrePromptText;//[Offset: 0x650, Size: 1]
	Actor* Last Hovered Interactable;//[Offset: 0x668, Size: 1]
	Actor* CachedInteract;//[Offset: 0x670, Size: 1]
	void ClearTexts(FText CallFunc_GetText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FText CallFunc_GetText_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2cbecb0
	void UpdateInputCallout(Actor* Interactable, FName Temp_name_Variable, interface classNone K2Node_DynamicCast_AsKSInteractable, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetInteractionActions_OutKBMAction, FName CallFunc_GetInteractionActions_OutGamepadAction, FName Temp_name_Variable);// 0x2cbecb0
	void Should Show Interaction(out bool Return Value, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSInteractableComponent* Temp_object_Variable, interface classNone K2Node_DynamicCast_AsKSInteractable, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, KSInteractableComponent* CallFunc_GetInteractableComponent_ReturnValue, bool CallFunc_ShouldDisplayPrompt_ReturnValue, bool CallFunc_IsAutomaticInteraction_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void IsBombDropInteraction(Actor* Interactable, out bool Return Value, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSNeutralBombDrop* K2Node_DynamicCast_AsKSNeutral_Bomb_Drop, bool K2Node_DynamicCast_bSuccess, interface classNone CallFunc_GetObjectiveState_self_CastInput, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, KSCharacterBase* CallFunc_GetBestCharacterOwner_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void BindInteractAction(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetViewTarget_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void UnBindInteractAction(KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue);// 0x2cbecb0
	void SetItemIcon(Actor* Actor, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSItemDrop* K2Node_DynamicCast_AsKSItem_Drop, bool K2Node_DynamicCast_bSuccess, KSProjectile_Grenade* K2Node_DynamicCast_AsKSProjectile_Grenade, bool K2Node_DynamicCast_bSuccess, KSItem* CallFunc_GetItemAsset_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, enum CallFunc_GetInGameRarity_ReturnValue, bool CallFunc_IsValid_ReturnValue, LinearColor CallFunc_GetLinearColorForRarity_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, LinearColor CallFunc_GetLinearColorForRarity_ReturnValue);// 0x2cbecb0
	void DisplayTimeRemaining(float Seconds, float Duration, int Temp_int_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, int Temp_int_Variable, bool Temp_bool_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int K2Node_Select_Default, FText CallFunc_Conv_FloatToText_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x2cbecb0
	void OnSkydiveEarlyOutChanged(bool CanRemove, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, FText CallFunc_MakeLiteralText_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	FText Bind_PostButtonText(FString CallFunc_GetSplitPrompt_PreSplit, FString CallFunc_GetSplitPrompt_PostSplit, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2cbecb0
	void GetSplitPrompt(out FString PreSplit, out FString PostSplit, FText Scratch, FText CallFunc_MakeLiteralText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	FText Bind_PreButtonText(FString CallFunc_GetSplitPrompt_PreSplit, FString CallFunc_GetSplitPrompt_PostSplit, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2cbecb0
	enum Bind_RootVisibility(KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_IsDowned_ReturnValue, bool CallFunc_IsDeadOrDestroyed_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void OnHoveredInteractableChanged(Actor* Actor, FText PrePromptText2, FText Temp_text_Variable, bool CallFunc_TextIsEmpty_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FText Temp_text_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Should_Show_Interaction_Return_Value, enum Temp_byte_Variable, bool CallFunc_EqualEqual_TextText_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, interface classNone K2Node_DynamicCast_AsKSInteractable, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default, FText CallFunc_ConstructPrompt_Prefix, FText CallFunc_ConstructPrompt_Suffix, KSWeaponAssetDrop* K2Node_DynamicCast_AsKSWeapon_Asset_Drop, bool K2Node_DynamicCast_bSuccess, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_GetWeaponFireModeAsText_FireModeText, Texture2D* CallFunc_GetWeaponClassIcon_Icon, bool CallFunc_IsGun_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	FText Get Pickup Text(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void ModeChange(byte InputState);// 0x2cbecb0
	void HandleKillCamChange(bool Enabled);// 0x2cbecb0
	void OnKeyBindSettingChanged(FName KeyBindName);// 0x2cbecb0
	void StartInteract(Actor* Target, float Duration);// 0x2cbecb0
	void StartAction(float Duration, FText Prompt);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void end();// 0x2cbecb0
	void ExecuteUbergraph_PickupNotify(int EntryPoint, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_HUD* K2Node_Event_hud, byte CallFunc_GetCurrentInputState_ReturnValue, byte K2Node_CustomEvent_InputState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, LocalPlayer* CallFunc_GetOwningLocalPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSLocalPlayer* K2Node_DynamicCast_AsKSLocal_Player, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_Enabled, KSKillCam* CallFunc_GetKillCam_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSSettingsDataFactory* CallFunc_GetSettingsDataFactory_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_KeyBindName, bool CallFunc_Array_Contains_ReturnValue, Actor* K2Node_CustomEvent_Target, float K2Node_CustomEvent_Duration, float CallFunc_GetGameTimeInSeconds_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, KSInteractableComponent* Temp_object_Variable, bool CallFunc_ShouldDisplayProgress_ReturnValue, float K2Node_CustomEvent_Duration, FText K2Node_CustomEvent_Prompt, float CallFunc_GetGameTimeInSeconds_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, enum Temp_byte_Variable, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_GetGameTimeInSeconds_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_GetGameTimeInSeconds_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, FText Temp_text_Variable, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, enum K2Node_Select_Default, enum Temp_byte_Variable, interface classNone K2Node_DynamicCast_AsKSInteractable, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, interface classNone K2Node_DynamicCast_AsKSInteractable, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, enum Temp_byte_Variable, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, FText CallFunc_GetInteractionProgressText_ReturnValue, KSInteractableComponent* CallFunc_GetInteractableComponent_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool Temp_bool_Variable, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDeadOrDestroyed_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x130, Size: 1]
	DataTable* TextStyleSet;//[Offset: 0x148, Size: 1]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x150, Size: 1]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x168, Size: 1]
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x640, Size: 1]
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x3b68870
	void SetText(out const FText InText);// 0x3b687a0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3b67f10
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x3b679d0
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x3b67850
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x3b677d0
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3b67750
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x3b67620
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x3b67530
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3b67420
	FText GetText();// 0x3b667f0
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x3b66560
	void ClearAllDefaultStyleOverrides();// 0x3b660a0

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x58, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x80, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x88, Size: 1]
	SlateColor SelectedBackgroundColor;//[Offset: 0x98, Size: 1]
	LinearColor HighlightColor;//[Offset: 0xc0, Size: 1]
	SlateBrush HighlightShape;//[Offset: 0xd0, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x158, Size: 1]
	SlateBrush UnderlineBrush;//[Offset: 0x1e0, Size: 1]

--------------------------------
Class: KSNeutralBombDrop.KSWeaponAssetDrop_MacGuffin.KSWeaponAssetDrop.KSItemDrop.Actor.Object
	float CurrentInteractionProgress;//[Offset: 0x918, Size: 1]
	KSCharacter* CurrentInteractor;//[Offset: 0x920, Size: 1]
	FText NeutralPickupPrompt;//[Offset: 0x928, Size: 1]
	FText NeutralPickupProgressText;//[Offset: 0x940, Size: 1]
	FText DisarmPrompt;//[Offset: 0x958, Size: 1]
	FText DisarmProgressText;//[Offset: 0x970, Size: 1]
	float MaxDisarmInteractionDistance;//[Offset: 0x988, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0x990, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0x9b8, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x9e0, Size: 1]
	KSInteractableComponent* BombInteractableComponent;//[Offset: 0xa08, Size: 1]
	int TeamSpottingBitmask;//[Offset: 0xa14, Size: 1]
	bool bShouldAutomaticallyBeSpotted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 1]
	float MaxSpottingRange;//[Offset: 0xa1c, Size: 1]
	float SpottingSweepRadius;//[Offset: 0xa20, Size: 1]
	float GroundCheckDistance;//[Offset: 0xa24, Size: 1]
	FName SoundEventName;//[Offset: 0xa30, Size: 1]
	float SoundEventLoudness;//[Offset: 0xa38, Size: 1]
	float RepeatTimeToNotifyBots;//[Offset: 0xa3c, Size: 1]
	bool Respawn();// 0x2712dc0
	static void RequestBombReset(const Object* WorldContextObject);// 0x2712d50
	void OnOverlapBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2712ae0
	void NotifyBots();// 0x2712990
	bool IsSpottedByTeam(KSTeamState* Team);// 0x27128f0
	bool IsSpottedByPlayer(Controller* Controller);// 0x2712850
	float GetCurrentInteractionProgress();// 0x2711e60
	static KSLootSiteBase* GetBestBombSpawner(const Object* WorldContextObject);// 0x2711da0
	void ForceExplode();// 0x2711d80
	void ExplodeCosmetic();// 0x2cbecb0
	void Explode();// 0x1f12860

--------------------------------
Class: KSWeaponAssetDrop_MacGuffin.KSWeaponAssetDrop.KSItemDrop.Actor.Object
	KSObjectiveInfo ObjectiveInfo;//[Offset: 0x858, Size: 1]
	KSObjectiveTimerInfo ObjectiveTimerInfo;//[Offset: 0x8c0, Size: 1]
	KSObjectiveCaptureInfo ObjectiveCaptureInfo;//[Offset: 0x8f8, Size: 1]
	Actor* PointOfInterest;//[Offset: 0x910, Size: 1]
	void OnRep_ObjectiveTimer();// 0x26625f0
	void OnObjectiveTimerTickEvent(float Time);// 0x2cbecb0
	void OnObjectiveTimerCompleteEvent();// 0x2cbecb0
	void OnObjectiveTimerActiveEvent(bool Active);// 0x2cbecb0
	void OnObjectiveStateChangedEvent();// 0x2cbecb0
	void OnObjectiveInactiveEvent();// 0x2cbecb0
	void OnObjectiveActiveEvent();// 0x2cbecb0

--------------------------------
Class: PingNotify_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	Image* Image;//[Offset: 0x560, Size: 1]
	WBP_InputCallout_C* InputCallout;//[Offset: 0x568, Size: 1]
	Overlay* PingNotifyOverlay;//[Offset: 0x570, Size: 1]
	Overlay* PingPromptContainer;//[Offset: 0x578, Size: 1]
	TextBlock* PingText;//[Offset: 0x580, Size: 1]
	FName[] ActionName;//[Offset: 0x588, Size: 1]
	void HoveredActorChanged(Actor* NewHoveredActor, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_DoesImplementInterface_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void HandleKillCamChange(bool Enabled);// 0x2cbecb0
	void OnKeyBindSettingChanged(FName KeyBindName);// 0x2cbecb0
	void ExecuteUbergraph_PingNotify(int EntryPoint, PUMG_HUD* K2Node_Event_hud, byte CallFunc_GetCurrentInputState_ReturnValue, LocalPlayer* CallFunc_GetOwningLocalPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSLocalPlayer* K2Node_DynamicCast_AsKSLocal_Player, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_Enabled, KSKillCam* CallFunc_GetKillCam_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSSettingsDataFactory* CallFunc_GetSettingsDataFactory_ReturnValue, FName K2Node_CustomEvent_KeyBindName, bool CallFunc_Array_Contains_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSPingManager* CallFunc_GetPingManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSPingManager* CallFunc_GetPingManager_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: PopupManager_C.PUMG_PopupManager.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5e8, Size: 1]
	WidgetAnimation* OnShow;//[Offset: 0x5f0, Size: 1]
	Overlay* BackfillRewardWrapper;//[Offset: 0x5f8, Size: 1]
	Image* background;//[Offset: 0x600, Size: 1]
	HorizontalBox* ButtonContainer;//[Offset: 0x608, Size: 1]
	SizeBox* ContentBox;//[Offset: 0x610, Size: 1]
	VerticalBox* ContentVertBox;//[Offset: 0x618, Size: 1]
	RichTextBlock* DescRichText;//[Offset: 0x620, Size: 1]
	TextBlock* HeaderText;//[Offset: 0x628, Size: 1]
	Image* Image;//[Offset: 0x630, Size: 1]
	Image* Image;//[Offset: 0x638, Size: 1]
	PUMG_UnsafeZone* PUMG_UnsafeZone;//[Offset: 0x640, Size: 1]
	Image* Shadow;//[Offset: 0x648, Size: 1]
	WBP_StandardButton_02_C* StandardButton_02;//[Offset: 0x650, Size: 1]
	WBP_StandardButton_02_C* StandardButton_02_C;//[Offset: 0x658, Size: 1]
	TextBlock* SubheaderText;//[Offset: 0x660, Size: 1]
	EditableTextBox* TextEntry;//[Offset: 0x668, Size: 1]
	TextBlock* Warning;//[Offset: 0x670, Size: 1]
	WBP_panel_bevel_C* WBP_panel_bevel_C;//[Offset: 0x678, Size: 1]
	int CurrentPopupId;//[Offset: 0x680, Size: 1]
	WBP_StandardButton_02_C*[] Buttons;//[Offset: 0x688, Size: 1]
	byte CurrentInputState;//[Offset: 0x698, Size: 1]
	bool BackHeldOnShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	FName[] ActionMapKeysToAllow;//[Offset: 0x6a0, Size: 1]
	Key[] KeysToAllowDownUp;//[Offset: 0x6b0, Size: 1]
	AkAudioEvent* CancelClickPopupManSFX;//[Offset: 0x6c0, Size: 1]
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent, Key CallFunc_GetKey_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, EventReply CallFunc_Handled_ReturnValue, EventReply CallFunc_OnKeyUp_ReturnValue);// 0x2cbecb0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, bool CallFunc_IsVisible_ReturnValue, Key CallFunc_GetKey_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, EventReply CallFunc_OnKeyDown_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x2cbecb0
	void SetupSubHeaderText(FText NewSubHeaderText, enum Temp_byte_Variable, bool CallFunc_TextIsEmpty_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void SetupButtons(out PUMG_PopupButtonConfig[] ButtonInfo, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, SlateChildSize K2Node_MakeStruct_SlateChildSize, Margin K2Node_MakeStruct_Margin, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_PopupButtonConfig CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, WBP_StandardButton_02_C* CallFunc_Array_Get_Item, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, WBP_StandardButton_02_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Add_ReturnValue, HorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue);// 0x2cbecb0
	void SetupTextEntry(bool HasTextEntry, FText DefaultEntryText, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void SetupWarningText(FText NewWarningText, bool Temp_bool_Variable, bool CallFunc_TextIsEmpty_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void SetupDescription(FText NewDescText, bool Temp_bool_Variable, bool CallFunc_TextIsEmpty_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void SetupHeader(FText NewHeaderText, bool Temp_bool_Variable, bool CallFunc_TextIsEmpty_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	bool NavigateBack();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ShowPopup(PUMG_PopupConfig popupData);// 0x2cbecb0
	void HidePopup();// 0x2cbecb0
	void ButtonPressed(Widget* Index);// 0x2cbecb0
	void InitializeWidgetNavigation();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void BndEvt__CancelButton_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature(Widget* Widget);// 0x2cbecb0
	void HandleCancelButtonClicked(Widget* InIndex);// 0x2cbecb0
	void OnShown();// 0x2cbecb0
	void OnHide();// 0x2cbecb0
	void OnBackButton();// 0x2cbecb0
	void ExecuteUbergraph_PopupManager(int EntryPoint, PUMG_PopupConfig K2Node_Event_popupData, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, Widget* K2Node_CustomEvent_Index, WBP_StandardButton_02_C* K2Node_DynamicCast_AsWBP_Standard_Button_02, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, PUMG_HUD* K2Node_Event_hud, Widget* K2Node_ComponentBoundEvent_Widget, bool Temp_bool_Variable, AkAudioEvent* Temp_object_Variable, enum K2Node_Select_Default, bool Temp_bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Widget* K2Node_CustomEvent_InIndex, Key CallFunc_GetGamepadCancelButton_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsInputKeyDown_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, bool CallFunc_WasInputKeyJustReleased_ReturnValue, bool CallFunc_IsInputKeyDown_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Array_Find_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FName[] K2Node_MakeArray_Array, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLobbyHUD_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, FName CallFunc_PopOverrideRoute_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, Widget* CallFunc_SetFocusToThis_ReturnValue, bool CallFunc_IsValid_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, AkAudioEvent* K2Node_Select_Default, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_StandardButton_02_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* OnClick;//[Offset: 0x530, Size: 1]
	WidgetAnimation* Highlight;//[Offset: 0x538, Size: 1]
	Image* BackgroundImage;//[Offset: 0x540, Size: 1]
	TextBlock* ButtonText;//[Offset: 0x548, Size: 1]
	Image* Click;//[Offset: 0x550, Size: 1]
	Image* Image;//[Offset: 0x558, Size: 1]
	Button* LoadoutButton;//[Offset: 0x560, Size: 1]
	SizeBox* TextSizeWrapper;//[Offset: 0x568, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	AkAudioEvent* ClickStandardButton_02SFX;//[Offset: 0x5a0, Size: 1]
	FText DefaultButtonText;//[Offset: 0x5a8, Size: 1]
	float DefaultWidth;//[Offset: 0x5c0, Size: 1]
	AkAudioEvent* HoverStandardButton_02SFX;//[Offset: 0x5c8, Size: 1]
	byte ButtonFontStyle;//[Offset: 0x5d0, Size: 1]
	void SetDefaultDisplay(byte Temp_byte_Variable, bool CallFunc_GetFontByName_HasFound, SlateFontInfo CallFunc_GetFontByName_FontInfo, bool CallFunc_GetFontByName_HasFound, SlateFontInfo CallFunc_GetFontByName_FontInfo, bool CallFunc_GetFontByName_HasFound, SlateFontInfo CallFunc_GetFontByName_FontInfo, SlateFontInfo K2Node_Select_Default);// 0x2cbecb0
	void SetWidth(float InWidth);// 0x2cbecb0
	void SetButtonText(FText ButtonText);// 0x2cbecb0
	bool NavigateConfirm();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x2cbecb0
	void GamepadHover();// 0x2cbecb0
	void GamepadUnhover();// 0x2cbecb0
	void GamepadConfirm();// 0x2cbecb0
	void Do Hover();// 0x2cbecb0
	void Do Unhover();// 0x2cbecb0
	void ExecuteUbergraph_WBP_StandardButton_02(int EntryPoint, bool CallFunc_IsMobile_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, bool K2Node_Event_IsDesignTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0
	void OnUnhovered__DelegateSignature(Widget* Widget);// 0x2cbecb0
	void OnHovered__DelegateSignature(Widget* Widget);// 0x2cbecb0
	void OnClicked__DelegateSignature(Widget* Widget);// 0x2cbecb0

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x110, Size: 1]
	delegate TextDelegate;//[Offset: 0x128, Size: 1]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x138, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x928, Size: 1]
	FText HintText;//[Offset: 0x930, Size: 1]
	delegate HintTextDelegate;//[Offset: 0x948, Size: 1]
	SlateFontInfo Font;//[Offset: 0x958, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x9a8, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x9b8, Size: 1]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9c8, Size: 1]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d9, Size: 1]
	float MinimumDesiredWidth;//[Offset: 0x9dc, Size: 1]
	Margin Padding;//[Offset: 0x9e0, Size: 1]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f3, Size: 1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4, Size: 1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f5, Size: 1]
	byte KeyboardType;//[Offset: 0x9f6, Size: 1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9f7, Size: 1]
	enum VirtualKeyboardTrigger;//[Offset: 0x9f8, Size: 1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x9f9, Size: 1]
	byte Justification;//[Offset: 0x9fa, Size: 1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x9fb, Size: 1]
	MulticastInlineDelegateProperty OnTextChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	void SetText(FText InText);// 0x3b5adf0
	void SetJustification(byte InJustification);// 0x3b5a7d0
	void SetIsReadOnly(bool bReadOnly);// 0x3b5a6c0
	void SetIsPassword(bool bIsPassword);// 0x3b5a5a0
	void SetHintText(FText InText);// 0x3b5a290
	void SetError(FText InError);// 0x3b5a0d0
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x2cbecb0
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x2cbecb0
	bool HasError();// 0x3b59ba0
	FText GetText();// 0x3b59ad0
	void ClearError();// 0x3b59290

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 1]
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 1]
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 1]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 1]
	Margin Padding;//[Offset: 0x228, Size: 1]
	SlateFontInfo Font;//[Offset: 0x238, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x288, Size: 1]
	SlateColor BackgroundColor;//[Offset: 0x2b0, Size: 1]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2d8, Size: 1]
	Margin HScrollBarPadding;//[Offset: 0x300, Size: 1]
	Margin VScrollBarPadding;//[Offset: 0x310, Size: 1]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x320, Size: 1]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 1]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 1]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 1]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 1]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 1]
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 1]
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 1]
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 1]

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: WBP_panel_bevel_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]
	Image* Image;//[Offset: 0x240, Size: 1]
	Image* Image;//[Offset: 0x248, Size: 1]

--------------------------------
Class: WBP_RespawnTimer_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* TickTime;//[Offset: 0x530, Size: 1]
	Image* Image;//[Offset: 0x538, Size: 1]
	PUMG_UnsafeZone* PUMG_UnsafeZone;//[Offset: 0x540, Size: 1]
	Overlay* TimeDisplayOverlay;//[Offset: 0x548, Size: 1]
	TextBlock* TimeToRespawn;//[Offset: 0x550, Size: 1]
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void On Respawn Timer Tick(float Seconds);// 0x2cbecb0
	void On Respawn Timer Active(bool bActive);// 0x2cbecb0
	void OnRespawnTimerComplete();// 0x2cbecb0
	void ExecuteUbergraph_WBP_RespawnTimer(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PUMG_HUD* K2Node_Event_hud, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, float K2Node_CustomEvent_Seconds, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, bool K2Node_CustomEvent_bActive, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int CallFunc_PostEvent_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: ResultScreen_C.KSMatchResult.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 1]
	WidgetAnimation* AnimDefeat_Slice;//[Offset: 0x578, Size: 1]
	WidgetAnimation* AnimMatchEndShowScore;//[Offset: 0x580, Size: 1]
	WidgetAnimation* AnimVictory_Explode;//[Offset: 0x588, Size: 1]
	WidgetAnimation* AnimShowScore;//[Offset: 0x590, Size: 1]
	WidgetAnimation* AnimShowRoundSummary;//[Offset: 0x598, Size: 1]
	Image* BannerShimmer;//[Offset: 0x5a0, Size: 1]
	Image* BannerShimmer;//[Offset: 0x5a8, Size: 1]
	Border* BGShield_ColorWrapper;//[Offset: 0x5b0, Size: 1]
	Image* BGShieldLarge;//[Offset: 0x5b8, Size: 1]
	Image* DiamondCascade;//[Offset: 0x5c0, Size: 1]
	Image* DiamondCascade;//[Offset: 0x5c8, Size: 1]
	Image* DiamondCascade;//[Offset: 0x5d0, Size: 1]
	Image* DiamondCascade;//[Offset: 0x5d8, Size: 1]
	Image* DiamondCascade;//[Offset: 0x5e0, Size: 1]
	Image* DiamondCascade;//[Offset: 0x5e8, Size: 1]
	Image* DiamondCascade;//[Offset: 0x5f0, Size: 1]
	Image* DiamondCascade;//[Offset: 0x5f8, Size: 1]
	Image* DiamondCascade_CENTERLEFT;//[Offset: 0x600, Size: 1]
	Image* DiamondCascade_CENTERRIGHT;//[Offset: 0x608, Size: 1]
	Border* DiamondPattern_ColorWrapper;//[Offset: 0x610, Size: 1]
	Image* GradientBannerImage;//[Offset: 0x618, Size: 1]
	Image* gradientStroke;//[Offset: 0x620, Size: 1]
	Image* gradientStroke;//[Offset: 0x628, Size: 1]
	Image* gradientStroke;//[Offset: 0x630, Size: 1]
	Image* gradientStroke;//[Offset: 0x638, Size: 1]
	Image* gradientStroke;//[Offset: 0x640, Size: 1]
	Image* gradientStroke;//[Offset: 0x648, Size: 1]
	Image* HighlightBottom;//[Offset: 0x650, Size: 1]
	Image* HighlightTop;//[Offset: 0x658, Size: 1]
	Image* Image;//[Offset: 0x660, Size: 1]
	Image* Image;//[Offset: 0x668, Size: 1]
	Image* Image;//[Offset: 0x670, Size: 1]
	Image* Image;//[Offset: 0x678, Size: 1]
	Border* MaskedEffects_ColorWrapper;//[Offset: 0x680, Size: 1]
	SizeBox* MatchEndCondition;//[Offset: 0x688, Size: 1]
	PUMG_UnsafeZone* PUMG_UnsafeZone;//[Offset: 0x690, Size: 1]
	TextBlock* ResultCondition_RoundSummary;//[Offset: 0x698, Size: 1]
	TextBlock* ResultCondition_Victory;//[Offset: 0x6a0, Size: 1]
	Image* RoundBannerGradientImage;//[Offset: 0x6a8, Size: 1]
	SizeBox* RoundEndCondition;//[Offset: 0x6b0, Size: 1]
	Overlay* RoundScoreTracker;//[Offset: 0x6b8, Size: 1]
	TextBlock* RoundStatusText_RoundSummary;//[Offset: 0x6c0, Size: 1]
	Overlay* RoundSummaryWrapper;//[Offset: 0x6c8, Size: 1]
	SizeBox* ScoreBox_A;//[Offset: 0x6d0, Size: 1]
	SizeBox* ScoreBox_B;//[Offset: 0x6d8, Size: 1]
	HorizontalBox* ScoreTrackerWrapper;//[Offset: 0x6e0, Size: 1]
	Border* ShadowEffects_ColorWrapper;//[Offset: 0x6e8, Size: 1]
	Image* SlantBottom;//[Offset: 0x6f0, Size: 1]
	Image* SlantBottom;//[Offset: 0x6f8, Size: 1]
	Image* SlantTop;//[Offset: 0x700, Size: 1]
	Image* SlantTop;//[Offset: 0x708, Size: 1]
	Border* SliceEffects_ColorWrapper;//[Offset: 0x710, Size: 1]
	Image* SurrenderIcon_RoundSummary;//[Offset: 0x718, Size: 1]
	Image* SurrenderIcon_Victory;//[Offset: 0x720, Size: 1]
	TextBlock* TeamAName;//[Offset: 0x728, Size: 1]
	TextBlock* TeamAScoreText;//[Offset: 0x730, Size: 1]
	TextBlock* TeamBName;//[Offset: 0x738, Size: 1]
	TextBlock* TeamBScoreText;//[Offset: 0x740, Size: 1]
	Image* teamGradient_A;//[Offset: 0x748, Size: 1]
	Image* teamGradient_B;//[Offset: 0x750, Size: 1]
	TextBlock* Text_Defeat_Left;//[Offset: 0x758, Size: 1]
	TextBlock* Text_Defeat_Right;//[Offset: 0x760, Size: 1]
	TextBlock* Text_MainBanner;//[Offset: 0x768, Size: 1]
	TextBlock* Text_Masked_Left;//[Offset: 0x770, Size: 1]
	TextBlock* Text_Masked_Right;//[Offset: 0x778, Size: 1]
	TextBlock* Text_Shadow;//[Offset: 0x780, Size: 1]
	TextBlock* Text_Shadow;//[Offset: 0x788, Size: 1]
	TextBlock* Text_Shadow;//[Offset: 0x790, Size: 1]
	Overlay* VictoryDefeatWrapper;//[Offset: 0x798, Size: 1]
	WBP_PanelDefault_C* WBP_PanelDefault;//[Offset: 0x7a0, Size: 1]
	WBP_PanelDefault_C* WBP_PanelDefault;//[Offset: 0x7a8, Size: 1]
	MulticastInlineDelegateProperty ShowHUD;//[Size: 1]
	MulticastInlineDelegateProperty HideHUD;//[Size: 1]
	LinearColor pTeamColor;//[Offset: 0x7d0, Size: 1]
	LinearColor pOpposingTeamColor;//[Offset: 0x7e0, Size: 1]
	float ShowScoreDelay;//[Offset: 0x7f0, Size: 1]
	float ReturnToLobbyDelay;//[Offset: 0x7f4, Size: 1]
	MulticastInlineDelegateProperty ToggleTopBar;//[Size: 1]
	bool IsPlayingRoundSummary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 1]
	FName[] EndRoundPhases;//[Offset: 0x810, Size: 1]
	Overlay* RoundSummaryWrapper;//[Offset: 0x820, Size: 1]
	RoundResultAnnoucement CurrentRoundResult;//[Offset: 0x828, Size: 1]
	bool DisplayIntraScore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x848, Size: 1]
	void SequenceEvent__ENTRYPOINTResultScreen();// 0x2cbecb0
	void SetupTeamTrackers(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState*[] CallFunc_GetTeams_ReturnValue, int CallFunc_Array_Length_ReturnValue, KSTeamState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void GetIntraScoreByTeamNumber(int TeamNum, out int IntraScore, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState* CallFunc_GetTeamConst_ReturnValue);// 0x2cbecb0
	void ResetAndHandleEndOfMatch();// 0x2cbecb0
	void SetColors(RoundResultAnnoucement RoundResult, bool Temp_bool_Variable, bool Temp_bool_Variable, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, LinearColor CallFunc_GetFriendlyColor_Return_Value, LinearColor CallFunc_GetEnemyColor_Return_Value, bool CallFunc_EqualEqual_IntInt_ReturnValue, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default);// 0x2cbecb0
	void ResetAnims();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void OnRoundCycle(out const RoundInitState RoundInitState);// 0x2cbecb0
	void ShowScreen(float DelayAmount);// 0x2cbecb0
	void ShowKillCamHUD(bool bEnabled);// 0x2cbecb0
	void ShowScoreAnim();// 0x2cbecb0
	void OnInitRoundSetup();// 0x2cbecb0
	void HandleRoundInfoChanged();// 0x2cbecb0
	void ShowSurrenderUI();// 0x2cbecb0
	void HandleResultReceived(RoundResultAnnoucement ResultAnnoucement);// 0x2cbecb0
	void HandlePhaseChanged(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x2cbecb0
	void PlayMatchEndAnim();// 0x2cbecb0
	void PlayMatchEndShowScoreAnim(float Delay);// 0x2cbecb0
	void OnDelayedHUDAnnouncementComponentCreated(KSPlayerController* OwningPlayerController, KSHUDAnnouncementComponent* SpawnedHUDAnnouncementComponent);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void OnTeamAdded(KSTeamState* Team);// 0x2cbecb0
	void OnIntraScoreChanged(KSTeamState* Team);// 0x2cbecb0
	void ExecuteUbergraph_ResultScreen(int EntryPoint, FText CallFunc_GetTeamNames_pTeamName, FText CallFunc_GetTeamNames_pOpposingTeamName, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_IsValid_ReturnValue, const RoundInitState K2Node_CustomEvent_RoundInitState, float K2Node_CustomEvent_DelayAmount, bool K2Node_CustomEvent_bEnabled, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_BlueprintHasMatchEnded_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, LinearColor CallFunc_GetFriendlyColor_Return_Value, LinearColor CallFunc_GetEnemyColor_Return_Value, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_RoundHasEnded_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, FName CallFunc_GetRoundStateName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, FText CallFunc_GetSurrenderText_pSurrenderText, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, RoundResultAnnoucement K2Node_Event_ResultAnnoucement, MatchPhase K2Node_CustomEvent_NewPhase, MatchPhase K2Node_CustomEvent_PreviousPhase, bool K2Node_SwitchName_CmpSuccess, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, float K2Node_CustomEvent_Delay, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSHUDAnnouncementComponent* CallFunc_GetHUDAnnouncementComponent_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerController* K2Node_CustomEvent_OwningPlayerController, KSHUDAnnouncementComponent* K2Node_CustomEvent_SpawnedHUDAnnouncementComponent, const delegate Temp_delegate_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_PostEvent_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_PostEvent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, PUMG_HUD* K2Node_Event_hud, KSGameState* CallFunc_GetKSGameState_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, BP_KSObjectiveComponent_C* CallFunc_GetComponentByClass_ReturnValue, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue, const delegate Temp_delegate_Variable, KSTeamState* K2Node_CustomEvent_Team, KSTeamState* K2Node_CustomEvent_Team, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0
	void ToggleTopBar__DelegateSignature(bool ShouldShow);// 0x2cbecb0
	void HideHUD__DelegateSignature(Object* Hiding Object);// 0x2cbecb0
	void ShowHUD__DelegateSignature(Object* Showing Object);// 0x2cbecb0

--------------------------------
Class: KSMatchResult.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	float FinalResultEndTime;//[Offset: 0x534, Size: 1]
	RoundResultAnnoucement RoundResultAnnoucement;//[Offset: 0x538, Size: 1]
	int pTeamNum;//[Offset: 0x558, Size: 1]
	int pOpposeTeamNum;//[Offset: 0x55c, Size: 1]
	int pTeamScore;//[Offset: 0x560, Size: 1]
	int pOpposeTeamScore;//[Offset: 0x564, Size: 1]
	bool bIsEndOfMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	bool bMatchEndedInSurrender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x569, Size: 1]
	void UpdateRoundBaseScore(KSGameState_RoundGame* pGameState);// 0x292e7b0
	void UpdateResultStatus(enum Result, out FText Status);// 0x292e6a0
	void ProcessResultAnnoucement(enum Result);// 0x292e0d0
	void HandleResultReceived(RoundResultAnnoucement ResultAnnoucement);// 0x292d920
	void HandleEndOfMatch();// 0x292d7d0
	void GetTeamNames(out FText pTeamName, out FText pOpposingTeamName);// 0x292d620
	void GetSurrenderText(out FText pSurrenderText);// 0x292d550

--------------------------------
Class: RoundResultAnnoucement
	int WinningTeamID;//[Offset: 0x0, Size: 1]
	FText ResultText;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WBP_PanelDefault_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	Image* PanelBG;//[Offset: 0x240, Size: 1]
	NamedSlot* PanelContent;//[Offset: 0x248, Size: 1]
	LinearColor PanelColor;//[Offset: 0x250, Size: 1]
	Margin ContentPadding;//[Offset: 0x260, Size: 1]
	void SetContentPadding(Margin ContentPadding, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x2cbecb0
	void SetPanelColor(LinearColor PanelColor);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_PanelDefault(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: ScopeMagnifier_C.KSViewedActiveWeaponWidget.KSWeaponWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 1]
	Image* GamepadPrompt;//[Offset: 0x548, Size: 1]
	Image* Image;//[Offset: 0x550, Size: 1]
	Image* MKBPrompt;//[Offset: 0x558, Size: 1]
	TextBlock* PostPromptText;//[Offset: 0x560, Size: 1]
	TextBlock* PrePromptText;//[Offset: 0x568, Size: 1]
	WidgetSwitcher* PromptSwitcher;//[Offset: 0x570, Size: 1]
	TextBlock* ZoomAmount;//[Offset: 0x578, Size: 1]
	HorizontalBox* ZoomPrompt;//[Offset: 0x580, Size: 1]
	float 4xFOV;//[Offset: 0x588, Size: 1]
	void OnPlayerHealthChanged(KSCharacterFoundation* KSCharacterFoundation, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsDowned_ReturnValue, bool CallFunc_IsDeadOrDestroyed_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2cbecb0
	void OnAimStateChanged(enum AimState, KSWeapon* CallFunc_GetOwningWeapon_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSWeaponComponent* CallFunc_GetWeaponComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_GetMagnifierValue_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x2cbecb0
	void DetermineScope(float FOV, FText ScopeMagnifier, int CallFunc_Round_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x2cbecb0
	void HandleInputModeChanged(byte InputMode, bool Temp_bool_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default);// 0x2cbecb0
	void SetPromptImage(Key CallFunc_GetGamepadButtonForAction_Button, bool CallFunc_GetGamepadButtonForAction_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon);// 0x2cbecb0
	FText Get_PostPromptText_Text();// 0x2cbecb0
	FText Get_PrePromptText_Text();// 0x2cbecb0
	void SplitPrompt(out FString PreText, out FString PosText, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Split_LeftS, FString CallFunc_Split_RightS, bool CallFunc_Split_ReturnValue);// 0x2cbecb0
	void PostSetWeapon();// 0x2cbecb0
	void PreClearWeapon();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_ScopeMagnifier(int EntryPoint, KSWeapon* CallFunc_GetOwningWeapon_ReturnValue, KSWeapon* CallFunc_GetOwningWeapon_ReturnValue, KSWeaponComponent* CallFunc_GetWeaponComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_GetCharacterOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, PUMG_HUD* K2Node_Event_hud, byte CallFunc_GetCurrentInputState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, KSWeapon* CallFunc_GetOwningWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_GetCharacterOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSWeapon* CallFunc_GetOwningWeapon_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSWeaponComponent* CallFunc_GetWeaponComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: KSViewedActiveWeaponWidget.KSWeaponWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object

--------------------------------
Class: KSWeaponWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void SetOwningWeapon(KSWeapon* InWeapon);// 0x2976bd0
	void PreClearWeapon();// 0x29205e0
	void PostSetWeapon();// 0x2916a30
	void OtherWeaponUpdate();// 0x28ff550
	void OnOwningWeaponDestroyed(Actor* DestroyedWeapon);// 0x2976270
	KSWeapon* GetOwningWeapon();// 0x2911e90

--------------------------------
Class: StatusEffect_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	TextBlock* StatusText;//[Offset: 0x560, Size: 1]
	TimerHandle HideTimerHandle;//[Offset: 0x568, Size: 1]
	void StopHideTimer();// 0x2cbecb0
	void StartHideTimer(float Time, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void RevealStatus(bool Revealed, bool Permanent);// 0x2cbecb0
	void OnStuck();// 0x2cbecb0
	void HideTimeExpired();// 0x2cbecb0
	void UpdateRevealStatus(bool IsRevealed);// 0x2cbecb0
	void HandleRootChanged(bool Rooted);// 0x2cbecb0
	void UpdatePlayerRevealedUI(bool bShow);// 0x2cbecb0
	void ExecuteUbergraph_StatusEffect(int EntryPoint, const AkExternalSourceInfo[] Temp_struct_Variable, KSCharacter* CallFunc_GetPawn_ReturnValue, bool K2Node_CustomEvent_Revealed, bool K2Node_CustomEvent_Permanent, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool K2Node_CustomEvent_IsRevealed, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_Rooted, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_bShow, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: StatusEffectPermant_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	TextBlock* StatusText;//[Offset: 0x560, Size: 1]
	bool IsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	void PostSetPawn();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void CustomEvent(bool IsSpectating);// 0x2cbecb0
	void CustomEvent(KSPlayerController* Controller, Actor* OldViewTarget, Actor* NewViewTarget);// 0x2cbecb0
	void ExecuteUbergraph_StatusEffectPermant(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* CallFunc_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_IsSpectating, KSPlayerController* K2Node_CustomEvent_Controller, Actor* K2Node_CustomEvent_OldViewTarget, Actor* K2Node_CustomEvent_NewViewTarget, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: SwimmingHUD_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	BreathMeter_C* BreathMeter;//[Offset: 0x560, Size: 1]
	void Construct();// 0x2cbecb0
	void SwimmingChanged(bool bIsSwimming);// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void ExecuteUbergraph_SwimmingHUD(int EntryPoint, enum Temp_byte_Variable, bool K2Node_CustomEvent_bIsSwimming, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, BP_GameHUDNew_C* K2Node_DynamicCast_AsBP_Game_HUDNew, bool K2Node_DynamicCast_bSuccess, KSCharacter* CallFunc_GetPawn_ReturnValue, enum Temp_byte_Variable, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: BreathMeter_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	Image* background;//[Offset: 0x240, Size: 1]
	ProgressBar* BreathMeter;//[Offset: 0x248, Size: 1]
	float MaxLungCapacity;//[Offset: 0x250, Size: 1]
	float NewLungCapacity;//[Offset: 0x254, Size: 1]
	float OldLungCapacity;//[Offset: 0x258, Size: 1]
	float DeltaTime;//[Offset: 0x25c, Size: 1]
	KSCharacter* ViewedChar;//[Offset: 0x260, Size: 1]
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void OpenGate();// 0x2cbecb0
	void CloseGate();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void UpdateCharacter(KSCharacter* NewCharacter);// 0x2cbecb0
	void UnbindCharacter();// 0x2cbecb0
	void UpdateBreath(float NewBreath);// 0x2cbecb0
	void ExecuteUbergraph_BreathMeter(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, KSCharacter* K2Node_CustomEvent_NewCharacter, bool CallFunc_IsValid_ReturnValue, float K2Node_CustomEvent_NewBreath, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetMaximumLungCapacity_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsUnderwater_ReturnValue, float CallFunc_GetCurrentLungCapacity_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetMaximumLungCapacity_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_FMax_ReturnValue, float CallFunc_GetLungRecoveryTime_ReturnValue, float CallFunc_GetMaximumLungCapacity_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_FMin_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_TextChat_C.KSTextChatWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x568, Size: 1]
	WBP_TextChat_ChatWindow_C* ChatWindow;//[Offset: 0x570, Size: 1]
	Button* ClickCatcher;//[Offset: 0x578, Size: 1]
	WBP_TextChat_Input_C* TextInput;//[Offset: 0x580, Size: 1]
	bool IsEditingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	float ChatMessageAutoHideDelay;//[Offset: 0x58c, Size: 1]
	PUMG_ActiveChatChannelData CachedCurrentChannel;//[Offset: 0x590, Size: 1]
	bool NeedToClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	Key[] CancelKeys;//[Offset: 0x5a8, Size: 1]
	bool WaitForCancelReleaseToClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	void IsTextChatEnabled(out bool IsEnabled, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetTextChatEnabled_ReturnValue);// 0x2cbecb0
	void HandleTextChatEnabledApplied(bool Value, FText CallFunc_GetEmptyText_ReturnValue);// 0x2cbecb0
	void AddCancelKey(Key Key, bool CallFunc_EqualEqual_KeyKey_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x2cbecb0
	void ConsumeCancelInputReleased();// 0x2cbecb0
	void IsAnyCancelKeyDown(out bool AnyKeyDown, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Key CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsInputKeyDown_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void AddAllCancelKeys(out FName[] Actions, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FName CallFunc_Array_Get_Item, Key[] CallFunc_GetAllButtonsForActionMapping_Buttons, bool CallFunc_GetAllButtonsForActionMapping_ReturnValue, Key[] CallFunc_GetAllButtonsForActionMapping_Buttons, bool CallFunc_GetAllButtonsForActionMapping_ReturnValue, Key CallFunc_Array_Get_Item, Key CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Key CallFunc_GetGamepadCancelButton_ReturnValue);// 0x2cbecb0
	void ProcessDelayedFocusClear(bool CallFunc_IsAnyCancelKeyDown_AnyKeyDown);// 0x2cbecb0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue);// 0x2cbecb0
	void HandleSubmitTextInput(FText Text, FText CallFunc_GetEmptyText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x2cbecb0
	bool CanChatInChannel(enum Channel, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x2cbecb0
	void GetDefaultChannel(out enum DefaultChannel, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_IsLobbyHUD_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	void HandleChannelChanged(out PUMG_ActiveChatChannelData ChannelData);// 0x2cbecb0
	void HandleChatMessage(out PUMG_ChatData Message, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0
	void DisableInputListeners();// 0x2cbecb0
	void EnableInputListeners(FName[] K2Node_MakeArray_Array, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void ConsumeCancelInputPressed(FText CallFunc_GetEmptyText_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void SetUIFocus(bool IsFocused, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_SetFocusToThis_ReturnValue);// 0x2cbecb0
	void DisplayTextChat(int NewLocalVar, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsVisible_ReturnValue, int CallFunc_PostEvent_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue);// 0x2cbecb0
	void FinishTextChat(out FText InputText, bool ShouldSubmitText, bool WaitForCancelRelease);// 0x2cbecb0
	void StartTextChat(bool BeginChatCommand, int NewLocalVar, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsTextChatEnabled_IsEnabled);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void OpenTextChat(bool BeginChatCommand);// 0x2cbecb0
	void OnTextCommitted(out const FText Text, byte CommitMethod);// 0x2cbecb0
	void InitializeWidgetNavigation();// 0x2cbecb0
	void HandleChatMessageReceived(out const PUMG_ChatData ReceivedMessage);// 0x2cbecb0
	void OnChannelChanged(out const PUMG_ActiveChatChannelData ChatChannelData);// 0x2cbecb0
	void HandleChatChannelJoined(enum Channel);// 0x2cbecb0
	void HandleChatChannelLeft(enum Channel);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void OnCancelButtonPressed(Key Key);// 0x2cbecb0
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x2cbecb0
	void HandleCloseTextChat();// 0x2cbecb0
	void HandleTextChatEnabledChanged();// 0x2cbecb0
	void ShowTextChat();// 0x2cbecb0
	void OnRadialMenuItemUse(RadialMenuItemEventInfo EventInfo);// 0x2cbecb0
	void PingAdded(out const PingInfo PingInfo);// 0x2cbecb0
	void ExecuteUbergraph_WBP_TextChat(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const PUMG_ActiveChatChannelData K2Node_CustomEvent_ChatChannelData, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Event_Channel, enum K2Node_Event_Channel, bool CallFunc_SetChatChannel_ReturnValue, enum CallFunc_GetDefaultChannel_DefaultChannel, PUMG_HUD* K2Node_Event_hud, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSSettingsDataFactory* CallFunc_GetSettingsDataFactory_ReturnValue, enum CallFunc_GetDefaultChannel_DefaultChannel, bool CallFunc_SetChatChannel_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue, bool CallFunc_CanChatInChannel_ReturnValue, const PUMG_ChatData K2Node_Event_ReceivedMessage, Key K2Node_CustomEvent_Key, bool CallFunc_EqualEqual_KeyKey_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_GetEmptyText_ReturnValue, PUMG_PlayerInfo* K2Node_Event_Player, int64 CallFunc_GetPlayerId_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetChatChannelToPlayer_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_GetEmptyText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_GetEmptyText_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, SettingDelegateStruct K2Node_MakeStruct_SettingDelegateStruct, bool CallFunc_IsTextChatEnabled_IsEnabled, bool CallFunc_IsTextChatEnabled_IsEnabled, bool CallFunc_IsTextChatEnabled_IsEnabled, KSGameState* CallFunc_GetKSGameState_ReturnValue, RadialMenuItemEventInfo K2Node_CustomEvent_EventInfo, bool CallFunc_IsValid_ReturnValue, FText CallFunc_GetItemName_ReturnValue, enum CallFunc_GetCosmeticSlot_ReturnValue, FText CallFunc_FormatTextWithPlayerName_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_ShouldPlayCosmeticLocally_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue, const FText K2Node_CustomEvent_Text, byte K2Node_CustomEvent_CommitMethod, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_Event_BeginChatCommand, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsOnlyASpectator_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsTextChatEnabled_IsEnabled, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, const PingInfo K2Node_CustomEvent_PingInfo, KSPingManager* CallFunc_GetPingManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_FormatTextWithParameterArray_ReturnValue, FText CallFunc_FormatTextWithPlayerName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSTextChatWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	enum[] RadialMenuItemsToShowInChat;//[Offset: 0x528, Size: 1]
	bool ActiveChatChannelsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	PUMG_ActiveChatChannelData[] ActiveChatChannels;//[Offset: 0x540, Size: 1]
	int CurrentChatChannelIndex;//[Offset: 0x550, Size: 1]
	MulticastInlineDelegateProperty OnCurrentChatChannelChanged;//[Size: 1]
	void Whisper(FString PlayerName, FString Message);// 0x29630a0
	void Unblock(FString PlayerName);// 0x29605b0
	void UIX_SubmitTextInput(FString Message);// 0x2962f80
	void UIX_SendMessageToPlayer(FString Message, const int64 PlayerId);// 0x2962ea0
	void UIX_SendMessageToChannel(FString Message, enum Channel);// 0x2962dc0
	void UIX_MarkMessageAsRead(int MessageIndex);// 0x2962d40
	void UIX_ExecuteChatCommandLine(FString CommandLine);// 0x2962ca0
	void ToggleDND();// 0x2962b90
	void ShowTextChat();// 0x290da50
	bool SetChatChannelToPlayer(int64 PlayerId);// 0x29628d0
	bool SetChatChannel(enum Channel, int64 PersonalChannelPlayerId);// 0x2962810
	void Reply(FString Message);// 0x2962770
	void ProcessMessageOnClient(out const FText Message, enum Channel);// 0x2962570
	void PreviousChatChannel();// 0x2962550
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x2936350
	void OpenTextChat(bool BeginChatCommand);// 0x1efd8b0
	void NextChatChannel();// 0x2961f60
	bool IsActiveChatChannel(enum Channel);// 0x2961ed0
	void HandleChatMessageReceived(out const PUMG_ChatData ReceivedMessage);// 0x29612e0
	void HandleChatMessageRead(out const PUMG_ChatData ReadMessage);// 0x29611f0
	void HandleChatChannelLeft(enum Channel);// 0x2932770
	void HandleChatChannelJoined(enum Channel);// 0x2961170
	PUMG_ActiveChatChannelData GetCurrentChatChannel();// 0x2960cf0
	KSChatDataFactory* GetChatDataFactory();// 0x2960cc0
	PUMG_ActiveChatChannelData[] GetActiveChatChannels();// 0x2960c00
	bool CanChatInChannel(enum Channel);// 0x2960650
	void Block(FString PlayerName);// 0x29605b0

--------------------------------
Class: WBP_TextChat_ChatWindow_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* LoseFocus;//[Offset: 0x530, Size: 1]
	WidgetAnimation* GainFocus;//[Offset: 0x538, Size: 1]
	Image* Backer;//[Offset: 0x540, Size: 1]
	Overlay* BackerWrapper;//[Offset: 0x548, Size: 1]
	Button* CloseBtn;//[Offset: 0x550, Size: 1]
	VerticalBox* MessageList;//[Offset: 0x558, Size: 1]
	ScrollBox* Scroll;//[Offset: 0x560, Size: 1]
	int ScrollToBottomFrameDelay;//[Offset: 0x568, Size: 1]
	bool IsCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	WBP_TextChat_C* TextChatWidget;//[Offset: 0x570, Size: 1]
	MulticastInlineDelegateProperty OnCloseButtonClicked;//[Size: 1]
	void GetMaxChatMessages(out int MaxChatMessages, KSChatDataFactory* CallFunc_GetChatDataFactory_ReturnValue, int CallFunc_GetMaxMessageCount_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void SetCollapsed(bool Collapsed, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, float K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, WBP_TextChat_ChatEntry_C* K2Node_DynamicCast_AsWBP_Text_Chat_Chat_Entry, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2cbecb0
	void AddChatMessage(out PUMG_ChatData ChatData, WBP_TextChat_ChatEntry_C* CallFunc_Create_ReturnValue, int CallFunc_GetMaxChatMessages_MaxChatMessages, bool CallFunc_RemoveChildAt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void BndEvt__CloseBtn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void HandleInputStateChanged(byte InputState);// 0x2cbecb0
	void ExecuteUbergraph_WBP_TextChat_ChatWindow(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, enum Temp_byte_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PUMG_HUD* K2Node_Event_hud, bool Temp_bool_Variable, byte CallFunc_GetCurrentInputState_ReturnValue, enum K2Node_Select_Default, byte K2Node_CustomEvent_InputState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void OnCloseButtonClicked__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x128, Size: 1]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x350, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x820, Size: 1]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x828, Size: 1]
	byte Orientation;//[Offset: 0x830, Size: 1]
	enum ScrollBarVisibility;//[Offset: 0x831, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x832, Size: 1]
	Vector2D ScrollbarThickness;//[Offset: 0x834, Size: 1]
	Margin ScrollbarPadding;//[Offset: 0x83c, Size: 1]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84f, Size: 1]
	enum NavigationDestination;//[Offset: 0x850, Size: 1]
	float NavigationScrollPadding;//[Offset: 0x854, Size: 1]
	enum ScrollWhenFocusChanges;//[Offset: 0x858, Size: 1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x85c, Size: 1]
	MulticastInlineDelegateProperty OnUserScrolled;//[Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x3b68a70
	void SetScrollOffset(float NewScrollOffset);// 0x3b682c0
	void SetScrollBarVisibility(enum NewScrollBarVisibility);// 0x3b68240
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x3b683e0
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x3b68340
	void SetOrientation(byte NewOrientation);// 0x3b68010
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x3b674b0
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x3b67390
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x3b67300
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x3b67270
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x3b67120
	void ScrollToStart();// 0x3b67100
	void ScrollToEnd();// 0x3b670e0
	float GetViewOffsetFraction();// 0x3b66890
	float GetScrollOffsetOfEnd();// 0x3b667c0
	float GetScrollOffset();// 0x3b66790
	void EndInertialScrolling();// 0x3b661c0

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 1]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 1]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 1]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: WBP_TextChat_ChatEntry_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x240, Size: 1]
	WidgetAnimation* Show;//[Offset: 0x248, Size: 1]
	Button* NameButton;//[Offset: 0x250, Size: 1]
	TextBlock* NameText;//[Offset: 0x258, Size: 1]
	CanvasPanel* Panel;//[Offset: 0x260, Size: 1]
	TextBlock* Text;//[Offset: 0x268, Size: 1]
	PUMG_ChatData ChatDataCopy;//[Offset: 0x270, Size: 1]
	bool IsWindowCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	bool IsInitialShowFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	float ChatMessageDisplayDuration;//[Offset: 0x2b4, Size: 1]
	void HandleInitialSpawn(TimerHandle CallFunc_K2_SetTimer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void InitialShowFinished(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void SetWindowCollapsed(bool Collapsed);// 0x2cbecb0
	void SetTextWithoutPlayer(FText Text, enum Channel, FText CallFunc_GetEmptyText_ReturnValue);// 0x2cbecb0
	void SetTextWithPlayer(FText Text, PUMG_PlayerInfo* Sender, PUMG_PlayerInfo* Recipient, bool IsOwnMessage, enum Channel, FText Temp_text_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText Temp_text_Variable, bool Temp_bool_Variable, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_GetName_ReturnValue, FText CallFunc_GetName_ReturnValue, const FText K2Node_Select_Default, FText CallFunc_GetName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool Temp_bool_Variable, FText K2Node_Select_Default, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_TextChat_ChatEntry(int EntryPoint);// 0x2cbecb0

--------------------------------
Class: WBP_TextChat_Input_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* background;//[Offset: 0x530, Size: 1]
	BackgroundBlur* Blur;//[Offset: 0x538, Size: 1]
	Button* Button;//[Offset: 0x540, Size: 1]
	Overlay* ChannelOverlay;//[Offset: 0x548, Size: 1]
	TextBlock* ChannelText;//[Offset: 0x550, Size: 1]
	Image* GamepadFocus;//[Offset: 0x558, Size: 1]
	HorizontalBox* HorizontalLayout;//[Offset: 0x560, Size: 1]
	KSEditableTextBox* Input;//[Offset: 0x568, Size: 1]
	Button* OpenChatButton;//[Offset: 0x570, Size: 1]
	CanvasPanel* ParentPanel;//[Offset: 0x578, Size: 1]
	SizeBox* PromptContainer;//[Offset: 0x580, Size: 1]
	WBP_ControllerPrompt_C* PromptIcon;//[Offset: 0x588, Size: 1]
	TextBlock* PromptText;//[Offset: 0x590, Size: 1]
	MulticastInlineDelegateProperty OnTabPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnCancelPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnLeftPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnRightPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnUpPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnDownPressed;//[Size: 1]
	WBP_TextChat_C* TextChatWidget;//[Offset: 0x5f8, Size: 1]
	bool IsEngaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	FText PreviousText;//[Offset: 0x608, Size: 1]
	bool IsPromptActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	void SetPromptActionActive(bool IsActive, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	void UpdateGamepadFocus(byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void HandleInputStateChange(byte InputState);// 0x2cbecb0
	void SetEngaged(bool Engaged, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, FText CallFunc_GetText_ReturnValue, FText CallFunc_GetEmptyText_ReturnValue, bool CallFunc_NotEqual_TextText_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, FText CallFunc_GetEmptyText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FText CallFunc_GetText_ReturnValue, enum Temp_byte_Variable, float K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsTextChatEnabled_IsEnabled, bool CallFunc_IsLobbyHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void UpdateHintText(byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_GetHintText_ReturnValue);// 0x2cbecb0
	FText GetHintText(FText Temp_text_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, FText Temp_text_Variable, byte Temp_byte_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, FText K2Node_Select_Default, FText K2Node_Select_Default, FText K2Node_Select_Default, FText K2Node_Select_Default);// 0x2cbecb0
	void SetCurrentChannel(enum Channel, PUMG_PlayerInfo* PersonalChannelPlayer, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, FText CallFunc_GetTextChatChannelName_Name, const delegate Temp_delegate_Variable, FString CallFunc_Conv_TextToString_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_PostEvent_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2cbecb0
	EventReply On_Input_KeyDown(out const Geometry MyGeometry, out const KeyEvent InKeyEvent, Key CallFunc_GetKey_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Key CallFunc_GetGamepadConfirmButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void BndEvt__Button_66_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void OnViewStateChanged(FName CurrentRoute, FName PreviousRoute, enum Layer);// 0x2cbecb0
	void BndEvt__Input_K2Node_ComponentBoundEvent_1_OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x2cbecb0
	void BndEvt__Input_K2Node_ComponentBoundEvent_2_OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x2cbecb0
	void ExecuteUbergraph_WBP_TextChat_Input(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_Event_IsDesignTime, LobbyPlayerController* K2Node_DynamicCast_AsLobby_Player_Controller, bool K2Node_DynamicCast_bSuccess, PUMG_HUD* K2Node_Event_hud, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, FName K2Node_CustomEvent_CurrentRoute, FName K2Node_CustomEvent_PreviousRoute, enum K2Node_CustomEvent_Layer, FName CallFunc_GetCurrentRoute_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchName_CmpSuccess, const FText K2Node_ComponentBoundEvent_Text, const FText K2Node_ComponentBoundEvent_Text, byte K2Node_ComponentBoundEvent_CommitMethod, bool CallFunc_IsPlatformType_ReturnValue);// 0x2cbecb0
	void OnDownPressed__DelegateSignature();// 0x2cbecb0
	void OnUpPressed__DelegateSignature();// 0x2cbecb0
	void OnRightPressed__DelegateSignature();// 0x2cbecb0
	void OnLeftPressed__DelegateSignature();// 0x2cbecb0
	void OnCancelPressed__DelegateSignature(Key Key);// 0x2cbecb0
	void OnTabPressed__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: LobbyPlayerController.PGame_PlayerController.PlayerController.Controller.Actor.Object
	class HUD* PendingHUDClass;//[Offset: 0x6b8, Size: 1]
	void UIX_FlushPressedKeys();// 0x1f2ba90
	void LoadRoute(FName RouteName, bool ForceTransition);// 0x27df5e0
	void ClearDeserterPenalty();// 0x27df1a0

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x128, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x138, Size: 1]
	byte VerticalAlignment;//[Offset: 0x139, Size: 1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	float BlurStrength;//[Offset: 0x13c, Size: 1]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int BlurRadius;//[Offset: 0x144, Size: 1]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x148, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3b56b70
	void SetPadding(Margin InPadding);// 0x3b564c0
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x3b56130
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3b55d80
	void SetBlurStrength(float InStrength);// 0x3b55700
	void SetBlurRadius(int InBlurRadius);// 0x3b55680
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x3b554e0

--------------------------------
Class: KSEditableTextBox.EditableTextBox.Widget.Visual.Object
	delegate OnKeyDown;//[Offset: 0xa30, Size: 1]

--------------------------------
Class: WBP_ControllerPrompt_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* Prompt;//[Offset: 0x530, Size: 1]
	byte PromptType;//[Offset: 0x538, Size: 1]
	FName ActionName;//[Offset: 0x53c, Size: 1]
	Key Button;//[Offset: 0x548, Size: 1]
	void SetButtonPrompt(Key Button);// 0x2cbecb0
	void SetIsCancel();// 0x2cbecb0
	void SetIsConfirm();// 0x2cbecb0
	void SetPromptFromButton(Key Button, Texture2D* CallFunc_GetIconForGamepadButton_Icon);// 0x2cbecb0
	void UpdateFromSetValues(Key Temp_struct_Variable, bool Temp_bool_Variable, Key CallFunc_GetGamepadCancelButton_ReturnValue, Key CallFunc_GetGamepadButtonForAction_Button, bool CallFunc_GetGamepadButtonForAction_ReturnValue, Key CallFunc_GetGamepadConfirmButton_ReturnValue, Key K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void SetInputAction(FName ActionName);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_ControllerPrompt(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: VehicleOverlay_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	Overlay* DiagramContainer;//[Offset: 0x560, Size: 1]
	Image* RevealCone;//[Offset: 0x568, Size: 1]
	VehicleHealth_C* VehicleHealth;//[Offset: 0x570, Size: 1]
	VehicleSpeedometer_C* VehicleSpeedometer;//[Offset: 0x578, Size: 1]
	KSVehicle* Vehicle;//[Offset: 0x580, Size: 1]
	interface class None* Diagram;//[Offset: 0x588, Size: 1]
	<KSVehicleSeatComponent*,KSCharacter*> VehicleSeatMap;//[Offset: 0x598, Size: 1]
	bool VehicleSeats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e8, Size: 1]
	MulticastInlineDelegateProperty Vehicle State Changed;//[Size: 1]
	void UpdateRevealConeReticle(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_GetViewportSize_SizeX, int CallFunc_GetViewportSize_SizeY, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_GetFOVAngle_ReturnValue, KSVehicle_Remote* K2Node_DynamicCast_AsKSVehicle_Remote, bool K2Node_DynamicCast_bSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_DegTan_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_DegTan_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x2cbecb0
	void SetVehicle(KSVehicle* Vehicle, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, DiagramSUV_C* CallFunc_Create_ReturnValue, OverlaySlot* CallFunc_AddChildToOverlay_ReturnValue);// 0x2cbecb0
	void UnsetVehicle(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void ModeChange(byte InputState);// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void Handle Vehicle State Changed();// 0x2cbecb0
	void HandleVehicleHealthChanged(float CurrentHealth);// 0x2cbecb0
	void HandleVehicleSeatingChanged();// 0x2cbecb0
	void ExecuteUbergraph_VehicleOverlay(int EntryPoint, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, PUMG_HUD* K2Node_Event_hud, byte CallFunc_GetCurrentInputState_ReturnValue, byte K2Node_CustomEvent_InputState, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* CallFunc_GetPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, float K2Node_CustomEvent_CurrentHealth, bool CallFunc_IsInVehicle_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, KSVehicle* CallFunc_GetCurrentVehicle_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Rotator CallFunc_K2_GetActorRotation_ReturnValue, Vector CallFunc_GetVelocity_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_ProjectVectorOnToVector_ReturnValue, float CallFunc_VSize_ReturnValue, int Temp_int_Array_Index_Variable, KSCharacter*[] CallFunc_Map_Keys_Keys, KSVehicleSeatComponent* CallFunc_Array_Get_Item, KSCharacter* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, KSVehicleSeatComponent* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void Vehicle State Changed__DelegateSignature(bool InVehicle);// 0x2cbecb0

--------------------------------
Class: KSVehicle_Remote.KSVehicle.WheeledVehicle.Pawn.Actor.Object
	KSCharacter* OwningCharacter;//[Offset: 0x600, Size: 1]
	Vector JumpVector;//[Offset: 0x608, Size: 1]
	Vector JumpGroundTraceVector;//[Offset: 0x614, Size: 1]
	float JumpCooldown;//[Offset: 0x620, Size: 1]
	float TotalBatteryDuration;//[Offset: 0x630, Size: 1]
	float UpdateReplicatedBatteryTimerPeriod;//[Offset: 0x634, Size: 1]
	PGame_ReplicatedTimer ReplicatedBatteryTimer;//[Offset: 0x648, Size: 1]
	float RevealHoldDuration;//[Offset: 0x680, Size: 1]
	float RevealConeAngle;//[Offset: 0x684, Size: 1]
	float RevealMaxDistance;//[Offset: 0x688, Size: 1]
	float RevealEffectDuration;//[Offset: 0x68c, Size: 1]
	void SetOwningCharacter(KSCharacter* Rider);// 0x27a6010
	void OnRep_OwningCharacter();// 0x27a58d0
	void Jump();// 0x27a5680
	void GetRemainingBattery(out float RemainingTime, out float TotalTime);// 0x27a54e0
	void ExecuteReveal();// 0x27a5300

--------------------------------
Class: VehicleHealth_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* Bar;//[Offset: 0x530, Size: 1]
	Image* BarBackground;//[Offset: 0x538, Size: 1]
	TextBlock* HealthValueText;//[Offset: 0x540, Size: 1]
	Image* Image;//[Offset: 0x548, Size: 1]
	Image* Image;//[Offset: 0x550, Size: 1]
	Image* Image;//[Offset: 0x558, Size: 1]
	float TargetValue;//[Offset: 0x560, Size: 1]
	float CurrentValue;//[Offset: 0x564, Size: 1]
	float LerpPerSecond;//[Offset: 0x568, Size: 1]
	void Set Target Value(float TargetValue);// 0x2cbecb0
	void Set Value(float Percent, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, int CallFunc_FTrunc_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void ExecuteUbergraph_VehicleHealth(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x2cbecb0

--------------------------------
Class: VehicleSpeedometer_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* Needle;//[Offset: 0x530, Size: 1]
	TextBlock* Reading;//[Offset: 0x538, Size: 1]
	Image* WheelBack;//[Offset: 0x540, Size: 1]
	Image* WheelFill;//[Offset: 0x548, Size: 1]
	float MaxSpeed;//[Offset: 0x550, Size: 1]
	float TargetValue;//[Offset: 0x554, Size: 1]
	float CurrentValue;//[Offset: 0x558, Size: 1]
	float LerpPerSecond;//[Offset: 0x55c, Size: 1]
	void SetTargetValue(float TargetValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue);// 0x2cbecb0
	void SetValue(float Speedo, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void ExecuteUbergraph_VehicleSpeedometer(int EntryPoint, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue);// 0x2cbecb0

--------------------------------
Class: DiagramSUV_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* Car;//[Offset: 0x530, Size: 1]
	Image* Seat1;//[Offset: 0x538, Size: 1]
	Image* Seat2;//[Offset: 0x540, Size: 1]
	Image* Seat3;//[Offset: 0x548, Size: 1]
	Image* Seat4;//[Offset: 0x550, Size: 1]
	void SetSeating(int Seat Index, KSCharacter* Occupant);// 0x2cbecb0
	void ExecuteUbergraph_DiagramSUV(int EntryPoint, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, int K2Node_Event_Seat_Index, KSCharacter* K2Node_Event_Occupant, bool CallFunc_IsValid_ReturnValue, LinearColor K2Node_Select_Default, const Image*[] K2Node_MakeArray_Array, bool CallFunc_Array_IsValidIndex_ReturnValue, Image* CallFunc_Array_Get_Item);// 0x2cbecb0

--------------------------------
Class: WBP_WaitForPlayers_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* background;//[Offset: 0x530, Size: 1]
	WBP_ThrobberShield_C* WBP_ThrobberShield;//[Offset: 0x538, Size: 1]
	void Construct();// 0x2cbecb0
	void HandlePhaseChange(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x2cbecb0
	void ExecuteUbergraph_WBP_WaitForPlayers(int EntryPoint, MatchPhase K2Node_CustomEvent_NewPhase, MatchPhase K2Node_CustomEvent_PreviousPhase, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_NameName_ReturnValue, FString CallFunc_GetCurrentLevelName_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, Texture2D* CallFunc_GetLoadingScreenImage_LoadingScreenImageSoftRef, FText CallFunc_GetLoadingScreenImage_MapDisplayName, FText CallFunc_GetLoadingScreenImage_MapRegion, FText CallFunc_GetLoadingScreenImage_MapDescription, bool CallFunc_GetLoadingScreenImage_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess, bool CallFunc_BooleanAND_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_ThrobberShield_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* Cycle;//[Offset: 0x240, Size: 1]
	Image* Section1;//[Offset: 0x248, Size: 1]
	Image* Section2;//[Offset: 0x250, Size: 1]
	Image* Section3;//[Offset: 0x258, Size: 1]
	Image* Section4;//[Offset: 0x260, Size: 1]
	Image* Section5;//[Offset: 0x268, Size: 1]
	Image* Section6;//[Offset: 0x270, Size: 1]
	void ResetThrobberAnim(float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void PlayThrobberAnim(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_ThrobberShield(int EntryPoint, bool K2Node_Event_IsDesignTime, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0

--------------------------------
Class: WBP_Context_Bar_C.PUMG_ContextBar.PUMG_Widget.UserWidget.Widget.Visual.Object
	WidgetAnimation* MobileLayout;//[Offset: 0x528, Size: 1]
	Image* FooterBG;//[Offset: 0x530, Size: 1]
	Image* FooterBG;//[Offset: 0x538, Size: 1]
	bool CanCloseOnLogout();// 0x2cbecb0

--------------------------------
Class: PUMG_ContextBar.PUMG_Widget.UserWidget.Widget.Visual.Object
	class PUMG_ContextBarPrompt* PromptWidgetClass;//[Offset: 0x4c8, Size: 1]
	Margin LeftPromptMargin;//[Offset: 0x4d0, Size: 1]
	Margin CenterPromptMargin;//[Offset: 0x4e0, Size: 1]
	Margin RightPromptMargin;//[Offset: 0x4f0, Size: 1]
	HorizontalBox* LeftContainer;//[Offset: 0x500, Size: 1]
	HorizontalBox* CenterContainer;//[Offset: 0x508, Size: 1]
	HorizontalBox* RightContainer;//[Offset: 0x510, Size: 1]
	PUMG_ContextBarPrompt*[] PromptPool;//[Offset: 0x518, Size: 1]
	void RefreshContextBar();// 0xe65710

--------------------------------
Class: PUMG_ContextBarPrompt.PUMG_Widget.UserWidget.Widget.Visual.Object
	ContextActionData* ContextActionData;//[Offset: 0x4c8, Size: 1]
	bool IsPoolable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	void OnInputStateChanged(byte InputState);// 0x2cbecb0
	void OnContextActionUpdated(ContextActionData* InData);// 0x2cbecb0
	void HandleInputStateChanged(byte InputState);// 0xe65300
	ContextActionData* GetContextActionData();// 0xe64e60

--------------------------------
Class: WBP_DamageNumberMgr_C.KSViewedPawnDamageDisplay.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5e8, Size: 1]
	CanvasPanel* MyCanvasPanel;//[Offset: 0x5f0, Size: 1]
	DamageNumberDisplayWidget* GetDamageNumberWidgetInstance(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, WBP_DamageNumber_C* CallFunc_Create_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_DamageNumberMgr(int EntryPoint);// 0x2cbecb0

--------------------------------
Class: KSViewedPawnDamageDisplay.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	float StackingWait;//[Offset: 0x558, Size: 1]
	bool TetherToEventLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55c, Size: 1]
	int MaxNumDamageWidgetsOnScreen;//[Offset: 0x560, Size: 1]
	CanvasPanel* DamageNumberContainer;//[Offset: 0x568, Size: 1]
	<class DamageType,SpecialDamageColors> SpecialDamageTypes;//[Offset: 0x570, Size: 1]
	DamageNumberDisplayWidget*[] CurrentDamageNumbersOnScreen;//[Offset: 0x5c0, Size: 1]
	DamageNumberDisplayWidget*[] DamageNumbersPool;//[Offset: 0x5d0, Size: 1]
	void PrimeDamageNumbersWidgetPool();// 0x296c3d0
	void HandlePhaseChange(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x296bea0
	void HandleInstigateDamageNotify(out const CombatEventInfo DamageInfo);// 0x296bd70
	void HandleAnimationCompleted(DamageNumberDisplayWidget* DamageNumberWidget);// 0x296bcf0
	DamageNumberDisplayWidget* GetDamageNumberWidgetInstance();// 0x2936470
	void ClearDamageNumbersOnScreen();// 0x296b270

--------------------------------
Class: DamageNumberDisplayWidget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnNumberAnimationComplete;//[Size: 1]
	Actor* DamageTarget;//[Offset: 0x248, Size: 1]
	Vector InitialDamageLocation;//[Offset: 0x250, Size: 1]
	bool TetherToEventLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	float DamageAmount;//[Offset: 0x260, Size: 1]
	enum DamageBaseType;//[Offset: 0x264, Size: 1]
	enum DamageFlourishType;//[Offset: 0x265, Size: 1]
	enum DamageModifier;//[Offset: 0x266, Size: 1]
	enum DamageTargetType;//[Offset: 0x267, Size: 1]
	bool bBonusDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	KSPlayerMod*[] DisplayedMods;//[Offset: 0x270, Size: 1]
	float DelayBeforeAnimation;//[Offset: 0x280, Size: 1]
	float StackWaitTime;//[Offset: 0x284, Size: 1]
	bool PlayingNumberAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	float VerticalWorldOffset;//[Offset: 0x28c, Size: 1]
	bool ChangePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	void SetDisplayInformation(Actor* InTargetActor, bool InTetherToEventLocation, float InDamageAmount, bool InIsSpecialDamage, SpecialDamageColors InDamageColors, bool InIsLethal, bool InIsHeadshot, float InDelayWindow, float InStackWait, bool InArmorHit, bool InDamageReduced, bool InDamageResisted, bool InDamageShielded, bool InBonusDamage, out const KSPlayerMod*[] InDisplayedMods);// 0x296c4e0
	void SetContentVisibility(bool IsVisible);// 0x2cbecb0
	void PlayNumberAnimation();// 0x1f04160
	bool PlayerIsBlinded();// 0x2cbecb0
	void OnDisplaySpecialDamageInfo(float CurrentDamageAmount, SpecialDamageColors DamageColors, bool bChangePosition);// 0x2cbecb0
	void OnDisplayInformationReset();// 0x2cbecb0
	bool IsDisplayStacking();// 0x296c060

--------------------------------
Class: SpecialDamageColors
	LinearColor FontColor;//[Offset: 0x0, Size: 1]
	LinearColor StrokeColor;//[Offset: 0x10, Size: 1]
	LinearColor GlowColor;//[Offset: 0x20, Size: 1]

--------------------------------
Class: WBP_DamageNumber_C.DamageNumberDisplayWidget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x298, Size: 1]
	WidgetAnimation* TickHit;//[Offset: 0x2a0, Size: 1]
	WidgetAnimation* EliminationHit;//[Offset: 0x2a8, Size: 1]
	WidgetAnimation* ArmorHit;//[Offset: 0x2b0, Size: 1]
	WidgetAnimation* EliminationFlourish;//[Offset: 0x2b8, Size: 1]
	WidgetAnimation* HeadshotFlourish;//[Offset: 0x2c0, Size: 1]
	WidgetAnimation* BasicHit;//[Offset: 0x2c8, Size: 1]
	WidgetAnimation* Flourish_NoVert;//[Offset: 0x2d0, Size: 1]
	WidgetAnimation* Flourish;//[Offset: 0x2d8, Size: 1]
	WidgetAnimation* Impulse;//[Offset: 0x2e0, Size: 1]
	WidgetAnimation* CumulativeOutro;//[Offset: 0x2e8, Size: 1]
	WidgetAnimation* Elimination;//[Offset: 0x2f0, Size: 1]
	WidgetAnimation* Flourish_Prev;//[Offset: 0x2f8, Size: 1]
	TextBlock* BonusDamageAmountDisplay;//[Offset: 0x300, Size: 1]
	Image* BonusDamageBackground;//[Offset: 0x308, Size: 1]
	WBP_AdditiveImage_C* BonusDamageIcon;//[Offset: 0x310, Size: 1]
	WBP_AdditiveImage_C* BonusDamageIcon;//[Offset: 0x318, Size: 1]
	TextBlock* DamageAmountDisplay;//[Offset: 0x320, Size: 1]
	TextBlock* DamageAmountDisplayClone;//[Offset: 0x328, Size: 1]
	Image* ImpactLine;//[Offset: 0x330, Size: 1]
	Overlay* InnerWrapper;//[Offset: 0x338, Size: 1]
	Overlay* OuterWrapper;//[Offset: 0x340, Size: 1]
	TextBlock* SpecialDamageAmountDisplay;//[Offset: 0x348, Size: 1]
	Overlay* SpecialDamageWrapper;//[Offset: 0x350, Size: 1]
	Overlay* SpecialInnerWrapper;//[Offset: 0x358, Size: 1]
	bool IsSpecialDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	WidgetAnimation*[] AnimationsToPlay;//[Offset: 0x368, Size: 1]
	void Clear Bonus Damage Icon();// 0x2cbecb0
	void Add Bonus Damage Icon();// 0x2cbecb0
	bool PlayerIsBlinded(PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, Actor* CallFunc_GetViewTarget_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsBlinded_ReturnValue);// 0x2cbecb0
	void ClearAnimationsPlaying(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, WidgetAnimation* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void UpdateVisuals(SlateColor Color, SlateColor K2Node_MakeStruct_SlateColor, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, LinearColor CallFunc_MakeColor_ReturnValue);// 0x2cbecb0
	void Add Gadget Type(FText CallFunc_GetEmptyText_ReturnValue);// 0x2cbecb0
	void Add Shielded Modifier(FText CallFunc_GetEmptyText_ReturnValue);// 0x2cbecb0
	void Add Immune Modifier(bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Add Lethal Flourish(int CallFunc_Array_AddUnique_ReturnValue);// 0x2cbecb0
	void Add Headshot Flourish(SlateColor K2Node_MakeStruct_SlateColor, int CallFunc_Array_AddUnique_ReturnValue);// 0x2cbecb0
	void Add Lethal Base(delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_AddUnique_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Add Armored Base(SlateColor K2Node_MakeStruct_SlateColor, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_AddUnique_ReturnValue);// 0x2cbecb0
	void Add Normal Base(delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_AddUnique_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Handle Damage Amount(bool Temp_bool_Variable, Vector2D Temp_struct_Variable, Vector2D Temp_struct_Variable, bool CallFunc_IsDisplayStacking_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, Vector2D K2Node_Select_Default);// 0x2cbecb0
	void OnDisplayInformationReset();// 0x2cbecb0
	void OnDisplaySpecialDamageInfo(float CurrentDamageAmount, SpecialDamageColors DamageColors, bool bChangePosition);// 0x2cbecb0
	void HandleNumberAnimationFinished();// 0x2cbecb0
	void SetContentVisibility(bool IsVisible);// 0x2cbecb0
	void PlayNumberAnimation();// 0x2cbecb0
	void ExecuteUbergraph_WBP_DamageNumber(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, int Temp_int_Array_Index_Variable, Vector2D Temp_struct_Variable, float K2Node_Event_CurrentDamageAmount, SpecialDamageColors K2Node_Event_DamageColors, bool K2Node_Event_bChangePosition, FText CallFunc_Conv_FloatToText_ReturnValue, FontOutlineSettings K2Node_MakeStruct_FontOutlineSettings, SlateColor K2Node_MakeStruct_SlateColor, Vector2D Temp_struct_Variable, bool Temp_bool_Variable, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, Vector2D K2Node_Select_Default, bool K2Node_Event_IsVisible, enum K2Node_Select_Default, WidgetAnimation* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_AddUnique_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Loop_Counter_Variable, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_AdditiveImage_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	Image* Texture;//[Offset: 0x240, Size: 1]
	SlateBrush DefaultBrush;//[Offset: 0x248, Size: 1]
	MaterialInterface* BrushMaterial;//[Offset: 0x2d0, Size: 1]
	FName ParameterName;//[Offset: 0x2d8, Size: 1]
	void SetAdditiveMaterial(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Texture2D* CallFunc_GetBrushResourceAsTexture2D_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_AdditiveImage(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: WBP_DurationBarContainer_C.KSDurationBarContainer.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x580, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x588, Size: 1]
	VerticalBox* DurationBarContainer;//[Offset: 0x590, Size: 1]
	bool PawnActiveWeaponHasUIWidget(KSCharacter* CallFunc_GetPawn_ReturnValue, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, Master_WeaponComponent_C* K2Node_DynamicCast_AsMaster_Weapon_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_HasUIWidget_HasUIWidget);// 0x2cbecb0
	void AddDurationBarToContainer(KSActiveDurationBar* DurationBar);// 0x2cbecb0
	void RemoveDurationBarFromContainer(KSActiveDurationBar* DurationBar);// 0x2cbecb0
	void ExecuteUbergraph_WBP_DurationBarContainer(int EntryPoint, KSActiveDurationBar* K2Node_Event_DurationBar, KSActiveDurationBar* K2Node_Event_DurationBar, bool CallFunc_RemoveChild_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, SlateChildSize K2Node_MakeStruct_SlateChildSize, VerticalBoxSlot* K2Node_DynamicCast_AsVertical_Box_Slot, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0

--------------------------------
Class: KSDurationBarContainer.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	class KSActiveDurationBar* DurationBarClass;//[Offset: 0x558, Size: 1]
	KSActiveDurationBar*[] DurationBars;//[Offset: 0x560, Size: 1]
	void RemoveDurationBarsForNonPawnMods();// 0x290e100
	void RemoveDurationBarFromContainer(KSActiveDurationBar* DurationBar);// 0x2cbecb0
	void RemoveDurationBar(KSActiveDurationBar* DurationBar);// 0x290e080
	void RemoveAllDurationBars();// 0x290e060
	bool PawnActiveWeaponHasUIWidget();// 0x2cbecb0
	void HandlePawnModsUpdated(KSCharacter* KSChar);// 0x290d670
	void HandlePawnAimStateChanged(enum AimMode);// 0x290d5f0
	void HandleDurationBarRemoveEvent(KSActiveDurationBar* DurationBar);// 0x290d550
	void HandleDurationBarAddEvent(KSActiveDurationBar* DurationBar);// 0x290d4d0
	KSActiveDurationBar* FindDurationBarByPlayerMod(KSPlayerModInstance* ModInstance);// 0x290ce40
	void AddDurationBarToContainer(KSActiveDurationBar* DurationBar);// 0x2cbecb0
	void AddDurationBarsFromPawnMods();// 0x290cc00

--------------------------------
Class: KSActiveDurationBar.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	KSPlayerModInstance* BoundPlayerMod;//[Offset: 0x558, Size: 1]
	void SetValuesFromBoundPlayerMod();// 0x28fc140
	void SetBarHidden(bool IsBarHidden);// 0x2cbecb0
	void RefreshValuesFromPlayerMod();// 0x28fc000
	void PopulateFromBoundPlayerMod();// 0x2cbecb0
	void HandleBoundModActivated(bool IsActive);// 0x28fb2c0
	bool GetBoundPlayerMod(out KSPlayerModInstance* OutModInstance);// 0x28fada0
	void DisplayActiveDuration(float InTimeRemaining, float InTimeDuration);// 0x2cbecb0
	void ClearPlayerMod();// 0x28faa40
	void BindPlayerMod(KSPlayerModInstance* InPlayerMod);// 0x28fa9a0

--------------------------------
Class: Master_WeaponComponent_C.KSWeaponComponent.KSEquipmentCosmeticComponent.ActorComponent.Object
	bool Is ADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	FName Owner Fire Section;//[Offset: 0x70c, Size: 1]
	FName[] Owner 1p ADS Fire Section;//[Offset: 0x718, Size: 1]
	FName Deattach Slot Name;//[Offset: 0x728, Size: 1]
	FName Attach Slot Name;//[Offset: 0x730, Size: 1]
	FName MIrror Attach Slot Name;//[Offset: 0x738, Size: 1]
	int Weapon Fire Sound ID;//[Offset: 0x740, Size: 1]
	bool Weapon Fire Sound Interrupts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x744, Size: 1]
	AkAudioEvent* Weapon Casing Sound;//[Offset: 0x748, Size: 1]
	AkAudioEvent* Equip Sound;//[Offset: 0x750, Size: 1]
	float Speed of Sound;//[Offset: 0x758, Size: 1]
	float Echo Max Distance;//[Offset: 0x75c, Size: 1]
	Rotator[] Echo Directions;//[Offset: 0x760, Size: 1]
	Vector Echo Sound Location;//[Offset: 0x770, Size: 1]
	ParticleSystem* Muzzle Flash 3p;//[Offset: 0x780, Size: 1]
	ParticleSystem* Muzzle Flash 1p;//[Offset: 0x788, Size: 1]
	FName MuzzleSocketName;//[Offset: 0x790, Size: 1]
	FName Cartridge Ejection Attach Name;//[Offset: 0x798, Size: 1]
	HitDecalInfo Default Decal Info;//[Offset: 0x7a0, Size: 1]
	<byte,HitDecalInfo> Physical Decal Materials;//[Offset: 0x7c8, Size: 1]
	ParticleSystem* Tracer Template;//[Offset: 0x818, Size: 1]
	float Next Tracer Time;//[Offset: 0x820, Size: 1]
	float Minimum Tracer Delay;//[Offset: 0x824, Size: 1]
	float Maximum Tracer Delay;//[Offset: 0x828, Size: 1]
	int Shot Count;//[Offset: 0x82c, Size: 1]
	StaticMesh* Tracer Mesh;//[Offset: 0x830, Size: 1]
	int Tracer Frequency;//[Offset: 0x838, Size: 1]
	byte Decal Physical Surface;//[Offset: 0x83c, Size: 1]
	Vector Decal Location;//[Offset: 0x840, Size: 1]
	MaterialInterface* Temp Mesh Material Override;//[Offset: 0x850, Size: 1]
	int CountedShotsLeft;//[Offset: 0x858, Size: 1]
	class Object* 1P ADS Camera Shake;//[Offset: 0x860, Size: 1]
	FName[] Owner 3p Fire Section;//[Offset: 0x868, Size: 1]
	int Counter;//[Offset: 0x878, Size: 1]
	class Object* AOS Camera Shake;//[Offset: 0x880, Size: 1]
	class Object* 3P Camera Shake;//[Offset: 0x888, Size: 1]
	int CountedMagSize;//[Offset: 0x890, Size: 1]
	bool bIsSecondaryWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894, Size: 1]
	bool Is Pistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x895, Size: 1]
	bool Is Dual Guns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x896, Size: 1]
	bool ShouldSpawnTracers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x897, Size: 1]
	bool ShouldHaveBulletFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x898, Size: 1]
	bool ShouldHaveBulletSpangs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x899, Size: 1]
	bool bWasFiredByOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89a, Size: 1]
	FName MagazineDropBone;//[Offset: 0x89c, Size: 1]
	bool Mirror Reload Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 1]
	FName Mirror_MagazineDropBone;//[Offset: 0x8a8, Size: 1]
	bool DropBoneOnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	bool TrackingMagDropBone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b1, Size: 1]
	Transform DropMagSpawnTransformOveride;//[Offset: 0x8c0, Size: 1]
	Vector DropBonePreviousPosition;//[Offset: 0x8f0, Size: 1]
	Vector DropBoneVelocity;//[Offset: 0x8fc, Size: 1]
	Vector DropVelocityOverride;//[Offset: 0x908, Size: 1]
	bool Is Gun Holstered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x914, Size: 1]
	bool DropMultipleMags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x915, Size: 1]
	bool Drop Multiple Mags Velocity Inheritance Override;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x916, Size: 1]
	MultiMagDropInfo[] MultiMagArray;//[Offset: 0x918, Size: 1]
	bool Maintain Holster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 1]
	bool Is Shotgun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x929, Size: 1]
	Rotator Target Shell Housing Spin;//[Offset: 0x92c, Size: 1]
	int Missing Shell Count;//[Offset: 0x938, Size: 1]
	float Interp Speed;//[Offset: 0x93c, Size: 1]
	float VsWorldAlphaDiff;//[Offset: 0x940, Size: 1]
	float LastUpdatedAlpha;//[Offset: 0x944, Size: 1]
	bool Prevent Vs World Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 1]
	bool Is Vs World Force Reset Delay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x949, Size: 1]
	float Vs World Reset Delay Time;//[Offset: 0x94c, Size: 1]
	bool Able to Magdrop?;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x950, Size: 1]
	bool Force Holster Mantle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x951, Size: 1]
	bool Force Holster Zipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x952, Size: 1]
	bool Scope Mesh Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x953, Size: 1]
	float Scope Scale Alpha;//[Offset: 0x954, Size: 1]
	MaterialInterface*[] Hide Materials Array;//[Offset: 0x958, Size: 1]
	bool Is Vcol Hide Needed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	MulticastInlineDelegateProperty OnSetScopeScaleAlpha;//[Size: 1]
	MulticastInlineDelegateProperty OnSetRevolverChamberRotate;//[Size: 1]
	float CosmeticShotTraceDist;//[Offset: 0x990, Size: 1]
	ParticleSystemComponent*[] CartridgeEjectParticles;//[Offset: 0x998, Size: 1]
	ParticleSystemComponent*[] 1PMuzzleFlashParticles;//[Offset: 0x9a8, Size: 1]
	ParticleSystemComponent*[] 3pMuzzleFlashParticles;//[Offset: 0x9b8, Size: 1]
	bool bShouldPlayADSFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8, Size: 1]
	float ADSFirePlayPosition;//[Offset: 0x9cc, Size: 1]
	float AOSFirePlayPosition;//[Offset: 0x9d0, Size: 1]
	float ADSFireDelay;//[Offset: 0x9d4, Size: 1]
	MulticastInlineDelegateProperty OnSetLobbyState;//[Size: 1]
	bool DropMagazineLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e8, Size: 1]
	class Object* 3P Camera Shake Hi;//[Offset: 0x9f0, Size: 1]
	class Object* FireCameraModifier;//[Offset: 0x9f8, Size: 1]
	FullFireRepData[] QueuedAimData;//[Offset: 0xa00, Size: 1]
	HitResult[] ValidHits_Event;//[Offset: 0xa10, Size: 1]
	bool Should Play Impact Sound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa20, Size: 1]
	bool Should Hide On Holster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa21, Size: 1]
	enum FireAudioMode;//[Offset: 0xa22, Size: 1]
	bool AllowNewShotAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa23, Size: 1]
	float Post Reload Delay Period;//[Offset: 0xa24, Size: 1]
	bool Folded Stock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28, Size: 1]
	Rotator Stock Rotation;//[Offset: 0xa2c, Size: 1]
	Rotator Stock alt Rotation;//[Offset: 0xa38, Size: 1]
	bool Multi Stage Reload Lockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa44, Size: 1]
	Vector ViewPawnForwardDir;//[Offset: 0xa48, Size: 1]
	Vector ViewPawnLeftDir;//[Offset: 0xa54, Size: 1]
	float LastBulletMissTime;//[Offset: 0xa60, Size: 1]
	float LoopingFireAudioCheckTriggerDelay;//[Offset: 0xa64, Size: 1]
	int LoopingFireAudioFadeOutDuration;//[Offset: 0xa68, Size: 1]
	bool IsFirstShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6c, Size: 1]
	bool IsPlayerControlled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6d, Size: 1]
	ParticleSystemComponent*[] 1PAuxMuzzleFlashParticles;//[Offset: 0xa70, Size: 1]
	ParticleSystemComponent*[] 3pAuxMuzzleFlashParticles;//[Offset: 0xa80, Size: 1]
	bool ShouldPlayBlockedImpactSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 1]
	TimerHandle Revolving timer;//[Offset: 0xa98, Size: 1]
	Rotator Eval Target Shell Housing Spin;//[Offset: 0xaa0, Size: 1]
	bool ShouldComputeCosmeticHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaac, Size: 1]
	bool On Init Hide Magazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaad, Size: 1]
	bool Use laser sight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaae, Size: 1]
	MaterialInstanceDynamic* Reticle Material;//[Offset: 0xab0, Size: 1]
	enum RetrieveCombatState;//[Offset: 0xab8, Size: 1]
	TimerHandle Post Reload Timer;//[Offset: 0xac0, Size: 1]
	enum Old State;//[Offset: 0xac8, Size: 1]
	Vector TracerStartPointLocalToOwner;//[Offset: 0xacc, Size: 1]
	float TracerMinimumOffsetLocallyViewed;//[Offset: 0xad8, Size: 1]
	float TracerMaximumOffsetLocallyViewed;//[Offset: 0xadc, Size: 1]
	float TracerMinimumOffsetNPC;//[Offset: 0xae0, Size: 1]
	float TracerMaximumOffsetNPC;//[Offset: 0xae4, Size: 1]
	float Combat State Change Time;//[Offset: 0xae8, Size: 1]
	bool Mirror Deattach Slot Active;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 1]
	FName Mirror Deattach Slot Name;//[Offset: 0xaf0, Size: 1]
	class Object* ScopeWidgetClass;//[Offset: 0xaf8, Size: 1]
	Actor* ScopeWidgetActor;//[Offset: 0xb00, Size: 1]
	MulticastInlineDelegateProperty OnSetShieldActive;//[Size: 1]
	byte PS5 Trigger Type;//[Offset: 0xb18, Size: 1]
	byte PS5 Trigger Start Position;//[Offset: 0xb19, Size: 1]
	byte PS5 Trigger Stop Position;//[Offset: 0xb1a, Size: 1]
	byte PS5 Trigger Haptic Strength;//[Offset: 0xb1b, Size: 1]
	float CurrentFirePlayPosition;//[Offset: 0xb1c, Size: 1]
	ParticleSystem* Tracer Particle System;//[Offset: 0xb20, Size: 1]
	MaterialInterface* Friendly Tracer Material;//[Offset: 0xb28, Size: 1]
	MaterialInterface* Enemy Tracer MaterialInst;//[Offset: 0xb30, Size: 1]
	bool SprintingIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb38, Size: 1]
	bool ReloadWhileSprintingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb39, Size: 1]
	float Low_Ammo_Volume_Adjustment_LP_dB;//[Offset: 0xb3c, Size: 1]
	float Low_Ammo_Volume_Adjustment_SINGLE_dB;//[Offset: 0xb40, Size: 1]
	bool ForceDisableMagDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb44, Size: 1]
	Transform cachedDropMagTransformOverride;//[Offset: 0xb50, Size: 1]
	Vector cachedDropVelocityOverride;//[Offset: 0xb80, Size: 1]
	bool cachedForceDisableMagDropOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 1]
	FName[] Additional Deattach Slot Names;//[Offset: 0xb90, Size: 1]
	FName[] Additional Mirror Deattach Slot Names;//[Offset: 0xba0, Size: 1]
	FName[] Additional Attach Slot Names;//[Offset: 0xbb0, Size: 1]
	FName[] Additional Mirror Attach Slot Names;//[Offset: 0xbc0, Size: 1]
	bool[] bShouldFire;//[Offset: 0xbd0, Size: 1]
	bool bAlternatingMuzzleFlashes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe0, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xbe4, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0xbe8, Size: 1]
	FullFireRepData K2Node_CustomEvent_Fire_Data;//[Offset: 0xbf0, Size: 1]
	bool K2Node_CustomEvent_bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 1]
	HitResult[] K2Node_CustomEvent_OutHits;//[Offset: 0xc60, Size: 1]
	Vector K2Node_CustomEvent_Start;//[Offset: 0xc70, Size: 1]
	Vector K2Node_CustomEvent_End;//[Offset: 0xc7c, Size: 1]
	HitResult[] K2Node_CustomEvent_Hits;//[Offset: 0xc88, Size: 1]
	HitResult[] K2Node_CustomEvent_Hits;//[Offset: 0xc98, Size: 1]
	Vector K2Node_CustomEvent_Trace_End;//[Offset: 0xca8, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0xcb4, Size: 1]
	HitResult[] K2Node_CustomEvent_Hits;//[Offset: 0xcb8, Size: 1]
	Vector K2Node_CustomEvent_Start;//[Offset: 0xcc8, Size: 1]
	Vector K2Node_CustomEvent_End;//[Offset: 0xcd4, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0xce0, Size: 1]
	bool K2Node_CustomEvent_Blocking_Hit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce4, Size: 1]
	HitResult[] K2Node_CustomEvent_Out_Hits;//[Offset: 0xce8, Size: 1]
	Vector K2Node_CustomEvent_Start;//[Offset: 0xcf8, Size: 1]
	Vector K2Node_CustomEvent_End;//[Offset: 0xd04, Size: 1]
	bool K2Node_CustomEvent_Allow_Spangs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd10, Size: 1]
	bool K2Node_CustomEvent_Allow_Tracers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd11, Size: 1]
	bool K2Node_CustomEvent_Allow_Decals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd12, Size: 1]
	HitResult[] CallFunc_Filter_Cosmetic_Hit_Results_Filtered_Hit_Results;//[Offset: 0xd18, Size: 1]
	bool K2Node_CustomEvent_bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28, Size: 1]
	HitResult[] K2Node_CustomEvent_OutHits;//[Offset: 0xd30, Size: 1]
	Vector K2Node_CustomEvent_Start;//[Offset: 0xd40, Size: 1]
	Vector K2Node_CustomEvent_End;//[Offset: 0xd4c, Size: 1]
	bool K2Node_CustomEvent_bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd58, Size: 1]
	HitResult[] K2Node_CustomEvent_OutHits;//[Offset: 0xd60, Size: 1]
	Vector K2Node_CustomEvent_Start;//[Offset: 0xd70, Size: 1]
	Vector K2Node_CustomEvent_End;//[Offset: 0xd7c, Size: 1]
	bool K2Node_CustomEvent_bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	HitResult[] K2Node_CustomEvent_OutHits;//[Offset: 0xd90, Size: 1]
	Vector K2Node_CustomEvent_Start;//[Offset: 0xda0, Size: 1]
	Vector K2Node_CustomEvent_End;//[Offset: 0xdac, Size: 1]
	HitResult K2Node_CustomEvent_Hit;//[Offset: 0xdb8, Size: 1]
	bool CallFunc_BreakHitResult_bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe40, Size: 1]
	bool CallFunc_BreakHitResult_bInitialOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe41, Size: 1]
	float CallFunc_BreakHitResult_Time;//[Offset: 0xe44, Size: 1]
	float CallFunc_BreakHitResult_Distance;//[Offset: 0xe48, Size: 1]
	Vector CallFunc_BreakHitResult_Location;//[Offset: 0xe4c, Size: 1]
	Vector CallFunc_BreakHitResult_ImpactPoint;//[Offset: 0xe58, Size: 1]
	Vector CallFunc_BreakHitResult_Normal;//[Offset: 0xe64, Size: 1]
	Vector CallFunc_BreakHitResult_ImpactNormal;//[Offset: 0xe70, Size: 1]
	PhysicalMaterial* CallFunc_BreakHitResult_PhysMat;//[Offset: 0xe80, Size: 1]
	Actor* CallFunc_BreakHitResult_HitActor;//[Offset: 0xe88, Size: 1]
	PrimitiveComponent* CallFunc_BreakHitResult_HitComponent;//[Offset: 0xe90, Size: 1]
	FName CallFunc_BreakHitResult_HitBoneName;//[Offset: 0xe98, Size: 1]
	int CallFunc_BreakHitResult_HitItem;//[Offset: 0xea0, Size: 1]
	int CallFunc_BreakHitResult_FaceIndex;//[Offset: 0xea4, Size: 1]
	Vector CallFunc_BreakHitResult_TraceStart;//[Offset: 0xea8, Size: 1]
	Vector CallFunc_BreakHitResult_TraceEnd;//[Offset: 0xeb4, Size: 1]
	bool CallFunc_BreakHitResult_bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec0, Size: 1]
	bool CallFunc_BreakHitResult_bInitialOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec1, Size: 1]
	float CallFunc_BreakHitResult_Time;//[Offset: 0xec4, Size: 1]
	float CallFunc_BreakHitResult_Distance;//[Offset: 0xec8, Size: 1]
	Vector CallFunc_BreakHitResult_Location;//[Offset: 0xecc, Size: 1]
	Vector CallFunc_BreakHitResult_ImpactPoint;//[Offset: 0xed8, Size: 1]
	Vector CallFunc_BreakHitResult_Normal;//[Offset: 0xee4, Size: 1]
	Vector CallFunc_BreakHitResult_ImpactNormal;//[Offset: 0xef0, Size: 1]
	PhysicalMaterial* CallFunc_BreakHitResult_PhysMat;//[Offset: 0xf00, Size: 1]
	Actor* CallFunc_BreakHitResult_HitActor;//[Offset: 0xf08, Size: 1]
	PrimitiveComponent* CallFunc_BreakHitResult_HitComponent;//[Offset: 0xf10, Size: 1]
	FName CallFunc_BreakHitResult_HitBoneName;//[Offset: 0xf18, Size: 1]
	int CallFunc_BreakHitResult_HitItem;//[Offset: 0xf20, Size: 1]
	int CallFunc_BreakHitResult_FaceIndex;//[Offset: 0xf24, Size: 1]
	Vector CallFunc_BreakHitResult_TraceStart;//[Offset: 0xf28, Size: 1]
	Vector CallFunc_BreakHitResult_TraceEnd;//[Offset: 0xf34, Size: 1]
	HitDecalInfo CallFunc_Get_Decal_Material_Decal_Info;//[Offset: 0xf40, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0xf68, Size: 1]
	FullFireRepData K2Node_CustomEvent_Data;//[Offset: 0xf70, Size: 1]
	PlayerController* K2Node_DynamicCast_AsPlayer_Controller;//[Offset: 0xfd8, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe0, Size: 1]
	KSDefaultAimTargetingModule* K2Node_DynamicCast_AsKSDefault_Aim_Targeting_Module;//[Offset: 0xfe8, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff0, Size: 1]
	Vector CallFunc_IsWallMarkerActive_WallLocation;//[Offset: 0xff4, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x1000, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x1004, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x1008, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x100c, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x1010, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x1018, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x101c, Size: 1]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x102c, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1030, Size: 1]
	enum K2Node_Event_OldState;//[Offset: 0x1040, Size: 1]
	enum K2Node_Event_NewState;//[Offset: 0x1041, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1042, Size: 1]
	FullFireRepData K2Node_Event_Data;//[Offset: 0x1048, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x10b4, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x10b8, Size: 1]
	int Temp_int_Variable;//[Offset: 0x10bc, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x10c0, Size: 1]
	int CallFunc_GetBool_Priority;//[Offset: 0x10d0, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x10d8, Size: 1]
	int CallFunc_GetBool_Priority;//[Offset: 0x10e0, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x10e4, Size: 1]
	Pawn* K2Node_CustomEvent_ViewPawn;//[Offset: 0x10f8, Size: 1]
	enum K2Node_CustomEvent_NewState;//[Offset: 0x1100, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1108, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1110, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1118, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x1120, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x1124, Size: 1]
	int CallFunc_GetAudioEvent_Priority;//[Offset: 0x1128, Size: 1]
	int CallFunc_GetAudioEvent_Priority;//[Offset: 0x112c, Size: 1]
	int CallFunc_GetAudioEvent_Priority;//[Offset: 0x1130, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1134, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x1144, Size: 1]
	AnimMontage* CallFunc_Get_Player_1P_Fire_Montage_Montage;//[Offset: 0x1148, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x1150, Size: 1]
	SkinnableSkeletalMeshComponent* K2Node_Event_SkinnableSkelComp;//[Offset: 0x1158, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x1160, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x1170, Size: 1]
	Actor*[] Temp_object_Variable;//[Offset: 0x1180, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x1190, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a0, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x11a4, Size: 1]
	ParticleSystemComponent* CallFunc_Array_Get_Item;//[Offset: 0x11a8, Size: 1]
	int K2Node_Event_meshToDropFrom;//[Offset: 0x11b0, Size: 1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x11b4, Size: 1]
	KSCharacterFoundation* K2Node_CustomEvent_KillerCharacter;//[Offset: 0x11b8, Size: 1]
	KSCharacterFoundation* K2Node_CustomEvent_KilledCharacter;//[Offset: 0x11c0, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c8, Size: 1]
	Controller* K2Node_CustomEvent_NewController;//[Offset: 0x11d0, Size: 1]
	KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller;//[Offset: 0x11d8, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e0, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x11e4, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x11e8, Size: 1]
	int CallFunc_GetBool_Priority;//[Offset: 0x11ec, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x11f0, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x11f4, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x11f8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x1200, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1210, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x1218, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x121c, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x1220, Size: 1]
	int CallFunc_GetBool_Priority;//[Offset: 0x1230, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x1234, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x1238, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x123c, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x1240, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1248, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x1250, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1260, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x1268, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x126c, Size: 1]
	MaterialInterface*[] CallFunc_GetMaterials_ReturnValue;//[Offset: 0x1270, Size: 1]
	MaterialInterface* CallFunc_Array_Get_Item;//[Offset: 0x1280, Size: 1]
	MaterialInstanceDynamic* K2Node_DynamicCast_AsMaterial_Instance_Dynamic;//[Offset: 0x1288, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1290, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x1294, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1298, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x12a0, Size: 1]
	bool CallFunc_End_Reload_Weapon_Cancelled_A_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a4, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x12a8, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x12b0, Size: 1]
	int CallFunc_GetAudioEvent_Priority;//[Offset: 0x12b4, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x12b8, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x12bc, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c0, Size: 1]
	ParticleSystemComponent* CallFunc_Array_Get_Item;//[Offset: 0x12c8, Size: 1]
	AnimMontage* K2Node_Select_Default;//[Offset: 0x12d0, Size: 1]
	bool CallFunc_Array_Get_Item;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d8, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x12dc, Size: 1]
	bool CallFunc_Array_Get_Item;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e0, Size: 1]
	ParticleSystemComponent* CallFunc_Array_Get_Item;//[Offset: 0x12e8, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x12f0, Size: 1]
	float Temp_float_Variable;//[Offset: 0x12f8, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12fc, Size: 1]
	enum K2Node_CustomEvent_OldCombatState;//[Offset: 0x12fd, Size: 1]
	enum K2Node_CustomEvent_NewCombatState;//[Offset: 0x12fe, Size: 1]
	float K2Node_Select_Default;//[Offset: 0x1300, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1304, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x1314, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x131c, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1328, Size: 1]
	int Temp_int_Variable;//[Offset: 0x1330, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1334, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x1344, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1350, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x1358, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1360, Size: 1]
	AnimMontage* K2Node_Select_Default;//[Offset: 0x1368, Size: 1]
	Texture2D* Temp_object_Variable;//[Offset: 0x1370, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1378, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x137c, Size: 1]
	bool CallFunc_Array_Get_Item;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1380, Size: 1]
	ParticleSystemComponent* CallFunc_Array_Get_Item;//[Offset: 0x1388, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1390, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x13a0, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x13b0, Size: 1]
	Texture2D* K2Node_Select_Default;//[Offset: 0x13c0, Size: 1]
	Transform K2Node_Event_transformOverride;//[Offset: 0x13d0, Size: 1]
	Vector K2Node_Event_velocityOverride;//[Offset: 0x1400, Size: 1]
	bool K2Node_Event_ForceDisableMagDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140c, Size: 1]
	bool K2Node_Event_DropMultipleMags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140d, Size: 1]
	AnimMontage* CallFunc_Get_Player_3P_Fire_Montage_No_Engage_Montage;//[Offset: 0x1410, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1418, Size: 1]
	int CallFunc_GetBool_Priority;//[Offset: 0x1420, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x1424, Size: 1]
	AnimMontage* CallFunc_Get_Player_3P_Fire_Montage_Montage;//[Offset: 0x1428, Size: 1]
	AnimMontage* CallFunc_Get_Player_1P_Fire_Montage_Montage;//[Offset: 0x1430, Size: 1]
	int CallFunc_GetBool_Priority;//[Offset: 0x1438, Size: 1]
	KSCharacterAnimInst* CallFunc_Get_Character_Anim_Instance_Anim_Inst;//[Offset: 0x1440, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x1448, Size: 1]
	AnimMontage* CallFunc_Get_Player_3P_Fire_Montage_No_Engage_Montage;//[Offset: 0x1450, Size: 1]
	AnimMontage* CallFunc_Get_Player_3P_Fire_Montage_Montage;//[Offset: 0x1458, Size: 1]
	bool CallFunc_NeedsNewUIWidgetActor_NeedsUIWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1460, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x1464, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1468, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1478, Size: 1]
	KSWeaponSkeletalMeshComponent*[] CallFunc_GetWeaponSkeletalMeshComponents_OutKSWeaponSkeletalMeshComponents;//[Offset: 0x1488, Size: 1]
	KSWeaponSkeletalMeshComponent* CallFunc_Array_Get_Item;//[Offset: 0x1498, Size: 1]
	int Temp_int_Array_Index_Variable;//[Offset: 0x14a0, Size: 1]
	bool CallFunc_Array_Get_Item;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a4, Size: 1]
	ParticleSystemComponent* CallFunc_Array_Get_Item;//[Offset: 0x14a8, Size: 1]
	KSWeaponSkeletalMeshComponent*[] CallFunc_GetWeaponSkeletalMeshComponents_OutKSWeaponSkeletalMeshComponents;//[Offset: 0x14b0, Size: 1]
	KSWeaponSkeletalMeshComponent* CallFunc_Array_Get_Item;//[Offset: 0x14c0, Size: 1]
	KSWeaponSkeletalMeshComponent*[] CallFunc_GetWeaponSkeletalMeshComponents_OutKSWeaponSkeletalMeshComponents;//[Offset: 0x14c8, Size: 1]
	KSWeaponSkeletalMeshComponent* CallFunc_Array_Get_Item;//[Offset: 0x14d8, Size: 1]
	KSWeaponSkeletalMeshComponent*[] CallFunc_GetWeaponSkeletalMeshComponents_OutKSWeaponSkeletalMeshComponents;//[Offset: 0x14e0, Size: 1]
	KSWeaponSkeletalMeshComponent* CallFunc_Array_Get_Item;//[Offset: 0x14f0, Size: 1]
	KSWeaponSkeletalMeshComponent*[] CallFunc_GetWeaponSkeletalMeshComponents_OutKSWeaponSkeletalMeshComponents;//[Offset: 0x14f8, Size: 1]
	KSWeaponSkeletalMeshComponent* CallFunc_Array_Get_Item;//[Offset: 0x1508, Size: 1]
	int Temp_int_Loop_Counter_Variable;//[Offset: 0x1510, Size: 1]
	KSWeaponAnimInstance* K2Node_DynamicCast_AsKSWeapon_Anim_Instance;//[Offset: 0x1518, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1520, Size: 1]
	KSWeaponSkeletalMeshComponent*[] CallFunc_GetWeaponSkeletalMeshComponents_OutKSWeaponSkeletalMeshComponents;//[Offset: 0x1528, Size: 1]
	KSWeaponSkeletalMeshComponent*[] CallFunc_GetWeaponSkeletalMeshComponents_OutKSWeaponSkeletalMeshComponents;//[Offset: 0x1538, Size: 1]
	KSWeaponSkeletalMeshComponent* CallFunc_Array_Get_Item;//[Offset: 0x1548, Size: 1]
	KSWeaponSkeletalMeshComponent* CallFunc_Array_Get_Item;//[Offset: 0x1550, Size: 1]
	void OnSetShieldActive__DelegateSignature(bool bpp__ShieldIsActive__pf);// 0x2cbecb0
	void OnSetScopeScaleAlpha__DelegateSignature(float bpp__NewxAlpha__pfT);// 0x2cbecb0
	void OnSetRevolverChamberRotate__DelegateSignature(Rotator bpp__NewxRevolverxChamberxRotator__pfTTT);// 0x2cbecb0
	void OnSetLobbyState__DelegateSignature(bool bpp__LobbyxState__pfT);// 0x2cbecb0
	void Update Tracer Start Point();// 0x1ef4f60
	void Update Fire Anim on MIrror Pose Changed();// 0x1ef4f40
	void Update Combat State(enum bpp__NewState__pf);// 0x1ef4ec0
	void UpdateMagDropBoneVelocity(float bpp__DeltaTime__pf, int bpp__Index__pf);// 0x1ef4df0
	void UpdateAimDownSightsBlurValues();// 0x1ef4dd0
	void TryDisableCameraModifier(class Object bpp__CameraxModifier__pfT, int bpp__PlayerxIndex__pfT, out bool bpp__Found__pf);// 0x1ef4cc0
	void SyncComputeCosmeticHits(FullFireRepData bpp__FireData__pf, out HitResult[] bpp__Hits__pf);// 0x1ef4b90
	void Spawn Tracers Simple(out HitResult[] bpp__Hits__pf, Vector bpp__TracexEnd__pfT);// 0x1ef4a80
	void Spawn Tracer(Vector bpp__EndPoint__pf);// 0x1ef49f0
	void Spawn Spangs and Decals(out const FullFireRepData bpp__Data__pf__const, out HitResult[] bpp__Hits__pf, out FullFireRepData bpp__OutxData__pfT);// 0x1ef4850
	void SpawnTracers(out HitResult[] bpp__Hits__pf, out FullFireRepData[] bpp__AimData__pf);// 0x1ef4710
	void SpawnSpangs(out HitResult[] bpp__Hits__pf);// 0x1ef4660
	void SpawnDecals(out HitResult[] bpp__Hits__pf);// 0x1ef45b0
	void ShouldPlayFireAnim1P(out bool bpp__Playx1PxFire__pfTT);// 0x1ef4510
	void Set Scope Scale Alpha(float bpp__NewxAlpha__pfT);// 0x1ef4490
	void Set Revolver Chamber Rotate(Rotator bpp__TargetxRotator__pfT, bool bpp__ResetxRotation__pfT);// 0x1ef43b0
	void Set Muzzle Flash Emitter and 1p Aux();// 0x1ef4390
	void Setup Tracers();// 0x1ef4370
	void Setup Character Mirror Anims();// 0x1ef4350
	void Setup Character Anim Init Callback();// 0xd76eb0
	void SetupMultiPrimary();// 0x1ef4330
	void SetUIWidget();// 0xd760c0
	AnimMontage* Select Weapon Reload Montage(bool bpp__IsxQuickxReload__pfTT, int bpp__WepMeshIndex__pf);// 0x1ef4250
	void Select Character Reload Montage(out AnimMontage* bpp__ReloadMontage__pf, out AnimMontage* bpp__QuickReloadMontage__pf);// 0x1ef4170
	void SaveDropMagValues();// 0x1ef4150
	void Retrieve Weapon();// 0x1ef4130
	void Reticle Rotate();// 0x1ef4110
	void RestoreDropMagValues();// 0x1ef40f0
	void Reset Variables at Start of Firing Instance();// 0xdd2860
	void Reload Weapon();// 0x1ef40d0
	void Reload Cooldown Weapon();// 0x1ef40b0
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x1ef4030
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x1ef3fb0
	void ReceiveBeginPlay();// 0x1ef3f90
	void QueryForSprintReloadMod();// 0x1ef3f70
	void Pre Fire Weapon();// 0x1ef3f50
	void Prepare Next Tracer Spawn();// 0x1ef3f30
	void Post Fire Weapon();// 0x1ef3f10
	void Play Weapon Reload animation(float bpp__PlayRate__pf, bool bpp__IsxQuickxReload__pfTT, int bpp__WepMeshIndex__pf);// 0x1ef3e00
	void Play Reload MultiStage(float bpp__PlayxRate__pfT, AnimMontage* bpp__SelectedxMontage__pfT);// 0x1ef3d30
	void Play Reload Logic(AnimMontage* bpp__ReloadxMontage__pfT, AnimMontage* bpp__QuickReloadxMontage__pfT, bool bpp__IsxMultixStagexReloadx__pfTTTzy);// 0x1ef3c30
	void Play Reload Base(float bpp__PlayxRate__pfT, AnimMontage* bpp__SelectedxMontage__pfT);// 0x1ef3b60
	void Play Post Reload();// 0x1ef3b40
	void Play Fire Tail Sound(enum bpp__CallbackxType__pfT, AkCallbackInfo* bpp__CallbackxInfo__pfT);// 0x1ef3a70
	void Play Fire Camera Shakes(bool bpp__LocalOnly__pf, class Object bpp__PrimaryxShake__pfT, class Object bpp__HiFreqxShake__pfT);// 0x1ef3960
	void Play Casing Sound();// 0x1ef3940
	void Play Bullet Impact SFX(HitResult bpp__HitResult__pf);// 0x1ef3810
	void PlayInvalidFireSound();// 0x1ef37f0
	void PlayFireSound(out const AimData bpp__InputPin__pf__const);// 0x1ef3740
	void PlayEmptyFireAudio();// 0x1ef3720
	void OverrideDropMagValues(Transform bpp__transformOverride__pf, Vector bpp__velocityOverride__pf, bool bpp__ForceDisableMagDrop__pf, bool bpp__DropMultipleMags__pf);// 0x1ef3560
	void On Cosmetic Trace Complete Internal(bool bpp__BlockingxHit__pfT__const, out HitResult[] bpp__OutxHits__pfT, const Vector bpp__Start__pf__const, const Vector bpp__End__pf__const, bool bpp__AllowxSpangs__pfT, bool bpp__AllowxTracers__pfT, bool bpp__AllowxDecals__pfT);// 0x1ef3300
	void On Comestic Trace Complete(bool bpp__bBlockingHit__pf, out const HitResult[] bpp__OutHits__pf__const, out const Vector bpp__Start__pf__const, out const Vector bpp__End__pf__const);// 0x1ef3160
	void On Character Anim Initialized();// 0x1ef3140
	void OnSprintChanged(bool bpp__IsSprinting__pf);// 0x1ef30b0
	void OnPossessedBy_Event(Controller* bpp__NewController__pf);// 0x1ef3020
	void OnMirrorPoseChanged();// 0x1ef3000
	void OnKilled_Event(const KSCharacterFoundation* bpp__KillerCharacter__pf__const, const KSCharacterFoundation* bpp__KilledCharacter__pf__const);// 0x1ef2f30
	void NotifyStopFireReceived();// 0x1ef2f10
	void NeedsNewUIWidgetActor(out bool bpp__NeedsUIWidget__pf);// 0x1ef2e70
	bool IsDropMeshValid(int bpp__Index__pf);// 0x1ef2dd0
	void IdleWeapon(enum bpp__OldState__pf);// 0x1ef2d50
	void Holster Weapon();// 0x1ef2d30
	void Hide Magazine();// 0x1ef2d10
	void HasUIWidget(out bool bpp__HasUIWidget__pf);// 0x1ef2c70
	void HandleWeaponFiringClientEffects(FullFireRepData bpp__Data__pf);// 0x1ef2bc0
	void Get Tracer Offset(out float bpp__Offset__pf);// 0x1ef2b20
	void Get Spang Particle System(HitResult bpp__Hit__pf, bool bpp__GetSecondarySpang__pf, out ParticleSystem* bpp__SpangxToxUse__pfTT, out bool bpp__PlayOnHitCharacter__pf);// 0x1ef2920
	void Get Scaled Reload Playrate(AnimMontage* bpp__AnimxMontage__pfT, out float bpp__ScaledxPlayrate__pfT);// 0x1ef2840
	void Get Scaled Post Reload Playrate(AnimMontage* bpp__AnimxMontage__pfT, out float bpp__ScaledxDuration__pfT, out float bpp__ScaledxPlayrate__pfT);// 0x1ef2720
	void Get Scaled Multistage Reload Playrate(AnimMontage* bpp__AnimxMontage__pfT, out float bpp__ScaledxPlayrate__pfT);// 0x1ef2640
	void Get Reticle Material();// 0x1ef2620
	void Get Post Reload Weapon Section Time(AnimMontage* bpp__AnimxMontage__pfT, out float bpp__PostxReloadxPosition__pfTT);// 0x1ef2540
	void Get Player 3P Lunge Montage(out AnimMontage* bpp__Montage__pf);// 0x1ef24a0
	void Get Player 3P Fire Montage No Engage(out AnimMontage* bpp__Montage__pf);// 0x1ef2400
	void Get Player 3P Fire Montage(out AnimMontage* bpp__Montage__pf);// 0x1ef2360
	void Get Player 1P Fire Montage(out AnimMontage* bpp__Montage__pf);// 0x1ef22c0
	void Get Holster Visibility(out bool bpp__Visibility__pf, out KSWeaponComponent* bpp__WeaponComponent__pf);// 0x1ef21e0
	void Get Expected Aim Data(out AimData bpp__AimData__pf);// 0x1ef2130
	void Get Decal Material(HitResult bpp__Hit__pf, out HitDecalInfo bpp__DecalxInfo__pfT);// 0x1ef1fb0
	void Get Deattach Slot Name(KSCharacter* bpp__KsCharacter__pf, out FName bpp__SlotxName__pfT);// 0x1ef1ed0
	void Get Character Anim Instance(out KSCharacterAnimInst* bpp__AnimxInst__pfT);// 0x1ef1e30
	void Get Character 3p Fire Section(out FName bpp__3pxFirexSection__pfTT);// 0x1ef1d90
	void Get Character 1p Fire Section(out FName bpp__1pxFirexSection__pfTT);// 0x1ef1cf0
	void Get Attach Slot Name(KSCharacter* bpp__KsCharacter__pf, out FName bpp__SlotxName__pfT);// 0x1ef1c10
	void Get Additional Deattach Slot Name(KSCharacter* bpp__KsCharacter__pf, int bpp__AdditionalxMeshxIndex__pfTT, out FName bpp__SlotxName__pfT, out bool bpp__Success__pf);// 0x1ef1aa0
	void Get Additional Attach Slot Name(KSCharacter* bpp__KsCharacter__pf, int bpp__AdditionalxMeshxIndex__pfTT, out FName bpp__SlotxName__pfT, out bool bpp__Success__pf);// 0x1ef1930
	void GetTracerStartPoint(out Vector bpp__TracerStartLocation__pf);// 0x1ef18a0
	void GetTableRowNameForHit(HitResult bpp__Hit__pf, FName bpp__RowNamePrefix__pf, out FName bpp__RowName__pf);// 0x1ef1720
	void GetPercentRemainingAmmo(out float bpp__Percent__pf);// 0x1ef1680
	void GetMagDropBoneRotation(int bpp__MagMeshIndex__pf, int bpp__WepMeshIndex__pf, out Rotator bpp__WorldRotation__pf);// 0x1ef14d0
	void GetMagDropBoneLocation(int bpp__MagMeshIndex__pf, int bpp__WepMeshIndex__pf, out Vector bpp__WorldLocation__pf);// 0x1ef13c0
	void GetMagazineDropBoneName(out FName bpp__Name__pf);// 0x1ef15e0
	AkAudioEvent* GetFirstShotAudioEvent();// 0x1ef1390
	AkAudioEvent* GetFireAudioEvent();// 0x1ef1360
	AkAudioEvent* GetEchoAudioEvent();// 0x1ef1330
	void GetDropVelocity(int bpp__Index__pf, out Vector bpp__WorldVelocity__pf);// 0x1ef1260
	void GetDropMesh(int bpp__Index__pf, out SkeletalMesh* bpp__SkelMesh__pf, out StaticMesh* bpp__StaticMesh__pf);// 0x1ef1140
	void Force Exit ADS Pose();// 0x1ef1120
	void Force ADS Scope();// 0x1ef1100
	void ForceRetrieveWeapon();// 0xcf5e50
	void ForceRetrieveState();// 0xcf5d10
	void ForceHolsterWeapon();// 0x1ef10e0
	void ForceAttachWeaponToHolsterSocket();// 0x1ef10c0
	void ForceAttachWeaponToActiveSocket();// 0x1ef10a0
	void Fixup Laser Sight(SkinnableSkeletalMeshComponent* bpp__MeshComponent__pf);// 0x1ef1010
	void Fixup Attach Point();// 0x1ef0ff0
	void Fire Weapon(FullFireRepData bpp__Data__pf, bool bpp__PlayNoChainFireMontage__pf);// 0x1ef0ee0
	void Fire Montage Jump To Section(FString bpp__Section__pf__const);// 0x1ef0e40
	void Filter Cosmetic Hit Results(out HitResult[] bpp__TracexHitxResults__pfTT, out HitResult[] bpp__FilteredxHitxResults__pfTT);// 0x1ef0d20
	void ExecuteUbergraph_Master_WeaponComponent(int bpp__EntryPoint__pf);// 0x1ef0ca0
	void ExecuteUbergraph_Master_WeaponComponent(int bpp__EntryPoint__pf);// 0x1ef0c20
	void ExecuteUbergraph_Master_WeaponComponent(int bpp__EntryPoint__pf);// 0x1ef0ba0
	void ExecuteUbergraph_Master_WeaponComponent(int bpp__EntryPoint__pf);// 0x1ef0b20
	void ExecuteUbergraph_Master_WeaponComponent(int bpp__EntryPoint__pf);// 0x1ef0a20
	void ExecuteUbergraph_Master_WeaponComponent(int bpp__EntryPoint__pf);// 0x1ef0aa0
	void ExecuteUbergraph_Master_WeaponComponent(int bpp__EntryPoint__pf);// 0x1ef09a0
	void ExecuteUbergraph_Master_WeaponComponent(int bpp__EntryPoint__pf);// 0x1ef0920
	void Evaluate Shield Mesh Anim State(bool bpp__ShieldxState__pfT);// 0x1ef0890
	void Evaluate Revolver Chamber Rotate();// 0x1ef0870
	void End Reload Weapon(bool bpp__AbortxReloadxAnimation__pfTT, out bool bpp__CancelledxAxReload__pfTT);// 0x1ef0790
	void EnableOrAddCameraModifier(class Object bpp__Modifier__pf, int bpp__PlayerIndex__pf, out CameraModifier* bpp__ModifierxObject__pfT);// 0x1ef0680
	void DropMagInternal(int bpp__MagMeshIndex__pf, int bpp__WepMeshIndex__pf, bool bpp__LockoutxMagxDrop__pfTT);// 0x1ef04f0
	void DropMagazine(const int bpp__meshToDropFrom__pf__const);// 0x1ef05f0
	void DetermineMagSize();// 0x1ef04d0
	void Delay Spawn Tracers(out const HitResult[] bpp__Hits__pf__const, const Vector bpp__TracexEnd__pfT__const);// 0x1ef03c0
	void Delay Spawn Spangs(out HitResult[] bpp__Hits__pf);// 0x1ef0310
	void Delay Spawn Decals(out const HitResult[] bpp__Hits__pf__const, Vector bpp__Start__pf, Vector bpp__End__pf);// 0x1ef01b0
	void CheckKillCamScope(Pawn* bpp__ViewPawn__pf);// 0x1ef0120
	void Character Combat State Changed(enum bpp__OldCombatState__pf, enum bpp__NewCombatState__pf);// 0x1ef0060
	void Can Spawn Tracer Now(out bool bpp__CanxSpawnxxTracer__pfTTT);// 0x1eeffc0
	void CancelReloadCosmetic();// 0x1eeffa0
	void Calculate Reload Time(AnimMontage* bpp__ReloadxMontage__pfT, AnimMontage* bpp__QuickxReloadxMontage__pfTT, out float bpp__PlayRate__pf, out AnimMontage* bpp__SelectedxMontage__pfT, out bool bpp__IsxQuickReload__pfT);// 0x1eefdd0
	void Calculate Multistage Reload Time(AnimMontage* bpp__ReloadxMontage__pfT, AnimMontage* bpp__QuickxReloadxMontage__pfTT, out float bpp__PlayRate__pf, out AnimMontage* bpp__SelectedxMontage__pfT, out bool bpp__IsxQuickReload__pfT);// 0x1eefc00
	void BuildupWeapon();// 0x1eefbe0
	void BlueprintPrepareKillCamPlayback();// 0x1eefbc0
	void BlueprintPersistentCosmeticsUpdate();// 0xe6a500
	void AudioOnCooldown();// 0x1eefba0
	void Attach Weapon To Holster Socket();// 0x1eefb80
	void Attach Weapon To Active Socket();// 0x1eefb60
	void AttachToOverrideHolsterSlot(int bpp__WepMeshIndex__pf, out bool bpp__UsedOverride__pf, out bool bpp__PrimaryOverride__pf);// 0x1eefa40
	void AsyncComputeCosmeticHitsAndPlay(const FullFireRepData bpp__FirexData__pfT__const);// 0x1eef990
	void Apply Spang From Hit Result(HitResult bpp__Hit__pf);// 0x1eef860
	void ApplyDecalFromHit(HitResult bpp__Hit__pf);// 0x1eef730
	void Anim Init Set Weapon State(KSWeaponAnimInstance* bpp__KSxWeaponxAnimxInst__pfTTT);// 0x1eef6a0
	void Anim Init Set Weapon As Revolver(KSWeaponAnimInstance* bpp__KSxWeaponxAnimxInst__pfTTT);// 0x1eef610
	void Anim Init Set Use Weapon Additive(KSWeaponAnimInstance* bpp__KSxWeaponxAnimxInst__pfTTT);// 0x1eef580
	void Anim Init Set Shield Is Active(KSWeaponAnimInstance* bpp__KSxWeaponxAnimxInst__pfTTT);// 0x1eef4f0
	void Anim Init Set Scope Mesh Scale(KSWeaponAnimInstance* bpp__KSxWeaponxAnimxInst__pfTTT);// 0x1eef460
	void Anim Init Set Lobby State(KSWeaponAnimInstance* bpp__KSxWeaponxAnimxInst__pfTTT, AnimInstance* bpp__BackupxAnimxInst__pfTT);// 0x1eef390
	void Anim Init Set Hide Magazine(KSWeaponAnimInstance* bpp__KSxWeaponxAnimxInst__pfTTT);// 0x1eef300
	void Anim Init Set Folding Stock(KSWeaponAnimInstance* bpp__KSxWeaponxAnimxInst__pfTTT);// 0x1eef270
	void Anim Init On Weapon Mesh(SkinnableSkeletalMeshComponent* bpp__SkelComp__pf, AnimInstance* bpp__AnimInstance__pf);// 0x1eef1a0
	void Ancillary Mesh Scale Set();// 0x1eef180
	void Aim Over Shoulder Check Point();// 0x1eef160
	void After Spawn Tracers Delay(bool bpp__bBlockingHit__pf, out const HitResult[] bpp__OutHits__pf__const, out const Vector bpp__Start__pf__const, out const Vector bpp__End__pf__const);// 0x1eeefc0
	void After Spawn Spangs Delay(bool bpp__bBlockingHit__pf, out const HitResult[] bpp__OutHits__pf__const, out const Vector bpp__Start__pf__const, out const Vector bpp__End__pf__const);// 0x1eeee20
	void After Spawn Decals Delay(bool bpp__bBlockingHit__pf, out const HitResult[] bpp__OutHits__pf__const, out const Vector bpp__Start__pf__const, out const Vector bpp__End__pf__const);// 0x1eeec80
	void OnWeaponComponentStateChanged__DelegateSignature(const KSWeaponComponent* bpp__WeaponComponent__pf, enum bpp__OldState__pf, enum bpp__NewState__pf);// 0x2cbecb0
	void OnSprintChanged__DelegateSignature(bool bpp__IsSprinting__pf);// 0x2cbecb0
	void OnPossessedBy__DelegateSignature(Controller* bpp__NewController__pf);// 0x2cbecb0
	void OnCombatStateChanged__DelegateSignature(enum bpp__OldCombatState__pf, enum bpp__NewCombatState__pf);// 0x2cbecb0
	void OnCharacterFoundationKilled__DelegateSignature(const KSCharacterFoundation* bpp__KillerCharacter__pf, const KSCharacterFoundation* bpp__KilledCharacter__pf);// 0x2cbecb0
	void OnAnimInitializedOnSkinnableMesh__DelegateSignature(SkinnableSkeletalMeshComponent* bpp__SkinnableSkelComp__pf, AnimInstance* bpp__AnimInstance__pf);// 0x2cbecb0
	void OnAnimInitialized__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: HitDecalInfo
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 1]
	Vector Size;//[Offset: 0x8, Size: 1]
	float MinimumScaling;//[Offset: 0x14, Size: 1]
	float MaximumScaling;//[Offset: 0x18, Size: 1]
	float MinimumAngle;//[Offset: 0x1c, Size: 1]
	float MaximumAngle;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MultiMagDropInfo
	FName DropBone_2_2CFC9A8F4F2664ED22B08296FB92E731;//[Offset: 0x0, Size: 1]
	bool DropBoneOnWeapon_5_BC9F11844B79F021078C9BA149D169AA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	StaticMesh* DropMesh_15_6B58EE524E651CF10CEB8EA7288C667F;//[Offset: 0x10, Size: 1]
	Transform DropMultiMagSpawnOffset_21_594C51714E03815BC1D89E92B11A2550;//[Offset: 0x20, Size: 1]
	Vector DropMultiMagVelocityOverride_22_71C6708D4D1C99CFB8A9DF90ED02BA49;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSDefaultAimTargetingModule.KSWeaponTargetingModule.Object
	float WallMarkerMaxDistance;//[Offset: 0x128, Size: 1]
	bool bBlockedByWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bWallMarkerActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12d, Size: 1]
	Vector WallMarkerWorldLocation;//[Offset: 0x130, Size: 1]
	KSWeaponAsset_WithProjectile* ProjWeaponAsset;//[Offset: 0x140, Size: 1]
	bool IsWallMarkerActive(out Vector WallLocation);// 0x2688d30
	bool IsCurrentlyBlocked();// 0x2688d10
	float GetWallMarkerMaxDistance();// 0x2688cf0

--------------------------------
Class: WBP_EnemyDetected_C.KSEnemyDetectedWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	VerticalBox* Container;//[Offset: 0x530, Size: 1]
	Image* ShakeyIcon;//[Offset: 0x538, Size: 1]
	Image* StableIcon;//[Offset: 0x540, Size: 1]
	void Construct();// 0x2cbecb0
	void OnUpdateEnemyDetectedUI(bool bShow);// 0x2cbecb0
	void ExecuteUbergraph_WBP_EnemyDetected(int EntryPoint, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_CustomEvent_bShow, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSEnemyDetectedWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object

--------------------------------
Class: WBP_GameTouchHudInstantiator_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	CanvasPanel* TouchHudContainer_CanvasPanel;//[Offset: 0x530, Size: 1]
	GameTouchHUDWidget_C* GameTouchHUDWidget;//[Offset: 0x538, Size: 1]
	void Load or Unload Touch Widget(byte InputState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Anchors CallFunc_GetAnchors_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetSize_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameTouchHUDWidget_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void ExecuteUbergraph_WBP_GameTouchHudInstantiator(int EntryPoint, byte CallFunc_GetCurrentInputState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_HUD* K2Node_Event_hud);// 0x2cbecb0

--------------------------------
Class: GameTouchHUDWidget_C.KSTouchHudWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x598, Size: 1]
	WBP_TouchButtonGeneric_C* AOSToggleButton;//[Offset: 0x5a0, Size: 1]
	WBP_TouchButtonGeneric_C* AutoSprintToggleButton;//[Offset: 0x5a8, Size: 1]
	Button* BtnScoreboard;//[Offset: 0x5b0, Size: 1]
	Button* BtnStore;//[Offset: 0x5b8, Size: 1]
	WBP_TouchButtonGeneric_C* CrouchButton;//[Offset: 0x5c0, Size: 1]
	WidgetSwitcher* CrouchSlideSwitcher;//[Offset: 0x5c8, Size: 1]
	WBP_TouchButtonGeneric_C* DodgeRoll;//[Offset: 0x5d0, Size: 1]
	WBP_TouchButtonGeneric_C* DragSprintToggleButton;//[Offset: 0x5d8, Size: 1]
	WBP_TouchButtonGeneric_C* GadgetCancelButton;//[Offset: 0x5e0, Size: 1]
	CanvasPanel* InGameHUDCanvasPanel;//[Offset: 0x5e8, Size: 1]
	WBP_TouchButtonGeneric_C* InteractButton;//[Offset: 0x5f0, Size: 1]
	WBP_TouchButtonGeneric_C* JumpButton;//[Offset: 0x5f8, Size: 1]
	Image* LeftStickDir;//[Offset: 0x600, Size: 1]
	Image* LeftStickDir_Shadow;//[Offset: 0x608, Size: 1]
	Overlay* LeftStickDirWrapper;//[Offset: 0x610, Size: 1]
	Image* LeftStickOrigin;//[Offset: 0x618, Size: 1]
	Image* LeftStickOrigin_Shadow;//[Offset: 0x620, Size: 1]
	Overlay* LeftStickOriginWrapper;//[Offset: 0x628, Size: 1]
	WBP_TouchButtonGeneric_C* MenuButton;//[Offset: 0x630, Size: 1]
	Button* OpenMapButton;//[Offset: 0x638, Size: 1]
	WBP_TouchButtonGeneric_C* PrimaryMeleeButton;//[Offset: 0x640, Size: 1]
	Overlay* PrimaryWeaponFireOverlay;//[Offset: 0x648, Size: 1]
	PUMG_UnsafeZone* PUMG_UnsafeZone;//[Offset: 0x650, Size: 1]
	WBP_TouchButtonGeneric_C* ReloadButton;//[Offset: 0x658, Size: 1]
	WBP_TouchButtonGeneric_C* ShoulderSwap;//[Offset: 0x660, Size: 1]
	WBP_TouchButtonGeneric_C* SlideButton;//[Offset: 0x668, Size: 1]
	WBP_GadgetTouchButton_C* ThrowGrenadeButton;//[Offset: 0x670, Size: 1]
	WBP_BombTouchButton_C* WBP_BombTouchButton;//[Offset: 0x678, Size: 1]
	WBP_LocalPlayerHealth_Mobile_C* WBP_LocalPlayerHealth_Mobile;//[Offset: 0x680, Size: 1]
	WBP_TouchAbilityButton_C* WBP_TouchAbilityButton;//[Offset: 0x688, Size: 1]
	WBP_TouchGadgetButton_C* WBP_TouchGadgetButton;//[Offset: 0x690, Size: 1]
	WBP_TouchWeaponSelectionTray_C* WBP_TouchWeaponSelectionTray;//[Offset: 0x698, Size: 1]
	ScrollBox* WeaponPickup_ScrollBox;//[Offset: 0x6a0, Size: 1]
	bool IsGrenadeActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8, Size: 1]
	bool IsReviveTextSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a9, Size: 1]
	Actor*[] PreviousNearbyCrateItems;//[Offset: 0x6b0, Size: 1]
	Actor*[] SortedNearbyCrateItems;//[Offset: 0x6c0, Size: 1]
	Vector2D DefaultLeftStickDir;//[Offset: 0x6d0, Size: 1]
	Vector2D DefaultLeftStickOrigin;//[Offset: 0x6d8, Size: 1]
	Texture2D* MyZiplineIcon;//[Offset: 0x6e0, Size: 1]
	Texture2D* MyInteractIcon;//[Offset: 0x6e8, Size: 1]
	bool IsJoystickActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	void Set Character Auto Sprint(bool ShouldAutoSprint, Character* CallFunc_GetPlayerCharacter_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void Cancel Next Release(WBP_FireWeapon_TouchButton_C* K2Node_DynamicCast_AsWBP_Fire_Weapon_Touch_Button, bool K2Node_DynamicCast_bSuccess, WBP_FireWeapon_TouchButton_C* K2Node_DynamicCast_AsWBP_Fire_Weapon_Touch_Button, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void UpdateStateTouchCancelButton(enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentAimState_ReturnValue, KSWeaponComponent* CallFunc_GetActiveGadgetComponent_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, GameplayTag CallFunc_GetWeaponEquipType_ReturnValue, bool CallFunc_MatchesTag_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0x2cbecb0
	void GetHudMaskableButtons(out Widget*[] MaskableButtons, Widget*[] K2Node_MakeArray_Array);// 0x2cbecb0
	void SetButtonMask(out const bool[] MaskArray, enum Temp_byte_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, enum Temp_byte_Variable, int Temp_int_Variable, bool CallFunc_Array_Get_Item, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, Widget*[] CallFunc_GetHudMaskableButtons_MaskableButtons, Widget* CallFunc_Array_Get_Item, enum K2Node_Select_Default);// 0x2cbecb0
	Vector2D Get Touch Cursor Screen Space(Key KeyState, Key NewLocalVar, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Vector CallFunc_GetInputVectorKeyState_ReturnValue, Vector2D CallFunc_Conv_VectorToVector2D_ReturnValue);// 0x2cbecb0
	void SnapJoystickToCursor(CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_Get_Touch_Cursor_Screen_Space_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue);// 0x2cbecb0
	void ResetJoystick(CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x2cbecb0
	void TriggerInputAction(FName InActionName, byte InInputEvent, bool CallFunc_Not_PreBool_ReturnValue, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void GetWidgetBounds(Widget* Widget, out Vector2D TopLeft, out Vector2D BottomRight, const Geometry CallFunc_GetCachedGeometry_ReturnValue, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition, Vector2D CallFunc_GetLocalSize_ReturnValue, Vector2D CallFunc_LocalToViewport_PixelPosition, Vector2D CallFunc_LocalToViewport_ViewportPosition);// 0x2cbecb0
	void IsPointOverWidget(Vector2D ScreenPoint, Widget* Widget, out bool IsPointOverWidget, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector2D CallFunc_GetWidgetBounds_TopLeft, Vector2D CallFunc_GetWidgetBounds_BottomRight, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void BndEvt__BtnWeaponSwap_K2Node_ComponentBoundEvent_4_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__BtnWeaponSwap_K2Node_ComponentBoundEvent_5_OnButtonReleasedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__BtnStore_K2Node_ComponentBoundEvent_12_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__BtnStore_K2Node_ComponentBoundEvent_13_OnButtonReleasedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__BtnScoreboard_K2Node_ComponentBoundEvent_14_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__OpenMapButton_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void ViewTargetChanged(KSPlayerController* Controller, Actor* OldViewTarget, Actor* NewViewTarget);// 0x2cbecb0
	void ShoulderSwapPressed();// 0x2cbecb0
	void ShoulderSwapUpdate(KSCharacter* Character);// 0x2cbecb0
	void HandleEquipmentChange(KSCharacter* EquipmentOwner, KSWeaponComponent* Equipment);// 0x2cbecb0
	void SetWidgetIconTexture(const Widget* Widget, out const SoftObjectPath Texture);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void OnHoveredInteractableChanged(Actor* HoverTarget);// 0x2cbecb0
	void BndEvt__AutoSprintToggleButton_K2Node_ComponentBoundEvent_1_OnButtonPressed__DelegateSignature();// 0x2cbecb0
	void UpdatePickupableItems();// 0x2cbecb0
	void BndEvt__MenuButton_K2Node_ComponentBoundEvent_7_OnClicked__DelegateSignature();// 0x2cbecb0
	void HandleDeathStateChanged();// 0x2cbecb0
	void HandleWeaponChange(KSCharacter* Character);// 0x2cbecb0
	void BndEvt__GadgetCancelButton_K2Node_ComponentBoundEvent_6_OnButtonPressed__DelegateSignature();// 0x2cbecb0
	void BndEvt__GadgetCancelButton_K2Node_ComponentBoundEvent_15_OnReleased__DelegateSignature();// 0x2cbecb0
	void BndEvt__ThrowGrenadeButton_K2Node_ComponentBoundEvent_17_OnReleased__DelegateSignature();// 0x2cbecb0
	void HandleAimStateChanged(enum NewAimMode);// 0x2cbecb0
	void Event Handle Result Received(enum Result);// 0x2cbecb0
	void OnDelayedHUDAnnouncementComponentCreated(KSPlayerController* OwningPlayerController, KSHUDAnnouncementComponent* SpawnedHUDAnnouncementComponent);// 0x2cbecb0
	void ViewChange (FName CurrentRoute, FName PreviousRoute, enum Layer);// 0x2cbecb0
	void OnSprintChanged(bool IsSprinting);// 0x2cbecb0
	void ExecuteUbergraph_GameTouchHUDWidget(int EntryPoint, int Temp_int_Array_Index_Variable, bool CallFunc_IsHovered_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Vector2D Temp_struct_Variable, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetViewTarget_ReturnValue, KSPlayerController* K2Node_CustomEvent_Controller, Actor* K2Node_CustomEvent_OldViewTarget, Actor* K2Node_CustomEvent_NewViewTarget, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSCharacter* K2Node_CustomEvent_Character, Actor* CallFunc_GetViewTarget_ReturnValue, enum CallFunc_GetDesiredCameraShoulder_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSCharacter* K2Node_CustomEvent_EquipmentOwner, KSWeaponComponent* K2Node_CustomEvent_Equipment, const Widget* K2Node_Event_Widget, const SoftObjectPath K2Node_Event_Texture, WBP_KillstreakMeter_C* K2Node_DynamicCast_AsWBP_Killstreak_Meter, bool K2Node_DynamicCast_bSuccess, WBP_TouchButtonGeneric_C* K2Node_DynamicCast_AsWBP_Touch_Button_Generic, bool K2Node_DynamicCast_bSuccess, PUMG_HUD* K2Node_Event_hud, Actor* K2Node_CustomEvent_HoverTarget, KSZipLine* K2Node_DynamicCast_AsKSZip_Line, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsTouchModeAutoSprintActive_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsInputKeyDown_ReturnValue, WBP_Touch_WeaponPickupEntry_C* CallFunc_Create_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, bool CallFunc_WasInputKeyJustReleased_ReturnValue, bool CallFunc_WasInputKeyJustPressed_ReturnValue, bool CallFunc_IsPlatformType_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Array_Identical_ReturnValue, Vector2D CallFunc_Get_Touch_Cursor_Screen_Space_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_DegAtan2_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, Vector2D CallFunc_Add_Vector2DVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, interface classNone K2Node_DynamicCast_AsKSController_Interface, bool K2Node_DynamicCast_bSuccess, KSCharacterBase* CallFunc_GetKSCharacter_ReturnValue, enum Temp_byte_Variable, Vector2D Temp_struct_Variable, Vector2D K2Node_Select_Default, WBP_FireWeapon_TouchButton_C* K2Node_DynamicCast_AsWBP_Fire_Weapon_Touch_Button, bool K2Node_DynamicCast_bSuccess, WBP_FireWeapon_TouchButton_C* K2Node_DynamicCast_AsWBP_Fire_Weapon_Touch_Button, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, KSCharacter* K2Node_CustomEvent_Character, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_NewAimMode, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentAimState_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentAimState_ReturnValue, bool CallFunc_IsPlatformType_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, enum K2Node_CustomEvent_Result, KSHUDAnnouncementComponent* CallFunc_GetHUDAnnouncementComponent_ReturnValue, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_RoundHasEnded_ReturnValue, bool CallFunc_IsValid_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentAimState_ReturnValue, KSPlayerController* K2Node_CustomEvent_OwningPlayerController, KSHUDAnnouncementComponent* K2Node_CustomEvent_SpawnedHUDAnnouncementComponent, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacterBase* Temp_object_Variable, bool CallFunc_BooleanAND_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsDeadOrDestroyed_ReturnValue, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, enum K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_CurrentRoute, FName K2Node_CustomEvent_PreviousRoute, enum K2Node_CustomEvent_Layer, bool CallFunc_NotEqual_NameName_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, enum Temp_byte_Variable, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurrentAimState_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_NotEqual_ByteByte_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool K2Node_CustomEvent_IsSprinting, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Select_Default, bool CallFunc_IsPlatformType_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetSettingAsBool_OutBool, bool CallFunc_GetSettingAsBool_ReturnValue, bool CallFunc_IsSprinting_ReturnValue, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, KSItemDrop* K2Node_DynamicCast_AsKSItem_Drop, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, bool CallFunc_IsInputKeyDown_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSTouchHudWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	bool bAlwaysShowQuickMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	bool bIsInEditMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529, Size: 1]
	KSWeaponAsset_Melee* QuickMeleeWeaponAsset;//[Offset: 0x530, Size: 1]
	Widget* FireButton;//[Offset: 0x538, Size: 1]
	Widget* HipFireButton;//[Offset: 0x540, Size: 1]
	Widget* QuickMeleeButton;//[Offset: 0x548, Size: 1]
	Widget* AbilityButton;//[Offset: 0x550, Size: 1]
	Image* MyAimDownSightsWidget;//[Offset: 0x558, Size: 1]
	Image* MyAutoSprintWidget;//[Offset: 0x560, Size: 1]
	Texture2D* AimDownSightsEnableIcon;//[Offset: 0x568, Size: 1]
	Texture2D* AimDownSightsCancelIcon;//[Offset: 0x570, Size: 1]
	Texture2D* AutoSprintEnableIcon;//[Offset: 0x578, Size: 1]
	Texture2D* AutoSprintCancelIcon;//[Offset: 0x580, Size: 1]
	Widget* ContextualPingButton;//[Offset: 0x588, Size: 1]
	WidgetSwitcher* PrimaryWeaponSwitcher;//[Offset: 0x590, Size: 1]
	void UpdateQuickMeleeRadius();// 0x2967f40
	void UpdatePrimaryWeaponButton();// 0x2967f20
	void UpdateAbilityIcon();// 0x2967f00
	void SetWidgetIconTexture(const Widget* Widget, out const SoftObjectPath Texture);// 0x29679b0

--------------------------------
Class: WBP_FireWeapon_TouchButton_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* BackgroundImage;//[Offset: 0x530, Size: 1]
	Image* DropShadowImage;//[Offset: 0x538, Size: 1]
	Image* IconImage;//[Offset: 0x540, Size: 1]
	InvalidationBox* InvalidationBox;//[Offset: 0x548, Size: 1]
	SizeBox* SizeWrapper;//[Offset: 0x550, Size: 1]
	PUMG_TouchButton* TouchHitTarget;//[Offset: 0x558, Size: 1]
	WBP_HUD_TutorialCursor_C* WBP_HUD_TutorialCursor;//[Offset: 0x560, Size: 1]
	Texture2D* BackgroundTexture;//[Offset: 0x568, Size: 1]
	Texture2D* IconTexture_Hipfire;//[Offset: 0x570, Size: 1]
	Texture2D* IconTexture_ADSFire;//[Offset: 0x578, Size: 1]
	bool TriggerOnPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	bool TriggerOnReleased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x581, Size: 1]
	float Width;//[Offset: 0x584, Size: 1]
	float Height;//[Offset: 0x588, Size: 1]
	MulticastInlineDelegateProperty OnButtonPressed;//[Size: 1]
	float BackgroundTextureAlpha;//[Offset: 0x5a0, Size: 1]
	float IconPadding;//[Offset: 0x5a4, Size: 1]
	Vector2D HitboxSize;//[Offset: 0x5a8, Size: 1]
	bool ADSOnStartFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	bool bIsWeaponScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1, Size: 1]
	Texture2D* DropShadowTexture;//[Offset: 0x5b8, Size: 1]
	bool bIsHipfireOnlyButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0, Size: 1]
	bool bCancelNextRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c1, Size: 1]
	bool IsCurrentlyPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c2, Size: 1]
	void SetHudEditorMode(bool HudEditorMode);// 0x2cbecb0
	void SetIconByFireModeSetting(enum NewLocalVar, KSSettingsDataFactory* CallFunc_GetSettingsDataFactory_SettingsDataFactory, interface classNone CallFunc_GetSettingAsInt_self_CastInput, int CallFunc_GetSettingAsInt_OutInt, bool CallFunc_GetSettingAsInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2cbecb0
	void SetIconTexture(Texture2D* Texture, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void UsesFireOnRelease(KSCharacter* Character, out bool bWillFireOnRelease, KSWeapon* CallFunc_GetActiveWeapon_ReturnValue, KSWeaponComponent* CallFunc_GetWeaponComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void FireOnRelease(KSPlayerController* PlayerController, byte InInputEvent, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2cbecb0
	void Should Auto ADS(out KSCharacter* Character, out bool ShouldADS, enum CallFunc_GetTouchFireMode_ReturnValue, bool CallFunc_UsesFireOnRelease_bWillFireOnRelease, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSWeapon* CallFunc_GetActiveWeapon_ReturnValue, KSWeapon_Build* K2Node_DynamicCast_AsKSWeapon_Build, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent, EventReply CallFunc_Handled_ReturnValue);// 0x2cbecb0
	void TriggerInputAction(byte InInputEvent, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSVehicle_RCCrawler* K2Node_DynamicCast_AsKSVehicle_RCCrawler, bool K2Node_DynamicCast_bSuccess, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_UsesFireOnRelease_bWillFireOnRelease, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void BndEvt__TouchHItTarget_K2Node_ComponentBoundEvent_2_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__TouchHItTarget_K2Node_ComponentBoundEvent_3_OnButtonReleasedEvent__DelegateSignature();// 0x2cbecb0
	void OnInitialized();// 0x2cbecb0
	void ShowTutorial();// 0x2cbecb0
	void HideTutorial();// 0x2cbecb0
	void ExecuteUbergraph_WBP_FireWeapon_TouchButton(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, Margin K2Node_MakeStruct_Margin, OverlaySlot* K2Node_DynamicCast_AsOverlay_Slot, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_MakeStruct_LinearColor, LinearColor K2Node_MakeStruct_LinearColor, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Should_Auto_ADS_ShouldADS, KSWeapon* CallFunc_GetActiveWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSWeaponComponent* CallFunc_GetWeaponComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetTouchFireMode_ReturnValue, bool CallFunc_UsesFireOnRelease_bWillFireOnRelease, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool K2Node_Event_IsDesignTime, bool CallFunc_IsPawnDesiredAimDefault_ReturnValue, bool CallFunc_K2_TimerExistsHandle_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, SettingDelegateStruct K2Node_MakeStruct_SettingDelegateStruct);// 0x2cbecb0
	void OnButtonPressed__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: PUMG_TouchButton.Button.ContentWidget.PanelWidget.Widget.Visual.Object
	bool bIsInHudEditorMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	void SetHudEditorMode(bool bModeSet);// 0xe7fc20

--------------------------------
Class: WBP_HUD_TutorialCursor_C.UserWidget.Widget.Visual.Object
	WBP_Spinning_Arrow_C* WBP_Spinning_Arrow;//[Offset: 0x238, Size: 1]
	WBP_TutorialCursor_C* WBP_TutorialCursor;//[Offset: 0x240, Size: 1]

--------------------------------
Class: WBP_Spinning_Arrow_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* Animating_Arrows;//[Offset: 0x240, Size: 1]
	Image* spinning_arrow;//[Offset: 0x248, Size: 1]
	WBP_AdditiveImage_C* WBP_AdditiveImage;//[Offset: 0x250, Size: 1]
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_Spinning_Arrow(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: WBP_TutorialCursor_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* ArrowAnim;//[Offset: 0x240, Size: 1]
	WBP_AdditiveImage_C* WBP_AdditiveImage;//[Offset: 0x248, Size: 1]
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_TutorialCursor(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: KSWeapon_Build.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	MulticastInlineDelegateProperty OnInvalidBuildPlacementDel;//[Size: 1]
	MulticastInlineDelegateProperty OnValidBuildPlacementDel;//[Size: 1]
	Vector BuildLocationOffset;//[Offset: 0x898, Size: 1]
	float MaxAdjustBuildDistanceHorizontal;//[Offset: 0x8a4, Size: 1]
	float MaxAdjustBuildDistanceVertical;//[Offset: 0x8a8, Size: 1]
	float MaxAdjustBuildDistanceOffGround;//[Offset: 0x8ac, Size: 1]
	KSBuildPreview* BuildPreviewActor;//[Offset: 0x8b0, Size: 1]
	enum BuildState;//[Offset: 0x8b8, Size: 1]
	MulticastInlineDelegateProperty OnBuildSpawned;//[Size: 1]
	void OnRep_BuildState();// 0x27b7030
	void GetDesiredBuildLocationAndRotation(out Vector OutLocation, out Rotator OutRotation);// 0x27b6610
	class KSBuildPreview GetBuildPreviewActorClass();// 0x27b64e0
	class KSBuild GetBuildActorClass();// 0x27b64a0

--------------------------------
Class: KSBuildPreview.Actor.Object
	MaterialInterface* ValidBuildMaterial;//[Offset: 0x220, Size: 1]
	MaterialInterface* InvalidBuildMaterial;//[Offset: 0x228, Size: 1]
	BoxComponent* Box;//[Offset: 0x230, Size: 1]
	SkinnableMergedMeshComponent* MeshComponent;//[Offset: 0x238, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x240, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0x248, Size: 1]
	FName[] FullKeywordList;//[Offset: 0x258, Size: 1]
	void UpdateCanBeBuilt(bool bInCanBeBuilt);// 0x26505b0
	KSPlayerState* GetPlayerStateOwner();// 0x2616ad0
	void GetMeshesToIgnore(out MeshComponent*[] MeshesToIgnore);// 0x2cbecb0
	KSCharacter* GetCharacterOwner();// 0x26169e0

--------------------------------
Class: KSBuild.KSLagCompensatedActor.Actor.Object
	float PointDamageMultiplier;//[Offset: 0x290, Size: 1]
	float RadialDamageMultiplier;//[Offset: 0x294, Size: 1]
	float MaxHealth;//[Offset: 0x298, Size: 1]
	float Health;//[Offset: 0x29c, Size: 1]
	float SelfDestructDelay;//[Offset: 0x2a0, Size: 1]
	float KillDestructionDelay;//[Offset: 0x2a4, Size: 1]
	BoxComponent* Box;//[Offset: 0x2b8, Size: 1]
	SkinnableMergedMeshComponent* MeshComponent;//[Offset: 0x2c0, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x2c8, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0x2d0, Size: 1]
	FName[] FullKeywordList;//[Offset: 0x2e0, Size: 1]
	KSNavModifierComponent* KSNavModifierComponent;//[Offset: 0x2f0, Size: 1]
	MulticastInlineDelegateProperty OnBuildComponentDestroyedDel;//[Size: 1]
	KSInteractableComponent* InteractableComponent;//[Offset: 0x308, Size: 1]
	MulticastInlineDelegateProperty OnBuildReclaim;//[Size: 1]
	bool bCanReclaim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	Vector RelativeInteractionPoint;//[Offset: 0x324, Size: 1]
	bool bRestoreWeaponOnReclaim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	KSWeaponAsset_Build* WeaponToRestore;//[Offset: 0x338, Size: 1]
	FText ReclaimItemName;//[Offset: 0x340, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x358, Size: 1]
	int OriginalOwnerId;//[Offset: 0x368, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x370, Size: 1]
	void YieldToRealTimerExpired();// 0x2650640
	void SelfDestructAfterDelay();// 0x2650040
	void SelfDestruct();// 0x1efdc20
	void OnSelfDestructDelayStart();// 0x2cbecb0
	void OnSelfDestruct();// 0x2cbecb0
	void OnRep_Health();// 0x264fcc0
	void OnRadialDamageTaken(const DamageType* DamageType);// 0x2cbecb0
	void OnPointDamageTaken(const DamageType* DamageType, PrimitiveComponent* PrimitiveComponent, FName HitBone);// 0x2cbecb0
	void OnKilled();// 0x2cbecb0
	void OnHealthChanged();// 0x2cbecb0
	void OnBuildComponentDestroyed(PrimitiveComponent* PrimitiveComponent);// 0x2cbecb0
	void KillDestructionTimerComplete();// 0x264f950
	KSWeaponAsset* GetWeaponAsset();// 0x264f760
	float GetRealActorTakeoverDelay();// 0x264f720
	KSPlayerState* GetPlayerStateOwner();// 0x2616ad0
	void GetOutlineableMeshes(out PrimitiveComponent*[] OutMeshes);// 0x2cbecb0
	float GetMaxHealth();// 0x264f6e0
	KSCharacter* GetCharacterOwner();// 0x26169e0
	KSWeaponAsset_Build* GetBuildWeaponAsset();// 0x264f430
	void DestroyBuildComponent(PrimitiveComponent* PrimitiveComponent);// 0x264f390
	float ComponentTakeDamage(PrimitiveComponent* PrimitiveComponent, float DamageAmount);// 0x264f2c0
	void BroadcastSelfDestructStart();// 0x1ef2620
	void BroadcastSelfDestruct();// 0xcf5d30
	void BroadcastDestroyBuildComponent(PrimitiveComponent* PrimitiveComponent);// 0x264f150

--------------------------------
Class: KSWeaponAsset_Build.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSBuild* SoftBuildActorClass;//[Offset: 0x9c8, Size: 1]
	class KSBuildPreview* SoftBuildPreviewActorClass;//[Offset: 0x9f0, Size: 1]
	float BuildActivationDelay;//[Offset: 0xa18, Size: 1]
	class KSBuildPreview GetSoftBuildPreviewActorClass();// 0x27c6f60
	class KSBuild GetSoftBuildActorClass();// 0x27c6d40
	float GetBuildActivationDelay();// 0x27c6630

--------------------------------
Class: KSVehicle_RCCrawler.KSRemoteControlledVehicle.KSVehicleBase.KSCharacterFoundation.Character.Pawn.Actor.Object

--------------------------------
Class: KSRemoteControlledVehicle.KSVehicleBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	bool bDurationHasEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf20, Size: 1]

--------------------------------
Class: WBP_KillstreakMeter_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* ActivationCastLoop;//[Offset: 0x530, Size: 1]
	WidgetAnimation* SetCannotFireNow;//[Offset: 0x538, Size: 1]
	WidgetAnimation* Ready;//[Offset: 0x540, Size: 1]
	WidgetAnimation* Activate;//[Offset: 0x548, Size: 1]
	WidgetAnimation* ShowFraction;//[Offset: 0x550, Size: 1]
	CanvasPanel* BrightIconClippingCanvas;//[Offset: 0x558, Size: 1]
	TextBlock* ChargeRequiredDisplay;//[Offset: 0x560, Size: 1]
	TextBlock* CurrentChargeDisplay;//[Offset: 0x568, Size: 1]
	CanvasPanel* DarkIconClippingCanvas;//[Offset: 0x570, Size: 1]
	Image* EdgeStroke_Glow;//[Offset: 0x578, Size: 1]
	Image* Image;//[Offset: 0x580, Size: 1]
	Image* JammedEffect;//[Offset: 0x588, Size: 1]
	Overlay* JammedWrapper;//[Offset: 0x590, Size: 1]
	WBP_AsyncIcon_C* KSIconImage;//[Offset: 0x598, Size: 1]
	WBP_AsyncIcon_C* KSIconImageDark;//[Offset: 0x5a0, Size: 1]
	TextBlock* QuantityText;//[Offset: 0x5a8, Size: 1]
	Image* ReadyFlare_01;//[Offset: 0x5b0, Size: 1]
	Image* ReadyGlow_01;//[Offset: 0x5b8, Size: 1]
	Image* ReadyGradient_01;//[Offset: 0x5c0, Size: 1]
	Image* ReadyShockwave_01;//[Offset: 0x5c8, Size: 1]
	Image* ReadyShockwave_02;//[Offset: 0x5d0, Size: 1]
	Image* ScanLines;//[Offset: 0x5d8, Size: 1]
	Image* ScanlinesStroke;//[Offset: 0x5e0, Size: 1]
	VerticalBox* ScoreFraction;//[Offset: 0x5e8, Size: 1]
	Image* Shine;//[Offset: 0x5f0, Size: 1]
	InvalidationBox* SlotBase;//[Offset: 0x5f8, Size: 1]
	Image* SlotFill;//[Offset: 0x600, Size: 1]
	Image* SlotTexture;//[Offset: 0x608, Size: 1]
	WBP_InputCallout_C* WBP_InputCallout;//[Offset: 0x610, Size: 1]
	KSModInst_Activated* KSModInstActivated;//[Offset: 0x618, Size: 1]
	MaterialInstanceDynamic* MeterFillMat;//[Offset: 0x620, Size: 1]
	int MeterNumber;//[Offset: 0x628, Size: 1]
	KSPlayerState* KSPlayerState;//[Offset: 0x630, Size: 1]
	MaterialInstanceDynamic* KillstreakActiveMat;//[Offset: 0x638, Size: 1]
	MaterialInstanceDynamic* CircleGlowMat;//[Offset: 0x640, Size: 1]
	MaterialInstanceDynamic* KillstreakActiveIntroMat;//[Offset: 0x648, Size: 1]
	MaterialInstanceDynamic* LensFlareMat;//[Offset: 0x650, Size: 1]
	bool Player Is Downed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	bool IsMeterActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x659, Size: 1]
	int ChargeDisplayThreshold;//[Offset: 0x65c, Size: 1]
	MaterialInstanceDynamic* LockMat;//[Offset: 0x660, Size: 1]
	bool IsLockTimerActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	float LockedTime;//[Offset: 0x66c, Size: 1]
	float MaxLockTime;//[Offset: 0x670, Size: 1]
	FName[] ActionsName;//[Offset: 0x678, Size: 1]
	bool Currently Jammed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	LinearColor BaseColor;//[Offset: 0x68c, Size: 1]
	LinearColor Activation;//[Offset: 0x69c, Size: 1]
	bool IsActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 1]
	bool bCannotFireNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ad, Size: 1]
	BP_AbilityIconAnimationHelper_C* AbilityAnimationHelper;//[Offset: 0x6b0, Size: 1]
	void SetScrambleTexture(interface classNone K2Node_DynamicCast_AsKSHUDInterface, bool K2Node_DynamicCast_bSuccess, MultiSkinObject* CallFunc_GetSkinObject_ReturnValue, int CallFunc_GetMaterialInterface_Priority, MaterialInterface* CallFunc_GetMaterialInterface_ReturnValue);// 0x2cbecb0
	void UnbindChanges(bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void UpdateDisplay(FText QuantityText, int CurrentCharge, int RequiredCharge, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x2cbecb0
	void TurnOffMeter(bool IsOn, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void TurnOnMeter(bool IsOn, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void SetActionNames(FName KeyBoardAction, FName GamepadAction, FName MobileAction);// 0x2cbecb0
	void Get Current Cannot Fire Now(out bool CurrentCannotFireNow);// 0x2cbecb0
	void PlayActivationEvent(const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const AkExternalSourceInfo[] Temp_struct_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void Set Jammed(bool IsJammed, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, float Temp_float_Variable, enum K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, bool CallFunc_IsValid_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool Temp_bool_Variable, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, enum K2Node_Select_Default, float Temp_float_Variable, float K2Node_Select_Default, KSPlayerMod_Activated* CallFunc_GetDisplayActivatedModAsset_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, Object* CallFunc_Conv_SoftObjPathToSoftObjRef_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, Texture2D* K2Node_DynamicCast_AsTexture_2D, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void UpdateLockTimer(float DeltaTime);// 0x2cbecb0
	void IsReadyToActivate(out bool Return Value, bool Temp_bool_Variable, bool CallFunc_CanActivateWhileDowned_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_Select_Default);// 0x2cbecb0
	void Stop Ready Animations(MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Start Ready Animations(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void SetFillValue(float FillValue, float Temp_float_Variable, float CallFunc_Multiply_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, Margin K2Node_MakeStruct_Margin, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float Temp_float_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, bool CallFunc_IsValid_ReturnValue, float CallFunc_FClamp_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x2cbecb0
	void CheckForFullCharge();// 0x2cbecb0
	void SetupBasicDisplay(KSPlayerMod_Activated* CallFunc_GetDisplayActivatedModAsset_ReturnValue, int CallFunc_GetRequiredCharge_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x2cbecb0
	void Play Ability Ready Sound();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void HandleIntroAnimFinish();// 0x2cbecb0
	void HandlePulseAnimFinished();// 0x2cbecb0
	void Update Player Downed(bool IsDowned);// 0x2cbecb0
	void ReevaluateButtonPrompts();// 0x2cbecb0
	void OnSetCannotFireNow(bool CannotFire);// 0x2cbecb0
	void BindAbilityAnimationHelperDelegates();// 0x2cbecb0
	void PostFlashTrapActivated(Texture2D* NewIcon);// 0x2cbecb0
	void ExecuteUbergraph_WBP_KillstreakMeter(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, enum Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum Temp_byte_Variable, enum K2Node_Select_Default, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, int CallFunc_PostEvent_ReturnValue, Actor* CallFunc_GetViewTarget_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue, bool CallFunc_IsValid_ReturnValue, PUMG_HUD* K2Node_Event_hud, bool Temp_bool_Variable, byte CallFunc_GetCurrentInputState_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_IsDowned, bool K2Node_CustomEvent_CannotFire, UMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, byte Temp_byte_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Texture2D* K2Node_CustomEvent_NewIcon, BP_AbilityIconAnimationHelper_C* CallFunc_SpawnObject_ReturnValue, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0

--------------------------------
Class: BP_AbilityIconAnimationHelper_C.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x28, Size: 1]
	int CurrentCharge;//[Offset: 0x30, Size: 1]
	int RequiredCharge;//[Offset: 0x34, Size: 1]
	int ChargeDisplayThreshold;//[Offset: 0x38, Size: 1]
	bool IsMeterOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	LinearColor Activation;//[Offset: 0x40, Size: 1]
	LinearColor BaseColor;//[Offset: 0x50, Size: 1]
	MulticastInlineDelegateProperty TurnOnMeter;//[Size: 1]
	MulticastInlineDelegateProperty TurnOffMeter;//[Size: 1]
	MulticastInlineDelegateProperty UpdateDisplay;//[Size: 1]
	MulticastInlineDelegateProperty SetupBasicDisplay;//[Size: 1]
	KSPlayerState* KSPlayerState;//[Offset: 0xa0, Size: 1]
	KSModInst_Activated* KSModInstActivated;//[Offset: 0xa8, Size: 1]
	MulticastInlineDelegateProperty PostFlashTrapActivated;//[Size: 1]
	float PreviousChargeValue;//[Offset: 0xc0, Size: 1]
	float TargetChargeValue;//[Offset: 0xc4, Size: 1]
	float CurrentChargeTweenValue;//[Offset: 0xc8, Size: 1]
	MulticastInlineDelegateProperty SetFillValue;//[Size: 1]
	float AnimateInterpSpeed;//[Offset: 0xe0, Size: 1]
	PUMG_HUD* MyHud;//[Offset: 0xe8, Size: 1]
	void TrySetupBasicDisplay(KSPlayerMod_Activated* CallFunc_GetDisplayActivatedModAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void UpdateFillMeterDisplay(int CurrentCharge, int RequiredCharge, float Temp_float_Variable, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool Temp_bool_Variable, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_FMin_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x2cbecb0
	void UnbindChanges(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void BindToChanges(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void CheckForFullCharge(KSModInst_Activated* KSModInstActivated, KSPlayerState* CallFunc_GetPlayerStateOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsDowned_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_CanActivateWhileDowned_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue);// 0x2cbecb0
	void UpdateCharge(KSModInst_Activated* KSModInstActivated, FText Quantity Text, int CallFunc_GetRequiredCharge_ReturnValue, KSPlayerMod_Activated* CallFunc_GetActivatedModAsset_ReturnValue, int CallFunc_GetRequiredCharge_ReturnValue, int CallFunc_GetCurrentCharge_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_GetRequiredCharge_ReturnValue);// 0x2cbecb0
	void HandleModChargeChange(KSModInst_Activated* KSModInstActivated);// 0x2cbecb0
	void HandlePlayerModCharge(KSPlayerMod_Activated* KSPlayerModActivated);// 0x2cbecb0
	void HandleModActivated(bool InBool);// 0x2cbecb0
	void SetupHelper();// 0x2cbecb0
	void Tick();// 0x2cbecb0
	void OpenAnimateMeterGate();// 0x2cbecb0
	void CloseAnimateMeterGate();// 0x2cbecb0
	void OpenRetryBasicDisplay();// 0x2cbecb0
	void CloseRetryBasicDisplay();// 0x2cbecb0
	void RetryBasicDisplay();// 0x2cbecb0
	void DownStateChange(KSPlayerState* PlayerState);// 0x2cbecb0
	void ExecuteUbergraph_BP_AbilityIconAnimationHelper(int EntryPoint, Texture2D* Temp_object_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool Temp_bool_Has_Been_Initd_Variable, KSModInst_Activated* K2Node_CustomEvent_KSModInstActivated, KSPlayerMod_Activated* K2Node_CustomEvent_KSPlayerModActivated, bool K2Node_CustomEvent_InBool, KSPlayerMod_Activated* CallFunc_GetActivatedModAsset_ReturnValue, FlashTrapModInst_C* K2Node_DynamicCast_AsFlash_Trap_Mod_Inst, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool Temp_bool_IsClosed_Variable, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, float CallFunc_Lerp_ReturnValue, Texture2D* Temp_object_Variable, Texture2D* K2Node_Select_Default, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSPlayerState* K2Node_CustomEvent_PlayerState);// 0x2cbecb0
	void SetFillValue__DelegateSignature(float SetFillValue);// 0x2cbecb0
	void PostFlashTrapActivated__DelegateSignature(Texture2D* NewIcon);// 0x2cbecb0
	void SetupBasicDisplay__DelegateSignature();// 0x2cbecb0
	void UpdateDisplay__DelegateSignature(FText QuantityText, int CurrentCharge, int RequiredCharge);// 0x2cbecb0
	void TurnOffMeter__DelegateSignature(bool IsOn);// 0x2cbecb0
	void TurnOnMeter__DelegateSignature(bool IsOn);// 0x2cbecb0

--------------------------------
Class: FlashTrapModInst_C.KSModInst_GiveWeaponOnActivation.KSModInst_GiveItemOnActivation.KSModInst_Activated.KSPlayerModInstance.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x530, Size: 1]
	bool HasDetonator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	bool IsInActivatableState(out enum OutAbilityFailureType, enum CallFunc_IsInActivatableState_OutAbilityFailureType, bool CallFunc_IsInActivatableState_ReturnValue, KSWeapon_RemoteThrow* K2Node_DynamicCast_AsKSWeapon_Remote_Throw, bool K2Node_DynamicCast_bSuccess, KSProjectile_RemoteTrigger*[] CallFunc_GetAttachedCharges_OutCharges, int CallFunc_Array_Length_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void OnNewGivenItem();// 0x2cbecb0
	void OnWeaponStateChanged(const KSWeapon* Weapon, enum OldState, enum NewState);// 0x2cbecb0
	void BeginActivation();// 0x2cbecb0
	void OnGrenadeSpawned(KSProjectile_Grenade* Grenade);// 0x2cbecb0
	void OnGrenadeDestroyed(Actor* DestroyedActor);// 0x2cbecb0
	void Init_RemoteThrow(KSWeapon_RemoteThrow* RemoteThrow);// 0x2cbecb0
	void Init_Detonator(KSWeapon_RemoteTrigger* Detonator);// 0x2cbecb0
	void On Detonator Spawned(KSWeapon_RemoteTrigger* Detonator);// 0x2cbecb0
	void On Remote Throw Spawned(KSWeapon_RemoteThrow* RemoteThrow);// 0x2cbecb0
	void FiredOnAuthority();// 0x2cbecb0
	void On Reclaimed(KSProjectile* Reclaimed);// 0x2cbecb0
	void OnAbilityReleased();// 0x2cbecb0
	void OnNewCharacterFoundation();// 0x2cbecb0
	void On Character Died(const KSCharacterFoundation* KillerCharacter, const KSCharacterFoundation* KilledCharacter);// 0x2cbecb0
	void ExecuteUbergraph_FlashTrapModInst(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSWeapon_RemoteThrow* K2Node_DynamicCast_AsKSWeapon_Remote_Throw, bool K2Node_DynamicCast_bSuccess, const KSWeapon* K2Node_Event_Weapon, enum K2Node_Event_OldState, enum K2Node_Event_NewState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSWeapon_RemoteThrow* K2Node_DynamicCast_AsKSWeapon_Remote_Throw, bool K2Node_DynamicCast_bSuccess, KSProjectile_Grenade* K2Node_CustomEvent_Grenade, KSProjectile_RemoteTrigger* K2Node_DynamicCast_AsKSProjectile_Remote_Trigger, bool K2Node_DynamicCast_bSuccess, bool CallFunc_TryToCancel_ReturnValue, Actor* K2Node_CustomEvent_DestroyedActor, bool CallFunc_TryToCancel_ReturnValue, KSWeapon_RemoteThrow* K2Node_CustomEvent_RemoteThrow, KSWeapon* K2Node_DynamicCast_AsKSWeapon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_StartFire_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, KSWeapon_RemoteTrigger* K2Node_CustomEvent_Detonator, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, KSWeapon_RemoteTrigger* K2Node_CustomEvent_Detonator, KSWeapon_RemoteThrow* K2Node_CustomEvent_RemoteThrow, KSWeapon_RemoteTrigger* K2Node_DynamicCast_AsKSWeapon_Remote_Trigger, bool K2Node_DynamicCast_bSuccess, KSProjectile_RemoteTrigger*[] CallFunc_GetAttachedCharges_OutCharges, bool CallFunc_TryToCancel_ReturnValue, KSProjectile_RemoteTrigger* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsDetonatable_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_TryToCancel_ReturnValue, int Temp_int_Loop_Counter_Variable, KSWeapon_RemoteThrow* K2Node_DynamicCast_AsKSWeapon_Remote_Throw, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, KSProjectile* K2Node_CustomEvent_Reclaimed, KSPlayerMod* CallFunc_GetModAsset_ReturnValue, KSPlayerMod_GiveWeaponConfig* K2Node_DynamicCast_AsKSPlayer_Mod_Give_Weapon_Config, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetReclaimCharge_ReturnValue, KSWeapon* K2Node_DynamicCast_AsKSWeapon, bool K2Node_DynamicCast_bSuccess, KSCharacter* CallFunc_GetCharacterOwner_ReturnValue, const KSCharacterFoundation* K2Node_CustomEvent_KillerCharacter, const KSCharacterFoundation* K2Node_CustomEvent_KilledCharacter, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSModInst_GiveWeaponOnActivation.KSModInst_GiveItemOnActivation.KSModInst_Activated.KSPlayerModInstance.ActorComponent.Object
	bool bActivatesOnIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	bool bActivatesOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 1]
	bool bRestrictSwapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	bool bSwapToMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c1, Size: 1]
	bool bConsiderAsSwapToPrevious;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c2, Size: 1]
	bool bEndActivationOnHolster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bEndActivationOnEmptyClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	bool bEndActivationOnExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 1]
	bool bConsumeChargeWhenItemRemoved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4eb, Size: 1]
	bool bConsumeChargeWhenFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	bool bConsumeChargeWhenAmmoConsumed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 1]
	bool bReplenishesAmmoOnFullyCharged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ee, Size: 1]
	bool bReplenishesAmmoOnDurationIncreased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ef, Size: 1]
	bool bShouldBroadcastWeaponHits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	TimerHandle SwapFromRetryTimer;//[Offset: 0x4f8, Size: 1]
	float SwapFromRetryTime;//[Offset: 0x500, Size: 1]
	bool bSwappingOff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	MulticastInlineDelegateProperty OnDeployableActorsCountChanged;//[Size: 1]
	Actor*[] DeployableActors;//[Offset: 0x518, Size: 1]
	int DeployableActorsCount;//[Offset: 0x528, Size: 1]
	void WeaponAmmoConsumed(const KSWeapon* Weapon, int AmmoConsumed);// 0x2704c40
	void UpdateDeployableActorsCount();// 0x2704c20
	bool TryToSwapBackToWeapon();// 0x2704bf0
	void SwapFromRetry();// 0x2704aa0
	void RegisterDeployable(Actor* DeployableAsActor);// 0x2704980
	void ReflectChargeAmmo();// 0x2704960
	void PrepareSwapTo(KSWeapon* SwapToWeapon);// 0x27048d0
	void OnWeaponStateChanged(const KSWeapon* Weapon, enum OldState, enum NewState);// 0x27047d0
	void OnRep_DeployableActorsCount();// 0x2704700
	void OnGivenWeaponInstigatedDamage(KSCharacterBase* InPawn, out const CombatEventInfo DamageInfo);// 0x2704550
	void OnDeployableDestroyed(Actor* DestroyedDeployableActor);// 0x27043d0
	void HandleWeaponExhausted(const KSWeapon* Weapon);// 0x2704150
	void GivenWeaponInstigatedDamage(KSCharacterBase* InPawn, out const CombatEventInfo DamageInfo);// 0x2703d70
	int GetDeployableActorsCount();// 0x27039d0
	bool EndsActivationOnHolster();// 0x2703990
	bool EndsActivationOnExhausted();// 0x2703970
	bool EndsActivationOnEmptyClip();// 0x2703950
	void BroadcastGivenWeaponInstigatedDamage(KSCharacterBase* InPawn, const CombatEventInfo DamageInfo);// 0x2703500

--------------------------------
Class: KSModInst_GiveItemOnActivation.KSModInst_Activated.KSPlayerModInstance.ActorComponent.Object
	bool bGiveItemOnNewCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	delegate AsyncItemGiveDelegate;//[Offset: 0x494, Size: 1]
	Object* GivenItem;//[Offset: 0x4a8, Size: 1]
	void TryToRemoveItem();// 0x2704b40
	void TryToGiveItem(int Index);// 0x2704ac0
	void OnRep_GivenItem();// 0x2704740
	void OnNewGivenItem();// 0x1ef4110
	void OnItemRemoved();// 0x2cbecb0
	int GetOnNewCharacterItemIndex();// 0x2703aa0
	void AsyncItemGiveComplete(KSItem* Item, Object* GivenObject, GiveItemParameters InGiveItemParameters, bool bSuccess);// 0x2703340

--------------------------------
Class: KSWeapon_RemoteThrow.KSWeapon_GrenadeThrow.KSWeapon_Projectile.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	MulticastInlineDelegateProperty OnDetonatorEquipped;//[Size: 1]
	KSWeaponAsset* DetonatorAsset;//[Offset: 0x8a8, Size: 1]
	bool ReadyForDetonator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	void SwapToDetonator();// 0x27c0dc0
	void OnProjectileReleased();// 0x1f2ba30
	void OnAttachedChargeDestroyed(Actor* DestroyedCharge);// 0x27c0730
	void GetAttachedCharges(out KSProjectile_RemoteTrigger*[] OutCharges);// 0x27be5d0

--------------------------------
Class: KSWeapon_GrenadeThrow.KSWeapon_Projectile.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	MulticastInlineDelegateProperty OnGrenadeThrown;//[Size: 1]
	void OnFuseTimerExpired(float MinHandRemainingFuse);// 0x27b6e80
	void DoFumble();// 0x1f2b450

--------------------------------
Class: KSWeapon_Projectile.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	void OnFullyCooked();// 0xd76f80
	FName GetProjectileInfoKey();// 0x27b68c0

--------------------------------
Class: KSProjectile_RemoteTrigger.KSProjectile_Grenade.KSProjectile.KSLagCompensatedActor.Actor.Object
	bool CanDetonateNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa18, Size: 1]
	bool bCanDetonateBeforeStopping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa19, Size: 1]
	KSPlayerMod* DetectionMod;//[Offset: 0xa20, Size: 1]
	bool bRequiresMatchingDetonator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	Vector RelativeInteractionPoint;//[Offset: 0xa34, Size: 1]
	bool DetectedEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa41, Size: 1]
	void ReportOwningClientLoaded();// 0x2772960
	void OnRealActorStopped(KSProjectile_RemoteTrigger* RealProjectile);// 0x27721e0
	bool IsDetonatable();// 0x2772140

--------------------------------
Class: KSWeapon_RemoteTrigger.KSWeapon.KSEquipment.Info.Actor.Object
	MulticastInlineDelegateProperty OnRemoteThrowEquipped;//[Size: 1]
	KSProjectile_RemoteTrigger*[] AttachedCharges;//[Offset: 0x750, Size: 1]
	float MaxDetonationRange;//[Offset: 0x760, Size: 1]
	MulticastInlineDelegateProperty OnDetonationReady;//[Size: 1]
	KSWeaponAsset* RemoteThrowAsset;//[Offset: 0x788, Size: 1]
	void SwapOffDetonator();// 0x27c0da0
	void OnAttachedChargeKilled(KSProjectile* KilledProjectile);// 0x27c0840
	void OnAttachedChargeDestroyed(Actor* DestroyedCharge);// 0x27c07c0
	void GetAttachedCharges(out KSProjectile_RemoteTrigger*[] OutCharges);// 0x27be6d0
	void Detonate();// 0x27be110

--------------------------------
Class: KSPlayerMod_GiveWeaponConfig.KSPlayerMod_GiveItemOnActivation.KSPlayerMod_Activated.KSPlayerMod.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	float Radius;//[Offset: 0x460, Size: 1]
	bool bCanActivateInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	float ReclaimCharge;//[Offset: 0x468, Size: 1]
	int AllowedActiveDeployableCount;//[Offset: 0x46c, Size: 1]
	float GetReclaimCharge();// 0x2742780
	float GetRadius();// 0x2742760
	int GetAllowedActiveDeployableCount();// 0x27424a0
	bool CanActivateInAir();// 0x2742480

--------------------------------
Class: KSPlayerMod_GiveItemOnActivation.KSPlayerMod_Activated.KSPlayerMod.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSItem* GivenItem;//[Offset: 0x428, Size: 1]
	KSItem*[] GivenItems;//[Offset: 0x450, Size: 1]
	KSItem* GetGivenItem(int Index);// 0x27425c0

--------------------------------
Class: WBP_TouchButtonGeneric_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* AnimOnShown;//[Offset: 0x240, Size: 1]
	WidgetAnimation* AnimReady;//[Offset: 0x248, Size: 1]
	Image* AbilityReady;//[Offset: 0x250, Size: 1]
	ScaleBox* AbilityReadyScaleBox;//[Offset: 0x258, Size: 1]
	SizeBox* AbilityReadySizeBox;//[Offset: 0x260, Size: 1]
	Image* BackgroundImage;//[Offset: 0x268, Size: 1]
	TextBlock* ChargePercentDisplay;//[Offset: 0x270, Size: 1]
	Image* Cooldown;//[Offset: 0x278, Size: 1]
	Image* DropShadowImage;//[Offset: 0x280, Size: 1]
	PUMG_TouchButton* HitTarget;//[Offset: 0x288, Size: 1]
	Image* IconImage;//[Offset: 0x290, Size: 1]
	InvalidationBox* InvalidationBox;//[Offset: 0x298, Size: 1]
	Image* ReadyFlare_01;//[Offset: 0x2a0, Size: 1]
	Image* ReadyGlow_01;//[Offset: 0x2a8, Size: 1]
	Image* ReadyGradient_01;//[Offset: 0x2b0, Size: 1]
	Image* ReadyShockwave_01;//[Offset: 0x2b8, Size: 1]
	Image* ReadyShockwave_02;//[Offset: 0x2c0, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x2c8, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x2d0, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x2d8, Size: 1]
	SizeBox* SizeBox_TutorialCallout;//[Offset: 0x2e0, Size: 1]
	SizeBox* SizeWrapper;//[Offset: 0x2e8, Size: 1]
	WBP_HUD_TutorialCursor_C* WBP_HUD_TutorialCursor;//[Offset: 0x2f0, Size: 1]
	Texture2D* BackgroundTexture;//[Offset: 0x2f8, Size: 1]
	Texture2D* IconTexture;//[Offset: 0x300, Size: 1]
	FName ActionName;//[Offset: 0x308, Size: 1]
	bool TriggerOnPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	bool TriggerOnReleased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x311, Size: 1]
	float Width;//[Offset: 0x314, Size: 1]
	float Height;//[Offset: 0x318, Size: 1]
	MulticastInlineDelegateProperty OnButtonPressed;//[Size: 1]
	float BackgroundTextureAlpha;//[Offset: 0x330, Size: 1]
	float IconPadding;//[Offset: 0x334, Size: 1]
	Vector2D HitboxSize;//[Offset: 0x338, Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	Texture2D* DropShadowTexture;//[Offset: 0x360, Size: 1]
	bool bIsGoldButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	void Play Show Anim(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void SetHudEditorMode(bool HudEditorMode);// 0x2cbecb0
	void SetIconTexture(Texture2D* IconTexture, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void RenderPressed(LinearColor K2Node_MakeStruct_LinearColor);// 0x2cbecb0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent, EventReply CallFunc_Handled_ReturnValue);// 0x2cbecb0
	void TriggerInputAction(byte InInputEvent, PlayerController* CallFunc_GetPlayerController_ReturnValue, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void SimulateOnPressed();// 0x2cbecb0
	void SimulateOnReleased();// 0x2cbecb0
	void ShowTutorial();// 0x2cbecb0
	void HideTutorial();// 0x2cbecb0
	void ExecuteUbergraph_WBP_TouchButtonGeneric(int EntryPoint, Margin K2Node_MakeStruct_Margin, OverlaySlot* K2Node_DynamicCast_AsOverlay_Slot, bool K2Node_DynamicCast_bSuccess, LinearColor K2Node_MakeStruct_LinearColor, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool K2Node_Event_IsDesignTime, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void OnClicked__DelegateSignature();// 0x2cbecb0
	void OnReleased__DelegateSignature();// 0x2cbecb0
	void OnButtonPressed__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: WBP_GadgetTouchButton_C.WBP_TouchButtonGeneric_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x370, Size: 1]
	bool CanUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	void UpdateCanUse(bool CanUse, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void HandleOnCurrentChargeChanged(const KSWeaponComponent* WeaponComponent, float NewCharge, float ChargeProgress, float CallFunc_GetCooldownTimeRemaining_ReturnValue, float CallFunc_GetRequiredCharge_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, int CallFunc_SelectInt_ReturnValue, int CallFunc_SelectInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, FText CallFunc_Conv_FloatToText_ReturnValue, float CallFunc_Fraction_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Update Grenade Icon(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSWeaponComponent* CallFunc_GetWeaponComponentForEquipPoint_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue);// 0x2cbecb0
	void Equipment Removed(KSCharacter* EquipmentOwner, KSWeaponComponent* Equipment, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Equipment Added(KSCharacter* EquipmentOwner, KSWeaponComponent* Equipment, float CallFunc_GetCurrentCharge_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_IsGadget_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void Bind Equipment Changed Delegates(KSPlayerController* Controller, Actor* OldViewTarget, Actor* NewViewTarget, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, int CallFunc_Add_IntInt_ReturnValue, interface classNone CallFunc_GetAllWeaponComponents_Target_CastInput, KSWeaponComponent*[] CallFunc_GetAllWeaponComponents_OutWeaponComponents, KSWeaponComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, interface classNone CallFunc_GetAllWeaponComponents_Target_CastInput, KSWeaponComponent*[] CallFunc_GetAllWeaponComponents_OutWeaponComponents, delegate K2Node_CreateDelegate_OutputDelegate, KSWeaponComponent* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void InitializeWidget(delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetViewTarget_ReturnValue);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_GadgetTouchButton(int EntryPoint, bool K2Node_Event_IsDesignTime, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_BombTouchButton_C.KSViewedPawnInventoryWidget.KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5f0, Size: 1]
	Image* FillBG;//[Offset: 0x5f8, Size: 1]
	Image* ProgressFill;//[Offset: 0x600, Size: 1]
	Overlay* ProgressWrapper;//[Offset: 0x608, Size: 1]
	WBP_TouchButtonGeneric_C* WBP_TouchButtonGeneric;//[Offset: 0x610, Size: 1]
	bool Is Bomb Equipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	bool Is Bomb In Inventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x619, Size: 1]
	bool Can Arm Bomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61a, Size: 1]
	bool Is Interacting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61b, Size: 1]
	KSWeaponComponent* Current Tracked Bomb Equipment;//[Offset: 0x620, Size: 1]
	KSWeaponAsset*[] BombAssets;//[Offset: 0x628, Size: 1]
	bool CanPawnUseBomb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638, Size: 1]
	float DurationMax;//[Offset: 0x63c, Size: 1]
	float DurationAlpha;//[Offset: 0x640, Size: 1]
	bool TouchButtonDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	bool IsBombFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void EquipmentAdded(KSWeaponComponent* AddedEquipment);// 0x2cbecb0
	void EquipmentRemoved(KSWeaponComponent* RemovedEquipment);// 0x2cbecb0
	void Update Prompt();// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void Handle Interact Start(Actor* Target, float Duration);// 0x2cbecb0
	void Handle Interact End();// 0x2cbecb0
	void Handle Bomb Hidden Interactable Update(Actor* Interactable);// 0x2cbecb0
	void Handle Tracked Bomb Active Changed(KSCharacter* EquipmentOwner, KSWeaponComponent* Equipment);// 0x2cbecb0
	void OnRoundOver(KSGameState* GameState, out const RoundResult RoundResult);// 0x2cbecb0
	void Clear Current Tracked Bomb(bool bSkipPromptUpdate);// 0x2cbecb0
	void BndEvt__WBP_TouchButtonGeneric_K2Node_ComponentBoundEvent_0_OnButtonPressed__DelegateSignature();// 0x2cbecb0
	void BndEvt__WBP_TouchButtonGeneric_K2Node_ComponentBoundEvent_1_OnReleased__DelegateSignature();// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void HandleWeaponStateChanged(const KSWeapon* Weapon, enum OldState, enum NewState);// 0x2cbecb0
	void ExecuteUbergraph_WBP_BombTouchButton(int EntryPoint, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* K2Node_CustomEvent_Target, float K2Node_CustomEvent_Duration, delegate K2Node_CreateDelegate_OutputDelegate, Actor* K2Node_CustomEvent_Interactable, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, KSCharacter* K2Node_CustomEvent_EquipmentOwner, KSWeaponComponent* K2Node_CustomEvent_Equipment, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsPrimaryActiveWeapon_ReturnValue, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* K2Node_CustomEvent_GameState, const RoundResult K2Node_CustomEvent_RoundResult, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, SpectatorPawn* CallFunc_GetSpectatorPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_CustomEvent_bSkipPromptUpdate, bool CallFunc_IsValid_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, KSWeaponComponent* K2Node_Event_RemovedEquipment, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, KSWeaponComponent* K2Node_Event_AddedEquipment, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_NotEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, PUMG_HUD* K2Node_Event_hud, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Array_Contains_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSWeapon* CallFunc_GetWeaponByAsset_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, KSWeapon* CallFunc_GetWeaponByAsset_ReturnValue, Actor* CallFunc_GetHiddenInteractable_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_SafeDivide_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const KSWeapon* K2Node_CustomEvent_Weapon, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, bool K2Node_SwitchEnum_CmpSuccess, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSViewedPawnInventoryWidget.KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PlayerInventorySlot ActiveInventoryItem;//[Offset: 0x5b8, Size: 1]
	void OnUpdatedPawnInventorySlot(PlayerInventorySlot InventorySlot);// 0x296c1f0
	void OnRemovedPawnInventorySlot(PlayerInventorySlot InventorySlot);// 0x296c140
	void OnActivePawnInventorySlot(PlayerInventorySlot InventorySlot);// 0x296c090
	int GetSlotIndex(GameplayTag EquipPoint);// 0x296b8b0

--------------------------------
Class: KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	<KSEquipmentId,KSWeaponComponentWidget*> EquipmentWidgets;//[Offset: 0x548, Size: 1]
	bool RemoveWidgetFor(KSWeaponComponent* InWeaponComponent);// 0x2937a80
	KSWeaponComponentWidget* GetWidgetForWeaponComponent(KSWeaponComponent* InWeaponComponent);// 0x2936d90
	void EquipmentRemoved(KSWeaponComponent* RemovedEquipment);// 0x29363e0
	void EquipmentEndActive(KSWeaponComponent* InactiveEquipment);// 0x2916240
	void EquipmentBecomeActive(KSWeaponComponent* ActiveEquipment);// 0x2936350
	void EquipmentAdded(KSWeaponComponent* AddedEquipment);// 0x29362c0
	KSWeaponComponentWidget* CreateWeaponComponentWidgetFor(Object* WorldContextObject, KSWeaponComponent* InWeaponComponent, class KSWeaponComponentWidget WidgetClass, PlayerController* OwningPlayer);// 0x2936170

--------------------------------
Class: KSWeaponComponentWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	KSWeaponComponent* WeaponComponent;//[Offset: 0x528, Size: 1]
	KSEquipmentId EquipmentId;//[Offset: 0x530, Size: 1]
	void SetOwningWeaponComponent(KSWeaponComponent* InWeaponComponent);// 0x29713a0
	void PreClearWeaponComponent();// 0x29007b0
	void PostSetWeaponComponent();// 0x29205e0
	void OnEndActiveWeaponComponent();// 0x28ff550
	void OnBecomeActiveWeaponComponent();// 0x2916a30
	bool IsWeaponComponentActive();// 0x2970bf0
	KSWeaponComponent* GetWeaponComponent();// 0x29702d0

--------------------------------
Class: PlayerInventorySlot
	int SlotIndex;//[Offset: 0x0, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x8, Size: 1]
	GameplayTag SlotEquipPoint;//[Offset: 0x10, Size: 1]

--------------------------------
Class: WBP_LocalPlayerHealth_Mobile_C.KSPlayerHealthWidgetBase.KSViewedTargetHealthWidget.KSHealthWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5b0, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x5b8, Size: 1]
	WidgetAnimation* LowHealth;//[Offset: 0x5c0, Size: 1]
	Image* ArmorIcon;//[Offset: 0x5c8, Size: 1]
	HorizontalBox* ArmorInfoContainer;//[Offset: 0x5d0, Size: 1]
	TextBlock* ArmorText;//[Offset: 0x5d8, Size: 1]
	BountyDisplayIcon_C* BountyDisplayIcon;//[Offset: 0x5e0, Size: 1]
	SizeBox* HealthbarSizeBox;//[Offset: 0x5e8, Size: 1]
	Image* Image;//[Offset: 0x5f0, Size: 1]
	TextBlock* MaxHealthText;//[Offset: 0x5f8, Size: 1]
	PlayerHealthMeter_C* PlayerHealthMeter;//[Offset: 0x600, Size: 1]
	TextBlock* ResourceValueDigit0;//[Offset: 0x608, Size: 1]
	TextBlock* ResourceValueDigit1;//[Offset: 0x610, Size: 1]
	TextBlock* ResourceValueDigit2;//[Offset: 0x618, Size: 1]
	bool Cached Is Dead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	void UpdateNewArmor(bool CallFunc_LessEqual_IntInt_ReturnValue, enum CallFunc_GetArmorRarityFromMaxDurability_ReturnValue, SlateColor CallFunc_GetSlateColorForRarity_ReturnValue);// 0x2cbecb0
	void Update Armor Number Display(bool IsDowned, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x2cbecb0
	void SetHealthDigits(int HealthValue, int[] CallFunc_GetDigitsFromInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, TextBlock*[] K2Node_MakeArray_Array, int CallFunc_Array_Length_ReturnValue, TextBlock* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void Update Bounty Display(KSCharacter* Character, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue, KSPlayerModManager* CallFunc_GetPlayerModManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerModInstance*[] CallFunc_GetModInstancesByModAsset_OutMods, bool CallFunc_GetModInstancesByModAsset_ReturnValue, KSPlayerModInstance* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetInstanceCount_ReturnValue);// 0x2cbecb0
	void CheckMods(KSPlayerState* ViewedPawnPlayerState, KSPlayerModInstance*[] CallFunc_GetModInstances_OutMods, bool CallFunc_GetModInstances_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, KSPlayerModInstance* CallFunc_Array_Get_Item, class KSPlayerModInstance CallFunc_GetObjectClass_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_ClassIsChildOf_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	void ResetVisbility();// 0x2cbecb0
	void TriggerFadeAnim(bool Temp_bool_Variable, bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, KSCharacterFoundation* CallFunc_GetPawnFoundation_ReturnValue, bool CallFunc_IsDeadOrDestroyed_ReturnValue, bool Temp_bool_Variable, byte K2Node_Select_Default, bool CallFunc_EqualEqual_BoolBool_ReturnValue, float CallFunc_GetStartTime_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_GetAnimationCurrentTime_ReturnValue, float K2Node_Select_Default, bool CallFunc_InRange_FloatFloat_ReturnValue, float K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void View_OnDeathStateChanged();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void OnHealthMeterStateChanged();// 0x2cbecb0
	void SetHealthText();// 0x2cbecb0
	void OnHealthDecreased();// 0x2cbecb0
	void OnModAdded(KSPlayerMod* Mod, KSPlayerModInstance* ModInstance);// 0x2cbecb0
	void OnModRemoved(KSPlayerMod* Mod, KSPlayerModInstance* ModInstance);// 0x2cbecb0
	void PostSetPlayerState();// 0x2cbecb0
	void PreClearPlayerState();// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void OnMaxArmorUpdate();// 0x2cbecb0
	void OnDownStateChanged();// 0x2cbecb0
	void ExecuteUbergraph_WBP_LocalPlayerHealth_Mobile(int EntryPoint, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, KSPlayerMod* K2Node_CustomEvent_Mod, KSPlayerModInstance* K2Node_CustomEvent_ModInstance, KSPlayerMod* K2Node_CustomEvent_Mod, KSPlayerModInstance* K2Node_CustomEvent_ModInstance, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, KSCharacterBase* CallFunc_GetCharacterOwner_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, KSCharacterBase* CallFunc_GetCharacterOwner_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, bool CallFunc_IsValid_ReturnValue, PUMG_HUD* K2Node_Event_hud, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: KSPlayerHealthWidgetBase.KSViewedTargetHealthWidget.KSHealthWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PlayerHealthMeterState CurrentHealthMeterState;//[Offset: 0x578, Size: 1]
	void View_SetResidualPercent(float ResidualPercent);// 0x2cbecb0
	void View_SetResidualMode(bool IsHealing);// 0x2cbecb0
	void View_SetResidualAlpha(float ResidualAlpha);// 0x2cbecb0
	void View_SetHealthTextValue(float HealthValue, float OverhealValue);// 0x2cbecb0
	void View_SetHealthPercent(float HealthPercent);// 0x2cbecb0
	void View_SetHealthMode(bool IsDowned, bool IsOverhealed);// 0x2cbecb0
	void View_PlayDamagePulse();// 0x2cbecb0
	void View_OnDeathStateChanged();// 0x2cbecb0
	void OnMaxArmorUpdate();// 0x2cbecb0
	void OnJobChanged(KSJobItem* Job);// 0x2cbecb0
	void OnHealthMeterStateChanged();// 0x2cbecb0
	void OnHealthDecreased();// 0x2cbecb0
	void OnDownStateChanged();// 0x2cbecb0
	void HandleViewedCharDownedChanged();// 0x293be40
	void HandleJobChanged();// 0x293b0f0
	void HandleDeathStateChanged();// 0x293b0d0

--------------------------------
Class: PlayerHealthMeterState
	int HealthValue;//[Offset: 0x0, Size: 1]
	int MaxHealth;//[Offset: 0x4, Size: 1]
	int MaxHealthBonus;//[Offset: 0x8, Size: 1]
	int ArmorValue;//[Offset: 0xc, Size: 1]
	int MaxArmorValue;//[Offset: 0x10, Size: 1]
	int OverhealValue;//[Offset: 0x14, Size: 1]
	bool IsDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: BountyDisplayIcon_C.PUMG_Widget.UserWidget.Widget.Visual.Object
	HorizontalBox* BountyIconContainer;//[Offset: 0x4c8, Size: 1]
	TextBlock* CrownAmountTextDisplay;//[Offset: 0x4d0, Size: 1]
	WidgetSwitcher* CrownSwitcher;//[Offset: 0x4d8, Size: 1]
	int BountyLevel;//[Offset: 0x4e0, Size: 1]
	void UpdateBountyLevel(int NewBounty, FText Temp_text_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, bool Temp_bool_Variable, FText CallFunc_Format_ReturnValue, FText K2Node_Select_Default, int Temp_int_Variable, bool CallFunc_Less_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, enum K2Node_Select_Default, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0

--------------------------------
Class: PlayerHealthMeter_C.KSPlayerHealthMeterBase.UserWidget.Widget.Visual.Object
	WidgetAnimation* Pulseborder;//[Offset: 0x238, Size: 1]
	WidgetAnimation* DisableImmune;//[Offset: 0x240, Size: 1]
	WidgetAnimation* EnableImmune;//[Offset: 0x248, Size: 1]
	Overlay* ArmorBar;//[Offset: 0x250, Size: 1]
	UserWidget* ArmorBarDividers;//[Offset: 0x258, Size: 1]
	Spacer* ArmorSpacer;//[Offset: 0x260, Size: 1]
	Image* AvailableArmor;//[Offset: 0x268, Size: 1]
	Image* BorderShimmer;//[Offset: 0x270, Size: 1]
	Image* DamagedArmor;//[Offset: 0x278, Size: 1]
	UserWidget* HealthBar;//[Offset: 0x280, Size: 1]
	UserWidget* HealthBarDividers;//[Offset: 0x288, Size: 1]
	Image* Image;//[Offset: 0x290, Size: 1]
	Image* Image;//[Offset: 0x298, Size: 1]
	Image* Image;//[Offset: 0x2a0, Size: 1]
	Image* Image;//[Offset: 0x2a8, Size: 1]
	Overlay* ImmuneOverlay;//[Offset: 0x2b0, Size: 1]
	Image* OutlineBorder;//[Offset: 0x2b8, Size: 1]
	int HealthBarTotal;//[Offset: 0x2c0, Size: 1]
	bool ShouldUseDots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4, Size: 1]
	PlayerHealthMeterState CurrentHealthMeterState;//[Offset: 0x2c8, Size: 1]
	float SegmentPadding;//[Offset: 0x2e4, Size: 1]
	LinearColor ImmuneBorderColor;//[Offset: 0x2e8, Size: 1]
	LinearColor StandardBorderColor;//[Offset: 0x2f8, Size: 1]
	bool bIsEnemyHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool bIsImmune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 1]
	int OneHealthSegmentWidth;//[Offset: 0x30c, Size: 1]
	enum ColorCorrection;//[Offset: 0x310, Size: 1]
	int CachedMaxArmor;//[Offset: 0x314, Size: 1]
	Image* K2Node_CustomEvent_OutlineBorder;//[Offset: 0x318, Size: 1]
	Image* K2Node_CustomEvent_OutlineBorder;//[Offset: 0x320, Size: 1]
	bool K2Node_Event_IsDesignTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	PlayerHealthMeterState K2Node_Event_HealthMeterState;//[Offset: 0x32c, Size: 1]
	void UpdateColorFromEnemyStatus();// 0xe7edf0
	void UpdateColorCorrectionValue(enum bpp__ColorCorrection__pf);// 0x1f1ace0
	void UpdateArmorValues();// 0x1f038e0
	void UpdateArmorRarity();// 0x1f03990
	void Set Up Health Bar Dividers();// 0x1f03260
	void SetImmune(bool bpp__bEnabled__pf, bool bpp__bImmediate__pf);// 0x1f1ac10
	void SetHealthMeterState(PlayerHealthMeterState bpp__HealthMeterState__pf);// 0x1f1ab50
	void SequenceEvent__ENTRYPOINTPlayerHealthMeter(Image* bpp__OutlineBorder__pf);// 0x1f03be0
	void SequenceEvent__ENTRYPOINTPlayerHealthMeter(Image* bpp__OutlineBorder__pf);// 0xe7e7f0
	void PreConstruct(bool bpp__IsDesignTime__pf);// 0x1f1aac0
	void PlayDamagePulse();// 0x1f1aa80
	void OnEnableImmuneParams(Image* bpp__OutlineBorder__pf);// 0x1f1a840
	void OnDisableImmuneParams(Image* bpp__OutlineBorder__pf);// 0x1f04180
	void Construct();// 0x1f03240
	void Apply State();// 0x1f1a6c0

--------------------------------
Class: KSPlayerHealthMeterBase.UserWidget.Widget.Visual.Object
	void SetHealthMeterState(PlayerHealthMeterState HealthMeterState);// 0x2cbecb0
	int GetVisualMissingHealth(out const PlayerHealthMeterState HealthMeterState);// 0x26c3c50
	int GetVisualCurrentHealth(out const PlayerHealthMeterState HealthMeterState);// 0x26c3ba0
	int GetMeterMaximum(out const PlayerHealthMeterState HealthMeterState);// 0x26c37f0

--------------------------------
Class: Spacer.Widget.Visual.Object
	Vector2D Size;//[Offset: 0x110, Size: 1]
	void SetSize(Vector2D InSize);// 0x3b6c8b0

--------------------------------
Class: WBP_Touch_WeaponPickupEntry_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	Button* PickupButton;//[Offset: 0x240, Size: 1]
	Image* WeaponClassIcon;//[Offset: 0x248, Size: 1]
	RichTextBlock* WeaponDisplay_RichText;//[Offset: 0x250, Size: 1]
	TextBlock* WeaponFireModeText;//[Offset: 0x258, Size: 1]
	WBP_AsyncIcon_C* WeaponIcon;//[Offset: 0x260, Size: 1]
	HorizontalBox* WeaponSpecificInfo;//[Offset: 0x268, Size: 1]
	KSItemDrop* Interactable;//[Offset: 0x270, Size: 1]
	void Begin Pickup(Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void InitializeContent(KSItemDrop* Item, KSItem* CallFunc_GetItemAsset_ReturnValue, enum CallFunc_GetInGameRarity_ReturnValue, KSItem* CallFunc_GetItemAsset_ReturnValue, LinearColor CallFunc_GetLinearColorForRarity_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, interface classNone CallFunc_ConstructLootCratePrompt_self_CastInput, FText CallFunc_ConstructLootCratePrompt_OutSuffix, KSWeaponAssetDrop* K2Node_DynamicCast_AsKSWeapon_Asset_Drop, bool K2Node_DynamicCast_bSuccess, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, FText CallFunc_GetWeaponFireModeAsText_FireModeText, Texture2D* CallFunc_GetWeaponClassIcon_Icon, bool CallFunc_IsGun_ReturnValue);// 0x2cbecb0
	void BndEvt__PickupButton_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void ExecuteUbergraph_WBP_Touch_WeaponPickupEntry(int EntryPoint);// 0x2cbecb0

--------------------------------
Class: WBP_TouchAbilityButton_C.KSViewedPawnInventoryWidget.KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5f0, Size: 1]
	WBP_TouchWeaponSwitchButton_Circular_C* Ability_TouchWeaponSwitchButton;//[Offset: 0x5f8, Size: 1]
	KSTouchJoystickWrapper* KSTouchJoystickWrapper;//[Offset: 0x600, Size: 1]
	WBP_HUD_TutorialCursor_C* WBP_HUD_TutorialCursor;//[Offset: 0x608, Size: 1]
	MulticastInlineDelegateProperty TutorialEventTriggered;//[Size: 1]
	void PostSetPawn();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void EquipmentBecomeActive(KSWeaponComponent* ActiveEquipment);// 0x2cbecb0
	void ShowTutorial();// 0x2cbecb0
	void HideTutorial();// 0x2cbecb0
	void ExecuteUbergraph_WBP_TouchAbilityButton(int EntryPoint, PUMG_HUD* K2Node_Event_hud, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSWeaponComponent* K2Node_Event_ActiveEquipment, bool CallFunc_IsValid_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetTouchAbilityCastType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, GameplayTag CallFunc_GetEquipPoint_ReturnValue, bool CallFunc_EqualEqual_GameplayTag_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void TutorialEventTriggered__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: WBP_TouchWeaponSwitchButton_Circular_C.KSActiveWeaponComponentWidget.KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5f0, Size: 1]
	WidgetAnimation* Ready_Looping;//[Offset: 0x5f8, Size: 1]
	WidgetAnimation* ActivationCastLoop;//[Offset: 0x600, Size: 1]
	WidgetAnimation* SetCannotFireNow;//[Offset: 0x608, Size: 1]
	WidgetAnimation* Ready;//[Offset: 0x610, Size: 1]
	WidgetAnimation* Activate;//[Offset: 0x618, Size: 1]
	TextBlock* AbilityAmmoText;//[Offset: 0x620, Size: 1]
	Image* AbilityAvailable;//[Offset: 0x628, Size: 1]
	Image* AbilityReady;//[Offset: 0x630, Size: 1]
	Image* AbilityReady;//[Offset: 0x638, Size: 1]
	HorizontalBox* AmmoContainer_HorizontalBox;//[Offset: 0x640, Size: 1]
	WidgetSwitcher* AmmoDenominator_WidgetSwitcher;//[Offset: 0x648, Size: 1]
	TextBlock* AmmoDenominatorText;//[Offset: 0x650, Size: 1]
	TextBlock* AmmoNumeratorText;//[Offset: 0x658, Size: 1]
	Image* ButtonBackground;//[Offset: 0x660, Size: 1]
	HorizontalBox* ChargeDisplayWrapper;//[Offset: 0x668, Size: 1]
	TextBlock* ChargePercentDisplay;//[Offset: 0x670, Size: 1]
	TextBlock* ChargePercentDisplay;//[Offset: 0x678, Size: 1]
	CanvasPanel* ClippingCanvas;//[Offset: 0x680, Size: 1]
	Image* Cooldown;//[Offset: 0x688, Size: 1]
	Overlay* FillOverlay;//[Offset: 0x690, Size: 1]
	Overlay* FillOverlay;//[Offset: 0x698, Size: 1]
	Image* Highlighted_Image;//[Offset: 0x6a0, Size: 1]
	Button* HitTarget;//[Offset: 0x6a8, Size: 1]
	TextBlock* InfiniteAmmoDenominatorText;//[Offset: 0x6b0, Size: 1]
	Image* ReadyFlare_01;//[Offset: 0x6b8, Size: 1]
	Image* ReadyGlow_01;//[Offset: 0x6c0, Size: 1]
	Image* ReadyGradient_01;//[Offset: 0x6c8, Size: 1]
	Image* ReadyShockwave_01;//[Offset: 0x6d0, Size: 1]
	Image* ReadyShockwave_02;//[Offset: 0x6d8, Size: 1]
	Image* ScanLines;//[Offset: 0x6e0, Size: 1]
	Border* WeaponBorder;//[Offset: 0x6e8, Size: 1]
	WBP_AsyncIcon_C* WeaponIconDark;//[Offset: 0x6f0, Size: 1]
	WBP_AsyncIcon_C* WeaponIconLight;//[Offset: 0x6f8, Size: 1]
	WidgetSwitcher* WeaponSlot_WidgetSwitcher;//[Offset: 0x700, Size: 1]
	FName ActionName;//[Offset: 0x708, Size: 1]
	FName[] WeaponSlot;//[Offset: 0x710, Size: 1]
	bool CannotFireNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x720, Size: 1]
	int Current Charge;//[Offset: 0x724, Size: 1]
	int RequiredCharge;//[Offset: 0x728, Size: 1]
	int ChargeDisplayThreshold;//[Offset: 0x72c, Size: 1]
	bool IsMeterActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x730, Size: 1]
	LinearColor Activation;//[Offset: 0x734, Size: 1]
	LinearColor BaseColor;//[Offset: 0x744, Size: 1]
	KSModInst_Activated* KSModInstActivated;//[Offset: 0x758, Size: 1]
	BP_AbilityIconAnimationHelper_C* AbilityAnimationHelper;//[Offset: 0x760, Size: 1]
	KSWeaponComponent* DisplayedWeaponComponent;//[Offset: 0x768, Size: 1]
	bool SwapIconsOnSwapEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x770, Size: 1]
	bool IsAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x771, Size: 1]
	void TryAbilityQuickCast(bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, KSCharacterBase* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, KSWeapon* CallFunc_GetActiveWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetTouchAbilityCastType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum CallFunc_GetWeaponState_ReturnValue, enum Temp_byte_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, bool Temp_bool_Variable, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, interface classNone K2Node_DynamicCast_AsKSController_Interface, bool K2Node_DynamicCast_bSuccess, KSCharacterBase* CallFunc_GetKSCharacter_ReturnValue);// 0x2cbecb0
	void Set Is Highlighted(bool IsHighlighted, LinearColor CallFunc_SelectColor_ReturnValue);// 0x2cbecb0
	void Try Swap To Displayed Weapon(bool NeedsToTriggerAction, FName ActionToPerform, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetTouchAbilityCastType_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayTag CallFunc_GetEquipPoint_ReturnValue, bool GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess);// 0x2cbecb0
	void SetupDisplayData(KSWeaponComponent* InWeaponComponent, bool Temp_bool_Variable, int CallFunc_GetAmmoInOwnerInventory_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum CallFunc_GetAmmoType_ReturnValue, int CallFunc_GetAmmoInOwnerInventory_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, KSWeaponAsset_Melee* K2Node_DynamicCast_AsKSWeapon_Asset_Melee, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Select_Default, int Temp_int_Variable, bool CallFunc_EqualEqual_NameName_ReturnValue, bool Temp_bool_Variable, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, int K2Node_Select_Default, bool CallFunc_HasInfiniteAmmo_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int K2Node_Select_Default);// 0x2cbecb0
	void Set Fill Value(float SetFillValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_FClamp_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Setup Basic Display();// 0x2cbecb0
	void Turn On Meter(bool IsOn, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Turn Off Meter(bool IsOn, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Update Display(FText QuantityText, int CurrentCharge, int RequiredCharge);// 0x2cbecb0
	void StartReadyAnimations(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2cbecb0
	void PlayActivationEvent(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void Stop Ready Animations(MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Play Ability Ready Sound(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Actor* CallFunc_GetViewTarget_ReturnValue, int CallFunc_PostEvent_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x2cbecb0
	void Update Can Use(int Temp_int_Array_Index_Variable, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_CanFireGrenadeNow_ReturnValue, KSModInst_Activated*[] CallFunc_GetActivatableMods_OutMods, bool CallFunc_GetActivatableMods_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, KSWeapon*[] CallFunc_GetAllEquippedWeapons_OutWeapons, KSWeapon* CallFunc_Array_Get_Item, bool CallFunc_CanFireNowCommon_ReturnValue, GameplayTag CallFunc_GetEquipPoint_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess, bool CallFunc_Not_PreBool_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, KSModInst_Activated* CallFunc_Array_Get_Item, enum CallFunc_IsInActivatableState_OutAbilityFailureType, bool CallFunc_IsInActivatableState_ReturnValue, bool CallFunc_CanActivateAbilityNow_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	bool Equipment Has Valid Slot(KSEquipmentCosmeticComponent* InEquipment, GameplayTag CallFunc_GetEquipPoint_ReturnValue, FName CallFunc_GetTagName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x2cbecb0
	bool Weapon Exists for Slot(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, interface classNone CallFunc_GetAllWeaponComponents_Target_CastInput, KSWeaponComponent*[] CallFunc_GetAllWeaponComponents_OutWeaponComponents, KSWeaponComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, GameplayTag CallFunc_GetEquipPoint_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_GetTagName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x2cbecb0
	void SetupAbilityIcon(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSModInst_Activated*[] CallFunc_GetActivatableMods_OutMods, bool CallFunc_GetActivatableMods_ReturnValue, int CallFunc_Array_Length_ReturnValue, KSModInst_Activated* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, KSPlayerMod_Activated* CallFunc_GetDisplayActivatedModAsset_ReturnValue);// 0x2cbecb0
	void SetMaxAmmo(int Value, FText CallFunc_Conv_IntToText_ReturnValue);// 0x2cbecb0
	void OnAmmoChange(KSWeaponComponent* WeaponComponent, byte AmmoChange, bool BonusAmmo, byte CallFunc_GetAmmoInClip_ReturnValue, FText CallFunc_Conv_ByteToText_ReturnValue);// 0x2cbecb0
	void Initialize(int MaxAmmo, KSWeaponComponent* NewWeaponComponent, bool CallFunc_IsValid_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue);// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x2cbecb0
	void HandleAmmoChange(const KSWeaponComponent* WeaponComponent, byte AmmoChange, bool bBonusAmmo);// 0x2cbecb0
	void EquipmentAdded(KSWeaponComponent* AddedEquipment);// 0x2cbecb0
	void EquipmentRemoved(KSWeaponComponent* RemovedEquipment);// 0x2cbecb0
	void PostSetActiveWeaponComponent();// 0x2cbecb0
	void OnSetCannotFireNow(bool CannotFire);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void OnModsUpdated(KSCharacter* Character);// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void BindAnimationHelperDelegates();// 0x2cbecb0
	void PostFlashTrapActivated(Texture2D* NewIcon);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void TryAbilityQuickCastWrapper(const KSWeaponComponent* WeaponComponent, enum OldState, enum NewState);// 0x2cbecb0
	void PreClearActiveWeaponComponent();// 0x2cbecb0
	void ExecuteUbergraph_WBP_TouchWeaponSwitchButton_Circular(int EntryPoint, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetPlayerController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, const KSWeaponComponent* K2Node_CustomEvent_WeaponComponent, byte K2Node_CustomEvent_AmmoChange, bool K2Node_CustomEvent_bBonusAmmo, KSWeaponComponent* K2Node_Event_AddedEquipment, KSWeaponComponent* K2Node_Event_RemovedEquipment, bool CallFunc_Equipment_Has_Valid_Slot_ReturnValue, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, bool CallFunc_Equipment_Has_Valid_Slot_ReturnValue, LinearColor CallFunc_SelectColor_ReturnValue, bool CallFunc_Weapon_Exists_for_Slot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_CannotFire, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, UMGSequencePlayer* CallFunc_PlayAnimationReverse_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimationForward_ReturnValue, KSCharacter* K2Node_CustomEvent_Character, KSModInst_Activated*[] CallFunc_GetActivatableMods_OutMods, bool CallFunc_GetActivatableMods_ReturnValue, KSModInst_Activated* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool Temp_bool_Variable, PUMG_HUD* K2Node_Event_hud, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Texture2D* K2Node_CustomEvent_NewIcon, enum Temp_byte_Variable, BP_AbilityIconAnimationHelper_C* CallFunc_SpawnObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsDesignTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, Vector2D CallFunc_GetSize_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, LinearColor K2Node_MakeStruct_LinearColor, LinearColor K2Node_MakeStruct_LinearColor, const KSWeaponComponent* K2Node_CustomEvent_WeaponComponent, enum K2Node_CustomEvent_OldState, enum K2Node_CustomEvent_NewState, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, bool K2Node_Select_Default, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSActiveWeaponComponentWidget.KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	int ActiveWeaponSlot;//[Offset: 0x5b8, Size: 1]
	GameplayTagContainer EquipPointsToIgnore;//[Offset: 0x5c0, Size: 1]
	bool bDelayClearUntilNextTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	KSWeaponComponent* WeakActiveWeaponComponentPtr;//[Offset: 0x5e4, Size: 1]
	void PreClearActiveWeaponComponent();// 0x1efcfc0
	void PostSetActiveWeaponComponent();// 0x28fbf20
	KSWeaponComponent* GetActiveWeaponComponent();// 0x28fab00

--------------------------------
Class: KSTouchJoystickWrapper.Border.ContentWidget.PanelWidget.Widget.Visual.Object
	float MaximumOffset;//[Offset: 0x278, Size: 1]
	bool bIsJoystickActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	void SetIsJoystickActive(bool bInIsJoystickActive);// 0x2967920
	bool GetIsJoystickActive();// 0x27df540

--------------------------------
Class: WBP_TouchGadgetButton_C.KSViewedPawnInventoryWidget.KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5f0, Size: 1]
	WBP_TouchWeaponSwitchButton_C* Gadget_TouchWeaponSwitchButton;//[Offset: 0x5f8, Size: 1]
	void PostSetPawn();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void ExecuteUbergraph_WBP_TouchGadgetButton(int EntryPoint, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, PUMG_HUD* K2Node_Event_hud);// 0x2cbecb0

--------------------------------
Class: WBP_TouchWeaponSwitchButton_C.KSActiveWeaponComponentWidget.KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5f0, Size: 1]
	WidgetAnimation* ActivationCastLoop;//[Offset: 0x5f8, Size: 1]
	WidgetAnimation* Ready;//[Offset: 0x600, Size: 1]
	WidgetAnimation* Activate;//[Offset: 0x608, Size: 1]
	TextBlock* AbilityAmmoText;//[Offset: 0x610, Size: 1]
	Overlay* ActiveHighlight;//[Offset: 0x618, Size: 1]
	TextBlock* Ammo;//[Offset: 0x620, Size: 1]
	HorizontalBox* AmmoContainer_HorizontalBox;//[Offset: 0x628, Size: 1]
	WidgetSwitcher* AmmoDenominator_WidgetSwitcher;//[Offset: 0x630, Size: 1]
	TextBlock* AmmoDenominatorText;//[Offset: 0x638, Size: 1]
	TextBlock* AmmoNumeratorText;//[Offset: 0x640, Size: 1]
	Image* BackgroundImage;//[Offset: 0x648, Size: 1]
	Image* BackgroundImage_Shadow;//[Offset: 0x650, Size: 1]
	CanvasPanel* ClippingCanvas;//[Offset: 0x658, Size: 1]
	Overlay* FillOverlay;//[Offset: 0x660, Size: 1]
	Overlay* FillOverlay;//[Offset: 0x668, Size: 1]
	Image* Highlighted_Image;//[Offset: 0x670, Size: 1]
	Image* Highlighted_Image_Border;//[Offset: 0x678, Size: 1]
	Button* HitTarget;//[Offset: 0x680, Size: 1]
	TextBlock* InfiniteAmmoDenominatorText;//[Offset: 0x688, Size: 1]
	Image* ReadyFlare_01;//[Offset: 0x690, Size: 1]
	Image* ReadyGlow_01;//[Offset: 0x698, Size: 1]
	Image* ReadyGradient_01;//[Offset: 0x6a0, Size: 1]
	Image* ReadyShockwave_01;//[Offset: 0x6a8, Size: 1]
	Image* ReadyShockwave_02;//[Offset: 0x6b0, Size: 1]
	Image* ScanLines;//[Offset: 0x6b8, Size: 1]
	Border* WeaponBorder;//[Offset: 0x6c0, Size: 1]
	WBP_AsyncIcon_C* WeaponIconDark;//[Offset: 0x6c8, Size: 1]
	WBP_AsyncIcon_C* WeaponIconLight;//[Offset: 0x6d0, Size: 1]
	WidgetSwitcher* WeaponSlot_WidgetSwitcher;//[Offset: 0x6d8, Size: 1]
	FName ActionName;//[Offset: 0x6e0, Size: 1]
	FName[] WeaponSlot;//[Offset: 0x6e8, Size: 1]
	bool CannotFireNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f8, Size: 1]
	int Current Charge;//[Offset: 0x6fc, Size: 1]
	int RequiredCharge;//[Offset: 0x700, Size: 1]
	int ChargeDisplayThreshold;//[Offset: 0x704, Size: 1]
	bool IsMeterActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	LinearColor Activation;//[Offset: 0x70c, Size: 1]
	LinearColor BaseColor;//[Offset: 0x71c, Size: 1]
	KSModInst_Activated* KSModInstActivated;//[Offset: 0x730, Size: 1]
	BP_AbilityIconAnimationHelper_C* AbilityAnimationHelper;//[Offset: 0x738, Size: 1]
	KSWeaponComponent* DisplayedWeaponComponent;//[Offset: 0x740, Size: 1]
	bool SwapIconsOnSwapEquipment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	bool IsAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x749, Size: 1]
	byte ImageAlignment;//[Offset: 0x74a, Size: 1]
	void Check Ammo Warning Level(KSWeaponComponent* WeaponComponent, out enum AmmoState, float CriticallyLowAmmoThreshold, float LowAmmoThreshold, int CallFunc_GetAmmoInOwnerInventory_ReturnValue, byte CallFunc_GetClipSize_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_ByteByte_ReturnValue, float CallFunc_Conv_ByteToFloat_ReturnValue, byte CallFunc_GetAmmoInClip_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float CallFunc_Conv_ByteToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2cbecb0
	void Set Is Highlighted(bool IsHighlighted, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, float K2Node_Select_Default);// 0x2cbecb0
	void Try Swap To Displayed Weapon(FName ActionToPerform, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, bool CallFunc_IsValid_ReturnValue, GameplayTag CallFunc_GetEquipPoint_ReturnValue, bool GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess);// 0x2cbecb0
	void SetupDisplayData(KSWeaponComponent* InWeaponComponent, bool Temp_bool_Variable, int CallFunc_GetAmmoInOwnerInventory_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum CallFunc_GetAmmoType_ReturnValue, int CallFunc_GetAmmoInOwnerInventory_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, KSWeaponAsset_Melee* K2Node_DynamicCast_AsKSWeapon_Asset_Melee, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, int Temp_int_Variable, int Temp_int_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Select_Default, int Temp_int_Variable, bool CallFunc_EqualEqual_NameName_ReturnValue, bool Temp_bool_Variable, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, int K2Node_Select_Default, bool CallFunc_HasInfiniteAmmo_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int K2Node_Select_Default);// 0x2cbecb0
	void Set Fill Value(float SetFillValue, bool Temp_bool_Variable, float CallFunc_FClamp_ReturnValue, enum Temp_byte_Variable, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, enum Temp_byte_Variable, enum K2Node_Select_Default, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, Vector2D CallFunc_GetSize_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Margin K2Node_MakeStruct_Margin);// 0x2cbecb0
	void Setup Basic Display();// 0x2cbecb0
	void Turn On Meter(bool IsOn, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Turn Off Meter(bool IsOn, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Update Display(FText QuantityText, int CurrentCharge, int RequiredCharge);// 0x2cbecb0
	void StartReadyAnimations(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2cbecb0
	void PlayActivationEvent(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void Stop Ready Animations(MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void Play Ability Ready Sound(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Actor* CallFunc_GetViewTarget_ReturnValue, int CallFunc_PostEvent_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x2cbecb0
	void Update Can Use(int Temp_int_Array_Index_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, bool CallFunc_CanFireGrenadeNow_ReturnValue, KSModInst_Activated*[] CallFunc_GetActivatableMods_OutMods, bool CallFunc_GetActivatableMods_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, KSWeapon*[] CallFunc_GetAllEquippedWeapons_OutWeapons, int Temp_int_Loop_Counter_Variable, KSWeapon* CallFunc_Array_Get_Item, bool CallFunc_CanFireNowCommon_ReturnValue, GameplayTag CallFunc_GetEquipPoint_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, KSModInst_Activated* CallFunc_Array_Get_Item, enum CallFunc_IsInActivatableState_OutAbilityFailureType, bool CallFunc_IsInActivatableState_ReturnValue, bool CallFunc_CanActivateAbilityNow_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	bool Equipment Has Valid Slot(KSEquipmentCosmeticComponent* InEquipment, GameplayTag CallFunc_GetEquipPoint_ReturnValue, FName CallFunc_GetTagName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x2cbecb0
	bool Weapon Exists for Slot(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, interface classNone CallFunc_GetAllWeaponComponents_Target_CastInput, KSWeaponComponent*[] CallFunc_GetAllWeaponComponents_OutWeaponComponents, KSWeaponComponent* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, GameplayTag CallFunc_GetEquipPoint_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FName CallFunc_GetTagName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x2cbecb0
	void SetupAbilityIcon(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Pawn* CallFunc_GetOwningPlayerPawn_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSModInst_Activated*[] CallFunc_GetActivatableMods_OutMods, bool CallFunc_GetActivatableMods_ReturnValue, int CallFunc_Array_Length_ReturnValue, KSModInst_Activated* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, KSPlayerMod_Activated* CallFunc_GetDisplayActivatedModAsset_ReturnValue);// 0x2cbecb0
	void SetMaxAmmo(int Value, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x2cbecb0
	void OnAmmoChange(KSWeaponComponent* WeaponComponent, byte AmmoChange, bool BonusAmmo, int Temp_int_Variable, int CallFunc_GetAmmoInOwnerInventory_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, enum CallFunc_Check_Ammo_Warning_Level_AmmoState, byte CallFunc_GetAmmoInClip_ReturnValue, enum Temp_byte_Variable, FText CallFunc_Conv_ByteToText_ReturnValue, int Temp_int_Variable, int CallFunc_GetActiveWidgetIndex_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, bool Temp_bool_Variable, int K2Node_Select_Default, bool CallFunc_NotEqual_IntInt_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_Select_Default);// 0x2cbecb0
	void Initialize(int MaxAmmo, KSWeaponComponent* NewWeaponComponent, bool CallFunc_IsValid_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue);// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();// 0x2cbecb0
	void HandleAmmoChange(const KSWeaponComponent* WeaponComponent, byte AmmoChange, bool bBonusAmmo);// 0x2cbecb0
	void EquipmentAdded(KSWeaponComponent* AddedEquipment);// 0x2cbecb0
	void EquipmentRemoved(KSWeaponComponent* RemovedEquipment);// 0x2cbecb0
	void PostSetActiveWeaponComponent();// 0x2cbecb0
	void OnSetCannotFireNow(bool CannotFire);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void OnModsUpdated(KSCharacter* Character);// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void BindAnimationHelperDelegates();// 0x2cbecb0
	void PostFlashTrapActivated(Texture2D* NewIcon);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_TouchWeaponSwitchButton(int EntryPoint, enum Temp_byte_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, const KSWeaponComponent* K2Node_CustomEvent_WeaponComponent, byte K2Node_CustomEvent_AmmoChange, bool K2Node_CustomEvent_bBonusAmmo, KSWeaponComponent* K2Node_Event_AddedEquipment, KSWeaponComponent* K2Node_Event_RemovedEquipment, bool CallFunc_Equipment_Has_Valid_Slot_ReturnValue, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, bool CallFunc_Equipment_Has_Valid_Slot_ReturnValue, bool CallFunc_Weapon_Exists_for_Slot_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_CannotFire, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, KSCharacter* CallFunc_GetPawn_ReturnValue, KSCharacter* K2Node_CustomEvent_Character, KSModInst_Activated*[] CallFunc_GetActivatableMods_OutMods, bool CallFunc_GetActivatableMods_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, PUMG_HUD* K2Node_Event_hud, int Temp_int_Array_Index_Variable, KSModInst_Activated* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Texture2D* K2Node_CustomEvent_NewIcon, float Temp_float_Variable, KSCharacter* CallFunc_GetPawn_ReturnValue, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue, BP_AbilityIconAnimationHelper_C* CallFunc_SpawnObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsDesignTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, CanvasPanelSlot* K2Node_DynamicCast_AsCanvas_Panel_Slot, bool K2Node_DynamicCast_bSuccess, Vector2D CallFunc_GetSize_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, float Temp_float_Variable, bool Temp_bool_Variable, float K2Node_Select_Default, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSWeaponComponent* CallFunc_GetActiveWeaponComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0

--------------------------------
Class: WBP_TouchWeaponSelectionTray_C.KSViewedPawnInventoryWidget.KSPawnInventoryWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5f0, Size: 1]
	WBP_TouchWeaponSwitchButton_C* Ability_TouchWeaponSwitchButton;//[Offset: 0x5f8, Size: 1]
	WBP_TouchWeaponSwitchButton_C* Grenade_TouchWeaponSwitchButton;//[Offset: 0x600, Size: 1]
	WBP_TouchWeaponSwitchButton_C* Melee_TouchWeaponSwitchButton;//[Offset: 0x608, Size: 1]
	WBP_TouchWeaponSwitchButton_C* New_Melee_TouchWeaponSwitchButton;//[Offset: 0x610, Size: 1]
	WBP_TouchWeaponSwitchButton_C* New_Primary_TouchWeaponSwitchButton;//[Offset: 0x618, Size: 1]
	WBP_TouchWeaponSwitchButton_C* New_Secondary_TouchWeaponSwitchButton;//[Offset: 0x620, Size: 1]
	WBP_TouchWeaponSwitchButton_C* Primary_TouchWeaponSwitchButton;//[Offset: 0x628, Size: 1]
	WBP_TouchWeaponSwitchButton_C* Secondary_TouchWeaponSwitchButton;//[Offset: 0x630, Size: 1]
	WBP_TouchWeaponSwitchButton_C*[] SwappableWeaponButtons;//[Offset: 0x638, Size: 1]
	FName[] SupportedEquipPoints;//[Offset: 0x648, Size: 1]
	void InitializeEquipmentSlots(int Temp_int_Loop_Counter_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, WBP_TouchWeaponSwitchButton_C* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, KSWeapon* CallFunc_GetActiveWeapon_ReturnValue, KSWeapon*[] CallFunc_GetAllEquippedWeapons_OutWeapons, bool CallFunc_IsValid_ReturnValue, KSWeapon* CallFunc_Array_Get_Item, KSWeaponComponent* CallFunc_GetWeaponComponent_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, KSWeaponComponent* CallFunc_GetWeaponComponent_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void OnEquipmentAdded(KSWeaponComponent* AddedEquipment, WBP_TouchWeaponSwitchButton_C* CallFunc_GetFirstEmptySlot_ReturnButton, bool CallFunc_IsWeaponBeingDisplayed_IsWeaponDisplayed, WBP_TouchWeaponSwitchButton_C* CallFunc_IsWeaponBeingDisplayed_OutButton, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_CanWeaponBeDisplayed_CanBeDisplayed);// 0x2cbecb0
	void CanWeaponBeDisplayed(KSEquipmentCosmeticComponent* InWeapon, out bool CanBeDisplayed, GameplayTag CallFunc_GetEquipPoint_ReturnValue, FName CallFunc_GetTagName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue);// 0x2cbecb0
	void IsWeaponBeingDisplayed(KSWeaponComponent* InWeapon, out bool IsWeaponDisplayed, out WBP_TouchWeaponSwitchButton_C* OutButton, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, WBP_TouchWeaponSwitchButton_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void GetFirstEmptySlot(out WBP_TouchWeaponSwitchButton_C* ReturnButton, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, WBP_TouchWeaponSwitchButton_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void EquipmentAdded(KSWeaponComponent* AddedEquipment);// 0x2cbecb0
	void EquipmentBecomeActive(KSWeaponComponent* ActiveEquipment);// 0x2cbecb0
	void ExecuteUbergraph_WBP_TouchWeaponSelectionTray(int EntryPoint, PUMG_HUD* K2Node_Event_hud, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, KSWeaponComponent* K2Node_Event_AddedEquipment, KSWeaponComponent* K2Node_Event_ActiveEquipment, bool CallFunc_IsWeaponBeingDisplayed_IsWeaponDisplayed, WBP_TouchWeaponSwitchButton_C* CallFunc_IsWeaponBeingDisplayed_OutButton, bool CallFunc_CanWeaponBeDisplayed_CanBeDisplayed, KSCharacter* CallFunc_GetPawnAsKSCharacter_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, const WBP_TouchWeaponSwitchButton_C*[] K2Node_MakeArray_Array);// 0x2cbecb0

--------------------------------
Class: WBP_InGameLoadoutSelect_SwapButton_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* AnimOnPressed;//[Offset: 0x530, Size: 1]
	Overlay* ButtonImageWrapper;//[Offset: 0x538, Size: 1]
	PUMG_TouchButton* HitTarget;//[Offset: 0x540, Size: 1]
	SizeBox* TimerBar;//[Offset: 0x548, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	bool IsRespawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560, Size: 1]
	void BndEvt__PUMG_TouchButton_96_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void TryDisplayLoadoutSelectButton();// 0x2cbecb0
	void OnInitialized();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void HandlePhaseChanged(MatchPhase CurrentPhase, MatchPhase PreviousPhase);// 0x2cbecb0
	void UninitializeWidget();// 0x2cbecb0
	void OnRespawnTimerActive(bool bActive);// 0x2cbecb0
	void OnRespawnTimerComplete();// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();// 0x2cbecb0
	void ExecuteUbergraph_WBP_InGameLoadoutSelect_SwapButton(int EntryPoint, float CallFunc_GetAnimationCurrentTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_UseMobileArmoryLoadouts_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSGameHUDNew* K2Node_DynamicCast_AsKSGame_HUDNew, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSHUDStateTracker* CallFunc_GetHUDStateTracker_ReturnValue, PUMG_HUD* K2Node_Event_hud, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, MatchPhase K2Node_CustomEvent_CurrentPhase, MatchPhase K2Node_CustomEvent_PreviousPhase, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, KSGameHUDNew* K2Node_DynamicCast_AsKSGame_HUDNew, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSHUDStateTracker* CallFunc_GetHUDStateTracker_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_bActive, bool CallFunc_AddViewRoute_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_GetAnimationCurrentTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void OnClicked__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: WBP_InstanceFUBARNotification_C.KSFubarPopupWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* background;//[Offset: 0x530, Size: 1]
	RichTextBlock* DescRichText;//[Offset: 0x538, Size: 1]
	Image* ErrorImage;//[Offset: 0x540, Size: 1]
	TextBlock* HeaderText;//[Offset: 0x548, Size: 1]
	Image* Image;//[Offset: 0x550, Size: 1]
	Image* Image;//[Offset: 0x558, Size: 1]
	WBP_StandardButtonMedium_C* LobbyReturnButton;//[Offset: 0x560, Size: 1]
	Image* Shadow;//[Offset: 0x568, Size: 1]
	int SecondsUntilShutdown;//[Offset: 0x570, Size: 1]
	TimerHandle CountdownHandle;//[Offset: 0x578, Size: 1]
	bool NavigateConfirm();// 0x2cbecb0
	void UpdateButtonCountdown(int SecondsRemaining, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	void SetUpMessaging(FText Header, FText Description, bool ShowIcon, enum Temp_byte_Variable, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_GetSecondsToShutdown_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool Temp_bool_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void DisplayFubar(enum Reason);// 0x2cbecb0
	void BndEvt__WBP_StandardButtonMedium_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature(Widget* Widget);// 0x2cbecb0
	void TickCountdown();// 0x2cbecb0
	void OnHide();// 0x2cbecb0
	void Confirm();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void InitializeWidgetNavigation();// 0x2cbecb0
	void ExecuteUbergraph_WBP_InstanceFUBARNotification(int EntryPoint, enum K2Node_Event_Reason, bool K2Node_SwitchEnum_CmpSuccess, Widget* K2Node_ComponentBoundEvent_Widget, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, KSGameHUDNew* K2Node_DynamicCast_AsKSGame_HUDNew, bool K2Node_DynamicCast_bSuccess, Key CallFunc_GetGamepadConfirmButton_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSFubarPopupWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void ReceiveFubar(enum Reason);// 0x2913070
	int GetSecondsToShutdown();// 0x29123e0
	void DisplayFubar(enum Reason);// 0x2cbecb0

--------------------------------
Class: WBP_StandardButtonMedium_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* OnClick;//[Offset: 0x530, Size: 1]
	WidgetAnimation* Highlight;//[Offset: 0x538, Size: 1]
	Image* BtnBkg;//[Offset: 0x540, Size: 1]
	Image* BtnBkgHover;//[Offset: 0x548, Size: 1]
	Image* BtnBkgRedButton;//[Offset: 0x550, Size: 1]
	Image* BtnClickImage;//[Offset: 0x558, Size: 1]
	Image* BtnEdge;//[Offset: 0x560, Size: 1]
	Image* BtnEdgeHover;//[Offset: 0x568, Size: 1]
	Image* BtnFrame;//[Offset: 0x570, Size: 1]
	Image* BtnFrameHover;//[Offset: 0x578, Size: 1]
	Overlay* BtnStandardWrapper;//[Offset: 0x580, Size: 1]
	TextBlock* ButtonText;//[Offset: 0x588, Size: 1]
	Button* HitTarget;//[Offset: 0x590, Size: 1]
	Overlay* HoverWrapper;//[Offset: 0x598, Size: 1]
	WBP_KeyCallout_C* KeyPrompt;//[Offset: 0x5a0, Size: 1]
	CanvasPanel* KeyPromptContainer;//[Offset: 0x5a8, Size: 1]
	SizeBox* SizeWrapper;//[Offset: 0x5b0, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	AkAudioEvent* ClickMedBtnSFX;//[Offset: 0x5e8, Size: 1]
	FText DefaultButtonText;//[Offset: 0x5f0, Size: 1]
	float DefaultWidth;//[Offset: 0x608, Size: 1]
	bool ShowPromptOnFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c, Size: 1]
	Key PromptKey;//[Offset: 0x610, Size: 1]
	AkAudioEvent* HoverMedBtnSFX;//[Offset: 0x628, Size: 1]
	bool IsConfirm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 1]
	bool IsCancel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x631, Size: 1]
	bool IsRedButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x632, Size: 1]
	void GetGamepadPromptKey(out bool HasValidKeyPrompt, out Key GamepadKey, Key NoneKey, Key CallFunc_GetGamepadCancelButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Key CallFunc_GetGamepadConfirmButton_ReturnValue);// 0x2cbecb0
	void SetKeyPrompt(Key GamepadButton);// 0x2cbecb0
	void SetDefaultDisplay(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, FName Temp_name_Variable, FName Temp_name_Variable, bool Temp_bool_Variable, FName Temp_name_Variable, FName Temp_name_Variable, Anchors K2Node_MakeStruct_Anchors, Anchors K2Node_MakeStruct_Anchors, enum K2Node_Select_Default, FName K2Node_Select_Default, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, FName K2Node_Select_Default, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, bool CallFunc_GetFontByName_HasFound, SlateFontInfo CallFunc_GetFontByName_FontInfo, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color);// 0x2cbecb0
	void SetWidth(float InWidth);// 0x2cbecb0
	void SetButtonText(FText ButtonText);// 0x2cbecb0
	bool NavigateConfirm();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x2cbecb0
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x2cbecb0
	void GamepadHover();// 0x2cbecb0
	void GamepadUnhover();// 0x2cbecb0
	void GamepadConfirm();// 0x2cbecb0
	void Do Hover();// 0x2cbecb0
	void Do Unhover();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void HandleInputStateChanged(byte InputState);// 0x2cbecb0
	void OnInitialized();// 0x2cbecb0
	void ExecuteUbergraph_WBP_StandardButtonMedium(int EntryPoint, bool CallFunc_IsMobile_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PUMG_HUD* K2Node_Event_hud, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, byte K2Node_CustomEvent_InputState, const delegate Temp_delegate_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_GetGamepadPromptKey_HasValidKeyPrompt, Key CallFunc_GetGamepadPromptKey_GamepadKey, int CallFunc_PostEvent_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, bool CallFunc_GetGamepadPromptKey_HasValidKeyPrompt, Key CallFunc_GetGamepadPromptKey_GamepadKey, byte CallFunc_GetCurrentInputState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_GetGamepadPromptKey_HasValidKeyPrompt, Key CallFunc_GetGamepadPromptKey_GamepadKey, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0x2cbecb0
	void OnUnhovered__DelegateSignature(Widget* Widget);// 0x2cbecb0
	void OnHovered__DelegateSignature(Widget* Widget);// 0x2cbecb0
	void OnClicked__DelegateSignature(Widget* Widget);// 0x2cbecb0

--------------------------------
Class: WBP_InventoryFullWarning_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	WidgetAnimation* InvFullAnim;//[Offset: 0x560, Size: 1]
	TextBlock* InventoryFullText;//[Offset: 0x568, Size: 1]
	void PostSetPawn();// 0x2cbecb0
	void Handle Inventory Full(KSWeaponAssetDrop* WeaponAssetDrop);// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void ExecuteUbergraph_WBP_InventoryFullWarning(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSWeaponAssetDrop* K2Node_CustomEvent_WeaponAssetDrop, const delegate Temp_delegate_Variable, KSCharacter* CallFunc_GetPawn_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: WBP_NoGadgetWarning_C.KSViewedPawnWidget.KSPawnWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x558, Size: 1]
	WidgetAnimation* NoMedPackAnim;//[Offset: 0x560, Size: 1]
	WidgetAnimation* NoGadgetAnim;//[Offset: 0x568, Size: 1]
	TextBlock* NoGadgetDisplayText;//[Offset: 0x570, Size: 1]
	TextBlock* NoMedPackDisplayText;//[Offset: 0x578, Size: 1]
	void HandleMedPackFailed(enum FailureType);// 0x2cbecb0
	void HandleGrenadeFailed(enum FailureType);// 0x2cbecb0
	void PostSetPawn();// 0x2cbecb0
	void PreClearPawn();// 0x2cbecb0
	void ExecuteUbergraph_WBP_NoGadgetWarning(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, enum Temp_byte_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, FText Temp_text_Variable, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_FailureType, enum K2Node_CustomEvent_FailureType, FText K2Node_Select_Default, FText K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, KSCharacter* CallFunc_GetPawn_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_IsValid_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, const delegate Temp_delegate_Variable, KSCharacter* CallFunc_GetPawn_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: WBP_ObjectiveMilestoneMessageQueue_C.KSAnnouncementQueueWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x550, Size: 1]
	CanvasPanel* AnnouncementWrapper;//[Offset: 0x558, Size: 1]
	WBP_TeamMessageObjective_C* CurrentAnnoucement;//[Offset: 0x560, Size: 1]
	bool IsKindOfBusy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	void WrapUpCurrentMessages(int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, WBP_TeamMessageObjective_C* K2Node_DynamicCast_AsWBP_Team_Message_Objective, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void OnAnnouncementReady();// 0x2cbecb0
	void SetToNotBusy();// 0x2cbecb0
	void OnKillCamEnabled(bool bEnabled);// 0x2cbecb0
	void HandleRoundSetup(out const RoundInitState RoundInitState);// 0x2cbecb0
	void OnRoundOverDel_Event(KSGameState* GameState, out const RoundResult RoundResult);// 0x2cbecb0
	void ResetDisplay();// 0x2cbecb0
	void OnDelayedHUDAnnouncementComponentCreated(KSPlayerController* OwningPlayerController, KSHUDAnnouncementComponent* SpawnedHUDAnnouncementComponent);// 0x2cbecb0
	void ExecuteUbergraph_WBP_ObjectiveMilestoneMessageQueue(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, WBP_TeamMessageObjective_C* CallFunc_Create_ReturnValue, WBP_RoyalePhaseMessage_C* CallFunc_Create_ReturnValue, AnnouncementData CallFunc_GetNext_Announcement, bool CallFunc_GetNext_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, LocalPlayer* CallFunc_GetOwningLocalPlayer_ReturnValue, bool K2Node_CustomEvent_bEnabled, KSLocalPlayer* K2Node_DynamicCast_AsKSLocal_Player, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSKillCam* CallFunc_GetKillCam_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSHUDAnnouncementComponent* CallFunc_GetHUDAnnouncementComponent_ReturnValue, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, const RoundInitState K2Node_CustomEvent_RoundInitState, KSGameState* K2Node_CustomEvent_GameState, const RoundResult K2Node_CustomEvent_RoundResult, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerController* K2Node_CustomEvent_OwningPlayerController, KSHUDAnnouncementComponent* K2Node_CustomEvent_SpawnedHUDAnnouncementComponent, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: KSAnnouncementQueueWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	bool IsBusy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	MulticastInlineDelegateProperty OnReadyForNextAnnouncement;//[Size: 1]
	void Queue(AnnouncementData Announcement);// 0x29000c0
	bool GetNext(out AnnouncementData Announcement);// 0x28ff840
	void ClearAnnoucementQueue();// 0x28ff530

--------------------------------
Class: AnnouncementData
	enum Type;//[Offset: 0x0, Size: 1]
	FText MessageText;//[Offset: 0x8, Size: 1]
	enum TeamAlignment;//[Offset: 0x20, Size: 1]
	int TeamAlignmentNum;//[Offset: 0x24, Size: 1]
	int FriendlyTeamAlive;//[Offset: 0x28, Size: 1]
	int EnemyTeamAlive;//[Offset: 0x2c, Size: 1]
	float Seconds;//[Offset: 0x30, Size: 1]
	float DisplayDuration;//[Offset: 0x34, Size: 1]

--------------------------------
Class: WBP_TeamMessageObjective_C.KSAnnouncementQueuedMessageWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 1]
	WidgetAnimation* PulseAnim;//[Offset: 0x578, Size: 1]
	WidgetAnimation* HideMessage;//[Offset: 0x580, Size: 1]
	WidgetAnimation* ShowMessage;//[Offset: 0x588, Size: 1]
	WidgetAnimation* PlayWithoutIcon;//[Offset: 0x590, Size: 1]
	WidgetAnimation* PlayWithIcon;//[Offset: 0x598, Size: 1]
	TextBlock* AnnoucementMessage;//[Offset: 0x5a0, Size: 1]
	Image* AnnouncementIcon;//[Offset: 0x5a8, Size: 1]
	Image* GrayBlur;//[Offset: 0x5b0, Size: 1]
	TextBlock* Message;//[Offset: 0x5b8, Size: 1]
	RetainerBox* RetainerBox;//[Offset: 0x5c0, Size: 1]
	Image* ScanLines;//[Offset: 0x5c8, Size: 1]
	Image* ShineEdgeL;//[Offset: 0x5d0, Size: 1]
	Image* ShineEdgeR;//[Offset: 0x5d8, Size: 1]
	Image* ShineL;//[Offset: 0x5e0, Size: 1]
	Overlay* ShineLeftWrapper;//[Offset: 0x5e8, Size: 1]
	Image* ShineR;//[Offset: 0x5f0, Size: 1]
	Overlay* ShineRightWrapper;//[Offset: 0x5f8, Size: 1]
	float FuckOffAnimDuration;//[Offset: 0x600, Size: 1]
	int CurrentState;//[Offset: 0x604, Size: 1]
	int State_Showing;//[Offset: 0x608, Size: 1]
	int State_Pulsing;//[Offset: 0x60c, Size: 1]
	int State_Hiding;//[Offset: 0x610, Size: 1]
	TimerHandle DisplayDurationTimer;//[Offset: 0x618, Size: 1]
	int State_WrappingUp;//[Offset: 0x620, Size: 1]
	void WrapUpHideAnim(bool Temp_bool_Variable, float Temp_float_Variable, bool Temp_bool_Variable, bool CallFunc_IsAnimationPlaying_ReturnValue, float CallFunc_GetAnimationCurrentTime_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float K2Node_Select_Default, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void HandleShowAnimFinished();// 0x2cbecb0
	void HandleHideAnimFinished();// 0x2cbecb0
	void HandlePulseAnimFinished();// 0x2cbecb0
	void WrapItUp();// 0x2cbecb0
	void ExecuteUbergraph_WBP_TeamMessageObjective(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSAnnouncementQueuedMessageWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnEndDisplay;//[Size: 1]
	AnnouncementData AnnouncementData;//[Offset: 0x538, Size: 1]
	void DisplayAnnouncement();// 0x28ff550

--------------------------------
Class: RetainerBox.ContentWidget.PanelWidget.Widget.Visual.Object
	bool RenderOnInvalidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool RenderOnPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	int Phase;//[Offset: 0x12c, Size: 1]
	int PhaseCount;//[Offset: 0x130, Size: 1]
	bool bEnableRetainedRendering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134, Size: 1]
	MaterialInterface* EffectMaterial;//[Offset: 0x138, Size: 1]
	FName TextureParameter;//[Offset: 0x140, Size: 1]
	void SetTextureParameter(FName TextureParameter);// 0x3b63750
	void SetRetainedRendering(bool bEnableRetainedRendering);// 0x3b63450
	void SetRenderingPhase(int RenderPhase, int TotalPhases);// 0x3b63390
	void SetEffectMaterial(MaterialInterface* EffectMaterial);// 0x3b62c30
	void RequestRender();// 0x3b62c10
	MaterialInstanceDynamic* GetEffectMaterial();// 0x3b62620

--------------------------------
Class: WBP_RoyalePhaseMessage_C.KSAnnouncementQueuedMessageWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 1]
	WidgetAnimation* Appear;//[Offset: 0x578, Size: 1]
	Image* AnnouncementIcon;//[Offset: 0x580, Size: 1]
	Image* GrayBlur;//[Offset: 0x588, Size: 1]
	TextBlock* Message;//[Offset: 0x590, Size: 1]
	Image* ScanLines;//[Offset: 0x598, Size: 1]
	TextTypeEffect_C* TextTypeEffect;//[Offset: 0x5a0, Size: 1]
	void Construct();// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_RoyalePhaseMessage(int EntryPoint, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, Texture2D* Temp_object_Variable, TextTypeEffect_C* CallFunc_SpawnObject_ReturnValue, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, enum Temp_byte_Variable, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, Texture2D* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2cbecb0

--------------------------------
Class: TextTypeEffect_C.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x28, Size: 1]
	TextBlock* TextComponent;//[Offset: 0x30, Size: 1]
	FText Text;//[Offset: 0x38, Size: 1]
	FString CursorToken;//[Offset: 0x50, Size: 1]
	float ElapsedTime;//[Offset: 0x60, Size: 1]
	float TypeSpeed;//[Offset: 0x64, Size: 1]
	float CursorSpeed;//[Offset: 0x68, Size: 1]
	void SetText(FText Text);// 0x2cbecb0
	void Tick(float dt);// 0x2cbecb0
	void StartType();// 0x2cbecb0
	void ExecuteUbergraph_TextTypeEffect(int EntryPoint, float K2Node_CustomEvent_dt, bool CallFunc_Less_FloatFloat_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Len_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_Percent_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, FString CallFunc_SelectString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_PlayerAccolades_C.KSAccoladeQueueWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x580, Size: 1]
	CanvasPanel* AccoladesWrapper;//[Offset: 0x588, Size: 1]
	WBP_AccoladeMedal_C* WBP_AccoladeMedal;//[Offset: 0x590, Size: 1]
	WBP_AccoladeMedal_C* WBP_AccoladeMedal;//[Offset: 0x598, Size: 1]
	WBP_AccoladeMedal_C* WBP_AccoladeMedal;//[Offset: 0x5a0, Size: 1]
	float DelayTimer;//[Offset: 0x5a8, Size: 1]
	WBP_AccoladeMedal_C*[] AccoladesArray;//[Offset: 0x5b0, Size: 1]
	float OffsetAmount;//[Offset: 0x5c0, Size: 1]
	float CurrentPresentationSpeed;//[Offset: 0x5c4, Size: 1]
	float TargetPresentationSpeed;//[Offset: 0x5c8, Size: 1]
	WBP_AccoladeMedal_C*[] CreatedAccoladeQueue;//[Offset: 0x5d0, Size: 1]
	WBP_AccoladeMedal_C*[] AccoladeWidgetPool;//[Offset: 0x5e0, Size: 1]
	void GetAccolateWidget(AccoladeDisplayInfo AccoladeInfo, out WBP_AccoladeMedal_C* Widget, WBP_AccoladeMedal_C* Result, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, WBP_AccoladeMedal_C* CallFunc_Array_Get_Item);// 0x2cbecb0
	void InitAccoladePool(int Temp_int_Variable, WBP_AccoladeMedal_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Add_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	void SetPresentationSpeed(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, WBP_AccoladeMedal_C* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void TickPresentationSpeed(float TimeDelta, float CallFunc_FInterpTo_Constant_ReturnValue, bool CallFunc_NotEqual_FloatFloat_ReturnValue);// 0x2cbecb0
	void CalculatePresentationSpeed(int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x2cbecb0
	void MoveAccolades(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, WBP_AccoladeMedal_C* CallFunc_Array_Get_Item, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2cbecb0
	void QueueAccolade();// 0x2cbecb0
	void AllowOtherAccolades();// 0x2cbecb0
	void RemoveAccolade(Widget* Widget);// 0x2cbecb0
	void HandleAccoladeRecieved(out const AccoladeEventEntry[] AccoladeEvents);// 0x2cbecb0
	void HandleMultiplier(AccoladeDisplayInfo AccoladeDisplayInfo);// 0x2cbecb0
	void CreateAccolade(AccoladeDisplayInfo AccoladeInfo);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void HandleKillCamEnabled(bool IsEnabled);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_PlayerAccolades(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, Widget* K2Node_CustomEvent_Widget, delegate K2Node_CreateDelegate_OutputDelegate, WBP_AccoladeMedal_C* K2Node_DynamicCast_AsWBP_Accolade_Medal, bool K2Node_DynamicCast_bSuccess, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, const AccoladeEventEntry[] K2Node_CustomEvent_AccoladeEvents, delegate K2Node_CreateDelegate_OutputDelegate, AccoladeDisplayInfo K2Node_CustomEvent_AccoladeDisplayInfo, AccoladeDisplayInfo K2Node_CustomEvent_AccoladeInfo, AccoladeDisplayInfo CallFunc_GetNext_Accolade, bool CallFunc_GetNext_ReturnValue, WBP_AccoladeMedal_C* CallFunc_GetAccolateWidget_Widget, bool K2Node_CustomEvent_IsEnabled, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Add_ReturnValue, WBP_AccoladeMedal_C* CallFunc_Array_Get_Item, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, LocalPlayer* CallFunc_GetOwningLocalPlayer_ReturnValue, KSLocalPlayer* K2Node_DynamicCast_AsKSLocal_Player, bool K2Node_DynamicCast_bSuccess, KSKillCam* CallFunc_GetKillCam_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSAccoladeQueueWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	bool IsBusy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x528, Size: 1]
	int NumInQueue;//[Offset: 0x52c, Size: 1]
	MulticastInlineDelegateProperty OnAccoladeReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnAccoladeUpdateMultiplier;//[Size: 1]
	void Queue(AccoladeEventEntry[] Accolades);// 0x28fbf40
	void OnAccoladeRemovedFromScreen(AccoladeDisplayInfo AccoladeRemoved);// 0x28fbbd0
	void HandleOnRoundSetup(out const RoundInitState RoundInitState);// 0x28fb5b0
	void HandleOnRoundOver(KSGameState* GameState, out const RoundResult RoundResult);// 0x28fb4d0
	bool GetNext(out AccoladeDisplayInfo Accolade);// 0x28faf60
	void ClearAccoladeQueue();// 0x28faa20

--------------------------------
Class: WBP_AccoladeMedal_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* PlaySheen;//[Offset: 0x530, Size: 1]
	WidgetAnimation* TransitionOut;//[Offset: 0x538, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x540, Size: 1]
	WidgetAnimation* ShowMultipler;//[Offset: 0x548, Size: 1]
	WidgetAnimation* ShowAccolade;//[Offset: 0x550, Size: 1]
	Image* AccoladeBadge;//[Offset: 0x558, Size: 1]
	Image* AccoladeIcon;//[Offset: 0x560, Size: 1]
	ScaleBox* AccoladeIconWrapper;//[Offset: 0x568, Size: 1]
	Overlay* AccoladeImage;//[Offset: 0x570, Size: 1]
	TextBlock* AccoladeName;//[Offset: 0x578, Size: 1]
	Border* Border;//[Offset: 0x580, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x588, Size: 1]
	SizeBox* TitleConstraint;//[Offset: 0x590, Size: 1]
	MaterialInstanceDynamic* ShineMat;//[Offset: 0x598, Size: 1]
	float PositionY;//[Offset: 0x5a0, Size: 1]
	float PositionX;//[Offset: 0x5a4, Size: 1]
	float NewPositionX;//[Offset: 0x5a8, Size: 1]
	float IconOpacity;//[Offset: 0x5ac, Size: 1]
	float Scale;//[Offset: 0x5b0, Size: 1]
	MulticastInlineDelegateProperty OnRemoveAccolade;//[Size: 1]
	bool bTransitionOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	MulticastInlineDelegateProperty OnShowAnimStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnShowAnimFinished;//[Size: 1]
	AccoladeDisplayInfo AccoladeInfo_New;//[Offset: 0x5f0, Size: 1]
	float PresentationSpeed;//[Offset: 0x658, Size: 1]
	float FadeOutDelayTimer;//[Offset: 0x65c, Size: 1]
	float ShowNextDelayTimer;//[Offset: 0x660, Size: 1]
	float Stacked Accolade Delay;//[Offset: 0x664, Size: 1]
	void SequenceEvent__ENTRYPOINTWBP_AccoladeMedal();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTWBP_AccoladeMedal();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTWBP_AccoladeMedal();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTWBP_AccoladeMedal();// 0x2cbecb0
	void ResetAnimations(Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue);// 0x2cbecb0
	void TickShowNextDelay(float DeltaTime, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x2cbecb0
	void ShowNextAccolade();// 0x2cbecb0
	void TickFadeOutDelay(float DeltaTime, bool CallFunc_LessEqual_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2cbecb0
	void SetPresentationSpeed(float NewPresentationSpeed);// 0x2cbecb0
	void PlayThudSFX(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0
	void StartSheenAnim(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void OnShowFinish();// 0x2cbecb0
	void OnSheenStart();// 0x2cbecb0
	void OnShowStart();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void PlayShowAnim();// 0x2cbecb0
	void PlayMoveAccoladeAnim(int Index, int TotalAccolade);// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void StartMoveAnim(float NewPositionX);// 0x2cbecb0
	void CloseMoveAnim();// 0x2cbecb0
	void HandleRemoveSelf();// 0x2cbecb0
	void PlayFadeOutAnim();// 0x2cbecb0
	void PlayTransitionOutAnim();// 0x2cbecb0
	void HandleAnimationStarted();// 0x2cbecb0
	void ExecuteUbergraph_WBP_AccoladeMedal(int EntryPoint, Texture* Temp_object_Variable, bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable, bool Temp_bool_Has_Been_Initd_Variable, bool K2Node_Event_IsDesignTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_Index, int K2Node_CustomEvent_TotalAccolade, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, float K2Node_CustomEvent_NewPositionX, bool Temp_bool_IsClosed_Variable, Texture* Temp_object_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_FInterpTo_ReturnValue, bool CallFunc_NearlyEqual_FloatFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, Vector2D CallFunc_GetPosition_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_FInterpTo_ReturnValue, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue, Texture* Temp_object_Variable, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Add_FloatFloat_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum Temp_byte_Variable, float CallFunc_FInterpTo_ReturnValue, Texture* K2Node_Select_Default, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_FInterpTo_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x2cbecb0
	void OnShowAnimFinished__DelegateSignature();// 0x2cbecb0
	void OnShowAnimStarted__DelegateSignature();// 0x2cbecb0
	void OnRemoveAccolade__DelegateSignature(Widget* Widget);// 0x2cbecb0

--------------------------------
Class: WBP_PostRogueSelectLoading_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WBP_ThrobberShield_C* WBP_ThrobberShield;//[Offset: 0x530, Size: 1]
	void OnInitialized();// 0x2cbecb0
	void OnTeamCinematicSkipped();// 0x2cbecb0
	void Player Begins Playing();// 0x2cbecb0
	void ExecuteUbergraph_WBP_PostRogueSelectLoading(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0

--------------------------------
Class: WBP_RadialSelect_C.KSRadialSelectionWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5c8, Size: 1]
	WidgetAnimation* WheelCycle_Left;//[Offset: 0x5d0, Size: 1]
	WidgetAnimation* WheelCycle_Generic;//[Offset: 0x5d8, Size: 1]
	WidgetAnimation* WheelCycle_Right;//[Offset: 0x5e0, Size: 1]
	WidgetAnimation* Show;//[Offset: 0x5e8, Size: 1]
	TextBlock* ActiveRadialMenuText;//[Offset: 0x5f0, Size: 1]
	Image* BGGradientLeft;//[Offset: 0x5f8, Size: 1]
	Image* BGGradientRight;//[Offset: 0x600, Size: 1]
	Image* BGImage;//[Offset: 0x608, Size: 1]
	BackgroundBlur* BlurVolume;//[Offset: 0x610, Size: 1]
	Image* CursorImg;//[Offset: 0x618, Size: 1]
	WBP_InputCallout_C* CycleLeftInputCallout;//[Offset: 0x620, Size: 1]
	HorizontalBox* CycleLeftPanel;//[Offset: 0x628, Size: 1]
	Overlay* CycleLeftPanelWrapper;//[Offset: 0x630, Size: 1]
	TextBlock* CycleLeftText;//[Offset: 0x638, Size: 1]
	WBP_InputCallout_C* CycleRightInputCallout;//[Offset: 0x640, Size: 1]
	HorizontalBox* CycleRightPanel;//[Offset: 0x648, Size: 1]
	Overlay* CycleRightPanelWrapper;//[Offset: 0x650, Size: 1]
	TextBlock* CycleRightText;//[Offset: 0x658, Size: 1]
	CanvasPanel* DividerContainer;//[Offset: 0x660, Size: 1]
	CanvasPanel* IconContainer;//[Offset: 0x668, Size: 1]
	Image* Image;//[Offset: 0x670, Size: 1]
	Image* Image;//[Offset: 0x678, Size: 1]
	Image* Image;//[Offset: 0x680, Size: 1]
	Image* Image;//[Offset: 0x688, Size: 1]
	TextBlock* RadialItemNameText;//[Offset: 0x690, Size: 1]
	SizeBox* RadialItemNameWrapper;//[Offset: 0x698, Size: 1]
	CanvasPanel* SelectorGroup;//[Offset: 0x6a0, Size: 1]
	HorizontalBox* SelectPrompt;//[Offset: 0x6a8, Size: 1]
	WBP_InputCallout_C* SelectPromptCallout;//[Offset: 0x6b0, Size: 1]
	WBP_InputCallout_C* ToggleBackInputCallout;//[Offset: 0x6b8, Size: 1]
	HorizontalBox* ToggleBackPrompt;//[Offset: 0x6c0, Size: 1]
	Border* TogglePromptContainer;//[Offset: 0x6c8, Size: 1]
	WBP_RadialMenuEntry_C* WBP_RadialMenuEntry;//[Offset: 0x6d0, Size: 1]
	WBP_RadialMenuEntry_C* WBP_RadialMenuEntry;//[Offset: 0x6d8, Size: 1]
	WBP_RadialMenuEntry_Divider_C* WBP_RadialMenuEntry_Divider;//[Offset: 0x6e0, Size: 1]
	WBP_RadialMenuHighlight_C* WBP_RadialMenuHighlight;//[Offset: 0x6e8, Size: 1]
	Image* WheelBg;//[Offset: 0x6f0, Size: 1]
	enum[] VisibleTextCosmeticSlots;//[Offset: 0x6f8, Size: 1]
	bool ActivatedItemSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	AkAudioEvent* CycleMenusSFX;//[Offset: 0x710, Size: 1]
	AkAudioEvent* HoverOptionsSFX;//[Offset: 0x718, Size: 1]
	AkAudioEvent* OpenMenusSFX;//[Offset: 0x720, Size: 1]
	AkAudioEvent* CloseMenusSFX;//[Offset: 0x728, Size: 1]
	WBP_InputCallout_C* HoldConfirmInputCallout;//[Offset: 0x730, Size: 1]
	AkAudioEvent* HoverOptionsRumbleSFX;//[Offset: 0x738, Size: 1]
	DataTable* ContextualPingTypesDT;//[Offset: 0x740, Size: 1]
	DataTable* ContextualPingMessagesDT;//[Offset: 0x748, Size: 1]
	void SetupSelectorForActivationMode(int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void IsItemUsable(KSItem* KSItem, out bool Return Value, bool CallFunc_IsInEmoteOnlyMode_ReturnValue, bool CallFunc_IsValid_ReturnValue, const GameplayTagContainer CallFunc_GetCollectionContainer_ReturnValue, bool CallFunc_HasTag_ReturnValue);// 0x2cbecb0
	void SetHoverForAllEntries(WBP_RadialMenuEntry_C* New Hovered Entry, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, int CallFunc_Array_Length_ReturnValue, Widget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, WBP_RadialMenuEntry_C* K2Node_DynamicCast_AsWBP_Radial_Menu_Entry, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void GetRadialEntryByIndex(int Index, out WBP_RadialMenuEntry_C* Entry, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, WBP_RadialMenuEntry_C* K2Node_DynamicCast_AsWBP_Radial_Menu_Entry, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, Key CallFunc_GetGamepadCancelButton_ReturnValue, Key CallFunc_GetKey_ReturnValue, Key CallFunc_GetGamepadConfirmButton_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, Key[] K2Node_MakeArray_Array, bool CallFunc_Array_Contains_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x2cbecb0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent, Key CallFunc_GetKey_ReturnValue, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2cbecb0
	void GetRadialItemData(int Item Index, out KSItem* KSItem, bool CallFunc_IsLobbyHUD_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, GameplayTag[] CallFunc_GetGameplayTagsForCosmeticSlot_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, PlayerController* CallFunc_GetNormalOwningPlayer_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, KSEquipmentManagerComponent* CallFunc_GetEquipmentManagerComponent_ReturnValue, KSJobItem* CallFunc_GetPreferredJob_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSEquipment* CallFunc_GetEquipmentByEquipPoint_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSItem* CallFunc_GetKSItem_ReturnValue, KSMercManager* CallFunc_GetMercManager_ReturnValue, KSItem* CallFunc_GetEquippedCosmeticItemBySlot_CosmeticItem, bool CallFunc_GetEquippedCosmeticItemBySlot_ReturnValue);// 0x2cbecb0
	bool NavigateConfirm(bool CallFunc_IsLobbyHUD_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue);// 0x2cbecb0
	bool NavigateBack(bool CallFunc_IsLobbyHUD_ReturnValue);// 0x2cbecb0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, bool CallFunc_IsLobbyHUD_ReturnValue, Key CallFunc_PointerEvent_GetEffectingButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, EventReply CallFunc_Handled_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue);// 0x2cbecb0
	void SetRadialItemName(int Index, enum Temp_byte_Variable, bool CallFunc_IsLobbyHUD_ReturnValue, enum Temp_byte_Variable, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, bool Temp_bool_Variable, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, FText CallFunc_MakeLiteralText_ReturnValue, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, KSMercManager* CallFunc_GetMercManager_ReturnValue, KSJobItem* CallFunc_GetPreferredJob_ReturnValue, KSItem* CallFunc_GetEquippedCosmeticItemBySlot_CosmeticItem, bool CallFunc_GetEquippedCosmeticItemBySlot_ReturnValue, FText CallFunc_GetItemName_ReturnValue, PlayerController* CallFunc_GetNormalOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Get_Radial_Item_Name_from_Player_Controller_RadialItemName, bool CallFunc_EqualEqual_TextText_ReturnValue, enum K2Node_Select_Default);// 0x2cbecb0
	void SetupInputCallout(WBP_InputCallout_C* InputCallout, PUMG_HUD* HUD, byte InputState);// 0x2cbecb0
	bool IsSelectorVisible(bool CallFunc_IsVisible_ReturnValue);// 0x2cbecb0
	void ShowRadialMenuCycle(bool Show);// 0x2cbecb0
	void Get Radial Item Name from Player Controller(int Index, KSPlayerController* KSPlayerController, out FText RadialItemName, GameplayTag[] SelectedSlots, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, GameplayTag[] CallFunc_GetGameplayTagsForCosmeticSlot_ReturnValue, FText CallFunc_GetRadialItemNameByEquipPoint_ReturnValue);// 0x2cbecb0
	void GetTextForCosmeticSlot(enum CosmeticSlot, out FText Text, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void SetRadialMenuNames(enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, FText CallFunc_GetTextForCosmeticSlot_Text, enum CallFunc_GetContiguousCosmeticSlotMenu_ReturnValue, FText CallFunc_GetTextForCosmeticSlot_Text, enum CallFunc_GetContiguousCosmeticSlotMenu_ReturnValue, FText CallFunc_GetTextForCosmeticSlot_Text);// 0x2cbecb0
	float GetDeadZone(bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, byte CallFunc_GetCurrentInputState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float K2Node_Select_Default);// 0x2cbecb0
	void RefreshOptions(WBP_RadialMenuEntry_C* CreatedRadialEntryWidget, KSItem* FoundRadialEntryItem, bool UseQuipSettings, bool UseContextualPingSettings, bool ShouldShowSmallText, GameplayTag[] CosmeticSlots, KSQuip* K2Node_DynamicCast_AsKSQuip, bool K2Node_DynamicCast_bSuccess, KSCommunication* K2Node_DynamicCast_AsKSCommunication, bool K2Node_DynamicCast_bSuccess, LinearColor CallFunc_GetPingColorByType_PingColor, bool CallFunc_GetPingColorByType_ReturnValue, Texture2D* CallFunc_GetPingIconByMessage_PingIcon, bool CallFunc_GetPingIconByMessage_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, KSItem* CallFunc_GetRadialItemData_KSItem, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsItemUsable_Return_Value, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool Temp_bool_Variable, int CallFunc_GetOptionsCount_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_GetOptionsCount_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, WBP_RadialMenuEntry_Divider_C* CallFunc_Create_ReturnValue, int CallFunc_GetOptionsCount_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, float CallFunc_Divide_FloatFloat_ReturnValue, WBP_RadialMenuEntry_C* CallFunc_Create_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, Texture2D* Temp_softobject_Variable, LinearColor K2Node_Select_Default, Texture2D* K2Node_Select_Default, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x2cbecb0
	int GetOptionsCount(int Slots, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, GameplayTag[] CallFunc_GetGameplayTagsForCosmeticSlot_ReturnValue, int CallFunc_Array_Length_ReturnValue);// 0x2cbecb0
	float GetWheelSize(float CallFunc_GetUMG_DPI_Scaling_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void HideSelector();// 0x2cbecb0
	void ShowSelector();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void RadialOptionUnhover();// 0x2cbecb0
	void RadialOptionSelected(int Index);// 0x2cbecb0
	void RadialOptionHovered(int Index);// 0x2cbecb0
	void TraceSelectionCursor(float Radius, float Angle);// 0x2cbecb0
	void Handle Equipment Change(KSEquipment* AddedEquipment);// 0x2cbecb0
	void ChangeToNewRadialMenu();// 0x2cbecb0
	void OnCycledMenus(bool bCycledRight);// 0x2cbecb0
	void SetupForRadialWheelMode();// 0x2cbecb0
	void InitializeWidgetNavigation();// 0x2cbecb0
	void Handle View State Changed(FName CurrentRoute, FName PreviousRoute, enum Layer);// 0x2cbecb0
	void NetMulticast_PlayCinematicEmote(KSLobbyCharacter* Character, KSEmote* Emote);// 0x2cbecb0
	void Server_PlayCinematicEmote(KSLobbyCharacter* Character, KSEmote* Emote);// 0x2cbecb0
	void ExecuteUbergraph_WBP_RadialSelect(int EntryPoint, const AkExternalSourceInfo[] Temp_struct_Variable, int K2Node_Event_Index, int K2Node_Event_Index, KSItem* CallFunc_GetRadialItemData_KSItem, KSItem* CallFunc_GetRadialItemData_KSItem, bool CallFunc_IsItemUsable_Return_Value, bool CallFunc_IsItemUsable_Return_Value, KSEmote* K2Node_DynamicCast_AsKSEmote, bool K2Node_DynamicCast_bSuccess, WBP_RadialMenuEntry_C* CallFunc_GetRadialEntryByIndex_Entry, float CallFunc_Conv_IntToFloat_ReturnValue, KSItem* CallFunc_GetRadialItemData_KSItem, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_IsItemUsable_Return_Value, KSEmote* K2Node_DynamicCast_AsKSEmote, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetOptionsCount_ReturnValue, float K2Node_Event_Radius, float K2Node_Event_Angle, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_GetDeadZone_ReturnValue, PlayerController* CallFunc_GetNormalOwningPlayer_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_FClamp_ReturnValue, bool CallFunc_ActivateRadialMenuItem_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_GetRotated2D_ReturnValue, KSEquipment* K2Node_CustomEvent_AddedEquipment, PUMG_HUD* K2Node_Event_hud, byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_Event_IsDesignTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_Event_bCycledRight, const delegate Temp_delegate_Variable, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_GetLastHoveredIndex_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, Widget* CallFunc_SetFocusToThis_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const AkExternalSourceInfo[] Temp_struct_Variable, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSPartyDataFactory* CallFunc_GetPartyDataFactory_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsLobbyHUD_ReturnValue, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const AkExternalSourceInfo[] Temp_struct_Variable, byte CallFunc_GetCurrentInputState_ReturnValue, FName K2Node_CustomEvent_CurrentRoute, FName K2Node_CustomEvent_PreviousRoute, enum K2Node_CustomEvent_Layer, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsSelectorActive_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetNormalOwningPlayer_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_PostEvent_ReturnValue, KSEquipmentManagerComponent* CallFunc_GetEquipmentManagerComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSLobbyCharacter* K2Node_CustomEvent_Character, KSEmote* K2Node_CustomEvent_Emote, KSLobbyCharacter* K2Node_CustomEvent_Character, KSEmote* K2Node_CustomEvent_Emote, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSRadialSelectionWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	GameplayTag[] EmoteSlots;//[Offset: 0x528, Size: 1]
	GameplayTag[] QuipSlots;//[Offset: 0x538, Size: 1]
	GameplayTag[] CommunicationSlots;//[Offset: 0x548, Size: 1]
	GameplayTag[] SpraySlots;//[Offset: 0x558, Size: 1]
	FName[] AdditionalInputsToDisableOnOpen;//[Offset: 0x568, Size: 1]
	enum[] RadialMenuCosmeticSlots;//[Offset: 0x578, Size: 1]
	bool bCycleBetweenMenusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bCanOpenWheelInMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	enum RadialWheelActivationMode;//[Offset: 0x591, Size: 1]
	void UpdateLastSelectedIndex(int NewIndex);// 0x29486b0
	void UpdateLastHoveredIndex(int NewHoveredIndex);// 0x2948630
	void TraceSelectionCursor(float Radius, float Angle);// 0x2cbecb0
	void ShowSelector();// 0x2cbecb0
	void SetupForRadialWheelMode();// 0x2916a30
	void RadialOptionUnhover();// 0x2cbecb0
	void RadialOptionSelected(int Index);// 0x2cbecb0
	void RadialOptionHovered(int Index);// 0x2cbecb0
	void OpenSpecifiedRadialMenu(enum CosmeticSlot);// 0x2947e50
	void OnRadialMenuUseLastSelection(enum ButtonCosmeticSlot);// 0x2947c70
	void OnRadialMenuReleased(enum ButtonCosmeticSlot, bool bIsContextualPingHold);// 0x2947ba0
	void OnRadialMenuPressed(enum ButtonCosmeticSlot, bool bIsContextualPingHold);// 0x2947ad0
	void OnRadialMenuForceClosed();// 0x2945ea0
	void OnCycleMenusRight();// 0x2947a20
	void OnCycleMenusLeft();// 0x2947a00
	void OnCycledMenus(bool bCycledRight);// 0x29041f0
	void OnCinematicSubLevelEnabled(FString CinematicSubLevelName);// 0x29478d0
	void OnCinematicSubLevelDisabled(FString CinematicSubLevelName);// 0x2947830
	bool IsSelectorVisible();// 0x2cbecb0
	bool IsSelectorActive();// 0x29476e0
	bool IsLobbyHUD();// 0x2947690
	bool IsInFullControlMode();// 0x2947660
	bool IsInEmoteOnlyMode();// 0x2947630
	bool IsCycleBetweenMenusEnabled();// 0x2947600
	void InitializeTracking();// 0x29475e0
	void HideSelector();// 0x2cbecb0
	void HandleOnShowPopup();// 0x2945ea0
	void HandleInputStateChanged(byte NewInputState);// 0x2947120
	float GetWheelSize();// 0x2cbecb0
	enum GetRadialWheelActivationMode();// 0x29470b0
	int GetOptionsCount();// 0x2cbecb0
	int GetLastSelectedIndexForCosmeticSlot(enum CosmeticSlot);// 0x2946560
	int GetLastHoveredIndex();// 0x2946530
	enum GetInitialRadialMenu();// 0x2946500
	GameplayTag[] GetGameplayTagsForCosmeticSlot(enum CosmeticSlot);// 0x2946430
	float GetDeadZone();// 0x2cbecb0
	enum GetContiguousCosmeticSlotMenu(bool bRightSide);// 0x2946070
	enum GetActiveCosmeticSlotMenu();// 0x2946040
	void DummyFunction();// 0xd76f80
	void ChangeToNewRadialMenu();// 0x2cbecb0
	void ButtonClicked();// 0x2945ec0
	void BackPressed();// 0x2945ea0
	bool ActivateRadialMenuItem(int Index, KSPlayerController* PlayerController);// 0x2945de0

--------------------------------
Class: WBP_RadialMenuEntry_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	TextBlock* BigItemNameText;//[Offset: 0x240, Size: 1]
	Image* DisabledIcon;//[Offset: 0x248, Size: 1]
	WidgetSwitcher* DisplayTypeSwitcher;//[Offset: 0x250, Size: 1]
	Overlay* HoverOverlay;//[Offset: 0x258, Size: 1]
	TextBlock* ItemNameText;//[Offset: 0x260, Size: 1]
	WBP_AsyncIcon_C* WBP_AsyncIcon;//[Offset: 0x268, Size: 1]
	void SetHoverOverlay(bool IsShowingHover, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void SetDisabled(bool IsDisabled, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, float Temp_float_Variable, float Temp_float_Variable, LinearColor Temp_struct_Variable, float K2Node_Select_Default, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void ShowBigTextInsteadOfIcon(bool ShowBigText);// 0x2cbecb0
	void SetEmpty();// 0x2cbecb0
	void SetIconColor(LinearColor LinearColor);// 0x2cbecb0
	void SetIconFromSoftTexture(Texture2D* Texture);// 0x2cbecb0
	void Set IconAndName(KSItem* Item, bool ShowSmallText, FText CallFunc_GetItemName_ReturnValue);// 0x2cbecb0
	void SetRotation(float Angle, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x2cbecb0
	void OnInitialized();// 0x2cbecb0
	void ExecuteUbergraph_WBP_RadialMenuEntry(int EntryPoint, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_RadialMenuEntry_Divider_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]

--------------------------------
Class: WBP_RadialMenuHighlight_C.UserWidget.Widget.Visual.Object
	WBP_RadialMenuEntry_Divider_Highlight_C* DividerLeft;//[Offset: 0x238, Size: 1]
	WBP_RadialMenuEntry_Divider_Highlight_C* DividerRight;//[Offset: 0x240, Size: 1]
	Image* Highlight;//[Offset: 0x248, Size: 1]
	void SetDisabledAppearance(bool IsDisabled, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, float K2Node_Select_Default, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2cbecb0
	MaterialInstanceDynamic* GetHighlightMat(MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2cbecb0
	void SetPosition(float Position, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, MaterialInstanceDynamic* CallFunc_GetHighlightMat_ReturnValue, float CallFunc_K2_GetScalarParameterValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2cbecb0
	void SetWidth(float Width, MaterialInstanceDynamic* CallFunc_GetHighlightMat_ReturnValue, float CallFunc_K2_GetScalarParameterValue_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_RadialMenuEntry_Divider_Highlight_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WBP_AsyncIcon_C* WBP_AsyncIcon;//[Offset: 0x240, Size: 1]
	void SetDisabledAppearance(bool IsDisabled, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, float K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void OnInitialized();// 0x2cbecb0
	void ExecuteUbergraph_WBP_RadialMenuEntry_Divider_Highlight(int EntryPoint, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_SideSwapNotifyScreen_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* HideScreen;//[Offset: 0x530, Size: 1]
	WidgetAnimation* ShowScreen;//[Offset: 0x538, Size: 1]
	WBP_ScorePips_C* BluePips;//[Offset: 0x540, Size: 1]
	TextBlock* BlueScoreText;//[Offset: 0x548, Size: 1]
	CanvasPanel* Content;//[Offset: 0x550, Size: 1]
	Image* CurrentRoleIcon;//[Offset: 0x558, Size: 1]
	TextBlock* GameModeRound;//[Offset: 0x560, Size: 1]
	WBP_ScorePips_C* RedPips;//[Offset: 0x568, Size: 1]
	TextBlock* RedScoreText;//[Offset: 0x570, Size: 1]
	TextBlock* RoleText;//[Offset: 0x578, Size: 1]
	TextBlock* RoundsToWin;//[Offset: 0x580, Size: 1]
	TextBlock* TeamLabel;//[Offset: 0x588, Size: 1]
	float HoldTime;//[Offset: 0x590, Size: 1]
	void BindToPlayerTeamChanged(delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSPlayerState* CallFunc_GetKSPlayerState_ReturnValue);// 0x2cbecb0
	void Update For Team Objective Role(KSTeamState* Team, FText CallFunc_Get_Team_Role_Text_Return_Value, Texture2D* CallFunc_Get_Team_Role_Icon_ReturnValue);// 0x2cbecb0
	void OnPlayerTeamChanged(KSPlayerState* KSPlayerState, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void Get Team Role(KSTeamState* Team, out enum Role, bool Temp_bool_Variable, bool CallFunc_IsAttacking_ReturnValue, bool CallFunc_IsDefending_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void GetTeamScores(out int Ally Score, out int Enemy Score, int Found Enemy Score, int Found Ally Score, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSTeamState*[] CallFunc_GetTeams_ReturnValue, int CallFunc_Array_Length_ReturnValue, KSTeamState* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, enum CallFunc_IsFriendlyWithLocalPlayer_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	Texture2D* Get Team Role Icon(KSTeamState* Team, bool Temp_bool_Variable, enum CallFunc_Get_Team_Role_Role, Texture2D* Temp_object_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Texture2D* Temp_object_Variable, Texture2D* K2Node_Select_Default);// 0x2cbecb0
	void Get Team Role Text(KSTeamState* Team, out FText Return Value, bool Temp_bool_Variable, enum CallFunc_Get_Team_Role_Role, FText Temp_text_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText Temp_text_Variable, FText K2Node_Select_Default);// 0x2cbecb0
	void Get Owning Player Team(out KSTeamState* Return Value, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSTeamState* CallFunc_GetTeamFor_ReturnValue);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void Handle Show Anim Finished();// 0x2cbecb0
	void Handle Hide Anim Finished();// 0x2cbecb0
	void Handle Teams Flipped();// 0x2cbecb0
	void ExecuteUbergraph_WBP_SideSwapNotifyScreen(int EntryPoint, PUMG_HUD* K2Node_Event_hud, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText Temp_text_Variable, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_GetTeamScores_Ally_Score, int CallFunc_GetTeamScores_Enemy_Score, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_GetRoundsToWin_RoundsToWin, bool CallFunc_GetRoundsToWin_ReturnValue, bool Temp_bool_Variable, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, FText CallFunc_GetQueueDisplayName_DisplayNameText, bool CallFunc_GetQueueDisplayName_ReturnValue, KSTeamState* CallFunc_Get_Owning_Player_Team_Return_Value, enum CallFunc_Get_Team_Role_Role, FText CallFunc_TextToUpper_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText K2Node_Select_Default, KSTeamState* CallFunc_Get_Owning_Player_Team_Return_Value, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_ScorePips_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	HorizontalBox* PipsContainer;//[Offset: 0x530, Size: 1]
	WBP_ScorePipEntry_C* WBP_ScorePipEntry;//[Offset: 0x538, Size: 1]
	WBP_ScorePipEntry_C* WBP_ScorePipEntry;//[Offset: 0x540, Size: 1]
	WBP_ScorePipEntry_C* WBP_ScorePipEntry;//[Offset: 0x548, Size: 1]
	int Current Filled Pips;//[Offset: 0x550, Size: 1]
	int LastUpdatedFilledPips;//[Offset: 0x554, Size: 1]
	LinearColor PipColor;//[Offset: 0x558, Size: 1]
	void Set Total Pips(int Pips Number, int CallFunc_Subtract_IntInt_ReturnValue, Margin K2Node_MakeStruct_Margin, int Temp_int_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, WBP_ScorePipEntry_C* CallFunc_Create_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, HorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue);// 0x2cbecb0
	void Set Pips Number(int Pips Number, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, WBP_ScorePipEntry_C* K2Node_DynamicCast_AsWBP_Score_Pip_Entry, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_ScorePips(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: WBP_ScorePipEntry_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* Fill;//[Offset: 0x530, Size: 1]
	LinearColor FillColor;//[Offset: 0x538, Size: 1]
	void Set Pip(bool On, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_ScorePipEntry(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: WBP_SystemNotify_HighLatency_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]

--------------------------------
Class: WBP_SystemNotify_HighVariance_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]

--------------------------------
Class: WBP_SystemNotify_LossyConnection_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]

--------------------------------
Class: WBP_SystemNotify_NetworkDisconnect_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]

--------------------------------
Class: WBP_SystemNotify_TerribleLatency_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]

--------------------------------
Class: WBP_SystemNotify_TerribleVariance_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]

--------------------------------
Class: WBP_TeamMessage_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	CanvasPanel* AnnouncementWrapper;//[Offset: 0x530, Size: 1]
	int CurrentTeamAdvantage;//[Offset: 0x538, Size: 1]
	PUMG_Widget* CurrentAnnouncement;//[Offset: 0x540, Size: 1]
	PUMG_Widget*[] QueuedAnnouncments;//[Offset: 0x548, Size: 1]
	void AbortCurrentAnnouncement(bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void ShowAnnouncement(AnnouncementData Announcement, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, WBP_CountdownVersusMessage_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0
	void HandleOnAnnouncement(AnnouncementData Announcement, bool CallFunc_CheckShouldShow_Return, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void CheckShouldShow(AnnouncementData AnnouncementData, out bool Return, enum AnnouncementType, bool ShouldShow, KSGameMode_RoundGame* CallFunc_GetKSGameMode_RoundGame_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetMatchPhaseName_ReturnValue, bool K2Node_SwitchName_CmpSuccess, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsInPlay_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void OnAnnouncementFinished();// 0x2cbecb0
	void OnKillCamEnabled(bool bEnabled);// 0x2cbecb0
	void HandleRoundSetup(out const RoundInitState RoundInitState);// 0x2cbecb0
	void HandleQueuedAnnoucements();// 0x2cbecb0
	void OnDelayedHUDAnnouncementComponentCreated(KSPlayerController* OwningPlayerController, KSHUDAnnouncementComponent* SpawnedHUDAnnouncementComponent);// 0x2cbecb0
	void ExecuteUbergraph_WBP_TeamMessage(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_CustomEvent_bEnabled, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, LocalPlayer* CallFunc_GetOwningLocalPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSLocalPlayer* K2Node_DynamicCast_AsKSLocal_Player, bool K2Node_DynamicCast_bSuccess, KSKillCam* CallFunc_GetKillCam_ReturnValue, const RoundInitState K2Node_CustomEvent_RoundInitState, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_Widget* CallFunc_Array_Get_Item, delegate K2Node_CreateDelegate_OutputDelegate, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSPlayerController* K2Node_CustomEvent_OwningPlayerController, KSHUDAnnouncementComponent* K2Node_CustomEvent_SpawnedHUDAnnouncementComponent, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSHUDAnnouncementComponent* CallFunc_GetHUDAnnouncementComponent_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: WBP_CountdownVersusMessage_C.KSAnnouncementQueuedMessageWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x570, Size: 1]
	WidgetAnimation* DisplayVS_only;//[Offset: 0x578, Size: 1]
	WidgetAnimation* Display;//[Offset: 0x580, Size: 1]
	TextBlock* EnemyCount;//[Offset: 0x588, Size: 1]
	TextBlock* FriendlyCount;//[Offset: 0x590, Size: 1]
	TextBlock* Message;//[Offset: 0x598, Size: 1]
	int CurrentTeamAdvantage;//[Offset: 0x5a0, Size: 1]
	WBP_TeamMessage_C* ParentWidget;//[Offset: 0x5a8, Size: 1]
	void Construct();// 0x2cbecb0
	void OnAnimFinished();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_CountdownVersusMessage(int EntryPoint, LinearColor CallFunc_GetFriendlyColor_Return_Value, SlateColor K2Node_MakeStruct_SlateColor, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsDesignTime, LinearColor CallFunc_GetEnemyColor_Return_Value, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0

--------------------------------
Class: WBP_ToastNotification_Manager_C.KSToastNotificationWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x568, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x570, Size: 1]
	VerticalBox* ChallengeNotificationContainer;//[Offset: 0x578, Size: 1]
	VerticalBox* NotificationContainer;//[Offset: 0x580, Size: 1]
	FText[] LocalizeTexts;//[Offset: 0x588, Size: 1]
	bool CanDisplaySocialToasts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	void PushAwardsEarnedInMatch(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ToastData[] CallFunc_GetPostMatchToasts_ReturnValue, int CallFunc_Array_Length_ReturnValue, ToastData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void DisplayChallengeToast(WBP_Toast2_C* Toast, PanelSlot* CallFunc_AddChild_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void DisplayToast(WBP_ToastNotifcation_Entry_C* Toast, delegate K2Node_CreateDelegate_OutputDelegate, Margin K2Node_MakeStruct_Margin, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x2cbecb0
	void OnToastNotificationReceived(ToastData ToastData);// 0x2cbecb0
	void HandleToastNotificationRemove(KSWidget* ToastNotification);// 0x2cbecb0
	void OnToastIntroAnimFinished();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void HandleChallengeToastNotificationRemove(KSWidget* ToastNotification);// 0x2cbecb0
	void ExecuteUbergraph_WBP_ToastNotification_Manager(int EntryPoint, ToastData K2Node_Event_ToastData, WBP_ToastNotifcation_Entry_C* CallFunc_Create_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, KSWidget* K2Node_CustomEvent_ToastNotification, WBP_Toast2_C* CallFunc_Create_ReturnValue, bool CallFunc_RemoveChild_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSWidget* K2Node_CustomEvent_ToastNotification, bool CallFunc_RemoveChild_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSToastNotificationWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnToastReceived;//[Size: 1]
	int MaxToastNotification;//[Offset: 0x538, Size: 1]
	int CurrentToastCount;//[Offset: 0x53c, Size: 1]
	bool IsBusy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	ToastData[] ToastQueue;//[Offset: 0x548, Size: 1]
	ToastData[] PostMatchToasts;//[Offset: 0x558, Size: 1]
	void TestDisplayChallengeNotification();// 0xd76f80
	void StoreToastQueue(ToastData ToastNotification);// 0x2962a00
	void ShowToastNotification();// 0x29629e0
	void OnWeaponMilestoneCompleted(KSActivityInstance* Activity, int Tier, int Count);// 0x2962430
	void OnToastNotificationReceived(ToastData ToastData);// 0x2cbecb0
	void OnChallengeCompleted(KSActivityInstance* Activity);// 0x2962140
	void OnAwardsCompleted(KSActivityInstance* Activity);// 0x2962040
	void NotifyToastShown();// 0x2961fa0
	void NotifyToastHidden();// 0x2961f80
	void HandlePartyMemberPromoted(int64 PlayerId);// 0x2961d50
	void HandlePartyMemberLeftGeneric();// 0x2961d30
	void HandlePartyMemberLeft(PUMG_PartyMemberData PartyMemberData);// 0x2961c00
	void HandlePartyMemberKick(int64 PlayerId);// 0x2961b80
	void HandlePartyMemberAdded(PUMG_PartyMemberData PartyMemberData);// 0x2961a50
	void HandlePartyLocalPlayerLeft();// 0x2961a30
	void HandlePartyInviteSent(FText PlayerName);// 0x2961950
	void HandlePartyInviteRejected();// 0x2961930
	void HandlePartyInviteReceived(PUMG_PlayerInfo* PartyInviter);// 0x29618b0
	void HandlePartyInviteError(FText PlayerName);// 0x29617d0
	void HandlePartyInviteAccepted();// 0x29617b0
	void HandlePartyDisbanded();// 0x2961790
	void HandleFriendRejected(FText PlayerName);// 0x29616b0
	void HandleFriendInviteReceived(PUMG_FriendData PlayerData);// 0x2961590
	void HandleFriendAddSuccess(FString PlayerName);// 0x29613d0
	void HandleFriendAdded(FText PlayerName);// 0x29614b0
	KSWeaponMasteryManager* GetWeaponMasteryManager();// 0x2961140
	ToastData[] GetPostMatchToasts();// 0x2960f10
	KSPlayerChallengesManager* GetPlayerChallengesManager();// 0x2960ee0
	KSAwardsManager* GetPlayerAwardsManager();// 0x2960eb0
	KSPartyDataFactory* GetPartyDataFactory();// 0x2936a50
	bool GetNext(out ToastData NextToastNotification);// 0x2960d70
	KSFriendDataFactory* GetFriendDataFactory();// 0x295cc20
	KSEventChallengesManager* GetEventChallengesManager();// 0x2960d40
	KSBattlePassProgressionManager* GetBattlePassProgressionManager();// 0x2960c90
	void CreatePlayerLevelUpToasts(KSActivityInstance* PlayerLevelActivityInstance, ActivityTier TierObtained);// 0x29609c0
	void CreateMercMasteryLevelUpToasts(KSActivityInstance* MercMasteryActivityInstance, ActivityTier TierObtained);// 0x29608a0
	void CreateEventChallengeCompleteToasts(KSActivityInstance* EventChallengeActivityInstance);// 0x2960820
	void CreateBoostActivationToastBySpentItem(PlatformInventoryItem* SpentItem);// 0x29607a0
	void CreateBoostActivationToastByAcquisition(PUMG_StoreItem* AcquisitionItem);// 0x2960720
	void ClearPostMatchQueue();// 0x2960700
	void ClearNotificationQueue();// 0x29606e0

--------------------------------
Class: ToastData
	enum ToastCategory;//[Offset: 0x0, Size: 1]
	FText Title;//[Offset: 0x8, Size: 1]
	FText Message;//[Offset: 0x20, Size: 1]
	PUMG_StoreItem* Reward;//[Offset: 0x38, Size: 1]
	PlatformInventoryItem* OptionalItemValue;//[Offset: 0x40, Size: 1]
	int OptionalIntValue;//[Offset: 0x48, Size: 1]
	KSActivity* OptionalActivityValue;//[Offset: 0x50, Size: 1]

--------------------------------
Class: WBP_Toast2_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* Waiting;//[Offset: 0x530, Size: 1]
	WidgetAnimation* Outro;//[Offset: 0x538, Size: 1]
	WidgetAnimation* Intro;//[Offset: 0x540, Size: 1]
	SizeBox* 1pxBar;//[Offset: 0x548, Size: 1]
	SizeBox* 1pxBar;//[Offset: 0x550, Size: 1]
	TextBlock* AchievementDetails;//[Offset: 0x558, Size: 1]
	TextBlock* AchievementName;//[Offset: 0x560, Size: 1]
	TextBlock* AchievementType;//[Offset: 0x568, Size: 1]
	Image* Back;//[Offset: 0x570, Size: 1]
	Image* BottomBar;//[Offset: 0x578, Size: 1]
	Image* EdgeGlowBottom;//[Offset: 0x580, Size: 1]
	Image* EdgeGlowTop;//[Offset: 0x588, Size: 1]
	Image* Gradient;//[Offset: 0x590, Size: 1]
	Image* HeaderBar;//[Offset: 0x598, Size: 1]
	Image* IconBack;//[Offset: 0x5a0, Size: 1]
	WidgetSwitcher* IconSwitcher;//[Offset: 0x5a8, Size: 1]
	WBP_RogueMasteryPortrait_C* MasteryPortrait;//[Offset: 0x5b0, Size: 1]
	SizeBox* PlayerLevel;//[Offset: 0x5b8, Size: 1]
	TextBlock* PlayerLevelText;//[Offset: 0x5c0, Size: 1]
	WBP_AsyncIcon_C* ToastIcon;//[Offset: 0x5c8, Size: 1]
	Image* TopBar;//[Offset: 0x5d0, Size: 1]
	MulticastInlineDelegateProperty OnRemoveToastNotification;//[Size: 1]
	MulticastInlineDelegateProperty FinishedOutroAnimation;//[Size: 1]
	ToastData ToastData;//[Offset: 0x5f8, Size: 1]
	WidgetAnimation* NewVar;//[Offset: 0x650, Size: 1]
	float WaitDuration;//[Offset: 0x658, Size: 1]
	float DEFAULT_WAIT_DURATION;//[Offset: 0x65c, Size: 1]
	void DisplayWeaponMasteryToast(SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetFormattedNameDisplay_ReturnValue);// 0x2cbecb0
	void DisplayEventMissionToast(GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, KSEventChallengesManager* CallFunc_GetEventChallengesManager_ReturnValue, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPremiumChallenge_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetFormattedNameDisplay_ReturnValue);// 0x2cbecb0
	void DisplayPlayerLevelUp(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	void DisplayBoostActivation(bool CallFunc_IsValid_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, const GameplayTagContainer CallFunc_GetCollectionContainer_ReturnValue, FText CallFunc_GetItemName_ReturnValue, SlateColor CallFunc_GetRarityHighlightColorByTag_RarityColor, SlateColor CallFunc_GetRarityColorByTag_RarityColor, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetName_ReturnValue);// 0x2cbecb0
	void DisplayBattlePassUnlock(FText CallFunc_GetItemName_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemDescription_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlatformInventoryItem* CallFunc_GetInventoryItem_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, PlatformInventoryItem* K2Node_DynamicCast_AsPlatform_Inventory_Item, bool K2Node_DynamicCast_bSuccess, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemName_ReturnValue, FText CallFunc_GetItemType_ItemType);// 0x2cbecb0
	void DisplayAwardUnlock(FText CallFunc_GetItemName_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemDescription_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlatformInventoryItem* CallFunc_GetInventoryItem_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, PlatformInventoryItem* K2Node_DynamicCast_AsPlatform_Inventory_Item, bool K2Node_DynamicCast_bSuccess, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemName_ReturnValue, FText CallFunc_GetItemType_ItemType);// 0x2cbecb0
	void DisplayItemUnlock(SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemName_ReturnValue, FText CallFunc_GetItemType_ItemType);// 0x2cbecb0
	void DisplayMercMasteryLevelUp(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, KSJobItem* K2Node_DynamicCast_AsKSJob_Item, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetItemName_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2cbecb0
	void DisplayChallengeAchievement(bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_MatchesTag_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetFormattedNameDisplay_ReturnValue);// 0x2cbecb0
	void OnOutroFinished();// 0x2cbecb0
	void OnWaitingFinished(const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void OnIntroFinished(delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_SafeDivide_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void SetRarityTint(LinearColor RarityBase, LinearColor RarityHighlight);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_Toast2(int EntryPoint, bool Temp_bool_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, bool K2Node_Event_IsDesignTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, AkAudioEvent* K2Node_Select_Default, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0
	void FinishedOutroAnimation__DelegateSignature();// 0x2cbecb0
	void OnRemoveToastNotification__DelegateSignature(KSWidget* ToastWidget);// 0x2cbecb0

--------------------------------
Class: WBP_ToastNotifcation_Entry_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* OffsetY;//[Offset: 0x530, Size: 1]
	WidgetAnimation* Outro;//[Offset: 0x538, Size: 1]
	WidgetAnimation* Wait;//[Offset: 0x540, Size: 1]
	WidgetAnimation* Intro;//[Offset: 0x548, Size: 1]
	Image* AnimFade;//[Offset: 0x550, Size: 1]
	Image* AnimSwatch;//[Offset: 0x558, Size: 1]
	Image* ColorSwatch;//[Offset: 0x560, Size: 1]
	Image* Glow;//[Offset: 0x568, Size: 1]
	Image* Icon;//[Offset: 0x570, Size: 1]
	TextBlock* Message;//[Offset: 0x578, Size: 1]
	ToastData ToastData;//[Offset: 0x580, Size: 1]
	MulticastInlineDelegateProperty OnRemoveToastNotification;//[Size: 1]
	MulticastInlineDelegateProperty FinishedIntroAnimation;//[Size: 1]
	AkAudioEvent* SFXErrorToast;//[Offset: 0x5f8, Size: 1]
	AkAudioEvent* SFXFriendToast;//[Offset: 0x600, Size: 1]
	AkAudioEvent* SFXInfoToast;//[Offset: 0x608, Size: 1]
	AkAudioEvent* SFXPartyToast;//[Offset: 0x610, Size: 1]
	AkAudioEvent* SFXBoostActivationToast;//[Offset: 0x618, Size: 1]
	void SetViewStyle(enum ToastCategory, bool K2Node_SwitchEnum_CmpSuccess, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void PlayOutroAnimation();// 0x2cbecb0
	void HandleOutroAnimFinished();// 0x2cbecb0
	void PlayWaitAnimation();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_WBP_ToastNotifcation_Entry(int EntryPoint, enum Temp_byte_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, const delegate Temp_delegate_Variable, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0
	void FinishedIntroAnimation__DelegateSignature();// 0x2cbecb0
	void OnRemoveToastNotification__DelegateSignature(KSWidget* ToastWidget);// 0x2cbecb0

--------------------------------
Class: WBP_VoiceActivity_C.KSVoiceActivityWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x598, Size: 1]
	VerticalBox* VoiceBox;//[Offset: 0x5a0, Size: 1]
	<FString,WBP_VoiceParticipantElement_C*> AccountWidgetMap;//[Offset: 0x5a8, Size: 1]
	void Voice Participant Updated(FString Account, bool IsTalking, bool IsMuted, KSPlayerState* CallFunc_GetPlayerStateByVoiceId_ReturnValue, FText CallFunc_GetPlayerNameByVoiceId_OutPlayerName, bool CallFunc_GetPlayerNameByVoiceId_ReturnValue, WBP_VoiceParticipantElement_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void AddVoiceParticipant(FString Account, bool CallFunc_Map_Contains_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, WBP_VoiceParticipantElement_C* CallFunc_Create_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, Margin K2Node_MakeStruct_Margin);// 0x2cbecb0
	void RemoveVoiceParticipant(FString Account, WBP_VoiceParticipantElement_C* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_RemoveChild_ReturnValue);// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void OnVoiceParticipantRemoved(FString AccountId);// 0x2cbecb0
	void OnVoiceParticipantAdded(FString AccountId);// 0x2cbecb0
	void OnVoiceParticipantUpdated(FString AccountId, bool bIsTalking, bool bIsMuted);// 0x2cbecb0
	void ExecuteUbergraph_WBP_VoiceActivity(int EntryPoint, FString K2Node_Event_AccountId, bool K2Node_Event_bIsTalking, bool K2Node_Event_bIsMuted, PUMG_HUD* K2Node_Event_hud, FString K2Node_Event_AccountId, FString K2Node_Event_AccountId);// 0x2cbecb0

--------------------------------
Class: KSVoiceActivityWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty VoiceAccountNamePairsUpdated;//[Size: 1]
	MulticastInlineDelegateProperty VoiceParticipantAdded;//[Size: 1]
	MulticastInlineDelegateProperty VoiceParticipantRemoved;//[Size: 1]
	MulticastInlineDelegateProperty VoiceParticipantUpdated;//[Size: 1]
	MulticastInlineDelegateProperty VoiceAudioStateChange;//[Size: 1]
	void OnVoiceParticipantUpdated(FString AccountId, bool bIsTalking, bool bIsMuted);// 0x2cbecb0
	void OnVoiceParticipantRemoved(FString AccountId);// 0x2cbecb0
	void OnVoiceParticipantAdded(FString AccountId);// 0x2cbecb0
	FString GetVoiceIdByPlayerId(int64 PlayerId);// 0x296bac0
	KSPlayerState* GetPlayerStateByVoiceId(FString VoiceId);// 0x296b760
	bool GetPlayerNameByVoiceId(FString VoiceId, out FText OutPlayerName);// 0x296b630
	int64 GetPlayerIdByVoiceId(FString VoiceId);// 0x296b580

--------------------------------
Class: WBP_VoiceParticipantElement_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x240, Size: 1]
	Image* ActivityIndicator;//[Offset: 0x248, Size: 1]
	TextBlock* ParticipantName;//[Offset: 0x250, Size: 1]
	Image* RogueIcon;//[Offset: 0x258, Size: 1]
	SizeBox* RogueIconContainer;//[Offset: 0x260, Size: 1]
	void SetRogueIcon(KSPlayerState* PlayerState, bool CallFunc_IsValid_ReturnValue, KSJobItem* CallFunc_GetJob_ReturnValue, Texture2D* CallFunc_GetSoftJobSquarePortrait_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValidSoftObjectReference_ReturnValue);// 0x2cbecb0
	void ShowActivity(bool IsActive, float CallFunc_Conv_BoolToFloat_ReturnValue);// 0x2cbecb0
	void SetName(FText InText);// 0x2cbecb0
	void OnInitialized();// 0x2cbecb0
	void HandleAnimationComplete();// 0x2cbecb0
	void HandleAnimationStart();// 0x2cbecb0
	void ExecuteUbergraph_WBP_VoiceParticipantElement(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0

--------------------------------
Class: WeaponMenuManager_C.KSViewedActiveWeaponWidget.KSWeaponWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x540, Size: 1]
	CanvasPanel* Canvas;//[Offset: 0x548, Size: 1]
	bool IsPrimaryMsgShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	bool IsSecondaryMsgShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x551, Size: 1]
	bool IsDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x552, Size: 1]
	KSWeapon*[] RegisteredWeapons;//[Offset: 0x558, Size: 1]
	bool IsFocusEnabled(bool CallFunc_HasAnyChildren_ReturnValue);// 0x2cbecb0
	void Close All(int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, interface classNone K2Node_DynamicCast_AsWeapon_Menu_Interface, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0
	void PostSetWeapon();// 0x2cbecb0
	void OtherWeaponUpdate();// 0x2cbecb0
	void PreClearWeapon();// 0x2cbecb0
	void InventoryChange();// 0x2cbecb0
	void Display Target List(KSWeapon_Targeted* TargetingWeapon, out const Actor*[] PotentialTargets);// 0x2cbecb0
	void ExecuteUbergraph_WeaponMenuManager(int EntryPoint, int Temp_int_Array_Index_Variable, KSWeapon* CallFunc_GetOwningWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSCharacter* CallFunc_GetCharacterOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSWeapon* CallFunc_GetOwningWeapon_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSCharacter* CallFunc_GetCharacterOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSWeapon* CallFunc_GetOwningWeapon_ReturnValue, KSCharacter* CallFunc_GetCharacterOwner_ReturnValue, int Temp_int_Loop_Counter_Variable, KSWeapon*[] CallFunc_GetAllEquippedWeapons_OutWeapons, KSWeapon* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, KSWeapon_Targeted* K2Node_DynamicCast_AsKSWeapon_Targeted, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, KSWeapon_Targeted* K2Node_CustomEvent_TargetingWeapon, const Actor*[] K2Node_CustomEvent_PotentialTargets, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSWeapon_ReviveDrone* K2Node_DynamicCast_AsKSWeapon_Revive_Drone, bool K2Node_DynamicCast_bSuccess, MedDroneMenu_C* CallFunc_Create_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, Widget* CallFunc_SetFocusToThis_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Margin K2Node_MakeStruct_Margin, Anchors K2Node_MakeStruct_Anchors);// 0x2cbecb0

--------------------------------
Class: KSWeapon_Targeted.KSWeapon.KSEquipment.Info.Actor.Object
	MulticastInlineDelegateProperty DisplayTargetList;//[Size: 1]
	MulticastInlineDelegateProperty TargetSelectCancelled;//[Size: 1]
	Actor*[] PotentialTargets;//[Offset: 0x740, Size: 1]
	bool SelectTargetOnRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750, Size: 1]
	Actor* TargetedActor;//[Offset: 0x754, Size: 1]
	bool TargetCurrentlyValid(Actor* TestTarget);// 0x27c0de0
	void SubmitTargetedActor(Actor* TargetActor);// 0x27c0ce0
	void ConfirmTargetSelection(Actor* TargetActor);// 0x27bda80
	void CancelTargetSelection();// 0x1f2bb10

--------------------------------
Class: KSWeapon_ReviveDrone.KSWeapon_Targeted.KSWeapon.KSEquipment.Info.Actor.Object
	class KSAgent_RevivalDrone* DroneClass;//[Offset: 0x760, Size: 1]
	KSAgent_RevivalDrone* DroneActor;//[Offset: 0x768, Size: 1]

--------------------------------
Class: KSAgent_RevivalDrone.KSAgentBase.KSLagCompensatedActor.Actor.Object
	MulticastInlineDelegateProperty OnArrive;//[Size: 1]
	float MaxFlightSpeed;//[Offset: 0x398, Size: 1]
	float InvisibleMovementTime;//[Offset: 0x39c, Size: 1]
	float ReviveTime;//[Offset: 0x3a0, Size: 1]
	float ReviveHealth;//[Offset: 0x3a4, Size: 1]
	bool bDroneVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool bDroneVulnerability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	bool bOngoingReviveEffectsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 1]
	KSCharacter* TargetCharacter;//[Offset: 0x3ac, Size: 1]
	enum MovementStage;//[Offset: 0x3b4, Size: 1]
	enum FlightPath;//[Offset: 0x3b5, Size: 1]
	float PreferredHoverHeight;//[Offset: 0x3b8, Size: 1]
	float TransitHeight;//[Offset: 0x3bc, Size: 1]
	float HoverCorrectionTime;//[Offset: 0x3c0, Size: 1]
	float DepartureHeight;//[Offset: 0x3c4, Size: 1]
	bool bUseCustomReviveTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	float CustomReviveTime;//[Offset: 0x3cc, Size: 1]
	bool bInheritReviveTimeMods;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0, Size: 1]
	bool DrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1, Size: 1]
	byte OutlineStencilColor;//[Offset: 0x3d2, Size: 1]
	KSPlayerMod* ApplyOnReleaseMod;//[Offset: 0x3d8, Size: 1]
	bool bDrawEnemyDroneOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x3f0, Size: 1]
	void TargetStartRevive(KSCharacter* Reviver, KSCharacter* Revivee, float TimeToRevive, bool Remote);// 0x2617920
	void StartReviveEffects();// 0x1ef10e0
	void SetOutlineVisibility(bool UseOutline);// 0x2cbecb0
	void SetFriendlyOutlineVisibility(bool UseOutline);// 0x2cbecb0
	void OnTargetKilled(const KSCharacterFoundation* Killer, const KSCharacterFoundation* Killed);// 0x2617190
	void OnReviveEnd(KSCharacter* RevivingCharacter, bool SuccessfulRevive);// 0x26170c0
	void OnRep_OngoingReviveEffectsActive();// 0x2617080
	void OnRep_DroneVulnerability();// 0x2617040
	void OnRep_DroneVisibility();// 0x2616710
	float GetReviveProgress();// 0x2616be0
	enum GetMovementStage();// 0x2616a50
	enum GetFlightPath();// 0x2616a10
	void EventStartReviveEffects();// 0x2cbecb0
	void EventOngoingReviveEffectsStarted();// 0x2cbecb0
	void EventEndReviveEffects();// 0x2cbecb0
	void BroadcastMovementState(enum State);// 0x26168c0
	void BroadcastEndReviveEffects();// 0x1efdc20
	void BroadcastDroneVulnerability(bool Vulnerable);// 0x2616830
	void BroadcastDroneVisibility(bool Visible);// 0x26167a0
	void BeginRevive();// 0x2616750
	void ApplyDroneVulnerabilityInternal();// 0x2616730
	void ApplyDroneVisibilityInternal();// 0x2616710
	void ActivateDroneOngoingEffects();// 0x26166f0

--------------------------------
Class: MedDroneMenu_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	GamepadPromptBasic_C* AcceptCallout;//[Offset: 0x530, Size: 1]
	GamepadPromptBasic_C* CancelCallout;//[Offset: 0x538, Size: 1]
	HorizontalBox* GamepadCallouts;//[Offset: 0x540, Size: 1]
	Image* Image;//[Offset: 0x548, Size: 1]
	Image* Image;//[Offset: 0x550, Size: 1]
	Image* Image;//[Offset: 0x558, Size: 1]
	Image* Image;//[Offset: 0x560, Size: 1]
	VerticalBox* OptionsContainer;//[Offset: 0x568, Size: 1]
	Button* OutButton;//[Offset: 0x570, Size: 1]
	MedDroneMenuOption_C* SampleOption0;//[Offset: 0x578, Size: 1]
	MedDroneMenuOption_C* SampleOption1;//[Offset: 0x580, Size: 1]
	MedDroneMenuOption_C* SampleOption2;//[Offset: 0x588, Size: 1]
	KSWeapon_Targeted* Targeting Weapon;//[Offset: 0x590, Size: 1]
	Actor*[] Targets;//[Offset: 0x598, Size: 1]
	void Construct();// 0x2cbecb0
	void OptionSelected(KSPlayerState* Selected Target);// 0x2cbecb0
	void BndEvt__OutButton_K2Node_ComponentBoundEvent_40_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void Close(bool Should Cancel);// 0x2cbecb0
	void InitializeWidgetNavigation();// 0x2cbecb0
	void InitializeWidget(PUMG_HUD* HUD);// 0x2cbecb0
	void Handle Input State Change(byte InputState);// 0x2cbecb0
	void ExecuteUbergraph_MedDroneMenu(int EntryPoint, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, int Temp_int_Array_Index_Variable, byte Temp_byte_Variable, int Temp_int_Variable, int CallFunc_Subtract_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Actor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, int Temp_int_Loop_Counter_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, MedDroneMenuOption_C* CallFunc_Create_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, KSPlayerState* K2Node_CustomEvent_Selected_Target, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TargetCurrentlyValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, bool K2Node_Event_Should_Cancel, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, PUMG_HUD* K2Node_Event_hud, Widget* CallFunc_GetChildAt_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetCurrentInputState_ReturnValue, Margin K2Node_MakeStruct_Margin, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, byte K2Node_CustomEvent_InputState, enum K2Node_Select_Default);// 0x2cbecb0

--------------------------------
Class: GamepadPromptBasic_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	TextBlock* ActionText;//[Offset: 0x240, Size: 1]
	WBP_KeyCallout_C* ButtonIcon;//[Offset: 0x248, Size: 1]
	ButtonPromptData Data;//[Offset: 0x250, Size: 1]
	bool IsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	void SetPrompt(ButtonPromptData Data);// 0x2cbecb0
	void Populate();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ExecuteUbergraph_GamepadPromptBasic(int EntryPoint);// 0x2cbecb0

--------------------------------
Class: ButtonPromptData
	Key Key;//[Offset: 0x0, Size: 1]
	FText Text;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MedDroneMenuOption_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* BG;//[Offset: 0x530, Size: 1]
	Button* Button;//[Offset: 0x538, Size: 1]
	Image* DownedIcon;//[Offset: 0x540, Size: 1]
	TextBlock* PlayerName;//[Offset: 0x548, Size: 1]
	KSPlayerState* Target Player State;//[Offset: 0x550, Size: 1]
	MulticastInlineDelegateProperty Selected;//[Size: 1]
	KSWeapon_Targeted* Targeting Weapon;//[Offset: 0x568, Size: 1]
	bool NavigateBack();// 0x2cbecb0
	bool NavigateConfirm();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_20_OnButtonClickedEvent__DelegateSignature();// 0x2cbecb0
	void Target Player Check Validity(KSPlayerState* PlayerState);// 0x2cbecb0
	void TargetSelected();// 0x2cbecb0
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_11_OnButtonHoverEvent__DelegateSignature();// 0x2cbecb0
	void GamepadHover();// 0x2cbecb0
	void BndEvt__Button_0_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature();// 0x2cbecb0
	void GamepadUnhover();// 0x2cbecb0
	void ExecuteUbergraph_MedDroneMenuOption(int EntryPoint, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, SlateColor K2Node_MakeStruct_SlateColor, delegate K2Node_CreateDelegate_OutputDelegate, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_IsInPlay_ReturnValue, bool CallFunc_IsDowned_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool Temp_bool_Variable, LinearColor K2Node_Select_Default, bool CallFunc_IsInPlay_ReturnValue, bool CallFunc_IsDowned_ReturnValue, bool CallFunc_TargetCurrentlyValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, LinearColor K2Node_Select_Default, LinearColor K2Node_Select_Default, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_TargetCurrentlyValid_ReturnValue, LinearColor K2Node_Select_Default, KSPlayerState* K2Node_CustomEvent_PlayerState, bool CallFunc_TargetCurrentlyValid_ReturnValue);// 0x2cbecb0
	void Selected__DelegateSignature(KSPlayerState* Selected Target);// 0x2cbecb0

--------------------------------
Class: WorldMessages_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	VerticalBox* Container;//[Offset: 0x240, Size: 1]
	enum[] ValidRadialMenuItemsToShow;//[Offset: 0x248, Size: 1]
	bool Show Instant Kill Downs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 1]
	CombatLogElement_C*[] MessagePool;//[Offset: 0x260, Size: 1]
	ScreenLogData[] QueuedScreenMessages;//[Offset: 0x270, Size: 1]
	CombatLogElement_C*[] ActiveMessages;//[Offset: 0x280, Size: 1]
	void CanShowDownMessage(Actor* DownedActor, out bool CanDisplayDowns, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_CanDownBots_ReturnValue, bool CallFunc_CanDownPlayers_ReturnValue, AIController* CallFunc_GetAIController_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void PlayCombatLogSFX(out const ScreenLogData ScreenLogData, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, KSCharacterBase* CallFunc_GetCharacterOwner_ReturnValue, bool CallFunc_IsDeadOrDestroyed_ReturnValue);// 0x2cbecb0
	void CreateFrontQueuedMessage(CombatLogElement_C* CallFunc_GetPooledMessage_Message, CombatLogElement_C* CallFunc_SetMessageData_CombatLogElement, bool CallFunc_SetMessageData_IsValid, VerticalBoxSlot* CallFunc_AddChildToVerticalBox_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void GetPooledMessage(out CombatLogElement_C* Message, CombatLogElement_C* Result, Margin K2Node_MakeStruct_Margin, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, CombatLogElement_C* CallFunc_Array_Get_Item);// 0x2cbecb0
	void ReturnPooledMessage(CombatLogElement_C* Message, bool CallFunc_Array_RemoveItem_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2cbecb0
	void SFXKillFeed_Down(PlayerState* Victim, PlayerState* Instigator);// 0x2cbecb0
	void SFXKillFeed_Elim(PlayerState* Victim, PlayerState* Instigator);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void DeathMessage(CombatEventInfo EventInfo);// 0x2cbecb0
	void DownMessage(CombatEventInfo EventInfo, int ExpBonus);// 0x2cbecb0
	void ResetMessages(out const RoundInitState RoundInitState);// 0x2cbecb0
	void OnRoundOver(KSGameState* GameState, out const RoundResult RoundResult);// 0x2cbecb0
	void OnKillCamEnabled(bool bEnabled);// 0x2cbecb0
	void OnKillCamViewedPawn(Pawn* Pawn);// 0x2cbecb0
	void HandleQueuedMessage();// 0x2cbecb0
	void RadialMenuItemMessage(RadialMenuItemEventInfo EventInfo);// 0x2cbecb0
	void ExecuteUbergraph_WorldMessages(int EntryPoint, int Temp_int_Variable, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerState* K2Node_CustomEvent_Victim, PlayerState* K2Node_CustomEvent_Instigator, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PlayerState* K2Node_CustomEvent_Victim, PlayerState* K2Node_CustomEvent_Instigator, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, enum CallFunc_IsFriendlyWithController_ReturnValue, KSCharacterBase* CallFunc_GetCharacterOwner_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, interface classNone K2Node_DynamicCast_AsKSObjective, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_GetObjectiveId_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, CombatEventInfo K2Node_CustomEvent_EventInfo, CombatEventInfo K2Node_CustomEvent_EventInfo, int K2Node_CustomEvent_ExpBonus, ScreenLogData K2Node_MakeStruct_ScreenLogData, ScreenLogData K2Node_MakeStruct_ScreenLogData, bool CallFunc_CanShowDownMessage_CanDisplayDowns, bool CallFunc_IsValid_ReturnValue, KSTeamState* CallFunc_GetTeamFor_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_ShouldKeepTeamAlive_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, AkAudioEvent* Temp_object_Variable, bool CallFunc_BooleanAND_ReturnValue, const RoundInitState K2Node_CustomEvent_RoundInitState, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* K2Node_CustomEvent_GameState, const RoundResult K2Node_CustomEvent_RoundResult, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_GetKillCamActorGuidFor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetKillCamActor_ReturnValue, LocalPlayer* CallFunc_GetOwningLocalPlayer_ReturnValue, KSGameState* K2Node_DynamicCast_AsKSGame_State, bool K2Node_DynamicCast_bSuccess, KSLocalPlayer* K2Node_DynamicCast_AsKSLocal_Player, bool K2Node_DynamicCast_bSuccess, KSKillCam* CallFunc_GetKillCam_ReturnValue, bool K2Node_CustomEvent_bEnabled, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, Pawn* K2Node_CustomEvent_Pawn, int CallFunc_GetKillCamActorGuidFor_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Actor* CallFunc_GetKillCamActor_ReturnValue, KSGameState* K2Node_DynamicCast_AsKSGame_State, bool K2Node_DynamicCast_bSuccess, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanOR_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, RoundInitState K2Node_MakeStruct_RoundInitState, int CallFunc_Array_Length_ReturnValue, AkAudioEvent* Temp_object_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, CombatLogElement_C* CallFunc_Array_Get_Item, RoundInitState K2Node_MakeStruct_RoundInitState, delegate K2Node_CreateDelegate_OutputDelegate, RadialMenuItemEventInfo K2Node_CustomEvent_EventInfo, ScreenLogData K2Node_MakeStruct_ScreenLogData, int CallFunc_Array_Add_ReturnValue, enum CallFunc_GetCosmeticSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Array_Add_ReturnValue, int Temp_int_Variable, int CallFunc_Array_Add_ReturnValue, bool CallFunc_NotEqual_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsOnlyASpectator_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, AkAudioEvent* Temp_object_Variable, bool Temp_bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, AkAudioEvent* K2Node_Select_Default, CombatLogElement_C* CallFunc_Create_ReturnValue, AkAudioEvent* Temp_object_Variable, int CallFunc_Array_Add_ReturnValue, bool Temp_bool_Variable, AkAudioEvent* K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, int CallFunc_PostEvent_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue);// 0x2cbecb0

--------------------------------
Class: ScreenLogData
	enum ScreenLogData;//[Offset: 0x0, Size: 1]
	PlayerState* Instigator;//[Offset: 0x8, Size: 1]
	PlayerState* Victim;//[Offset: 0x10, Size: 1]
	KSItem* Weapon;//[Offset: 0x18, Size: 1]
	bool bDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bMastered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	enum HitLocationType;//[Offset: 0x22, Size: 1]
	int VictimBounty;//[Offset: 0x24, Size: 1]
	KSRadialMenuItem* RadialMenuItem;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CombatLogElement_C.KSScreenLogWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x538, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x540, Size: 1]
	WidgetAnimation* BGTransition;//[Offset: 0x548, Size: 1]
	WidgetAnimation* FadeOutNew;//[Offset: 0x550, Size: 1]
	WidgetAnimation* FadeInNew;//[Offset: 0x558, Size: 1]
	Image* ActionIcon;//[Offset: 0x560, Size: 1]
	SizeBox* ActionIcon_Sizebox;//[Offset: 0x568, Size: 1]
	BountyDisplayIcon_C* BountyDisplayIcon;//[Offset: 0x570, Size: 1]
	WBP_AsyncIcon_C* DamageWeapon;//[Offset: 0x578, Size: 1]
	CanvasPanel* EntryContentWrapper;//[Offset: 0x580, Size: 1]
	TextBlock* InfoText;//[Offset: 0x588, Size: 1]
	SizeBox* InstigatorContainer;//[Offset: 0x590, Size: 1]
	TextBlock* InstigatorName;//[Offset: 0x598, Size: 1]
	ScaleBox* KillingWeaponScale;//[Offset: 0x5a0, Size: 1]
	SizeBox* VerticalSizer;//[Offset: 0x5a8, Size: 1]
	enum ScreenLogType;//[Offset: 0x5b0, Size: 1]
	PlayerState* Instigator;//[Offset: 0x5b8, Size: 1]
	PlayerState* Victim;//[Offset: 0x5c0, Size: 1]
	KSItem* ResponsibleWeapon;//[Offset: 0x5c8, Size: 1]
	bool Down;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	KSRadialMenuItem* RadialMenuItem;//[Offset: 0x5d8, Size: 1]
	float VisibleTime;//[Offset: 0x5e0, Size: 1]
	float StandardIconSize;//[Offset: 0x5e4, Size: 1]
	WorldMessages_C* OwningPanel;//[Offset: 0x5e8, Size: 1]
	TimerHandle[] TimerHandles;//[Offset: 0x5f0, Size: 1]
	bool Mastered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	void ClearInfo(bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void OnSetInfo(enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, Texture2D* Temp_object_Variable, Texture2D* Temp_object_Variable, bool Temp_bool_Variable, KSCommunication* K2Node_DynamicCast_AsKSCommunication, bool K2Node_DynamicCast_bSuccess, LinearColor CallFunc_GetPingColorByType_PingColor, bool CallFunc_GetPingColorByType_ReturnValue, Texture2D* CallFunc_GetPingIconByMessage_PingIcon, bool CallFunc_GetPingIconByMessage_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, FText CallFunc_GetItemName_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, enum CallFunc_GetCosmeticSlot_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool Temp_bool_Variable, LinearColor K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Array_Add_ReturnValue, SlateColor CallFunc_GetVictimTextColor_Color, enum K2Node_Select_Default, SlateColor CallFunc_GetInstigatorTextColor_Color, Texture2D* K2Node_Select_Default, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, enum K2Node_Select_Default, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void SetMessageData(ScreenLogData MessageData, out CombatLogElement_C* CombatLogElement, out bool IsValid, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void GetVictimTextColor(out SlateColor Color, enum Temp_byte_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, LinearColor CallFunc_GetFriendlyColor_Return_Value, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, LinearColor CallFunc_GetEnemyColor_Return_Value, LinearColor CallFunc_GetSelfColor_Return_Value, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, LinearColor K2Node_Select_Default, LinearColor CallFunc_SelectColor_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void GetInstigatorTextColor(out SlateColor Color, enum Temp_byte_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, LinearColor CallFunc_GetFriendlyColor_Return_Value, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, LinearColor CallFunc_GetEnemyColor_Return_Value, LinearColor CallFunc_GetSelfColor_Return_Value, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, LinearColor K2Node_Select_Default, LinearColor CallFunc_SelectColor_ReturnValue, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void OnIconUpdated(Texture2D* Texture, int CallFunc_Blueprint_GetSizeY_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x2cbecb0
	void Transition();// 0x2cbecb0
	void OnIconUpdated_Event(Texture2D* Texture);// 0x2cbecb0
	void OnFadeOutAnimFinished();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void FadeOut();// 0x2cbecb0
	void StopAnimsAndTimers();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_CombatLogElement(int EntryPoint, bool CallFunc_IsMobile_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, float CallFunc_GetEndTime_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Texture2D* K2Node_CustomEvent_Texture, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, TimerHandle CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool K2Node_Event_IsDesignTime, SlateFontInfo K2Node_MakeStruct_SlateFontInfo, SlateFontInfo K2Node_MakeStruct_SlateFontInfo);// 0x2cbecb0

--------------------------------
Class: KSScreenLogWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	DataTable* ContextualPingTypesDT;//[Offset: 0x528, Size: 1]
	DataTable* ContextualPingMessagesDT;//[Offset: 0x530, Size: 1]

--------------------------------
Class: EnemyBombCarrierTracker_C.Object
	Object* Bound Bomb Game State;//[Offset: 0x28, Size: 1]
	int Latest Info Id;//[Offset: 0x30, Size: 1]
	PlayerController* Bound Player Controller;//[Offset: 0x38, Size: 1]
	KSPlayerState* Current Tracked Enemy Holder;//[Offset: 0x40, Size: 1]
	void Try Create Tracking(KSPlayerState* New Bomb Holder, bool CallFunc_IsValid_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void Try Remove Current Tracking(KSPlayerState* New Bomb Holder, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2cbecb0
	void Handle Bomb State Changed(KSPlayerState* KSPlayerState);// 0x2cbecb0
	void Bind Game And Player(PlayerController* Player Controller);// 0x2cbecb0

--------------------------------
Class: AccuracyDebug_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	CanvasPanel* MainCanvas;//[Offset: 0x530, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x538, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x540, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x548, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x550, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x558, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x560, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x568, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x570, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x578, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x580, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x588, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x590, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x598, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x5a0, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x5a8, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x5b0, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x5b8, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x5c0, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x5c8, Size: 1]
	TextBlock* TextBlock;//[Offset: 0x5d0, Size: 1]
	TextBlock*[] VertArray;//[Offset: 0x5d8, Size: 1]
	TextBlock*[] HoriArray;//[Offset: 0x5e8, Size: 1]
	void Construct();// 0x2cbecb0
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2cbecb0
	void ExecuteUbergraph_AccuracyDebug(int EntryPoint, int Temp_int_Array_Index_Variable, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Percent_IntInt_ReturnValue, int CallFunc_Divide_IntInt_ReturnValue, int CallFunc_Multiply_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, TextBlock*[] K2Node_MakeArray_Array, TextBlock* CallFunc_Array_Get_Item, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int CallFunc_Array_Length_ReturnValue, int Temp_int_Loop_Counter_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, float CallFunc_GetScreenSpaceAccuracyRadius_ViewPortRadius, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_GetScreenSpaceAccuracyRadius_ViewPortRadius, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_GetViewportScale_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, TextBlock* CallFunc_Array_Get_Item, Vector2D CallFunc_MakeVector2D_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, TextBlock*[] K2Node_MakeArray_Array);// 0x2cbecb0

--------------------------------
Class: HUDController_DisableWidget_C.KSHUDController_DisableWidget.KSHUDController.ActorComponent.Object

--------------------------------
Class: KSHUDController_DisableWidget.KSHUDController.ActorComponent.Object

--------------------------------
Class: HUDController_GameInfo_Objective_C.HUDController_GameInfo_RoundGame_C.KSHUDController_GameInfo.KSHUDController.ActorComponent.Object
	enum ObjectiveAlignment;//[Offset: 0xc9, Size: 1]
	bool bHasSetAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xca, Size: 1]
	void GetRoundInProgressMessage(out FText Message, FText CallFunc_MakeLiteralText_ReturnValue);// 0x2cbecb0
	void OnRoundEnd(KSGameState* GameState, out const RoundResult RoundResult, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue);// 0x2cbecb0
	void GetHeaderForObjectiveAlignment(enum ObjectiveAlignment, out FText Header, enum Temp_byte_Variable, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText K2Node_Select_Default);// 0x2cbecb0
	void OnObjectiveStateChanged(interface classNone GameObjective, enum Temp_byte_Variable, KSObjectiveState CallFunc_GetObjectiveState_ReturnValue, bool Temp_bool_Variable, enum CallFunc_IsTeamNumFriendlyWithLocalPlayer_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_MakeLiteralText_ReturnValue, enum K2Node_Select_Default, FText CallFunc_GetHeaderForObjectiveAlignment_Header);// 0x2cbecb0
	void OnRoundStart(out const RoundInitState RoundInitState, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSGameState* CallFunc_GetKSGameState_ReturnValue, interface classNone[] CallFunc_GetGameObjectives_Objectives, interface classNone CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0

--------------------------------
Class: HUDController_GameInfo_RoundGame_C.KSHUDController_GameInfo.KSHUDController.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xc0, Size: 1]
	byte CurrentRoundNumber;//[Offset: 0xc8, Size: 1]
	void GetRoundInProgressMessage(out FText Message, FText CallFunc_MakeLiteralText_ReturnValue);// 0x2cbecb0
	void HandlePhaseChanged(MatchPhase CurrentPhase, MatchPhase PreviousPhase, bool K2Node_SwitchName_CmpSuccess, FText CallFunc_GetRoundInProgressMessage_Message);// 0x2cbecb0
	void OnTeamIntraScoreChanged(KSTeamState* Team);// 0x2cbecb0
	void OnTeamRoundScoreChanged(KSTeamState* Team, int CallFunc_GetTeamNum_ReturnValue);// 0x2cbecb0
	void OnTeamAdded(KSTeamState* AddedTeam, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void OnRoundEnd(KSGameState* GameState, out const RoundResult RoundResult);// 0x2cbecb0
	void OnRoundStart(out const RoundInitState RoundInitState);// 0x2cbecb0
	void OnRoundInfoChanged(int CallFunc_Conv_ByteToInt_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, FText CallFunc_Format_ReturnValue, byte CallFunc_GetRoundNumber_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void OnWidgetRegistered(UserWidget* InWidget);// 0x2cbecb0
	void ExecuteUbergraph_HUDController_GameInfo_RoundGame(int EntryPoint, Actor* CallFunc_GetOwner_ReturnValue, KSGameHUDNew* K2Node_DynamicCast_AsKSGame_HUDNew, bool K2Node_DynamicCast_bSuccess, int Temp_int_Array_Index_Variable, KSHUDStateTracker* CallFunc_GetHUDStateTracker_ReturnValue, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSTeamState*[] CallFunc_GetTeams_ReturnValue, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Array_Index_Variable, UserWidget* K2Node_Event_InWidget, KSTeamState* CallFunc_Array_Get_Item, KSGameState_RoundGame* CallFunc_GetKSGameState_RoundGame_ReturnValue, Actor* CallFunc_GetOwner_ReturnValue, KSTeamState*[] CallFunc_GetTeams_ReturnValue, KSGameHUDNew* K2Node_DynamicCast_AsKSGame_HUDNew, bool K2Node_DynamicCast_bSuccess, KSTeamState* CallFunc_Array_Get_Item, KSHUDStateTracker* CallFunc_GetHUDStateTracker_ReturnValue, int CallFunc_Array_Length_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, Actor* CallFunc_GetOwner_ReturnValue, KSGameHUDNew* K2Node_DynamicCast_AsKSGame_HUDNew, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_IntInt_ReturnValue, KSHUDStateTracker* CallFunc_GetHUDStateTracker_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSHUDController_GameInfo.KSHUDController.ActorComponent.Object
	KSGameInfoOverlayBase* TopBarWidget;//[Offset: 0xb0, Size: 1]
	bool bStartTopHUDBarHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	void ShowTopHUDBar();// 0x291b9e0
	void SetTeamRoundScore(int InTeamNum, int InTeamScore);// 0x291b640
	void SetHeader(out const FText InHeader);// 0x291b170
	void HideTopHUDBar();// 0x291a5a0
	void FadeTopHUDBar(bool bShow);// 0x2919b90

--------------------------------
Class: KSGameInfoOverlayBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void ToggleTopHUDBar(bool bShow);// 0x2cbecb0
	void ShowTopHUDBar();// 0x2cbecb0
	void SetTeamRoundScore(int TeamNum, int teamScore);// 0x2cbecb0
	void SetHeader(out const FText Header);// 0x2cbecb0
	void HideTopHUDBar();// 0x2cbecb0
	void HandlePlayerStateReady(KSPlayerState* PlayerState);// 0x2cbecb0
	void FadeTopHUDBar(bool bShow);// 0x2cbecb0

--------------------------------
Class: AsyncWidgetInfoParams
	class UserWidget* UserWidgetClass_2_9069E8704905834356F9E38E08D51BF1;//[Offset: 0x0, Size: 1]
	FString ParentWidgetName_5_E592578E4CB7445E7A8364834A8EDD77;//[Offset: 0x28, Size: 1]
	Actor* WidgetInfoActor_10_3B7896EF4E8FD3533F260AACB9FA5E99;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CINE_Walkin_Widget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* DisplayP2_SlamIn_Player6;//[Offset: 0x240, Size: 1]
	WidgetAnimation* DisplayP1_SlamIn_Shorter;//[Offset: 0x248, Size: 1]
	WidgetAnimation* DisplayP2_SlamIn_Shorter;//[Offset: 0x250, Size: 1]
	WidgetAnimation* DisplayP2_SlamIn_Short;//[Offset: 0x258, Size: 1]
	WidgetAnimation* DisplayP2_SlamIn_Medium;//[Offset: 0x260, Size: 1]
	WidgetAnimation* DisplayP2_SlamIn_Long;//[Offset: 0x268, Size: 1]
	WidgetAnimation* SetAnchorsP2_BottomRight;//[Offset: 0x270, Size: 1]
	WidgetAnimation* SetAnchorsP2_BottomLeft;//[Offset: 0x278, Size: 1]
	WidgetAnimation* SetAnchorsP2_TopRight;//[Offset: 0x280, Size: 1]
	WidgetAnimation* SetAnchorsP2_TopLeft;//[Offset: 0x288, Size: 1]
	WidgetAnimation* DisplayP1_SlamIn_Medium;//[Offset: 0x290, Size: 1]
	WidgetAnimation* DisplayP1_SlamIn_Short;//[Offset: 0x298, Size: 1]
	WidgetAnimation* SetAnchors_BottomRight;//[Offset: 0x2a0, Size: 1]
	WidgetAnimation* SetAnchors_BottomLeft;//[Offset: 0x2a8, Size: 1]
	WidgetAnimation* SetAnchors_TopRight;//[Offset: 0x2b0, Size: 1]
	WidgetAnimation* SetAnchors_TopLeft;//[Offset: 0x2b8, Size: 1]
	WidgetAnimation* DisplayP1_SlamIn_Long;//[Offset: 0x2c0, Size: 1]
	WBP_AsyncIcon_C* JobFlatIcon_01;//[Offset: 0x2c8, Size: 1]
	WBP_AsyncIcon_C* JobFlatIcon_02;//[Offset: 0x2d0, Size: 1]
	WBP_AsyncIcon_C* JobFlatIconShadow_01;//[Offset: 0x2d8, Size: 1]
	WBP_AsyncIcon_C* JobFlatIconShadow_02;//[Offset: 0x2e0, Size: 1]
	TextBlock* JobName_01;//[Offset: 0x2e8, Size: 1]
	TextBlock* JobName_02;//[Offset: 0x2f0, Size: 1]
	CanvasPanel* PlayerInformation_01;//[Offset: 0x2f8, Size: 1]
	CanvasPanel* PlayerInformation_02;//[Offset: 0x300, Size: 1]
	TextBlock* PlayerName_01;//[Offset: 0x308, Size: 1]
	TextBlock* PlayerName_02;//[Offset: 0x310, Size: 1]
	Image* SheenWipe_01;//[Offset: 0x318, Size: 1]
	Image* SheenWipe_02;//[Offset: 0x320, Size: 1]
	CanvasPanel* WalkinDisplay;//[Offset: 0x328, Size: 1]
	WBP_RogueMasteryPortrait_C* WBP_RogueMasteryPortrait_01;//[Offset: 0x330, Size: 1]
	WBP_RogueMasteryPortrait_C* WBP_RogueMasteryPortrait_02;//[Offset: 0x338, Size: 1]
	WBP_WalkInNameplate_C* WBP_WalkInNameplate_P1;//[Offset: 0x340, Size: 1]
	WBP_WalkInNameplate_C* WBP_WalkInNameplate_P2;//[Offset: 0x348, Size: 1]
	KSJobSelectPreviewActor*[] Players;//[Offset: 0x350, Size: 1]
	int NumDebugWidgetsShown;//[Offset: 0x360, Size: 1]
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTCINE_Walkin_Widget();// 0x2cbecb0
	void SetNameplateAlignment(WBP_WalkInNameplate_C* NameplateWidget, byte Alignment);// 0x2cbecb0
	void GetPlayerInfoWidgetsForPlayerNumber(int PlayerNumber, out TextBlock* PlayerNameText, out TextBlock* JobNameText, out WBP_RogueMasteryPortrait_C* RogueMasteryPortrait, out WBP_AsyncIcon_C* JobFlatIcon, out WBP_AsyncIcon_C* JobFlatIconShadow, bool K2Node_SwitchInteger_CmpSuccess);// 0x2cbecb0
	void Handle Debug Player Infos(int NumDebugPlayerInfosAdded, int Temp_int_Array_Index_Variable, int Temp_int_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, KSJobSelectPreviewActor* CallFunc_Array_Get_Item, KSPersistentPlayerData* CallFunc_GetPersistantPlayerData_ReturnValue, KSJobSelectPreviewActor* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, KSPersistentPlayerData* CallFunc_GetPersistantPlayerData_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, int CallFunc_GetNumDebugCinematicRogues_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0
	void StopAnimsPlayerTwo();// 0x2cbecb0
	void StopAnimsPlayerOne();// 0x2cbecb0
	void SetPlayerData(KSPersistentPlayerData* PlayerData, int PlayerNumber, out bool IsValid, WBP_WalkInNameplate_C* NewLocalVar, int JobMasteryLevel, KSJobItem* Job, FString PlayerName, TextBlock* CallFunc_GetPlayerInfoWidgetsForPlayerNumber_PlayerNameText, TextBlock* CallFunc_GetPlayerInfoWidgetsForPlayerNumber_JobNameText, WBP_RogueMasteryPortrait_C* CallFunc_GetPlayerInfoWidgetsForPlayerNumber_RogueMasteryPortrait, WBP_AsyncIcon_C* CallFunc_GetPlayerInfoWidgetsForPlayerNumber_JobFlatIcon, WBP_AsyncIcon_C* CallFunc_GetPlayerInfoWidgetsForPlayerNumber_JobFlatIconShadow, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerState* CallFunc_GetPlayerState_ReturnValue, int CallFunc_GetJobMasteryLevel_ReturnValue, KSJobItem* CallFunc_GetJob_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Variable, FText CallFunc_GetItemName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_GetItemName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int Temp_int_Variable, WBP_WalkInNameplate_C* K2Node_Select_Default);// 0x2cbecb0
	void Set Player Blueprint References(out KSJobSelectPreviewActor*[] Players);// 0x2cbecb0
	void Anim_Player02(int TotalWalkingIn);// 0x2cbecb0
	void Anim_Player03(int TotalWalkingIn);// 0x2cbecb0
	void Anim_Player04(int TotalWalkingIn);// 0x2cbecb0
	void Anim_Player01(int TotalWalkingIn);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void WBP_WalkInNameplate_Right_Event(WBP_WalkInNameplate_C* WBP_WalkInNameplate_Right);// 0x2cbecb0
	void AnimPlayer_05(int TotalWalkingIn);// 0x2cbecb0
	void AnimPlayer_06(int TotalWalkingIn);// 0x2cbecb0
	void TriggerIntroNameplateP1();// 0x2cbecb0
	void TriggerResetNameplateP1();// 0x2cbecb0
	void TriggerResetNameplateP2();// 0x2cbecb0
	void TriggerIntroNameplateP2();// 0x2cbecb0
	void ExecuteUbergraph_CINE_Walkin_Widget(int EntryPoint, int K2Node_CustomEvent_TotalWalkingIn, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_CustomEvent_TotalWalkingIn, bool K2Node_SwitchInteger_CmpSuccess, KSJobSelectPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, KSJobSelectPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, KSJobSelectPreviewActor* CallFunc_Array_Get_Item, KSJobSelectPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, KSJobSelectPreviewActor* CallFunc_Array_Get_Item, KSJobSelectPreviewActor* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, bool CallFunc_SetPlayerData_IsValid, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, WBP_WalkInNameplate_C* K2Node_CustomEvent_WBP_WalkInNameplate_Right, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, int K2Node_CustomEvent_TotalWalkingIn, int K2Node_CustomEvent_TotalWalkingIn, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, int K2Node_CustomEvent_TotalWalkingIn, int K2Node_CustomEvent_TotalWalkingIn, bool K2Node_SwitchInteger_CmpSuccess, bool K2Node_SwitchInteger_CmpSuccess, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_WalkInNameplate_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* PlayIntroLeft;//[Offset: 0x240, Size: 1]
	WidgetAnimation* PlayIntroRight;//[Offset: 0x248, Size: 1]
	Image* GradientColored;//[Offset: 0x250, Size: 1]
	Image* GradientColored;//[Offset: 0x258, Size: 1]
	WidgetSwitcher* NameplateAlignmentSwitcher;//[Offset: 0x260, Size: 1]
	TextBlock* PlayerName_Left;//[Offset: 0x268, Size: 1]
	TextBlock* PlayerName_Right;//[Offset: 0x270, Size: 1]
	TextBlock* RogueName_Left;//[Offset: 0x278, Size: 1]
	TextBlock* RogueName_Right;//[Offset: 0x280, Size: 1]
	TextBlock* RogueName_Shadow_Left;//[Offset: 0x288, Size: 1]
	TextBlock* RogueName_Shadow_Right;//[Offset: 0x290, Size: 1]
	Image* Shade;//[Offset: 0x298, Size: 1]
	Image* Shade;//[Offset: 0x2a0, Size: 1]
	Image* Shimmer;//[Offset: 0x2a8, Size: 1]
	Image* Shimmer;//[Offset: 0x2b0, Size: 1]
	WBP_RogueMasteryPortrait_C* WBP_RogueMasteryPortrait_Left;//[Offset: 0x2b8, Size: 1]
	WBP_RogueMasteryPortrait_C* WBP_RogueMasteryPortrait_Right;//[Offset: 0x2c0, Size: 1]
	byte Alignment;//[Offset: 0x2c8, Size: 1]
	SlateColor FriendlyColor;//[Offset: 0x2d0, Size: 1]
	SlateColor EnemyColor;//[Offset: 0x2f8, Size: 1]
	void ResetNameplateAnimatedState(float CallFunc_GetAnimationCurrentTime_ReturnValue, float CallFunc_GetAnimationCurrentTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void SetVisualStyle(byte Temp_byte_Variable, int Temp_int_Variable, int Temp_int_Variable, int Temp_int_Variable, int K2Node_Select_Default);// 0x2cbecb0
	void PlayNameplateIntro(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0
	void PopulatePlayerInfo(PlayerState* PlayerState, FText PlayerName, FText JobName, Texture2D* JobPortrait, int JobMasteryLevel, FString CallFunc_Conv_TextToString_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, bool CallFunc_IsFriendly_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, SlateColor K2Node_MakeStruct_SlateColor);// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ExecuteUbergraph_WBP_WalkInNameplate(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2cbecb0

--------------------------------
Class: CINE_MVPLineup_Widget_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* HideNameplates;//[Offset: 0x240, Size: 1]
	CanvasPanel* WalkinDisplay;//[Offset: 0x248, Size: 1]
	WBP_MVPLineup_MVPLabel_C* WBP_MVPLineup_MVPLabel;//[Offset: 0x250, Size: 1]
	WBP_MVPLineupNameplate_C* WBP_MVPLineupNameplate_P1;//[Offset: 0x258, Size: 1]
	WBP_MVPLineupNameplate_C* WBP_MVPLineupNameplate_P2;//[Offset: 0x260, Size: 1]
	WBP_MVPLineupNameplate_C* WBP_MVPLineupNameplate_P3;//[Offset: 0x268, Size: 1]
	KSJobSelectPreviewActor*[] Players;//[Offset: 0x270, Size: 1]
	int NumDebugWidgetsShown;//[Offset: 0x280, Size: 1]
	void GetMVPLineupNameplateForIndex(int Index, out WBP_MVPLineupNameplate_C* Nameplate, bool K2Node_SwitchInteger_CmpSuccess);// 0x2cbecb0
	void Set Player Blueprint References(out KSJobSelectPreviewActor*[] Players);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void ShowMVPPlayer1_Nameplate();// 0x2cbecb0
	void ShowMVPPlayer2_Nameplate();// 0x2cbecb0
	void ShowMVPPlayer3_Nameplate();// 0x2cbecb0
	void HideMVPNameplates();// 0x2cbecb0
	void ShowMVPBanner();// 0x2cbecb0
	void ExecuteUbergraph_CINE_MVPLineup_Widget(int EntryPoint, FText CallFunc_MakeLiteralText_ReturnValue, MVPLineupSequenceManager_C* CallFunc_GetActorOfClass_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_HasPlayerInfo_HasPlayerInfo, KSCinematicCharacterManager*[] CallFunc_GetCinematicCharacterManagers_ReturnValue, bool CallFunc_HasPlayerInfo_HasPlayerInfo, bool CallFunc_HasPlayerInfo_HasPlayerInfo, int Temp_int_Variable, KSCinematicCharacterManager* CallFunc_Array_Get_Item, WBP_MVPLineupNameplate_C* CallFunc_GetMVPLineupNameplateForIndex_Nameplate, bool CallFunc_IsValid_ReturnValue, KSPersistentPlayerData* CallFunc_GetPersistantPlayerData_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_MVPLineup_MVPLabel_C.KSKillCardWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x530, Size: 1]
	WidgetAnimation* AnimShowMVP_DynamicLetters;//[Offset: 0x538, Size: 1]
	WidgetAnimation* AnimShowMVP;//[Offset: 0x540, Size: 1]
	WidgetAnimation* AnimShowMVP;//[Offset: 0x548, Size: 1]
	WidgetAnimation* AnimFadeout;//[Offset: 0x550, Size: 1]
	Image* BlackShade;//[Offset: 0x558, Size: 1]
	HorizontalBox* DynamicLetterContainer;//[Offset: 0x560, Size: 1]
	Image* Godrays;//[Offset: 0x568, Size: 1]
	Image* GradientBannerImage;//[Offset: 0x570, Size: 1]
	Image* GradientBannerImage;//[Offset: 0x578, Size: 1]
	Image* GradientBannerImage;//[Offset: 0x580, Size: 1]
	Image* GradientBannerImage;//[Offset: 0x588, Size: 1]
	Image* GradientBannerImage;//[Offset: 0x590, Size: 1]
	Border* IconFlares_ColorWrapper;//[Offset: 0x598, Size: 1]
	Overlay* MVPBanner;//[Offset: 0x5a0, Size: 1]
	Image* MVPIcon;//[Offset: 0x5a8, Size: 1]
	Image* ScanlineGlow;//[Offset: 0x5b0, Size: 1]
	Image* SheenLeft;//[Offset: 0x5b8, Size: 1]
	Image* SheenRight;//[Offset: 0x5c0, Size: 1]
	Border* Sheens_ColorWrapper;//[Offset: 0x5c8, Size: 1]
	TextBlock* Text_MVP_01;//[Offset: 0x5d0, Size: 1]
	TextBlock* Text_MVP_02;//[Offset: 0x5d8, Size: 1]
	TextBlock* Text_MVP_03;//[Offset: 0x5e0, Size: 1]
	WBP_MVPLabel_Letter_C* WBP_MVPLabel_Letter;//[Offset: 0x5e8, Size: 1]
	WBP_MVPLabel_Letter_C* WBP_MVPLabel_Letter;//[Offset: 0x5f0, Size: 1]
	WBP_MVPLabel_Letter_C* WBP_MVPLabel_Letter;//[Offset: 0x5f8, Size: 1]
	FText MVPText;//[Offset: 0x600, Size: 1]
	float TotalTextSlamDuration;//[Offset: 0x618, Size: 1]
	WBP_MVPLabel_Letter_C*[] MVPLetters;//[Offset: 0x620, Size: 1]
	void SequenceEvent__ENTRYPOINTWBP_MVPLineup_MVPLabel();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTWBP_MVPLineup_MVPLabel();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTWBP_MVPLineup_MVPLabel();// 0x2cbecb0
	void SequenceEvent__ENTRYPOINTWBP_MVPLineup_MVPLabel();// 0x2cbecb0
	void SetMVPText(FString[] MVPCharacterArray, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, WBP_MVPLabel_Letter_C* CallFunc_Create_ReturnValue, FString CallFunc_Array_Get_Item, HorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Length_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString[] CallFunc_GetCharacterArrayFromString_ReturnValue);// 0x2cbecb0
	void Audio1();// 0x2cbecb0
	void Audio2();// 0x2cbecb0
	void Audio3();// 0x2cbecb0
	void Show Sequence();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void HideSequence();// 0x2cbecb0
	void TriggerMVPLetterSlamSequence();// 0x2cbecb0
	void ExecuteUbergraph_WBP_MVPLineup_MVPLabel(int EntryPoint, const AkExternalSourceInfo[] Temp_struct_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, int Temp_int_Array_Index_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, bool K2Node_Event_IsDesignTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, WBP_MVPLabel_Letter_C* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int Temp_int_Loop_Counter_Variable, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_MVPLabel_Letter_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* AnimLetterSlam_normalized;//[Offset: 0x240, Size: 1]
	WidgetAnimation* AnimLetterSlam;//[Offset: 0x248, Size: 1]
	ScaleBox* Letter_01;//[Offset: 0x250, Size: 1]
	TextBlock* Text_MVP;//[Offset: 0x258, Size: 1]
	TextBlock* Text_MVP_01;//[Offset: 0x260, Size: 1]
	FString Letter;//[Offset: 0x268, Size: 1]
	void Construct();// 0x2cbecb0
	void SetDisplayLetter();// 0x2cbecb0
	void PlayAnim(float Delay, float PlaybackSpeed);// 0x2cbecb0
	void ExecuteUbergraph_WBP_MVPLabel_Letter(int EntryPoint, float K2Node_CustomEvent_Delay, float K2Node_CustomEvent_PlaybackSpeed, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2cbecb0

--------------------------------
Class: WBP_MVPLineupNameplate_C.KSKillCardWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x530, Size: 1]
	WidgetAnimation* ShowMVP;//[Offset: 0x538, Size: 1]
	WidgetAnimation* ShowBasic;//[Offset: 0x540, Size: 1]
	VerticalBox* CenterMessageWrapper;//[Offset: 0x548, Size: 1]
	Overlay* KillCardWrapper;//[Offset: 0x550, Size: 1]
	Overlay* NameplateWrapper;//[Offset: 0x558, Size: 1]
	WBP_PlayerIdentity_Full_C* PlayerIdentity;//[Offset: 0x560, Size: 1]
	TextBlock* PlayerName;//[Offset: 0x568, Size: 1]
	SizeBox* SizeBox;//[Offset: 0x570, Size: 1]
	HorizontalBox* Stat1Group;//[Offset: 0x578, Size: 1]
	KSAsyncImage* Stat1Icon;//[Offset: 0x580, Size: 1]
	HorizontalBox* Stat2Group;//[Offset: 0x588, Size: 1]
	KSAsyncImage* Stat2Icon;//[Offset: 0x590, Size: 1]
	HorizontalBox* Stat3Group;//[Offset: 0x598, Size: 1]
	KSAsyncImage* Stat3Icon;//[Offset: 0x5a0, Size: 1]
	TextBlock* StatText1;//[Offset: 0x5a8, Size: 1]
	TextBlock* StatText2;//[Offset: 0x5b0, Size: 1]
	TextBlock* StatText3;//[Offset: 0x5b8, Size: 1]
	Image* TeamAlignmentImage;//[Offset: 0x5c0, Size: 1]
	TimerHandle Hide Timer;//[Offset: 0x5c8, Size: 1]
	bool bHasPlayerInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	bool TopMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d1, Size: 1]
	GameplayTag CurrentStatTag;//[Offset: 0x5d4, Size: 1]
	int CurrentIndex;//[Offset: 0x5dc, Size: 1]
	KSPersistentPlayerData* LocalPersistentPlayer;//[Offset: 0x5e0, Size: 1]
	void IsFriendly(KSPersistentPlayerData* OtherPlayer, out bool IsFriendly, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_GetTeamNum_ReturnValue, enum CallFunc_IsTeamNumFriendlyWithController_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2cbecb0
	void HideStatWrappers();// 0x2cbecb0
	void GetStatInfoForIndex(int Index, out TextBlock* TextBox, out HorizontalBox* Wrapper, out Image* Icon, bool K2Node_SwitchInteger_CmpSuccess);// 0x2cbecb0
	void HasPlayerInfo(out bool HasPlayerInfo);// 0x2cbecb0
	void Show Sequence();// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void PreConstruct(bool IsDesignTime);// 0x2cbecb0
	void ShowPersistentPlayerAndMessage(KSPersistentPlayerData* PersistentPlayer, out const FText Message);// 0x2cbecb0
	void ExecuteUbergraph_WBP_MVPLineupNameplate(int EntryPoint, int Temp_int_Loop_Counter_Variable, int64 CallFunc_GetPlayerId_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSMVPDeterminant* CallFunc_GetMVPDeterminant_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool K2Node_Event_IsDesignTime, int Temp_int_Variable, WidgetAnimation* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FName Temp_name_Variable, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, KSStatWrapper* CallFunc_GetStatWrapperForTag_ReturnValue, float CallFunc_GetStatForPlayer_ReturnValue, int CallFunc_FFloor_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FName Temp_name_Variable, FText K2Node_Select_Default, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, TextBlock* CallFunc_GetStatInfoForIndex_TextBox, HorizontalBox* CallFunc_GetStatInfoForIndex_Wrapper, Image* CallFunc_GetStatInfoForIndex_Icon, TextBlock* CallFunc_GetStatInfoForIndex_TextBox, HorizontalBox* CallFunc_GetStatInfoForIndex_Wrapper, Image* CallFunc_GetStatInfoForIndex_Icon, bool CallFunc_IsValid_ReturnValue, TextBlock* CallFunc_GetStatInfoForIndex_TextBox, HorizontalBox* CallFunc_GetStatInfoForIndex_Wrapper, Image* CallFunc_GetStatInfoForIndex_Icon, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, KSPersistentPlayerData* K2Node_Event_PersistentPlayer, const FText K2Node_Event_Message, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetPlayerName_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool CallFunc_IsFriendly_IsFriendly, FName K2Node_Select_Default, GameplayTag[] CallFunc_GetSortedTopStatsForPersistentPlayerData_ReturnValue, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, GameplayTag CallFunc_Array_Get_Item, SlateColor K2Node_MakeStruct_SlateColor, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2cbecb0

--------------------------------
Class: MVPLineupSequenceManager_C.KSTeamCinematicSequenceManager.KSCinematicSequenceManager.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x2a8, Size: 1]
	LevelSequenceActor* Level Sequence Actor;//[Offset: 0x2b0, Size: 1]
	CineCameraActor* Cine Cam Actor;//[Offset: 0x2b8, Size: 1]
	bool bNeedCheckRoguesLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	int NumMVPCharacters;//[Offset: 0x2c4, Size: 1]
	int NumDebugCinematicRoguesFilled;//[Offset: 0x2c8, Size: 1]
	void Hide, Mute, Lockout Local Player(bool bOtherPlayerEmoteInterrupted, bool bLocalPlayerEmoteInterrupted, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_MakeLiteralInt_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, int Temp_int_Variable, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, KSProjectile*[] CallFunc_GetAllActorsOfClass_OutActors, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, KSProjectile* CallFunc_Array_Get_Item, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, KSBuild*[] CallFunc_GetAllActorsOfClass_OutActors, KSBuild* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Conv_IntToBool_ReturnValue, int Temp_int_Variable, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, byte CallFunc_GetEnumeratorValueFromIndex_ReturnValue, int CallFunc_Conv_ByteToInt_ReturnValue, KSCharacter*[] CallFunc_GetAllActorsOfClass_OutActors, KSCharacter* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, KSAkComponent* CallFunc_GetCharacterAkComponent_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_TryToInterruptEmote_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_Array_Length_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Character* CallFunc_GetPlayerCharacter_ReturnValue, KSActionRestrictor K2Node_MakeStruct_KSActionRestrictor, bool CallFunc_IsValid_ReturnValue, KSCharacter* K2Node_DynamicCast_AsKSCharacter, bool K2Node_DynamicCast_bSuccess, KSAkComponent* CallFunc_GetCharacterAkComponent_ReturnValue, bool CallFunc_TryToInterruptEmote_ReturnValue, int CallFunc_AddActionRestrictionForDuration_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0
	void Get Cinematic Character Manager by Position Index(int Position Index, out bool Success, out KSCinematicCharacterManager* Cinematic Character Manager, KSCinematicCharacterManager* Char Manager to Return, bool Found, int Temp_int_Array_Index_Variable, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, KSCinematicCharacterManager*[] CallFunc_GetCinematicCharacterManagers_ReturnValue, int CallFunc_Array_Length_ReturnValue, KSCinematicCharacterManager* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetPositionIndex_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2cbecb0
	void Setup Walkout Widget(PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, KSCinematicCharacterManager*[] CallFunc_GetCinematicCharacterManagers_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsCINE_HUD_INTERFACE, bool K2Node_DynamicCast_bSuccess);// 0x2cbecb0
	void Bind Actors to Sequence(LevelSequenceActor* Level Sequence Actor, int Num Cine Char Managers, bool CallFunc_Get_Cinematic_Character_Manager_by_Position_Index_Success, KSCinematicCharacterManager* CallFunc_Get_Cinematic_Character_Manager_by_Position_Index_Cinematic_Character_Manager, const Actor*[] K2Node_MakeArray_Array, const Actor*[] K2Node_MakeArray_Array, bool CallFunc_Get_Cinematic_Character_Manager_by_Position_Index_Success, KSCinematicCharacterManager* CallFunc_Get_Cinematic_Character_Manager_by_Position_Index_Cinematic_Character_Manager, bool CallFunc_Get_Cinematic_Character_Manager_by_Position_Index_Success, KSCinematicCharacterManager* CallFunc_Get_Cinematic_Character_Manager_by_Position_Index_Cinematic_Character_Manager, const Actor*[] K2Node_MakeArray_Array, const Actor*[] K2Node_MakeArray_Array);// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void FillDebugRogues();// 0x2cbecb0
	void ReceiveTick(float DeltaSeconds);// 0x2cbecb0
	void ExecuteUbergraph_MVPLineupSequenceManager(int EntryPoint, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsLocalPlayerOnlyASpectator_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSHUDCommon* CallFunc_GetHUDCommon_HUD_Common, BP_GameHUDNew_C* K2Node_DynamicCast_AsBP_Game_HUDNew, bool K2Node_DynamicCast_bSuccess, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, LevelSequence* CallFunc_GetSequence_ReturnValue, bool CallFunc_PlaySequence_ReturnValue, KSGameState* CallFunc_GetKSGameState_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_VerifyAllCinematicCharactersLoaded_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: KSTeamCinematicSequenceManager.KSCinematicSequenceManager.Actor.Object
	<int,LevelSequence*> SequenceList;//[Offset: 0x248, Size: 1]
	LevelSequence* DefaultLevelSequence;//[Offset: 0x298, Size: 1]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7a0, Size: 1]
	CineCameraComponent* GetCineCameraComponent();// 0x3b85740

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7e0, Size: 1]
	CameraFilmbackSettings Filmback;//[Offset: 0x7ec, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x7f8, Size: 1]
	CameraFocusSettings FocusSettings;//[Offset: 0x810, Size: 1]
	float CurrentFocalLength;//[Offset: 0x868, Size: 1]
	float CurrentAperture;//[Offset: 0x86c, Size: 1]
	float CurrentFocusDistance;//[Offset: 0x870, Size: 1]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x880, Size: 1]
	NamedLensPreset[] LensPresets;//[Offset: 0x890, Size: 1]
	FString DefaultFilmbackPresetName;//[Offset: 0x8a0, Size: 1]
	FString DefaultFilmbackPreset;//[Offset: 0x8b0, Size: 1]
	FString DefaultLensPresetName;//[Offset: 0x8c0, Size: 1]
	float DefaultLensFocalLength;//[Offset: 0x8d0, Size: 1]
	float DefaultLensFStop;//[Offset: 0x8d4, Size: 1]
	void SetLensPresetByName(FString InPresetName);// 0x3b85ba0
	void SetFilmbackPresetByName(FString InPresetName);// 0x3b85b00
	void SetCurrentFocalLength(out const float InFocalLength);// 0x3b85a60
	float GetVerticalFieldOfView();// 0x3b85a30
	static NamedLensPreset[] GetLensPresetsCopy();// 0x3b85950
	FString GetLensPresetName();// 0x3b858d0
	float GetHorizontalFieldOfView();// 0x3b858a0
	FString GetFilmbackPresetName();// 0x3b85820
	FString GetDefaultFilmbackPresetName();// 0x3b85760

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 1]
	float SensorHeight;//[Offset: 0x4, Size: 1]
	float SensorAspectRatio;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 1]
	float MaxFocalLength;//[Offset: 0x4, Size: 1]
	float MinFStop;//[Offset: 0x8, Size: 1]
	float MaxFStop;//[Offset: 0xc, Size: 1]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 1]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 1]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 1]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 1]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 1]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 1]
	float FocusOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 1]
	Vector RelativeOffset;//[Offset: 0x28, Size: 1]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 1]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 1]
	Vector RelativeOffset;//[Offset: 0x40, Size: 1]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: WatermarkWidget_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x530, Size: 1]
	WidgetAnimation* FadeIn;//[Offset: 0x538, Size: 1]
	CanvasPanel* WatermarkBounds;//[Offset: 0x540, Size: 1]
	VerticalBox* WatermarkContentBox;//[Offset: 0x548, Size: 1]
	float Time To Reposition Watermark;//[Offset: 0x550, Size: 1]
	float WatermarkAlpha;//[Offset: 0x554, Size: 1]
	Margin WatermarkBoundsOffset;//[Offset: 0x558, Size: 1]
	TimerHandle ViewportResizeUpdateHandle;//[Offset: 0x568, Size: 1]
	void GetNewWatermarkTranslation(out Vector2D Transform Translation, float CallFunc_GetUMG_DPI_Scaling_ReturnValue, Vector2D CallFunc_GetViewportSize_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Margin CallFunc_GetOffsets_ReturnValue, Vector2D CallFunc_GetDesiredSize_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_Divide_Vector2DFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_Subtract_Vector2DVector2D_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x2cbecb0
	void Construct();// 0x2cbecb0
	void Reposition Watermark();// 0x2cbecb0
	void Fade In();// 0x2cbecb0
	void Fade Out();// 0x2cbecb0
	void Move Watermark To Random Position();// 0x2cbecb0
	void StartPositionChanging();// 0x2cbecb0
	void OnResizeViewport(IntPoint Viewport Size);// 0x2cbecb0
	void ExecuteUbergraph_WatermarkWidget(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Vector2D CallFunc_GetNewWatermarkTranslation_Transform_Translation, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_GetEndTime_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, float CallFunc_GetEndTime_ReturnValue, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, IntPoint K2Node_CustomEvent_Viewport_Size);// 0x2cbecb0

--------------------------------
Class: SimpleQuipInstance_C.KSQuipInstance.KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object

--------------------------------
Class: KSQuipInstance.KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object
	enum VoicelineAudience;//[Offset: 0x2e0, Size: 1]
	int QuipCooldownGroup;//[Offset: 0x2e4, Size: 1]
	float QuipCooldownDuration;//[Offset: 0x2e8, Size: 1]

--------------------------------
Class: SimpleCommunicationInstance_C.KSCommunicationInstance.KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object

--------------------------------
Class: KSCommunicationInstance.KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object

--------------------------------
Class: SimpleSprayInstance_C.KSSprayInstance.KSEmoteInstance.KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object

--------------------------------
Class: KSSprayInstance.KSEmoteInstance.KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object
	byte SprayTraceChannel;//[Offset: 0x2e0, Size: 1]
	float SprayTraceDistance;//[Offset: 0x2e4, Size: 1]
	AimData CachedAim;//[Offset: 0x2e8, Size: 1]
	Vector CachedSprayLocation;//[Offset: 0x338, Size: 1]
	Rotator CachedSprayRotation;//[Offset: 0x344, Size: 1]
	PrimitiveComponent* CachedSprayTarget;//[Offset: 0x350, Size: 1]
	Vector CachedSprayNormal;//[Offset: 0x358, Size: 1]
	Rotator CachedSprayRotationByNormal;//[Offset: 0x364, Size: 1]
	void ServerPlaySpray(const AimData InSprayAim);// 0x2792be0

--------------------------------
Class: KSEmoteInstance.KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object
	KSEmoteCosmeticComponent* GetEmoteCosmeticComponent();// 0x2690ff0

--------------------------------
Class: SimpleEmoteInstance_C.KSEmoteInstance.KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object

--------------------------------
Class: MainCharacter_C.KSCharacter.KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	StickyTurretSFXStackComponent_C* StickyTurretSFXStackComponent;//[Offset: 0x3c80, Size: 1]
	KSAimAssistAnchorComponent* RightKneeAimAssistAnchor;//[Offset: 0x3c88, Size: 1]
	KSAimAssistAnchorComponent* LeftKneeAimAssistAnchor;//[Offset: 0x3c90, Size: 1]
	KSAimAssistAnchorComponent* PelvisAimAssistAnchor;//[Offset: 0x3c98, Size: 1]
	OutOfBoundsComponent_C* OutOfBoundsComponent;//[Offset: 0x3ca0, Size: 1]
	KSCharacterSocketComponent* MountedAimOrigin;//[Offset: 0x3ca8, Size: 1]
	KSCharacterSocketComponent* UnderslungAimOrigin;//[Offset: 0x3cb0, Size: 1]
	ParticleSystemComponent* FX_Blinded;//[Offset: 0x3cb8, Size: 1]
	CharacterHeatSourceComponent_C* CharacterHeatSourceComponent;//[Offset: 0x3cc0, Size: 1]
	KSCharacterSocketComponent* PerformanceAimOrigin;//[Offset: 0x3cc8, Size: 1]
	CharacterEmotionComponent_C* CharacterEmotionComponent;//[Offset: 0x3cd0, Size: 1]
	SpringArmComponent* SkyDiveCameraBoom;//[Offset: 0x3cd8, Size: 1]
	WidgetComponent* Nameplate;//[Offset: 0x3ce0, Size: 1]
	MainCharacterThreatComponent_C* MainCharacterThreatComponent;//[Offset: 0x3ce8, Size: 1]
	KSTabletMeshComponent* NewTablet;//[Offset: 0x3cf0, Size: 1]
	MainEnvironmentTracker_C* MainEnvironmentTracker;//[Offset: 0x3cf8, Size: 1]
	KSAimAssistAnchorComponent* BodyAimAssistAnchor;//[Offset: 0x3d00, Size: 1]
	KSAimAssistAnchorComponent* HeadAimAssistAnchor;//[Offset: 0x3d08, Size: 1]
	ParticleSystemComponent* Free Fall Particle Component;//[Offset: 0x3d10, Size: 1]
	CameraComponent* SkyDiveCamera;//[Offset: 0x3d18, Size: 1]
	float WindVFXLerp_Wind_Toggle_Value_C0A86EEC4B0D65AF2CF9BB989ADCFF66;//[Offset: 0x3d20, Size: 1]
	byte WindVFXLerp__Direction_C0A86EEC4B0D65AF2CF9BB989ADCFF66;//[Offset: 0x3d24, Size: 1]
	TimelineComponent* WindVFXLerp;//[Offset: 0x3d28, Size: 1]
	float EnterFreeFallFOVTimeline_FOV_214483C64B8EF94ABEE010ACC0C82B47;//[Offset: 0x3d30, Size: 1]
	byte EnterFreeFallFOVTimeline__Direction_214483C64B8EF94ABEE010ACC0C82B47;//[Offset: 0x3d34, Size: 1]
	TimelineComponent* EnterFreeFallFOVTimeline;//[Offset: 0x3d38, Size: 1]
	float NoseDiveFOVTimeline_FOV_B4B28FE84FD9F70D4702AD94CD02429F;//[Offset: 0x3d40, Size: 1]
	byte NoseDiveFOVTimeline__Direction_B4B28FE84FD9F70D4702AD94CD02429F;//[Offset: 0x3d44, Size: 1]
	TimelineComponent* NoseDiveFOVTimeline;//[Offset: 0x3d48, Size: 1]
	Vector Martial_Artist_Target_Front_Camera_Offset_2353812C44E84070E58EA28AC0C39A7A;//[Offset: 0x3d50, Size: 1]
	Vector Martial_Artist_Target_Front_Camera_Rotation_2353812C44E84070E58EA28AC0C39A7A;//[Offset: 0x3d5c, Size: 1]
	byte Martial_Artist_Target_Front__Direction_2353812C44E84070E58EA28AC0C39A7A;//[Offset: 0x3d68, Size: 1]
	TimelineComponent* Martial Artist Target Front;//[Offset: 0x3d70, Size: 1]
	Vector Martial_Artist_Target_Back_Camera_Offset_1BFA9A6E4FC29401CE8D43B8AAD4581C;//[Offset: 0x3d78, Size: 1]
	Vector Martial_Artist_Target_Back_Camera_Rotation_1BFA9A6E4FC29401CE8D43B8AAD4581C;//[Offset: 0x3d84, Size: 1]
	byte Martial_Artist_Target_Back__Direction_1BFA9A6E4FC29401CE8D43B8AAD4581C;//[Offset: 0x3d90, Size: 1]
	TimelineComponent* Martial Artist Target Back;//[Offset: 0x3d98, Size: 1]
	Vector Martial_Artist_Instigator_Front_Camera_Offset_F70AEBFB4CDEF611144DE3BBA0C06E0C;//[Offset: 0x3da0, Size: 1]
	Vector Martial_Artist_Instigator_Front_Camera_Rotation_F70AEBFB4CDEF611144DE3BBA0C06E0C;//[Offset: 0x3dac, Size: 1]
	byte Martial_Artist_Instigator_Front__Direction_F70AEBFB4CDEF611144DE3BBA0C06E0C;//[Offset: 0x3db8, Size: 1]
	TimelineComponent* Martial Artist Instigator Front;//[Offset: 0x3dc0, Size: 1]
	Vector Martial_Artist_Instigator_Back_Camera_Offset_28F092594C0CD50C0A3EA1BF17E2C5E1;//[Offset: 0x3dc8, Size: 1]
	Vector Martial_Artist_Instigator_Back_Camera_Rotation_28F092594C0CD50C0A3EA1BF17E2C5E1;//[Offset: 0x3dd4, Size: 1]
	byte Martial_Artist_Instigator_Back__Direction_28F092594C0CD50C0A3EA1BF17E2C5E1;//[Offset: 0x3de0, Size: 1]
	TimelineComponent* Martial Artist Instigator Back;//[Offset: 0x3de8, Size: 1]
	Vector CameraDodgeRoll_Relative_Position_4B7EB20A461034BB0B80418AE71BD9F4;//[Offset: 0x3df0, Size: 1]
	float CameraDodgeRoll_Camera_Boom_Length_4B7EB20A461034BB0B80418AE71BD9F4;//[Offset: 0x3dfc, Size: 1]
	byte CameraDodgeRoll__Direction_4B7EB20A461034BB0B80418AE71BD9F4;//[Offset: 0x3e00, Size: 1]
	TimelineComponent* CameraDodgeRoll;//[Offset: 0x3e08, Size: 1]
	float SprintFOVTimeline_FOVAlpha_F9A879E74FD1B4D844684CBEE4230863;//[Offset: 0x3e10, Size: 1]
	byte SprintFOVTimeline__Direction_F9A879E74FD1B4D844684CBEE4230863;//[Offset: 0x3e14, Size: 1]
	TimelineComponent* SprintFOVTimeline;//[Offset: 0x3e18, Size: 1]
	float EndImmunity_Invulnerable_4A69979040C00E80AB6D5687355E98EA;//[Offset: 0x3e20, Size: 1]
	byte EndImmunity__Direction_4A69979040C00E80AB6D5687355E98EA;//[Offset: 0x3e24, Size: 1]
	TimelineComponent* EndImmunity;//[Offset: 0x3e28, Size: 1]
	float StartImmunity_Invulnerable_F2F49BA44D30D2903638919AFE6C1704;//[Offset: 0x3e30, Size: 1]
	byte StartImmunity__Direction_F2F49BA44D30D2903638919AFE6C1704;//[Offset: 0x3e34, Size: 1]
	TimelineComponent* StartImmunity;//[Offset: 0x3e38, Size: 1]
	float Elapsed;//[Offset: 0x3e40, Size: 1]
	bool StopwatchOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e44, Size: 1]
	Vector PlayerLocation;//[Offset: 0x3e48, Size: 1]
	AkAudioEvent* Successful Hit AkEvent;//[Offset: 0x3e58, Size: 1]
	bool ADS Test;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e60, Size: 1]
	float Camera Boom Arm Max;//[Offset: 0x3e64, Size: 1]
	float Test Alpha;//[Offset: 0x3e68, Size: 1]
	bool InFreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6c, Size: 1]
	bool Turn Right;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6d, Size: 1]
	bool Turn Left;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6e, Size: 1]
	float Pitch;//[Offset: 0x3e70, Size: 1]
	ParticleSystem* Friendly Free Fall;//[Offset: 0x3e78, Size: 1]
	ParticleSystem* Enemy Free Fall;//[Offset: 0x3e80, Size: 1]
	float Yaw;//[Offset: 0x3e88, Size: 1]
	float Main Camera Cached FOV;//[Offset: 0x3e8c, Size: 1]
	int HitDirs;//[Offset: 0x3e90, Size: 1]
	enum HitEnum;//[Offset: 0x3e94, Size: 1]
	KSSpecialEffect DownedPPEffect;//[Offset: 0x3e98, Size: 1]
	float Downed PP Transition Duration;//[Offset: 0x3ef0, Size: 1]
	bool IsTrailActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef4, Size: 1]
	MaterialInterface* FlashBang PP Material;//[Offset: 0x3ef8, Size: 1]
	MaterialInstanceDynamic* FlashBang PP Material Instance;//[Offset: 0x3f00, Size: 1]
	class Object[] SFX Grenade Damage Type;//[Offset: 0x3f08, Size: 1]
	class Object[] SFX Blade Damage Type;//[Offset: 0x3f18, Size: 1]
	enum LastDamageHitEnum;//[Offset: 0x3f28, Size: 1]
	Vector LeftTempLoc;//[Offset: 0x3f2c, Size: 1]
	float AffectRange;//[Offset: 0x3f38, Size: 1]
	Vector RightTempLoc;//[Offset: 0x3f3c, Size: 1]
	MaterialInterface* Out Of Bounds PP Material;//[Offset: 0x3f48, Size: 1]
	MaterialInstanceDynamic* Out Of Bounds PP Material Instance;//[Offset: 0x3f50, Size: 1]
	float CachedFOV;//[Offset: 0x3f58, Size: 1]
	LastHitImpulse LastHitInfo;//[Offset: 0x3f60, Size: 1]
	Rotator KnockbackRotation;//[Offset: 0x3fa0, Size: 1]
	float DeltaTime;//[Offset: 0x3fac, Size: 1]
	bool bIsRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb0, Size: 1]
	bool bIsLaunchedOnDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb1, Size: 1]
	bool bSnapshotPoseFacingUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb2, Size: 1]
	AnimMontage* GetUpMontage;//[Offset: 0x3fb8, Size: 1]
	bool bIsRagdollOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc0, Size: 1]
	Vector RagdollPelvisLocation;//[Offset: 0x3fc4, Size: 1]
	Vector RagdollCapsuleLocation;//[Offset: 0x3fd0, Size: 1]
	float TimeInRagdoll;//[Offset: 0x3fdc, Size: 1]
	float MaxTimeInRagdoll;//[Offset: 0x3fe0, Size: 1]
	ParticleSystemComponent* FireParticle;//[Offset: 0x3fe8, Size: 1]
	MaterialInstanceDynamic* GrenadeImpactPointMID;//[Offset: 0x3ff0, Size: 1]
	bool ZiplineActive1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff8, Size: 1]
	float SprintFov;//[Offset: 0x3ffc, Size: 1]
	float SprintFOVChangeDuration;//[Offset: 0x4000, Size: 1]
	float ZiplineFov;//[Offset: 0x4004, Size: 1]
	float PreviousFov;//[Offset: 0x4008, Size: 1]
	DebugFloatHistory InterpLengthHist;//[Offset: 0x4010, Size: 1]
	KSFXCurveComponent* AppliedDownedCurveComponent;//[Offset: 0x4030, Size: 1]
	DamageEffect Effect;//[Offset: 0x4038, Size: 1]
	KSSpecialEffect BloodPPEffect;//[Offset: 0x4090, Size: 1]
	Material* HealthPostProcess;//[Offset: 0x40e8, Size: 1]
	MaterialInstanceDynamic* Health PP MID;//[Offset: 0x40f0, Size: 1]
	float HealthPPInterpSpeed;//[Offset: 0x40f8, Size: 1]
	KSSpecialEffect SonarPPEffect;//[Offset: 0x4100, Size: 1]
	KSSpecialEffect EMPPPEffect;//[Offset: 0x4158, Size: 1]
	bool bEnableDirectionalDowns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41b0, Size: 1]
	bool bEnableComplexDirectionalDowns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41b1, Size: 1]
	float FreeFallParticleDetachTime;//[Offset: 0x41b4, Size: 1]
	KSSpecialEffect OutOfBoundsPPEffect;//[Offset: 0x41b8, Size: 1]
	KSFXCurveComponent* OutOfBoundsEffectCurve;//[Offset: 0x4210, Size: 1]
	KSSpecialEffect ConfirmHitPPEffect;//[Offset: 0x4218, Size: 1]
	int Active Index;//[Offset: 0x4270, Size: 1]
	KSSpecialEffect FirePostProcess;//[Offset: 0x4278, Size: 1]
	DamageEffect[] QueuedDamageEffects;//[Offset: 0x42d0, Size: 1]
	bool InLowTreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42e0, Size: 1]
	float LowHealthTreshold;//[Offset: 0x42e4, Size: 1]
	KSSpecialEffect PP_SkyDive;//[Offset: 0x42e8, Size: 1]
	AkAudioEvent* GadgetSwapSound;//[Offset: 0x4340, Size: 1]
	bool ConfirmHitPPEffectEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4348, Size: 1]
	KSSpecialEffect ConfirmPickupPPEffect;//[Offset: 0x4350, Size: 1]
	int StopLoopingReviveSFX;//[Offset: 0x43a8, Size: 1]
	int StopLoopingArmorSFX;//[Offset: 0x43ac, Size: 1]
	MulticastInlineDelegateProperty OnPrimaryOneWeaponHolstered;//[Size: 1]
	MulticastInlineDelegateProperty OnPrimaryTwoWeaponHolstered;//[Size: 1]
	enum[] ShowFootprintStepTypes;//[Offset: 0x43d0, Size: 1]
	Material* HealthPostProcesMobile;//[Offset: 0x43e0, Size: 1]
	bool AccuracyPenaltyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43e8, Size: 1]
	KSPlayerMod_Accuracy* AccuracyPenaltyMod;//[Offset: 0x43f0, Size: 1]
	float AccuracyPenaltyStartPoints;//[Offset: 0x43f8, Size: 1]
	float AccuracyPenaltyMaxPoints;//[Offset: 0x43fc, Size: 1]
	float AccuracyPenaltyCrouchStartedPoints;//[Offset: 0x4400, Size: 1]
	float AccuracyPenaltyCrouchEndedPoints;//[Offset: 0x4404, Size: 1]
	bool AccuracyPenaltyApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4408, Size: 1]
	float AccuracyPenaltyPoints;//[Offset: 0x440c, Size: 1]
	bool DeathByFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4410, Size: 1]
	float Chimera Door Open Delay;//[Offset: 0x4414, Size: 1]
	TimerHandle ChimeraDoorOpenTimer;//[Offset: 0x4418, Size: 1]
	float half height temp;//[Offset: 0x4420, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4424, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4434, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4444, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4454, Size: 1]
	DamageEffect K2Node_CustomEvent_Effect;//[Offset: 0x4468, Size: 1]
	class Object* K2Node_ClassDynamicCast_AsKSDamage_Type_Base;//[Offset: 0x44c0, Size: 1]
	bool K2Node_ClassDynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44c8, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x44cc, Size: 1]
	float K2Node_Event_Damage;//[Offset: 0x44d4, Size: 1]
	class Object* K2Node_Event_DamageTypeClass;//[Offset: 0x44d8, Size: 1]
	float K2Node_Event_DamageImpulse;//[Offset: 0x44e0, Size: 1]
	Vector K2Node_Event_RelativeImpactLocation;//[Offset: 0x44e4, Size: 1]
	FName K2Node_Event_BoneName;//[Offset: 0x44f0, Size: 1]
	Actor* K2Node_Event_DamageCauser;//[Offset: 0x44f8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4500, Size: 1]
	bool CallFunc_GetRagdollFacingDirection_IsUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4510, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4518, Size: 1]
	bool K2Node_CustomEvent_IsGrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4528, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x452c, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4540, Size: 1]
	HitResult CallFunc_K2_SetWorldLocation_SweepHitResult;//[Offset: 0x4550, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x45d8, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x45e8, Size: 1]
	Vector CallFunc_GetPhysicsLinearVelocity_ReturnValue;//[Offset: 0x45f8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4604, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4618, Size: 1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4628, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x462c, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x4634, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x463c, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x4644, Size: 1]
	bool CallFunc_ShouldLastHitLaunchIntoRagdoll_bShouldRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464c, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x4650, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x4658, Size: 1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4660, Size: 1]
	float K2Node_CustomEvent_DeltaSeconds;//[Offset: 0x4664, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x4668, Size: 1]
	Vector CallFunc_ProcessTakePointHitDamage_WorldHitLocation;//[Offset: 0x4670, Size: 1]
	Vector CallFunc_ProcessTakePointHitDamage_WorldHitNormal;//[Offset: 0x467c, Size: 1]
	Vector CallFunc_ProcessTakePointHitDamage_VectorToHitSource;//[Offset: 0x4688, Size: 1]
	enum CallFunc_ProcessTakePointHitDamage_HitDirection;//[Offset: 0x4694, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x4698, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x46a0, Size: 1]
	FName K2Node_Event_SequenceName;//[Offset: 0x46a4, Size: 1]
	int CallFunc_GetAnimMontage_Priority;//[Offset: 0x46ac, Size: 1]
	bool K2Node_SwitchName_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46b0, Size: 1]
	Vector K2Node_CustomEvent_Camera_Rotation;//[Offset: 0x46b4, Size: 1]
	bool K2Node_CustomEvent_Uses_Rotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c0, Size: 1]
	Vector K2Node_CustomEvent_Camera_Offset;//[Offset: 0x46c4, Size: 1]
	float CallFunc_BreakVector_X;//[Offset: 0x46d0, Size: 1]
	float CallFunc_BreakVector_Y;//[Offset: 0x46d4, Size: 1]
	float CallFunc_BreakVector_Z;//[Offset: 0x46d8, Size: 1]
	float CallFunc_BreakVector_X;//[Offset: 0x46dc, Size: 1]
	float CallFunc_BreakVector_Y;//[Offset: 0x46e0, Size: 1]
	float CallFunc_BreakVector_Z;//[Offset: 0x46e4, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x46e8, Size: 1]
	HitResult CallFunc_K2_SetRelativeRotation_SweepHitResult;//[Offset: 0x46f0, Size: 1]
	HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult;//[Offset: 0x4778, Size: 1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4800, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4804, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4818, Size: 1]
	SkinnableSkeletalMeshComponent* K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component;//[Offset: 0x4828, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4830, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4834, Size: 1]
	SkinnableSkeletalMeshComponent* K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component;//[Offset: 0x4848, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4850, Size: 1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4851, Size: 1]
	bool K2Node_Event_bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4852, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4858, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4868, Size: 1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4878, Size: 1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4879, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x487c, Size: 1]
	DamageEffect K2Node_CustomEvent_Effect;//[Offset: 0x4890, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x48e8, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x48f8, Size: 1]
	class Object* K2Node_ClassDynamicCast_AsKSDamage_Type_Base;//[Offset: 0x4908, Size: 1]
	bool K2Node_ClassDynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4910, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4914, Size: 1]
	KSBloodSplatterComponent* K2Node_DynamicCast_AsKSBlood_Splatter_Component;//[Offset: 0x4928, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4930, Size: 1]
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4931, Size: 1]
	bool CallFunc_GetLocalSettingAsBool_OutBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4932, Size: 1]
	DamageEffect K2Node_CustomEvent_Effect;//[Offset: 0x4938, Size: 1]
	class Object* K2Node_ClassDynamicCast_AsKSDamage_Type_Base;//[Offset: 0x4990, Size: 1]
	bool K2Node_ClassDynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4998, Size: 1]
	CombatEventInfo K2Node_Event_DamageInfo;//[Offset: 0x49a0, Size: 1]
	float K2Node_Event_DamageAmount;//[Offset: 0x4a28, Size: 1]
	class Object* K2Node_Event_DamageTypeClass;//[Offset: 0x4a30, Size: 1]
	Actor* K2Node_Event_DamageCauser;//[Offset: 0x4a38, Size: 1]
	Vector K2Node_Event_DamageOrigin;//[Offset: 0x4a40, Size: 1]
	CombatEventInfo K2Node_Event_DamageInfo;//[Offset: 0x4a50, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4ad8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4ae8, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4af8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4b08, Size: 1]
	DamageEffect K2Node_Event_Effect;//[Offset: 0x4b18, Size: 1]
	DamageEffect K2Node_Event_Effect;//[Offset: 0x4b70, Size: 1]
	Vector CallFunc_ProcessTakePointHitDamage_WorldHitLocation;//[Offset: 0x4bc8, Size: 1]
	Vector CallFunc_ProcessTakePointHitDamage_WorldHitNormal;//[Offset: 0x4bd4, Size: 1]
	Vector CallFunc_ProcessTakePointHitDamage_VectorToHitSource;//[Offset: 0x4be0, Size: 1]
	enum CallFunc_ProcessTakePointHitDamage_HitDirection;//[Offset: 0x4bec, Size: 1]
	class Object* K2Node_ClassDynamicCast_AsKSDamage_Type_Base;//[Offset: 0x4bf0, Size: 1]
	bool K2Node_ClassDynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bf8, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4c00, Size: 1]
	KSCharacterFoundation* K2Node_CustomEvent_Character;//[Offset: 0x4c10, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4c18, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4c28, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4c38, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4c48, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x4c58, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x4c68, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x4c70, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4c78, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4c88, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4c98, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4ca8, Size: 1]
	PlayerState* K2Node_CustomEvent_Player;//[Offset: 0x4cb8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4cc0, Size: 1]
	interface class None* K2Node_DynamicCast_AsINameplate_Widget;//[Offset: 0x4cd0, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce0, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4ce8, Size: 1]
	interface class None* K2Node_DynamicCast_AsINameplate_Widget;//[Offset: 0x4cf8, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d08, Size: 1]
	float K2Node_Event_ExtraTime;//[Offset: 0x4d0c, Size: 1]
	interface class None* K2Node_DynamicCast_AsINameplate_Widget;//[Offset: 0x4d10, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d20, Size: 1]
	byte K2Node_Event_PrevMovementMode;//[Offset: 0x4d21, Size: 1]
	byte K2Node_Event_NewMovementMode;//[Offset: 0x4d22, Size: 1]
	byte K2Node_Event_PrevCustomMode;//[Offset: 0x4d23, Size: 1]
	byte K2Node_Event_NewCustomMode;//[Offset: 0x4d24, Size: 1]
	KSCharacterMovementComponent* K2Node_DynamicCast_AsKSCharacter_Movement_Component;//[Offset: 0x4d28, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d30, Size: 1]
	CombatEventInfo K2Node_CustomEvent_EventInfo;//[Offset: 0x4d38, Size: 1]
	int K2Node_CustomEvent_ExpBonus;//[Offset: 0x4dc0, Size: 1]
	KSPlayerState* K2Node_CustomEvent_Revivee;//[Offset: 0x4dc8, Size: 1]
	KSPlayerState* K2Node_CustomEvent_Reviver;//[Offset: 0x4dd0, Size: 1]
	int K2Node_CustomEvent_ExpBonus;//[Offset: 0x4dd8, Size: 1]
	KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State;//[Offset: 0x4de0, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4de8, Size: 1]
	KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State;//[Offset: 0x4df0, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4df8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4dfc, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4e10, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4e20, Size: 1]
	CombatEventInfo K2Node_CustomEvent_EventInfo;//[Offset: 0x4e30, Size: 1]
	KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State;//[Offset: 0x4eb8, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec0, Size: 1]
	KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State;//[Offset: 0x4ec8, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed0, Size: 1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed1, Size: 1]
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed2, Size: 1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed3, Size: 1]
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed4, Size: 1]
	bool Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed5, Size: 1]
	bool K2Node_Event_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed6, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4ed8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4ee8, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4ef8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4f08, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4f18, Size: 1]
	KSCharacter* K2Node_Event_Reviver;//[Offset: 0x4f28, Size: 1]
	float K2Node_Event_ReviveTime;//[Offset: 0x4f30, Size: 1]
	bool K2Node_Event_Remote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f34, Size: 1]
	KSCharacter* K2Node_Event_Reviver;//[Offset: 0x4f38, Size: 1]
	KSCharacter* K2Node_Event_Reviver;//[Offset: 0x4f40, Size: 1]
	bool K2Node_CustomEvent_IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f48, Size: 1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f49, Size: 1]
	bool K2Node_CustomEvent_IsDodgeRolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4a, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4f4c, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4f60, Size: 1]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x4f70, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4f74, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4f88, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4f98, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4fa8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x4fb8, Size: 1]
	Vector K2Node_Event_BreakingLocation;//[Offset: 0x4fc8, Size: 1]
	Vector K2Node_Event_BreakingDirection;//[Offset: 0x4fd4, Size: 1]
	Vector K2Node_Event_BreakingNormal;//[Offset: 0x4fe0, Size: 1]
	enum K2Node_Event_EndReason;//[Offset: 0x4fec, Size: 1]
	bool K2Node_CustomEvent_IsPowerSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4fed, Size: 1]
	float CallFunc_GetTargetFov_TargetFov;//[Offset: 0x4ff0, Size: 1]
	bool K2Node_CustomEvent_IsZiplining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ff4, Size: 1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ff5, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x4ff8, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5008, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5018, Size: 1]
	bool K2Node_Event_bEnterNoseDive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5028, Size: 1]
	float K2Node_Event_AnimLength;//[Offset: 0x502c, Size: 1]
	FString K2Node_Event_SwingMontageSectionName;//[Offset: 0x5030, Size: 1]
	Master_WeaponComponent_C* K2Node_DynamicCast_AsMaster_Weapon_Component;//[Offset: 0x5040, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5048, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x504c, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x5060, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5070, Size: 1]
	PlayerController* K2Node_Event_PC;//[Offset: 0x5080, Size: 1]
	PlayerController* K2Node_Event_PC;//[Offset: 0x5088, Size: 1]
	bool K2Node_Event_UpdateTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5090, Size: 1]
	bool K2Node_Event_AffectCapsule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5091, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5094, Size: 1]
	Rotator CallFunc_DetermineKnockbackFacing_ActorRotation;//[Offset: 0x50a4, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x50b0, Size: 1]
	Vector CallFunc_KeepActionCameraAboveWater_OutBoomPosition;//[Offset: 0x50c0, Size: 1]
	HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult;//[Offset: 0x50cc, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5154, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x5164, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x5178, Size: 1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5188, Size: 1]
	HitResult K2Node_Event_Hit;//[Offset: 0x518c, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5214, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5224, Size: 1]
	Key K2Node_InputKeyEvent_Key;//[Offset: 0x5238, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5250, Size: 1]
	ParticleSystem* Temp_object_Variable;//[Offset: 0x5260, Size: 1]
	bool K2Node_CustomEvent_IsDodgeRolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5268, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5269, Size: 1]
	ParticleSystem* Temp_object_Variable;//[Offset: 0x5270, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5278, Size: 1]
	ParticleSystem* Temp_object_Variable;//[Offset: 0x5280, Size: 1]
	ParticleSystem* K2Node_Select_Default;//[Offset: 0x5288, Size: 1]
	ParticleSystem* K2Node_Select_Default;//[Offset: 0x5290, Size: 1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5298, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5299, Size: 1]
	ParticleSystem* K2Node_Select_Default;//[Offset: 0x52a0, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x52a8, Size: 1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52b8, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x52c0, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x52d0, Size: 1]
	bool K2Node_Event_bFullyHealed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52e0, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x52e8, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x52f8, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5308, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5309, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x530a, Size: 1]
	KSZiplineMeshComponent* K2Node_DynamicCast_AsKSZipline_Mesh_Component;//[Offset: 0x5310, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5318, Size: 1]
	KSZiplineMeshComponent* K2Node_DynamicCast_AsKSZipline_Mesh_Component;//[Offset: 0x5320, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5328, Size: 1]
	float K2Node_InputAxisKeyEvent_AxisValue;//[Offset: 0x532c, Size: 1]
	float K2Node_InputAxisKeyEvent_AxisValue;//[Offset: 0x5330, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5334, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5338, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5348, Size: 1]
	enum K2Node_Select_Default;//[Offset: 0x5349, Size: 1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534a, Size: 1]
	Vector Temp_struct_Variable;//[Offset: 0x534c, Size: 1]
	KSZiplineMeshComponent* K2Node_DynamicCast_AsKSZipline_Mesh_Component;//[Offset: 0x5358, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5360, Size: 1]
	KSZiplineMeshComponent* K2Node_DynamicCast_AsKSZipline_Mesh_Component;//[Offset: 0x5368, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5370, Size: 1]
	KSCharacter* K2Node_CustomEvent_Character;//[Offset: 0x5378, Size: 1]
	KSItemDrop* K2Node_CustomEvent_ItemDrop;//[Offset: 0x5380, Size: 1]
	KSItem* K2Node_CustomEvent_Item;//[Offset: 0x5388, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5390, Size: 1]
	Vector K2Node_Select_Default;//[Offset: 0x5394, Size: 1]
	float K2Node_Event_InteractTime;//[Offset: 0x53a0, Size: 1]
	float CallFunc_BreakVector_X;//[Offset: 0x53a4, Size: 1]
	float CallFunc_BreakVector_Y;//[Offset: 0x53a8, Size: 1]
	float CallFunc_BreakVector_Z;//[Offset: 0x53ac, Size: 1]
	KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller;//[Offset: 0x53b0, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53b8, Size: 1]
	HitResult CallFunc_K2_SetRelativeLocation_SweepHitResult;//[Offset: 0x53bc, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5444, Size: 1]
	KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller;//[Offset: 0x5448, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5450, Size: 1]
	KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller;//[Offset: 0x5458, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5460, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5461, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5462, Size: 1]
	enum K2Node_Event_Intensity;//[Offset: 0x5463, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5464, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5465, Size: 1]
	interface class None* CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput;//[Offset: 0x5468, Size: 1]
	interface class None* CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput;//[Offset: 0x5478, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x5488, Size: 1]
	SettingDelegateStruct K2Node_MakeStruct_SettingDelegateStruct;//[Offset: 0x5498, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x54b8, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x54c8, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x54d8, Size: 1]
	bool Temp_bool_Has_Been_Initd_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54e8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x54ec, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x5500, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x5510, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x5520, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x5530, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x5540, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x5550, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x5560, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x5570, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x5580, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x5590, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x55a0, Size: 1]
	bool K2Node_CustomEvent_New_Blind_FX_State;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55b0, Size: 1]
	bool Temp_bool_IsClosed_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55b1, Size: 1]
	KSCharacterFoundation* K2Node_CustomEvent_Character;//[Offset: 0x55b8, Size: 1]
	DamageEffect K2Node_CustomEvent_Response;//[Offset: 0x55c0, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5618, Size: 1]
	KSCharacter* K2Node_CustomEvent_Character;//[Offset: 0x5620, Size: 1]
	KSCharacter* K2Node_CustomEvent_Character;//[Offset: 0x5628, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5630, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5631, Size: 1]
	KSCharacterFoundation* K2Node_CustomEvent_KillerCharacter;//[Offset: 0x5638, Size: 1]
	KSCharacterFoundation* K2Node_CustomEvent_KilledCharacter;//[Offset: 0x5640, Size: 1]
	float CallFunc_BreakVector_X;//[Offset: 0x5648, Size: 1]
	float CallFunc_BreakVector_Y;//[Offset: 0x564c, Size: 1]
	float CallFunc_BreakVector_Z;//[Offset: 0x5650, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5654, Size: 1]
	KSWeaponComponent* K2Node_Event_ShieldWeaponComponent;//[Offset: 0x5658, Size: 1]
	KSWeaponComponent* K2Node_Event_ShieldWeaponComponent;//[Offset: 0x5660, Size: 1]
	KSWeaponComponent* K2Node_CustomEvent_ShieldWeaponComponent;//[Offset: 0x5668, Size: 1]
	KSWeaponComponent* K2Node_CustomEvent_ShieldWeaponComponent;//[Offset: 0x5670, Size: 1]
	enum Temp_byte_Variable;//[Offset: 0x5678, Size: 1]
	enum K2Node_Select_Default;//[Offset: 0x5679, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x567c, Size: 1]
	MatchPhase K2Node_CustomEvent_NewPhase;//[Offset: 0x568c, Size: 1]
	MatchPhase K2Node_CustomEvent_PreviousPhase;//[Offset: 0x56a0, Size: 1]
	bool Temp_bool_Variable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56b4, Size: 1]
	AnimMontage* K2Node_Select_Default;//[Offset: 0x56b8, Size: 1]
	LastHitImpulse K2Node_MakeStruct_LastHitImpulse;//[Offset: 0x56c0, Size: 1]
	void OnPrimaryTwoWeaponHolstered__DelegateSignature(KSWeaponComponent* bpp__WeaponComponent__pf, bool bpp__PrimaryTwoHolstered__pf);// 0x2cbecb0
	void OnPrimaryOneWeaponHolstered__DelegateSignature(KSWeaponComponent* bpp__WeaponComponent__pf, bool bpp__PrimaryOneHolstered__pf);// 0x2cbecb0
	void Zipline Pulley Unhide();// 0x1ee1350
	void Zipline Pulley Hide();// 0x1ee1330
	void WindVFXLerp__UpdateFunc();// 0x1ee1310
	void WindVFXLerp__FinishedFunc();// 0x1ee12f0
	void WasLastHitHeadshot(out bool bpp__bHeadshot__pf);// 0x1ee1250
	void VerifyLastHitDamageType(class Object bpp__DamageType__pf, out bool bpp__IsRelatedToThisType__pf);// 0x1ee1170
	void VerifyLastHitBone(FName bpp__ParentBoneName__pf, out bool bpp__IsRelatedToThisBone__pf);// 0x1ee1090
	void UserConstructionScript();// 0x1ee1070
	void Update Flash Bang PP();// 0x1ee1050
	void Update Action Camera(Vector bpp__CameraxRotation__pfT, bool bpp__UsesxRotation__pfT, Vector bpp__CameraxOffset__pfT);// 0x1ee0f10
	void UpdateRagdollOnGround(bool bpp__IsGrounded__pf);// 0x1ee0e00
	void UpdateRagdollMeshLocation();// 0x1ee0de0
	void UpdateRagdoll(float bpp__DeltaSeconds__pf);// 0x1ee0e90
	void UpdatePlayerState(PlayerState* bpp__Player__pf);// 0x1ee0d50
	void UpdateHealthPP();// 0x1ee0d30
	void UpdateDebugHealthVisibility();// 0x1ee0d10
	void UnhideZiplinePulley();// 0x1ee0cf0
	void UnhideUplineDevice();// 0x1ee0cd0
	void TurnOffCapsulePhysics_Server();// 0x1ee0c90
	void TurnOffCapsulePhysics();// 0x1ee0cb0
	void Transition To Main Camera();// 0x1ee0c70
	void Transition To ADS Camera();// 0x1ee0c50
	void TickAccuracyPenalization();// 0x1ee0c30
	void SwitchToSnapshotPose();// 0x1ee0c10
	void StopReviveSFX();// 0x1ee0bf0
	void StopLowHealthSFX();// 0x1ee0bd0
	void Start Viewed Down Hit();// 0x1ee0bb0
	void StartInteractionWithShield(KSWeaponComponent* bpp__ShieldWeaponComponent__pf);// 0x1ee0b20
	void StartImmunity__UpdateFunc();// 0x1ee0b00
	void StartImmunity__FinishedFunc();// 0x1ee0ae0
	void StartHacking();// 0x1ee0ac0
	void SprintFOVTimeline__UpdateFunc();// 0x1ee0aa0
	void SprintFOVTimeline__FinishedFunc();// 0x1ee0a80
	void ShowDebugLocation(bool bpp__bVisible__pf);// 0x1ee09f0
	void ShouldLastHitLaunchIntoRagdoll(out bool bpp__bShouldRagdoll__pf);// 0x1ee0950
	void SFXStateChangeReset();// 0x1ee0850
	void SFXStateChangeMax();// 0x1ee0830
	void SFXStateChangeHalf();// 0x1ee0810
	void SFXRingHalfSTOP();// 0x1ee07f0
	void SFXRingHalfPlay();// 0x1ee07d0
	void SFXRingFullSTOP();// 0x1ee07b0
	void SFXRingFullPlay();// 0x1ee0790
	void Set up ADS Blur Dynamic Material();// 0x1ee0930
	void Set Health SFX RTPC();// 0x1ee0910
	void Setup Debug Info Widget();// 0x1ee08f0
	void SetPostProcessHealthValue(float bpp__Health__pf);// 0x1ee0870
	void RestoreNormalCamera();// 0x1ee0770
	void RemoveAccuracyPenalization();// 0x1ee0750
	void ReevaluateDebugWidgetAttachment();// 0x1ee0730
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x1ee06b0
	void ReceiveBeginPlay();// 0x1ee0690
	void Play Viewed Sonar Hit(DamageEffect bpp__Effect__pf);// 0x1ee0580
	void Play Viewed EMP Hit(DamageEffect bpp__Effect__pf);// 0x1ee0470
	void Play Viewed Blood Hit(DamageEffect bpp__Effect__pf);// 0x1ee0360
	void Play Martial Artist Target Front();// 0x1ee0340
	void Play Martial Artist Target Back();// 0x1ee0320
	void Play Martial Artist Instigator Front();// 0x1ee0300
	void Play Martial Artist Instigator Back();// 0x1ee02e0
	void PlayReviveSFX();// 0x1edff00
	void PlayPickupFX(Actor* bpp__ItemActor__pf);// 0x1edfe70
	void PlayHitMarkerSFX(CombatEventInfo bpp__CombatEventInfo__pf);// 0x1edfd30
	void PlayHitFromRadialDamage(out const DamageEffect bpp__Effect__pf__const);// 0x1edfc50
	void PlayHitFromPointDamage(out const DamageEffect bpp__Effect__pf__const);// 0x1edfb70
	void PlayerRevived(KSPlayerState* bpp__Revivee__pf, KSPlayerState* bpp__Reviver__pf, int bpp__ExpBonus__pf);// 0x1ee01e0
	void PlayerDown(CombatEventInfo bpp__EventInfo__pf, int bpp__ExpBonus__pf);// 0x1ee0060
	void PlayerDeath(CombatEventInfo bpp__EventInfo__pf);// 0x1edff20
	void PlayDownPPOnce();// 0x1edfb50
	void PlayActionCameraSequence(FName bpp__SequenceName__pf);// 0x1edfac0
	void PhaseChange(MatchPhase bpp__NewPhase__pf, MatchPhase bpp__PreviousPhase__pf);// 0x1edf9c0
	void OnZiplineChangeForFov(bool bpp__IsZiplining__pf);// 0x1edf910
	void On Anim Initialized();// 0x1edf9a0
	void OnStartSkydive();// 0x1edf8f0
	void OnSprintChangedCallback(bool bpp__IsSprinting__pf);// 0x1edf860
	void OnReviveStart(KSCharacter* bpp__Reviver__pf, float bpp__ReviveTime__pf, bool bpp__Remote__pf);// 0x1edf760
	void OnReviveInterrupt(KSCharacter* bpp__Reviver__pf);// 0x1edf6d0
	void OnReviveComplete(KSCharacter* bpp__Reviver__pf);// 0x1edf640
	void OnPowerSlideChangedCallback(bool bpp__IsPowerSliding__pf);// 0x1edf5b0
	void OnLanded(out const HitResult bpp__Hit__pf__const);// 0x1edf4f0
	void OnItemPickedUp_Event(KSCharacter* bpp__Character__pf, KSItemDrop* bpp__ItemDrop__pf, KSItem* bpp__Item__pf);// 0x1edf3f0
	void OnImmuneStart();// 0x1edf3d0
	void OnImmuneEnd();// 0x1edf3b0
	void OnHealthChanged(const KSCharacterFoundation* bpp__Character__pf__const);// 0x1edf320
	void OnGenderChanged();// 0x1edf300
	void OnGadgetSwapped();// 0x1edf2e0
	void OnFlashEffectStarted();// 0x1edf2c0
	void OnFlashEffectEnded();// 0x1edf2a0
	void OnFlashBangHit(enum bpp__Intensity__pf);// 0x1edf220
	void OnFieldOfViewModChange();// 0x1edf200
	void OnEndZiplineRagdoll();// 0x1edf1e0
	void OnEndSkydive();// 0x1edf1c0
	void OnEndPowerSlide(enum bpp__EndReason__pf);// 0x1edf140
	void OnEndOutOfBounds();// 0x1edf120
	void OnDodgeRollChangedEvent(bool bpp__IsDodgeRolling__pf);// 0x1edf090
	void OnCrouchStarted(KSCharacter* bpp__Character__pf);// 0x1edf000
	void OnCrouchEnded(KSCharacter* bpp__Character__pf);// 0x1edef70
	void OnBeginZiplineRagdoll();// 0x1edef50
	void OnBeginPowerSlide();// 0x1edef30
	void OnBeginOutOfBounds();// 0x1edef10
	void OnArmorInteractStart(float bpp__InteractTime__pf);// 0x1edee90
	void OnArmorInteractInterrupt();// 0x1edee70
	void OnArmorInteractComplete();// 0x1edee50
	void OnADSBlurSettingChanged();// 0x1edee30
	void NoseDiveFOVTimeline__UpdateFunc();// 0x1edee10
	void NoseDiveFOVTimeline__FinishedFunc();// 0x1ededf0
	void NoseDiveCameraTransition(bool bpp__bEnterNoseDive__pf, float bpp__AnimLength__pf);// 0x1eded20
	void Multicast_StartInteractionWithShield(const KSWeaponComponent* bpp__ShieldWeaponComponent__pf__const);// 0x1edec90
	void Multicast_EndInteractionWithShield(const KSWeaponComponent* bpp__ShieldWeaponComponent__pf__const);// 0x1edec00
	void Martial Artist Target Front__UpdateFunc();// 0x1edebe0
	void Martial Artist Target Front__FinishedFunc();// 0x1edebc0
	void Martial Artist Target Back__UpdateFunc();// 0x1edeba0
	void Martial Artist Target Back__FinishedFunc();// 0x1edeb80
	void Martial Artist Instigator Front__UpdateFunc();// 0x1edeb60
	void Martial Artist Instigator Front__FinishedFunc();// 0x1edeb40
	void Martial Artist Instigator Back__UpdateFunc();// 0x1edeb20
	void Martial Artist Instigator Back__FinishedFunc();// 0x1edeb00
	void LandingRollEvent(bool bpp__IsDodgeRolling__pf);// 0x1edea70
	void KeepActionCameraAboveWater(Vector bpp__InBoomPosition__pf, out Vector bpp__OutBoomPosition__pf);// 0x1ede990
	void K2_OnMovementModeChanged(byte bpp__PrevMovementMode__pf, byte bpp__NewMovementMode__pf, byte bpp__PrevCustomMode__pf, byte bpp__NewCustomMode__pf);// 0x1ede840
	void K2_OnEndViewTarget(PlayerController* bpp__PC__pf);// 0x1ede7b0
	void K2_OnBecomeViewTarget(PlayerController* bpp__PC__pf);// 0x1ede720
	bool IsOutOfBoundsRoyale();// 0x1ede6f0
	void InpAxisKeyEvt_Gamepad_LeftY_K2Node_InputAxisKeyEvent(float bpp__AxisValue__pf);// 0x1ede670
	void InpAxisKeyEvt_Gamepad_LeftX_K2Node_InputAxisKeyEvent(float bpp__AxisValue__pf);// 0x1ede5f0
	void InpActEvt_T_K2Node_InputKeyEvent(Key bpp__Key__pf);// 0x1ede510
	void InitializeHealthPP();// 0x1ede4f0
	void HideZiplinePulley();// 0x1ede4d0
	void HideUplineDevice();// 0x1ede4b0
	void HealthRegenerationStopped(bool bpp__bFullyHealed__pf);// 0x1ede420
	void HealthRegenerationStarted();// 0x1ede400
	void Handle Downed Ragdoll();// 0x1ede3e0
	void Get ADS Camera By Tag(FName bpp__Tag__pf, out CameraComponent* bpp__CameraxComponent__pfT);// 0x1ede300
	void GetTargetFov(out float bpp__TargetFov__pf);// 0x1ede260
	void GetRagdollFacingDirection(out bool bpp__IsUp__pf);// 0x1ede1c0
	void GetLastHitDistance(out float bpp__OutDistance__pf);// 0x1ede120
	void GetDownedTransitionMontage(out AnimMontage* bpp__OutAnimMontage__pf);// 0x1ede080
	void GetDeathTransitionAnimation(out AnimSequence* bpp__OutAnimSequence__pf);// 0x1eddfe0
	void FreeFall Camera Burst();// 0x1eddfc0
	void Finish Action Camera Update();// 0x1eddfa0
	void FinishHacking();// 0x1eddf80
	void ExitDownedRagdoll();// 0x1eddf60
	void ExecuteUbergraph_MainCharacter(int bpp__EntryPoint__pf);// 0x1eddee0
	void ExecuteUbergraph_MainCharacter(int bpp__EntryPoint__pf);// 0x1edde60
	void ExecuteUbergraph_MainCharacter(int bpp__EntryPoint__pf);// 0x1eddde0
	void ExecuteUbergraph_MainCharacter(int bpp__EntryPoint__pf);// 0x1eddd60
	void ExecuteUbergraph_MainCharacter(int bpp__EntryPoint__pf);// 0x1eddce0
	void ExecuteUbergraph_MainCharacter(int bpp__EntryPoint__pf);// 0x1eddc60
	void ExecuteUbergraph_MainCharacter(int bpp__EntryPoint__pf);// 0x1eddbe0
	void ExecuteUbergraph_MainCharacter(int bpp__EntryPoint__pf);// 0x1eddb60
	void Event Force Set Blind FX(bool bpp__NewxBlindxFXxState__pfTTT);// 0x1eddad0
	void EventSetupCamerasForSpectator(bool bpp__Enabled__pf);// 0x1edda40
	void EventOnKilled(const KSCharacterFoundation* bpp__KillerCharacter__pf__const, const KSCharacterFoundation* bpp__KilledCharacter__pf__const);// 0x1edd970
	void EnterFreeFallFOVTimeline__UpdateFunc();// 0x1edd950
	void EnterFreeFallFOVTimeline__FinishedFunc();// 0x1edd930
	void EnterDownedRagdoll();// 0x1edd910
	void End Down PP();// 0x1edd8f0
	void EndInteractionWithShield(KSWeaponComponent* bpp__ShieldWeaponComponent__pf);// 0x1edd860
	void EndImmunity__UpdateFunc();// 0x1edd840
	void EndImmunity__FinishedFunc();// 0x1edd820
	void DoSetOnFire();// 0x1edd800
	void DoExtinguishFire();// 0x1edd7e0
	void DoBindZiplineEvents();// 0x1edd7c0
	void DoBindSprintEvents();// 0x1edd7a0
	void DoBindDodgeRollEvents();// 0x1edd780
	void DoBindCrouchEvents();// 0x1edd760
	void DetermineKnockbackFacing(Vector bpp__HitDirection__pf, enum bpp__SideHit__pf, out Rotator bpp__ActorRotation__pf);// 0x1edd640
	void DetachSkydiveParticle();// 0x1edd620
	void DestructibleSpeedGateOverlappedEvent(Vector bpp__BreakingLocation__pf, Vector bpp__BreakingDirection__pf, Vector bpp__BreakingNormal__pf);// 0x1edd4f0
	void DeathStateChange();// 0x1edd4d0
	void Chimera Door Open();// 0x1edd4b0
	void Check Low Health();// 0x1edd490
	void CheckFlashBangOnViewTargetChange();// 0x1edd470
	void CameraDodgeRoll__UpdateFunc();// 0x1edd450
	void CameraDodgeRoll__FinishedFunc();// 0x1edd430
	void Cache Hit Direction(out const DamageEffect bpp__DamageEffect__pf__const);// 0x1edd350
	void CacheRagdollPelvisLocation();// 0x1edd330
	void CacheHitDirection(KSCharacterFoundation* bpp__Character__pf, DamageEffect bpp__Response__pf);// 0x1edd1f0
	void BlueprintOnStopSwimming();// 0x1edd1d0
	void BlueprintOnStartSwimming();// 0x1edd1b0
	bool BlueprintHandleDeath();// 0x1edd180
	void BindADSBlurSetting();// 0x1edd160
	void Audio_Init();// 0x1edd140
	void ApplyLastHitImpulse(bool bpp__UpdateTargetRotation__pf, bool bpp__AffectCapsule__pf);// 0x1edd070
	void ApplyAccuracyPenalization();// 0x1edd050
	void PlayerReviveDelegate__DelegateSignature(KSPlayerState* bpp__Revivee__pf, KSPlayerState* bpp__Reviver__pf, int bpp__ExpBonus__pf);// 0x2cbecb0
	void PlayerDownInfo__DelegateSignature(CombatEventInfo bpp__EventInfo__pf, int bpp__ExpBonus__pf);// 0x2cbecb0
	void PlayerDeathInfo__DelegateSignature(CombatEventInfo bpp__EventInfo__pf);// 0x2cbecb0
	void OnSprintChanged__DelegateSignature(bool bpp__IsSprinting__pf);// 0x2cbecb0
	void OnPowerSlideChanged__DelegateSignature(bool bpp__IsPowerSliding__pf);// 0x2cbecb0
	void OnPlayerStateChanged__DelegateSignature(PlayerState* bpp__PlayerState__pf);// 0x2cbecb0
	void OnPhaseChange__DelegateSignature(MatchPhase bpp__NewPhase__pf, MatchPhase bpp__PreviousPhase__pf);// 0x2cbecb0
	void OnItemPickedUp__DelegateSignature(KSCharacter* bpp__Character__pf, KSItemDrop* bpp__ItemDrop__pf, KSItem* bpp__Item__pf);// 0x2cbecb0
	void OnHealthChanged__DelegateSignature(const KSCharacterFoundation* bpp__Character__pf);// 0x2cbecb0
	void OnGoDown__DelegateSignature();// 0x2cbecb0
	void OnEndZipline__DelegateSignature();// 0x2cbecb0
	void OnDodgeRollChanged__DelegateSignature(bool bpp__IsDodgeRolling__pf);// 0x2cbecb0
	void OnDeathStateChanged__DelegateSignature();// 0x2cbecb0
	void OnCrouchStarted__DelegateSignature(KSCharacter* bpp__Character__pf);// 0x2cbecb0
	void OnCrouchEnded__DelegateSignature(KSCharacter* bpp__Character__pf);// 0x2cbecb0
	void OnCharacterFoundationKilled__DelegateSignature(const KSCharacterFoundation* bpp__KillerCharacter__pf, const KSCharacterFoundation* bpp__KilledCharacter__pf);// 0x2cbecb0
	void OnBeginZipline__DelegateSignature();// 0x2cbecb0
	void OnAnimInitialized__DelegateSignature();// 0x2cbecb0

--------------------------------
Class: StickyTurretSFXStackComponent_C.KSSFXStackComponent.ActorComponent.Object
	KSAkComponent* OwnerAkComponent;//[Offset: 0x180, Size: 1]
	<AkAudioEvent*,int> EndHandleMap;//[Offset: 0x188, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1d8, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x1e8, Size: 1]
	AkAudioEvent* K2Node_CustomEvent_StartEvent;//[Offset: 0x1f8, Size: 1]
	AkAudioEvent* K2Node_CustomEvent_StopEvent;//[Offset: 0x200, Size: 1]
	int K2Node_CustomEvent_StackSize;//[Offset: 0x208, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x20c, Size: 1]
	AkAudioEvent* K2Node_CustomEvent_StartEvent;//[Offset: 0x220, Size: 1]
	AkAudioEvent* K2Node_CustomEvent_StopEvent;//[Offset: 0x228, Size: 1]
	int K2Node_CustomEvent_StackSize;//[Offset: 0x230, Size: 1]
	AkAudioEvent* K2Node_CustomEvent_StartEvent;//[Offset: 0x238, Size: 1]
	AkAudioEvent* K2Node_CustomEvent_StopEvent;//[Offset: 0x240, Size: 1]
	int K2Node_CustomEvent_StackSize;//[Offset: 0x248, Size: 1]
	int CallFunc_AddLoopingEvent_ReturnValue;//[Offset: 0x24c, Size: 1]
	int CallFunc_Map_Find_Value;//[Offset: 0x250, Size: 1]
	void ReceiveBeginPlay();// 0x1ec4710
	void OnSFXStackRemoved(AkAudioEvent* bpp__StartEvent__pf, AkAudioEvent* bpp__StopEvent__pf, int bpp__StackSize__pf);// 0x1f2c1c0
	void OnSFXStackCreated(AkAudioEvent* bpp__StartEvent__pf, AkAudioEvent* bpp__StopEvent__pf, int bpp__StackSize__pf);// 0x1f2c0c0
	void OnSFXStackChanged(AkAudioEvent* bpp__StartEvent__pf, AkAudioEvent* bpp__StopEvent__pf, int bpp__StackSize__pf);// 0x1f2bfc0
	void OnSFXStackChanged__DelegateSignature(AkAudioEvent* bpp__StartEvent__pf, AkAudioEvent* bpp__StopEvent__pf, int bpp__StackSize__pf);// 0x2cbecb0

--------------------------------
Class: KSSFXStackComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnSFXStackCreatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSFXStackChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSFXStackRemovedDel;//[Size: 1]
	void StartLoopingSFX(Actor* SourceActor, AkAudioEvent* StartEvent, AkAudioEvent* EndEvent);// 0x278e270
	void EndLoopingSFX(Actor* SourceActor, AkAudioEvent* EndEvent);// 0x278d340
	void EndAllLoopingSFXForActor(Actor* SourceActor);// 0x278d2c0
	void EndAllLoopingSFX();// 0x278d2a0

--------------------------------
Class: OutOfBoundsComponent_C.KSOutOfBoundsComponent.ActorComponent.Object
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x178, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x188, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x198, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x1a8, Size: 1]
	AkExternalSourceInfo[] Temp_struct_Variable;//[Offset: 0x1b8, Size: 1]
	delegate Temp_delegate_Variable;//[Offset: 0x1c8, Size: 1]
	void OnEndOutOfBounds();// 0x1ef9a90
	void OnBeginOutOfBounds();// 0x1ec4000

--------------------------------
Class: CharacterHeatSourceComponent_C.KSHeatSourceComponent.ActorComponent.Object
	ParticleSystem* ThermalVisionExtraParticlesPS;//[Offset: 0x100, Size: 1]
	ParticleSystemComponent* ThermalVisionExtraParticlesComp;//[Offset: 0x108, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x110, Size: 1]
	enum K2Node_Event_NewState;//[Offset: 0x120, Size: 1]
	bool K2Node_SwitchEnum_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	byte K2Node_Event_EndPlayReason;//[Offset: 0x122, Size: 1]
	KSCharacterBase* K2Node_DynamicCast_AsKSCharacter_Base;//[Offset: 0x128, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	KSHeatSourceComponent* K2Node_CustomEvent_HeatSource;//[Offset: 0x138, Size: 1]
	float K2Node_CustomEvent_NewTemperature;//[Offset: 0x140, Size: 1]
	KSCharacter* K2Node_DynamicCast_AsKSCharacter;//[Offset: 0x148, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	int CallFunc_GetFloat_Priority;//[Offset: 0x154, Size: 1]
	int CallFunc_GetParticleSystem_Priority;//[Offset: 0x158, Size: 1]
	void ReceiveEndPlay(byte bpp__EndPlayReason__pf);// 0x1ec4730
	void OnThermalVisionStateChanged(enum bpp__NewState__pf);// 0x1ec43b0
	void OnTemperatureChanged_Event(const KSHeatSourceComponent* bpp__HeatSource__pf__const, float bpp__NewTemperature__pf);// 0x1ec42e0
	void OnOwnerInfoUpdateNotify();// 0x1ec42c0
	void ExecuteUbergraph_CharacterHeatSourceComponent(int bpp__EntryPoint__pf);// 0x1ec4160
	void Conditionally Apply Temperature(float bpp__AppliedxTemp__pfT);// 0x1ec4020
	void Apply Temperature(float bpp__AppliedxTemp__pfT);// 0x1ec3e70
	void OnTempChanged__DelegateSignature(const KSHeatSourceComponent* bpp__HeatSource__pf, float bpp__NewTemperature__pf);// 0x2cbecb0

--------------------------------
Class: CharacterEmotionComponent_C.KSEmotionComponent.ActorComponent.Object
	float CachedPlayerHealth;//[Offset: 0x238, Size: 1]
	float PainedDuration;//[Offset: 0x23c, Size: 1]
	int FocusedId;//[Offset: 0x240, Size: 1]
	int DeadId;//[Offset: 0x244, Size: 1]
	int WoundedId;//[Offset: 0x248, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x24c, Size: 1]
	KSCharacter* K2Node_DynamicCast_AsKSCharacter;//[Offset: 0x260, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x26c, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x27c, Size: 1]
	KSCharacterBase* K2Node_DynamicCast_AsKSCharacter_Base;//[Offset: 0x290, Size: 1]
	bool K2Node_DynamicCast_bSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	delegate K2Node_CreateDelegate_OutputDelegate;//[Offset: 0x29c, Size: 1]
	void ReceiveBeginPlay();// 0x1ec4710
	void Player Downed Changed(KSCharacter* bpp__Character__pf);// 0xfb2060
	void Check Death State();// 0x1ec4000
	void Character Health Changed(KSCharacterFoundation* bpp__KSCharacterFoundation__pf);// 0x1ec3f70
	void Character Aim State Changed(enum bpp__NewParam__pf);// 0x1ec3ef0
	void OnHealthChanged__DelegateSignature(const KSCharacterFoundation* bpp__Character__pf);// 0x2cbecb0
	void OnDeathStateChanged__DelegateSignature();// 0x2cbecb0
	void OnCharacterDownedChanged__DelegateSignature(KSCharacter* bpp__Character__pf);// 0x2cbecb0
	void OnAimStateChange__DelegateSignature(enum bpp__NewAimMode__pf);// 0x2cbecb0

--------------------------------
Class: KSEmotionComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnEmotionChanged;//[Size: 1]
	interface class None* EmotionComponentOwner;//[Offset: 0xc0, Size: 1]
	<int,enum> EmotionInstances;//[Offset: 0xd0, Size: 1]
	int TopInstanceId;//[Offset: 0x120, Size: 1]
	enum TopEmotionEnum;//[Offset: 0x124, Size: 1]
	int NextEmotionId;//[Offset: 0x128, Size: 1]
	KSEmoteConversionEntry[] ConversionEntries;//[Offset: 0x180, Size: 1]
	<FName,enum> EmotionNameToEnumMap;//[Offset: 0x190, Size: 1]
	<enum,FName> EmotionEnumToNameMap;//[Offset: 0x1e0, Size: 1]
	bool RemoveEmotionById(int InstanceId);// 0x26996e0
	int RemoveEmotion(enum InEmotion);// 0x2699650
	interface classNone GetEmotionComponentOwner();// 0x2698db0
	enum GetCurrentEmotion();// 0x2698d80
	void AddEmotionInternal(enum Emotion, int ID);// 0x26985f0
	int AddEmotionForDuration(enum InEmotion, float Duration);// 0x2698520
	int AddEmotion(enum InEmotion);// 0x2698490
	int AddAndRemoveEmotion(enum InEmotion, int InInstanceID);// 0x26983d0

--------------------------------
Class: KSEmoteConversionEntry
	FName EmotionName;//[Offset: 0x0, Size: 1]
	enum EmotionEnum;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MainCharacterThreatComponent_C.ConfigurableThreatComponent_C.KSThreatComponent.ActorComponent.Object
	<int,LinearColor> DebugColorMap;//[Offset: 0x190, Size: 1]
	bool DebuggingVisuals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	LinearColor K2Node_MakeStruct_LinearColor;//[Offset: 0x1e4, Size: 1]
	float K2Node_Event_DeltaSeconds;//[Offset: 0x1f4, Size: 1]
	bool K2Node_Event_Show;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	LinearColor K2Node_MakeStruct_LinearColor;//[Offset: 0x1fc, Size: 1]
	LinearColor CallFunc_Map_Find_Value;//[Offset: 0x20c, Size: 1]
	void ReceiveTick(float bpp__DeltaSeconds__pf);// 0x1ee8d20
	void DebugThreatLevels(bool bpp__Show__pf);// 0x1ee8460

--------------------------------
Class: KSTabletMeshComponent.KSSkeletalMeshComponent.SkinnableMergedMeshComponent.SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void OpenTablet();// 0x279b8e0
	void OnOpenComplete();// 0x279b570
	void OnCloseComplete();// 0x279b550
	void CloseTablet();// 0x279aaf0

--------------------------------
Class: MainEnvironmentTracker_C.EnvironmentTrackerComponent.ActorComponent.Object
	FName[] Environment Priorties;//[Offset: 0x138, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x148, Size: 1]
	bool K2Node_SwitchName_CmpSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x154, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x15c, Size: 1]
	FName Temp_name_Variable;//[Offset: 0x164, Size: 1]
	FName K2Node_Event_OldEnvironment;//[Offset: 0x16c, Size: 1]
	void BlueprintEnvironmentChanged(FName bpp__OldEnvironment__pf);// 0x1ec3f70

--------------------------------
Class: LastHitImpulse
	Actor* Instigator_20_5676A25747AAE4C1CAE6F7904A72E838;//[Offset: 0x0, Size: 1]
	class Object* DamageTypeClass_8_14D8CFB249FFF88F6E22558B9519E6BC;//[Offset: 0x8, Size: 1]
	float Damage_26_4F432E834F2E7B32B65B2DB29767FD53;//[Offset: 0x10, Size: 1]
	float DamageImpulse_31_89A6727F4083948B82A5FDB503B7442B;//[Offset: 0x14, Size: 1]
	Vector HitPosition_14_120F8D2B490F19F3A4CEBB901F6115CC;//[Offset: 0x18, Size: 1]
	Vector HitDirection_13_8E0293204787B83EDA90D29AEF408597;//[Offset: 0x24, Size: 1]
	FName HitBoneName_16_43F2A6864AE18D72112E449F4233747C;//[Offset: 0x30, Size: 1]
	enum SideHit_23_F8CB69E84C39514126DE2A8BB7DD8631;//[Offset: 0x38, Size: 1]

--------------------------------
Class: DebugFloatHistory
	float[] Samples;//[Offset: 0x0, Size: 1]
	float MaxSamples;//[Offset: 0x10, Size: 1]
	float MinValue;//[Offset: 0x14, Size: 1]
	float MaxValue;//[Offset: 0x18, Size: 1]
	bool bAutoAdjustMinMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: KSPlayerMod_Accuracy.KSPlayerMod.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	float BaseAccuracyMultiplier;//[Offset: 0x3a0, Size: 1]
	bool bShouldAffectADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]

--------------------------------
Class: KSBloodSplatterComponent.KSFXCurveComponent.ActorComponent.Object
	float Damage;//[Offset: 0x138, Size: 1]
	void AddDamageInstance(float DamageAmount, out const Vector DamageOrigin);// 0x2635010

--------------------------------
Class: KSZiplineMeshComponent.KSSkeletalMeshComponent.SkinnableMergedMeshComponent.SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void StartZiplining();// 0x27dfa40
	void EndZiplining();// 0x27df270

--------------------------------
Class: Barricade_C.KSBuild.KSLagCompensatedActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x380, Size: 1]
	StaticMeshComponent* SM_AnvilBarricadeDamageBoxBevel;//[Offset: 0x388, Size: 1]
	StaticMeshComponent* DamageZoneMain;//[Offset: 0x390, Size: 1]
	ParticleSystemComponent* ParticleSystem1;//[Offset: 0x398, Size: 1]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x3a0, Size: 1]
	StaticMeshComponent* DamageVent1;//[Offset: 0x3a8, Size: 1]
	StaticMeshComponent* DamageVent;//[Offset: 0x3b0, Size: 1]
	StaticMeshComponent* SM_APX_Building_Vents_a;//[Offset: 0x3b8, Size: 1]
	BoxComponent* MantleBox;//[Offset: 0x3c0, Size: 1]
	StaticMeshComponent* CanisterCube;//[Offset: 0x3c8, Size: 1]
	AkComponent* Barricade Damage SFX;//[Offset: 0x3d0, Size: 1]
	SceneComponent* Glass_FXLocation;//[Offset: 0x3d8, Size: 1]
	Warrant_Level_1_WeaponComponent_C* Warrant_Level_1_WeaponComponent;//[Offset: 0x3e0, Size: 1]
	BoxComponent* NavModifier2;//[Offset: 0x3e8, Size: 1]
	BoxComponent* NavModifier1;//[Offset: 0x3f0, Size: 1]
	BoxComponent* NavModifier;//[Offset: 0x3f8, Size: 1]
	DefaultDestroyableHazardComponent_C* DestroyableHazardComponent;//[Offset: 0x400, Size: 1]
	<FName,ParticleSystem*> SparkBones;//[Offset: 0x408, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x458, Size: 1]
	<FName,ParticleSystem*> DamagedBones;//[Offset: 0x460, Size: 1]
	<FName,ParticleSystem*> DestroyedBones;//[Offset: 0x4b0, Size: 1]
	bool bCanisterBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 1]
	bool bUseCenterDamageZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x501, Size: 1]
	KSPlayerState*[] AffectedPlayers;//[Offset: 0x508, Size: 1]
	KSPlayerMod* DamageMod;//[Offset: 0x518, Size: 1]
	bool bUseRightDamageZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x520, Size: 1]
	bool bUseLeftDamageZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x521, Size: 1]
	bool bUseDamageZoneMain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x522, Size: 1]
	KSSpecialEffect Distortion_PP;//[Offset: 0x528, Size: 1]
	void IsInDamageZone(Actor* Actor, out bool Inside, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsOverlappingActor_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2cbecb0
	void SetupDamageZone(StaticMeshComponent* DamageZoneComponent, bool CallFunc_HasAuthority_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2cbecb0
	void OnCanisterDestroyed(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, SceneComponent*[] CallFunc_GetChildrenComponents_Children, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, SceneComponent* CallFunc_Array_Get_Item, GDT_Barricade_ABP_C* K2Node_DynamicCast_AsGDT_Barricade_ABP, bool K2Node_DynamicCast_bSuccess, Actor* CallFunc_GetOwner_ReturnValue, KSProjectile* K2Node_DynamicCast_AsKSProjectile, bool K2Node_DynamicCast_bSuccess, FName CallFunc_GetAttachSocketName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, const FName Temp_name_Variable, bool CallFunc_Array_RemoveItem_ReturnValue);// 0x2cbecb0
	float GetRealActorTakeoverDelay();// 0x2cbecb0
	float ComponentTakeDamage(PrimitiveComponent* PrimitiveComponent, float DamageAmount, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2cbecb0
	void Barricade Placed_SFX();// 0x2cbecb0
	void Lightly Damaged_SFX();// 0x2cbecb0
	void Heavily Damaged_SFX();// 0x2cbecb0
	void Destroyed_SFX();// 0x2cbecb0
	void Glass Broken_SFX();// 0x2cbecb0
	void BarricadeImpactSFX();// 0x2cbecb0
	void BarricadeGlassImpactSFX();// 0x2cbecb0
	void DamagedLoopingSFXSTOP();// 0x2cbecb0
	void OnBuildComponentDestroyed(PrimitiveComponent* PrimitiveComponent);// 0x2cbecb0
	void OnHealthChanged();// 0x2cbecb0
	void ReceiveBeginPlay();// 0x2cbecb0
	void PlayDestructionEffects();// 0x2cbecb0
	void OnRadialDamageTaken(const DamageType* DamageType);// 0x2cbecb0
	void OnPointDamageTaken(const DamageType* DamageType, PrimitiveComponent* PrimitiveComponent, FName HitBone);// 0x2cbecb0
	void SpawnDamagedEffect();// 0x2cbecb0
	void SpawnDamageSparks();// 0x2cbecb0
	void OnKilled();// 0x2cbecb0
	void Update Health Changed FX();// 0x2cbecb0
	void OnDamageZoneBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2cbecb0
	void OnDamageZoneEndOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2cbecb0
	void ReceiveEndPlay(byte EndPlayReason);// 0x2cbecb0
	void SetVFXColor(StaticMeshComponent* NewParam);// 0x2cbecb0
	void Start_PP(KSCharacterFoundation* Character);// 0x2cbecb0
	void End_PP(KSCharacterFoundation* Character);// 0x2cbecb0
	void End_All_PP();// 0x2cbecb0
	void ExecuteUbergraph_Barricade(int EntryPoint, float CallFunc_GetMaxHealth_ReturnValue, int Temp_int_Array_Index_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, const Rotator Temp_struct_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, KSCharacter* CallFunc_GetCharacterOwner_ReturnValue, MultiSkinObject* CallFunc_GetBodyApparelSkinObject_ReturnValue, int CallFunc_GetAudioEvent_Priority, AkAudioEvent* CallFunc_GetAudioEvent_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, int CallFunc_PostEvent_ReturnValue, PrimitiveComponent* K2Node_Event_PrimitiveComponent, int Temp_int_Loop_Counter_Variable, FName[] CallFunc_Map_Keys_Keys, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ParticleSystem* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, float CallFunc_GetPostFireTime_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float CallFunc_SafeDivide_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue, bool Temp_bool_Has_Been_Initd_Variable, FName[] CallFunc_Map_Keys_Keys, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, ParticleSystem* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName[] CallFunc_Map_Keys_Keys, const DamageType* K2Node_Event_DamageType, FName CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, ParticleSystem* CallFunc_Map_Find_Value, bool CallFunc_Map_Find_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, const DamageType* K2Node_Event_DamageType, PrimitiveComponent* K2Node_Event_PrimitiveComponent, FName K2Node_Event_HitBone, bool CallFunc_EqualEqual_NameName_ReturnValue, bool Temp_bool_IsClosed_Variable, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_GetMaterialInterface_Priority, MaterialInterface* CallFunc_GetMaterialInterface_ReturnValue, PrimitiveComponent* K2Node_CustomEvent_OverlappedComponent, Actor* K2Node_CustomEvent_OtherActor, PrimitiveComponent* K2Node_CustomEvent_OtherComp, int K2Node_CustomEvent_OtherBodyIndex, bool K2Node_CustomEvent_bFromSweep, const HitResult K2Node_CustomEvent_SweepResult, KSCharacterFoundation* K2Node_DynamicCast_AsKSCharacter_Foundation, bool K2Node_DynamicCast_bSuccess, PrimitiveComponent* K2Node_CustomEvent_OverlappedComponent, Actor* K2Node_CustomEvent_OtherActor, PrimitiveComponent* K2Node_CustomEvent_OtherComp, int K2Node_CustomEvent_OtherBodyIndex, KSCharacterFoundation* K2Node_DynamicCast_AsKSCharacter_Foundation, bool K2Node_DynamicCast_bSuccess, KSPlayerState* CallFunc_GetKSBestPlayerState_ReturnValue, KSPlayerState* CallFunc_GetKSBestPlayerState_ReturnValue, bool CallFunc_IsInDamageZone_Inside, bool CallFunc_IsEnemy_ReturnValue, KSPlayerState* CallFunc_GetPlayerStateOwner_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_GiveMod_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_Array_AddUnique_ReturnValue, bool CallFunc_RemoveMod_ReturnValue, bool CallFunc_Array_RemoveItem_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, byte K2Node_Event_EndPlayReason, int CallFunc_PostAkEvent_ReturnValue, KSPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, KSCharacterFoundation* CallFunc_GetCharacterFoundationOwner_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_RemoveMod_ReturnValue, KSPlayerState* CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_RemoveMod_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, bool Temp_bool_Has_Been_Initd_Variable, int CallFunc_PostAkEvent_ReturnValue, const delegate Temp_delegate_Variable, StaticMeshComponent* K2Node_CustomEvent_NewParam, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, enum CallFunc_IsFriendlyWithLocalPlayer_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, LinearColor CallFunc_SelectColor_ReturnValue, int CallFunc_PostAkEvent_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, KSCharacterFoundation* K2Node_CustomEvent_Character, int CallFunc_PostAkEvent_ReturnValue, KSCharacterFoundation* K2Node_CustomEvent_Character, bool Temp_bool_IsClosed_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, bool CallFunc_IsDedicatedServer_ReturnValue, int CallFunc_PostEvent_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, KSFXCurveComponent* CallFunc_StartKSSpecialEffect_ReturnValue, float CallFunc_GetMaxHealth_ReturnValue, KSPlayerState* CallFunc_Array_Get_Item, float CallFunc_SafeDivide_ReturnValue, KSCharacterFoundation* CallFunc_GetCharacterFoundationOwner_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, int CallFunc_Array_Length_ReturnValue, float CallFunc_GetMaxHealth_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, float CallFunc_SafeDivide_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue);// 0x2cbecb0

--------------------------------
Class: GDT_Barricade_ABP_C.AnimInstance.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x270, Size: 1]
	AnimNode_Root AnimGraphNode_Root;//[Offset: 0x278, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2b8, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x2f0, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x328, Size: 1]
	AnimNode_TransitionResult AnimGraphNode_TransitionResult;//[Offset: 0x360, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x398, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x420, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x460, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x4e8, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x528, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x5b0, Size: 1]
	AnimNode_SequencePlayer AnimGraphNode_SequencePlayer;//[Offset: 0x5f0, Size: 1]
	AnimNode_StateResult AnimGraphNode_StateResult;//[Offset: 0x678, Size: 1]
	AnimNode_StateMachine AnimGraphNode_StateMachine;//[Offset: 0x6b8, Size: 1]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x778, Size: 1]
	AnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;//[Offset: 0x890, Size: 1]
	AnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;//[Offset: 0x8c0, Size: 1]
	AnimNode_ModifyBone AnimGraphNode_ModifyBone;//[Offset: 0x8f0, Size: 1]
	bool DeployedWhenCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa08, Size: 1]
	bool GlassShattered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa09, Size: 1]
	void AnimGraph(out PoseLink AnimGraph);// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GDT_Barricade_ABP_AnimGraphNode_TransitionResult_59F197FD4E563328886783B0C79B07EB();// 0x2cbecb0
	void EvaluateGraphExposedInputs_ExecuteUbergraph_GDT_Barricade_ABP_AnimGraphNode_TransitionResult_3826CDAA4329537438E3139DD691BF2A();// 0x2cbecb0
	void BlueprintInitializeAnimation();// 0x2cbecb0
	void ExecuteUbergraph_GDT_Barricade_ABP(int EntryPoint, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, float CallFunc_GetRelevantAnimTimeRemaining_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue, Actor* CallFunc_GetOwningActor_ReturnValue, KSBuild* K2Node_DynamicCast_AsKSBuild, bool K2Node_DynamicCast_bSuccess, KSCharacter* CallFunc_GetCharacterOwner_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2cbecb0

--------------------------------
Class: Warrant_Level_1_WeaponComponent_C.Warrant_WeaponComponent_C.MasterPistol_WeaponComponent_C.Master_WeaponComponent_C.KSWeaponComponent.KSEquipmentCosmeticComponent.ActorComponent.Object

--------------------------------
Class: Warrant_WeaponComponent_C.MasterPistol_WeaponComponent_C.Master_WeaponComponent_C.KSWeaponComponent.KSEquipmentCosmeticComponent.ActorComponent.Object

--------------------------------
Class: MasterPistol_WeaponComponent_C.Master_WeaponComponent_C.KSWeaponComponent.KSEquipmentCosmeticComponent.ActorComponent.Object

--------------------------------
Class: DefaultDestroyableHazardComponent_C.KSDestroyableHazardComponent.ActorComponent.Object

--------------------------------
Class: KSDestroyableHazardComponent.ActorComponent.Object
	float MinPerceptionValue;//[Offset: 0xb0, Size: 1]
	float MaxPerceptionValue;//[Offset: 0xb4, Size: 1]
	float RandomizedPerceptionValue;//[Offset: 0xb8, Size: 1]
	bool ShouldReactWithEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	bool ShouldReactWithGunshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd, Size: 1]
	Actor*[] ActorsSeenBy;//[Offset: 0xc0, Size: 1]
	bool ShouldFireAt();// 0x2689b90
	bool ShouldEMP();// 0x2689b70

--------------------------------
Class: P12K_Drop_C.Master_WeaponDrop_C.KSWeaponAssetDrop.KSItemDrop.Actor.Object

--------------------------------
Class: Master_WeaponDrop_C.KSWeaponAssetDrop.KSItemDrop.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x850, Size: 1]
	ParticleSystemComponent* DropParticleComponent;//[Offset: 0x858, Size: 1]
	void ReceiveBeginPlay();// 0x2cbecb0
	void ReceiveEndPlay(byte EndPlayReason);// 0x2cbecb0
	void ExecuteUbergraph_Master_WeaponDrop(int EntryPoint, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, byte K2Node_Event_EndPlayReason, ParticleSystemComponent* CallFunc_SpawnEmitterAttached_ReturnValue, KSItem* CallFunc_GetItemAsset_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum CallFunc_GetInGameRarity_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, LinearColor CallFunc_GetLinearColorForRarity_ReturnValue);// 0x2cbecb0

--------------------------------
Class: LR15Fullbody_Drop_C.Master_WeaponDrop_C.KSWeaponAssetDrop.KSItemDrop.Actor.Object

--------------------------------
Class: Executioner_Drop_C.Master_WeaponDrop_C.KSWeaponAssetDrop.KSItemDrop.Actor.Object

--------------------------------
Class: LW6Revolver_Drop_C.Master_WeaponDrop_C.KSWeaponAssetDrop.KSItemDrop.Actor.Object

--------------------------------
Class: BarricadeWeapon_C.KSWeapon_Build.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	void GetDesiredBuildLocationAndRotation(out Vector OutLocation, out Rotator OutRotation, Vector CallFunc_GetDesiredBuildLocationAndRotation_OutLocation, Rotator CallFunc_GetDesiredBuildLocationAndRotation_OutRotation);// 0x2cbecb0

--------------------------------
Class: Weapon_InstantFire_Pistol_C.Weapon_InstantFire_C.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object

--------------------------------
Class: Weapon_InstantFire_C.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x848, Size: 1]
	float Hit Scan Distance;//[Offset: 0x850, Size: 1]
	void ApplyHit(Vector Direction, out HitResult[] Hits, Actor*[] EmptyActorArray, Actor*[] PreviouslyHitActors, int HitCount, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, HitResult CallFunc_Array_Get_Item, float CallFunc_CalculateDamageFromHitInfo_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, Vector CallFunc_NegateVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetShotPenetrationCount_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, Controller* CallFunc_GetDamageInstigator_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, bool CallFunc_DoRadialDamage_ReturnValue, bool CallFunc_ShouldDoRadialDamage_ReturnValue, Controller* CallFunc_GetDamageInstigator_ReturnValue, float CallFunc_DoPointDamage_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2cbecb0
	void CalculateHits(KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, Actor*[] CallFunc_GetActorsToIgnore_ReturnValue, AimData CallFunc_GetCachedAim_ReturnValue, KSWeaponAsset* CallFunc_GetWeaponAsset_ReturnValue, Vector CallFunc_GetEndTraceLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, HitResult[] CallFunc_MultiLineWeaponTraceByChannel_OutHits, bool CallFunc_MultiLineWeaponTraceByChannel_ReturnValue);// 0x2cbecb0
	void FireWeapon();// 0x2cbecb0
	void ProcessHits(out const AimData ReceivedAim, out const HitResult[] Hits);// 0x2cbecb0
	void ExecuteUbergraph_Weapon_InstantFire(int EntryPoint, bool CallFunc_HasAuthority_ReturnValue, const AimData K2Node_Event_ReceivedAim, const HitResult[] K2Node_Event_Hits, Pawn* CallFunc_GetInstigator_ReturnValue, bool CallFunc_IsLocallyControlled_ReturnValue);// 0x2cbecb0

--------------------------------
Class: QuickMeleeWeapon_C.Weapon_Melee_C.KSWeapon_Melee.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object

--------------------------------
Class: Weapon_Melee_C.KSWeapon_Melee.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object

--------------------------------
Class: Weapon_InstantFire_LMG_C.Weapon_InstantFire_C.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object

--------------------------------
