Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 1]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 1]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 1]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 1]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 1]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 1]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 1]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 1]
	Actor*[] LevelSequenceActors;//[Offset: 0x88, Size: 1]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x98, Size: 1]
	StreamingLevelsToConsider StreamingLevelsToConsider;//[Offset: 0xa8, Size: 1]
	FString StreamingLevelsPrefix;//[Offset: 0xd0, Size: 1]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xe0, Size: 1]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0xe8, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0xf0, Size: 1]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0xf8, Size: 1]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x100, Size: 1]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11e, Size: 1]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x120, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x128, Size: 1]
	GameStateBase* GameState;//[Offset: 0x130, Size: 1]
	AISystemBase* AISystem;//[Offset: 0x138, Size: 1]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x140, Size: 1]
	Level*[] Levels;//[Offset: 0x148, Size: 1]
	LevelCollection[] LevelCollections;//[Offset: 0x158, Size: 1]
	GameInstance* OwningGameInstance;//[Offset: 0x188, Size: 1]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x190, Size: 1]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a0, Size: 1]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1a8, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate;//[Offset: 0x200, Size: 1]
	ActorComponent*[] ComponentsThatNeedEndOfFrameUpdate_OnGameThread;//[Offset: 0x210, Size: 1]
	WorldComposition* WorldComposition;//[Offset: 0x560, Size: 1]
	WorldPSCPool PSCPool;//[Offset: 0x5f0, Size: 1]
	HirezObjectPool HirezObjectPool;//[Offset: 0x710, Size: 1]
	WorldSettings* K2_GetWorldSettings();// 0x46625b0
	void HandleTimelineScrubbed();// 0x4662590

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x2d74e00

--------------------------------
Class: WorldSettings.Info.Actor.Object
	int VisibilityCellSize;//[Offset: 0x228, Size: 1]
	byte VisibilityAggressiveness;//[Offset: 0x22c, Size: 1]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22d, Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22d, Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 1]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 1]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x230, Size: 1]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x238, Size: 1]
	float WorldToMeters;//[Offset: 0x240, Size: 1]
	float KillZ;//[Offset: 0x244, Size: 1]
	class DamageType* KillZDamageType;//[Offset: 0x248, Size: 1]
	float WorldGravityZ;//[Offset: 0x250, Size: 1]
	float GlobalGravityZ;//[Offset: 0x254, Size: 1]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x258, Size: 1]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x260, Size: 1]
	class GameModeBase* DefaultGameMode;//[Offset: 0x268, Size: 1]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x270, Size: 1]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x278, Size: 1]
	Vector DefaultColorScale;//[Offset: 0x27c, Size: 1]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x288, Size: 1]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x28c, Size: 1]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x290, Size: 1]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x298, Size: 1]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x2b8, Size: 1]
	float MonoCullingDistance;//[Offset: 0x2dc, Size: 1]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x2e0, Size: 1]
	float TimeDilation;//[Offset: 0x2e8, Size: 1]
	float MatineeTimeDilation;//[Offset: 0x2ec, Size: 1]
	float DemoPlayTimeDilation;//[Offset: 0x2f0, Size: 1]
	float MinGlobalTimeDilation;//[Offset: 0x2f4, Size: 1]
	float MaxGlobalTimeDilation;//[Offset: 0x2f8, Size: 1]
	float MinUndilatedFrameTime;//[Offset: 0x2fc, Size: 1]
	float MaxUndilatedFrameTime;//[Offset: 0x300, Size: 1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x304, Size: 1]
	PlayerState* Pauser;//[Offset: 0x348, Size: 1]
	NetViewer[] ReplicationViewers;//[Offset: 0x350, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x360, Size: 1]
	PlayerState* PauserPlayerState;//[Offset: 0x370, Size: 1]
	int MaxNumberOfBookmarks;//[Offset: 0x378, Size: 1]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x380, Size: 1]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x388, Size: 1]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x398, Size: 1]
	void OnRep_WorldGravityZ();// 0x1fa35a0

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58, Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58, Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58, Size: 1]
	bool bHidden;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x58, Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x58, Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x58, Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	bool bRelevantForLevelBounds;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59, Size: 1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59, Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59, Size: 1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59, Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x59, Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5a, Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5a, Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5a, Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5a, Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5a, Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5a, Size: 1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5a, Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5a, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 1]
	enum UpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5d, Size: 1]
	enum DefaultUpdateOverlapsMethodDuringLevelStreaming;//[Offset: 0x5e, Size: 1]
	byte RemoteRole;//[Offset: 0x5f, Size: 1]
	RepMovement ReplicatedMovement;//[Offset: 0x60, Size: 1]
	float InitialLifeSpan;//[Offset: 0x94, Size: 1]
	float CustomTimeDilation;//[Offset: 0x98, Size: 1]
	RepAttachment AttachmentReplication;//[Offset: 0xa0, Size: 1]
	Actor* Owner;//[Offset: 0xe0, Size: 1]
	FName NetDriverName;//[Offset: 0xe8, Size: 1]
	byte Role;//[Offset: 0xf0, Size: 1]
	byte NetDormancy;//[Offset: 0xf1, Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0xf2, Size: 1]
	byte AutoReceiveInput;//[Offset: 0xf3, Size: 1]
	int InputPriority;//[Offset: 0xf4, Size: 1]
	InputComponent* InputComponent;//[Offset: 0xf8, Size: 1]
	float NetCullDistanceSquared;//[Offset: 0x100, Size: 1]
	int NetTag;//[Offset: 0x104, Size: 1]
	float NetUpdateFrequency;//[Offset: 0x108, Size: 1]
	float MinNetUpdateFrequency;//[Offset: 0x10c, Size: 1]
	float NetPriority;//[Offset: 0x110, Size: 1]
	Pawn* Instigator;//[Offset: 0x118, Size: 1]
	Actor*[] Children;//[Offset: 0x120, Size: 1]
	SceneComponent* RootComponent;//[Offset: 0x130, Size: 1]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x138, Size: 1]
	FName[] Layers;//[Offset: 0x150, Size: 1]
	ChildActorComponent* ParentComponent;//[Offset: 0x160, Size: 1]
	FName[] Tags;//[Offset: 0x170, Size: 1]
	delegate OnTakeAnyDamage;//[Offset: 0x180, Size: 1]
	delegate OnTakePointDamage;//[Offset: 0x181, Size: 1]
	delegate OnTakeRadialDamage;//[Offset: 0x182, Size: 1]
	delegate OnActorBeginOverlap;//[Offset: 0x183, Size: 1]
	delegate OnActorEndOverlap;//[Offset: 0x184, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x185, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x186, Size: 1]
	delegate OnClicked;//[Offset: 0x187, Size: 1]
	delegate OnReleased;//[Offset: 0x188, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x189, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x18a, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x18b, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x18c, Size: 1]
	delegate OnActorHit;//[Offset: 0x18d, Size: 1]
	delegate OnDestroyed;//[Offset: 0x18e, Size: 1]
	delegate OnEndPlay;//[Offset: 0x18f, Size: 1]
	ActorComponent*[] InstanceComponents;//[Offset: 0x1f0, Size: 1]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x200, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x44fb8b0
	void UserConstructionScript();// 0x2d74e00
	void TearOff();// 0x27b60a0
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x44fb7f0
	void SetTickGroup(byte NewTickGroup);// 0x44fb6e0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x44fb760
	void SetReplicates(bool bInReplicates);// 0x44fb650
	void SetReplicateMovement(bool bInReplicateMovement);// 0x44fb5c0
	void SetOwner(Actor* NewOwner);// 0x44fb530
	void SetNetDormancy(byte NewDormancy);// 0x44fb4b0
	void SetLifeSpan(float InLifespan);// 0x44fb430
	void SetAutoDestroyWhenFinished(bool bVal);// 0x44fb3a0
	void SetActorTickInterval(float TickInterval);// 0x44fb320
	void SetActorTickEnabled(bool bEnabled);// 0x44fb290
	void SetActorScale3D(Vector NewScale3D);// 0x44fb200
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x44fb170
	void SetActorHiddenInGame(bool bNewHidden);// 0x44fb0e0
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x44fb050
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x44fafc0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x44faf30
	void ReceiveTick(float DeltaSeconds);// 0x2d74e00
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x2d74e00
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x2d74e00
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x2d74e00
	void ReceiveEndPlay(byte EndPlayReason);// 0x2d74e00
	void ReceiveDestroyed();// 0x2d74e00
	void ReceiveBeginPlay();// 0x2d74e00
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x2d74e00
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x2d74e00
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x2d74e00
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x2d74e00
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x2d74e00
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x2d74e00
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x2d74e00
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x2d74e00
	void ReceiveActorEndCursorOver();// 0x2d74e00
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x2d74e00
	void ReceiveActorBeginCursorOver();// 0x2d74e00
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x44fae20
	void OnRep_ReplicateMovement();// 0x26b68d0
	void OnRep_ReplicatedMovement();// 0x2881080
	void OnRep_Owner();// 0xe8e060
	void OnRep_Instigator();// 0x2a1cbd0
	void OnRep_AttachmentReplication();// 0x2729950
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x44fac90
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x44fac00
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x44fab10
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44fa920
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x44fa840
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44fa650
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44fa4a0
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44fa2f0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44fa100
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44f9f50
	void K2_OnReset();// 0x2d74e00
	void K2_OnEndViewTarget(PlayerController* PC);// 0x2d74e00
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x2d74e00
	SceneComponent* K2_GetRootComponent();// 0x27fc5f0
	ActorComponent*[] K2_GetComponentsByClass(class ActorComponent ComponentClass);// 0x44f9e70
	Rotator K2_GetActorRotation();// 0x44f9db0
	Vector K2_GetActorLocation();// 0x44f9d30
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x44f9c30
	void K2_DestroyComponent(ActorComponent* Component);// 0x44f9bb0
	void K2_DestroyActor();// 0xe01eb0
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x44f99f0
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x44f9830
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x44f96e0
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x44f9590
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44f93a0
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44f91f0
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44f9040
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44f8e50
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44f8ca0
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x44f8af0
	bool IsOverlappingActor(const Actor* Other);// 0x44f8a60
	bool IsNeutral(const Actor* pOther);// 0x44f89d0
	bool IsFriendly(const Actor* pOther);// 0x44f8940
	bool IsEnemy(const Actor* pOther);// 0x44f88b0
	bool IsChildActor();// 0x44f8880
	bool IsActorTickEnabled();// 0x2895540
	bool IsActorBeingDestroyed();// 0x44f8850
	bool HasAuthority();// 0x44f8820
	bool HasATeam();// 0x44f87e0
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x44f8740
	Vector GetVelocity();// 0x44f8700
	Transform GetTransform();// 0x44f86b0
	bool GetTickableWhenPaused();// 0x44f8680
	int GetTeamNum();// 0x44f8650
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x44f85b0
	byte GetRemoteRole();// 0x44f8590
	ChildActorComponent* GetParentComponent();// 0x44f8560
	Actor* GetParentActor();// 0x44f8530
	Actor* GetOwner();// 0x27946f0
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x44f8480
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x44f8390
	byte GetLocalRole();// 0x44f8370
	float GetLifeSpan();// 0x44f8330
	Controller* GetInstigatorController();// 0x44f8300
	Pawn* GetInstigator();// 0x44f82d0
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x44f81d0
	float GetInputAxisValue(const FName InputAxisName);// 0x44f8130
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x44f8040
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x44f7fa0
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x44f7f00
	float GetGameTimeSinceCreation();// 0x44f7ed0
	float GetDotProductTo(const Actor* OtherActor);// 0x44f7e30
	float GetDistanceTo(const Actor* OtherActor);// 0x44f7d90
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x44f7c90
	ActorComponent*[] GetComponentsByInterface(class Interface Interface);// 0x44f7bb0
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x44f7b20
	FName GetAttachParentSocketName();// 0x44f79e0
	Actor* GetAttachParentActor();// 0x44f79b0
	void GetAttachedActors(out Actor*[] OutActors, bool bResetArray);// 0x44f7a20
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x44f78b0
	Vector GetActorUpVector();// 0x44f7840
	float GetActorTimeDilation();// 0x44f7810
	float GetActorTickInterval();// 0x44f77e0
	Vector GetActorScale3D();// 0x44f77a0
	Vector GetActorRightVector();// 0x44f7730
	Vector GetActorRelativeScale3D();// 0x44f76f0
	Vector GetActorForwardVector();// 0x44f7680
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x44f7590
	bool GetActorEnableCollision();// 0x44f7560
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent, bool bIncludeFromChildActors);// 0x44f73e0
	void ForceNetUpdate();// 0x29d5720
	void FlushNetDormancy();// 0x44f73c0
	void EnableInput(PlayerController* PlayerController);// 0x3c14210
	void DisableInput(PlayerController* PlayerController);// 0x44f7330
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x44f72a0
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x44f7210
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x44f7180
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x44f6fc0
	bool ActorHasTag(FName Tag);// 0x44f6f30

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 1]
	NavAgentSelector SupportedAgentsMask;//[Offset: 0x40, Size: 1]
	FName DefaultAgentName;//[Offset: 0x44, Size: 1]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 1]
	FString SubPathString;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	float DamageImpulse;//[Offset: 0x2c, Size: 1]
	float DestructibleImpulse;//[Offset: 0x30, Size: 1]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 1]
	float DamageFalloff;//[Offset: 0x38, Size: 1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x258, Size: 1]
	int Priority;//[Offset: 0x25c, Size: 1]
	float FluidFriction;//[Offset: 0x260, Size: 1]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x220, Size: 1]
	Color BrushColor;//[Offset: 0x224, Size: 1]
	int PolyFlags;//[Offset: 0x228, Size: 1]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 1]
	Model* Brush;//[Offset: 0x230, Size: 1]
	BrushComponent* BrushComponent;//[Offset: 0x238, Size: 1]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	GeomSelection[] SavedSelections;//[Offset: 0x248, Size: 1]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 1]
	byte G;//[Offset: 0x1, Size: 1]
	byte R;//[Offset: 0x2, Size: 1]
	byte A;//[Offset: 0x3, Size: 1]

--------------------------------
Class: Model.Object

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x430, Size: 1]
	BodySetup* BrushBodySetup;//[Offset: 0x438, Size: 1]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x210, Size: 1]
	float LDMaxDrawDistance;//[Offset: 0x214, Size: 1]
	float CachedMaxDrawDistance;//[Offset: 0x218, Size: 1]
	byte DepthPriorityGroup;//[Offset: 0x21c, Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x21d, Size: 1]
	byte IndirectLightingCacheQuality;//[Offset: 0x21e, Size: 1]
	enum LightmapType;//[Offset: 0x21f, Size: 1]
	bool bUseMaxLODAsImposter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	bool bBatchImpostersAsInstances;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 1]
	bool bForceLocalLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x220, Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x221, Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x221, Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x221, Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x221, Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x221, Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x221, Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x221, Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x221, Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x222, Size: 1]
	bool bVisibleInRayTracing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x222, Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x222, Size: 1]
	bool bRenderInDepthPass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x222, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x222, Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x222, Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x222, Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x222, Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x223, Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x223, Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x223, Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x223, Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x223, Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x223, Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x223, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x223, Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x224, Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x224, Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x224, Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x224, Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x224, Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x224, Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x224, Size: 1]
	bool bShouldNotReceiveCapsuleShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x225, Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x225, Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x225, Size: 1]
	bool bExcludeFromLightAttachmentGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x225, Size: 1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x225, Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x225, Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x225, Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x225, Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x226, Size: 1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x226, Size: 1]
	bool bFillCollisionUnderneathForNavmesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x226, Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x226, Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x226, Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x226, Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x226, Size: 1]
	bool bExcludeFromContributionCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x226, Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x228, Size: 1]
	byte OutlineDepthMode;//[Offset: 0x229, Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x22b, Size: 1]
	byte ForwardDirectionalLightIndex;//[Offset: 0x22c, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x22d, Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x22e, Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x230, Size: 1]
	CustomPrimitiveData CustomPrimitiveData;//[Offset: 0x238, Size: 1]
	CustomPrimitiveData CustomPrimitiveDataInternal;//[Offset: 0x248, Size: 1]
	int TranslucencySortPriority;//[Offset: 0x260, Size: 1]
	int VisibilityId;//[Offset: 0x264, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextures;//[Offset: 0x268, Size: 1]
	int8 VirtualTextureLodBias;//[Offset: 0x278, Size: 1]
	int8 VirtualTextureCullMips;//[Offset: 0x279, Size: 1]
	int8 VirtualTextureMinCoverage;//[Offset: 0x27a, Size: 1]
	enum VirtualTextureRenderPassType;//[Offset: 0x27b, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x280, Size: 1]
	float OutlineThicknessMultiplier;//[Offset: 0x284, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x288, Size: 1]
	float OutlineZFadeMin;//[Offset: 0x298, Size: 1]
	float OutlineZFadeMax;//[Offset: 0x29c, Size: 1]
	float BoundsScale;//[Offset: 0x2a8, Size: 1]
	Actor*[] MoveIgnoreActors;//[Offset: 0x2b8, Size: 1]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2c8, Size: 1]
	BodyInstance BodyInstance;//[Offset: 0x2e8, Size: 1]
	delegate OnComponentHit;//[Offset: 0x3f8, Size: 1]
	delegate OnComponentBeginOverlap;//[Offset: 0x3f9, Size: 1]
	delegate OnComponentEndOverlap;//[Offset: 0x3fa, Size: 1]
	delegate OnComponentWake;//[Offset: 0x3fb, Size: 1]
	delegate OnComponentSleep;//[Offset: 0x3fc, Size: 1]
	delegate OnBeginCursorOver;//[Offset: 0x3fe, Size: 1]
	delegate OnEndCursorOver;//[Offset: 0x3ff, Size: 1]
	delegate OnClicked;//[Offset: 0x400, Size: 1]
	delegate OnReleased;//[Offset: 0x401, Size: 1]
	delegate OnInputTouchBegin;//[Offset: 0x402, Size: 1]
	delegate OnInputTouchEnd;//[Offset: 0x403, Size: 1]
	delegate OnInputTouchEnter;//[Offset: 0x404, Size: 1]
	delegate OnInputTouchLeave;//[Offset: 0x405, Size: 1]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x420, Size: 1]
	float CustomFOV;//[Offset: 0x428, Size: 1]
	bool WasRecentlyRendered(float Tolerance);// 0x4622360
	void WakeRigidBody(FName BoneName);// 0x29ec290
	void WakeAllRigidBodies();// 0x1fc6620
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x46222b0
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x46221e0
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x4622160
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x46220d0
	void SetSimulatePhysics(bool bSimulate);// 0x4622040
	void SetRenderInMainPass(bool bValue);// 0x4621fb0
	void SetRenderCustomDepth(bool bValue);// 0x4621f20
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x4621e90
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x4621850
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4621d80
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4621c70
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4621c70
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x4621b50
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4621a30
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x46218e0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x46218e0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x46217c0
	void SetOutlineZFadeMin(const float InOutlineZFadeMin);// 0x4621740
	void SetOutlineZFadeMax(const float InOutlineZFadeMax);// 0x46216c0
	void SetOutlineThicknessMultiplier(const float InThicknessMultiplier);// 0x4621640
	void SetOutlineDepthMode(byte InOutlineDepthMode);// 0x46215c0
	void SetOutlineColor(out const LinearColor InColor);// 0x4621530
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x46214a0
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x1fae0b0
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x46213d0
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0xe9c4e0
	void SetMassScale(FName BoneName, float InMassScale);// 0x4621300
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x4621200
	void SetLinearDamping(float InDamping);// 0x285c310
	void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);// 0x46210e0
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);// 0x4621050
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x4620fc0
	void SetForwardDirectionalLightIndex(byte Index);// 0x4620f40
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);// 0x4620eb0
	void SetEnableGravity(bool bGravityEnabled);// 0x4620e20
	void SetCustomPrimitiveDataVector4(int DataIndex, Vector4 Value);// 0x4620d50
	void SetCustomPrimitiveDataVector3(int DataIndex, Vector Value);// 0x4620c80
	void SetCustomPrimitiveDataVector2(int DataIndex, Vector2D Value);// 0x4620bc0
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);// 0x4620af0
	void SetCustomFOV(float NewFOV);// 0x281dda0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x4620a70
	void SetCustomDepthStencilValue(int Value);// 0x46209f0
	void SetCullDistance(float NewCullDistance);// 0x4620970
	void SetConstraintMode(byte ConstraintMode);// 0x46208f0
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x4620830
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x46207b0
	void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);// 0x46206e0
	void SetCollisionObjectType(byte Channel);// 0x4620660
	void SetCollisionEnabled(byte NewType);// 0x46205e0
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x4620510
	void SetCastShadow(bool NewCastShadow);// 0x4620480
	void SetCastInsetShadow(bool bInCastInsetShadow);// 0x46203f0
	void SetBoundsScale(float NewBoundsScale);// 0x4620370
	void SetAngularDamping(float InDamping);// 0x2847cc0
	void SetAllUseCCD(bool InUseCCD);// 0x460b3e0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x4620290
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x46201b0
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x4620090
	void SetAllMassScale(float InMassScale);// 0x4620010
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x461ff10
	void PutRigidBodyToSleep(FName BoneName);// 0x461fe90
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x461fb20
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x461f7f0
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x461f4c0
	bool K2_IsQueryCollisionEnabled();// 0x461f480
	bool K2_IsPhysicsCollisionEnabled();// 0x461f440
	bool K2_IsCollisionEnabled();// 0x461f400
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x461f0c0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x461f030
	bool IsOverlappingActor(const Actor* Other);// 0x461efa0
	bool IsGravityEnabled();// 0x2811390
	bool IsAnyRigidBodyAwake();// 0x2776780
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x461eed0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x461ee00
	void HideOutline();// 0x461ede0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x461edb0
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x461ecc0
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x461ec20
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x461eb80
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x461eab0
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x461eab0
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x461ea00
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x461e910
	int GetNumMaterials();// 0x461e8e0
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x461e800
	MaterialInterface* GetMaterial(int ElementIndex);// 0x461e760
	float GetMassScale(FName BoneName);// 0x461e6c0
	float GetMass();// 0x461e680
	float GetLinearDamping();// 0x461e640
	Vector GetInertiaTensor(FName BoneName);// 0x461e590
	bool GetGenerateOverlapEvents();// 0x461e560
	byte GetCollisionResponseToChannel(byte Channel);// 0x461e4d0
	FName GetCollisionProfileName();// 0x461e490
	byte GetCollisionObjectType();// 0xe9c750
	byte GetCollisionEnabled();// 0xe9c820
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x461e350
	Vector GetCenterOfMass(FName BoneName);// 0x461e2b0
	float GetAngularDamping();// 0x461e270
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x461e160
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x461e090
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x461dff0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x461df70
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x461def0
	void ClearMoveIgnoreComponents();// 0x461dec0
	void ClearMoveIgnoreActors();// 0x461dea0
	bool CanCharacterStepUp(Pawn* Pawn);// 0x461de00
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x461db90
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x461dcb0
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x461db90
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x461d9d0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x461d810
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x461d6e0
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x461d5c0
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x461d490
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x461d360
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x461d240
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x461d120
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x461cfd0
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x461ceb0

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xb8, Size: 1]
	SceneComponent* AttachParent;//[Offset: 0xc0, Size: 1]
	FName AttachSocketName;//[Offset: 0xc8, Size: 1]
	SceneComponent*[] AttachChildren;//[Offset: 0xd0, Size: 1]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0xe0, Size: 1]
	Vector RelativeLocation;//[Offset: 0x11c, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x128, Size: 1]
	Vector RelativeScale3D;//[Offset: 0x134, Size: 1]
	Vector ComponentVelocity;//[Offset: 0x140, Size: 1]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14c, Size: 1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14c, Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14c, Size: 1]
	bool bShouldBeAttached;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14c, Size: 1]
	bool bShouldSnapLocationWhenAttached;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14c, Size: 1]
	bool bShouldSnapRotationWhenAttached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d, Size: 1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14d, Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14d, Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14d, Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14d, Size: 1]
	byte Mobility;//[Offset: 0x14f, Size: 1]
	byte DetailMode;//[Offset: 0x150, Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x151, Size: 1]
	void ToggleVisibility(bool bPropagateToChildren);// 0x462f850
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x462f790
	void SetWorldScale3D(Vector NewScale);// 0x462f5b0
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x462f4e0
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x462f450
	void SetRelativeScale3D(Vector NewScale3D);// 0x462f3c0
	void SetMobility(byte NewMobility);// 0x462f340
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x462f270
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x462f0d0
	void ResetRelativeTransform();// 0x462f0b0
	void OnRep_Visibility(bool OldValue);// 0x462eed0
	void OnRep_Transform();// 0x462eeb0
	void OnRep_AttachSocketName();// 0x462ee90
	void OnRep_AttachParent();// 0x462ee90
	void OnRep_AttachChildren();// 0x462ee70
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462ec80
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462ead0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462e8f0
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462e740
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462e550
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462e3a0
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462e1c0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462e010
	Transform K2_GetComponentToWorld();// 0x462dfb0
	Vector K2_GetComponentScale();// 0x462df70
	Rotator K2_GetComponentRotation();// 0x462df30
	Vector K2_GetComponentLocation();// 0x462def0
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x462dda0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x462dbf0
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x462daa0
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462d8b0
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462d700
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462d550
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462d3a0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462d1f0
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462d000
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462ce50
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x462cca0
	bool IsVisible();// 0x462cc70
	bool IsSimulatingPhysics(FName BoneName);// 0x281d6e0
	bool IsAnySimulatingPhysics();// 0x462cc40
	Vector GetUpVector();// 0x462cab0
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x462c9b0
	Rotator GetSocketRotation(FName InSocketName);// 0x462c900
	Quat GetSocketQuaternion(FName InSocketName);// 0x462c860
	Vector GetSocketLocation(FName InSocketName);// 0x462c7b0
	bool GetShouldUpdatePhysicsVolume();// 0x462c780
	Vector GetRightVector();// 0x462c740
	Transform GetRelativeTransform();// 0x462c6e0
	PhysicsVolume* GetPhysicsVolume();// 0x462c6b0
	void GetParentComponents(out SceneComponent*[] Parents);// 0x462c600
	int GetNumChildrenComponents();// 0x462c5d0
	Vector GetForwardVector();// 0x460a790
	Vector GetComponentVelocity();// 0x462c590
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x462c490
	SceneComponent* GetChildComponent(int ChildIndex);// 0x462c400
	FName GetAttachSocketName();// 0x273e9c0
	SceneComponent* GetAttachParent();// 0x277d930
	FName[] GetAllSocketNames();// 0x462c380
	bool DoesSocketExist(FName InSocketName);// 0x462c2e0
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x462c210

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 1]
	FName[] ComponentTags;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	int UCSSerializationIndex;//[Offset: 0x84, Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x88, Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x88, Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a, Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8a, Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8a, Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8a, Size: 1]
	enum CreationMethod;//[Offset: 0x8c, Size: 1]
	delegate OnComponentActivated;//[Offset: 0x8d, Size: 1]
	delegate OnComponentDeactivated;//[Offset: 0x8e, Size: 1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0x90, Size: 1]
	void ToggleActive();// 0xe8e060
	void SetTickGroup(byte NewTickGroup);// 0x44ff1a0
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x44ff220
	void SetIsReplicated(bool ShouldReplicate);// 0x44ff110
	void SetComponentTickInterval(float TickInterval);// 0x44ff090
	void SetComponentTickEnabled(bool bEnabled);// 0x44ff000
	void SetAutoActivate(bool bNewAutoActivate);// 0x44fb5c0
	void SetActive(bool bNewActive, bool bReset);// 0x44fef30
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x44feea0
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x44fee10
	void ReceiveTick(float DeltaSeconds);// 0x2d74e00
	void ReceiveEndPlay(byte EndPlayReason);// 0x2d74e00
	void ReceiveBeginPlay();// 0x2d74e00
	void OnRep_IsActive();// 0x26b68d0
	void K2_DestroyComponent(Object* Object);// 0x44fed10
	bool IsComponentTickEnabled();// 0x44fece0
	bool IsBeingDestroyed();// 0x44fecb0
	bool IsActive();// 0x44fec80
	Actor* GetOwner();// 0x288acc0
	float GetComponentTickInterval();// 0x44fec50
	void Deactivate();// 0x2847ca0
	bool ComponentHasTag(FName Tag);// 0x44fea40
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x44fe8f0
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x44fe860
	void Activate(bool bReset);// 0x3c2bc20

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x80, Size: 1]
	byte PhysicsType;//[Offset: 0x88, Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 1]
	bool bSupportUVsAndFaceRemap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x89, Size: 1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0x120, Size: 1]
	Vector BuildScale3D;//[Offset: 0x238, Size: 1]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 1]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 1]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 1]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 1]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	float Radius;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 1]
	FName Name;//[Offset: 0xc, Size: 1]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float X;//[Offset: 0x48, Size: 1]
	float Y;//[Offset: 0x4c, Size: 1]
	float Z;//[Offset: 0x50, Size: 1]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 1]
	float Yaw;//[Offset: 0x4, Size: 1]
	float Roll;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius;//[Offset: 0x48, Size: 1]
	float Length;//[Offset: 0x4c, Size: 1]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 1]
	int[] IndexData;//[Offset: 0x40, Size: 1]
	Box ElemBox;//[Offset: 0x50, Size: 1]
	Transform Transform;//[Offset: 0x70, Size: 1]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0, Size: 1]
	Vector Max;//[Offset: 0xc, Size: 1]
	byte IsValid;//[Offset: 0x18, Size: 1]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 1]
	Vector Translation;//[Offset: 0x10, Size: 1]
	Vector Scale3D;//[Offset: 0x20, Size: 1]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 1]
	Rotator Rotation;//[Offset: 0x3c, Size: 1]
	float Radius0;//[Offset: 0x48, Size: 1]
	float Radius1;//[Offset: 0x4c, Size: 1]
	float Length;//[Offset: 0x50, Size: 1]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 1]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	float Restitution;//[Offset: 0x30, Size: 1]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float Density;//[Offset: 0x38, Size: 1]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 1]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 1]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 1]
	byte SurfaceType;//[Offset: 0x50, Size: 1]
	float TireFrictionScale;//[Offset: 0x54, Size: 1]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 1]
	float FrictionScale;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 1]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 1]
	enum SleepFamily;//[Offset: 0xa, Size: 1]
	byte DOFMode;//[Offset: 0xb, Size: 1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bIgnoreAnalyticCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 1]
	byte PositionSolverIterationCount;//[Offset: 0x24, Size: 1]
	byte VelocitySolverIterationCount;//[Offset: 0x25, Size: 1]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 1]
	float MassInKgOverride;//[Offset: 0x5c, Size: 1]
	float LinearDamping;//[Offset: 0x68, Size: 1]
	float AngularDamping;//[Offset: 0x6c, Size: 1]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 1]
	Vector COMNudge;//[Offset: 0x7c, Size: 1]
	float MassScale;//[Offset: 0x88, Size: 1]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 1]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 1]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 1]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 1]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 1]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 1]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 1]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 1]
	byte WorldDynamic;//[Offset: 0x1, Size: 1]
	byte Pawn;//[Offset: 0x2, Size: 1]
	byte Visibility;//[Offset: 0x3, Size: 1]
	byte Camera;//[Offset: 0x4, Size: 1]
	byte PhysicsBody;//[Offset: 0x5, Size: 1]
	byte Vehicle;//[Offset: 0x6, Size: 1]
	byte Destructible;//[Offset: 0x7, Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 1]
	byte Response;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	int FaceIndex;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]
	float Distance;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 1]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 1]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 1]
	float PenetrationDepth;//[Offset: 0x58, Size: 1]
	int Item;//[Offset: 0x5c, Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 1]
	Actor* Actor;//[Offset: 0x68, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 1]
	FName BoneName;//[Offset: 0x78, Size: 1]
	FName MyBoneName;//[Offset: 0x80, Size: 1]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: CustomPrimitiveData
	float[] Data;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RuntimeVirtualTexture.Object
	enum MaterialType;//[Offset: 0x28, Size: 1]
	bool bCompressTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool bClearTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bPrivateSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bEnableScalability;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	int Size;//[Offset: 0x30, Size: 1]
	int TileCount;//[Offset: 0x34, Size: 1]
	int TileSize;//[Offset: 0x38, Size: 1]
	int TileBorderSize;//[Offset: 0x3c, Size: 1]
	int StreamLowMips;//[Offset: 0x40, Size: 1]
	RuntimeVirtualTextureStreamingProxy* StreamingTexture;//[Offset: 0x48, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	int RemoveLowMips;//[Offset: 0x54, Size: 1]
	int GetTileSize();// 0x4629c90
	int GetTileCount();// 0x4629c50
	int GetTileBorderSize();// 0x4629c10
	int GetSize();// 0x4629ba0

--------------------------------
Class: RuntimeVirtualTextureStreamingProxy.Texture2D.Texture.StreamableRenderAsset.Object
	VirtualTextureBuildSettings Settings;//[Offset: 0xe8, Size: 1]
	bool bSinglePhysicalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4, Size: 1]
	uint32 BuildHash;//[Offset: 0xf8, Size: 1]

--------------------------------
Class: Texture2D.Texture.StreamableRenderAsset.Object
	int LevelIndex;//[Offset: 0xb8, Size: 1]
	int FirstResourceMemMip;//[Offset: 0xbc, Size: 1]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	byte AddressX;//[Offset: 0xc1, Size: 1]
	byte AddressY;//[Offset: 0xc2, Size: 1]
	IntPoint ImportedSize;//[Offset: 0xc4, Size: 1]
	int Blueprint_GetSizeY();// 0x46579c0
	int Blueprint_GetSizeX();// 0x4657990

--------------------------------
Class: Texture.StreamableRenderAsset.Object
	Guid LightingGuid;//[Offset: 0x48, Size: 1]
	int LODBias;//[Offset: 0x58, Size: 1]
	byte CompressionSettings;//[Offset: 0x5c, Size: 1]
	byte Filter;//[Offset: 0x5d, Size: 1]
	enum MipLoadOptions;//[Offset: 0x5e, Size: 1]
	byte LODGroup;//[Offset: 0x5f, Size: 1]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	bool VirtualTextureStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60, Size: 1]
	bool CompressionYCoCg;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60, Size: 1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x68, Size: 1]

--------------------------------
Class: StreamableRenderAsset.Object
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0x28, Size: 1]
	int NumCinematicMipLevels;//[Offset: 0x30, Size: 1]
	int StreamingIndex;//[Offset: 0x34, Size: 1]
	int CachedCombinedLODBias;//[Offset: 0x38, Size: 1]
	byte CachedNumResidentLODs;//[Offset: 0x3c, Size: 1]
	bool bCachedReadyForStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 1]
	int B;//[Offset: 0x4, Size: 1]
	int C;//[Offset: 0x8, Size: 1]
	int D;//[Offset: 0xc, Size: 1]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: VirtualTextureBuildSettings
	int TileSize;//[Offset: 0x0, Size: 1]
	int TileBorderSize;//[Offset: 0x4, Size: 1]
	bool bEnableCompressCrunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bEnableCompressZlib;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 1]
	float G;//[Offset: 0x4, Size: 1]
	float B;//[Offset: 0x8, Size: 1]
	float A;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 1]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 1]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);// 0x45eb460
	PhysicalMaterialMask* GetPhysicalMaterialMask();// 0x1279960
	PhysicalMaterial* GetPhysicalMaterialFromMap(int Index);// 0xe96550
	PhysicalMaterial* GetPhysicalMaterial();// 0x3c2b3a0
	MaterialParameterInfo GetParameterInfo(byte Association, FName ParameterName, MaterialFunctionInterface* LayerFunction);// 0x45eb1a0
	Material* GetBaseMaterial();// 0x45eafd0

--------------------------------
Class: PhysicalMaterialMask.Object
	int UVChannelIndex;//[Offset: 0x28, Size: 1]
	byte AddressX;//[Offset: 0x2c, Size: 1]
	byte AddressY;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	enum MaterialFunctionUsage;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo;//[Offset: 0x0, Size: 1]
	LinearColor MeanFreePathColor;//[Offset: 0x10, Size: 1]
	float MeanFreePathDistance;//[Offset: 0x20, Size: 1]
	float WorldUnitScale;//[Offset: 0x24, Size: 1]
	bool bEnableBurley;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	float ScatterRadius;//[Offset: 0x2c, Size: 1]
	LinearColor SubsurfaceColor;//[Offset: 0x30, Size: 1]
	LinearColor FalloffColor;//[Offset: 0x40, Size: 1]
	LinearColor BoundaryColorBleed;//[Offset: 0x50, Size: 1]
	float ExtinctionScale;//[Offset: 0x60, Size: 1]
	float NormalScale;//[Offset: 0x64, Size: 1]
	float ScatteringDistribution;//[Offset: 0x68, Size: 1]
	float IOR;//[Offset: 0x6c, Size: 1]
	float Roughness0;//[Offset: 0x70, Size: 1]
	float Roughness1;//[Offset: 0x74, Size: 1]
	float LobeMix;//[Offset: 0x78, Size: 1]
	LinearColor TransmissionTintColor;//[Offset: 0x7c, Size: 1]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 1]
	byte Association;//[Offset: 0x8, Size: 1]
	int Index;//[Offset: 0xc, Size: 1]

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterialMask* PhysMaterialMask;//[Offset: 0x90, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x98, Size: 8]
	ScalarMaterialInput Metallic;//[Offset: 0xd8, Size: 1]
	ScalarMaterialInput Specular;//[Offset: 0xec, Size: 1]
	ScalarMaterialInput Anisotropy;//[Offset: 0x100, Size: 1]
	VectorMaterialInput Normal;//[Offset: 0x114, Size: 1]
	VectorMaterialInput Tangent;//[Offset: 0x128, Size: 1]
	ColorMaterialInput EmissiveColor;//[Offset: 0x13c, Size: 1]
	byte MaterialDomain;//[Offset: 0x150, Size: 1]
	byte BlendMode;//[Offset: 0x151, Size: 1]
	byte DecalBlendMode;//[Offset: 0x152, Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x153, Size: 1]
	byte ShadingModel;//[Offset: 0x154, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x155, Size: 1]
	MaterialShadingModelField ShadingModels;//[Offset: 0x156, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x158, Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x15c, Size: 1]
	ScalarMaterialInput Refraction;//[Offset: 0x170, Size: 1]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x184, Size: 1]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x19c, Size: 1]
	ShadingModelMaterialInput ShadingModelFromMaterialExpression;//[Offset: 0x1b0, Size: 1]
	bool bEnableTranslucencyAfterRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4, Size: 1]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c8, Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c8, Size: 1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c8, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c8, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c8, Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c8, Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c8, Size: 1]
	byte TranslucencyLightingMode;//[Offset: 0x1c9, Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ca, Size: 1]
	int NumCustomizedUVs;//[Offset: 0x1cc, Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x1d0, Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x1d4, Size: 1]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x1d8, Size: 1]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x1dc, Size: 1]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1e0, Size: 1]
	float TranslucentBackscatteringExponent;//[Offset: 0x1e4, Size: 1]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1e8, Size: 1]
	float TranslucentShadowStartOffset;//[Offset: 0x1f8, Size: 1]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fc, Size: 1]
	bool bShouldRenderTranslucentOutline;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fc, Size: 1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fc, Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fc, Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fc, Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fd, Size: 1]
	bool bUsedWithVertexCurvature;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fd, Size: 1]
	bool bUsedWithBlurredNormals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fd, Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fd, Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fd, Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fd, Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fd, Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fd, Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1fe, Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1fe, Size: 1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fe, Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fe, Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fe, Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1fe, Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1fe, Size: 1]
	bool bUsedWithGeometryCollections;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1fe, Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ff, Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ff, Size: 1]
	bool bUsedWithWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x200, Size: 1]
	bool bUsedWithHairStrands;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x200, Size: 1]
	bool bUsedWithLidarPointCloud;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x200, Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x204, Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x204, Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 1]
	bool bForwardRenderUsePreintegratedGFForSimpleIBL;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 1]
	bool bUseHalfRateCheckerboardRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 1]
	bool bOnlyDirectionalLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x208, Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20c, Size: 1]
	bool bUseHQForwardReflectionsOnLowEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214, Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x214, Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x215, Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x216, Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x216, Size: 1]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x216, Size: 1]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x216, Size: 1]
	byte ShadingRate;//[Offset: 0x217, Size: 1]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x218, Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x218, Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x218, Size: 1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x218, Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x218, Size: 1]
	bool bCastRayTracedShadows;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x218, Size: 1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x218, Size: 1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x218, Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x219, Size: 1]
	bool bOutputTranslucentVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x219, Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x219, Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x219, Size: 1]
	byte BlendableLocation;//[Offset: 0x21a, Size: 1]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21b, Size: 1]
	bool bEnableStencilTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21b, Size: 1]
	byte StencilCompare;//[Offset: 0x21c, Size: 1]
	byte StencilRefValue;//[Offset: 0x21d, Size: 1]
	byte RefractionMode;//[Offset: 0x21e, Size: 1]
	int BlendablePriority;//[Offset: 0x220, Size: 1]
	bool bIsBlendable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x224, Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x228, Size: 1]
	float RefractionDepthBias;//[Offset: 0x22c, Size: 1]
	Guid StateId;//[Offset: 0x230, Size: 1]
	float MaxDisplacement;//[Offset: 0x240, Size: 1]
	MaterialCachedExpressionData CachedExpressionData;//[Offset: 0x2d0, Size: 1]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName ExpressionName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialShadingModelField
	uint16 ShadingModelField;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 1]
	FName ExpressionName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ShadingModelMaterialInput.MaterialInput

--------------------------------
Class: MaterialCachedExpressionData
	MaterialCachedParameters Parameters;//[Offset: 0x0, Size: 1]
	Object*[] ReferencedTextures;//[Offset: 0x1a0, Size: 1]
	MaterialFunctionInfo[] FunctionInfos;//[Offset: 0x1b0, Size: 1]
	MaterialParameterCollectionInfo[] ParameterCollectionInfos;//[Offset: 0x1c0, Size: 1]
	MaterialFunctionInterface*[] DefaultLayers;//[Offset: 0x1d0, Size: 1]
	MaterialFunctionInterface*[] DefaultLayerBlends;//[Offset: 0x1e0, Size: 1]
	LandscapeGrassType*[] GrassTypes;//[Offset: 0x1f0, Size: 1]
	FName[] DynamicParameterNames;//[Offset: 0x200, Size: 1]
	bool[] QualityLevelsUsed;//[Offset: 0x210, Size: 1]
	bool bHasRuntimeVirtualTextureOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	bool bHasSceneColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 1]

--------------------------------
Class: MaterialCachedParameters
	MaterialCachedParameterEntry Entries;//[Offset: 0x0, Size: 5]
	float[] ScalarValues;//[Offset: 0x140, Size: 1]
	LinearColor[] VectorValues;//[Offset: 0x150, Size: 1]
	Texture*[] TextureValues;//[Offset: 0x160, Size: 1]
	Font*[] FontValues;//[Offset: 0x170, Size: 1]
	int[] FontPageValues;//[Offset: 0x180, Size: 1]
	RuntimeVirtualTexture*[] RuntimeVirtualTextureValues;//[Offset: 0x190, Size: 1]

--------------------------------
Class: MaterialCachedParameterEntry
	uint64[] NameHashes;//[Offset: 0x0, Size: 1]
	MaterialParameterInfo[] ParameterInfos;//[Offset: 0x10, Size: 1]
	Guid[] ExpressionGuids;//[Offset: 0x20, Size: 1]
	bool[] Overrides;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 1]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 1]
	int IsRemapped;//[Offset: 0x58, Size: 1]
	float EmScale;//[Offset: 0x5c, Size: 1]
	float Ascent;//[Offset: 0x60, Size: 1]
	float Descent;//[Offset: 0x64, Size: 1]
	float Leading;//[Offset: 0x68, Size: 1]
	int Kerning;//[Offset: 0x6c, Size: 1]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 1]
	int NumCharacters;//[Offset: 0x120, Size: 1]
	int[] MaxCharHeight;//[Offset: 0x128, Size: 1]
	float ScalingFactor;//[Offset: 0x138, Size: 1]
	int LegacyFontSize;//[Offset: 0x13c, Size: 1]
	FName LegacyFontName;//[Offset: 0x140, Size: 1]
	CompositeFont CompositeFont;//[Offset: 0x148, Size: 1]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 1]
	int StartV;//[Offset: 0x4, Size: 1]
	int USize;//[Offset: 0x8, Size: 1]
	int VSize;//[Offset: 0xc, Size: 1]
	byte TextureIndex;//[Offset: 0x10, Size: 1]
	int VerticalOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 1]
	float Height;//[Offset: 0x10, Size: 1]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	byte CharacterSet;//[Offset: 0x18, Size: 1]
	FString Chars;//[Offset: 0x20, Size: 1]
	FString UnicodeRange;//[Offset: 0x30, Size: 1]
	FString CharsFilePath;//[Offset: 0x40, Size: 1]
	FString CharsFileWildcard;//[Offset: 0x50, Size: 1]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x64, Size: 1]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74, Size: 1]
	int TexturePageWidth;//[Offset: 0x78, Size: 1]
	int TexturePageMaxHeight;//[Offset: 0x7c, Size: 1]
	int XPadding;//[Offset: 0x80, Size: 1]
	int YPadding;//[Offset: 0x84, Size: 1]
	int ExtendBoxTop;//[Offset: 0x88, Size: 1]
	int ExtendBoxBottom;//[Offset: 0x8c, Size: 1]
	int ExtendBoxRight;//[Offset: 0x90, Size: 1]
	int ExtendBoxLeft;//[Offset: 0x94, Size: 1]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 1]
	int Kerning;//[Offset: 0x9c, Size: 1]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0xa4, Size: 1]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 1]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 1]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 1]
	FontData Font;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 1]
	enum Hinting;//[Offset: 0x10, Size: 1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 1]
	int SubFaceIndex;//[Offset: 0x14, Size: 1]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 1]
	float ScalingFactor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 1]
	FString Cultures;//[Offset: 0x28, Size: 1]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 1]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 1]
	int Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 1]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 1]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 1]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 1]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 1]
	Guid ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LandscapeGrassType.Object
	GrassVariety[] GrassVarieties;//[Offset: 0x28, Size: 1]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	StaticMesh* GrassMesh;//[Offset: 0x40, Size: 1]
	float GrassDensity;//[Offset: 0x48, Size: 1]
	float PlacementJitter;//[Offset: 0x4c, Size: 1]
	int StartCullDistance;//[Offset: 0x50, Size: 1]
	int EndCullDistance;//[Offset: 0x54, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]

--------------------------------
Class: GrassVariety
	StaticMesh* GrassMesh;//[Offset: 0x0, Size: 1]
	PerPlatformFloat GrassDensity;//[Offset: 0x8, Size: 1]
	bool bUseGrid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float PlacementJitter;//[Offset: 0x10, Size: 1]
	PerPlatformInt StartCullDistance;//[Offset: 0x14, Size: 1]
	PerPlatformInt EndCullDistance;//[Offset: 0x18, Size: 1]
	int MinLOD;//[Offset: 0x1c, Size: 1]
	enum Scaling;//[Offset: 0x20, Size: 1]
	FloatInterval ScaleX;//[Offset: 0x24, Size: 1]
	FloatInterval ScaleY;//[Offset: 0x2c, Size: 1]
	FloatInterval ScaleZ;//[Offset: 0x34, Size: 1]
	bool RandomRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool AlignToSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bUseLandscapeLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x3f, Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool bKeepInstanceBufferCPUCopy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]

--------------------------------
Class: StaticMesh.StreamableRenderAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x60, Size: 1]
	float LpvBiasMultiplier;//[Offset: 0x64, Size: 1]
	StaticMaterial[] StaticMaterials;//[Offset: 0x68, Size: 1]
	float LightmapUVDensity;//[Offset: 0x78, Size: 1]
	int LightMapResolution;//[Offset: 0x7c, Size: 1]
	int LightMapCoordinateIndex;//[Offset: 0x80, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0x84, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x88, Size: 1]
	FName DefaultCreationCollisionProfileName;//[Offset: 0x90, Size: 1]
	int LODForCollision;//[Offset: 0x98, Size: 1]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c, Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c, Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c, Size: 1]
	bool bSupportPhysicalMaterialMasks;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c, Size: 1]
	bool bIsBuiltAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9c, Size: 1]
	bool bSupportGpuUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d, Size: 1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xc0, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xe0, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0xec, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xf8, Size: 1]
	int ElementToIgnoreForTexFactor;//[Offset: 0x114, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x118, Size: 1]
	Object* EditableMesh;//[Offset: 0x130, Size: 1]
	NavCollisionBase* NavCollision;//[Offset: 0x138, Size: 1]
	void RemoveSocket(StaticMeshSocket* Socket);// 0x46505f0
	int GetNumSections(int InLOD);// 0x4650340
	int GetNumLODs();// 0x4650310
	void GetMinimumLODForPlatforms(out <FName,int> PlatformMinimumLODs);// 0x46501f0
	int GetMinimumLODForPlatform(out const FName PlatformName);// 0x4650170
	int GetMaterialIndex(FName MaterialSlotName);// 0x46500e0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x4650050
	BoxSphereBounds GetBounds();// 0x464fea0
	Box GetBoundingBox();// 0x464fe50
	StaticMeshSocket* FindSocket(FName InSocketName);// 0x464fd60
	static StaticMeshDescription* CreateStaticMeshDescription(Object* Outer);// 0x464fce0
	void BuildFromStaticMeshDescriptions(out const StaticMeshDescription*[] StaticMeshDescriptions, bool bBuildSimpleCollision);// 0x464fbe0
	void AddSocket(StaticMeshSocket* Socket);// 0x464fb60
	FName AddMaterial(MaterialInterface* Material);// 0x464fad0

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	Vector RelativeLocation;//[Offset: 0x30, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 1]
	Vector RelativeScale;//[Offset: 0x48, Size: 1]
	FString Tag;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 1]
	Vector BoxExtent;//[Offset: 0xc, Size: 1]
	float SphereRadius;//[Offset: 0x18, Size: 1]

--------------------------------
Class: StaticMeshDescription.MeshDescriptionBase.Object
	void SetVertexInstanceUV(VertexInstanceID VertexInstanceID, Vector2D UV, int UVIndex);// 0x3d214e0
	void SetPolygonGroupMaterialSlotName(PolygonGroupID PolygonGroupID, out const FName SlotName);// 0x3d21400
	Vector2D GetVertexInstanceUV(VertexInstanceID VertexInstanceID, int UVIndex);// 0x3d21330
	void CreateCube(Vector Center, Vector HalfExtents, PolygonGroupID PolygonGroup, out PolygonID PolygonID_PlusX, out PolygonID PolygonID_MinusX, out PolygonID PolygonID_PlusY, out PolygonID PolygonID_MinusY, out PolygonID PolygonID_PlusZ, out PolygonID PolygonID_MinusZ);// 0x3d21000

--------------------------------
Class: MeshDescriptionBase.Object
	void SetVertexPosition(VertexID VertexID, out const Vector Position);// 0x3d18e40
	void SetPolygonVertexInstance(PolygonID PolygonID, int PerimeterIndex, VertexInstanceID VertexInstanceID);// 0x3d18d30
	void SetPolygonPolygonGroup(PolygonID PolygonID, PolygonGroupID PolygonGroupID);// 0x3d18c70
	void ReversePolygonFacing(PolygonID PolygonID);// 0x3d18bf0
	void ReserveNewVertices(int NumberOfNewVertices);// 0x3d18b70
	void ReserveNewVertexInstances(int NumberOfNewVertexInstances);// 0x3d18970
	void ReserveNewTriangles(int NumberOfNewTriangles);// 0x3d18af0
	void ReserveNewPolygons(const int NumberOfNewPolygons);// 0x3d18a70
	void ReserveNewPolygonGroups(int NumberOfNewPolygonGroups);// 0x3d189f0
	void ReserveNewEdges(int NumberOfNewEdges);// 0x3d18970
	bool IsVertexValid(VertexID VertexID);// 0x3d188e0
	bool IsVertexOrphaned(VertexID VertexID);// 0x3d18850
	bool IsVertexInstanceValid(VertexInstanceID VertexInstanceID);// 0x3d187c0
	bool IsTriangleValid(const TriangleID TriangleID);// 0x3d18730
	bool IsTrianglePartOfNgon(TriangleID TriangleID);// 0x3d186a0
	bool IsPolygonValid(PolygonID PolygonID);// 0x3d18610
	bool IsPolygonGroupValid(PolygonGroupID PolygonGroupID);// 0x3d18580
	bool IsEmpty();// 0x3d18550
	bool IsEdgeValid(EdgeID EdgeID);// 0x3d184c0
	bool IsEdgeInternalToPolygon(EdgeID EdgeID, PolygonID PolygonID);// 0x3d183f0
	bool IsEdgeInternal(EdgeID EdgeID);// 0x3d18360
	void GetVertexVertexInstances(VertexID VertexID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3d18270
	Vector GetVertexPosition(VertexID VertexID);// 0x3d181d0
	EdgeID GetVertexPairEdge(VertexID VertexID0, VertexID VertexID1);// 0x3d18100
	VertexID GetVertexInstanceVertex(VertexInstanceID VertexInstanceID);// 0x3d18060
	EdgeID GetVertexInstancePairEdge(VertexInstanceID VertexInstanceID0, VertexInstanceID VertexInstanceID1);// 0x3d17f90
	VertexInstanceID GetVertexInstanceForTriangleVertex(TriangleID TriangleID, VertexID VertexID);// 0x3d17ec0
	VertexInstanceID GetVertexInstanceForPolygonVertex(PolygonID PolygonID, VertexID VertexID);// 0x3d17df0
	void GetVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID, out TriangleID[] OutConnectedTriangleIDs);// 0x3d17d00
	void GetVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID, out PolygonID[] OutConnectedPolygonIDs);// 0x3d17c10
	void GetVertexConnectedTriangles(VertexID VertexID, out TriangleID[] OutConnectedTriangleIDs);// 0x3d17b20
	void GetVertexConnectedPolygons(VertexID VertexID, out PolygonID[] OutConnectedPolygonIDs);// 0x3d17a30
	void GetVertexConnectedEdges(VertexID VertexID, out EdgeID[] OutEdgeIDs);// 0x3d17940
	void GetVertexAdjacentVertices(VertexID VertexID, out VertexID[] OutAdjacentVertexIDs);// 0x3d17850
	void GetTriangleVertices(TriangleID TriangleID, out VertexID[] OutVertexIDs);// 0x3d17760
	void GetTriangleVertexInstances(TriangleID TriangleID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3d17670
	VertexInstanceID GetTriangleVertexInstance(TriangleID TriangleID, int Index);// 0x3d175a0
	PolygonGroupID GetTrianglePolygonGroup(TriangleID TriangleID);// 0x3d17500
	PolygonID GetTrianglePolygon(TriangleID TriangleID);// 0x3d17460
	void GetTriangleEdges(TriangleID TriangleID, out EdgeID[] OutEdgeIDs);// 0x3d17370
	void GetTriangleAdjacentTriangles(TriangleID TriangleID, out TriangleID[] OutTriangleIDs);// 0x3d17280
	void GetPolygonVertices(PolygonID PolygonID, out VertexID[] OutVertexIDs);// 0x3d17190
	void GetPolygonVertexInstances(PolygonID PolygonID, out VertexInstanceID[] OutVertexInstanceIDs);// 0x3d170a0
	void GetPolygonTriangles(PolygonID PolygonID, out TriangleID[] OutTriangleIDs);// 0x3d16fb0
	PolygonGroupID GetPolygonPolygonGroup(PolygonID PolygonID);// 0x3d16f10
	void GetPolygonPerimeterEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x3d16e20
	void GetPolygonInternalEdges(PolygonID PolygonID, out EdgeID[] OutEdgeIDs);// 0x3d16d30
	void GetPolygonGroupPolygons(PolygonGroupID PolygonGroupID, out PolygonID[] OutPolygonIDs);// 0x3d16c40
	void GetPolygonAdjacentPolygons(PolygonID PolygonID, out PolygonID[] OutPolygonIDs);// 0x3d16b50
	int GetNumVertexVertexInstances(VertexID VertexID);// 0x3d16ac0
	int GetNumVertexInstanceConnectedTriangles(VertexInstanceID VertexInstanceID);// 0x3d16a30
	int GetNumVertexInstanceConnectedPolygons(VertexInstanceID VertexInstanceID);// 0x3d169a0
	int GetNumVertexConnectedTriangles(VertexID VertexID);// 0x3d16910
	int GetNumVertexConnectedPolygons(VertexID VertexID);// 0x3d16880
	int GetNumVertexConnectedEdges(VertexID VertexID);// 0x3d167f0
	int GetNumPolygonVertices(PolygonID PolygonID);// 0x3d16760
	int GetNumPolygonTriangles(PolygonID PolygonID);// 0x3d166d0
	int GetNumPolygonInternalEdges(PolygonID PolygonID);// 0x3d16640
	int GetNumPolygonGroupPolygons(PolygonGroupID PolygonGroupID);// 0x3d165b0
	int GetNumEdgeConnectedTriangles(EdgeID EdgeID);// 0x3d16520
	int GetNumEdgeConnectedPolygons(EdgeID EdgeID);// 0x3d16490
	void GetEdgeVertices(const EdgeID EdgeID, out VertexID[] OutVertexIDs);// 0x3d163a0
	VertexID GetEdgeVertex(EdgeID EdgeID, int VertexNumber);// 0x3d162d0
	void GetEdgeConnectedTriangles(EdgeID EdgeID, out TriangleID[] OutConnectedTriangleIDs);// 0x3d161e0
	void GetEdgeConnectedPolygons(EdgeID EdgeID, out PolygonID[] OutConnectedPolygonIDs);// 0x3d160f0
	void Empty();// 0x3d160d0
	void DeleteVertexInstance(VertexInstanceID VertexInstanceID, out VertexID[] OrphanedVertices);// 0x3d15fe0
	void DeleteVertex(VertexID VertexID);// 0x3d15f60
	void DeleteTriangle(TriangleID TriangleID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroupsPtr);// 0x3d15da0
	void DeletePolygonGroup(PolygonGroupID PolygonGroupID);// 0x3d15d20
	void DeletePolygon(PolygonID PolygonID, out EdgeID[] OrphanedEdges, out VertexInstanceID[] OrphanedVertexInstances, out PolygonGroupID[] OrphanedPolygonGroups);// 0x3d15b60
	void DeleteEdge(EdgeID EdgeID, out VertexID[] OrphanedVertices);// 0x3d15a70
	void CreateVertexWithID(VertexID VertexID);// 0x3d159f0
	void CreateVertexInstanceWithID(VertexInstanceID VertexInstanceID, VertexID VertexID);// 0x3d15930
	VertexInstanceID CreateVertexInstance(VertexID VertexID);// 0x3d15890
	VertexID CreateVertex();// 0x3d15850
	void CreateTriangleWithID(TriangleID TriangleID, PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3d156b0
	TriangleID CreateTriangle(PolygonGroupID PolygonGroupID, out const VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3d15540
	void CreatePolygonWithID(PolygonID PolygonID, PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3d153a0
	void CreatePolygonGroupWithID(PolygonGroupID PolygonGroupID);// 0x3d15320
	PolygonGroupID CreatePolygonGroup();// 0x3d152e0
	PolygonID CreatePolygon(PolygonGroupID PolygonGroupID, out VertexInstanceID[] VertexInstanceIDs, out EdgeID[] NewEdgeIDs);// 0x3d15170
	void CreateEdgeWithID(EdgeID EdgeID, VertexID VertexID0, VertexID VertexID1);// 0x3d15060
	EdgeID CreateEdge(VertexID VertexID0, VertexID VertexID1);// 0x3d14f90
	void ComputePolygonTriangulation(PolygonID PolygonID);// 0x3d14f10

--------------------------------
Class: VertexInstanceID.ElementID

--------------------------------
Class: ElementID
	int IDValue;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]

--------------------------------
Class: VertexID.ElementID

--------------------------------
Class: PolygonID.ElementID

--------------------------------
Class: PolygonGroupID.ElementID

--------------------------------
Class: TriangleID.ElementID

--------------------------------
Class: EdgeID.ElementID

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float LocalUVDensities;//[Offset: 0x4, Size: 4]

--------------------------------
Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatInterval
	float Min;//[Offset: 0x0, Size: 1]
	float Max;//[Offset: 0x4, Size: 1]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	float EmissiveBoost;//[Offset: 0x0, Size: 1]
	float DiffuseBoost;//[Offset: 0x4, Size: 1]
	float ExportResolutionScale;//[Offset: 0x8, Size: 1]
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 1]
	int UVChannelIndex;//[Offset: 0x4, Size: 1]
	FName TextureName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, LinearColor Value);// 0x45e8910
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x45e8840
	void SetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, Texture* Value);// 0x45e8750
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x45e8690
	void SetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo, float Value);// 0x45e8590
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x45e84c0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x45e83b0
	LinearColor K2_GetVectorParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x45e82f0
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x45e8250
	Texture* K2_GetTextureParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x45e8100
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x45e8070
	float K2_GetScalarParameterValueByInfo(out const MaterialParameterInfo ParameterInfo);// 0x45e7f20
	float K2_GetScalarParameterValue(FName ParameterName);// 0x45e7e80
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x45e7d10
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x45e7c90
	void CopyInterpParameters(MaterialInstance* Source);// 0x45e7c10

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x88, Size: 1]
	PhysicalMaterial* PhysicalMaterialMap;//[Offset: 0x90, Size: 8]
	MaterialInterface* Parent;//[Offset: 0xd0, Size: 1]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd8, Size: 1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xe0, Size: 1]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xf0, Size: 1]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0x100, Size: 1]
	RuntimeVirtualTextureParameterValue[] RuntimeVirtualTextureParameterValues;//[Offset: 0x110, Size: 1]
	FontParameterValue[] FontParameterValues;//[Offset: 0x120, Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x130, Size: 1]
	StaticParameterSet StaticParameters;//[Offset: 0x148, Size: 1]
	MaterialCachedParameters CachedLayerParameters;//[Offset: 0x188, Size: 1]
	Object*[] CachedReferencedTextures;//[Offset: 0x328, Size: 1]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	float ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Texture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: RuntimeVirtualTextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	RuntimeVirtualTexture* ParameterValue;//[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	Font* FontValue;//[Offset: 0x10, Size: 1]
	int FontPage;//[Offset: 0x18, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_MaterialSSR;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool MaterialSSR;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_HQForwardReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool HQForwardReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	byte BlendMode;//[Offset: 0x2, Size: 1]
	byte ShadingModel;//[Offset: 0x3, Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 1]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 1]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 1]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 1]

--------------------------------
Class: StaticSwitchParameter.StaticParameterBase
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: StaticParameterBase
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 1]

--------------------------------
Class: StaticComponentMaskParameter.StaticParameterBase
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27, Size: 1]

--------------------------------
Class: StaticTerrainLayerWeightParameter.StaticParameterBase
	int WeightmapIndex;//[Offset: 0x24, Size: 1]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]

--------------------------------
Class: StaticMaterialLayersParameter.StaticParameterBase
	MaterialLayersFunctions Value;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 1]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 1]
	bool[] LayerStates;//[Offset: 0x20, Size: 1]
	FString KeyString;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x228, Size: 1]
	float BaseEyeHeight;//[Offset: 0x22c, Size: 1]
	byte AutoPossessPlayer;//[Offset: 0x230, Size: 1]
	enum AutoPossessAI;//[Offset: 0x231, Size: 1]
	byte RemoteViewPitch;//[Offset: 0x232, Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x238, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x240, Size: 1]
	Controller* LastHitBy;//[Offset: 0x250, Size: 1]
	Controller* Controller;//[Offset: 0x258, Size: 1]
	Vector ControlInputVector;//[Offset: 0x264, Size: 1]
	Vector LastControlInputVector;//[Offset: 0x270, Size: 1]
	void SpawnDefaultController();// 0x1fc34a0
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x46047d0
	void ReceiveUnpossessed(Controller* OldController);// 0x2d74e00
	void ReceivePossessed(Controller* NewController);// 0x2d74e00
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x4604660
	void OnRep_PlayerState();// 0xd13910
	void OnRep_Controller();// 0x1fae4d0
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4604420
	Vector K2_GetMovementInputVector();// 0x4604350
	bool IsPlayerControlled();// 0x2772360
	bool IsPawnControlled();// 0x46043f0
	bool IsMoveInputIgnored();// 0x46043c0
	bool IsLocallyControlled();// 0x2772390
	bool IsControlled();// 0x4604390
	bool IsBotControlled();// 0x273a060
	Vector GetPendingMovementInputVector();// 0x4604350
	Vector GetNavAgentLocation();// 0x4604290
	PawnMovementComponent* GetMovementComponent();// 0x4540c80
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x4604210
	Vector GetLastMovementInputVector();// 0x27247b0
	Rotator GetControlRotation();// 0x4604170
	Controller* GetController();// 0x46041b0
	Rotator GetBaseAimRotation();// 0x4604070
	void DetachFromControllerPendingDestroy();// 0x1fc34c0
	Vector ConsumeMovementInputVector();// 0x4604030
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x4603b70
	void AddControllerYawInput(float Val);// 0x4603a10
	void AddControllerRollInput(float Val);// 0x4603990
	void AddControllerPitchInput(float Val);// 0x2731700

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnInstigatedAnyDamage;//[Size: 1]
	FName StateName;//[Offset: 0x248, Size: 1]
	Pawn* Pawn;//[Offset: 0x250, Size: 1]
	Character* Character;//[Offset: 0x260, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x268, Size: 1]
	Rotator ControlRotation;//[Offset: 0x288, Size: 1]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 1]
	void UnPossess();// 0x453dc50
	void StopMovement();// 0x1fc3780
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x453db60
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x28153d0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x453dad0
	void SetControlRotation(out const Rotator NewRotation);// 0x453da40
	void ResetIgnoreMoveInput();// 0x1fdc470
	void ResetIgnoreLookInput();// 0x1fc2a70
	void ResetIgnoreInputFlags();// 0x1fc3260
	void ReceiveUnPossess(Pawn* UnpossessedPawn);// 0x2d74e00
	void ReceivePossess(Pawn* PossessedPawn);// 0x2d74e00
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x2d74e00
	void Possess(Pawn* InPawn);// 0x453d9c0
	void OnRep_PlayerState();// 0x1fa4530
	void OnRep_Pawn();// 0xd13910
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x453d8a0
	Pawn* K2_GetPawn();// 0x453d870
	bool IsPlayerController();// 0x453d840
	bool IsMoveInputIgnored();// 0x28659f0
	bool IsLookInputIgnored();// 0x453d810
	bool IsLocalPlayerController();// 0x453d7c0
	bool IsLocalController();// 0x453d790
	Actor* GetViewTarget();// 0x453d760
	Rotator GetDesiredRotation();// 0x453d390
	Rotator GetControlRotation();// 0x453d120
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x453cfa0
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x453cec0
	PlayerController* CastToPlayerController();// 0x453ce90

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x220, Size: 1]
	int PlayerId;//[Offset: 0x224, Size: 1]
	byte Ping;//[Offset: 0x228, Size: 1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22a, Size: 1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22a, Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22a, Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22a, Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22a, Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22a, Size: 1]
	int StartTime;//[Offset: 0x22c, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x230, Size: 1]
	FString SavedNetworkAddress;//[Offset: 0x240, Size: 1]
	UniqueNetIdRepl UniqueId;//[Offset: 0x250, Size: 1]
	Pawn* PawnPrivate;//[Offset: 0x280, Size: 1]
	FString PlayerNamePrivate;//[Offset: 0x300, Size: 1]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x2d74e00
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x2d74e00
	void OnRep_UniqueId();// 0xd137b0
	void OnRep_Score();// 0x1fa35a0
	void OnRep_PlayerName();// 0x1f9f700
	void OnRep_PlayerId();// 0x1fa1640
	void OnRep_bIsInactive();// 0x1fa1660
	FString GetPlayerName();// 0x4619a40

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 1]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x288, Size: 1]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x290, Size: 1]
	BasedMovementInfo BasedMovement;//[Offset: 0x298, Size: 1]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x2c8, Size: 1]
	float AnimRootMotionTranslationScale;//[Offset: 0x2f8, Size: 1]
	Vector BaseTranslationOffset;//[Offset: 0x2fc, Size: 1]
	Quat BaseRotationOffset;//[Offset: 0x310, Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x320, Size: 1]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x324, Size: 1]
	byte ReplicatedMovementMode;//[Offset: 0x328, Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float CrouchedEyeHeight;//[Offset: 0x32c, Size: 1]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x330, Size: 1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x330, Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x330, Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x330, Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x330, Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x330, Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x330, Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x331, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x331, Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x334, Size: 1]
	float JumpForceTimeRemaining;//[Offset: 0x338, Size: 1]
	float ProxyJumpForceStartedTime;//[Offset: 0x33c, Size: 1]
	float JumpMaxHoldTime;//[Offset: 0x340, Size: 1]
	int JumpMaxCount;//[Offset: 0x344, Size: 1]
	int JumpCurrentCount;//[Offset: 0x348, Size: 1]
	int JumpCurrentCountPreJump;//[Offset: 0x34c, Size: 1]
	MulticastInlineDelegateProperty OnReachedJumpApex;//[Size: 1]
	MulticastInlineDelegateProperty MovementModeChangedDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterMovementUpdated;//[Size: 1]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x398, Size: 1]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x3d0, Size: 1]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x410, Size: 1]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x420, Size: 1]
	void UnCrouch(bool bClientSimulation);// 0x4533820
	void StopJumping();// 0x1fdc5d0
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x4533790
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x45332f0
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x4533070
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x4532cb0
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4532860
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4532410
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4532100
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x4532060
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x4531ed0
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x4531d10
	void OnRep_RootMotion();// 0x4531cf0
	void OnRep_ReplicatedBasedMovement();// 0x1fa4670
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x4531cd0
	void OnRep_IsCrouched();// 0x1fdc690
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x2d74e00
	void OnLanded(out const HitResult Hit);// 0x2d74e00
	void OnJumped();// 0x1fc3880
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4531bb0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x2d74e00
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2d74e00
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x2d74e00
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x2d74e00
	void Jump();// 0x1fc70b0
	bool IsPlayingRootMotion();// 0x45304e0
	bool IsPlayingNetworkedRootMotionMontage();// 0x45304b0
	bool IsJumpProvidingForce();// 0x4530480
	bool HasAnyRootMotion();// 0x4530450
	AnimMontage* GetCurrentMontage();// 0x452fde0
	Vector GetBaseTranslationOffset();// 0x452fdb0
	Rotator GetBaseRotationOffsetRotator();// 0x452fd60
	float GetAnimRootMotionTranslationScale();// 0x452fc90
	void Crouch(bool bClientSimulation);// 0x452fc00
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x452f8b0
	void ClientCheatWalk();// 0x1fa44b0
	void ClientCheatGhost();// 0x1f9f720
	void ClientCheatFly();// 0x1fa3ee0
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x452f410
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x452f120
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x452eeb0
	void ClientAckGoodMove(float Timestamp);// 0x452ee30
	bool CanJumpInternal();// 0x452ee00
	bool CanJump();// 0x452edd0
	bool CanCrouch();// 0x452eda0
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x452ecc0

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x670, Size: 1]
	class AnimInstance* AnimClass;//[Offset: 0x678, Size: 1]
	AnimInstance* AnimScriptInstance;//[Offset: 0x680, Size: 1]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x688, Size: 1]
	SingleAnimationPlayData AnimationData;//[Offset: 0x690, Size: 1]
	Vector RootBoneTranslation;//[Offset: 0x6b8, Size: 1]
	Vector LineCheckBoundsScale;//[Offset: 0x6c4, Size: 1]
	AnimInstance*[] LinkedInstances;//[Offset: 0x710, Size: 1]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x720, Size: 1]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x730, Size: 1]
	float GlobalAnimRateScale;//[Offset: 0x760, Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x764, Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x765, Size: 1]
	byte AnimationMode;//[Offset: 0x767, Size: 1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x769, Size: 1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x769, Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x769, Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x769, Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x769, Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76a, Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76a, Size: 1]
	bool bDisableRigidBodyAnimNode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76a, Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76a, Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76a, Size: 1]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76b, Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76b, Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76b, Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76b, Size: 1]
	bool bDeferKinematicBoneUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x76b, Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76b, Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x76b, Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76c, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76c, Size: 1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76c, Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76c, Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76c, Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x76c, Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76c, Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x76c, Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76d, Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76d, Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76d, Size: 1]
	bool bUseBendingElements;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x76d, Size: 1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76d, Size: 1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x76d, Size: 1]
	bool bUseSelfCollisions;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x76d, Size: 1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x76d, Size: 1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76e, Size: 1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76e, Size: 1]
	bool bSkipBoundsUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x76e, Size: 1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x76e, Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x770, Size: 1]
	enum MassMode;//[Offset: 0x772, Size: 1]
	float UniformMass;//[Offset: 0x774, Size: 1]
	float TotalMass;//[Offset: 0x778, Size: 1]
	float Density;//[Offset: 0x77c, Size: 1]
	float MinPerParticleMass;//[Offset: 0x780, Size: 1]
	float ClothBlendWeight;//[Offset: 0x784, Size: 1]
	float EdgeStiffness;//[Offset: 0x788, Size: 1]
	float BendingStiffness;//[Offset: 0x78c, Size: 1]
	float AreaStiffness;//[Offset: 0x790, Size: 1]
	float VolumeStiffness;//[Offset: 0x794, Size: 1]
	float StrainLimitingStiffness;//[Offset: 0x798, Size: 1]
	float ShapeTargetStiffness;//[Offset: 0x79c, Size: 1]
	FName[] DisallowedAnimCurves;//[Offset: 0x7a0, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x7b0, Size: 1]
	MulticastInlineDelegateProperty OnConstraintBroken;//[Size: 1]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x7d0, Size: 1]
	float TeleportDistanceThreshold;//[Offset: 0x8a8, Size: 1]
	float TeleportRotationThreshold;//[Offset: 0x8ac, Size: 1]
	uint32 LastPoseTickFrame;//[Offset: 0x8b8, Size: 1]
	bool bDelayedAnimTaskValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8, Size: 1]
	bool bDisableDelayedAnimTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c9, Size: 1]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0x920, Size: 1]
	MulticastInlineDelegateProperty OnAnimInitialized;//[Size: 1]
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x4638340
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x46382b0
	void ToggleDisablePostProcessBlueprint();// 0x4638290
	void TermBodiesBelow(FName ParentBoneName);// 0x4638210
	void SuspendClothingSimulation();// 0x46381f0
	void Stop();// 0x46381d0
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4638100
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x4638070
	void SetTeleportRotationThreshold(float Threshold);// 0x4637ff0
	void SetTeleportDistanceThreshold(float Threshold);// 0x4637f70
	void SetPosition(float InPos, bool bFireNotifies);// 0x4637ea0
	void SetPlayRate(float Rate);// 0x4637e20
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x4637da0
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x4637c90
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x4637b80
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x4637af0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x46379e0
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x4637920
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x4637890
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x4637800
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x4637730
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x4637620
	void SetClothMaxDistanceScale(float Scale);// 0x46375a0
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x46374d0
	void SetAnimClass(class Object NewClass);// 0x4637340
	void SetAnimationMode(byte InAnimationMode);// 0x4637450
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x46373d0
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x46371f0
	void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);// 0x4637020
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x46370f0
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x4636f90
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4636e70
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4636d50
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x4636bf0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x4636b60
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4636a90
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x4636970
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x4636800
	void ResumeClothingSimulation();// 0x46367e0
	void ResetClothTeleportMode();// 0x46367c0
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x4636740
	void ResetAllowedAnimCurveEvaluation();// 0x4636720
	void ResetAllBodiesSimulatePhysics();// 0x4636700
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x4636630
	void Play(bool bLooping);// 0x46365a0
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x4636400
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x4636340
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x46362c0
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x46360c0
	bool IsPlaying();// 0x4636090
	bool IsClothingSimulationSuspended();// 0x4636060
	bool IsBodyGravityEnabled(FName BoneName);// 0x4635fd0
	bool HasValidAnimationInstance();// 0x4635fa0
	float GetTeleportRotationThreshold();// 0x4635f70
	float GetTeleportDistanceThreshold();// 0x4635f40
	Vector GetSkeletalCenterOfMass();// 0x4635f00
	AnimInstance* GetPostProcessInstance();// 0x4635ed0
	float GetPosition();// 0x4635ea0
	float GetPlayRate();// 0x4635e70
	float GetMorphTarget(FName MorphTargetName);// 0x4635dd0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x4635d40
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x4635cb0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x4635bc0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x4635b30
	bool GetDisablePostProcessBlueprint();// 0x4635b00
	bool GetDisableAnimCurves();// 0x4635ad0
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x4635950
	float GetClothMaxDistanceScale();// 0x46358f0
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x4635920
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x4635820
	AnimInstance* GetAnimInstance();// 0x46357c0
	class Object GetAnimClass();// 0x4635790
	byte GetAnimationMode();// 0x46357f0
	bool GetAllowRigidBodyAnimNode();// 0x4635730
	bool GetAllowedAnimCurveEvaluate();// 0x4635760
	void ForceClothNextUpdateTeleportAndReset();// 0x4635710
	void ForceClothNextUpdateTeleport();// 0x46356f0
	FName FindConstraintBoneName(int ConstraintIndex);// 0x4635660
	void ClearMorphTargets();// 0x4635640
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x4635510
	void BindClothToMasterPoseComponent();// 0x46354f0
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x4635420
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x46352b0
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x4635140
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4635020

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x458, Size: 1]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x460, Size: 1]
	enum[] SkinCacheUsage;//[Offset: 0x468, Size: 1]
	bool bSuppressSocketByNameWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x578, Size: 1]
	int ForcedLodModel;//[Offset: 0x580, Size: 1]
	int MinLodModel;//[Offset: 0x584, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x590, Size: 1]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x5a0, Size: 1]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x5d4, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d6, Size: 1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d6, Size: 1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d6, Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5d6, Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5d6, Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d6, Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d7, Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d7, Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d7, Size: 1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d7, Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d7, Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5d7, Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5d7, Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d7, Size: 1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5d8, Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d8, Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5d8, Size: 1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5d8, Size: 1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5d8, Size: 1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5d8, Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5d9, Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x5dc, Size: 1]
	BoxSphereBounds CachedWorldSpaceBounds;//[Offset: 0x5f0, Size: 1]
	Matrix CachedWorldToLocalTransform;//[Offset: 0x610, Size: 1]
	void UnloadSkinWeightProfile(FName InProfileName);// 0x463d730
	void UnHideBoneByName(FName BoneName);// 0x463d6b0
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x463d4f0
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x463d330
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);// 0x463d1f0
	void ShowAllMaterialSections(int LODIndex);// 0x463d170
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x463d090
	bool SetSkinWeightProfile(FName InProfileName);// 0x463d000
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x463cf20
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x463ce50
	void SetRenderStatic(bool bNewValue);// 0x463cdc0
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x463ccf0
	void SetMinLOD(int InNewMinLOD);// 0x463cbf0
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x463cb20
	void SetForcedLOD(int InNewForcedLOD);// 0x463caa0
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x463ca10
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x463c980
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x463c900
	bool IsUsingSkinWeightProfile();// 0x463c8d0
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x463c810
	bool IsBoneHiddenByName(FName BoneName);// 0x463c780
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x463c5a0
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, out float OutTwistAngle, out float OutSwingAngle);// 0x463c480
	FName GetSocketBoneName(FName InSocketName);// 0x463c350
	Vector GetRefPosePosition(int BoneIndex);// 0x463c2b0
	FName GetParentBone(FName BoneName);// 0x463c220
	int GetNumLODs();// 0x463c1f0
	int GetNumBones();// 0x463c1c0
	int GetForcedLOD();// 0x463c190
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x463c090
	FName GetCurrentSkinWeightProfileName();// 0x463c070
	FName GetBoneName(int BoneIndex);// 0x463bfe0
	int GetBoneIndex(FName BoneName);// 0x463bf50
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x463bdc0
	void ClearVertexColorOverride(int LODIndex);// 0x463bd40
	void ClearSkinWeightProfile();// 0x463bd20
	void ClearSkinWeightOverride(int LODIndex);// 0x463bca0
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x463bbe0

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x430, Size: 1]
	bool bEnableMaterialParameterCaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 1]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x45eb7a0
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x45eb6d0
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x45eb350
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x45eb2b0
	FName[] GetMaterialSlotNames();// 0x45eb0a0
	MaterialInterface*[] GetMaterials();// 0x45eb120
	int GetMaterialIndex(FName MaterialSlotName);// 0x45eb000

--------------------------------
Class: SkeletalMesh.StreamableRenderAsset.Object
	Skeleton* Skeleton;//[Offset: 0x60, Size: 1]
	BoxSphereBounds ImportedBounds;//[Offset: 0x68, Size: 1]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x84, Size: 1]
	Vector PositiveBoundsExtension;//[Offset: 0xa0, Size: 1]
	Vector NegativeBoundsExtension;//[Offset: 0xac, Size: 1]
	SkeletalMaterial[] Materials;//[Offset: 0xb8, Size: 1]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xc8, Size: 1]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xd8, Size: 1]
	PerPlatformInt MinLOD;//[Offset: 0x138, Size: 1]
	PerPlatformInt MaxLod;//[Offset: 0x13c, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x140, Size: 1]
	byte SkelMirrorAxis;//[Offset: 0x141, Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x142, Size: 1]
	bool bWillNeverMergeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x143, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x143, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x143, Size: 1]
	bool bSmoothNormalsInVertexColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x143, Size: 1]
	bool bVertexCurvature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x143, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x143, Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x143, Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 1]
	BodySetup* BodySetup;//[Offset: 0x148, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x150, Size: 1]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0x158, Size: 1]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0x160, Size: 1]
	MorphTarget*[] MorphTargets;//[Offset: 0x170, Size: 1]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x2f8, Size: 1]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x300, Size: 1]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x310, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x340, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x358, Size: 1]
	SkinWeightProfileInfo[] SkinWeightProfiles;//[Offset: 0x378, Size: 1]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x27c3ca0
	int NumSockets();// 0x46333f0
	FString[] K2_GetAllMorphTargetNames();// 0x4633310
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x4633250
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x46331c0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x4633130
	BoxSphereBounds GetImportedBounds();// 0x46330e0
	BoxSphereBounds GetBounds();// 0x4633090
	void GenerateClothingLODs(int MaxClothLODIndex);// 0xe8db80
	SkeletalMeshSocket* FindSocketInfo(FName InSocketName, out Transform OutTransform, out int OutBoneIndex, out int OutIndex);// 0x4632ec0
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x4632df0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x4632d60

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 1]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 1]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 1]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 1]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 1]
	SmartNameContainer SmartNames;//[Offset: 0x1f0, Size: 1]
	BlendProfile*[] BlendProfiles;//[Offset: 0x270, Size: 1]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x280, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x358, Size: 1]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 1]
	int ParentIndex;//[Offset: 0x8, Size: 1]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 1]
	FName TargetBoneName;//[Offset: 0x8, Size: 1]
	FName VirtualBoneName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 1]
	FName BoneName;//[Offset: 0x30, Size: 1]
	Vector RelativeLocation;//[Offset: 0x38, Size: 1]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 1]
	Vector RelativeScale;//[Offset: 0x50, Size: 1]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x463c660
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x463c3e0

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 1]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 1]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float BlendScale;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 1]
	FName[] SlotNames;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 1]
	PerPlatformInt MaxLod;//[Offset: 0x34, Size: 1]
	PerPlatformBool DisableBelowMinLodStripping;//[Offset: 0x38, Size: 1]
	PerPlatformBool bSupportLODStreaming;//[Offset: 0x39, Size: 1]
	PerPlatformInt MaxNumStreamedLODs;//[Offset: 0x3c, Size: 1]
	PerPlatformInt MaxNumOptionalLODs;//[Offset: 0x40, Size: 1]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x48, Size: 1]
	bool bOverrideWillNeverMergeMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 1]
	bool bWillNeverMergeMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 1]
	void SetMinMaxLodToMesh(SkeletalMesh* InMesh);// 0x463cc70

--------------------------------
Class: PerPlatformBool
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 1]
	PerPlatformBool bUseExtraBonesToRemove;//[Offset: 0x20, Size: 1]
	BoneFilter[] ExtraBonesToRemove;//[Offset: 0x28, Size: 1]
	FName[] BonesToPrioritize;//[Offset: 0x38, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x48, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x50, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x58, Size: 1]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x4, Size: 1]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 1]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 1]
	AnimBoneCompressionSettings* BoneCompressionSettings;//[Offset: 0xd0, Size: 1]
	AnimCurveCompressionSettings* CurveCompressionSettings;//[Offset: 0xd8, Size: 1]
	byte AdditiveAnimType;//[Offset: 0x150, Size: 1]
	byte RefPoseType;//[Offset: 0x151, Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0x158, Size: 1]
	int RefFrameIndex;//[Offset: 0x160, Size: 1]
	FName RetargetSource;//[Offset: 0x164, Size: 1]
	enum Interpolation;//[Offset: 0x16c, Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x16e, Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f, Size: 1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170, Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x171, Size: 1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x178, Size: 1]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 1]
	float SequenceLength;//[Offset: 0x90, Size: 1]
	float RateScale;//[Offset: 0x94, Size: 1]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 1]
	float GetPlayLength();// 0x4510d70

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 1]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 1]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 1]
	FName NotifyName;//[Offset: 0x40, Size: 1]
	AnimNotify* Notify;//[Offset: 0x48, Size: 1]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 1]
	float Duration;//[Offset: 0x58, Size: 1]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 1]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	byte MontageTickType;//[Offset: 0x91, Size: 1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 1]
	byte NotifyFilterType;//[Offset: 0x98, Size: 1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 1]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]
	int TrackIndex;//[Offset: 0xa4, Size: 1]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 1]
	int SlotIndex;//[Offset: 0x10, Size: 1]
	int SegmentIndex;//[Offset: 0x14, Size: 1]
	byte LinkMethod;//[Offset: 0x18, Size: 1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 1]
	float SegmentLength;//[Offset: 0x20, Size: 1]
	float LinkValue;//[Offset: 0x24, Size: 1]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2d74e00
	FString GetNotifyName();// 0xe91410

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x2d74e00
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x2d74e00
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x2d74e00
	FString GetNotifyName();// 0xe91410

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 1]
	float BlendInTime;//[Offset: 0xd8, Size: 1]
	AlphaBlend BlendOut;//[Offset: 0xe0, Size: 1]
	float BlendOutTime;//[Offset: 0x110, Size: 1]
	float BlendOutTriggerTime;//[Offset: 0x114, Size: 1]
	FName SyncGroup;//[Offset: 0x118, Size: 1]
	int SyncSlotIndex;//[Offset: 0x120, Size: 1]
	MarkerSyncData MarkerData;//[Offset: 0x128, Size: 1]
	CompositeSection[] CompositeSections;//[Offset: 0x148, Size: 1]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x158, Size: 1]
	BranchingPoint[] BranchingPoints;//[Offset: 0x168, Size: 1]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17a, Size: 1]
	byte RootMotionRootLock;//[Offset: 0x17b, Size: 1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x180, Size: 1]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x190, Size: 1]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1a0, Size: 1]
	FName TimeStretchCurveName;//[Offset: 0x1c8, Size: 1]
	float GetDefaultBlendOutTime();// 0xe915d0

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	CurveFloat* CustomCurve;//[Offset: 0x0, Size: 1]
	float BlendTime;//[Offset: 0x8, Size: 1]
	enum BlendOption;//[Offset: 0x24, Size: 1]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 1]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float GetFloatValue(float InTime);// 0x453d3d0

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x453d5e0
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x453d500

--------------------------------
Class: RichCurve.RealCurve.IndexedCurve
	RichCurveKey[] Keys;//[Offset: 0x70, Size: 1]

--------------------------------
Class: RealCurve.IndexedCurve
	float DefaultValue;//[Offset: 0x68, Size: 1]
	byte PreInfinityExtrap;//[Offset: 0x6c, Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x6d, Size: 1]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 1]
	byte TangentMode;//[Offset: 0x1, Size: 1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]
	float ArriveTangent;//[Offset: 0xc, Size: 1]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 1]
	float LeaveTangent;//[Offset: 0x14, Size: 1]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 1]
	float StartTime;//[Offset: 0x38, Size: 1]
	FName NextSectionName;//[Offset: 0x3c, Size: 1]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 1]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 1]
	float StartPos;//[Offset: 0x8, Size: 1]
	float AnimStartTime;//[Offset: 0xc, Size: 1]
	float AnimEndTime;//[Offset: 0x10, Size: 1]
	float AnimPlayRate;//[Offset: 0x14, Size: 1]
	int LoopingCount;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 1]
	float DisplayTime;//[Offset: 0x38, Size: 1]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 1]
	float TriggerTime;//[Offset: 0x4, Size: 1]
	byte NotifyEventType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 1]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 1]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 1]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 3]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 3]
	float Alpha;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 1]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 1]
	SmartName Name;//[Offset: 0x8, Size: 1]
	int CurveTypeFlags;//[Offset: 0x14, Size: 1]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimBoneCompressionSettings.Object
	AnimBoneCompressionCodec*[] Codecs;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimBoneCompressionCodec.Object
	FString Description;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionSettings.Object
	AnimCurveCompressionCodec* Codec;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimCurveCompressionCodec.Object

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 1]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 1]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 1]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 1]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 1]
	byte ReductionMethod;//[Offset: 0x18, Size: 1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 1]
	byte TextureImportance;//[Offset: 0x1a, Size: 1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	float WeldingThreshold;//[Offset: 0x20, Size: 1]
	float NormalsThreshold;//[Offset: 0x24, Size: 1]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 1]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	float VolumeImportance;//[Offset: 0x30, Size: 1]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bLockColorBounaries;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	int BaseLOD;//[Offset: 0x38, Size: 1]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	class Object* ParentClass;//[Offset: 0x50, Size: 1]
	byte BlueprintType;//[Offset: 0x58, Size: 1]
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x5c, Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x60, Size: 1]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x68, Size: 1]
	TimelineTemplate*[] Timelines;//[Offset: 0x78, Size: 1]
	BPComponentClassOverride[] ComponentClassOverrides;//[Offset: 0x88, Size: 1]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x98, Size: 1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 1]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 1]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 1]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 1]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 1]
	FName AttachToName;//[Offset: 0x80, Size: 1]
	FName ParentComponentOrVariableName;//[Offset: 0x88, Size: 1]
	FName ParentComponentOwnerClassName;//[Offset: 0x90, Size: 1]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa0, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb0, Size: 1]
	Guid VariableGuid;//[Offset: 0xc0, Size: 1]
	FName InternalVariableName;//[Offset: 0xd0, Size: 1]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x0, Size: 1]
	bool bHasValidCookedData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* PropertyScope;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 1]
	FString DataValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 1]
	byte LengthMode;//[Offset: 0x2c, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 1]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 1]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 1]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 1]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 1]
	Guid TimelineGuid;//[Offset: 0x80, Size: 1]
	FName VariableName;//[Offset: 0x90, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x98, Size: 1]
	FName UpdateFunctionName;//[Offset: 0xa0, Size: 1]
	FName FinishedFunctionName;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: TTEventTrack.TTTrackBase
	FName FunctionName;//[Offset: 0x18, Size: 1]
	CurveFloat* CurveKeys;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x8, Size: 1]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]

--------------------------------
Class: TTFloatTrack.TTPropertyTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TTPropertyTrack.TTTrackBase
	FName PropertyName;//[Offset: 0x18, Size: 1]

--------------------------------
Class: TTVectorTrack.TTPropertyTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 3]
	Vector GetVectorValue(float InTime);// 0x453d6c0

--------------------------------
Class: TTLinearColorTrack.TTPropertyTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x20, Size: 1]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 4]
	float AdjustHue;//[Offset: 0x230, Size: 1]
	float AdjustSaturation;//[Offset: 0x234, Size: 1]
	float AdjustBrightness;//[Offset: 0x238, Size: 1]
	float AdjustBrightnessCurve;//[Offset: 0x23c, Size: 1]
	float AdjustVibrance;//[Offset: 0x240, Size: 1]
	float AdjustMinAlpha;//[Offset: 0x244, Size: 1]
	float AdjustMaxAlpha;//[Offset: 0x248, Size: 1]
	LinearColor GetLinearColorValue(float InTime);// 0x453d460
	LinearColor GetClampedLinearColorValue(float InTime);// 0x453d080

--------------------------------
Class: BPComponentClassOverride
	FName ComponentName;//[Offset: 0x0, Size: 1]
	class Object* ComponentClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 1]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 1]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 1]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 1]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 1]
	FName SCSVariableName;//[Offset: 0x8, Size: 1]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 1]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 1]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 1]
	Object* SourceAsset;//[Offset: 0x118, Size: 1]
	Object* TargetAsset;//[Offset: 0x140, Size: 1]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 1]
	Transform Transform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 1]
	FName MaterialSlotName;//[Offset: 0x8, Size: 1]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 1]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 1]
	float LODHysteresis;//[Offset: 0x4, Size: 1]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 1]
	SkeletalMeshBuildSettings BuildSettings;//[Offset: 0x18, Size: 1]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x2c, Size: 1]
	BoneReference[] BonesToRemove;//[Offset: 0x68, Size: 1]
	BoneReference[] BonesToPrioritize;//[Offset: 0x78, Size: 1]
	float WeightOfPrioritization;//[Offset: 0x88, Size: 1]
	AnimSequence* BakePose;//[Offset: 0x90, Size: 1]
	AnimSequence* BakePoseOverride;//[Offset: 0x98, Size: 1]
	FString SourceImportFilename;//[Offset: 0xa0, Size: 1]
	enum SkinCacheUsage;//[Offset: 0xb0, Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]

--------------------------------
Class: SkeletalMeshBuildSettings
	bool bRecomputeNormals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseMikkTSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bComputeWeightedNormals;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bRemoveDegenerates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bBuildAdjacencyBuffer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bBuildVertexCurvature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	float ThresholdPosition;//[Offset: 0x4, Size: 1]
	float ThresholdTangentNormal;//[Offset: 0x8, Size: 1]
	float ThresholdUV;//[Offset: 0xc, Size: 1]
	float MorphThresholdPosition;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 1]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 1]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 1]
	SolverIterations SolverIterations;//[Offset: 0x60, Size: 1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78, Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x120, Size: 1]
	BodySetup*[] BodySetup;//[Offset: 0x128, Size: 1]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x258, Size: 1]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 1]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 1]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	float OrientationStrength;//[Offset: 0xc, Size: 1]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 1]
	float PositionStrength;//[Offset: 0x14, Size: 1]
	float VelocityStrength;//[Offset: 0x18, Size: 1]
	float MaxLinearForce;//[Offset: 0x1c, Size: 1]
	float MaxAngularForce;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 1]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 1]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 1]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 1]
	FName ConstraintBone1;//[Offset: 0x20, Size: 1]
	FName ConstraintBone2;//[Offset: 0x28, Size: 1]
	Vector Pos1;//[Offset: 0x30, Size: 1]
	Vector PriAxis1;//[Offset: 0x3c, Size: 1]
	Vector SecAxis1;//[Offset: 0x48, Size: 1]
	Vector Pos2;//[Offset: 0x54, Size: 1]
	Vector PriAxis2;//[Offset: 0x60, Size: 1]
	Vector SecAxis2;//[Offset: 0x6c, Size: 1]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 1]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 1]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 1]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 1]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 1]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 1]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 1]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 1]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 1]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 1]
	byte XMotion;//[Offset: 0x18, Size: 1]
	byte YMotion;//[Offset: 0x19, Size: 1]
	byte ZMotion;//[Offset: 0x1a, Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float Restitution;//[Offset: 0x8, Size: 1]
	float ContactDistance;//[Offset: 0xc, Size: 1]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 1]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 1]
	byte Swing1Motion;//[Offset: 0x1c, Size: 1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 1]
	byte TwistMotion;//[Offset: 0x18, Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 1]
	Vector VelocityTarget;//[Offset: 0xc, Size: 1]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 1]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 1]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 1]
	float Damping;//[Offset: 0x4, Size: 1]
	float MaxForce;//[Offset: 0x8, Size: 1]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 1]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 1]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 1]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 1]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 1]
	byte AngularDriveMode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 1]
	FName ProfileName;//[Offset: 0x104, Size: 1]

--------------------------------
Class: SolverIterations
	int SolverIterations;//[Offset: 0x0, Size: 1]
	int JointIterations;//[Offset: 0x4, Size: 1]
	int CollisionIterations;//[Offset: 0x8, Size: 1]
	int SolverPushOutIterations;//[Offset: 0xc, Size: 1]
	int JointPushOutIterations;//[Offset: 0x10, Size: 1]
	int CollisionPushOutIterations;//[Offset: 0x14, Size: 1]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 1]
	byte RootMotionMode;//[Offset: 0x30, Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 1]
	bool bReceiveNotifiesFromLinkedInstances;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31, Size: 1]
	bool bPropagateNotifiesToLinkedInstances;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31, Size: 1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31, Size: 1]
	MulticastInlineDelegateProperty OnMontageBlendingOut;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnMontageEnded;//[Size: 1]
	MulticastInlineDelegateProperty OnAllMontageInstancesEnded;//[Size: 1]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x100, Size: 1]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x170, Size: 1]
	float SubAnimInstanceWeight;//[Offset: 0x180, Size: 1]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x45070e0
	void UnlinkAnimClassLayers(class AnimInstance InClass);// 0x4507060
	Pawn* TryGetPawnOwner();// 0x4507030
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x4506f60
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4506e90
	void SetRootMotionMode(byte Value);// 0x44fb6e0
	void SetReceiveNotifiesFromLinkedInstances(bool bSet);// 0x4506e00
	void SetPropagateNotifiesToLinkedInstances(bool bSet);// 0x4506d70
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x4506ca0
	void SavePoseSnapshot(FName SnapshotName);// 0x4506c10
	void ResetDynamics(enum InTeleportType);// 0x4506b90
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x4506950
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x4506790
	void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);// 0x45065f0
	void Montage_Stop_By_Instance_ID(float InBlendOutTime, int InInstanceID);// 0x45066c0
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x4506520
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x4506450
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x4506380
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x4506280
	void Montage_Resume(const AnimMontage* Montage);// 0x4506200
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x4506070
	void Montage_Pause(const AnimMontage* Montage);// 0x4505ff0
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x4505f30
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x4505e70
	bool Montage_IsPlaying_By_Instance_ID(int InInstanceID);// 0x4505de0
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x4505d50
	bool Montage_IsActive(const AnimMontage* Montage);// 0x4505cc0
	float Montage_GetPosition(const AnimMontage* Montage);// 0x4505c20
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x4505b80
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x4505af0
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x4505a60
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x45059c0
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x45058f0
	void LinkAnimGraphByTag(FName InTag, class AnimInstance InClass);// 0x4505830
	void LinkAnimClassLayers(class AnimInstance InClass);// 0x45057b0
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x4505660
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x45055a0
	bool IsAnyMontagePlaying();// 0x4505570
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x45054b0
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x4505310
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x4505270
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x45051b0
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x45050f0
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x4505030
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x4504f70
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x4504eb0
	bool GetReceiveNotifiesFromLinkedInstances();// 0x4504e80
	bool GetPropagateNotifiesToLinkedInstances();// 0x4504e50
	SkeletalMeshComponent* GetOwningComponent();// 0x4504e20
	Actor* GetOwningActor();// 0x4504df0
	AnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);// 0x4504d60
	AnimInstance* GetLinkedAnimLayerInstanceByClass(class AnimInstance InClass);// 0x4504cd0
	void GetLinkedAnimGraphInstancesByTag(FName InTag, out AnimInstance*[] OutLinkedInstances);// 0x4504be0
	AnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);// 0x4504b50
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x4504a90
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x45049d0
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x4504910
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x4504850
	float GetInstanceMachineWeight(int MachineIndex);// 0x45047c0
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x4504730
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x45046a0
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x4504610
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x4504580
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x45044f0
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x4504460
	float GetCurveValue(FName CurveName);// 0x45043c0
	FName GetCurrentStateName(int MachineIndex);// 0x4504330
	AnimMontage* GetCurrentActiveMontage();// 0x4504300
	void GetAllCurveNames(out FName[] OutNames);// 0x4504250
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x4504160
	AnimMontage* Get_Montage_By_Instance_ID(int InInstanceID);// 0x4505420
	void ClearMorphTargets();// 0x4504140
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x4504040
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x2d74e00
	void BlueprintPostEvaluateAnimation();// 0x2d74e00
	void BlueprintLinkedAnimationLayersInitialized();// 0x2d74e00
	void BlueprintInitializeAnimation();// 0x2d74e00
	void BlueprintBeginPlay();// 0x2d74e00

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 1]
	FName[] BoneNames;//[Offset: 0x10, Size: 1]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 1]
	FName SnapshotName;//[Offset: 0x28, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 1]
	FName NextMarkerName;//[Offset: 0x8, Size: 1]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 1]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 1]
	Guid AssetGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 1]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 1]
	bool bIncludeOrExclude;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 1]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SkeletalMeshSamplingLODBuiltData

--------------------------------
Class: SkeletalMeshSamplingRegionBuiltData

--------------------------------
Class: SkinWeightProfileInfo
	FName Name;//[Offset: 0x0, Size: 1]
	PerPlatformBool DefaultProfile;//[Offset: 0x8, Size: 1]
	PerPlatformInt DefaultProfileFromLODIndex;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 1]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	float SavedPosition;//[Offset: 0xc, Size: 1]
	float SavedPlayRate;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: ClothingSimulationInteractor.Object
	void SetAnimDriveSpringStiffness(float InStiffness);// 0x3d72960
	void PhysicsAssetUpdated();// 0x26b68d0
	void EnableGravityOverride(out const Vector InVector);// 0x3d728d0
	void DisableGravityOverride();// 0xe8d1d0
	void ClothConfigUpdated();// 0x27b60a0

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 1]
	Plane YPlane;//[Offset: 0x10, Size: 1]
	Plane ZPlane;//[Offset: 0x20, Size: 1]
	Plane WPlane;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 12]
	byte Weights;//[Offset: 0x30, Size: 12]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x148, Size: 1]
	float GravityScale;//[Offset: 0x150, Size: 1]
	float MaxStepHeight;//[Offset: 0x154, Size: 1]
	float JumpZVelocity;//[Offset: 0x158, Size: 1]
	float JumpOffJumpZFactor;//[Offset: 0x15c, Size: 1]
	float WalkableFloorAngle;//[Offset: 0x160, Size: 1]
	float WalkableFloorZ;//[Offset: 0x164, Size: 1]
	byte MovementMode;//[Offset: 0x168, Size: 1]
	byte CustomMovementMode;//[Offset: 0x169, Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x16a, Size: 1]
	float GroundFriction;//[Offset: 0x16c, Size: 1]
	float MaxWalkSpeed;//[Offset: 0x18c, Size: 1]
	float MaxWalkSpeedCrouched;//[Offset: 0x190, Size: 1]
	float MaxSwimSpeed;//[Offset: 0x194, Size: 1]
	float MaxFlySpeed;//[Offset: 0x198, Size: 1]
	float MaxCustomMovementSpeed;//[Offset: 0x19c, Size: 1]
	float MaxAcceleration;//[Offset: 0x1a0, Size: 1]
	float MinAnalogWalkSpeed;//[Offset: 0x1a4, Size: 1]
	float BrakingFrictionFactor;//[Offset: 0x1a8, Size: 1]
	float BrakingFriction;//[Offset: 0x1ac, Size: 1]
	float BrakingSubStepTime;//[Offset: 0x1b0, Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x1b4, Size: 1]
	float BrakingDecelerationFalling;//[Offset: 0x1b8, Size: 1]
	float BrakingDecelerationSwimming;//[Offset: 0x1bc, Size: 1]
	float BrakingDecelerationFlying;//[Offset: 0x1c0, Size: 1]
	float AirControl;//[Offset: 0x1c4, Size: 1]
	float AirControlBoostMultiplier;//[Offset: 0x1c8, Size: 1]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1cc, Size: 1]
	float FallingLateralFriction;//[Offset: 0x1d0, Size: 1]
	float CrouchedHalfHeight;//[Offset: 0x1d4, Size: 1]
	float Buoyancy;//[Offset: 0x1d8, Size: 1]
	float PerchRadiusThreshold;//[Offset: 0x1dc, Size: 1]
	float PerchAdditionalHeight;//[Offset: 0x1e0, Size: 1]
	Rotator RotationRate;//[Offset: 0x1e4, Size: 1]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 1]
	bool bEnableServerDualMoveScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f1, Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f1, Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f1, Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f2, Size: 1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f2, Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f2, Size: 1]
	bool bPreventMeshDoubleMode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f2, Size: 1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f2, Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f2, Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f2, Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f3, Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f3, Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1f8, Size: 1]
	float MaxOutOfWaterStepHeight;//[Offset: 0x200, Size: 1]
	float OutofWaterZ;//[Offset: 0x204, Size: 1]
	float Mass;//[Offset: 0x208, Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x20c, Size: 1]
	float InitialPushForceFactor;//[Offset: 0x210, Size: 1]
	float PushForceFactor;//[Offset: 0x214, Size: 1]
	float PushForcePointZOffsetFactor;//[Offset: 0x218, Size: 1]
	float TouchForceFactor;//[Offset: 0x21c, Size: 1]
	float MinTouchForce;//[Offset: 0x220, Size: 1]
	float MaxTouchForce;//[Offset: 0x224, Size: 1]
	float RepulsionForce;//[Offset: 0x228, Size: 1]
	Vector Acceleration;//[Offset: 0x22c, Size: 1]
	Quat LastUpdateRotation;//[Offset: 0x240, Size: 1]
	Vector LastUpdateLocation;//[Offset: 0x250, Size: 1]
	Vector LastUpdateVelocity;//[Offset: 0x25c, Size: 1]
	bool bHasQueuedServerMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	Vector QueuedServerLocation;//[Offset: 0x26c, Size: 1]
	Quat QueuedServerRotation;//[Offset: 0x280, Size: 1]
	byte ParallelUpdateMoveMode;//[Offset: 0x298, Size: 1]
	Transform ParallelUpdateTransform;//[Offset: 0x2a0, Size: 1]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x2d0, Size: 1]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x2d4, Size: 1]
	float ServerLastClientAdjustmentTime;//[Offset: 0x2d8, Size: 1]
	Vector PendingImpulseToApply;//[Offset: 0x2dc, Size: 1]
	Vector PendingForceToApply;//[Offset: 0x2e8, Size: 1]
	float AnalogInputModifier;//[Offset: 0x2f4, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x304, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x308, Size: 1]
	int MaxJumpApexAttemptsPerSimulation;//[Offset: 0x30c, Size: 1]
	float MaxDepenetrationWithGeometry;//[Offset: 0x310, Size: 1]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x314, Size: 1]
	float MaxDepenetrationWithPawn;//[Offset: 0x318, Size: 1]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x31c, Size: 1]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x320, Size: 1]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x324, Size: 1]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x328, Size: 1]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x32c, Size: 1]
	float NetProxyShrinkRadius;//[Offset: 0x330, Size: 1]
	float NetProxyShrinkHalfHeight;//[Offset: 0x334, Size: 1]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x338, Size: 1]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x33c, Size: 1]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x340, Size: 1]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x344, Size: 1]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x348, Size: 1]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x34c, Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x350, Size: 1]
	float JumpOutOfWaterPitch;//[Offset: 0x354, Size: 1]
	FindFloorResult CurrentFloor;//[Offset: 0x358, Size: 1]
	byte DefaultLandMovementMode;//[Offset: 0x3ec, Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x3ed, Size: 1]
	byte GroundMovementMode;//[Offset: 0x3ee, Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ef, Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3ef, Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3ef, Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3ef, Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3ef, Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3ef, Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3ef, Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3ef, Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f0, Size: 1]
	bool bServerAcceptClientAuthoritativePosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f0, Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f0, Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f0, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f0, Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f0, Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f0, Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f0, Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f1, Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f1, Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f1, Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f1, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f1, Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f1, Size: 1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f1, Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f2, Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f2, Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f2, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f2, Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f2, Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f2, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x408, Size: 1]
	Vector RequestedVelocity;//[Offset: 0x40c, Size: 1]
	int AvoidanceUID;//[Offset: 0x418, Size: 1]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x41c, Size: 1]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x420, Size: 1]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x424, Size: 1]
	float AvoidanceWeight;//[Offset: 0x428, Size: 1]
	Vector PendingLaunchVelocity;//[Offset: 0x42c, Size: 1]
	float NavMeshProjectionInterval;//[Offset: 0x4d8, Size: 1]
	float NavMeshProjectionTimer;//[Offset: 0x4dc, Size: 1]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4e0, Size: 1]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4e4, Size: 1]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4e8, Size: 1]
	float NavWalkingFloorDistTolerance;//[Offset: 0x4ec, Size: 1]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4f0, Size: 1]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x538, Size: 1]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x540, Size: 1]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x610, Size: 1]
	Vector AnimRootMotionVelocity;//[Offset: 0x650, Size: 1]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x4535900
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x4535880
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x45357c0
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x4535730
	void SetGroupsToIgnore(int GroupFlags);// 0x45356b0
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x4535620
	void SetGroupsToAvoid(int GroupFlags);// 0x45355a0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x4535510
	void SetAvoidanceGroup(int GroupFlags);// 0x4535490
	void SetAvoidanceEnabled(bool bEnable);// 0x4535400
	float K2_GetWalkableFloorZ();// 0x45353d0
	float K2_GetWalkableFloorAngle();// 0x45353a0
	float K2_GetModifiedMaxAcceleration();// 0x4535360
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x4535220
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x4535030
	bool IsWalking();// 0x27b2680
	bool IsWalkable(out const HitResult Hit);// 0x4534f60
	float GetValidPerchRadius();// 0x4534f30
	float GetPerchRadiusThreshold();// 0x4534f00
	PrimitiveComponent* GetMovementBase();// 0x4534ed0
	float GetMinAnalogSpeed();// 0x4534e90
	float GetMaxJumpHeightWithJumpTime();// 0x4534e50
	float GetMaxJumpHeight();// 0x27054e0
	float GetMaxBrakingDeceleration();// 0x4534e10
	float GetMaxAcceleration();// 0x4534dd0
	Vector GetLastUpdateVelocity();// 0x4534da0
	Rotator GetLastUpdateRotation();// 0x4534d50
	Vector GetLastUpdateLocation();// 0x4534d20
	Vector GetImpartedMovementBaseVelocity();// 0x4534ce0
	Vector GetCurrentAcceleration();// 0x4534ca0
	float GetCrouchedHalfHeight();// 0x4534c60
	Character* GetCharacterOwner();// 0x288a910
	float GetAnalogInputModifier();// 0x4534c30
	void DisableMovement();// 0x27b5930
	void ClearAccumulatedForces();// 0x1fc34c0
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4534a40
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x45348e0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x4534800
	void AddForce(Vector Force);// 0x4534770

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x130, Size: 1]
	Vector K2_GetInputVector();// 0x4604310
	bool IsMoveInputIgnored();// 0x27b2650
	Vector GetPendingInputVector();// 0x4604310
	Pawn* GetPawnOwner();// 0x46042e0
	Vector GetLastInputVector();// 0x46041d0
	Vector ConsumeInputVector();// 0x4603ff0
	void AddInputVector(Vector WorldVector, bool bForce);// 0x4603a90

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf0, Size: 1]
	float FixedPathBrakingDistance;//[Offset: 0x120, Size: 1]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x124, Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x124, Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x124, Size: 1]
	MovementProperties MovementState;//[Offset: 0x125, Size: 1]
	Object* PathFollowingComp;//[Offset: 0x128, Size: 1]
	void StopMovementKeepPathing();// 0x45f0d80
	void StopActiveMovement();// 0xe9bfc0
	bool IsSwimming();// 0x45f0d50
	bool IsMovingOnGround();// 0x27b2680
	bool IsFlying();// 0x27b6070
	bool IsFalling();// 0x45f0d20
	bool IsCrouching();// 0x4517960

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xb0, Size: 1]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xb8, Size: 1]
	Vector Velocity;//[Offset: 0xc4, Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd0, Size: 1]
	Vector PlaneConstraintOrigin;//[Offset: 0xdc, Size: 1]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe8, Size: 1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe8, Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe8, Size: 1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe8, Size: 1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe8, Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xeb, Size: 1]
	void StopMovementImmediately();// 0x1f6e6f0
	void SnapUpdatedComponentToPlane();// 0x1f66a10
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x27fd390
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x45ee860
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x45ee7d0
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x45ee6f0
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x45ee660
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x29df510
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x27fd420
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x45ee140
	float K2_GetModifiedMaxSpeed();// 0x45ee100
	float K2_GetMaxSpeedModifier();// 0x45ee0c0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x45ee030
	Vector GetPlaneConstraintOrigin();// 0x45edff0
	Vector GetPlaneConstraintNormal();// 0x45edfb0
	enum GetPlaneConstraintAxisSetting();// 0x45edf90
	PhysicsVolume* GetPhysicsVolume();// 0x45edf60
	float GetMaxSpeed();// 0x284b9b0
	float GetGravityZ();// 0x45edf20
	Vector ConstrainNormalToPlane(Vector Normal);// 0x45ede70
	Vector ConstrainLocationToPlane(Vector Location);// 0x45eddc0
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x45edd10

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	float FloorDist;//[Offset: 0x4, Size: 1]
	float LineDist;//[Offset: 0x8, Size: 1]
	HitResult HitResult;//[Offset: 0xc, Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 1]
	byte EndTickGroup;//[Offset: 0x9, Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	float TickInterval;//[Offset: 0xc, Size: 1]

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bHasOverrideSourcesWithIgnoreZAccumulate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x29, Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlendWeight;//[Offset: 0x4, Size: 1]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 1]

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 1]
	float AgentHeight;//[Offset: 0x8, Size: 1]
	float AgentStepHeight;//[Offset: 0xc, Size: 1]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 1]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x448, Size: 1]
	float CapsuleRadius;//[Offset: 0x44c, Size: 1]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x45335f0
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x4533520
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x4533450
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4530360
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4530270
	float GetUnscaledCapsuleRadius();// 0x2874ee0
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x4530240
	float GetUnscaledCapsuleHalfHeight();// 0x4530220
	float GetShapeScale();// 0x4530100
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x452ffe0
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x452fed0
	float GetScaledCapsuleRadius();// 0x452fe90
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x452fe40
	float GetScaledCapsuleHalfHeight();// 0x452fe10

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x430, Size: 1]
	class NavAreaBase* AreaClass;//[Offset: 0x438, Size: 1]
	Color ShapeColor;//[Offset: 0x440, Size: 1]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x444, Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x444, Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x444, Size: 1]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 1]
	Rotator Rotation;//[Offset: 0x1c, Size: 1]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 1]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 1]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 1]
	float Position;//[Offset: 0x10, Size: 1]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 1]
	Rotator Rotation;//[Offset: 0x20, Size: 1]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 1]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 1]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x80, Size: 1]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x298, Size: 1]
	Pawn* AcknowledgedPawn;//[Offset: 0x2a0, Size: 1]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x2a8, Size: 1]
	HUD* MyHud;//[Offset: 0x2b0, Size: 1]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x2b8, Size: 1]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x2c0, Size: 1]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x2cc, Size: 1]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x2e4, Size: 1]
	Actor*[] HiddenActors;//[Offset: 0x2f0, Size: 1]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x300, Size: 1]
	float LastSpectatorStateSynchTime;//[Offset: 0x314, Size: 1]
	Vector LastSpectatorSyncLocation;//[Offset: 0x318, Size: 1]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x324, Size: 1]
	int ClientCap;//[Offset: 0x330, Size: 1]
	CheatManager* CheatManager;//[Offset: 0x338, Size: 1]
	class CheatManager* CheatClass;//[Offset: 0x340, Size: 1]
	class PlayerInput* PlayerInputClass;//[Offset: 0x348, Size: 1]
	PlayerInput* PlayerInput;//[Offset: 0x350, Size: 1]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x358, Size: 1]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d8, Size: 1]
	byte NetPlayerIndex;//[Offset: 0x3dc, Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x418, Size: 1]
	NetConnection* NetConnection;//[Offset: 0x420, Size: 1]
	float InputYawScale;//[Offset: 0x440, Size: 1]
	float InputPitchScale;//[Offset: 0x444, Size: 1]
	float InputRollScale;//[Offset: 0x448, Size: 1]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44c, Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44c, Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44c, Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44c, Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44c, Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44c, Size: 1]
	float ForceFeedbackScale;//[Offset: 0x450, Size: 1]
	Key[] ClickEventKeys;//[Offset: 0x458, Size: 1]
	byte DefaultMouseCursor;//[Offset: 0x468, Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x469, Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x46a, Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x46b, Size: 1]
	float HitResultTraceDistance;//[Offset: 0x46c, Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x470, Size: 1]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x472, Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4e8, Size: 1]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f0, Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x508, Size: 1]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x560, Size: 1]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	Vector SpawnLocation;//[Offset: 0x570, Size: 1]
	bool WasInputKeyJustReleased(Key Key);// 0x46155b0
	bool WasInputKeyJustPressed(Key Key);// 0x46154c0
	void ToggleSpeaking(bool bInSpeaking);// 0x4615430
	void TestServerLevelVisibilityChange(const FName PackageName, const FName Filename);// 0x2758410
	void SwitchLevel(FString URL);// 0x4615390
	void StopHapticEffect(enum Hand);// 0x4615310
	void StartFire(byte FireModeNum);// 0x4615290
	void SetVirtualJoystickVisibility(bool bVisible);// 0x4615200
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4615080
	void SetShowMouseCursor(bool bShouldShow);// 0x4614ff0
	void SetName(FString S);// 0x4614f50
	void SetMouseLocation(const int X, const int Y);// 0x4614e90
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x4614dd0
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x4614cd0
	void SetDisableHaptics(bool bNewDisabled);// 0x4614c40
	void SetControllerLightColor(Color Color);// 0x4614bd0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x4614a10
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x46148f0
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x4614820
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x4614730
	void ServerViewPrevPlayer();// 0x46146e0
	void ServerViewNextPlayer();// 0x4614690
	void ServerVerifyViewTarget();// 0x4614640
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x4614580
	void ServerUpdateLevelVisibility(const UpdateLevelVisibilityLevelInfo LevelVisibility);// 0x46144c0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x46143a0
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x4614240
	void ServerToggleAILogging();// 0x46141f0
	void ServerShortTimeout();// 0x46141a0
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x46140e0
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x4613fb0
	void ServerRestartPlayer();// 0x4613f60
	void ServerPause();// 0x4613f10
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x4613e60
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x4613d00
	void ServerExecRPC(FString Msg);// 0x4613c40
	void ServerExec(FString Msg);// 0xd95b90
	void ServerCheckClientPossessionReliable();// 0x4613bf0
	void ServerCheckClientPossession();// 0x4613ba0
	void ServerChangeName(FString S);// 0x4613ae0
	void ServerCamera(FName NewMode);// 0x4613a20
	void ServerAcknowledgePossession(Pawn* P);// 0x4613960
	void SendToConsole(FString Command);// 0x46138c0
	void RestartLevel();// 0x1fc33e0
	void ResetControllerLightColor();// 0x46138a0
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x4613770
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x4613620
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x46133a0
	void Pause();// 0x1fc3300
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x4613310
	void LocalTravel(FString URL);// 0x4613270
	void K2_ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);// 0x46130c0
	bool IsInputKeyDown(Key Key);// 0x4612fd0
	void GetViewportSize(out int SizeX, out int SizeY);// 0x4612ef0
	SpectatorPawn* GetSpectatorPawn();// 0x2a12d20
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x4612e00
	Vector GetInputVectorKeyState(Key Key);// 0x4612d00
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4612b80
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x4612aa0
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x4612910
	float GetInputKeyTimeDown(Key Key);// 0x4612820
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4612700
	float GetInputAnalogKeyState(Key Key);// 0x4612610
	HUD* GetHUD();// 0x4611ca0
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4612450
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x46122b0
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4612110
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4611f90
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4611e30
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4611cd0
	Vector GetFocalLocation();// 0x4611c60
	void FOV(float NewFOV);// 0x4611be0
	void EnableCheats();// 0x1fc3640
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x4611a60
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x4611960
	void ConsoleKey(Key Key);// 0x4611880
	void ClientWasKicked(const FText KickReason);// 0x46117c0
	void ClientVoiceHandshakeComplete();// 0x1fc32a0
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x4611720
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x4611570
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x4611450
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x46112e0
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4611170
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x4611010
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x4610f40
	void ClientStopCameraShakesFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x4610e70
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x4610da0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x3c35790
	void ClientStartOnlineSession();// 0xd94950
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4610d10
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x4610c20
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x4610b90
	void ClientSetHUD(class HUD NewHUDClass);// 0x4610b00
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x4610a00
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x4610890
	void ClientSetCameraMode(FName NewCamMode);// 0x4610800
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x4610670
	void ClientSetBlockOnAsyncLoading();// 0x1fa0140
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x46105b0
	void ClientReturnToMainMenu(FString ReturnReason);// 0x4610510
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x4610480
	void ClientRestart(Pawn* NewPawn);// 0x46103f0
	void ClientReset();// 0x1fc2d80
	void ClientRepObjRef(Object* Object);// 0x4610360
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x46101e0
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x4610090
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x460ff80
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x460fe30
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x460fd30
	void ClientPlayForceFeedback_Internal(ForceFeedbackEffect* ForceFeedbackEffect, ForceFeedbackParameters Params);// 0x460fc40
	void ClientPlayCameraShakeFromSource(class CameraShake Shake, CameraShakeSourceComponent* SourceComponent);// 0x460fb80
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x460fa20
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x460f780
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x460f660
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x460f540
	void ClientIgnoreMoveInput(bool bIgnore);// 0x460f4b0
	void ClientIgnoreLookInput(bool bIgnore);// 0x460f420
	void ClientGotoState(FName NewState);// 0x460f390
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x460f2c0
	void ClientForceGarbageCollection();// 0x1fc3620
	void ClientFlushLevelStreaming();// 0x460f2a0
	void ClientEndOnlineSession();// 0xd94a40
	void ClientEnableNetworkVoice(bool bEnable);// 0x460f210
	void ClientCommitMapChange();// 0x1fc3500
	void ClientClearCameraLensEffects();// 0x1fc2be0
	void ClientCapBandwidth(int Cap);// 0x460f180
	void ClientCancelPendingMapChange();// 0x1fc3320
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x460f060
	void ClearAudioListenerOverride();// 0x460f040
	void ClearAudioListenerAttenuationOverride();// 0x460f020
	bool CanRestartPlayer();// 0x2725690
	void Camera(FName NewMode);// 0x460ef90
	void AddYawInput(float Val);// 0x460ef10
	void AddRollInput(float Val);// 0x460ee90
	void AddPitchInput(float Val);// 0x460ee10
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x460ed80

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 1]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 1]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 1]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x220, Size: 1]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	int CurrentTargetIndex;//[Offset: 0x22c, Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x230, Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x230, Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x230, Size: 1]
	Actor*[] PostRenderedActors;//[Offset: 0x238, Size: 1]
	FName[] DebugDisplay;//[Offset: 0x250, Size: 1]
	FName[] ToggledDebugCategories;//[Offset: 0x260, Size: 1]
	Canvas* Canvas;//[Offset: 0x270, Size: 1]
	Canvas* DebugCanvas;//[Offset: 0x278, Size: 1]
	DebugTextInfo[] DebugTextList;//[Offset: 0x280, Size: 1]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x290, Size: 1]
	Actor* ShowDebugTargetActor;//[Offset: 0x298, Size: 1]
	void ShowHUD();// 0x1fa35a0
	void ShowDebugToggleSubCategory(FName Category);// 0x456a540
	void ShowDebugForReticleTargetToggle(class Actor DesiredClass);// 0x456a4c0
	void ShowDebug(FName DebugType);// 0x2851860
	void RemoveDebugText(Actor* SrcActor, bool bLeaveDurationText);// 0x456a2a0
	void RemoveAllDebugStrings();// 0x456a280
	void ReceiveHitBoxRelease(const FName BoxName);// 0x2d74e00
	void ReceiveHitBoxEndCursorOver(const FName BoxName);// 0x2d74e00
	void ReceiveHitBoxClick(const FName BoxName);// 0x2d74e00
	void ReceiveHitBoxBeginCursorOver(const FName BoxName);// 0x2d74e00
	void ReceiveDrawHUD(int SizeX, int SizeY);// 0x2d74e00
	Vector Project(Vector Location);// 0x4569e00
	void PreviousDebugTarget();// 0x1fa34b0
	void NextDebugTarget();// 0xd138f0
	void GetTextSize(FString Text, out float OutWidth, out float OutHeight, Font* Font, float Scale);// 0x4569320
	PlayerController* GetOwningPlayerController();// 0xe870c0
	Pawn* GetOwningPawn();// 0x45692f0
	void GetActorsInSelectionRectangle(class Actor ClassFilter, out const Vector2D FirstPoint, out const Vector2D SecondPoint, out Actor*[] OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);// 0x45690e0
	void DrawTextureSimple(Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);// 0x4568f50
	void DrawTexture(Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, LinearColor TintColor, byte BlendMode, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x4568b30
	void DrawText(FString Text, LinearColor TextColor, float ScreenX, float ScreenY, Font* Font, float Scale, bool bScalePosition);// 0x4568910
	void DrawRect(LinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);// 0x4568760
	void DrawMaterialTriangle(MaterialInterface* Material, Vector2D V0_Pos, Vector2D V1_Pos, Vector2D V2_Pos, Vector2D V0_UV, Vector2D V1_UV, Vector2D V2_UV, LinearColor V0_Color, LinearColor V1_Color, LinearColor V2_Color);// 0x45684a0
	void DrawMaterialSimple(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);// 0x45682a0
	void DrawMaterial(MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, Vector2D RotPivot);// 0x4567f10
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, LinearColor LineColor, float LineThickness);// 0x4567d30
	void Deproject(float ScreenX, float ScreenY, out Vector WorldPosition, out Vector WorldDirection);// 0x4567bc0
	void AddHitBox(Vector2D Position, Vector2D Size, FName InName, bool bConsumesInput, int Priority);// 0x45678b0
	void AddDebugText(FString DebugText, Actor* SrcActor, float Duration, Vector Offset, Vector DesiredOffset, Color TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, Font* InFont, float FontScale, bool bDrawShadow);// 0x4567530

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 1]
	float OrgY;//[Offset: 0x2c, Size: 1]
	float ClipX;//[Offset: 0x30, Size: 1]
	float ClipY;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	int SizeX;//[Offset: 0x40, Size: 1]
	int SizeY;//[Offset: 0x44, Size: 1]
	Plane ColorModulate;//[Offset: 0x50, Size: 1]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 1]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 1]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 1]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4531a90
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x45319b0
	Vector K2_Project(Vector WorldLocation);// 0x4531900
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x45317e0
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4531560
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x45311e0
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x4531050
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x4530f30
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint);// 0x4530d10
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x4530bc0
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x4530a70
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x4530630
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x4530510

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 1]
	Vector2D V0_UV;//[Offset: 0x8, Size: 1]
	LinearColor V0_Color;//[Offset: 0x10, Size: 1]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 1]
	Vector2D V1_UV;//[Offset: 0x28, Size: 1]
	LinearColor V1_Color;//[Offset: 0x30, Size: 1]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 1]
	Vector2D V2_UV;//[Offset: 0x48, Size: 1]
	LinearColor V2_Color;//[Offset: 0x50, Size: 1]

--------------------------------
Class: DebugTextInfo
	Actor* SrcActor;//[Offset: 0x0, Size: 1]
	Vector SrcActorOffset;//[Offset: 0x8, Size: 1]
	Vector SrcActorDesiredOffset;//[Offset: 0x14, Size: 1]
	FString DebugText;//[Offset: 0x20, Size: 1]
	float TimeRemaining;//[Offset: 0x30, Size: 1]
	float Duration;//[Offset: 0x34, Size: 1]
	Color TextColor;//[Offset: 0x38, Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 1]
	bool bKeepAttachedToActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 1]
	bool bDrawShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 1]
	Vector OrigActorLocation;//[Offset: 0x40, Size: 1]
	Font* Font;//[Offset: 0x50, Size: 1]
	float FontScale;//[Offset: 0x58, Size: 1]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x220, Size: 1]
	SceneComponent* TransformComponent;//[Offset: 0x228, Size: 1]
	float DefaultFOV;//[Offset: 0x238, Size: 1]
	float DefaultOrthoWidth;//[Offset: 0x240, Size: 1]
	float DefaultAspectRatio;//[Offset: 0x248, Size: 1]
	CameraCacheEntry CameraCache;//[Offset: 0x290, Size: 1]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x880, Size: 1]
	TViewTarget ViewTarget;//[Offset: 0xe70, Size: 1]
	TViewTarget PendingViewTarget;//[Offset: 0x1470, Size: 1]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1aa0, Size: 1]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2090, Size: 1]
	CameraModifier*[] ModifierList;//[Offset: 0x2680, Size: 1]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x2690, Size: 1]
	float FreeCamDistance;//[Offset: 0x26a0, Size: 1]
	Vector FreeCamOffset;//[Offset: 0x26a4, Size: 1]
	Vector ViewTargetOffset;//[Offset: 0x26b0, Size: 1]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x26d0, Size: 1]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x26e0, Size: 1]
	CameraAnimInst* AnimInstPool;//[Offset: 0x26e8, Size: 8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2728, Size: 1]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2748, Size: 1]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x2758, Size: 1]
	CameraActor* AnimCameraActor;//[Offset: 0x2768, Size: 1]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2770, Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2770, Size: 1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2770, Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2770, Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2771, Size: 1]
	bool bForceLocalSpaceForInterpolatedRendering;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2771, Size: 1]
	float ViewPitchMin;//[Offset: 0x2774, Size: 1]
	float ViewPitchMax;//[Offset: 0x2778, Size: 1]
	float ViewYawMin;//[Offset: 0x277c, Size: 1]
	float ViewYawMax;//[Offset: 0x2780, Size: 1]
	float ViewRollMin;//[Offset: 0x2784, Size: 1]
	float ViewRollMax;//[Offset: 0x2788, Size: 1]
	float ServerUpdateCameraTimeout;//[Offset: 0x2790, Size: 1]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x1fc67e0
	void StopCameraFade();// 0x1fdc7f0
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x460b770
	void StopAllInstancesOfCameraShakeFromSource(CameraShakeSourceComponent* SourceComponent, bool bImmediately);// 0x460b6a0
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x460b5d0
	void StopAllInstancesOfCameraAnim(CameraAnim* Anim, bool bImmediate);// 0x460b500
	void StopAllCameraShakes(bool bImmediately);// 0x460b470
	void StopAllCameraAnims(bool bImmediate);// 0x460b3e0
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x460b210
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x460b0f0
	void SetGameCameraCutThisFrame();// 0x460b0d0
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x460b030
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x460afa0
	CameraShake* PlayCameraShakeFromSource(class CameraShake ShakeClass, CameraShakeSourceComponent* SourceComponent);// 0x460aed0
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x460ad60
	CameraAnimInst* PlayCameraAnim(CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x460aa80
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x460a900
	void OnPhotographySessionStart();// 0x1fa1640
	void OnPhotographySessionEnd();// 0x1fa1660
	void OnPhotographyMultiPartCaptureStart();// 0x1f9f700
	void OnPhotographyMultiPartCaptureEnd();// 0x1fa35a0
	PlayerController* GetOwningPlayerController();// 0x460a720
	float GetFOVAngle();// 0x4535360
	Rotator GetCameraRotation();// 0x460a460
	Vector GetCameraLocation();// 0x460a420
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x460a380
	void ClearCameraLensEffects();// 0x1fa0120
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV);// 0x2d74e00
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x455a360
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x460a2e0

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float OscillationDuration;//[Offset: 0x2c, Size: 1]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 1]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 1]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 1]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 1]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 1]
	float AnimPlayRate;//[Offset: 0x8c, Size: 1]
	float AnimScale;//[Offset: 0x90, Size: 1]
	float AnimBlendInTime;//[Offset: 0x94, Size: 1]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 1]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 1]
	CameraAnim* Anim;//[Offset: 0xa0, Size: 1]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xc0, Size: 1]
	float ShakeScale;//[Offset: 0x148, Size: 1]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 1]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 1]
	void ReceiveStopShake(bool bImmediately);// 0x2d74e00
	void ReceivePlayShake(float Scale);// 0x2d74e00
	bool ReceiveIsFinished();// 0x20c6240
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x2d74e00

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	Rotator Rotation;//[Offset: 0xc, Size: 1]
	float FOV;//[Offset: 0x18, Size: 1]
	float DesiredFOV;//[Offset: 0x1c, Size: 1]
	float OrthoWidth;//[Offset: 0x20, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 1]
	float AspectRatio;//[Offset: 0x2c, Size: 1]
	float MaxAspectRatio;//[Offset: 0x30, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34, Size: 1]
	byte ProjectionMode;//[Offset: 0x38, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 1]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x590, Size: 1]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureBiasCurve;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureMeterMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 1]
	bool bOverride_AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 1]
	bool bOverride_AmbientOcclusionTemporalBlendWeight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 1]
	bool bOverride_HirezAmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 1]
	bool bOverride_HirezAmbientOcclusionRejectionFalloff;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 1]
	bool bOverride_HirezAmbientOcclusionAccentuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 1]
	bool bOverride_RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverride_RayTracingAOSamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18, Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurTargetFPS;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x18, Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18, Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19, Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19, Size: 1]
	bool bOverride_ReflectionsType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxRoughness;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsMaxBounces;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsSamplesPerPixel;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsShadows;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c, Size: 1]
	bool bOverride_TranslucencyType;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyMaxRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c, Size: 1]
	bool bOverride_RayTracingTranslucencyRefractionRays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencySamplesPerPixel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGIMaxBounces;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d, Size: 1]
	bool bOverride_RayTracingGISamplesPerPixel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingMaxBounces;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d, Size: 1]
	bool bOverride_PathTracingSamplesPerPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1e, Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 1]
	byte BloomMethod;//[Offset: 0x21, Size: 1]
	byte AutoExposureMethod;//[Offset: 0x22, Size: 1]
	float WhiteTemp;//[Offset: 0x24, Size: 1]
	float WhiteTint;//[Offset: 0x28, Size: 1]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 1]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 1]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 1]
	Vector4 ColorGain;//[Offset: 0x60, Size: 1]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 1]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 1]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 1]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 1]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 1]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 1]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 1]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 1]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 1]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 1]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 1]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 1]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 1]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 1]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 1]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 1]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 1]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 1]
	float BlueCorrection;//[Offset: 0x178, Size: 1]
	float ExpandGamut;//[Offset: 0x17c, Size: 1]
	float FilmSlope;//[Offset: 0x180, Size: 1]
	float FilmToe;//[Offset: 0x184, Size: 1]
	float FilmShoulder;//[Offset: 0x188, Size: 1]
	float FilmBlackClip;//[Offset: 0x18c, Size: 1]
	float FilmWhiteClip;//[Offset: 0x190, Size: 1]
	LinearColor FilmWhitePoint;//[Offset: 0x194, Size: 1]
	LinearColor FilmShadowTint;//[Offset: 0x1a4, Size: 1]
	float FilmShadowTintBlend;//[Offset: 0x1b4, Size: 1]
	float FilmShadowTintAmount;//[Offset: 0x1b8, Size: 1]
	float FilmSaturation;//[Offset: 0x1bc, Size: 1]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c0, Size: 1]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d0, Size: 1]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e0, Size: 1]
	float FilmContrast;//[Offset: 0x1f0, Size: 1]
	float FilmToeAmount;//[Offset: 0x1f4, Size: 1]
	float FilmHealAmount;//[Offset: 0x1f8, Size: 1]
	float FilmDynamicRange;//[Offset: 0x1fc, Size: 1]
	LinearColor SceneColorTint;//[Offset: 0x200, Size: 1]
	float SceneFringeIntensity;//[Offset: 0x210, Size: 1]
	float ChromaticAberrationStartOffset;//[Offset: 0x214, Size: 1]
	float BloomIntensity;//[Offset: 0x218, Size: 1]
	float BloomThreshold;//[Offset: 0x21c, Size: 1]
	float BloomSizeScale;//[Offset: 0x220, Size: 1]
	float Bloom1Size;//[Offset: 0x224, Size: 1]
	float Bloom2Size;//[Offset: 0x228, Size: 1]
	float Bloom3Size;//[Offset: 0x22c, Size: 1]
	float Bloom4Size;//[Offset: 0x230, Size: 1]
	float Bloom5Size;//[Offset: 0x234, Size: 1]
	float Bloom6Size;//[Offset: 0x238, Size: 1]
	LinearColor Bloom1Tint;//[Offset: 0x23c, Size: 1]
	LinearColor Bloom2Tint;//[Offset: 0x24c, Size: 1]
	LinearColor Bloom3Tint;//[Offset: 0x25c, Size: 1]
	LinearColor Bloom4Tint;//[Offset: 0x26c, Size: 1]
	LinearColor Bloom5Tint;//[Offset: 0x27c, Size: 1]
	LinearColor Bloom6Tint;//[Offset: 0x28c, Size: 1]
	float BloomConvolutionSize;//[Offset: 0x29c, Size: 1]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2a0, Size: 1]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2a8, Size: 1]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2b0, Size: 1]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b4, Size: 1]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b8, Size: 1]
	float BloomConvolutionBufferScale;//[Offset: 0x2bc, Size: 1]
	Texture* BloomDirtMask;//[Offset: 0x2c0, Size: 1]
	float BloomDirtMaskIntensity;//[Offset: 0x2c8, Size: 1]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2cc, Size: 1]
	LinearColor AmbientCubemapTint;//[Offset: 0x2dc, Size: 1]
	float AmbientCubemapIntensity;//[Offset: 0x2ec, Size: 1]
	TextureCube* AmbientCubemap;//[Offset: 0x2f0, Size: 1]
	float CameraShutterSpeed;//[Offset: 0x2f8, Size: 1]
	float CameraISO;//[Offset: 0x2fc, Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x300, Size: 1]
	float DepthOfFieldMinFstop;//[Offset: 0x304, Size: 1]
	int DepthOfFieldBladeCount;//[Offset: 0x308, Size: 1]
	float AutoExposureBias;//[Offset: 0x30c, Size: 1]
	float AutoExposureBiasBackup;//[Offset: 0x310, Size: 1]
	bool bOverride_AutoExposureBiasBackup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x314, Size: 1]
	bool AutoExposureApplyPhysicalCameraExposure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]
	CurveFloat* AutoExposureBiasCurve;//[Offset: 0x320, Size: 1]
	Texture* AutoExposureMeterMask;//[Offset: 0x328, Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x330, Size: 1]
	float AutoExposureHighPercent;//[Offset: 0x334, Size: 1]
	float AutoExposureMinBrightness;//[Offset: 0x338, Size: 1]
	float AutoExposureMaxBrightness;//[Offset: 0x33c, Size: 1]
	float AutoExposureSpeedUp;//[Offset: 0x340, Size: 1]
	float AutoExposureSpeedDown;//[Offset: 0x344, Size: 1]
	float HistogramLogMin;//[Offset: 0x348, Size: 1]
	float HistogramLogMax;//[Offset: 0x34c, Size: 1]
	float AutoExposureCalibrationConstant;//[Offset: 0x350, Size: 1]
	float LensFlareIntensity;//[Offset: 0x354, Size: 1]
	LinearColor LensFlareTint;//[Offset: 0x358, Size: 1]
	float LensFlareBokehSize;//[Offset: 0x368, Size: 1]
	float LensFlareThreshold;//[Offset: 0x36c, Size: 1]
	Texture* LensFlareBokehShape;//[Offset: 0x370, Size: 1]
	LinearColor LensFlareTints;//[Offset: 0x378, Size: 8]
	float VignetteIntensity;//[Offset: 0x3f8, Size: 1]
	float GrainJitter;//[Offset: 0x3fc, Size: 1]
	float GrainIntensity;//[Offset: 0x400, Size: 1]
	float AmbientOcclusionIntensity;//[Offset: 0x404, Size: 1]
	float AmbientOcclusionStaticFraction;//[Offset: 0x408, Size: 1]
	float AmbientOcclusionRadius;//[Offset: 0x40c, Size: 1]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x410, Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x414, Size: 1]
	float AmbientOcclusionFadeRadius;//[Offset: 0x418, Size: 1]
	float AmbientOcclusionDistance;//[Offset: 0x41c, Size: 1]
	float AmbientOcclusionPower;//[Offset: 0x420, Size: 1]
	float AmbientOcclusionBias;//[Offset: 0x424, Size: 1]
	float AmbientOcclusionQuality;//[Offset: 0x428, Size: 1]
	float AmbientOcclusionMipBlend;//[Offset: 0x42c, Size: 1]
	float AmbientOcclusionMipScale;//[Offset: 0x430, Size: 1]
	float AmbientOcclusionMipThreshold;//[Offset: 0x434, Size: 1]
	float AmbientOcclusionTemporalBlendWeight;//[Offset: 0x438, Size: 1]
	float HirezAmbientOcclusionIntensity;//[Offset: 0x43c, Size: 1]
	float HirezAmbientOcclusionRejectionFalloff;//[Offset: 0x440, Size: 1]
	float HirezAmbientOcclusionAccentuation;//[Offset: 0x444, Size: 1]
	bool RayTracingAO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 1]
	int RayTracingAOSamplesPerPixel;//[Offset: 0x44c, Size: 1]
	LinearColor IndirectLightingColor;//[Offset: 0x450, Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x460, Size: 1]
	enum RayTracingGIType;//[Offset: 0x464, Size: 1]
	int RayTracingGIMaxBounces;//[Offset: 0x468, Size: 1]
	int RayTracingGISamplesPerPixel;//[Offset: 0x46c, Size: 1]
	float ColorGradingIntensity;//[Offset: 0x470, Size: 1]
	Texture* ColorGradingLUT;//[Offset: 0x478, Size: 1]
	float DepthOfFieldSensorWidth;//[Offset: 0x480, Size: 1]
	float DepthOfFieldFocalDistance;//[Offset: 0x484, Size: 1]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x488, Size: 1]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x48c, Size: 1]
	float DepthOfFieldFocalRegion;//[Offset: 0x490, Size: 1]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x494, Size: 1]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x498, Size: 1]
	float DepthOfFieldScale;//[Offset: 0x49c, Size: 1]
	float DepthOfFieldNearBlurSize;//[Offset: 0x4a0, Size: 1]
	float DepthOfFieldFarBlurSize;//[Offset: 0x4a4, Size: 1]
	float DepthOfFieldOcclusion;//[Offset: 0x4a8, Size: 1]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4ac, Size: 1]
	float DepthOfFieldVignetteSize;//[Offset: 0x4b0, Size: 1]
	float MotionBlurAmount;//[Offset: 0x4b4, Size: 1]
	float MotionBlurMax;//[Offset: 0x4b8, Size: 1]
	int MotionBlurTargetFPS;//[Offset: 0x4bc, Size: 1]
	float MotionBlurPerObjectSize;//[Offset: 0x4c0, Size: 1]
	float LPVIntensity;//[Offset: 0x4c4, Size: 1]
	float LPVVplInjectionBias;//[Offset: 0x4c8, Size: 1]
	float LPVSize;//[Offset: 0x4cc, Size: 1]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4d0, Size: 1]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4d4, Size: 1]
	float LPVGeometryVolumeBias;//[Offset: 0x4d8, Size: 1]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4dc, Size: 1]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4e0, Size: 1]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4e4, Size: 1]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e8, Size: 1]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4ec, Size: 1]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4f0, Size: 1]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4f4, Size: 1]
	enum ReflectionsType;//[Offset: 0x4f8, Size: 1]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4fc, Size: 1]
	float ScreenSpaceReflectionQuality;//[Offset: 0x500, Size: 1]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x504, Size: 1]
	float RayTracingReflectionsMaxRoughness;//[Offset: 0x508, Size: 1]
	int RayTracingReflectionsMaxBounces;//[Offset: 0x50c, Size: 1]
	int RayTracingReflectionsSamplesPerPixel;//[Offset: 0x510, Size: 1]
	enum RayTracingReflectionsShadows;//[Offset: 0x514, Size: 1]
	bool RayTracingReflectionsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x515, Size: 1]
	enum TranslucencyType;//[Offset: 0x516, Size: 1]
	float RayTracingTranslucencyMaxRoughness;//[Offset: 0x518, Size: 1]
	int RayTracingTranslucencyRefractionRays;//[Offset: 0x51c, Size: 1]
	int RayTracingTranslucencySamplesPerPixel;//[Offset: 0x520, Size: 1]
	enum RayTracingTranslucencyShadows;//[Offset: 0x524, Size: 1]
	bool RayTracingTranslucencyRefraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x525, Size: 1]
	int PathTracingMaxBounces;//[Offset: 0x528, Size: 1]
	int PathTracingSamplesPerPixel;//[Offset: 0x52c, Size: 1]
	float LPVFadeRange;//[Offset: 0x530, Size: 1]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x534, Size: 1]
	float ScreenPercentage;//[Offset: 0x538, Size: 1]
	WeightedBlendables WeightedBlendables;//[Offset: 0x540, Size: 1]

--------------------------------
Class: TextureCube.Texture.StreamableRenderAsset.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 1]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 1]
	FOscillator Yaw;//[Offset: 0xc, Size: 1]
	FOscillator Roll;//[Offset: 0x18, Size: 1]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 1]
	float Frequency;//[Offset: 0x4, Size: 1]
	byte InitialOffset;//[Offset: 0x8, Size: 1]
	enum Waveform;//[Offset: 0x9, Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 1]
	FOscillator Y;//[Offset: 0xc, Size: 1]
	FOscillator Z;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 1]
	float AnimLength;//[Offset: 0x30, Size: 1]
	Box BoundingBox;//[Offset: 0x34, Size: 1]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 1]
	float BaseFOV;//[Offset: 0x54, Size: 1]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 1]
	float BasePostProcessBlendWeight;//[Offset: 0x5b0, Size: 1]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 1]
	FName GroupName;//[Offset: 0x40, Size: 1]
	Color GroupColor;//[Offset: 0x48, Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 1]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 1]
	byte ActiveCondition;//[Offset: 0x50, Size: 1]
	FString TrackTitle;//[Offset: 0x58, Size: 1]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 1]

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 1]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 1]
	float PlayRate;//[Offset: 0x50, Size: 1]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 1]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 1]
	byte PlaySpace;//[Offset: 0x78, Size: 1]
	void Stop(bool bImmediate);// 0x452b410
	void SetScale(float NewDuration);// 0x452b300
	void SetDuration(float NewDuration);// 0x452af80

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 1]
	Actor* GroupActor;//[Offset: 0x30, Size: 1]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 1]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 1]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 1]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 1]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 1]
	float LinCurveTension;//[Offset: 0xb8, Size: 1]
	float AngCurveTension;//[Offset: 0xbc, Size: 1]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 1]
	byte RotMode;//[Offset: 0xc4, Size: 1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 1]
	Vector OutVal;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	byte InterpMode;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 1]
	Rotator ResetRotation;//[Offset: 0x34, Size: 1]

--------------------------------
Class: CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	enum Attenuation;//[Offset: 0x208, Size: 1]
	float InnerAttenuationRadius;//[Offset: 0x20c, Size: 1]
	float OuterAttenuationRadius;//[Offset: 0x210, Size: 1]
	class CameraShake* CameraShake;//[Offset: 0x218, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	void StopAllCameraShakes(bool bImmediately);// 0x4533700
	void PlayCameraShake(class CameraShake InCameraShake);// 0x4531fe0
	void Play();// 0x4531eb0
	float GetAttenuationFactor(out const Vector Location);// 0x452fcc0

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	byte Priority;//[Offset: 0x2c, Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 1]
	float AlphaInTime;//[Offset: 0x38, Size: 1]
	float AlphaOutTime;//[Offset: 0x3c, Size: 1]
	float Alpha;//[Offset: 0x40, Size: 1]
	bool IsDisabled();// 0xe96ee0
	Actor* GetViewTarget();// 0x3c2b3a0
	void EnableModifier();// 0x452ab80
	void DisableModifier(bool bImmediate);// 0x452aaf0
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x2d74e00
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x2d74e00

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x270, Size: 1]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x278, Size: 1]
	PlayerCameraManager* BaseCamera;//[Offset: 0x280, Size: 1]
	Transform RelativeTransform;//[Offset: 0x290, Size: 1]
	float BaseFOV;//[Offset: 0x2c0, Size: 1]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4, Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c4, Size: 1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x2c8, Size: 1]
	float DistFromCamera;//[Offset: 0x2d8, Size: 1]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x220, Size: 1]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x228, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	void ToggleActive();// 0x45480c0
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4547ff0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x281b0b0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4547f30
	void SetFloatParameter(FName ParameterName, float Param);// 0x4547e60
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4547d90
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4547cd0
	void OnRep_bCurrentlyActive();// 0x1f9f700
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x28518f0
	bool IsActive();// 0x4547ca0
	void Deactivate();// 0x4547c80
	void Activate();// 0x4547c60

--------------------------------
Class: ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x430, Size: 1]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x438, Size: 1]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x448, Size: 1]
	bool bRenderAfterDLSS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x459, Size: 1]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x459, Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x459, Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x459, Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x459, Size: 1]
	bool bAutoAttachWeldSimulatedBodies;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x459, Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x45a, Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x45a, Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x45a, Size: 1]
	byte LODMethod;//[Offset: 0x465, Size: 1]
	enum RequiredSignificance;//[Offset: 0x466, Size: 1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x468, Size: 1]
	MulticastInlineDelegateProperty OnParticleSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleBurst;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollide;//[Size: 1]
	MulticastInlineDelegateProperty OnParticleCollidePacked;//[Size: 1]
	ParticleChannelContainer m_ParticleChannels;//[Offset: 0x4c8, Size: 1]
	bool bOldPositionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc, Size: 1]
	Vector OldPosition;//[Offset: 0x4d0, Size: 1]
	Vector PartSysVelocity;//[Offset: 0x4dc, Size: 1]
	float WarmupTime;//[Offset: 0x4e8, Size: 1]
	float WarmupTickRate;//[Offset: 0x4ec, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0x4f4, Size: 1]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x4fc, Size: 1]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x520, Size: 1]
	float CustomTimeDilation;//[Offset: 0x538, Size: 1]
	SceneComponent* AutoAttachParent;//[Offset: 0x590, Size: 1]
	FName AutoAttachSocketName;//[Offset: 0x598, Size: 1]
	enum AutoAttachLocationRule;//[Offset: 0x5a0, Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x5a1, Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x5a2, Size: 1]
	MulticastInlineDelegateProperty OnSystemFinished;//[Size: 1]
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x46010e0
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4601060
	void SetParticleChannels(out const ParticleChannelContainer Channels);// 0x4600fc0
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4600f00
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x4600ab0
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x46009b0
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x46008a0
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x4600790
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x4600690
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x4600580
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x46004b0
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x4600210
	int GetNumActiveParticles();// 0x4600110
	MaterialInterface* GetNamedMaterial(FName InName);// 0x4600070
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x45fff30
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x45ffe10
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x45ffd00
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x45ffbf0
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x45ffad0
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x45ff9c0
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x45ff8e0
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x45ff730
	void EndTrails();// 0x45ff710
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x45ff640
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x45ff460

--------------------------------
Class: FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x46012c0
	void SetUseAutoManageAttachment(bool bAutoManage);// 0x4601230
	void SetFloatParameter(FName ParameterName, float Param);// 0x4600e30
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x4600d60
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4600c90
	void SetBoolParameter(FName ParameterName, bool Param);// 0x4600bc0
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4600330
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4600140
	void ReleaseToPool();// 0x1fc2bc0
	FXSystemAsset* GetFXSystemAsset();// 0x4600040

--------------------------------
Class: ParticleSystem.FXSystemAsset.Object
	float UpdateTime_FPS;//[Offset: 0x30, Size: 1]
	float UpdateTime_Delta;//[Offset: 0x34, Size: 1]
	float WarmupTime;//[Offset: 0x38, Size: 1]
	float WarmupTickRate;//[Offset: 0x3c, Size: 1]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 1]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x60, Size: 1]
	float MacroUVRadius;//[Offset: 0x64, Size: 1]
	float[] LODDistances;//[Offset: 0x68, Size: 1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x78, Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x88, Size: 1]
	float SecondsBeforeInactive;//[Offset: 0xa4, Size: 1]
	float Delay;//[Offset: 0xa8, Size: 1]
	float DelayLow;//[Offset: 0xac, Size: 1]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bAllowManagedTicking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SystemUpdateMode;//[Offset: 0xb2, Size: 1]
	byte LODMethod;//[Offset: 0xb3, Size: 1]
	enum InsignificantReaction;//[Offset: 0xb4, Size: 1]
	byte OcclusionBoundsMethod;//[Offset: 0xb5, Size: 1]
	enum MaxSignificanceLevel;//[Offset: 0xb7, Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xb8, Size: 1]
	float InsignificanceDelay;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xcc, Size: 1]
	LODSoloTrack[] SoloTracking;//[Offset: 0xe8, Size: 1]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0xf8, Size: 1]
	bool ContainsEmitterType(class Object TypeData);// 0x45ff5b0

--------------------------------
Class: FXSystemAsset.Object
	uint32 MaxPoolSize;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 1]
	int SubUVDataOffset;//[Offset: 0x30, Size: 1]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x37, Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 1]
	int PeakActiveParticles;//[Offset: 0x50, Size: 1]
	int InitialAllocationCount;//[Offset: 0x54, Size: 1]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 1]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 1]
	ParticleChannelContainer m_ParticleChannels;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 1]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 1]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 1]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 1]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 1]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 1]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 1]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 1]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 1]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 1]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x38, Size: 1]
	float MaxFacingCameraBlendDistance;//[Offset: 0x3c, Size: 1]
	Vector EmitterOrigin;//[Offset: 0x40, Size: 1]
	Rotator EmitterRotation;//[Offset: 0x4c, Size: 1]
	byte ScreenAlignment;//[Offset: 0x58, Size: 1]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59, Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59, Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59, Size: 1]
	byte SortMode;//[Offset: 0x5a, Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b, Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5b, Size: 1]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5b, Size: 1]
	float EmitterDuration;//[Offset: 0x5c, Size: 1]
	RawDistributionFloat SpawnRate;//[Offset: 0x60, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0x90, Size: 1]
	float EmitterDelay;//[Offset: 0xa0, Size: 1]
	float EmitterDelayLow;//[Offset: 0xa4, Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 1]
	byte InterpolationMethod;//[Offset: 0xa9, Size: 1]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 1]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0xab, Size: 1]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 1]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 1]
	byte OpacitySourceMode;//[Offset: 0xad, Size: 1]
	byte EmitterNormalsMode;//[Offset: 0xae, Size: 1]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaf, Size: 1]
	int SubImages_Horizontal;//[Offset: 0xb0, Size: 1]
	int SubImages_Vertical;//[Offset: 0xb4, Size: 1]
	float RandomImageTime;//[Offset: 0xb8, Size: 1]
	int RandomImageChanges;//[Offset: 0xbc, Size: 1]
	Vector MacroUVPosition;//[Offset: 0xc0, Size: 1]
	float MacroUVRadius;//[Offset: 0xcc, Size: 1]
	enum UVFlippingMode;//[Offset: 0xd0, Size: 1]
	byte BoundingMode;//[Offset: 0xd1, Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd2, Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xd4, Size: 1]
	float AlphaThreshold;//[Offset: 0xe0, Size: 1]
	int EmitterLoops;//[Offset: 0xe4, Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xe8, Size: 1]
	int MaxDrawCount;//[Offset: 0xf0, Size: 1]
	float EmitterDurationLow;//[Offset: 0xf4, Size: 1]
	Vector NormalsCylinderDirection;//[Offset: 0xf8, Size: 1]
	FName[] NamedMaterialOverrides;//[Offset: 0x108, Size: 1]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 1]
	byte LODValidity;//[Offset: 0x2a, Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	DistributionFloat* Distribution;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionLookupTable
	float TimeScale;//[Offset: 0x0, Size: 1]
	float TimeBias;//[Offset: 0x4, Size: 1]
	float[] Values;//[Offset: 0x8, Size: 1]
	byte Op;//[Offset: 0x18, Size: 1]
	byte EntryCount;//[Offset: 0x19, Size: 1]
	byte EntryStride;//[Offset: 0x1a, Size: 1]
	byte SubEntryStride;//[Offset: 0x1b, Size: 1]
	byte LockFlag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 1]
	int CountLow;//[Offset: 0x4, Size: 1]
	float Time;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x38, Size: 1]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 1]
	byte ParticleBurstMethod;//[Offset: 0x98, Size: 1]
	ParticleBurst[] BurstList;//[Offset: 0xa0, Size: 1]
	RawDistributionFloat BurstScale;//[Offset: 0xb0, Size: 1]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 1]
	int Frequency;//[Offset: 0x4, Size: 1]
	int ParticleFrequency;//[Offset: 0x8, Size: 1]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 1]
	FName CustomName;//[Offset: 0x10, Size: 1]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 1]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x38, Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x40, Size: 1]
	OrbitOptions OffsetOptions;//[Offset: 0x88, Size: 1]
	RawDistributionVector RotationAmount;//[Offset: 0x90, Size: 1]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 1]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 1]
	OrbitOptions RotationRateOptions;//[Offset: 0x128, Size: 1]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x20, Size: 1]
	float MaxValue;//[Offset: 0x24, Size: 1]
	Vector MinValueVec;//[Offset: 0x28, Size: 1]
	Vector MaxValueVec;//[Offset: 0x34, Size: 1]
	DistributionVector* Distribution;//[Offset: 0x40, Size: 1]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x30, Size: 1]
	FName EventName;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ParticleChannelContainer
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool Friendly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool Enemy;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool TaskForce1;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool TaskForce2;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool VerticalTargeter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool LocalOwner;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool NotLocalOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool CustomFilter1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]
	bool CustomFilter2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 1]
	bool CustomFilter3;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 1]
	bool CustomFilter4;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 1]
	bool CustomFilter5;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 1]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 1]
	int ActiveTab;//[Offset: 0x38, Size: 1]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 1]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 1]
	float ViewStartInput;//[Offset: 0x20, Size: 1]
	float ViewEndInput;//[Offset: 0x24, Size: 1]
	float ViewStartOutput;//[Offset: 0x28, Size: 1]
	float ViewEndOutput;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 1]
	Color CurveColor;//[Offset: 0x8, Size: 1]
	FString CurveName;//[Offset: 0x10, Size: 1]
	int bHideCurve;//[Offset: 0x20, Size: 1]
	int bColorCurve;//[Offset: 0x24, Size: 1]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 1]
	int bClamp;//[Offset: 0x2c, Size: 1]
	float ClampLow;//[Offset: 0x30, Size: 1]
	float ClampHigh;//[Offset: 0x34, Size: 1]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 1]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 1]
	MaterialInterface* Material;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 1]
	byte ParamType;//[Offset: 0x8, Size: 1]
	float Scalar;//[Offset: 0xc, Size: 1]
	float Scalar_Low;//[Offset: 0x10, Size: 1]
	Vector Vector;//[Offset: 0x14, Size: 1]
	Vector Vector_Low;//[Offset: 0x20, Size: 1]
	Color Color;//[Offset: 0x2c, Size: 1]
	Actor* Actor;//[Offset: 0x30, Size: 1]
	MaterialInterface* Material;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 1]

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 1]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 1]
	PlayerState* PlayerState;//[Offset: 0x5f0, Size: 1]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveCameraShakeInfo[] ActiveShakes;//[Offset: 0x48, Size: 1]
	<class CameraShake,PooledCameraShakes> ExpiredPooledShakesMap;//[Offset: 0x58, Size: 1]
	float SplitScreenShakeScale;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: ActiveCameraShakeInfo
	CameraShake* ShakeInstance;//[Offset: 0x0, Size: 1]
	CameraShakeSourceComponent* ShakeSource;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PooledCameraShakes
	CameraShake*[] PooledShakes;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x220, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x228, Size: 1]
	SceneComponent* SceneComponent;//[Offset: 0x230, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]
	float AspectRatio;//[Offset: 0x244, Size: 1]
	float FOVAngle;//[Offset: 0x248, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x24c, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x250, Size: 1]
	int GetAutoActivatePlayerIndex();// 0x452aba0

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x208, Size: 1]
	float OrthoWidth;//[Offset: 0x20c, Size: 1]
	float OrthoNearClipPlane;//[Offset: 0x210, Size: 1]
	float OrthoFarClipPlane;//[Offset: 0x214, Size: 1]
	float AspectRatio;//[Offset: 0x218, Size: 1]
	float MaxAspectRatio;//[Offset: 0x21c, Size: 1]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x220, Size: 1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x220, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x220, Size: 1]
	byte ProjectionMode;//[Offset: 0x221, Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x260, Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x290, Size: 1]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x452b380
	void SetProjectionMode(byte InProjectionMode);// 0x452b280
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x452b200
	void SetOrthoWidth(float InOrthoWidth);// 0x452b180
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x452b100
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x452b080
	void SetFieldOfView(float InFieldOfView);// 0x452b000
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x452aef0
	void SetAspectRatio(float InAspectRatio);// 0x452ae70
	void RemoveBlendable(interface classNone InBlendableObject);// 0x452ad40
	void OnCameraMeshHiddenChanged();// 0xd94a20
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x452abd0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x452a9a0

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 1]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 1]
	void Walk();// 0x2729950
	void ViewSelf();// 0x2a1e000
	void ViewPlayer(FString S);// 0x4539c30
	void ViewClass(class Actor DesiredClass);// 0x4539ba0
	void ViewActor(FName ActorName);// 0x4539b10
	void UpdateSafeArea();// 0x4539af0
	void ToggleServerStatReplicatorUpdateStatNet();// 0x4539ad0
	void ToggleServerStatReplicatorClientOverwrite();// 0x4539ab0
	void ToggleDebugCamera();// 0x4539a90
	void ToggleAILogging();// 0xe82d10
	void TestCollisionDistance();// 0x4539a70
	void Teleport();// 0x28952c0
	void Summon(FString ClassName);// 0x45399d0
	void StreamLevelOut(FName PackageName);// 0x44f7210
	void StreamLevelIn(FName PackageName);// 0x4539940
	void SpawnServerStatReplicator();// 0x4539920
	void Slomo(float NewTimeDilation);// 0x45398a0
	void SetWorldOrigin();// 0x4539880
	void SetMouseSensitivityToDefault();// 0x1fa9fe0
	void ServerToggleAILogging();// 0x45397a0
	void ReceiveInitCheatManager();// 0x2d74e00
	void ReceiveEndPlay();// 0x2d74e00
	void PlayersOnly();// 0x2a1cbd0
	void OnlyLoadLevel(FName PackageName);// 0x44f7180
	void LogLoc();// 0x4539780
	void InvertMouse();// 0x1fa9fc0
	void God();// 0x4539760
	void Ghost();// 0x452ab80
	void FreezeFrame(float Delay);// 0x45396e0
	void Fly();// 0xe8d1d0
	void FlushLog();// 0x45396c0
	void EnableDebugCamera();// 0x1f73f00
	void DumpVoiceMutingState();// 0x45396a0
	void DumpPartyState();// 0x4539680
	void DumpOnlineSessionState();// 0x4539660
	void DumpChatState();// 0x4539640
	void DisableDebugCamera();// 0x1f6e710
	void DestroyTarget();// 0x28956e0
	void DestroyServerStatReplicator();// 0x4539620
	void DestroyPawns(class Pawn aClass);// 0xe8d380
	void DestroyAllPawnsExceptTarget();// 0xe8d410
	void DestroyAll(class Actor aClass);// 0x4539590
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x45394c0
	void DebugCapsuleSweepPawn();// 0x45394a0
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4539410
	void DebugCapsuleSweepClear();// 0x45393f0
	void DebugCapsuleSweepChannel(byte Channel);// 0x4539370
	void DebugCapsuleSweepCapture();// 0x4539350
	void DebugCapsuleSweep();// 0x4539330
	void DamageTarget(float DamageAmount);// 0x45392b0
	void CheatScript(FString ScriptName);// 0x45391d0
	void ChangeSize(float F);// 0x4539150
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x4538f90
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4538dc0
	void BugIt(FString ScreenShotDescription);// 0x4538d20

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588, Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x588, Size: 1]
	bool bIsOrbitingSelectedActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x588, Size: 1]
	bool bOrbitPivotUseCenter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x588, Size: 1]
	bool bEnableBufferVisualization;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x588, Size: 1]
	bool bEnableBufferVisualizationFullMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x588, Size: 1]
	bool bIsBufferVisualizationInputSetup;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x588, Size: 1]
	bool bLastDisplayEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x588, Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x590, Size: 1]
	Actor* SelectedActor;//[Offset: 0x598, Size: 1]
	PrimitiveComponent* SelectedComponent;//[Offset: 0x5a0, Size: 1]
	HitResult SelectedHitPoint;//[Offset: 0x5a8, Size: 1]
	PlayerController* OriginalControllerRef;//[Offset: 0x630, Size: 1]
	Player* OriginalPlayer;//[Offset: 0x638, Size: 1]
	float SpeedScale;//[Offset: 0x640, Size: 1]
	float InitialMaxSpeed;//[Offset: 0x644, Size: 1]
	float InitialAccel;//[Offset: 0x648, Size: 1]
	float InitialDecel;//[Offset: 0x64c, Size: 1]
	void ToggleDisplay();// 0x4541c70
	void ShowDebugSelectedInfo();// 0x2761cc0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x4541b70
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x2d74e00
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x2d74e00
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x2d74e00
	Actor* GetSelectedActor();// 0x4541670

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x430, Size: 1]
	float FrustumAngle;//[Offset: 0x434, Size: 1]
	float FrustumAspectRatio;//[Offset: 0x438, Size: 1]
	float FrustumStartDist;//[Offset: 0x43c, Size: 1]
	float FrustumEndDist;//[Offset: 0x440, Size: 1]
	Texture* Texture;//[Offset: 0x448, Size: 1]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 1]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 1]
	TouchRegionState[] TouchRegionStates;//[Offset: 0x12b0, Size: 1]
	void SetMouseSensitivity(const float Sensitivity);// 0x461a310
	void SetBind(FName BindName, FString Command);// 0x4619ca0
	void InvertAxisKey(const Key AxisKey);// 0x4619b40
	void InvertAxis(const FName AxisName);// 0x4619ac0
	void ClearSmoothing();// 0x4619630

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 1]
	FString Command;//[Offset: 0x18, Size: 1]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 1]

--------------------------------
Class: TouchRegionState

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x118, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x128, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x138, Size: 1]
	delegate ForegroundColorDelegate;//[Offset: 0x160, Size: 1]
	Margin Padding;//[Offset: 0x170, Size: 1]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x180, Size: 1]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x190, Size: 1]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1a0, Size: 1]
	WidgetTree* WidgetTree;//[Offset: 0x1b0, Size: 1]
	int Priority;//[Offset: 0x1b8, Size: 1]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bc, Size: 1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bc, Size: 1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bc, Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bc, Size: 1]
	enum TickFrequency;//[Offset: 0x1c8, Size: 1]
	InputComponent* InputComponent;//[Offset: 0x1d0, Size: 1]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1d8, Size: 1]
	void UnregisterInputComponent();// 0x288bb80
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3c291e0
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3c29100
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x3c29080
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x3c29000
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2d74e00
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x3c28f40
	void StopListeningForAllInputActions();// 0x3c28f20
	void StopAnimationsAndLatentActions();// 0x3c28f00
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x3c28e80
	void StopAllAnimations();// 0x3c28e60
	void SetZOrderInViewport(int ZOrder);// 0x3c28de0
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x3c28b10
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3c28a40
	void SetPadding(Margin InPadding);// 0x3c289b0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x3c28930
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x3c28870
	void SetInputActionPriority(int NewPriority);// 0x3c286f0
	void SetInputActionBlocking(bool bShouldBlock);// 0x3c28660
	void SetForegroundColor(SlateColor InForegroundColor);// 0x3c284f0
	void SetDesiredSizeInViewport(Vector2D Size);// 0x3c28470
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3c28370
	void SetAnchorsInViewport(Anchors Anchors);// 0x3c282e0
	void SetAlignmentInViewport(Vector2D Alignment);// 0x3c28260
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x3c281e0
	void RemoveFromViewport();// 0x3c281c0
	void RegisterInputComponent();// 0x3c281a0
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void PlaySound(SoundBase* SoundToPlay);// 0x3c28120
	UMGSequencePlayer* PlayAnimationTimeRange(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState);// 0x3c27f30
	UMGSequencePlayer* PlayAnimationReverse(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x3c27e20
	UMGSequencePlayer* PlayAnimationForward(WidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState);// 0x3c27d10
	UMGSequencePlayer* PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed, bool bRestoreState, bool bEvaluateFirstFrame);// 0x3c27b00
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x3c27a60
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2d74e00
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2d74e00
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x2d74e00
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2d74e00
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x2d74e00
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x2d74e00
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2d74e00
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2d74e00
	void OnPaint(out PaintContext Context);// 0x2d74e00
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2d74e00
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2d74e00
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x2d74e00
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2d74e00
	void OnMouseCaptureLost();// 0x2d74e00
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2d74e00
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2d74e00
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x2d74e00
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x2d74e00
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2d74e00
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x2d74e00
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x2d74e00
	void OnInitialized();// 0x2d74e00
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x2d74e00
	void OnFocusLost(FocusEvent InFocusEvent);// 0x2d74e00
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2d74e00
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2d74e00
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2d74e00
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2d74e00
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x2d74e00
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x2d74e00
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x3c279d0
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x3c27940
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x2d74e00
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x2d74e00
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x3c277c0
	bool IsPlayingAnimation();// 0x3c27790
	bool IsListeningForInputAction(FName ActionName);// 0x3c27700
	bool IsInViewport();// 0x3c27530
	bool IsInteractable();// 0x2d74e00
	bool IsAnyAnimationPlaying();// 0x3c276d0
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x3c27640
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3c275b0
	Pawn* GetOwningPlayerPawn();// 0x3c27560
	bool GetIsVisible();// 0x3c27530
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x3c27490
	Anchors GetAnchorsInViewport();// 0x3c27450
	Vector2D GetAlignmentInViewport();// 0x3c27410
	void Destruct();// 0x2d74e00
	void Construct();// 0x2d74e00
	void CancelLatentActions();// 0x3c273f0
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3c27310
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3c27230
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x3c270c0
	void AddToViewport(int ZOrder);// 0x3c27040
	bool AddToPlayerScreen(int ZOrder);// 0x3c26fb0

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 1]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 1]
	FText ToolTipText;//[Offset: 0x40, Size: 1]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 1]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 1]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 1]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 1]
	WidgetTransform RenderTransform;//[Offset: 0x90, Size: 1]
	Vector2D RenderTransformPivot;//[Offset: 0xac, Size: 1]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 1]
	SlateAccessibleWidgetData* AccessibleWidgetData;//[Offset: 0xb8, Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 1]
	bool bAllowRenderInterpolation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 1]
	bool bIssueGlobalInvalidateOnVisible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 1]
	byte DebugWidgetIndex;//[Offset: 0xc1, Size: 1]
	byte Cursor;//[Offset: 0xc2, Size: 1]
	enum Clipping;//[Offset: 0xc3, Size: 1]
	enum Visibility;//[Offset: 0xc4, Size: 1]
	float RenderOpacity;//[Offset: 0xc8, Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xd0, Size: 1]
	enum FlowDirectionPreference;//[Offset: 0xd8, Size: 1]
	PropertyBinding*[] NativeBindings;//[Offset: 0x100, Size: 1]
	void SetVisibility(enum InVisibility);// 0x3c2c990
	void SetUserFocus(PlayerController* PlayerController);// 0x3c2c770
	void SetToolTipText(out const FText InToolTipText);// 0x3c2c6a0
	void SetToolTip(Widget* Widget);// 0x3c2c620
	void SetRenderTranslation(Vector2D Translation);// 0x3c2c510
	void SetRenderTransformPivot(Vector2D Pivot);// 0x3c2c490
	void SetRenderTransformAngle(float Angle);// 0x3c2c410
	void SetRenderTransform(WidgetTransform InTransform);// 0x3c2c330
	void SetRenderShear(Vector2D Shear);// 0x3c2c2b0
	void SetRenderScale(Vector2D Scale);// 0x3c2c230
	void SetRenderOpacity(float InOpacity);// 0x3c2c1b0
	void SetNavigationRuleExplicit(enum Direction, Widget* InWidget);// 0x3c2c060
	void SetNavigationRuleCustomBoundary(enum Direction, delegate InCustomDelegate);// 0x3c2bf80
	void SetNavigationRuleCustom(enum Direction, delegate InCustomDelegate);// 0x3c2bea0
	void SetNavigationRuleBase(enum Direction, enum Rule);// 0x3c2bde0
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x3c2bcd0
	void SetKeyboardFocus();// 0x3c2bcb0
	void SetIsEnabled(bool bInIsEnabled);// 0x3c2bc20
	void SetFocus();// 0x3c2bb80
	void SetCursor(byte InCursor);// 0x3c2bb00
	void SetClipping(enum InClipping);// 0x3c2ba80
	void SetAllowRenderInterpolation(bool bInAllowInterpolation);// 0x3c2b9f0
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x3c2b930
	void ResetCursor();// 0x3c2b910
	void RemoveFromParent();// 0xe8e060
	EventReply OnReply__DelegateSignature();// 0x2d74e00
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x2d74e00
	bool IsVisible();// 0x3c2b8e0
	bool IsHovered();// 0x37e19a0
	void InvalidateLayoutAndVolatility();// 0x3c2b8c0
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x3c2b830
	bool HasUserFocus(PlayerController* PlayerController);// 0x3c2b7a0
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x3c2b6e0
	bool HasMouseCapture();// 0x3c2b6b0
	bool HasKeyboardFocus();// 0x3c2b680
	bool HasFocusedDescendants();// 0x3c2b650
	bool HasAnyUserFocus();// 0x3c2b620
	Widget* GetWidget__DelegateSignature();// 0x2d74e00
	enum GetVisibility();// 0x3c2b5f0
	Geometry GetTickSpaceGeometry();// 0x3c2b4d0
	FText GetText__DelegateSignature();// 0x2d74e00
	enum GetSlateVisibility__DelegateSignature();// 0x2d74e00
	SlateColor GetSlateColor__DelegateSignature();// 0x2d74e00
	SlateBrush GetSlateBrush__DelegateSignature();// 0x2d74e00
	float GetRenderTransformAngle();// 0x3c2b470
	float GetRenderOpacity();// 0x3c2b440
	PanelWidget* GetParent();// 0x3c2b410
	Geometry GetPaintSpaceGeometry();// 0x3c2b3d0
	PlayerController* GetOwningPlayer();// 0x3c2b3a0
	LocalPlayer* GetOwningLocalPlayer();// 0x1279960
	byte GetMouseCursor__DelegateSignature();// 0x2d74e00
	LinearColor GetLinearColor__DelegateSignature();// 0x2d74e00
	bool GetIsEnabled();// 0x3c2b370
	int GetInt32__DelegateSignature();// 0x2d74e00
	GameInstance* GetGameInstance();// 0x3c2b340
	float GetFloat__DelegateSignature();// 0x2d74e00
	Vector2D GetDesiredSize();// 0x3c2b2d0
	enum GetClipping();// 0x3c2b2a0
	enum GetCheckBoxState__DelegateSignature();// 0x2d74e00
	Geometry GetCachedGeometry();// 0x3c2b260
	bool GetBool__DelegateSignature();// 0x2d74e00
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x2d74e00
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x2d74e00
	void ForceVolatile(bool bForce);// 0x3c2b1d0
	void ForceLayoutPrepass();// 0x3c2b1b0

--------------------------------
Class: Visual.Object

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 1]
	Widget* Content;//[Offset: 0x30, Size: 1]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x110, Size: 1]
	bool RemoveChildAt(int Index);// 0x3c18c20
	bool RemoveChild(Widget* Content);// 0x3c18b90
	bool HasChild(Widget* Content);// 0x3c18a10
	bool HasAnyChildren();// 0x3c189e0
	int GetChildrenCount();// 0x3c18690
	int GetChildIndex(const Widget* Content);// 0x3c18600
	Widget* GetChildAt(int Index);// 0x3c18570
	Widget*[] GetAllChildren();// 0x3c184f0
	void ClearChildren();// 0xe8d230
	PanelSlot* AddChild(Widget* Content);// 0x3c18320

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 1]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 1]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 1]
	FString DisplayLabel;//[Offset: 0x368, Size: 1]
	void UnbindFromAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3c2cc80
	void UnbindFromAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3c2cba0
	void UnbindAllFromAnimationStarted(UserWidget* Widget);// 0x3c2cb20
	void UnbindAllFromAnimationFinished(UserWidget* Widget);// 0x3c2caa0
	float GetStartTime();// 0x3c2b4a0
	float GetEndTime();// 0x3c2b310
	void BindToAnimationStarted(UserWidget* Widget, delegate Delegate);// 0x3c2b0d0
	void BindToAnimationFinished(UserWidget* Widget, delegate Delegate);// 0x3c2aff0

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 1]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 1]
	bool bPlayableDirectly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x342, Size: 1]
	MovieSceneObjectBindingID[] FindBindingsByTag(FName InBindingName);// 0x3a9a0f0
	MovieSceneObjectBindingID FindBindingByTag(FName InBindingName);// 0x3a9a040

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 1]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 1]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 1]
	<FName,MovieSceneObjectBindingIDs> BindingGroups;//[Offset: 0x80, Size: 1]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0xd0, Size: 1]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0xe0, Size: 1]
	MovieSceneFrameRange SelectionRange;//[Offset: 0xe8, Size: 1]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xf8, Size: 1]
	FrameRate TickResolution;//[Offset: 0x108, Size: 1]
	FrameRate DisplayRate;//[Offset: 0x110, Size: 1]
	enum EvaluationType;//[Offset: 0x118, Size: 1]
	enum ClockSource;//[Offset: 0x119, Size: 1]
	SoftObjectPath CustomClockSourcePath;//[Offset: 0x120, Size: 1]
	MovieSceneMarkedFrame[] MarkedFrames;//[Offset: 0x138, Size: 1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 1]
	FName[] Tags;//[Offset: 0x30, Size: 1]
	bool bContinuouslyRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Guid Guid;//[Offset: 0x44, Size: 1]
	FString Name;//[Offset: 0x58, Size: 1]
	Object* ObjectTemplate;//[Offset: 0x68, Size: 1]
	Guid[] ChildPossessables;//[Offset: 0x70, Size: 1]
	enum Ownership;//[Offset: 0x80, Size: 1]
	FName LevelName;//[Offset: 0x84, Size: 1]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 1]
	Guid Guid;//[Offset: 0x10, Size: 1]
	FString Name;//[Offset: 0x20, Size: 1]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 1]
	Guid ParentGuid;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 1]
	FString BindingName;//[Offset: 0x10, Size: 1]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 1]
	bool bIsEvalDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55, Size: 1]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingIDs
	MovieSceneObjectBindingID[] IDs;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneObjectBindingID
	int SequenceID;//[Offset: 0x0, Size: 1]
	enum Space;//[Offset: 0x4, Size: 1]
	Guid Guid;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 1]
	int Denominator;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneMarkedFrame
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	FString Label;//[Offset: 0x8, Size: 1]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 1]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 1]
	Guid SequenceSignature;//[Offset: 0x170, Size: 1]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 1]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 1]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 1]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingID;//[Offset: 0x0, Size: 1]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 1]
	enum EvaluationMethod;//[Offset: 0x12, Size: 1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 1]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 1]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 1]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 1]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 1]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 1]
	bool bTearDownPriority;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 1]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 1]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 1]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 1]
	int NumInitPtrs;//[Offset: 0x4, Size: 1]
	int NumEvalPtrs;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 1]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 1]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 1]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 1]
	uint16 SetupIndex;//[Offset: 0xc, Size: 1]
	uint16 TearDownIndex;//[Offset: 0xe, Size: 1]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 1]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 1]
	uint32 SectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 1]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 1]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 1]
	FrameRate TickResolution;//[Offset: 0x38, Size: 1]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x40, Size: 1]
	MovieSceneFrameRange PlayRange;//[Offset: 0x44, Size: 1]
	MovieSceneFrameRange FullPlayRange;//[Offset: 0x54, Size: 1]
	MovieSceneFrameRange UnwarpedPlayRange;//[Offset: 0x64, Size: 1]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x74, Size: 1]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x84, Size: 1]
	int HierarchicalBias;//[Offset: 0x94, Size: 1]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x98, Size: 1]
	Guid SubSectionSignature;//[Offset: 0xb8, Size: 1]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: MovieSceneSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneNestedSequenceTransform[] NestedTransforms;//[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneTimeTransform
	float TimeScale;//[Offset: 0x0, Size: 1]
	FrameTime Offset;//[Offset: 0x4, Size: 1]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 1]
	float SubFrame;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneNestedSequenceTransform
	MovieSceneTimeTransform LinearTransform;//[Offset: 0x0, Size: 1]
	MovieSceneTimeWarping Warping;//[Offset: 0xc, Size: 1]

--------------------------------
Class: MovieSceneTimeWarping
	FrameNumber start;//[Offset: 0x0, Size: 1]
	FrameNumber end;//[Offset: 0x4, Size: 1]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentID;//[Offset: 0x0, Size: 1]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 1]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 1]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 1]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 1]
	FName SlotWidgetName;//[Offset: 0x8, Size: 1]
	Guid AnimationGuid;//[Offset: 0x10, Size: 1]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 1]
	Vector2D Scale;//[Offset: 0x8, Size: 1]
	Vector2D Shear;//[Offset: 0x10, Size: 1]
	float Angle;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SlateAccessibleWidgetData.Object
	bool bCanChildrenBeAccessible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	enum AccessibleBehavior;//[Offset: 0x29, Size: 1]
	enum AccessibleSummaryBehavior;//[Offset: 0x2a, Size: 1]
	FText AccessibleText;//[Offset: 0x30, Size: 1]
	delegate AccessibleTextDelegate;//[Offset: 0x48, Size: 1]
	FText AccessibleSummaryText;//[Offset: 0x58, Size: 1]
	delegate AccessibleSummaryTextDelegate;//[Offset: 0x70, Size: 1]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 1]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 1]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 1]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 1]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 1]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 1]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 1]
	Widget* Widget;//[Offset: 0xc, Size: 1]
	delegate CustomDelegate;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 1]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 1]
	FName DestinationProperty;//[Offset: 0x58, Size: 1]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 1]
	Function* CachedFunction;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 1]
	int ArrayIndex;//[Offset: 0x8, Size: 1]
	Struct* Struct;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: EventReply

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 1]
	byte ColorUseRule;//[Offset: 0x10, Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 1]
	float Top;//[Offset: 0x4, Size: 1]
	float Right;//[Offset: 0x8, Size: 1]
	float Bottom;//[Offset: 0xc, Size: 1]

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x408, Size: 1]
	void SetUserTag(FName InUserTag);// 0x3c28ce0
	FName GetUserTag();// 0x3c27590

--------------------------------
Class: Geometry

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 1]
	Margin Margin;//[Offset: 0x10, Size: 1]
	SlateColor TintColor;//[Offset: 0x20, Size: 1]
	Object* ResourceObject;//[Offset: 0x48, Size: 1]
	FName ResourceName;//[Offset: 0x50, Size: 1]
	Box2D UVRegion;//[Offset: 0x58, Size: 1]
	byte DrawAs;//[Offset: 0x6c, Size: 1]
	byte Tiling;//[Offset: 0x6d, Size: 1]
	byte Mirroring;//[Offset: 0x6e, Size: 1]
	byte ImageType;//[Offset: 0x6f, Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 1]
	Vector2D Max;//[Offset: 0x8, Size: 1]
	byte bIsValid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 1]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 1]
	int ControllerId;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 1]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 1]
	int MaxSplitscreenPlayers;//[Offset: 0x68, Size: 1]
	World* World;//[Offset: 0x78, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x80, Size: 1]
	void SSSwapControllers();// 0x26b68d0
	void ShowTitleSafeArea();// 0x27b60a0
	void SetConsoleTarget(int PlayerIndex);// 0x456a430

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 1]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 1]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 1]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 1]
	float DefaultHeight;//[Offset: 0x130, Size: 1]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 1]
	class Object* WithinClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 1]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 1]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 1]
	void ReceiveShutdown();// 0x2d74e00
	void ReceiveInit();// 0x2d74e00
	void HandleTravelError(byte FailureType);// 0x2d74e00
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x2d74e00
	void DebugRemovePlayer(int ControllerId);// 0x4552730
	void DebugCreatePlayer(int ControllerId);// 0x45526a0

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 1]
	Widget* Content;//[Offset: 0x8, Size: 1]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x120, Size: 1]
	bool WasControllerKeyJustReleased(Key Key);// 0x456f550
	bool WasControllerKeyJustPressed(Key Key);// 0x456f550
	bool IsControllerKeyDown(Key Key);// 0x456f550
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x456f3d0
	Vector GetControllerVectorKeyState(Key Key);// 0x456ee70
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x456ed90
	float GetControllerKeyTimeDown(Key Key);// 0x456eb80
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x456ec70
	float GetControllerAnalogKeyState(Key Key);// 0x456eb80

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 1]
	delegate Delegate;//[Offset: 0x8, Size: 1]
	enum AnimationEvent;//[Offset: 0x18, Size: 1]
	FName UserTag;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 1]
	Vector2D Maximum;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 1]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 1]
	bool bHasDelayNode;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 1]
	bool bHasConcatenatorNode;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 1]
	enum VirtualizationMode;//[Offset: 0x31, Size: 1]
	<SoundConcurrency*> ConcurrencySet;//[Offset: 0x88, Size: 1]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0xd8, Size: 1]
	float Duration;//[Offset: 0xf8, Size: 1]
	float MaxDistance;//[Offset: 0xfc, Size: 1]
	float TotalSamples;//[Offset: 0x100, Size: 1]
	float Priority;//[Offset: 0x104, Size: 1]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x108, Size: 1]
	SoundModulation Modulation;//[Offset: 0x110, Size: 1]
	SoundSubmixBase* SoundSubmixObject;//[Offset: 0x120, Size: 1]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x128, Size: 1]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x138, Size: 1]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x140, Size: 1]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x150, Size: 1]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 1]
	SoundClass*[] ChildClasses;//[Offset: 0x88, Size: 1]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x98, Size: 1]
	SoundModulation Modulation;//[Offset: 0xa8, Size: 1]
	SoundClass* ParentClass;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 1]
	float Pitch;//[Offset: 0x4, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x8, Size: 1]
	float AttenuationDistanceScale;//[Offset: 0xc, Size: 1]
	float StereoBleed;//[Offset: 0x10, Size: 1]
	float LFEBleed;//[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolume;//[Offset: 0x18, Size: 1]
	float RadioFilterVolume;//[Offset: 0x1c, Size: 1]
	float RadioFilterVolumeThreshold;//[Offset: 0x20, Size: 1]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24, Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x24, Size: 1]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x24, Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x24, Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x24, Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x28, Size: 1]
	bool bApplyInsulationVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 1]
	byte OutputTarget;//[Offset: 0x30, Size: 1]
	enum LoadingBehavior;//[Offset: 0x31, Size: 1]
	SoundSubmix* DefaultSubmix;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SoundSubmix.SoundSubmixWithParentBase.SoundSubmixBase.Object
	bool bMuteWhenBackgrounded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 1]
	SoundfieldEncodingSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 1]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 1]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 1]
	float OutputVolume;//[Offset: 0x68, Size: 1]
	MulticastInlineDelegateProperty OnSubmixRecordedFileDone;//[Size: 1]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString Path, SoundWave* ExistingSoundWaveToOverwrite);// 0x464dae0
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x464da60
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x464d990
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x464d910
	void SetSubmixOutputVolume(const Object* WorldContextObject, float InOutputVolume);// 0x464d2e0
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x46485e0

--------------------------------
Class: SoundSubmixWithParentBase.SoundSubmixBase.Object
	SoundSubmixBase* ParentSubmix;//[Offset: 0x38, Size: 1]

--------------------------------
Class: SoundSubmixBase.Object
	SoundSubmixBase*[] ChildSubmixes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundfieldEncodingSettingsBase.Object

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x160, Size: 1]
	int StreamingPriority;//[Offset: 0x164, Size: 1]
	enum SampleRateQuality;//[Offset: 0x168, Size: 1]
	byte SoundGroup;//[Offset: 0x16a, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16b, Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16b, Size: 1]
	bool bSeekableStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16b, Size: 1]
	enum LoadingBehavior;//[Offset: 0x16c, Size: 1]
	bool bMature;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16d, Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16d, Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16d, Size: 1]
	bool bIsAmbisonics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16e, Size: 1]
	float[] FrequenciesToAnalyze;//[Offset: 0x170, Size: 1]
	SoundWaveSpectralTimeData[] CookedSpectralTimeData;//[Offset: 0x180, Size: 1]
	SoundWaveEnvelopeTimeData[] CookedEnvelopeTimeData;//[Offset: 0x190, Size: 1]
	int InitialChunkSize;//[Offset: 0x1a0, Size: 1]
	FString SpokenText;//[Offset: 0x1e8, Size: 1]
	float SubtitlePriority;//[Offset: 0x1f8, Size: 1]
	float Volume;//[Offset: 0x1fc, Size: 1]
	float Pitch;//[Offset: 0x200, Size: 1]
	int NumChannels;//[Offset: 0x204, Size: 1]
	int SampleRate;//[Offset: 0x208, Size: 1]
	SubtitleCue[] Subtitles;//[Offset: 0x218, Size: 1]
	CurveTable* Curves;//[Offset: 0x228, Size: 1]
	CurveTable* InternalCurves;//[Offset: 0x230, Size: 1]

--------------------------------
Class: SoundWaveSpectralTimeData
	SoundWaveSpectralDataEntry[] Data;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SoundWaveSpectralDataEntry
	float Magnitude;//[Offset: 0x0, Size: 1]
	float NormalizedMagnitude;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SoundWaveEnvelopeTimeData
	float Amplitude;//[Offset: 0x0, Size: 1]
	float TimeSec;//[Offset: 0x4, Size: 1]

--------------------------------
Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x18, Size: 1]

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 1]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 1]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 1]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 1]
	float EQPriority;//[Offset: 0x2c, Size: 1]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 1]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x70, Size: 1]
	float InitialDelay;//[Offset: 0x80, Size: 1]
	float FadeInTime;//[Offset: 0x84, Size: 1]
	float Duration;//[Offset: 0x88, Size: 1]
	float FadeOutTime;//[Offset: 0x8c, Size: 1]

--------------------------------
Class: AudioEQEffect.AudioEffectParameters
	float FrequencyCenter0;//[Offset: 0x10, Size: 1]
	float Gain0;//[Offset: 0x14, Size: 1]
	float Bandwidth0;//[Offset: 0x18, Size: 1]
	float FrequencyCenter1;//[Offset: 0x1c, Size: 1]
	float Gain1;//[Offset: 0x20, Size: 1]
	float Bandwidth1;//[Offset: 0x24, Size: 1]
	float FrequencyCenter2;//[Offset: 0x28, Size: 1]
	float Gain2;//[Offset: 0x2c, Size: 1]
	float Bandwidth2;//[Offset: 0x30, Size: 1]
	float FrequencyCenter3;//[Offset: 0x34, Size: 1]
	float Gain3;//[Offset: 0x38, Size: 1]
	float Bandwidth3;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: AudioEffectParameters

--------------------------------
Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 1]
	float VolumeAdjuster;//[Offset: 0x8, Size: 1]
	float PitchAdjuster;//[Offset: 0xc, Size: 1]
	float LowPassFilterFrequency;//[Offset: 0x10, Size: 1]
	bool bApplyToChildren;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SoundModulation
	SoundModulationPluginSourceSettingsBase*[] Settings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SoundModulationPluginSourceSettingsBase.Object

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 1]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 1]
	byte ResolutionRule;//[Offset: 0x8, Size: 1]
	float VolumeScale;//[Offset: 0xc, Size: 1]
	float VolumeScaleAttackTime;//[Offset: 0x10, Size: 1]
	bool bVolumeScaleCanRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 1]
	float VolumeScaleReleaseTime;//[Offset: 0x18, Size: 1]
	float VoiceStealReleaseTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0, Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0, Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0, Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0, Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0, Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0, Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0, Size: 1]
	bool bEnablePriorityAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1, Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1, Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb1, Size: 1]
	bool bEnableSubmixSends;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb1, Size: 1]
	byte SpatializationAlgorithm;//[Offset: 0xb2, Size: 1]
	float BinauralRadius;//[Offset: 0xb4, Size: 1]
	enum AbsorptionMethod;//[Offset: 0xb8, Size: 1]
	byte OcclusionTraceChannel;//[Offset: 0xb9, Size: 1]
	enum ReverbSendMethod;//[Offset: 0xba, Size: 1]
	enum PriorityAttenuationMethod;//[Offset: 0xbb, Size: 1]
	float OmniRadius;//[Offset: 0xbc, Size: 1]
	float StereoSpread;//[Offset: 0xc0, Size: 1]
	float LPFRadiusMin;//[Offset: 0xc4, Size: 1]
	float LPFRadiusMax;//[Offset: 0xc8, Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xd0, Size: 1]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x158, Size: 1]
	float LPFFrequencyAtMin;//[Offset: 0x1e0, Size: 1]
	float LPFFrequencyAtMax;//[Offset: 0x1e4, Size: 1]
	float HPFFrequencyAtMin;//[Offset: 0x1e8, Size: 1]
	float HPFFrequencyAtMax;//[Offset: 0x1ec, Size: 1]
	float FocusAzimuth;//[Offset: 0x1f0, Size: 1]
	float NonFocusAzimuth;//[Offset: 0x1f4, Size: 1]
	float FocusDistanceScale;//[Offset: 0x1f8, Size: 1]
	float NonFocusDistanceScale;//[Offset: 0x1fc, Size: 1]
	float FocusPriorityScale;//[Offset: 0x200, Size: 1]
	float NonFocusPriorityScale;//[Offset: 0x204, Size: 1]
	float FocusVolumeAttenuation;//[Offset: 0x208, Size: 1]
	float NonFocusVolumeAttenuation;//[Offset: 0x20c, Size: 1]
	float FocusAttackInterpSpeed;//[Offset: 0x210, Size: 1]
	float FocusReleaseInterpSpeed;//[Offset: 0x214, Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x218, Size: 1]
	float OcclusionVolumeAttenuation;//[Offset: 0x21c, Size: 1]
	float OcclusionInterpolationTime;//[Offset: 0x220, Size: 1]
	float ReverbWetLevelMin;//[Offset: 0x224, Size: 1]
	float ReverbWetLevelMax;//[Offset: 0x228, Size: 1]
	float ReverbDistanceMin;//[Offset: 0x22c, Size: 1]
	float ReverbDistanceMax;//[Offset: 0x230, Size: 1]
	float ManualReverbSendLevel;//[Offset: 0x234, Size: 1]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x238, Size: 1]
	AttenuationSubmixSendSettings[] SubmixSendSettings;//[Offset: 0x2c0, Size: 1]
	float PriorityAttenuationMin;//[Offset: 0x2d0, Size: 1]
	float PriorityAttenuationMax;//[Offset: 0x2d4, Size: 1]
	float PriorityAttenuationDistanceMin;//[Offset: 0x2d8, Size: 1]
	float PriorityAttenuationDistanceMax;//[Offset: 0x2dc, Size: 1]
	float ManualPriorityAttenuation;//[Offset: 0x2e0, Size: 1]
	RuntimeFloatCurve CustomPriorityAttenuationCurve;//[Offset: 0x2e8, Size: 1]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x370, Size: 1]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 1]
	byte AttenuationShape;//[Offset: 0x9, Size: 1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 1]
	enum FalloffMode;//[Offset: 0x10, Size: 1]
	Vector AttenuationShapeExtents;//[Offset: 0x14, Size: 1]
	float ConeOffset;//[Offset: 0x20, Size: 1]
	float FalloffDistance;//[Offset: 0x24, Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 1]
	CurveFloat* ExternalCurve;//[Offset: 0x80, Size: 1]

--------------------------------
Class: AttenuationSubmixSendSettings
	SoundSubmixBase* Submix;//[Offset: 0x0, Size: 1]
	enum SubmixSendMethod;//[Offset: 0x8, Size: 1]
	float SubmixSendLevelMin;//[Offset: 0xc, Size: 1]
	float SubmixSendLevelMax;//[Offset: 0x10, Size: 1]
	float SubmixSendDistanceMin;//[Offset: 0x14, Size: 1]
	float SubmixSendDistanceMax;//[Offset: 0x18, Size: 1]
	float ManualSubmixSendLevel;//[Offset: 0x1c, Size: 1]
	RuntimeFloatCurve CustomSubmixSendCurve;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 1]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 1]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 1]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmixSendInfo
	enum SendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSubmixBase* SoundSubmix;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 1]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 1]

--------------------------------
Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 1]
	bool bBypass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundSourceBusSendInfo
	enum SourceBusSendLevelControlMethod;//[Offset: 0x0, Size: 1]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 1]
	float SendLevel;//[Offset: 0x10, Size: 1]
	float MinSendLevel;//[Offset: 0x14, Size: 1]
	float MaxSendLevel;//[Offset: 0x18, Size: 1]
	float MinSendDistance;//[Offset: 0x1c, Size: 1]
	float MaxSendDistance;//[Offset: 0x20, Size: 1]
	RuntimeFloatCurve CustomSendLevelCurve;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x310, Size: 1]
	float SourceBusDuration;//[Offset: 0x314, Size: 1]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318, Size: 1]

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 1]
	Object* Payload;//[Offset: 0x38, Size: 1]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 1]
	enum Pivot;//[Offset: 0x48, Size: 1]
	Vector2D Offset;//[Offset: 0x4c, Size: 1]
	MulticastInlineDelegateProperty OnDrop;//[Size: 1]
	MulticastInlineDelegateProperty OnDragCancelled;//[Size: 1]
	MulticastInlineDelegateProperty OnDragged;//[Size: 1]
	void Drop(out const PointerEvent PointerEvent);// 0x3c0f5d0
	void Dragged(out const PointerEvent PointerEvent);// 0x3c0f4a0
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3c0f370

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 1]
	float Duration;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NetConnection.Player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 1]
	NetDriver* Driver;//[Offset: 0x58, Size: 1]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 1]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 1]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 1]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 1]
	Actor* ViewTarget;//[Offset: 0x90, Size: 1]
	Actor* OwningActor;//[Offset: 0x98, Size: 1]
	int MaxPacket;//[Offset: 0xa0, Size: 1]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x160, Size: 1]
	double LastReceiveTime;//[Offset: 0x1d0, Size: 1]
	Channel*[] ChannelsToTick;//[Offset: 0x1520, Size: 1]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x1a90, Size: 1]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 1]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 1]
	int MaxDownloadSize;//[Offset: 0x50, Size: 1]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 1]
	int MaxNetTickRate;//[Offset: 0x5c, Size: 1]
	int MaxInternetClientRate;//[Offset: 0x60, Size: 1]
	int MaxClientRate;//[Offset: 0x64, Size: 1]
	float ServerTravelPause;//[Offset: 0x68, Size: 1]
	float SpawnPrioritySeconds;//[Offset: 0x6c, Size: 1]
	float RelevantTimeout;//[Offset: 0x70, Size: 1]
	float KeepAliveTime;//[Offset: 0x74, Size: 1]
	float LossyConnectionThreshold;//[Offset: 0x78, Size: 1]
	float HandshakeTimeout;//[Offset: 0x7c, Size: 1]
	float InitialConnectTimeout;//[Offset: 0x80, Size: 1]
	float ConnectionTimeout;//[Offset: 0x84, Size: 1]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x88, Size: 1]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 1]
	bool bNeverApplyNetworkEmulationSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d, Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x90, Size: 1]
	NetConnection*[] ClientConnections;//[Offset: 0x98, Size: 1]
	int RecentlyDisconnectedTrackingTime;//[Offset: 0x108, Size: 1]
	World* World;//[Offset: 0x148, Size: 1]
	Package* WorldPackage;//[Offset: 0x150, Size: 1]
	class Object* NetConnectionClass;//[Offset: 0x178, Size: 1]
	class Object* ReplicationDriverClass;//[Offset: 0x180, Size: 1]
	FName NetDriverName;//[Offset: 0x198, Size: 1]
	ChannelDefinition[] ChannelDefinitions;//[Offset: 0x1a0, Size: 1]
	<FName,ChannelDefinition> ChannelDefinitionMap;//[Offset: 0x1b0, Size: 1]
	NetThrottleSpawnDefinition[] ThrottleSpawnDefinitions;//[Offset: 0x200, Size: 1]
	int[] ThrottleSpawnsRemaining;//[Offset: 0x210, Size: 1]
	uint32 ThrottleSpawnPausedFrameNumber;//[Offset: 0x220, Size: 1]
	Channel*[] ActorChannelPool;//[Offset: 0x228, Size: 1]
	float Time;//[Offset: 0x240, Size: 1]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x718, Size: 1]

--------------------------------
Class: Package.Object

--------------------------------
Class: ChannelDefinition
	FName ChannelName;//[Offset: 0x0, Size: 1]
	FName ClassName;//[Offset: 0x8, Size: 1]
	class Object* ChannelClass;//[Offset: 0x10, Size: 1]
	int StaticChannelIndex;//[Offset: 0x18, Size: 1]
	bool bTickOnCreate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	bool bServerOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	bool bClientOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 1]
	bool bInitialServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 1]
	bool bInitialClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: NetThrottleSpawnDefinition
	FName SpawnBucketIdentifier;//[Offset: 0x0, Size: 1]
	int NumSpawnsPerFrame;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 1]
	float ActiveOpacity;//[Offset: 0x38, Size: 1]
	float InactiveOpacity;//[Offset: 0x3c, Size: 1]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 1]
	float TimeUntilReset;//[Offset: 0x44, Size: 1]
	float ActivationDelay;//[Offset: 0x48, Size: 1]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	float StartupDelay;//[Offset: 0x50, Size: 1]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 1]
	Texture2D* Image2;//[Offset: 0x8, Size: 1]
	Vector2D Center;//[Offset: 0x10, Size: 1]
	Vector2D VisualSize;//[Offset: 0x18, Size: 1]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 1]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 1]
	Vector2D InputScale;//[Offset: 0x30, Size: 1]
	Key MainInputKey;//[Offset: 0x38, Size: 1]
	Key AltInputKey;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x280, Size: 1]
	float BaseLookUpRate;//[Offset: 0x284, Size: 1]
	PawnMovementComponent* MovementComponent;//[Offset: 0x288, Size: 1]
	SphereComponent* CollisionComponent;//[Offset: 0x290, Size: 1]
	StaticMeshComponent* MeshComponent;//[Offset: 0x298, Size: 1]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0, Size: 1]
	void TurnAtRate(float Rate);// 0x285c310
	void MoveUp_World(float Val);// 0x45417a0
	void MoveRight(float Val);// 0x4541720
	void MoveForward(float Val);// 0x45416a0
	void LookUpAtRate(float Rate);// 0x285c290

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x448, Size: 1]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x464ce80
	float GetUnscaledSphereRadius();// 0x4530220
	float GetShapeScale();// 0x464b360
	float GetScaledSphereRadius();// 0x464b310

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Guid StaticMeshGuid;//[Offset: 0x458, Size: 1]
	int ForcedLodModel;//[Offset: 0x468, Size: 1]
	int PreviousLODLevel;//[Offset: 0x46c, Size: 1]
	int MinLOD;//[Offset: 0x470, Size: 1]
	int SubDivisionStepSize;//[Offset: 0x474, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x478, Size: 1]
	Color WireframeColorOverride;//[Offset: 0x480, Size: 1]
	bool bEvaluateWorldPositionOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x484, Size: 1]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x484, Size: 1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x484, Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x484, Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x484, Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x484, Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x484, Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x484, Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x485, Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x485, Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x485, Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x485, Size: 1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x485, Size: 1]
	bool bHasReflectionCaptureOverrideLocation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x485, Size: 1]
	Vector ReflectionCaptureOverrideLocation;//[Offset: 0x488, Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x494, Size: 1]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x498, Size: 1]
	float DistanceFieldSelfShadowBias;//[Offset: 0x49c, Size: 1]
	float StreamingDistanceMultiplier;//[Offset: 0x4a0, Size: 1]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x4a8, Size: 1]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x4b8, Size: 1]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x4c8, Size: 1]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x46552f0
	void SetReverseCulling(bool ReverseCulling);// 0x46550c0
	void SetForcedLodModel(int NewForcedLodModel);// 0x4654cc0
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x4654a40
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x46549c0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x4654840

--------------------------------
Class: StaticMeshComponentLODInfo

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 1]
	int TextureLevelIndex;//[Offset: 0x4, Size: 1]
	float TexelFactor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 1]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 1]
	float EmissiveBoost;//[Offset: 0xc, Size: 1]
	float DiffuseBoost;//[Offset: 0x10, Size: 1]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 1]
	bool bAllowShadowInShadowOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 1]
	byte BlendFunction;//[Offset: 0x4, Size: 1]
	float BlendExp;//[Offset: 0x8, Size: 1]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 1]
	FName Filename;//[Offset: 0x8, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 1]
	int UUID;//[Offset: 0x4, Size: 1]
	FName ExecutionFunction;//[Offset: 0x8, Size: 1]
	Object* CallbackTarget;//[Offset: 0x10, Size: 1]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 1]
	int LODIndex;//[Offset: 0x8, Size: 1]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 1]

--------------------------------
Class: ForceFeedbackParameters
	FName Tag;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool bPlayWhilePaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 1]
	FName MemberName;//[Offset: 0x8, Size: 1]
	Guid MemberGuid;//[Offset: 0x10, Size: 1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 1]
	int Index;//[Offset: 0x4, Size: 1]
	int SelectionIndex;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 1]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 1]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 1]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x220, Size: 1]
	class GameSession* GameSessionClass;//[Offset: 0x230, Size: 1]
	class GameStateBase* GameStateClass;//[Offset: 0x238, Size: 1]
	class PlayerController* PlayerControllerClass;//[Offset: 0x240, Size: 1]
	class PlayerState* PlayerStateClass;//[Offset: 0x248, Size: 1]
	class HUD* HUDClass;//[Offset: 0x250, Size: 1]
	class Pawn* DefaultPawnClass;//[Offset: 0x258, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x260, Size: 1]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x268, Size: 1]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x270, Size: 1]
	GameSession* GameSession;//[Offset: 0x278, Size: 1]
	GameStateBase* GameState;//[Offset: 0x280, Size: 1]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x288, Size: 1]
	FText DefaultPlayerName;//[Offset: 0x290, Size: 1]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	void StartPlay();// 0x1fa16c0
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x455f340
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x455f220
	bool ShouldReset(Actor* ActorToReset);// 0x455ed40
	void ReturnToMainMenuHost();// 0xe87320
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x455dc50
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x455db80
	void RestartPlayer(Controller* NewPlayer);// 0x455daf0
	void ResetLevel();// 0xe87e90
	bool PlayerCanRestart(PlayerController* Player);// 0x26ce940
	bool MustSpectate(PlayerController* NewPlayerController);// 0x27bf010
	void K2_PostLogin(PlayerController* NewPlayer);// 0x2d74e00
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x2d74e00
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x2d74e00
	void K2_OnLogout(Controller* ExitingController);// 0x2d74e00
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x2d74e00
	Actor* K2_FindPlayerStart(Controller* Player, FString IncomingName);// 0x455bbf0
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x27cd8d0
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x28518f0
	bool HasMatchStarted();// 0x2772360
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x1fa35c0
	int GetNumSpectators();// 0x455a9f0
	int GetNumPlayers();// 0x455a9c0
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x455a360
	Actor* FindPlayerStart(Controller* Player, FString IncomingName);// 0x4559420
	Actor* ChoosePlayerStart(Controller* Player);// 0x45588a0
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x4558780
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x4558690

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x220, Size: 1]
	int MaxPlayers;//[Offset: 0x224, Size: 1]
	int MaxPartySize;//[Offset: 0x228, Size: 1]
	byte MaxSplitscreensPerConnection;//[Offset: 0x22c, Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22d, Size: 1]
	FName SessionName;//[Offset: 0x230, Size: 1]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x220, Size: 1]
	GameModeBase* AuthorityGameMode;//[Offset: 0x228, Size: 1]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x230, Size: 1]
	PlayerState*[] PlayerArray;//[Offset: 0x238, Size: 1]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x24c, Size: 1]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x250, Size: 1]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x254, Size: 1]
	void OnRep_SpectatorClass();// 0x1fae4b0
	void OnRep_ReplicatedWorldTimeSeconds();// 0x1fa34b0
	void OnRep_ReplicatedHasBegunPlay();// 0x1fa1680
	void OnRep_GameModeClass();// 0x1fa4530
	bool HasMatchStarted();// 0x4564090
	bool HasBegunPlay();// 0x274f4a0
	float GetServerWorldTimeSeconds();// 0x4563f30
	float GetPlayerStartTime(Controller* Controller);// 0x4563a40
	float GetPlayerRespawnDelay(Controller* Controller);// 0x45639a0

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x221, Size: 1]
	uint32 Channels;//[Offset: 0x224, Size: 1]
	uint32 InRate;//[Offset: 0x228, Size: 1]
	uint32 OutRate;//[Offset: 0x22c, Size: 1]
	uint32 MaxPacketOverhead;//[Offset: 0x234, Size: 1]
	uint32 InRateClientMax;//[Offset: 0x238, Size: 1]
	uint32 InRateClientMin;//[Offset: 0x23c, Size: 1]
	uint32 InRateClientAvg;//[Offset: 0x240, Size: 1]
	uint32 InPacketsClientMax;//[Offset: 0x244, Size: 1]
	uint32 InPacketsClientMin;//[Offset: 0x248, Size: 1]
	uint32 InPacketsClientAvg;//[Offset: 0x24c, Size: 1]
	uint32 OutRateClientMax;//[Offset: 0x250, Size: 1]
	uint32 OutRateClientMin;//[Offset: 0x254, Size: 1]
	uint32 OutRateClientAvg;//[Offset: 0x258, Size: 1]
	uint32 OutPacketsClientMax;//[Offset: 0x25c, Size: 1]
	uint32 OutPacketsClientMin;//[Offset: 0x260, Size: 1]
	uint32 OutPacketsClientAvg;//[Offset: 0x264, Size: 1]
	uint32 NetNumClients;//[Offset: 0x268, Size: 1]
	uint32 InPackets;//[Offset: 0x26c, Size: 1]
	uint32 OutPackets;//[Offset: 0x270, Size: 1]
	uint32 InBunches;//[Offset: 0x274, Size: 1]
	uint32 OutBunches;//[Offset: 0x278, Size: 1]
	uint32 OutLoss;//[Offset: 0x27c, Size: 1]
	uint32 InLoss;//[Offset: 0x280, Size: 1]
	uint32 VoiceBytesSent;//[Offset: 0x284, Size: 1]
	uint32 VoiceBytesRecv;//[Offset: 0x288, Size: 1]
	uint32 VoicePacketsSent;//[Offset: 0x28c, Size: 1]
	uint32 VoicePacketsRecv;//[Offset: 0x290, Size: 1]
	uint32 PercentInVoice;//[Offset: 0x294, Size: 1]
	uint32 PercentOutVoice;//[Offset: 0x298, Size: 1]
	uint32 NumActorChannels;//[Offset: 0x29c, Size: 1]
	uint32 NumConsideredActors;//[Offset: 0x2a0, Size: 1]
	uint32 PrioritizedActors;//[Offset: 0x2a4, Size: 1]
	uint32 NumRelevantActors;//[Offset: 0x2a8, Size: 1]
	uint32 NumRelevantDeletedActors;//[Offset: 0x2ac, Size: 1]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x2b0, Size: 1]
	uint32 NumReplicatedActors;//[Offset: 0x2b4, Size: 1]
	uint32 NumActors;//[Offset: 0x2b8, Size: 1]
	uint32 NumNetActors;//[Offset: 0x2bc, Size: 1]
	uint32 NumDormantActors;//[Offset: 0x2c0, Size: 1]
	uint32 NumInitiallyDormantActors;//[Offset: 0x2c4, Size: 1]
	uint32 NumNetGUIDsAckd;//[Offset: 0x2c8, Size: 1]
	uint32 NumNetGUIDsPending;//[Offset: 0x2cc, Size: 1]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x2d0, Size: 1]
	uint32 ObjPathBytes;//[Offset: 0x2d4, Size: 1]
	uint32 NetGUIDOutRate;//[Offset: 0x2d8, Size: 1]
	uint32 NetGUIDInRate;//[Offset: 0x2dc, Size: 1]
	uint32 NetSaturated;//[Offset: 0x2e0, Size: 1]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	float BadPacketLossThreshold;//[Offset: 0x220, Size: 1]
	float SeverePacketLossThreshold;//[Offset: 0x224, Size: 1]
	int BadPingThreshold;//[Offset: 0x228, Size: 1]
	int SeverePingThreshold;//[Offset: 0x22c, Size: 1]
	int AdjustedNetSpeed;//[Offset: 0x230, Size: 1]
	float LastNetSpeedUpdateTime;//[Offset: 0x234, Size: 1]
	int TotalNetBandwidth;//[Offset: 0x238, Size: 1]
	int MinDynamicBandwidth;//[Offset: 0x23c, Size: 1]
	int MaxDynamicBandwidth;//[Offset: 0x240, Size: 1]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x248, Size: 1]
	float StandbyTxCheatTime;//[Offset: 0x24c, Size: 1]
	float PercentMissingForRxStandby;//[Offset: 0x250, Size: 1]
	float PercentMissingForTxStandby;//[Offset: 0x254, Size: 1]
	float PercentForBadPing;//[Offset: 0x258, Size: 1]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x25c, Size: 1]
	float MoveRepSize;//[Offset: 0x260, Size: 1]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x264, Size: 1]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x268, Size: 1]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x26c, Size: 1]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x270, Size: 1]
	float MaxClientForcedUpdateDuration;//[Offset: 0x274, Size: 1]
	float ServerForcedUpdateHitchThreshold;//[Offset: 0x278, Size: 1]
	float ServerForcedUpdateHitchCooldown;//[Offset: 0x27c, Size: 1]
	float MaxMoveDeltaTime;//[Offset: 0x280, Size: 1]
	float MaxClientSmoothingDeltaTime;//[Offset: 0x284, Size: 1]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x288, Size: 1]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x28c, Size: 1]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x290, Size: 1]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x294, Size: 1]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x298, Size: 1]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x2a0, Size: 1]
	float ClientNetCamUpdateDeltaTime;//[Offset: 0x2a4, Size: 1]
	float ClientNetCamUpdatePositionLimit;//[Offset: 0x2a8, Size: 1]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ad, Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x2b0, Size: 1]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x2b4, Size: 1]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x2b8, Size: 1]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x2bc, Size: 1]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x208, Size: 1]
	Actor* ChildActor;//[Offset: 0x210, Size: 1]
	Actor* ChildActorTemplate;//[Offset: 0x218, Size: 1]
	void SetChildActorClass(class Actor InClass);// 0x45397f0

--------------------------------
Class: Interface.Object

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 1]
	Vector AngularVelocity;//[Offset: 0xc, Size: 1]
	Vector Location;//[Offset: 0x18, Size: 1]
	Rotator Rotation;//[Offset: 0x24, Size: 1]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 1]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 1]
	Rotator RotationOffset;//[Offset: 0x20, Size: 1]
	FName AttachSocket;//[Offset: 0x2c, Size: 1]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x220, Size: 1]
	FName MatineeControllerName;//[Offset: 0x228, Size: 1]
	float PlayRate;//[Offset: 0x230, Size: 1]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x234, Size: 1]
	float ForceStartPosition;//[Offset: 0x238, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x23c, Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x23c, Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x23c, Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x23c, Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x23c, Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x23c, Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x23c, Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x23c, Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x240, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x244, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x244, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x244, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x244, Size: 1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x248, Size: 1]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x258, Size: 1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x260, Size: 1]
	CameraCutInfo[] CameraCuts;//[Offset: 0x270, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280, Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280, Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280, Size: 1]
	float InterpPosition;//[Offset: 0x284, Size: 1]
	byte ReplicationForceIsPlaying;//[Offset: 0x28c, Size: 1]
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	void Stop();// 0x1fa1660
	void SetPosition(float NewPosition, bool bJump);// 0x45eb600
	void SetLoopingState(bool bNewLooping);// 0x2795030
	void Reverse();// 0x1fa1640
	void Play();// 0x1f9f700
	void Pause();// 0xd137b0
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x45eaea0
	void ChangePlaybackDirection();// 0x2743930

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 1]
	float PathBuildTime;//[Offset: 0x2c, Size: 1]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 1]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 1]
	float EdSectionStart;//[Offset: 0x48, Size: 1]
	float EdSectionEnd;//[Offset: 0x4c, Size: 1]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 1]
	FName[] AllEventNames;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 1]
	Actor*[] Actors;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 1]
	float Timestamp;//[Offset: 0xc, Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 1]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 1]
	float Volume;//[Offset: 0x18, Size: 1]
	float FadeTime;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 1]
	float Diffusion;//[Offset: 0x2c, Size: 1]
	float Gain;//[Offset: 0x30, Size: 1]
	float GainHF;//[Offset: 0x34, Size: 1]
	float DecayTime;//[Offset: 0x38, Size: 1]
	float DecayHFRatio;//[Offset: 0x3c, Size: 1]
	float ReflectionsGain;//[Offset: 0x40, Size: 1]
	float ReflectionsDelay;//[Offset: 0x44, Size: 1]
	float LateGain;//[Offset: 0x48, Size: 1]
	float LateDelay;//[Offset: 0x4c, Size: 1]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 1]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 1]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float ExteriorVolume;//[Offset: 0x4, Size: 1]
	float ExteriorTime;//[Offset: 0x8, Size: 1]
	float ExteriorLPF;//[Offset: 0xc, Size: 1]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 1]
	float InteriorVolume;//[Offset: 0x14, Size: 1]
	float InteriorTime;//[Offset: 0x18, Size: 1]
	float InteriorLPF;//[Offset: 0x1c, Size: 1]
	float InteriorLPFTime;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bUseMBPOuterBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	Box MBPBounds;//[Offset: 0x4, Size: 1]
	Box MBPOuterBounds;//[Offset: 0x20, Size: 1]
	uint32 MBPNumSubdivs;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 1]
	Actor* InViewer;//[Offset: 0x8, Size: 1]
	Actor* ViewTarget;//[Offset: 0x10, Size: 1]
	Vector ViewLocation;//[Offset: 0x18, Size: 1]
	Vector ViewDir;//[Offset: 0x24, Size: 1]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xb8, Size: 1]
	Model* Model;//[Offset: 0xc0, Size: 1]
	ModelComponent*[] ModelComponents;//[Offset: 0xc8, Size: 1]
	LevelActorContainer* ActorCluster;//[Offset: 0xd8, Size: 1]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe0, Size: 1]
	int NumTextureStreamingDirtyResources;//[Offset: 0xe4, Size: 1]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xe8, Size: 1]
	NavigationObjectBase* NavListStart;//[Offset: 0xf0, Size: 1]
	NavigationObjectBase* NavListEnd;//[Offset: 0xf8, Size: 1]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x100, Size: 1]
	float LightmapTotalSize;//[Offset: 0x110, Size: 1]
	float ShadowmapTotalSize;//[Offset: 0x114, Size: 1]
	Vector[] StaticNavigableGeometry;//[Offset: 0x118, Size: 1]
	Guid[] StreamingTextureGuids;//[Offset: 0x128, Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x1d0, Size: 1]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e0, Size: 1]
	IntVector LightBuildLevelOffset;//[Offset: 0x1e8, Size: 1]
	byte LightingScenarioQuality;//[Offset: 0x1f4, Size: 1]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f5, Size: 1]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f5, Size: 1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f5, Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f5, Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 1]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 1]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 1]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x448, Size: 1]

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x220, Size: 1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x2d74e00
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x45d3140
	bool RemoteEvent(FName EventName);// 0x45d2890
	void LevelReset();// 0x2d74e00

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 1]
	int Y;//[Offset: 0x4, Size: 1]
	int Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x228, Size: 1]
	BillboardComponent* GoodSprite;//[Offset: 0x230, Size: 1]
	BillboardComponent* BadSprite;//[Offset: 0x238, Size: 1]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240, Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x430, Size: 1]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x438, Size: 1]
	float ScreenSize;//[Offset: 0x43c, Size: 1]
	float U;//[Offset: 0x440, Size: 1]
	float UL;//[Offset: 0x444, Size: 1]
	float V;//[Offset: 0x448, Size: 1]
	float VL;//[Offset: 0x44c, Size: 1]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x451c7b0
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x451c630
	void SetSprite(Texture2D* NewSprite);// 0x451c5a0

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 1]
	byte LightingScenarioQuality;//[Offset: 0x29, Size: 1]
	bool bIsDataStripped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 1]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 1]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 1]
	Transform LevelTransform;//[Offset: 0x80, Size: 1]
	int LevelLODIndex;//[Offset: 0xb4, Size: 1]
	int StreamingPriority;//[Offset: 0xb8, Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xbe, Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xbe, Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xbe, Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xbe, Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xbe, Size: 1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbf, Size: 1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbf, Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xbf, Size: 1]
	LinearColor LevelColor;//[Offset: 0xc0, Size: 1]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xd0, Size: 1]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xe0, Size: 1]
	bool bExcludeFromAutomatedLightBake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	MulticastInlineDelegateProperty OnLevelLoaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelUnloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelShown;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelHidden;//[Size: 1]
	Level* LoadedLevel;//[Offset: 0x130, Size: 1]
	Level* PendingUnloadLevel;//[Offset: 0x138, Size: 1]
	bool ShouldBeLoaded();// 0x3d93b30
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x45d3f40
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x45633c0
	void SetPriority(int NewPriority);// 0x45d3d40
	void SetLevelLODIndex(int LODIndex);// 0x45d36b0
	bool IsStreamingStatePending();// 0x45d2470
	bool IsLevelVisible();// 0x45d2440
	bool IsLevelLoaded();// 0x45d2410
	FName GetWorldAssetPackageFName();// 0x45d23a0
	Level* GetLoadedLevel();// 0x27fc5f0
	LevelScriptActor* GetLevelScriptActor();// 0x45d22f0
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x45d2210

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x258, Size: 1]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x268, Size: 1]
	byte StreamingUsage;//[Offset: 0x26c, Size: 1]

--------------------------------
Class: StreamingLevelsToConsider
	LevelStreamingWrapper[] StreamingLevels;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelStreamingWrapper
	LevelStreaming* StreamingLevel;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x870, Size: 1]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xc84, Size: 1]
	MulticastRecordOptions[] MulticastRecordOptions;//[Offset: 0xcb8, Size: 1]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	PlayerController*[] SpectatorControllers;//[Offset: 0xd20, Size: 1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 1]
	Level* Level;//[Offset: 0x38, Size: 1]
	Object*[] ObjReferences;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: MulticastRecordOptions
	FString FuncPathName;//[Offset: 0x0, Size: 1]
	bool bServerSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bClientSkip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 1]
	FName AISystemModuleName;//[Offset: 0x40, Size: 1]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 1]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 1]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 1]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 1]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 1]
	float TestHeightDifference;//[Offset: 0x44, Size: 1]
	float HeightCheckMargin;//[Offset: 0x48, Size: 1]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x451c270
	int GetObjectCount();// 0x451c180
	int GetNewAvoidanceUID();// 0x451c150
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x451c0b0

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 1]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 1]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 1]
	Level* PersistentLevel;//[Offset: 0x20, Size: 1]
	<Level*> Levels;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 1]

--------------------------------
Class: WorldComposition.Object
	LevelStreaming*[] TilesStreaming;//[Offset: 0x48, Size: 1]
	double TilesStreamingTimeThreshold;//[Offset: 0x58, Size: 1]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	float RebaseOriginDistance;//[Offset: 0x64, Size: 1]

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 1]
	ParticleSystemComponent*[] InUseComponents_Auto;//[Offset: 0x10, Size: 1]
	ParticleSystemComponent*[] InUseComponents_Manual;//[Offset: 0x20, Size: 1]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 1]

--------------------------------
Class: HirezObjectPool
	<class Object,HirezObjectPoolItem> PoolsByClass;//[Offset: 0x0, Size: 1]
	HirezObjectPoolQueuedEntry[] QueuedEntries;//[Offset: 0x50, Size: 1]

--------------------------------
Class: HirezObjectPoolItem
	FName[] FreeNames;//[Offset: 0x0, Size: 1]

--------------------------------
Class: HirezObjectPoolQueuedEntry
	int FramesLeft;//[Offset: 0x0, Size: 1]
	class Object* MyClass;//[Offset: 0x8, Size: 1]
	FName MyName;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSWorldSettings.PGame_WorldSettings.WorldSettings.Info.Actor.Object
	bool bUseLowDrainBatteryMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	ParticleSystemPoolComponent* ParticleSystemPoolComponent;//[Offset: 0x3e8, Size: 1]
	DecalPoolComponent* DecalPoolComponent;//[Offset: 0x3f0, Size: 1]
	GunshotDecalPoolComponent* GunshotDecalPoolComponent;//[Offset: 0x3f8, Size: 1]
	FootprintDecalPoolComponent* FootprintDecalPoolComponent;//[Offset: 0x400, Size: 1]
	SkeletalMeshPoolComponent* SkeletalMeshPoolComponent;//[Offset: 0x408, Size: 1]
	StaticMeshPoolComponent* StaticMeshPoolComponent;//[Offset: 0x410, Size: 1]
	TracerParticlePoolComponent* TracerParticlePoolComponent;//[Offset: 0x418, Size: 1]
	TracerStaticMeshPoolComponent* TracerStaticMeshPoolComponent;//[Offset: 0x420, Size: 1]
	AkPoolComponent* AkPoolComponent;//[Offset: 0x428, Size: 1]
	int EchoRequestCount;//[Offset: 0x430, Size: 1]
	FString FriendlyAudioName;//[Offset: 0x448, Size: 1]
	FString FriendlyAchievementName;//[Offset: 0x458, Size: 1]
	GameplayTag[] MapTags;//[Offset: 0x468, Size: 1]
	class KSAudioPlayer* AudioPlayerToSpawn;//[Offset: 0x478, Size: 1]
	BakedOcclusionLUT* AudioOcclusionLUT;//[Offset: 0x4a0, Size: 1]
	<FName,bool> BoolPropertyMap;//[Offset: 0x4a8, Size: 1]
	<FName,int> IntPropertyMap;//[Offset: 0x4f8, Size: 1]
	<FName,float> FloatPropertyMap;//[Offset: 0x548, Size: 1]
	void LevelActorDestroyed(Actor* TheActor);// 0x2895590

--------------------------------
Class: PGame_WorldSettings.WorldSettings.Info.Actor.Object
	class Actor[] ActorsToAlwaysSpawn;//[Offset: 0x3a0, Size: 1]
	FString[] HighMemorySublevelSuffixes;//[Offset: 0x3b0, Size: 1]
	FString[] LowMemorySublevelSuffixes;//[Offset: 0x3c0, Size: 1]

--------------------------------
Class: ParticleSystemPoolComponent.ParticleSystemPoolComponentBase.BasePoolComponent.ActorComponent.Object

--------------------------------
Class: ParticleSystemPoolComponentBase.BasePoolComponent.ActorComponent.Object
	class ParticleSystemComponent* PooledParticleSystemComponentClass;//[Offset: 0xd8, Size: 1]
	ParticleSystemComponent*[] UnusedComponentsArray;//[Offset: 0xe0, Size: 1]
	<ParticleSystemComponent*> UsedComponentsSet;//[Offset: 0xf0, Size: 1]
	ParticleSystemComponent* PeekedParticleSystemComponent;//[Offset: 0x140, Size: 1]
	bool bClearTemplateWhenReturnedToPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 1]
	void OnPSCFinished(ParticleSystemComponent* InPSC);// 0xfcf9f0

--------------------------------
Class: BasePoolComponent.ActorComponent.Object
	int MaxPoolSize;//[Offset: 0xb0, Size: 1]
	int StartingPoolSize;//[Offset: 0xb4, Size: 1]
	FString ComponentClassName;//[Offset: 0xb8, Size: 1]
	enum OverflowType;//[Offset: 0xc8, Size: 1]

--------------------------------
Class: DecalPoolComponent.BasePoolComponent.ActorComponent.Object
	class PoolableDecalComponent* PooledDecalComponentClass;//[Offset: 0xd8, Size: 1]
	PoolableDecalComponent*[] UnusedComponentsArray;//[Offset: 0xe0, Size: 1]
	<PoolableDecalComponent*> UsedComponentsSet;//[Offset: 0xf0, Size: 1]
	PoolableDecalComponent* PeekedDecalComponent;//[Offset: 0x140, Size: 1]

--------------------------------
Class: PoolableDecalComponent.DecalComponent.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnDecalReturnedToPoolDelegate;//[Size: 1]
	bool bInUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	void ForceReturnToPool();// 0xfcf750

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x208, Size: 1]
	int SortOrder;//[Offset: 0x210, Size: 1]
	float FadeScreenSize;//[Offset: 0x214, Size: 1]
	float FadeStartDelay;//[Offset: 0x218, Size: 1]
	float FadeDuration;//[Offset: 0x21c, Size: 1]
	float FadeInDuration;//[Offset: 0x220, Size: 1]
	float FadeInStartDelay;//[Offset: 0x224, Size: 1]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 1]
	Vector DecalSize;//[Offset: 0x22c, Size: 1]
	void SetSortOrder(int Value);// 0x4541bf0
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x4541af0
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x45419e0
	void SetFadeIn(float StartDelay, float Duaration);// 0x4541920
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x45418a0
	float GetFadeStartDelay();// 0x4541640
	float GetFadeInStartDelay();// 0x4541610
	float GetFadeInDuration();// 0x45415e0
	float GetFadeDuration();// 0x45415b0
	MaterialInterface* GetDecalMaterial();// 0x4541580
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x4540cb0

--------------------------------
Class: GunshotDecalPoolComponent.DecalPoolComponent.BasePoolComponent.ActorComponent.Object

--------------------------------
Class: FootprintDecalPoolComponent.DecalPoolComponent.BasePoolComponent.ActorComponent.Object

--------------------------------
Class: SkeletalMeshPoolComponent.BasePoolComponent.ActorComponent.Object
	SkeletalMeshComponent*[] UnusedComponentsArray;//[Offset: 0xd8, Size: 1]
	<SkeletalMeshComponent*> UsedComponentsSet;//[Offset: 0xe8, Size: 1]
	SkeletalMeshComponent* PeekedSkeletalMeshComponent;//[Offset: 0x138, Size: 1]
	class SkeletalMeshComponent* PooledSkeletalMeshComponentClass;//[Offset: 0x140, Size: 1]

--------------------------------
Class: StaticMeshPoolComponent.BasePoolComponent.ActorComponent.Object
	StaticMeshComponent*[] UnusedComponentsArray;//[Offset: 0xd8, Size: 1]
	<StaticMeshComponent*> UsedComponentsSet;//[Offset: 0xe8, Size: 1]
	StaticMeshComponent* PeekedStaticMeshComponent;//[Offset: 0x138, Size: 1]
	class StaticMeshComponent* PooledStaticMeshComponentClass;//[Offset: 0x140, Size: 1]

--------------------------------
Class: TracerParticlePoolComponent.ParticleSystemPoolComponentBase.BasePoolComponent.ActorComponent.Object
	void OnTracerDestinationReached(SceneComponent* TracerComponent);// 0x285f2a0

--------------------------------
Class: TracerStaticMeshPoolComponent.BasePoolComponent.ActorComponent.Object
	class TracerStaticMeshComponent* PooledTraceStaticMeshComponentClass;//[Offset: 0xd8, Size: 1]
	TracerStaticMeshComponent*[] UnusedComponentsArray;//[Offset: 0xe0, Size: 1]
	<TracerStaticMeshComponent*> UsedComponentsSet;//[Offset: 0xf0, Size: 1]
	TracerStaticMeshComponent* PeekedTracerStaticMeshComponent;//[Offset: 0x140, Size: 1]
	void OnTracerDestinationReached(SceneComponent* TracerComponent);// 0xfcf9f0

--------------------------------
Class: TracerStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector start;//[Offset: 0x4f0, Size: 1]
	Vector end;//[Offset: 0x4fc, Size: 1]
	float TravelSpeed;//[Offset: 0x508, Size: 1]
	bool bDestroyOnDestinationReached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	bool bEnableTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50d, Size: 1]
	MulticastInlineDelegateProperty OnTracerParticleReachedDestiniationDel;//[Size: 1]

--------------------------------
Class: AkPoolComponent.BasePoolComponent.ActorComponent.Object
	class AkComponent* PooledAkComponentClass;//[Offset: 0xd8, Size: 1]
	AkComponent*[] UnusedComponentsArray;//[Offset: 0xe0, Size: 1]
	<AkComponent*> UsedComponentsSet;//[Offset: 0xf0, Size: 1]
	AkComponent* PeekedAkComponent;//[Offset: 0x140, Size: 1]

--------------------------------
Class: AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	byte OcclusionCollisionChannel;//[Offset: 0x230, Size: 1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x234, Size: 1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x238, Size: 1]
	FString EarlyReflectionAuxBusName;//[Offset: 0x240, Size: 1]
	int EarlyReflectionOrder;//[Offset: 0x250, Size: 1]
	float EarlyReflectionBusSendGain;//[Offset: 0x254, Size: 1]
	float EarlyReflectionMaxPathLength;//[Offset: 0x258, Size: 1]
	float roomReverbAuxBusGain;//[Offset: 0x25c, Size: 1]
	int diffractionMaxEdges;//[Offset: 0x260, Size: 1]
	int diffractionMaxPaths;//[Offset: 0x264, Size: 1]
	float diffractionMaxPathLength;//[Offset: 0x268, Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c, Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c, Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26c, Size: 1]
	bool DrawDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26c, Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	float CurrentMaxAttenuation;//[Offset: 0x274, Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x278, Size: 1]
	float OcclusionRefreshInterval;//[Offset: 0x27c, Size: 1]
	bool bUseReverbVolumes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0xf3bdb0
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0xf3bbd0
	void SetSwitch(AkSwitchValue* SwitchValue, FString SwitchGroup, FString SwitchState);// 0xf3b9f0
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0xf3b960
	void SetRTPCValue(AkRtpc* RTPCValue, float Value, int InterpolationTimeMs, FString RTPC);// 0xf3b800
	void SetOutputBusVolume(float BusVolume);// 0xf3b780
	void SetListeners(out const AkComponent*[] Listeners);// 0xf3b6d0
	void SetEarlyReflectionsVolume(float SendVolume);// 0xf3b5c0
	void SetEarlyReflectionsAuxBus(FString AuxBusName);// 0xf3b520
	void SetAttenuationScalingFactor(float Value);// 0xf3b420
	void PostTrigger(AkTrigger* TriggerValue, FString Trigger);// 0xf3b1c0
	void PostAssociatedAkEventAndWaitForEndAsync(out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf3b000
	int PostAssociatedAkEventAndWaitForEnd(out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf3aea0
	int PostAkEventByName(FString in_EventName);// 0xf3adf0
	void PostAkEventAndWaitForEndAsync(AkAudioEvent* AkEvent, out int PlayingID, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf3ac20
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf3aa40
	void GetRTPCValue(AkRtpc* RTPCValue, enum InputValueType, out float Value, out enum OutputValueType, FString RTPC, int PlayingID);// 0xf3a640
	float GetAttenuationRadius();// 0xf3a580

--------------------------------
Class: AkGameObject.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkAudioEvent;//[Offset: 0x208, Size: 1]
	FString EventName;//[Offset: 0x210, Size: 1]
	void Stop();// 0xf40890
	void PostAssociatedAkEventAsync(const Object* WorldContextObject, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo, out int PlayingID);// 0xf3e810
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources);// 0xf3e680
	void PostAkEventAsync(const Object* WorldContextObject, AkAudioEvent* AkEvent, out int PlayingID, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, LatentActionInfo LatentInfo);// 0xf3df40
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, out const AkExternalSourceInfo[] ExternalSources, FString in_EventName);// 0xf3dd20

--------------------------------
Class: AkAuxBus.AkAssetBase.AkAudioType.Object
	AkAudioBank* RequiredBank;//[Offset: 0x58, Size: 1]

--------------------------------
Class: AkAssetBase.AkAudioType.Object
	AkAssetPlatformData* PlatformAssetData;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkAudioType.Object
	uint32 ShortID;//[Offset: 0x28, Size: 1]
	Object*[] UserData;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AkAudioBank.AkAssetBase.AkAudioType.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x60, Size: 1]
	AkAssetPlatformData* CurrentLocalizedPlatformAssetData;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: AkAssetPlatformData.Object
	AkAssetData* CurrentAssetData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: AkAssetData.Object

--------------------------------
Class: AkAudioEvent.AkAssetBase.AkAudioType.Object
	float AutomaticMaxAttenuationRadius;//[Offset: 0x58, Size: 1]
	<FString,AkAssetPlatformData*> LocalizedPlatformAssetDataMap;//[Offset: 0x60, Size: 1]
	AkAudioBank* RequiredBank;//[Offset: 0xb0, Size: 1]
	AkAssetPlatformData* CurrentLocalizedPlatformData;//[Offset: 0xb8, Size: 1]
	float MinimumDuration();// 0xf3a9f0
	float MaximumDuration();// 0xf3a940
	float MaxAttenuationRadius();// 0xf3a910
	bool IsInfinite();// 0xf3a8b0
	float GetMaxAttenuationRadius();// 0xf3a610

--------------------------------
Class: AkSwitchValue.AkGroupValue.AkAudioType.Object

--------------------------------
Class: AkGroupValue.AkAudioType.Object
	uint32 GroupShortID;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkRtpc.AkAudioType.Object

--------------------------------
Class: AkTrigger.AkAudioType.Object

--------------------------------
Class: AkExternalSourceInfo
	FString ExternalSrcName;//[Offset: 0x0, Size: 1]
	enum CodecID;//[Offset: 0x10, Size: 1]
	FString Filename;//[Offset: 0x18, Size: 1]
	AkExternalMediaAsset* ExternalSourceAsset;//[Offset: 0x28, Size: 1]
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AkExternalMediaAsset.AkMediaAsset.Object

--------------------------------
Class: AkMediaAsset.Object
	uint32 ID;//[Offset: 0x28, Size: 1]
	Object*[] UserData;//[Offset: 0x30, Size: 1]
	AkMediaAssetData* CurrentMediaAssetData;//[Offset: 0x40, Size: 1]

--------------------------------
Class: AkMediaAssetData.Object
	bool IsStreamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool UseDeviceMemory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]

--------------------------------
Class: GameplayTag
	FName TagName;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSAudioPlayer.Info.Actor.Object
	<enum,KSAudioPlayerEventActionData*> GameplayEventActionMap;//[Offset: 0x220, Size: 1]
	<FString,KSAudioPlayerEventActionData*> CustomEventActionMap;//[Offset: 0x270, Size: 1]
	ViewRouteChangeAction[] ViewRouteChangedActionMap;//[Offset: 0x2c0, Size: 1]
	<FString,KSAudioPlayerEventActionData*> MapLevelStartEventActionMap;//[Offset: 0x2d0, Size: 1]
	<FString,KSAudioPlayerEventActionData*> MapLevelEndEventActionMap;//[Offset: 0x320, Size: 1]
	<FString,KSAudioPlayerEventActionData*> CinematicSubLevelStartEventActionMap;//[Offset: 0x370, Size: 1]
	<FString,KSAudioPlayerEventActionData*> CinematicSubLevelEndEventActionMap;//[Offset: 0x3c0, Size: 1]
	<FString,KSAudioPlayerEventActionData*> GameModeStartEventActionMap;//[Offset: 0x410, Size: 1]
	<FString,KSAudioPlayerEventActionData*> GameModeEndEventActionMap;//[Offset: 0x460, Size: 1]
	<FString,KSAudioPlayerEventActionData*> PlayerCharacterStartEventActionMap;//[Offset: 0x4b0, Size: 1]
	<FString,KSAudioPlayerEventActionData*> PlayerCharacterEndEventActionMap;//[Offset: 0x500, Size: 1]
	<FString,KSAudioPlayerEventActionData*> MusicPackStartEventActionMap;//[Offset: 0x550, Size: 1]
	<FString,KSAudioPlayerEventActionData*> MusicPackEndEventActionMap;//[Offset: 0x5a0, Size: 1]
	KSAudioPlayerEventActionData* AudioPlayerBeginPlayEventActionData;//[Offset: 0x5f0, Size: 1]
	KSAudioPlayerEventActionData* AudioPlayerEndPlayEventActionData;//[Offset: 0x5f8, Size: 1]
	KSAudioPlayerEventActionData*[] ExclusiveAudioEventsFired;//[Offset: 0x600, Size: 1]
	void HandleRoundHasEnded(int RoundWinner, int MatchWinner);// 0x26e32e0
	FString[] ComposeEventNamePriorityArray(FString EventName, KSAudioPlayerStateParameterData* CurrentStateParameters);// 0x2d74e00
	FString[] ComposeBankNamePriorityArray(FString BankPrefix, KSAudioPlayerStateParameterData* CurrentStateParameters);// 0x2d74e00

--------------------------------
Class: KSAudioPlayerStateParameterData.Object
	FString ActiveGameMode;//[Offset: 0x28, Size: 1]
	FString ActiveMapLevel;//[Offset: 0x38, Size: 1]
	FString[] ActiveCinematicSubLevels;//[Offset: 0x48, Size: 1]
	FString ActiveMusicPack;//[Offset: 0x58, Size: 1]
	FString ActivePlayerCharacter;//[Offset: 0x68, Size: 1]
	bool IsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	FString PreviousGameMode;//[Offset: 0x80, Size: 1]
	FString PreviousMapLevel;//[Offset: 0x90, Size: 1]
	FString[] PreviousCinematicSubLevels;//[Offset: 0xa0, Size: 1]
	FString PreviousMusicPack;//[Offset: 0xb0, Size: 1]
	FString PreviousPlayerCharacter;//[Offset: 0xc0, Size: 1]
	bool PreviousIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool HasActivePlayerCharacter();// 0x26e7670
	bool HasActiveMusicPack();// 0x26e7620
	bool HasActiveMapLevel();// 0x26e75d0
	bool HasActiveGameMode();// 0x26e7580
	FString GetPreviousPlayerCharacter();// 0x26e6e30
	FString GetPreviousMusicPack();// 0x26e6d70
	FString GetPreviousMapLevel();// 0x26e6cb0
	bool GetPreviousIsSpectating();// 0x26e6c90
	FString GetPreviousGameMode();// 0x26e6bd0
	FString[] GetPreviousCinematicSubLevels();// 0x26e6ba0
	bool GetIsSpectating();// 0x26e68b0
	FString GetActivePlayerCharacter();// 0xe268f0
	FString GetActiveMusicPack();// 0x26e6210
	FString GetActiveMapLevel();// 0x26e6150
	FString GetActiveGameMode();// 0x26e6090
	FString[] GetActiveCinematicSubLevels();// 0x26e6060

--------------------------------
Class: KSAudioPlayerEventActionData.DataAsset.Object
	FString[] BanksToLoad;//[Offset: 0x30, Size: 1]
	FString[] BanksToUnload;//[Offset: 0x40, Size: 1]
	FString[] ContainersToPlay;//[Offset: 0x50, Size: 1]
	FString[] ContainersToStop;//[Offset: 0x60, Size: 1]
	FString[] TablesToLoad;//[Offset: 0x70, Size: 1]
	FString[] TablesToUnload;//[Offset: 0x80, Size: 1]
	FString[] EventsToPost;//[Offset: 0x90, Size: 1]
	<FString,GlobalRTPCData> GlobalRTPCsToSet;//[Offset: 0xa0, Size: 1]
	bool bFireOnceARound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]

--------------------------------
Class: GlobalRTPCData
	float Value;//[Offset: 0x0, Size: 1]
	int InterpTimeMS;//[Offset: 0x4, Size: 1]

--------------------------------
Class: ViewRouteChangeAction
	FName NewRoute;//[Offset: 0x0, Size: 1]
	FName PreviousRoute;//[Offset: 0x8, Size: 1]
	KSAudioPlayerEventActionData* EventActionData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BakedOcclusionLUT.Object
	<uint32,byte> LUT;//[Offset: 0x28, Size: 1]
	uint16[] OctreeSampleMap;//[Offset: 0x78, Size: 1]
	IntVector[] OctreeLocations;//[Offset: 0x88, Size: 1]

--------------------------------
Class: InstancedFoliageActor.Actor.Object

--------------------------------
Class: KSViewModel.Actor.Object
	FName ViewModelName;//[Offset: 0x2e0, Size: 1]
	Rotator DefaultViewModelRotationOverride;//[Offset: 0x2e8, Size: 1]
	bool bIsRotatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	Vector MaxAxisRotation;//[Offset: 0x2f8, Size: 1]
	float IdleSecondsToResetRotation;//[Offset: 0x304, Size: 1]
	float ResetRotationSpeedRadians;//[Offset: 0x308, Size: 1]
	Vector RotationRatePerAxis;//[Offset: 0x30c, Size: 1]
	bool bForceOverrideViewModelRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 1]
	KSViewModel_WeaponAsset* WeaponAssetChildActor;//[Offset: 0x328, Size: 1]
	KSSupplyDropViewModelActor* SupplyDropActor;//[Offset: 0x330, Size: 1]
	float ModelUpdateDebounceTime;//[Offset: 0x338, Size: 1]
	bool bClearActiveModelWhileTransitioning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	void BeginRotationReset();// 0x285f280
	void BeginRestQuatRotation();// 0x285f250

--------------------------------
Class: KSViewModel_WeaponAsset.Actor.Object
	FName ViewModelName;//[Offset: 0x248, Size: 1]
	KSEquipmentContainer EquipmentContainer;//[Offset: 0x250, Size: 1]
	bool bModelDataIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	KSWeaponAsset* DesiredWeaponAsset;//[Offset: 0x4b8, Size: 1]
	<byte,KSWeaponAttachment*> DesiredAttachments;//[Offset: 0x4c0, Size: 1]
	KSWeaponComponent* ActiveWeaponComponent;//[Offset: 0x510, Size: 1]
	KSWeaponAttachmentCosmeticInst*[] ActiveAttachmentCosmetics;//[Offset: 0x518, Size: 1]
	KSWeaponSkeletalMeshComponent* ActiveWeaponModelMeshComponent;//[Offset: 0x528, Size: 1]
	KSEquipmentId PendingWeaponComponentId;//[Offset: 0x530, Size: 1]
	KSWeaponAsset* PendingWeaponAsset;//[Offset: 0x538, Size: 1]
	KSWeaponComponent* PendingWeaponComponent;//[Offset: 0x540, Size: 1]
	<KSEquipmentId> PendingWeaponCosmeticIds;//[Offset: 0x548, Size: 1]
	PendingCosmeticInfo[] PendingInfos;//[Offset: 0x598, Size: 1]
	float ModelUpdateDebounceTime;//[Offset: 0x5a8, Size: 1]
	bool bClearActiveModelWhileTransitioning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	void OnAnimInstanceInitialized();// 0x285f9b0
	KSSkeletalMeshComponent* GetKSSkeletalMeshComponent();// 0x285f840

--------------------------------
Class: KSSkeletalMeshComponent.SkinnableMergedMeshComponent.SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bForceTextureResidentFlagOnAllTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 1]
	float TeleportDistanceDeltaThreshold;//[Offset: 0xd68, Size: 1]
	bool bEnableDedicatedServerRequiredBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd88, Size: 1]
	FName[] RequiredDedicatedServerBoneNames;//[Offset: 0xd90, Size: 1]
	void SetTeleportDistanceDeltaThreshold(float Threshold);// 0x2848d30
	void SetForceTextureResidentFlag(bool bEnable);// 0x2848ca0
	float GetTeleportDistanceDeltaThreshold();// 0x28484e0
	bool GetForceTextureResidentFlag();// 0x2847fa0

--------------------------------
Class: SkinnableMergedMeshComponent.SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnMeshMergeComplete;//[Size: 1]
	FName[] CompositeSkeletalMeshKeywords;//[Offset: 0xd08, Size: 1]
	bool bAlwaysUseTheFailsafeMeshWhileMerging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd18, Size: 1]
	FName MeshNeedsCPUAccessKeyword;//[Offset: 0xd1c, Size: 1]
	bool bDelayFullSkinUpdateUntilMeshMergingIsComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd24, Size: 1]
	SkeletalMesh* BestPlaceHolderMesh;//[Offset: 0xd28, Size: 1]
	bool bMergeMarkedComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 1]
	SkeletalMesh* CachedMergeResult;//[Offset: 0xd38, Size: 1]
	void SetSkeletalMeshKeywords(out const FName[] InKeywords, SkeletalMesh* InFailSafeSkeletalMesh);// 0xfa9180
	void RemoveSkeletalMeshKeyword(FName InKeyword);// 0xfa7c60
	void OnMeshMergeComplete__DelegateSignature();// 0x2d74e00
	void AddSkeletalMeshKeyword(FName InKeyword);// 0xfa4fe0

--------------------------------
Class: SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bDelaySkinUpdatesUntilTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb0, Size: 1]
	bool bSkinUpdateIsQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb1, Size: 1]
	FName SkeletalMeshKeyword;//[Offset: 0xbb4, Size: 1]
	SkeletalMesh* FailSafeSkeletalMesh;//[Offset: 0xbc0, Size: 1]
	FName PhysicsAssetKeyword;//[Offset: 0xbc8, Size: 1]
	PhysicsAsset* FailSafePhysicsAsset;//[Offset: 0xbd0, Size: 1]
	FName AnimInstanceClassKeyword;//[Offset: 0xbd8, Size: 1]
	class AnimInstance* FailSafeAnimClass;//[Offset: 0xbe0, Size: 1]
	class AnimInstance* LastSkinnedAnimClass;//[Offset: 0xbe8, Size: 1]
	bool bForceAnimationUpdateOnSkinUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf0, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0xbf8, Size: 1]
	MulticastInlineDelegateProperty OnAnimInitializedOnSkinnableMeshDel;//[Size: 1]
	bool bAllowMaterialSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40, Size: 1]
	FString[] MaterialSkinningPrefixes;//[Offset: 0xc48, Size: 1]
	<FName> MaterialSkinningPrefixes_New;//[Offset: 0xc58, Size: 1]
	int ForcedLodModel_Skinned;//[Offset: 0xcf0, Size: 1]
	static void StaticSetForcedLOD(SkinnedMeshComponent* InMeshComp, int InForcedLOD);// 0xfa9350
	void SetSkeletalMeshKeyword(FName InKeyword, SkeletalMesh* InFailSafeSkeletalMesh);// 0xfa90b0
	void SetPhysicsAssetKeyword(FName InKeyword, PhysicsAsset* InFailSafePhysicsAsset);// 0xfa8fe0
	int SetPersistentVectorParameterOnAllMaterials(FName ParameterName, LinearColor ParameterValue, bool bForceNewOverride);// 0xfa8dc0
	int SetPersistentVectorParameter(int MaterialSlot, FName ParameterName, LinearColor ParameterValue, bool bForceNewOverride);// 0xfa8b00
	int SetPersistentTextureParameterOnAllMaterials(FName ParameterName, Texture* ParameterValue, bool bForceNewOverride);// 0xfa8900
	int SetPersistentTextureParameter(int MaterialSlot, FName ParameterName, Texture* ParameterValue, bool bForceNewOverride);// 0xfa8680
	int SetPersistentScalarParameterOnAllMaterials(FName ParameterName, float ParameterValue, bool bForceNewOverride);// 0xfa8460
	int SetPersistentScalarParameter(int MaterialSlot, FName ParameterName, float ParameterValue, bool bForceNewOverride);// 0xfa81c0
	int SetPersistentMaterialOverrideOnAllSlots(MaterialInterface* MaterialInterface, bool bForceNewOverride);// 0xfa8040
	int SetPersistentMaterialOverride(int MaterialSlot, MaterialInterface* MaterialInterface, bool bForceNewOverride);// 0xfa7e40
	void SetForcedLOD_Skinned(int InNewForcedLOD);// 0xfa7dc0
	void SetAnimClassKeyword(FName InKeyword, class AnimInstance InFailSafeAnimClass);// 0xfa7cf0
	void RemovePersistentMaterialParameter(int ParameterId);// 0xfa7b60
	MultiSkinObject* GetSkinObject();// 0xfa7600
	void ForwardAnimInitialized();// 0xfa56d0
	bool ChangePersistentVectorOverrideById(int ParameterId, LinearColor ParameterValue);// 0xfa5510
	bool ChangePersistentTextureOverrideById(int ParameterId, Texture* ParameterValue);// 0xfa5390
	bool ChangePersistentScalarOverrideById(int ParameterId, float ParameterValue);// 0xfa51f0
	bool ChangePersistentMaterialOverrideById(int ParameterId, MaterialInterface* MaterialInterface);// 0xfa5070

--------------------------------
Class: SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xba8, Size: 1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xba8, Size: 1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xba8, Size: 1]
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0xf75710

--------------------------------
Class: MultiSkinObject.Object
	MultiSkinObject*[] ParentSkinnedObjects;//[Offset: 0x28, Size: 1]
	MultiSkinObject*[] ChildSkinnedObjects;//[Offset: 0x38, Size: 1]
	<FName> SubscribedKeywords;//[Offset: 0x48, Size: 1]
	<FName> SubscribedMaterialPrefixes;//[Offset: 0x98, Size: 1]
	bool bSubscribeToAllKeywords;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 1]
	bool bWantsToBeRecycled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 1]
	MulticastInlineDelegateProperty OnFinishedAllPendingLoadsDel;//[Size: 1]
	<int,DynamicSkinTableMapEntry> DynamicSkinTables;//[Offset: 0x130, Size: 1]
	<FName,CachedRowsEntry> CachedRows;//[Offset: 0x180, Size: 1]
	void UnsubscribeToKeywords(out const FName[] InKeywords);// 0xfa95f0
	void UnsubscribeToKeyword(FName InKeyword);// 0xfa9570
	void UnsubscribeToAllKeywords();// 0xfa9550
	void SubscribeToKeywords(out const FName[] InKeywords);// 0xfa94a0
	void SubscribeToKeyword(FName InKeyword);// 0xfa9420
	void SubscribeToAllKeywords();// 0xfa9400
	void RemoveParent(MultiSkinObject* InParent);// 0xfa7ae0
	Texture* GetTexture(FName RowName, out int Priority);// 0xfa78b0
	StaticMesh* GetStaticMesh(FName RowName, out int Priority);// 0xfa7710
	SkeletalMesh* GetSkeletalMesh(FName RowName, out int Priority);// 0xfa7530
	SelectiveAkAudioEvent* GetSelectiveAudioEvent(FName RowName, out int Priority);// 0xfa7390
	PoseAsset* GetPoseAsset(FName RowName, out int Priority);// 0xfa71f0
	PhysicsAsset* GetPhysicsAsset(FName RowName, out int Priority);// 0xfa7050
	ParticleSystem* GetParticleSystem(FName RowName, out int Priority);// 0xfa6eb0
	FName GetNameField(FName RowName, out int Priority);// 0xfa6d00
	MaterialInterface* GetMaterialInterface(FName RowName, out int Priority);// 0xfa6b50
	LinearColor GetLinearColor(FName RowName, out int Priority);// 0xfa69a0
	int GetInt(FName RowName, out int Priority);// 0xfa67f0
	float GetFloat(FName RowName, out int Priority);// 0xfa6650
	class Object GetClass(FName RowName, out int Priority);// 0xfa64b0
	bool GetBool(FName RowName, out int Priority);// 0xfa6310
	AkAudioEvent* GetAudioEvent(FName RowName, out int Priority);// 0xfa6170
	AnimSequence* GetAnimSequence(FName RowName, out int Priority);// 0xfa5f00
	AnimMontage* GetAnimMontage(FName RowName, out int Priority);// 0xfa5d60
	BlendSpace* GetAnimBlendSpace(FName RowName, out int Priority);// 0xfa5bc0
	AimOffsetBlendSpace* GetAnimAimOffset(FName RowName, out int Priority);// 0xfa5a20
	void GetAllSkinKeywords(out <FName> InOutKeywords);// 0xfa5820
	void AddParent(MultiSkinObject* InParent);// 0xfa4f60

--------------------------------
Class: SelectiveAkAudioEvent.Object

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x80, Size: 1]
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	int BasePoseIndex;//[Offset: 0x114, Size: 1]
	FName RetargetSource;//[Offset: 0x118, Size: 1]

--------------------------------
Class: PoseDataContainer
	SmartName[] PoseNames;//[Offset: 0x0, Size: 1]
	FName[] Tracks;//[Offset: 0x10, Size: 1]
	<FName,int> TrackMap;//[Offset: 0x20, Size: 1]
	PoseData[] Poses;//[Offset: 0x70, Size: 1]
	AnimCurveBase[] Curves;//[Offset: 0x80, Size: 1]

--------------------------------
Class: PoseData
	Transform[] LocalSpacePose;//[Offset: 0x0, Size: 1]
	<int,int> TrackToBufferIndex;//[Offset: 0x10, Size: 1]
	float[] CurveData;//[Offset: 0x60, Size: 1]

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	float AnimLength;//[Offset: 0x8c, Size: 1]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 3]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 1]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 1]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 1]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 1]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 1]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 3]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 1]
	byte InterpolationType;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 1]
	float InterpolationSpeedPerSec;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 1]
	Vector SampleValue;//[Offset: 0x8, Size: 1]
	float RateScale;//[Offset: 0x14, Size: 1]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 3]
	float Weights;//[Offset: 0xc, Size: 3]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 1]
	float Min;//[Offset: 0x10, Size: 1]
	float Max;//[Offset: 0x14, Size: 1]
	int GridNum;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: DynamicSkinTableMapEntry
	DynamicSkinTable* Table;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DynamicSkinTable.Object
	DataTableInfo[] ActiveDataTables;//[Offset: 0x28, Size: 1]
	DataTableInfo[] InactiveDataTables;//[Offset: 0x38, Size: 1]
	MulticastInlineDelegateProperty OnFinishedAllPendingLoadsDel;//[Size: 1]
	bool bWantsToBeRecycled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 1]
	interface class None* SkinTagAsset;//[Offset: 0x280, Size: 1]
	void RemoveDataTables(out const DataTable*[] InTables);// 0xfa7a30
	void RemoveDataTable(DataTable* InTable);// 0xfa79b0
	bool IsTablePendingAssetLoad();// 0xfa7980
	Texture* GetTexture(FName RowName, out int Priority);// 0xfa77e0
	StaticMesh* GetStaticMesh(FName RowName, out int Priority);// 0xfa7640
	SkeletalMesh* GetSkeletalMesh(FName RowName, out int Priority);// 0xfa7460
	SelectiveAkAudioEvent* GetSelectiveAudioEvent(FName RowName, out int Priority);// 0xfa72c0
	PoseAsset* GetPoseAsset(FName RowName, out int Priority);// 0xfa7120
	PhysicsAsset* GetPhysicsAsset(FName RowName, out int Priority);// 0xfa6f80
	ParticleSystem* GetParticleSystem(FName RowName, out int Priority);// 0xfa6de0
	FName GetNameField(FName RowName, out int Priority);// 0xfa6c20
	MaterialInterface* GetMaterialInterface(FName RowName, out int Priority);// 0xfa6a80
	LinearColor GetLinearColor(FName RowName, out int Priority);// 0xfa68c0
	int GetInt(FName RowName, out int Priority);// 0xfa6720
	float GetFloat(FName RowName, out int Priority);// 0xfa6580
	class Object GetClass(FName RowName, out int Priority);// 0xfa63e0
	bool GetBool(FName RowName, out int Priority);// 0xfa6240
	AkAudioEvent* GetAudioEvent(FName RowName, out int Priority);// 0xfa60a0
	AnimSequence* GetAnimSequence(FName RowName, out int Priority);// 0xfa5e30
	AnimMontage* GetAnimMontage(FName RowName, out int Priority);// 0xfa5c90
	BlendSpace* GetAnimBlendSpace(FName RowName, out int Priority);// 0xfa5af0
	AnimationAsset* GetAnimationAsset(FName RowName, out int Priority);// 0xfa5fd0
	AimOffsetBlendSpace* GetAnimAimOffset(FName RowName, out int Priority);// 0xfa5950
	void GetAllKeywords(out <FName> InOutKeywords);// 0xfa56f0
	void AddDataTableWithQuery(DataTable* InTable, int InPriority, out const GameplayTagQuery InQuery);// 0xfa4d00
	void AddDataTables(out const DataTableInfo[] InTableInfos);// 0xfa4e60
	void AddDataTable(DataTable* InTable, int InPriority);// 0xfa4c40

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 1]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bIgnoreExtraFields;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bIgnoreMissingFields;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	FString ImportKeyField;//[Offset: 0x88, Size: 1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: GameplayTagQuery
	int TokenStreamVersion;//[Offset: 0x0, Size: 1]
	GameplayTag[] TagDictionary;//[Offset: 0x8, Size: 1]
	byte[] QueryTokenStream;//[Offset: 0x18, Size: 1]
	FString UserDescription;//[Offset: 0x28, Size: 1]
	FString AutoDescription;//[Offset: 0x38, Size: 1]

--------------------------------
Class: DataTableInfo
	DataTable* DataTable;//[Offset: 0x0, Size: 1]
	int TablePriority;//[Offset: 0x8, Size: 1]
	GameplayTagQuery SkinTagQuery;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CachedRowsEntry
	int Priority;//[Offset: 0x0, Size: 1]
	HardAssetTableRow Row;//[Offset: 0x8, Size: 1]

--------------------------------
Class: HardAssetTableRow.TableRowBase
	AnimationAsset* AnimationAsset;//[Offset: 0x8, Size: 1]
	AkAudioEvent* AudioEvent;//[Offset: 0x10, Size: 1]
	SelectiveAkAudioEvent* SelectiveAudioEvent;//[Offset: 0x18, Size: 1]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x20, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x28, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x30, Size: 1]
	ParticleSystem* ParticleSystem;//[Offset: 0x38, Size: 1]
	MaterialInterface* MaterialInterface;//[Offset: 0x40, Size: 1]
	Texture* Texture;//[Offset: 0x48, Size: 1]
	class Object* Class;//[Offset: 0x50, Size: 1]
	bool Bool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	float float;//[Offset: 0x5c, Size: 1]
	LinearColor LinearColor;//[Offset: 0x60, Size: 1]
	int Int;//[Offset: 0x70, Size: 1]
	FName NameField;//[Offset: 0x74, Size: 1]

--------------------------------
Class: TableRowBase

--------------------------------
Class: KSEquipmentContainer.FastArraySerializer
	Actor* Owner;//[Offset: 0x108, Size: 1]
	interface class None* OwnerAsEquipmentContainerOwner;//[Offset: 0x110, Size: 1]
	<KSEquipmentId,KSEquipmentContainerEntry> PendingEquipment;//[Offset: 0x120, Size: 1]
	KSEquipmentContainerEntry[] Equipment;//[Offset: 0x170, Size: 1]
	KSEquipmentContainerEntry[] PropEquipment;//[Offset: 0x180, Size: 1]
	uint16 NextEquipmentId;//[Offset: 0x190, Size: 1]
	uint16 NextPropId;//[Offset: 0x192, Size: 1]
	KSEquipmentContainerEntry[] StaleEquipment;//[Offset: 0x198, Size: 1]

--------------------------------
Class: FastArraySerializer
	int ArrayReplicationKey;//[Offset: 0x54, Size: 1]
	enum DeltaFlags;//[Offset: 0x100, Size: 1]

--------------------------------
Class: KSEquipmentContainerEntry.FastArraySerializerItem
	uint16 EquipmentId;//[Offset: 0xc, Size: 1]
	uint16 ParentEquipmentId;//[Offset: 0x10, Size: 1]
	GameplayTag EquipPoint;//[Offset: 0x14, Size: 1]
	bool bAlwaysReplicateExtraInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	uint16 ExtraInfo;//[Offset: 0x26, Size: 1]
	KSItem* Item;//[Offset: 0x30, Size: 1]
	KSItem* LocalItem;//[Offset: 0x38, Size: 1]
	bool bWeaponComponentIsReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	KSEquipmentCosmeticComponent* CosmeticComponent;//[Offset: 0x44, Size: 1]
	KSWeaponAttachmentCosmeticInst* AttachmentCosmeticComponent;//[Offset: 0x4c, Size: 1]
	bool bMarkedStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	KSItem* ParentAsset;//[Offset: 0x90, Size: 1]

--------------------------------
Class: FastArraySerializerItem
	int ReplicationID;//[Offset: 0x0, Size: 1]
	int ReplicationKey;//[Offset: 0x4, Size: 1]
	int MostRecentArrayReplicationKey;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSItemDrop* ItemDropClass;//[Offset: 0x1b8, Size: 1]
	int ItemPrice;//[Offset: 0x1e0, Size: 1]
	bool bShouldShowCTA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e4, Size: 1]
	class KSCallToActionCondition* CTAConditionClass;//[Offset: 0x1e8, Size: 1]
	enum InGameRarity;//[Offset: 0x210, Size: 1]
	GameplayTag ItemType;//[Offset: 0x214, Size: 1]
	bool bUsePreviewIconInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]
	ImageIconInfo* PreviewIconInfo;//[Offset: 0x220, Size: 1]
	Texture2D* DefaultItemIcon;//[Offset: 0x228, Size: 1]
	class UserWidget* SpecialItemWidgetClass;//[Offset: 0x230, Size: 1]
	Color ColorCode;//[Offset: 0x258, Size: 1]
	PrimaryAssetRules Rules;//[Offset: 0x25c, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x268, Size: 1]
	int AlsoInBundleLootId;//[Offset: 0x278, Size: 1]
	static bool SoftGiveToAsync(KSItem* Item, Actor* Owner, Actor* Instigator, GiveItemParameters InGiveItemParameters, out const delegate GivenToEvent);// 0x2788ff0
	static bool SoftCreateDropAsync(KSItem* Item, out const Transform SpawnTransform, const Object* WorldContextObject, DropItemParameters InDropItemParameters, out const delegate ItemDroppedEvent, bool bEnablePhysics, out const Vector InSpawnLinearVelocity, out const Vector InSpawnAngularVelocity);// 0x2788c70
	static void RemoveFromPlayerLoadout(KSItem* Item, KSPlayerState* PlayerState);// 0x2788a90
	void InitNewlyCreatedItem(int64 InItemId);// 0x2788420
	bool HasValidPurchasePreviewIcon();// 0x2788200
	bool HasMobileCollectionTag();// 0x27881d0
	static bool GiveToAsync(KSItem* Item, Actor* Owner, Actor* Instigator, GiveItemParameters InGiveItemParameters, out const delegate GivenToEvent);// 0x2787fc0
	static bool GiveTo(KSItem* Item, Actor* Owner, Actor* Instigator, GiveItemParameters InGiveItemParameters, out Object* OutObject);// 0x2787db0
	class UserWidget GetSpecialItemWidgetClass();// 0x2787d10
	int GetRarityValue();// 0x2787c10
	IconInfo* GetPurchasePreviewIconInfo();// 0x2787be0
	Texture2D* GetPurchasePreviewIcon();// 0x2787b70
	KSJobItem* GetJobItemForPreview(const Object* WorldContextObject);// 0x27872b0
	GameplayTag GetItemType();// 0x2787290
	int GetItemPrice();// 0x2787270
	class KSItemDrop GetItemDropClass();// 0x27871d0
	ItemDisplayStat[] GetItemDisplayStats();// 0x27870f0
	FText GetItemCategoryText();// 0x2787050
	enum GetInGameRarity();// 0x2787010
	FName[] GetCTAPath();// 0x2786d70
	class KSCallToActionCondition GetCTAConditionClass();// 0x2786cd0
	SoftObjectPath GetCosmeticDisplayIconPath();// 0x2786e10
	Color GetColorCode();// 0x2786df0
	static bool CreateDropAsync(KSItem* Item, out const Transform SpawnTransform, const Object* WorldContextObject, DropItemParameters InDropItemParameters, out const delegate ItemDroppedEvent, bool bEnablePhysics, out const Vector InSpawnLinearVelocity, out const Vector InSpawnAngularVelocity);// 0x2786870
	static KSItemDrop* CreateDrop(KSItem* Item, out const Transform SpawnTransform, const Object* WorldContextObject, DropItemParameters InDropItemParameters, bool bEnablePhysics, Vector InSpawnLinearVelocity, Vector InSpawnAngularVelocity);// 0x27865c0
	bool CanBePickedUpByCharacter(const KSCharacter* PotentialOwner);// 0x2786520
	bool CanBePickedUpBy(const Actor* PotentialOwner);// 0x2786400
	static bool AddToPlayerLoadout(KSItem* Item, KSPlayerState* PlayerState, out const RestoreInfoInitParams InitParams, out const GiveItemParameters GiveParams);// 0x2785d30

--------------------------------
Class: PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int ItemId;//[Offset: 0x30, Size: 1]
	FText ItemDisplayName;//[Offset: 0x38, Size: 1]
	FText ItemDescription;//[Offset: 0x50, Size: 1]
	FString FriendlySearchName;//[Offset: 0x68, Size: 1]
	bool OnlyDisplayAcqusitionIfWhitelisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	GameplayTagContainer CollectionContainer;//[Offset: 0x80, Size: 1]
	bool IsOwnableInventoryItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	int64[] DisplayableLootIds;//[Offset: 0xa8, Size: 1]
	Texture2D* ItemIcon;//[Offset: 0xb8, Size: 1]
	SoftObjectPath ItemIconPath;//[Offset: 0xe0, Size: 1]
	Texture2D* LegacyItemIconTexture;//[Offset: 0xf8, Size: 1]
	IconReference[] Icons;//[Offset: 0x120, Size: 1]
	<enum,FString> ExternalProductSkus;//[Offset: 0x130, Size: 1]
	int64[] BlackListedLootIds;//[Offset: 0x180, Size: 1]
	bool ShouldDisplayToUser(int64 LootId);// 0xe27780
	void SetItemName(FText NewItemDisplayName);// 0xe27660
	void SetItemDescription(FText NewItemDescription);// 0xe27540
	void SetFriendlySearchName(FString InFriendlyName);// 0xe274a0
	void SetCollectionContainer(out const GameplayTagContainer InContainer);// 0xe273e0
	bool IsItemTempDisabled();// 0xe273b0
	bool IsItemDisabled(bool bIncludeTempDisabled);// 0xe27320
	void GetTextureAsync(out Texture2D* Texture, out const delegate IconLoadedEvent);// 0xe271f0
	SoftObjectPath GetSoftItemIconAsPath();// 0xe27150
	Texture2D* GetSoftItemIcon();// 0xe27110
	bool GetSoftIconByName(FName IconType, out Texture2D* Icon);// 0xe27010
	bool GetSoftIconAsPathByName(FName IconType, out SoftObjectPath Icon, int CohortSize);// 0xe26ed0
	FString GetItemNameAsString();// 0xe26d80
	FText GetItemName();// 0xe26cd0
	int GetItemId();// 0xe26cb0
	FString GetItemDescriptionAsString();// 0xe26b80
	FText GetItemDescription();// 0xe26ad0
	static PlatformInventoryItem* GetItemByFriendlyName(FString InFriendlyName);// 0xe269b0
	FString GetFriendlySearchName();// 0xe268f0
	GameplayTagContainer GetCollectionContainer();// 0xe268c0

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: KSItemDrop.Actor.Object
	KSInteractableComponent* InteractableComponent;//[Offset: 0x240, Size: 1]
	KSCharacter*[] AllowedCharacters;//[Offset: 0x248, Size: 1]
	int Price;//[Offset: 0x258, Size: 1]
	bool bIsInstantPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25c, Size: 1]
	bool bAllowManualInstantPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x260, Size: 1]
	Vector SightOffset;//[Offset: 0x268, Size: 1]
	Actor*[] ActorsSeenBy;//[Offset: 0x278, Size: 1]
	bool bCanPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int AssociatedPingID;//[Offset: 0x28c, Size: 1]
	KSPlayerState* AssociatedPingPlayerState;//[Offset: 0x290, Size: 1]
	KSItem* ItemAsset;//[Offset: 0x298, Size: 1]
	bool bDestroyOnPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	MulticastInlineDelegateProperty OnItemPickup;//[Size: 1]
	KSCharacter* PendingPickupCharacter;//[Offset: 0x2d8, Size: 1]
	KSInteractionManager* CurrentInteractionManager;//[Offset: 0x2e0, Size: 1]
	KSStaticMeshComponent* CollisionMesh;//[Offset: 0x2e8, Size: 1]
	enum InactiveStencilValue;//[Offset: 0x2f3, Size: 1]
	enum ActiveStencilValue;//[Offset: 0x2f4, Size: 1]
	Rotator LootSiteSpawnRotation;//[Offset: 0x2f8, Size: 1]
	GameplayTagContainer SkinTagContainer;//[Offset: 0x308, Size: 1]
	Controller* DropHidePlayer;//[Offset: 0x340, Size: 1]
	bool bClientDropUnhide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	int OriginalOwnerId;//[Offset: 0x34c, Size: 1]
	int OriginalOwnerTeamNum;//[Offset: 0x350, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x358, Size: 1]
	bool bIsPlayerDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	enum DropPickupConfig;//[Offset: 0x369, Size: 1]
	int ObjectiveId;//[Offset: 0x36c, Size: 1]
	AkAudioEvent* PickupSound;//[Offset: 0x370, Size: 1]
	KSNudgeComponent* NudgeComponent;//[Offset: 0x378, Size: 1]
	bool bCanBeNudged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool bOnlyVisibleIfCanPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	bool ShouldShowViewedItemLabel();// 0x2788c40
	void SetInactiveStencilValue(enum Value);// 0x2788bc0
	void SetActiveStencilValue(enum Value);// 0x2788b40
	void PlayDestroyedEffects();// 0x2d74e00
	bool PickUp(KSCharacter* Receiver, bool bActivate);// 0x27889c0
	void OverridePickupFunction(out const delegate ItemPickupOverride);// 0x2788900
	void OnRootMeshDetached(KSStaticMeshComponent* ResponsibleMesh);// 0x2788880
	void OnRep_PendingPickupCharacter();// 0x2788860
	void OnRep_ObjectiveId();// 0xd13910
	void OnRep_ItemAsset();// 0x1fa1640
	void OnRep_DropHidePlayer();// 0x2788840
	delegate GetPickupDelegate();// 0x2787b40
	KSCharacter* GetPendingPickupCharacter();// 0x26cbad0
	Rotator GetLootSiteSpawnRotation();// 0x2787530
	bool GetLabelInfoForSecondaryTitle(out FText LabelText);// 0x2787440
	bool GetLabelInfoForPrimaryTitle(out FText LabelText);// 0x2787350
	KSItem* GetItemAsset();// 0x2787030
	void EndOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2786b90
	bool CanBePickedUpByCharacterInternal(KSCharacter* Receiver);// 0x26cea80
	bool CanBePickedUpByCharacter(KSCharacter* Receiver);// 0x2786490
	void CalculateRandomImpulse(out Vector LinearImpulse, out Vector AngularImpulse);// 0x2786310
	void BeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2786120
	void AsyncItemGiveComplete(KSItem* Item, Object* GivenObject, GiveItemParameters InGiveItemParameters, bool bSuccess);// 0x2785f60
	void ApplyRandomImpulse();// 0x2785f40
	void AllowPickup(KSCharacter* Character);// 0x2785ec0

--------------------------------
Class: KSCharacter.KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	bool bTapRadialButtonToUseLastSelectedItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159a, Size: 1]
	FName[] ReleasedInputsOnOpenUI;//[Offset: 0x1670, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenRadialMenu;//[Offset: 0x1680, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenEscapeMenu;//[Offset: 0x1690, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenScoreboard;//[Offset: 0x16a0, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenMap;//[Offset: 0x16b0, Size: 1]
	FName[] ExcludedReleasedInputsOnOpenShop;//[Offset: 0x16c0, Size: 1]
	FName[] ReleasedInputsOnCloseRadialMenu;//[Offset: 0x16d0, Size: 1]
	MulticastInlineDelegateProperty OnPossessedBy;//[Size: 1]
	MulticastInlineDelegateProperty OnUnpossessed;//[Size: 1]
	KSPlayerController* CachedKSPlayerController;//[Offset: 0x1700, Size: 1]
	KSInteractableComponent* ArmorRepairInteractableComponent;//[Offset: 0x1708, Size: 1]
	KSInteractableComponent* ReviveInteractableComponent;//[Offset: 0x1710, Size: 1]
	Actor*[] NearbyCrateItems;//[Offset: 0x1718, Size: 1]
	KSObjectiveInfo ObjectiveInfo;//[Offset: 0x1728, Size: 1]
	KSObjectiveTimerInfo ObjectiveTimerInfo;//[Offset: 0x1790, Size: 1]
	KSObjectiveCaptureInfo ObjectiveCaptureInfo;//[Offset: 0x17c8, Size: 1]
	KSAutoPickupComponent* AutoPickupComponent;//[Offset: 0x17e0, Size: 1]
	bool bProcessingReverseFriendlyFireDamageEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17e8, Size: 1]
	AkAudioEvent* RumbleDamageAudioEvent;//[Offset: 0x1808, Size: 1]
	AkAudioEvent* RumbleJumpAudioEvent;//[Offset: 0x1810, Size: 1]
	AkAudioEvent* RumbleReviveAudioEvent;//[Offset: 0x1818, Size: 1]
	AkAudioEvent* RumbleReviveAudioEventEnd;//[Offset: 0x1820, Size: 1]
	AkAudioEvent* RumbleDownedAudioEvent;//[Offset: 0x1828, Size: 1]
	AkAudioEvent* RumbleDownedAudioEventEnd;//[Offset: 0x1830, Size: 1]
	float MinimumFlinchHeight;//[Offset: 0x1840, Size: 1]
	float MinimumFlinchDamage;//[Offset: 0x1844, Size: 1]
	float MaximumFlinchHeight;//[Offset: 0x1848, Size: 1]
	float MaximumFlinchDamage;//[Offset: 0x184c, Size: 1]
	float FlinchDuration;//[Offset: 0x1850, Size: 1]
	float FlinchRecoveryRate;//[Offset: 0x1854, Size: 1]
	bool bFlinchSnipersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1858, Size: 1]
	<KSPlayerState*,KSDamageRecord> DamageRecord;//[Offset: 0x1860, Size: 1]
	KSShotgunHitChangeList ReplicatedShotgunHits;//[Offset: 0x18b0, Size: 1]
	MulticastInlineDelegateProperty OnNewShotgunHit;//[Size: 1]
	float KillCamHitRecordTime;//[Offset: 0x1998, Size: 1]
	MulticastInlineDelegateProperty OnLocalViewChanged;//[Size: 1]
	PlayerController*[] LocalViewers;//[Offset: 0x19c8, Size: 1]
	KSRepossessState RepossessState;//[Offset: 0x19d8, Size: 1]
	MulticastInlineDelegateProperty OnCanRemoveBackPackChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterFreeFallStartedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterFreeFallCompletedDel;//[Size: 1]
	FText RemoveBackpackInteractionPromptText;//[Offset: 0x1a28, Size: 1]
	float SkyDiveMaxPitch;//[Offset: 0x1a40, Size: 1]
	float SkyDiveMinPitch;//[Offset: 0x1a44, Size: 1]
	float SkyDiveExitDistance;//[Offset: 0x1a48, Size: 1]
	float SkyDiveExitThreshold;//[Offset: 0x1a4c, Size: 1]
	float SkyDiveForceExitDistance;//[Offset: 0x1a50, Size: 1]
	bool bLeftHandMantleIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a54, Size: 1]
	bool bRightHandMantleIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a55, Size: 1]
	Vector LeftHandMantleIKLocation;//[Offset: 0x1a58, Size: 1]
	Vector RightHandMantleIKLocation;//[Offset: 0x1a64, Size: 1]
	float LeftHandMantleIKAlpha;//[Offset: 0x1a70, Size: 1]
	float RightHandMantleIKAlpha;//[Offset: 0x1a74, Size: 1]
	bool bFadeOutLeftHandMantleIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a78, Size: 1]
	bool bFadeOutRightHandMantleIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a79, Size: 1]
	SmoothedComponentInfo[] SmoothedComponents;//[Offset: 0x1a80, Size: 1]
	KSSmoothingComponent*[] RegisteredSmoothingComponents;//[Offset: 0x1a90, Size: 1]
	CurveFloat* SprintImpulseCurve;//[Offset: 0x1b38, Size: 1]
	float SprintPressLeeway;//[Offset: 0x1b44, Size: 1]
	float SprintLeewayExpire;//[Offset: 0x1b48, Size: 1]
	bool bFacingVaultWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4c, Size: 1]
	bool bWantsToAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4d, Size: 1]
	bool bAutoSprintTimerComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4e, Size: 1]
	float AutoSprintDelay;//[Offset: 0x1b50, Size: 1]
	float LeftHandMantleIKOffset;//[Offset: 0x1b60, Size: 1]
	float RightHandMantleIKOffset;//[Offset: 0x1b64, Size: 1]
	float HandMantleIKFadeTime;//[Offset: 0x1b68, Size: 1]
	float MantleIKHandsToWallForwardOffset;//[Offset: 0x1b6c, Size: 1]
	float RiseFromCrouchDelayTime;//[Offset: 0x1b70, Size: 1]
	bool bUsingEmoteCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b78, Size: 1]
	float EmoteFinishedDisableFireTimeSeconds;//[Offset: 0x1b7c, Size: 1]
	int ActiveEmoteActionRestrictorID;//[Offset: 0x1b80, Size: 1]
	TimerHandle RemoveEmoteActionRestrictorTimerHandle;//[Offset: 0x1b88, Size: 1]
	MulticastInlineDelegateProperty OnCharacterLandedNativeDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCrouchStartedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCrouchEndedDel;//[Size: 1]
	float GamepadInput;//[Offset: 0x1c08, Size: 1]
	bool HasGamepadInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0c, Size: 1]
	bool bZiplineActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0d, Size: 1]
	KSModInst_Activated* AbilityMovementMod;//[Offset: 0x1c10, Size: 1]
	float ZiplineMeshHeightAdjust;//[Offset: 0x1c18, Size: 1]
	float DrownDamagePeriod;//[Offset: 0x1c1c, Size: 1]
	float DrownPerTickDamage;//[Offset: 0x1c20, Size: 1]
	class DamageType* DrownDamageType;//[Offset: 0x1c28, Size: 1]
	PGame_PositionHistoryComponent* PositionHistoryComponent;//[Offset: 0x1c38, Size: 1]
	PGame_ReplicatedTimer ReplicatedEMPLockoutTimer;//[Offset: 0x1c40, Size: 1]
	bool bIsEMPLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c90, Size: 1]
	MulticastInlineDelegateProperty OnEMPLocked;//[Size: 1]
	MulticastInlineDelegateProperty OnEMPLockoutTick;//[Size: 1]
	bool bIsOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd0, Size: 1]
	KSCharacterCameraHandler* CameraHandler;//[Offset: 0x1cd8, Size: 1]
	KSSmoothingComponent* CameraRootComponent;//[Offset: 0x1ce0, Size: 1]
	KSSpringArmComponent* MainCameraBoom;//[Offset: 0x1ce8, Size: 1]
	CameraComponent* MainCameraComponent;//[Offset: 0x1cf0, Size: 1]
	KSSpringArmComponent* SprintCameraBoom;//[Offset: 0x1cf8, Size: 1]
	CameraComponent* SprintCameraComponent;//[Offset: 0x1d00, Size: 1]
	KSSpringArmComponent* TransitionCameraBoom;//[Offset: 0x1d08, Size: 1]
	CameraComponent* TransitionCameraComponent;//[Offset: 0x1d10, Size: 1]
	KSSpringArmComponent* ShoulderCameraBoom;//[Offset: 0x1d18, Size: 1]
	CameraComponent* ShoulderCameraComponent;//[Offset: 0x1d20, Size: 1]
	CameraComponent* FirstPersonCameraComponent;//[Offset: 0x1d28, Size: 1]
	KSSpringArmComponent* TabletCameraBoom;//[Offset: 0x1d30, Size: 1]
	CameraComponent* TabletCameraComponent;//[Offset: 0x1d38, Size: 1]
	KSSpringArmComponent* ActionCameraBoom1;//[Offset: 0x1d40, Size: 1]
	CameraComponent* ActionCameraComponent;//[Offset: 0x1d48, Size: 1]
	KSSpringArmComponent* SwimCameraBoom;//[Offset: 0x1d50, Size: 1]
	CameraComponent* SwimCameraComponent;//[Offset: 0x1d58, Size: 1]
	KSSpringArmComponent* MountedCameraBoom;//[Offset: 0x1d60, Size: 1]
	CameraComponent* MountedCameraComponent;//[Offset: 0x1d68, Size: 1]
	CameraComponent* ActiveCameraComponent;//[Offset: 0x1d70, Size: 1]
	CameraComponent* PendingCameraComponent;//[Offset: 0x1d78, Size: 1]
	float CrouchAOSAimVertOffset;//[Offset: 0x1d84, Size: 1]
	float CrouchAOSCamVertOffsetBlendTime;//[Offset: 0x1d88, Size: 1]
	float CrouchAimingCapsuleHeightAdjustment;//[Offset: 0x1d8c, Size: 1]
	float AimSnapThrottleTime;//[Offset: 0x1da8, Size: 1]
	float LockoutCameraCooldownSpeed;//[Offset: 0x1db0, Size: 1]
	Vector AutoShoulderSwapExtent;//[Offset: 0x1dd0, Size: 1]
	float AutoShoulderSwapForwardCheckDist;//[Offset: 0x1ddc, Size: 1]
	float AutoShoulderSwapRightCheckDist;//[Offset: 0x1de0, Size: 1]
	float AutoShoulderSwapRightForwardCheckDist;//[Offset: 0x1de4, Size: 1]
	float LockedAutoShoulderSwapTimeThreshold;//[Offset: 0x1de8, Size: 1]
	float LockedAutoShoulderSwapWeaponFireTime;//[Offset: 0x1dec, Size: 1]
	float LockedAutoShoulderSwapDistance;//[Offset: 0x1df0, Size: 1]
	enum AimState;//[Offset: 0x1e08, Size: 1]
	enum DesiredAimState;//[Offset: 0x1e09, Size: 1]
	bool bAimPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0a, Size: 1]
	bool bWasAimDownSightsWhenAimPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0b, Size: 1]
	bool bWasAimAlternateWhenAimPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0c, Size: 1]
	float AimHoldTime;//[Offset: 0x1e10, Size: 1]
	float AimOverShoulderHoldTime;//[Offset: 0x1e14, Size: 1]
	<enum,Material*> MaterialHideTypeMap;//[Offset: 0x1e18, Size: 1]
	<int,enum> MaterialIndexesToHide;//[Offset: 0x1e68, Size: 1]
	<int,MaterialInterface*> HiddenMaterials;//[Offset: 0x1eb8, Size: 1]
	bool bIsAimLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f08, Size: 1]
	MulticastInlineDelegateProperty OnAimLockedChangedDel;//[Size: 1]
	bool bIsCrosshairHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f20, Size: 1]
	MulticastInlineDelegateProperty OnCrosshairHiddenChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCannonBonusAmmoRecieved;//[Size: 1]
	GameplayTagContainer AvailableEquipPoints_New;//[Offset: 0x1fa8, Size: 1]
	KSInitialInventoryItem[] InitialInventory;//[Offset: 0x1fc8, Size: 1]
	KSInitialAmmo[] InitialAmmo;//[Offset: 0x1fd8, Size: 1]
	KSEquipmentManagerComponent* EquipmentManagerComponent;//[Offset: 0x1fe8, Size: 1]
	bool bDropAmmoOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff0, Size: 1]
	GameplayTagContainer WeaponSlotsToDropOnDeath;//[Offset: 0x1ff8, Size: 1]
	GameplayTagContainer WeaponSlotsToDropOnDowned;//[Offset: 0x2018, Size: 1]
	GameplayTagContainer[] ActiveWeaponSlotTiers;//[Offset: 0x2038, Size: 1]
	GameplayTagContainer[] GrenadeSlotTiers;//[Offset: 0x2048, Size: 1]
	KSLootLockerItem[] LootLockerInventory;//[Offset: 0x2058, Size: 1]
	GameplayTag StartingActiveWeaponEquipPoint;//[Offset: 0x2068, Size: 1]
	KSSwapHandlerProfile* MainSwapHandlerProfile;//[Offset: 0x2070, Size: 1]
	KSSwapHandlerProfile* GadgetSwapHandlerProfile;//[Offset: 0x2078, Size: 1]
	KSSwapHandlerProfile* MedpackSwapHandlerProfile;//[Offset: 0x2080, Size: 1]
	KSSwapHandlerProfile* PassiveSwapHandlerProfile;//[Offset: 0x2088, Size: 1]
	KSSwapHandlerProfile* QuickMeleeSwapHandlerProfile;//[Offset: 0x2090, Size: 1]
	KSWeaponAsset* EmergencyWeaponAsset;//[Offset: 0x2098, Size: 1]
	FText ObjectiveWeaponDropPrompt;//[Offset: 0x20a8, Size: 1]
	FText ObjectiveWeaponDropProgressText;//[Offset: 0x20c0, Size: 1]
	float DropObjectiveWeaponInteractTime;//[Offset: 0x20d8, Size: 1]
	MulticastInlineDelegateProperty OnCharacterStartedWeaponFireNativeDel;//[Size: 1]
	bool bPreventRetrieveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f0, Size: 1]
	bool bSelfDestruct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20f1, Size: 1]
	<FName,int> SubTypeComponentIndexMap;//[Offset: 0x2168, Size: 1]
	float MeleeHoldTime;//[Offset: 0x21b8, Size: 1]
	int PrimaryTier;//[Offset: 0x21bc, Size: 1]
	int SecondaryTier;//[Offset: 0x21c0, Size: 1]
	int MeleeTier;//[Offset: 0x21c4, Size: 1]
	float WeaponDropHoldTime;//[Offset: 0x21c8, Size: 1]
	float WeaponDoubleTapTime;//[Offset: 0x21cc, Size: 1]
	float LastActiveWeaponFireTimestamp;//[Offset: 0x21d0, Size: 1]
	MulticastInlineDelegateProperty OnActiveWeaponChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnActiveGrenadeChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnActiveMedPackChangedDel;//[Size: 1]
	TimerHandle MeleeHoldTimer;//[Offset: 0x2250, Size: 1]
	TimerHandle DoubleTapTimer;//[Offset: 0x2258, Size: 1]
	TimerHandle DropHoldTimer;//[Offset: 0x2260, Size: 1]
	float WeaponSwapThrottleExpire;//[Offset: 0x2268, Size: 1]
	float WeaponSwapThrottlePeriod;//[Offset: 0x226c, Size: 1]
	float QuickMeleeHoldTime;//[Offset: 0x2270, Size: 1]
	KSWeapon_Melee* CurrentQuickMeleeWeapon;//[Offset: 0x2278, Size: 1]
	bool bQuickMeleeHoldCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2280, Size: 1]
	bool bSwapOffQuickMeleeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2281, Size: 1]
	MulticastInlineDelegateProperty OnStartFireFailed;//[Size: 1]
	bool IsFireWeaponHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c8, Size: 1]
	bool bStartFireAfterAnimFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22c9, Size: 1]
	bool bIsThrowGrenadeHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22ca, Size: 1]
	bool IsAimDownSightsHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22cb, Size: 1]
	FString SwingMontageSection;//[Offset: 0x22d0, Size: 1]
	<uint16,KSPendingWeaponChargeValueUpdate> PendingChargeUpdates;//[Offset: 0x22f0, Size: 1]
	MulticastInlineDelegateProperty OnWeaponInventoryChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnGadgetResupplied;//[Size: 1]
	MulticastInlineDelegateProperty OnMeleeHoldStart;//[Size: 1]
	MulticastInlineDelegateProperty OnMeleeHoldEnd;//[Size: 1]
	KSWeaponComponent* ActiveWeaponComponent;//[Offset: 0x2380, Size: 11]
	uint16 ActiveEquipmentId;//[Offset: 0x23d8, Size: 11]
	KSEquipmentContainer EquipmentContainer;//[Offset: 0x2400, Size: 1]
	<uint16,KSPendingWeaponStateUpdates> PendingWeaponStateUpdates;//[Offset: 0x2628, Size: 1]
	MulticastInlineDelegateProperty OnEquipmentAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentRemovedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentBecomeActiveDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentEndActiveDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSpecialAmmoEvent;//[Size: 1]
	<enum,KSAmmoDropAsset*> AmmoDropAssets;//[Offset: 0x2728, Size: 1]
	KSAmmoManager AmmoManager;//[Offset: 0x2778, Size: 1]
	float OutOfSightWeaponPickupRange;//[Offset: 0x28a8, Size: 1]
	float LabelPickupRange;//[Offset: 0x28ac, Size: 1]
	MulticastInlineDelegateProperty OnItemPickedUp;//[Size: 1]
	float ReloadTapThreshold;//[Offset: 0x28c0, Size: 1]
	float ContextualPressTime;//[Offset: 0x28c4, Size: 1]
	bool bWantsToInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c8, Size: 1]
	float CachedMaxHealth;//[Offset: 0x28cc, Size: 1]
	float DownedHealth;//[Offset: 0x28d0, Size: 1]
	float RevivedHealth;//[Offset: 0x28d4, Size: 1]
	float MaxHealthBonus;//[Offset: 0x28d8, Size: 1]
	float MaxMaxHealthBonus;//[Offset: 0x28dc, Size: 1]
	float LocalMaxHealthBonus;//[Offset: 0x28e0, Size: 1]
	MulticastInlineDelegateProperty OnMaxHealthBonusChanged;//[Size: 1]
	bool bDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28f9, Size: 1]
	KSTimerComponent* GiveUpTimer;//[Offset: 0x2900, Size: 1]
	float GiveUpHoldTime;//[Offset: 0x2908, Size: 1]
	MulticastInlineDelegateProperty OnGiveUpTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnGiveUpTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnGiveUpAllowed;//[Size: 1]
	float DownedImmuneTime;//[Offset: 0x2940, Size: 1]
	float DownedImmuneTimeStamp;//[Offset: 0x2944, Size: 1]
	bool bAllowGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294c, Size: 1]
	float BleedPeriod;//[Offset: 0x2950, Size: 1]
	float BleedDamage;//[Offset: 0x2954, Size: 1]
	class DamageType* BleedDamageType;//[Offset: 0x2958, Size: 1]
	Controller* DownInstigator;//[Offset: 0x2968, Size: 1]
	class DamageType* DownDamageType;//[Offset: 0x2970, Size: 1]
	Actor* DownDamageCauser;//[Offset: 0x2978, Size: 1]
	MulticastInlineDelegateProperty OnCharacterDownedChangedDel;//[Size: 1]
	int DownSpree;//[Offset: 0x29a8, Size: 1]
	AkAudioEvent*[] DownSpreeSounds;//[Offset: 0x29b0, Size: 1]
	float DefaultAssistDuration;//[Offset: 0x29c0, Size: 1]
	AssistTag[] DownAssistTagQueue;//[Offset: 0x29c8, Size: 1]
	PlayerState*[] DownAssists;//[Offset: 0x29d8, Size: 1]
	Controller* KillInstigator;//[Offset: 0x29e8, Size: 1]
	PlayerState*[] EliminationAssists;//[Offset: 0x29f0, Size: 1]
	PlayerState*[] PlayersWithEliminationCredit;//[Offset: 0x2a00, Size: 1]
	FText ReviveInteractionProgressText;//[Offset: 0x2a18, Size: 1]
	FText ReviveInteractionPromptText;//[Offset: 0x2a30, Size: 1]
	CameraShake* InteractionCameraShake;//[Offset: 0x2a48, Size: 1]
	float TimeToRevive;//[Offset: 0x2a50, Size: 1]
	float bForceCrouchOnRevive;//[Offset: 0x2a54, Size: 1]
	ReviveInfo ReviveInfo;//[Offset: 0x2a58, Size: 1]
	Actor* ActorTargetingMeForRevive;//[Offset: 0x2ae8, Size: 1]
	MulticastInlineDelegateProperty OnStartReviveDel;//[Size: 1]
	MulticastInlineDelegateProperty OnStartReviveOtherDel;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveInterruptedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveOtherInterruptedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveCompletedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnReviveOtherCompletedDel;//[Size: 1]
	int NumOngoingRemoteRevives;//[Offset: 0x2be0, Size: 1]
	MulticastInlineDelegateProperty OnShoulderSwapChanged;//[Size: 1]
	KSInteractionManager* InteractionManager;//[Offset: 0x2c58, Size: 1]
	KSInteractionManager* ReceivedInteractionManager;//[Offset: 0x2c60, Size: 1]
	Actor* InteractionHoverTarget;//[Offset: 0x2c68, Size: 1]
	Actor* InteractionTarget;//[Offset: 0x2c70, Size: 1]
	bool IsInInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c78, Size: 1]
	class KSInteractionType* MostRecentInteractionType;//[Offset: 0x2c80, Size: 1]
	enum MostRecentInteractionResult;//[Offset: 0x2c88, Size: 1]
	Vector MostRecentInteractionStartLocation;//[Offset: 0x2c8c, Size: 1]
	bool InteractionFacesRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c98, Size: 1]
	KSInteractableCameraTransition InteractionCameraTransition;//[Offset: 0x2ca0, Size: 1]
	class KSInteractionType* DefaultInteractionType;//[Offset: 0x2cd0, Size: 1]
	float InteractionDistance;//[Offset: 0x2cd8, Size: 1]
	float MaxInteractionAngle;//[Offset: 0x2cdc, Size: 1]
	float InteractionHoldTime;//[Offset: 0x2ce0, Size: 1]
	float InteractionPriorityBaseModifier;//[Offset: 0x2ce4, Size: 1]
	bool bUncrouchAfterInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce8, Size: 1]
	bool bInteractionCrouchLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ce9, Size: 1]
	TimerHandle InstantInteractHandle;//[Offset: 0x2d08, Size: 1]
	float InstantInteractCooldownTime;//[Offset: 0x2d10, Size: 1]
	MulticastInlineDelegateProperty OnHoveredInteractableChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractStart;//[Size: 1]
	MulticastInlineDelegateProperty OnRemotePlayerInteractStart;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnRemotePlayerInteractEnd;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnInteractInterrupted;//[Size: 1]
	MulticastInlineDelegateProperty OnChargingActionStart;//[Size: 1]
	MulticastInlineDelegateProperty OnChargingActionEnd;//[Size: 1]
	Vector BaseLocalDropLocation;//[Offset: 0x2db8, Size: 1]
	<int,float> TierToDropYawMap;//[Offset: 0x2dc8, Size: 1]
	<GameplayTag,float> EquipPointToDropYawMap;//[Offset: 0x2e18, Size: 1]
	float AmmoDropYaw;//[Offset: 0x2e68, Size: 1]
	float DropLateralSpeed;//[Offset: 0x2e6c, Size: 1]
	float DropLateralSpeedVariance;//[Offset: 0x2e70, Size: 1]
	float CompanionAmmoHeightShift;//[Offset: 0x2e74, Size: 1]
	float DropAngleVariance;//[Offset: 0x2e78, Size: 1]
	float TryToStopRagdollInterval;//[Offset: 0x2ea4, Size: 1]
	float RagdollFreezeSpeed;//[Offset: 0x2ea8, Size: 1]
	float DeathDisplayLifespan;//[Offset: 0x2ec4, Size: 1]
	FString[] DeathWidgetPoolName;//[Offset: 0x2ec8, Size: 1]
	bool bGodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc0, Size: 1]
	KSFlashBangRecord[] FlashBangRecords;//[Offset: 0x2fc8, Size: 1]
	KSPlayerMod* FlashBangEffectMod;//[Offset: 0x2fe0, Size: 1]
	KSPlayerModInstance* FlashBangEffectModInstance;//[Offset: 0x2fe8, Size: 1]
	MulticastInlineDelegateProperty OnLightBombHitCount;//[Size: 1]
	MulticastInlineDelegateProperty OnAbleToMountChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCamouflageChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCamouflageLevelChangedDel;//[Size: 1]
	bool bCachedCamouflaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3030, Size: 1]
	enum CurrentCamouflageLevel;//[Offset: 0x3031, Size: 1]
	bool bScrambled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3040, Size: 1]
	bool bMedPackPressed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3041, Size: 1]
	MulticastInlineDelegateProperty OnStickDel;//[Size: 1]
	MulticastInlineDelegateProperty OnMedPackFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnGrenadeFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponPickupInventoryFull;//[Size: 1]
	MulticastInlineDelegateProperty OnItemPickupSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnItemReclaimFailed;//[Size: 1]
	bool bReplicatedActivatingMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30a8, Size: 1]
	MulticastInlineDelegateProperty OnModsUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnActivatableModsUpdated;//[Size: 1]
	bool bRotationInputAllowsAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d0, Size: 1]
	float MinimumRotationInputForAimAssist;//[Offset: 0x30d4, Size: 1]
	MulticastInlineDelegateProperty OnGamepadAbilityCycle;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityActivatedEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityUsedEvent;//[Size: 1]
	float ChordDelay;//[Offset: 0x310c, Size: 1]
	float HoldDelay;//[Offset: 0x3110, Size: 1]
	float DamageForMaxForceFeedback;//[Offset: 0x3114, Size: 1]
	float DamageForceFeedbackScale;//[Offset: 0x3118, Size: 1]
	float DamageForceFeedbackDuration;//[Offset: 0x311c, Size: 1]
	bool bDamageForceFeedbackUsesSmallMotors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3120, Size: 1]
	float ForceFeedbackOnErrorMagnitude;//[Offset: 0x3124, Size: 1]
	float ForceFeedbackOnErrorDuration;//[Offset: 0x3128, Size: 1]
	float LandingSpeedForMaxForceFeedback;//[Offset: 0x312c, Size: 1]
	ForceFeedbackComponent* LandForceFeedbackComponent;//[Offset: 0x3130, Size: 1]
	ForceFeedbackEffect* JumpForceFeedbackEffect;//[Offset: 0x3138, Size: 1]
	ForceFeedbackEffect* DownedForceFeedbackEffect;//[Offset: 0x3140, Size: 1]
	ForceFeedbackEffect* BeingRevivedForceFeedbackEffect;//[Offset: 0x3148, Size: 1]
	interface classNone[] ReplicatedFootstepOverrides;//[Offset: 0x3150, Size: 1]
	interface classNone[] AutonomousProxyFootstepOverrides;//[Offset: 0x3160, Size: 1]
	float FootprintLifetimeSeconds;//[Offset: 0x3170, Size: 1]
	float FootprintStartFadeOutTimeSeconds;//[Offset: 0x3174, Size: 1]
	Vector FootprintDecalSize;//[Offset: 0x3178, Size: 1]
	MaterialInterface* LeftFootprintDecalMaterial;//[Offset: 0x3188, Size: 1]
	MaterialInterface* RightFootprintDecalMaterial;//[Offset: 0x3190, Size: 1]
	Vector FootprintMeshSize;//[Offset: 0x3198, Size: 1]
	StaticMesh* FootprintMesh;//[Offset: 0x31a8, Size: 1]
	KSFootprintInfo[] Footprints;//[Offset: 0x31b0, Size: 1]
	InstancedStaticMeshComponent* FootprintInstancedMeshComponent;//[Offset: 0x31c0, Size: 1]
	class NavArea* MovingNavAreaClass;//[Offset: 0x31d0, Size: 1]
	class NavArea* StillNavAreaClass;//[Offset: 0x31d8, Size: 1]
	KSNavModifierComponent* KSNavModifierComponent;//[Offset: 0x31e0, Size: 1]
	float NavModificationUpdateTimerPeriod;//[Offset: 0x31e8, Size: 1]
	FName DamagedHearingEventTag;//[Offset: 0x31f8, Size: 1]
	float DamageForDefaultLoudness;//[Offset: 0x3200, Size: 1]
	FName FireHearingEventTag;//[Offset: 0x3204, Size: 1]
	float FireRangeForDefaultLoudness;//[Offset: 0x320c, Size: 1]
	FName FootstepHearingEventTag;//[Offset: 0x3210, Size: 1]
	float MovementSpeedForDefaultLoudness;//[Offset: 0x3218, Size: 1]
	float TeamEventRange;//[Offset: 0x321c, Size: 1]
	FName BotName;//[Offset: 0x322c, Size: 1]
	float BotADSAccuracy;//[Offset: 0x3234, Size: 1]
	bool bRandomBotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3238, Size: 1]
	bool bBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3239, Size: 1]
	enum CurrentBehaviorState;//[Offset: 0x323a, Size: 1]
	MulticastInlineDelegateProperty OnBehaviorStateChanged;//[Size: 1]
	class KSVOComponent* VOComponentClass;//[Offset: 0x3250, Size: 1]
	KSVOComponent* VOComponent;//[Offset: 0x3258, Size: 1]
	DataTable*[] PossibleVOTables;//[Offset: 0x3260, Size: 1]
	GameplayTag DownOtherVOEvent;//[Offset: 0x3274, Size: 1]
	float NameplateZOffset;//[Offset: 0x327c, Size: 1]
	float CurrentNameplateZOffset;//[Offset: 0x3280, Size: 1]
	float CurrentNameplateAimZOffset;//[Offset: 0x3284, Size: 1]
	float NameplateAimZOffset;//[Offset: 0x3288, Size: 1]
	float NameplateAimZOffsetBlendTime;//[Offset: 0x328c, Size: 1]
	float TargetNameplateAimZOffset;//[Offset: 0x3290, Size: 1]
	float CurrentNameplateCrouchZOffset;//[Offset: 0x3294, Size: 1]
	float NameplateCrouchZOffset;//[Offset: 0x3298, Size: 1]
	float NameplateCrouchZOffsetBlendTime;//[Offset: 0x329c, Size: 1]
	float TargetNameplateCrouchZOffset;//[Offset: 0x32a0, Size: 1]
	enum VehicleState;//[Offset: 0x32a4, Size: 1]
	KSVehicle* CurrentVehicle;//[Offset: 0x32a8, Size: 1]
	MulticastInlineDelegateProperty OnVehicleStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnDestructibleSpeedOverlap;//[Size: 1]
	bool bDoDrawDebugLines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e0, Size: 1]
	FName BaseVisibilityBone;//[Offset: 0x32e4, Size: 1]
	FName LeftElbowBone;//[Offset: 0x32ec, Size: 1]
	FName LeftWristBone;//[Offset: 0x32f4, Size: 1]
	FName RightElbowBone;//[Offset: 0x32fc, Size: 1]
	FName RightWristBone;//[Offset: 0x3304, Size: 1]
	float HiddenArmScale;//[Offset: 0x330c, Size: 1]
	float LeftArmScaleAlpha;//[Offset: 0x3310, Size: 1]
	float RightArmScaleAlpha;//[Offset: 0x3314, Size: 1]
	bool bShowWeaponWhenArmVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3318, Size: 1]
	float MaxDistancePenetrationCheck;//[Offset: 0x331c, Size: 1]
	enum LeftArmVisibility;//[Offset: 0x3820, Size: 1]
	enum RightArmVisibility;//[Offset: 0x3821, Size: 1]
	FName PelvisBone;//[Offset: 0x3824, Size: 1]
	KSApparelAsset*[] DefaultApparelSetup;//[Offset: 0x3830, Size: 1]
	<AppliedApparelKey,KSApparelAsset*> AppliedApparelMap;//[Offset: 0x3840, Size: 1]
	<FName,AppliedApparelKey> SlotToApparelKeyMap;//[Offset: 0x3890, Size: 1]
	KSApparelAsset*[] ApparelAssets;//[Offset: 0x38e0, Size: 1]
	bool bNoApparel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f0, Size: 1]
	KSApparelAsset*[] LocalApparelAssets;//[Offset: 0x38f8, Size: 1]
	bool bApparelAssetMapDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3908, Size: 1]
	TimerHandle ApparelTimeoutHandle;//[Offset: 0x3910, Size: 1]
	float ApparelTimeoutTime;//[Offset: 0x3918, Size: 1]
	bool bFirstApparelApplicationSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391c, Size: 1]
	MulticastInlineDelegateProperty OnNewApparelApplicationFinishedDel;//[Size: 1]
	bool bApparelInstancesAreLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3990, Size: 1]
	int ApparelLockCount;//[Offset: 0x39a0, Size: 1]
	bool bApparelDirtiedAndLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39a4, Size: 1]
	KSTranslucencyMaterialInfo[] TranslucencyMaterialInfos;//[Offset: 0x39f8, Size: 1]
	KSCharacterGender Gender;//[Offset: 0x3a08, Size: 1]
	KSCharacterGender LocalGender;//[Offset: 0x3a0a, Size: 1]
	MulticastInlineDelegateProperty OnGenderChangedDel;//[Size: 1]
	SkinObjectManagerComponent* SkinsManager;//[Offset: 0x3a38, Size: 1]
	MultiSkinObject* DefaultBodyApparelSkinObject;//[Offset: 0x3a40, Size: 1]
	GameplayTagContainer SkinTagContainer;//[Offset: 0x3a48, Size: 1]
	DataTableInfo[] DefaultApparelSkinTables;//[Offset: 0x3a68, Size: 1]
	bool bUseCameraProximityFading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a90, Size: 1]
	float CameraFadeStartDistance;//[Offset: 0x3a94, Size: 1]
	float CameraFadeEndDistance;//[Offset: 0x3a98, Size: 1]
	FName FadeAlphaParamName;//[Offset: 0x3a9c, Size: 1]
	float LastCameraProximityAlpha;//[Offset: 0x3aa4, Size: 1]
	enum Emotion;//[Offset: 0x3aa8, Size: 1]
	enum LocalEmotion;//[Offset: 0x3aa9, Size: 1]
	enum LastEmotion;//[Offset: 0x3aaa, Size: 1]
	float EmotionFloat;//[Offset: 0x3aac, Size: 1]
	MulticastInlineDelegateProperty OnEmotionChangedDel;//[Size: 1]
	KSActiveEmotePropInfo[] ActiveEmotePropInfos;//[Offset: 0x3ac0, Size: 1]
	KSProp_Physical* CurrentEmotePhysicsProp;//[Offset: 0x3ad0, Size: 1]
	DecalComponent* CurrentEmoteDecalComponent;//[Offset: 0x3ad8, Size: 1]
	KSAnimationAuditComponent* AnimationAuditComponent;//[Offset: 0x3ae0, Size: 1]
	MaterialInstanceDynamic* ADSBlurMID;//[Offset: 0x3ae8, Size: 1]
	KSArmorComponent* ArmorComponent;//[Offset: 0x3af0, Size: 1]
	float TimeToRepairArmor;//[Offset: 0x3af8, Size: 1]
	FText ArmorRepairProgressText;//[Offset: 0x3b00, Size: 1]
	FText ArmorRepairPromptText;//[Offset: 0x3b18, Size: 1]
	bool bCanRepairArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b30, Size: 1]
	bool bRepairableArmorEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b31, Size: 1]
	bool bIsRepairingArmor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b32, Size: 1]
	MulticastInlineDelegateProperty OnRepairableArmorEquippedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnArmorInteractAvailableDel;//[Size: 1]
	Actor*[] NudgingActors;//[Offset: 0x3b60, Size: 1]
	KSNudgeComponent* NudgeComponent;//[Offset: 0x3b70, Size: 1]
	class KSNudgeComponent* NudgeComponentClass;//[Offset: 0x3b78, Size: 1]
	KSWeaponPropManagerComponent* WeaponPropManagerComponent;//[Offset: 0x3b80, Size: 1]
	SkelPropManagerComponent* SkinnableSkelPropManagerComponent;//[Offset: 0x3b88, Size: 1]
	StaticPropManagerComponent* SkinnableStaticPropManagerComponent;//[Offset: 0x3b90, Size: 1]
	<KSItem*,KSItem*> SkinMap;//[Offset: 0x3b98, Size: 1]
	bool bTouchModeAutoSprintActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c58, Size: 1]
	bool bPreventingAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c59, Size: 1]
	FName[] LeftDoubleTapActionMappings;//[Offset: 0x3c60, Size: 1]
	FName[] RightDoubleTapActionMappings;//[Offset: 0x3c70, Size: 1]
	bool WantsToCrouch();// 0x271c3b0
	void ViewedPawnTakeDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin);// 0x271c250
	void ViewedPawnInstigatedHeadshot(out const CombatEventInfo DamageInfo);// 0x271c120
	void ViewedPawnInstigatedDamage(out const CombatEventInfo DamageInfo);// 0x271bff0
	void VehicleStateChanged(enum CurrentVehicleState);// 0x2d74e00
	void UpdateTranslucencyOpacityValue(out const FName InKeyObjectName, float NewOpacityValue);// 0x271bf20
	void UpdateNavModification();// 0x271bf00
	void UpdateMantleHands(enum Hand, bool bEnable);// 0x271be30
	void UpdateHoveredInteractable();// 0x271be10
	void UpdateEmoteDecal(DecalComponent* InDecal);// 0x271bd90
	void UpdateAmmo(enum AmmoType, int AmmoDelta);// 0x271bcd0
	void UpdateAimStatus();// 0x271bcb0
	void UnSelectToRevive(Actor* Reviver);// 0x271bb00
	void UnregisterFootstepOverride(interface classNone ToRemove);// 0x271bc10
	void UnlockShoulderSwap(bool ForceFullUnlock);// 0x271bb80
	void UnhideZiplinePulley();// 0x2d74e00
	void UnhideUplineDevice();// 0x2d74e00
	void UnHideADSMaterials();// 0x271bae0
	void TryToStopRagdoll();// 0x271bac0
	void TryToStopAiming(bool IsInterrupt);// 0x271ba30
	void TryToAimOverShoulder(bool bSkipUpdate);// 0x271b9a0
	void TryToAimDownSights(bool bSkipUpdate);// 0x271b910
	void TryToAimAlternate(bool bSkipUpdate);// 0x271b880
	void TryStartSprint();// 0x271b860
	float TouchModeAutoVaultInputThreshold();// 0x271b830
	bool TouchModeAutoVaultEnabled();// 0x271b800
	void ToggleScopeZoomIndexUp();// 0x271b7e0
	void ToggleScopeZoomIndexLoop();// 0x271b7c0
	void ToggleScopeZoomIndexDown();// 0x271b7a0
	void ToggleCrouch();// 0x271b780
	void ThrowGrenadeReleased();// 0x271b760
	void ThrowGrenadePressed();// 0x271b740
	void TagForDownAssist(PlayerState* Assistant, float Duration);// 0x271b670
	void SwapWeapon(KSWeapon* NextWeapon, bool bForce);// 0x271b5a0
	void SwapToSecondary();// 0x271b580
	void SwapToPrimary();// 0x271b560
	void SwapToPreviousWeaponWithLoadedClip(bool bForce);// 0x271b4d0
	void SwapToPreviousWeaponWithAmmo(bool bForce);// 0x271b440
	void SwapToPreviousWeapon(bool bForce);// 0x271b3b0
	void SwapToNextWeaponWithLoadedClip(bool bForce);// 0x271b320
	void SwapToNextWeaponWithAmmo(bool bForce);// 0x271b290
	void SwapToNextWeapon(bool bForce);// 0x271b200
	void SwapToNextGrenade(bool bForce);// 0x271b170
	void SwapToMelee();// 0x271b150
	void SwapToMacGuffin();// 0x271b130
	void SwapSeatsTimerComplete();// 0x271b110
	void SwapSeatsReleased();// 0x271b0f0
	void SwapSeatsPressed();// 0x271b0d0
	void SwapGrenade(KSWeapon* NextWeapon, bool bForce);// 0x271b000
	void SwapActiveGrenade();// 0x271afe0
	void StopListeningForInputAction(int InputActionHandle);// 0x271af60
	void StopFire();// 0x271af40
	bool StopAnimEvent(FName AnimEventName, KSCharacterAnimInst* CharAnimInstance);// 0x271ae80
	void StopAimDownSights();// 0x271ae60
	void StartNewInteractionWithTarget(Actor* InInteractionTarget);// 0x271ade0
	void StartLockoutCamera();// 0x271adc0
	void StartInteractionWithShield(KSWeaponComponent* ShieldWeaponComponent);// 0x2d74e00
	void StartHacking();// 0x2d74e00
	bool StartFire();// 0x271ad90
	void SprintImpulseTimelineProgress(float Value);// 0x271ad10
	void ShowAllFootprints();// 0x271acf0
	void SetupChords();// 0x271acd0
	void SetTouchModeAutoSprintActive(bool bInTouchModeAutoSprintActive);// 0x271ac40
	void SetSelfDestruct(bool InSelfDestruct);// 0x271abc0
	void SetPrimaryHeatSource(KSHeatSourceComponent* InHeatSource);// 0x271ab40
	void SetOnFire(float Duration);// 0x271aac0
	void SetIsAimDownSightsHeld(bool bInIsAimDownSightsHeld);// 0x271aa40
	void SetInteractionFacesRotation(bool FacesRotation);// 0x271a9b0
	void SetInteractionCameraTransition(KSInteractableCameraTransition CameraTransition);// 0x271a900
	void SetImperceptible(bool InImperceptible);// 0x271a870
	void SetGodMode(bool InGodMode);// 0x271a7f0
	void SetGiveUpEnabled(bool Enabled);// 0x271a760
	void SetCurrentCamouflageLevel(enum InCamouflageLevel);// 0x271a6e0
	void SetClearMaxBonusHealthOnDown(const bool Val);// 0x271a660
	void SetActorTargetingMeForRevive(Actor* Reviver);// 0x271a5e0
	void SetActiveCameraSimple(FName Tag, float InBlendTime);// 0x271a510
	void SetActiveCamera(FName Tag, ViewTargetTransitionParams InBlendParams);// 0x271a420
	void ServerSwapToNextGrenade(bool bForce);// 0x271a360
	void ServerStopGiveUpTimer();// 0x271a310
	void ServerStartGiveUpTimer();// 0x271a2c0
	void ServerSetActiveWeaponToNone(int InIndex);// 0x271a200
	void ServerRequestActivateAbilityRelease(int Ability, bool bIsGameModeAbility);// 0x271a100
	void ServerRequestActivateAbility(int Ability, bool bIsGameModeAbility);// 0x271a000
	void ServerGetInNextEmptySeat();// 0x2719fb0
	void ServerGetInDriverSeat();// 0x2719f60
	void ServerForceActiveGadget(KSWeapon* Weapon);// 0x2719ea0
	void ServerExitVehicle();// 0x2719e50
	void ServerDropWeapon(KSWeapon* InWeapon);// 0x2719d90
	void ServerChangeShoulderCamera(enum InShoulder, bool bAuto, bool bUseAutoTiming);// 0x2719c50
	void ServerAbilityWeaponPrepareSwapTo(KSWeapon* Weapon, bool bIsGameModeAbility);// 0x2719b50
	void SelectToRevive(Actor* Reviver);// 0x2719ad0
	void RotateToFace(Vector Location);// 0x2719a40
	void ReportFootstepNoise(float Speed);// 0x27199c0
	void ReportFireNoise(float Range);// 0x2719940
	void ReportDamageEvent(Actor* Damager, float Damage, out const Vector OriginLocation, out const Vector HitLocation);// 0x2719760
	void ReportDamagedNoise(float Damage);// 0x27198c0
	void ReplicateSpecialAmmoEvent(enum AmmoType, int AmmoDelta, FName EventName);// 0x2719660
	bool RemoveWeaponFromInventory(KSWeapon* InWeapon);// 0x27195d0
	void RemoveTranslucencyModifier(out const FName InKeyObjectName);// 0x2719540
	bool RemoveTranslucencyMaterialInfo(out const KSTranslucencyMaterialInfo InTranslucencyMaterialInfo);// 0x2719470
	void RemoveSkinTag(out const GameplayTag InSkinTag);// 0x27193e0
	void RemovePhysicalEmoteProp(KSProp_Physical* InProp);// 0x2719360
	void RemoveFootprintInfo(int InFootprintId);// 0x27192e0
	void RemoveEmoteActionRestrictor();// 0x27192c0
	void RemoveBackpack();// 0x27192a0
	void RemoveActionRestriction(int ID);// 0x2719220
	void RemotePlayerPickupItem(class KSItemDrop ItemDropClass, KSItem* Item);// 0x2719150
	void RemotePlayerInteractStart(float InteractDuration, Actor* InteractTarget);// 0x2719080
	void RemotePlayerInteractEnd(enum Result, Vector InteractionLocation, Actor* OldInteractTarget);// 0x2718f60
	void RemoteClientNotifyLand(const HitResult LandingHit);// 0x2718ec0
	void Reload();// 0x2718ea0
	void ReleaseSprint();// 0x2718e80
	void ReleaseGiveUp();// 0x2718e60
	void ReleaseCrouch();// 0x2718e40
	void ReleaseAllActiveInputs();// 0x2718e20
	void ReleaseActiveInputsOfType(enum InputReleaseType);// 0x2718da0
	void ReleaseActiveInputs(FName[] InputsToRelease);// 0x2718cc0
	void RegisterFootstepOverride(interface classNone ToAdd);// 0x2718c20
	void Reequip(out const GameplayTagQuery ReequipWeaponTypesQuery, bool bDropLeftovers, int ReequipAmmo);// 0x2718aa0
	void QuickMeleeHoldTimerComplete();// 0x2718a80
	bool QueryModsForAnimEvent(FName AnimEventName, KSCharacterAnimInst* CharAnimInst);// 0x27189c0
	void PrimaryWeaponFOVChanged(float NewFOV);// 0x2718940
	void PrimarySprayDecalExpired(PoolableDecalComponent* InDecalComponent);// 0x27188c0
	void PressSprint();// 0x27188a0
	void PressGiveUp();// 0x2718880
	void PlayVO(const KSVoicelineEvent VoicelineEvent);// 0x27187c0
	void PlayActionCameraSequence(FName SequenceName);// 0x2d74e00
	void PersistentPlayerDataChanged();// 0x27187a0
	void OnWeaponSwapSuccessful(KSWeapon* FromWeapon, KSWeapon* ToWeapon);// 0x27186d0
	void OnWeaponSwapFailed(KSWeapon* FromWeapon, KSWeapon* ToWeapon);// 0x2718600
	void OnStopAimDownSightsCheckpoint();// 0x27185e0
	void OnStartAimDownSightsCheckpoint();// 0x27185c0
	void OnSkinnedPropEnabled(MeshComponent* EnabledMeshComponent);// 0x2718540
	void OnSkinnedPropDisabled(MeshComponent* DisabledMeshComponent);// 0x2718540
	void OnReviveStart(KSCharacter* Reviver, float ReviveTime, bool Remote);// 0x2d74e00
	void OnReviveInterrupt(KSCharacter* Reviver);// 0x2d74e00
	void OnReviveComplete(KSCharacter* Reviver);// 0x2d74e00
	void OnRep_VehicleState();// 0x27184e0
	void OnRep_StartingActiveWeaponEquipPoint();// 0x27184c0
	void OnRep_SelfDestruct();// 0x27184a0
	void OnRep_Scrambled();// 0x2718480
	void OnRep_ReviveInfo();// 0x2718460
	void OnRep_OnFire();// 0x2718440
	void OnRep_ObjectiveTimer();// 0x2718420
	void OnRep_IsInInteraction();// 0x2718400
	void OnRep_GiveUpTimer();// 0x27183e0
	void OnRep_Gender();// 0x27183c0
	void OnRep_EMPLockout();// 0x2718380
	void OnRep_Emotion();// 0x27183a0
	void OnRep_Downed();// 0x2718360
	void OnRep_CurrentBehaviorState();// 0x2718340
	void OnRep_bRepairableArmorEquipped();// 0x2718520
	void OnRep_Bot();// 0x2718320
	void OnRep_bCanRepairArmor();// 0x2718500
	void OnRep_ApparelAssets();// 0x2718300
	void OnRep_AllowGiveUp();// 0x27182e0
	void OnRep_ActiveEquipmentId();// 0x27182c0
	void OnReasonerTriggeredEventTick(FString ActionName, Actor* TargetActor, FString TextData, float ValueData);// 0x2d74e00
	void OnReasonerTriggeredEventStart(FString ActionName, Actor* TargetActor, FString TextData, float ValueData);// 0x2d74e00
	void OnReasonerTriggeredEventEnd(FString ActionName, Actor* TargetActor, FString TextData, float ValueData);// 0x2d74e00
	void OnPhysicalEmotePropEndPlay(Actor* InActor, byte Reason);// 0x2718200
	void OnObjectiveTimerTickEvent(float Time);// 0x2d74e00
	void OnObjectiveTimerCompleteEvent();// 0x2d74e00
	void OnObjectiveTimerActiveEvent(bool Active);// 0x2d74e00
	void OnObjectiveStateChangedEvent();// 0x2d74e00
	void OnObjectiveInactiveEvent();// 0x2d74e00
	void OnObjectiveActiveEvent();// 0x2d74e00
	void OnImmuneStart();// 0x2d74e00
	void OnImmuneEnd();// 0x2d74e00
	void OnGrenadeClassLoaded(KSWeaponAsset_Grenade* pGrenadeWeaponAsset);// 0x2718180
	void OnGlobalActionRestrictorUpdated(out const KSActionRestrictor NewGlobalActionRestrictor);// 0x27180e0
	void OnGenderChanged();// 0x2d74e00
	void OnGadgetSwapped();// 0x2d74e00
	void OnFlashEffectStarted();// 0x2d74e00
	void OnFlashEffectEnded();// 0x2d74e00
	void OnFlashBangHit(enum Intensity);// 0x2d74e00
	void OnFieldOfViewModChange();// 0x2d74e00
	void OnDeathDestroy();// 0x27180c0
	void OnDeathCleanup();// 0x27180a0
	void OnBoundCharacterInputAction(delegate Callback);// 0x2718000
	void OnArmorInteractStart(float InteractTime);// 0x2d74e00
	void OnArmorInteractInterrupt();// 0x2d74e00
	void OnArmorInteractComplete();// 0x2d74e00
	void OnApparelTimeoutExpire();// 0x2717fe0
	void NotifyRemoveEmotePropMeshComponent(out const Guid InEmotePropGuid);// 0x2717f40
	void NotifyAddEmotePropMeshComponent(out const Guid InEmotePropGuid, MeshComponent* InEmoteMeshComponent);// 0x2717e60
	void NoseDiveCameraTransition(bool bEnterNoseDive, float AnimLength);// 0x2d74e00
	void NetMulticast_ReleaseAllActiveInputs();// 0x2717e40
	void NativeJumpToSwingMontage(FString SwingMontageSectionName);// 0x2717da0
	void MoveRight(float Value);// 0x2717d20
	void MoveForward(float Value);// 0x2717ca0
	void MeleeReleased();// 0x2717c80
	void MeleePressed();// 0x2717c60
	void MedPackReleased();// 0x2717c40
	void MedPackPressed();// 0x2717c20
	void LogShotgunHitData(out const ShotgunHitData HitData);// 0x2717b70
	void LockToggleCrouch(bool bShouldLock, bool bShouldBeCrouched);// 0x2717aa0
	void LockShoulderSwap();// 0x2717a80
	int ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate Callback);// 0x2717900
	void KillIfDowned();// 0x27178e0
	void JumpToSwingMontage(FString SwingMontageSectionName);// 0x2717840
	bool IsZipLining();// 0x2717810
	bool IsUsingTouchControls();// 0x27177e0
	bool IsTouchModeAutoSprintActive();// 0x27177c0
	bool IsShoulderSwapLocked();// 0x2717790
	bool IsRevivingAnotherPlayer(out KSCharacter* OutReviveTarget, bool bCountRemoteRevives);// 0x27176b0
	bool IsRepairableArmorEquipped();// 0x2717690
	bool IsPerformingAnInteraction();// 0x2717660
	bool IsOutOfBoundsRoyale();// 0x2d74e00
	bool IsOnFire();// 0x2717630
	bool IsLobby();// 0x2717600
	bool IsInVehicle();// 0x27175d0
	bool IsInLockoutCameraCooldown();// 0x27175b0
	bool IsInLockoutCamera();// 0x2717590
	bool IsFreeFalling();// 0x2717560
	bool IsFiring();// 0x2717530
	bool IsDowned();// 0x2717510
	bool IsCrosshairHidden();// 0x27174f0
	bool IsCamouflaged();// 0x27174c0
	bool IsBlinded();// 0x2717490
	bool IsBeingRevived(out KSCharacter* Reviver, out float Progress);// 0x27173a0
	bool IsAtMaxHealth();// 0x2717370
	bool IsAnyEquippedWeaponTakingAction(const KSWeapon* IgnoredWeapon);// 0x27172e0
	bool IsAimLocked();// 0x27172c0
	bool IsActiveWeapon(const KSWeapon* InWeapon);// 0x2717230
	bool IsAbilityInSetup();// 0x2717200
	void InterruptNonCharacterRevive();// 0x27171e0
	void InterruptInteraction();// 0x27171c0
	void InterruptAimDownSightsToggle(bool bReturnWhenComplete);// 0x2717130
	void InterruptAimAlternateToggle(bool bReturnWhenComplete);// 0x27170a0
	void InstantRevive(KSCharacter* Reviver);// 0x2717020
	void InputStopFire();// 0x2717000
	void InputStartFire();// 0x2716fe0
	bool InitRagdoll();// 0x2716fb0
	void HideZiplinePulley();// 0x2d74e00
	void HideUplineDevice();// 0x2d74e00
	bool HidesFootprints();// 0x2716f80
	void HideAllFootprints();// 0x2716f60
	void HideADSMaterials();// 0x2716f40
	bool HasTranslucencyModifier();// 0x2716f10
	bool HasTranslucencyMaterialInfo();// 0x2716ee0
	bool HasInfiniteAmmo(enum AmmoType);// 0x2716e50
	bool HasEquipPoint(out const GameplayTag EquipPoint);// 0x2716db0
	void HandleDownEvent(CombatEventInfo EventInfo, int ExpBonus);// 0x2716b10
	void GiveUpTimerTick(float Seconds);// 0x2716a90
	void GiveUpTimerComplete();// 0x2716a70
	void GiveUpTimerActive(bool bActive);// 0x27169e0
	KSWeaponComponent* GetWeaponComponentForEquipPoint(GameplayTag EquipPoint);// 0x2716950
	KSWeapon* GetWeaponByAsset(const KSWeaponAsset* InAsset);// 0x27168c0
	KSWeapon* GetWeaponAtEquipPoint(out const GameplayTag EquipPoint);// 0x2716820
	KSVOComponent* GetVOComponent();// 0x27167a0
	GameplayTagContainer GetValidWeaponPoints();// 0x27167c0
	GameplayTagContainer GetUsedEquipPoints();// 0x2716740
	enum GetTouchFireMode();// 0x2716710
	bool GetSpecialties(out KSSpecialty*[] OutSpecialties);// 0x2716650
	FName GetSeatAimCameraTag();// 0x2716610
	enum GetRightArmVisibility();// 0x27165f0
	KSCharacter* GetReviver();// 0x27165b0
	FName GetReviveeOverrideMontage();// 0x2716590
	KSHeatSourceComponent* GetPrimaryHeatSource();// 0x2716560
	KSWeapon* GetPendingMainWeapon();// 0x2716530
	void GetOverrideByLocation(out const Vector WorldLocation, out bool outShouldOverride, out FName outOverrideName);// 0x27163f0
	ReturnValue(MulticastInlineDelegateProperty) GetOnEMPLockoutTick();// 0x27163c0
	ReturnValue(MulticastInlineDelegateProperty) GetOnEMPLocked();// 0x2716390
	KSWeapon* GetNextGadget();// 0x2716360
	KSInteractionType* GetMostRecentInteractionType();// 0x2716330
	float GetMinimapZoomScale();// 0x2716300
	float GetMaxHealthBonus();// 0x27162d0
	float GetMaxFlashBangIntensity();// 0x27162a0
	enum GetLeftArmVisibility();// 0x2716280
	float GetLastActiveWeaponFireTimestamp();// 0x2716260
	bool GetIsInInteraction();// 0x2716210
	Actor* GetInteractionTarget();// 0x27161f0
	KSWeapon* GetHolsteredGadget();// 0x27161c0
	float GetGiveUpTime();// 0x2716170
	KSCharacterGender GetGender();// 0x2716140
	float GetFlashBangIntensity();// 0x2716110
	bool GetFieldOfViewFromMods(out float OutFov);// 0x2716060
	KSEquipmentManagerComponent* GetEquipmentManagerComponent();// 0x2716040
	KSEquipment* GetEquipmentAtEquipPoint(out const GameplayTag EquipPoint);// 0x2715fa0
	void GetDownedTransitionMontage(out AnimMontage* OutAnimMontage);// 0x2d74e00
	float GetDownedImmuneTime();// 0x2715f80
	enum GetDesiredCameraShoulder();// 0x2715f50
	KSDamageHistory[] GetDamageHistoryForController(Controller* DamageInstigator);// 0x2715e70
	KSVehicleSeatComponent* GetCurrentVehicleSeat();// 0x2715e40
	KSVehicle* GetCurrentVehicle();// 0x2715e10
	void GetCurrentReviveDuration(out float Duration, out float RemainingTime);// 0x2715d30
	FName GetCurrentCharacterEmotionAsName();// 0x2715cf0
	enum GetCurrentCamouflageLevel();// 0x2715cd0
	enum GetCurrentCameraShoulder();// 0x2715ca0
	int GetCurrentAbilityIndex();// 0x2715c80
	GameplayTagContainer GetCompatibleEquipPoints(const KSWeaponAsset* InWeaponAsset);// 0x2715bc0
	float GetCameraShoulderSwapProgress();// 0x2715b90
	MultiSkinObject* GetBodyApparelSkinObject();// 0x2715b50
	enum GetBehaviorState();// 0x2715b30
	float GetBaseInteractionDistance();// 0x2715b10
	void GetAvailableEquipPoints(out GameplayTagContainer OutEquipPoints);// 0x2715a50
	float GetArmorMaxDurability();// 0x2715a20
	float GetArmorDurability();// 0x27159f0
	KSArmorComponent* GetArmorComponent();// 0x27159d0
	MultiSkinObject* GetApparelSkinObjectByName(out const FName InSkinObjectName);// 0x2715930
	int GetAmmoCount(enum AmmoType);// 0x27158a0
	void GetAllEquippedWeapons(out KSWeapon*[] OutWeapons);// 0x27157f0
	float GetAlertIconRange();// 0x27157c0
	float GetAimTransitionTime();// 0x2715790
	KSWeaponComponent* GetActiveWeaponComponentForSubType(FName SubType);// 0x2715700
	KSWeaponComponent* GetActiveWeaponComponentAtIndex(int Index);// 0x2715670
	KSWeaponComponent* GetActiveWeaponComponent();// 0x2715650
	KSWeapon* GetActiveWeapon();// 0x2715590
	KSWeapon* GetActiveTemporary();// 0x2715620
	KSWeapon* GetActiveMelee();// 0x27155f0
	KSWeapon* GetActiveMedPack();// 0x27155c0
	KSWeapon* GetActiveMainWeapon();// 0x2715590
	KSWeaponAnimInstance* GetActiveKSWeaponAnimInst(int Index);// 0x2715500
	KSWeapon* GetActiveGrenade();// 0x27154d0
	GameplayTagContainer GetActiveGadgetPoints();// 0x2715470
	KSWeaponComponent* GetActiveGadgetComponent();// 0x2715440
	GameplayTagContainer GetActiveEquipPoints();// 0x27153e0
	FName GetActiveCameraTag();// 0x27153a0
	CameraComponent* GetActiveCamera();// 0x2715370
	KSWeapon_Aimed* GetActiveAimedWeapon();// 0x2715340
	bool GetActivatableMods(out KSModInst_Activated*[] OutMods);// 0x2715280
	KSModInst_Activated* GetAbilityMovementMod();// 0x2715260
	void GamepadSwapPressed();// 0x2715240
	void GamepadSwapMeleePressed();// 0x2715220
	void GamepadSwapMacGuffinPressed();// 0x2715200
	void GamepadLookUp(float Value);// 0x2715180
	void GamepadLookRight(float Value);// 0x2715100
	void ForceToShoulder(enum ForcedShoulder);// 0x2715080
	void ForceMainCameraBoomUpdate();// 0x2715060
	void ForceActiveGadget(KSWeapon* Weapon);// 0x2714fe0
	void ForceActivateAbility();// 0x2714fc0
	void FinishHacking();// 0x2d74e00
	int FindTierOfEquipPoint(const GameplayTag EquipPoint);// 0x2714f30
	int[] FindAllTiersOfEquipPoint(const GameplayTag EquipPoint);// 0x2714e50
	void ExtinguishFire();// 0x2714e30
	void ExitVehiclePressed();// 0x2714e10
	void EventSetupCamerasForSpectator(bool Enabled);// 0x2d74e00
	void EvaluateCameraProximityFade();// 0x2714df0
	void EndLockoutCamera();// 0x2714dd0
	void EndInteractionWithShield(KSWeaponComponent* ShieldWeaponComponent);// 0x2d74e00
	void DrownDamageTick();// 0x2714db0
	void DropButtonPressed();// 0x2714b60
	void DropActiveWeapon();// 0x2714b60
	void DropActiveGrenade();// 0x2714b40
	void DownPlayer(Controller* EventInstigator, class DamageType DamageType, enum HitLocationType, Actor* DamageCauser, float DamageDealt);// 0x27149b0
	void DoSetOnFire();// 0x2d74e00
	void DoExtinguishFire();// 0x2d74e00
	bool DoesTransitionSupportFocalPoint(FName ActiveCamera, FName PendingCamera);// 0x27148e0
	bool DoesShowAlertIconToEnemies();// 0x27148b0
	void DetachViewTargetOnlyBPComponents();// 0x2d74e00
	void DestructibleSpeedGateOverlappedEvent(Vector BreakingLocation, Vector BreakingDirection, Vector BreakingNormal);// 0x2d74e00
	void DamageRecordReset();// 0x2714890
	void CreditEliminationAssist(PlayerState* Assistant);// 0x2714810
	void CreditDownAssist(PlayerState* Assistant);// 0x2714790
	void ContextualPingRepeat();// 0x2714770
	void ContextualPingPressed();// 0x2714750
	void ContextualPingHoldRelease();// 0x2714730
	void ContextualPingHold();// 0x2714710
	void ContextualButtonReleased();// 0x27146f0
	void ContextualButtonPressed();// 0x27146d0
	void ContextualButtonHeldReleased();// 0x27146b0
	void ContextualButtonHeld();// 0x2714690
	void CompleteNonCharacterRevive();// 0x2714670
	void CloneCharacterMesh(SkeletalMeshComponent* ClonedMesh);// 0x27145e0
	void ClientSwapTo(KSWeapon* InWeapon, bool bForce);// 0x2714510
	void ClientSwapFrom(KSWeapon* InWeapon, bool bForce);// 0x2714440
	void ClientStopInteractAcknowledge(byte InInteractRequestId, enum Result);// 0x2714380
	void ClientNotifyStuck();// 0x2714360
	void ClientInteractAcknowledge(byte InInteractRequestId, bool bFailed, float InteractDuration, bool bRequiresManualInterrupt);// 0x2714210
	void ClientBroadcastModEvent(FName ModEvent);// 0x2714180
	void ClientAbilityActivated(int AbilityIndex, bool bIsGameModeAbility);// 0x27140b0
	void ClearMaxHealthBonus();// 0x2714090
	void ClearAllApparel();// 0x2714070
	void ClearActorTargetingMeForRevive();// 0x2714050
	void ChangeShoulderCamera(enum InShoulder, bool bAuto);// 0x2713f80
	bool CanUseCombatState(enum TestState);// 0x2713eb0
	bool CanShowGrenadeFailurePrompt();// 0x2713e80
	bool CanRepairArmor();// 0x2713e60
	bool CanReloadRightNow();// 0x2713e30
	bool CanInteractWith(const Actor* InInteractionTarget);// 0x2713da0
	bool CanGiveUp();// 0x2713d30
	bool CanFireRightNow(out enum OutAbilityFailureType, bool bAltFire, bool bIgnoreNoFire, bool bIgnoreWeaponFireCheck);// 0x2713ba0
	bool CanFireGrenadeNow(bool bBroadcastFeedback);// 0x2713b10
	void CancelTouchModeAutoSprint();// 0x2713f60
	void CancelBleed();// 0x2713f40
	bool CanBeRevivedBy(const KSCharacter* Other, KSWeapon* IgnoredWeapon);// 0x2713a40
	bool CanAimOverShoulderNow();// 0x2713a10
	bool CanAimDownSightsNow();// 0x27139e0
	bool CanAimAlternateNow();// 0x27139b0
	bool CanActiveWeaponCanToggleOutOfAimDownSightsNow();// 0x2713980
	bool CanActiveWeaponCanToggleIntoAimDownSightsNow();// 0x2713950
	bool CanActivateAbilityNow(KSModInst_Activated* Mod, bool bBroadcastFeedback);// 0x2713890
	void CacheLatestHit(float Damage, class DamageType DamageTypeClass, float DamageImpulse, Vector RelativeImpactLocation, FName BoneName, Actor* DamageCauser);// 0x27136c0
	void BroadcastWeaponComponentStateChange(uint32 BroadcastId, uint16 nEquipmentId, KSWeaponDataUpdateContainer NewState);// 0x27135c0
	void BroadcastWeaponComponentPostReload(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip);// 0x27134c0
	void BroadcastWeaponComponentFullyCharged(uint16 nEquipmentId, float Timestamp, float CurrentCharge);// 0x27133c0
	void BroadcastWeaponComponentFiredFull(uint32 BroadcastId, uint16 nEquipmentId, const FullFireRepData Data);// 0x2713290
	void BroadcastWeaponComponentFiredAmmo(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip);// 0x2713190
	void BroadcastWeaponComponentFiredAimAndAmmo(uint32 BroadcastId, uint16 nEquipmentId, const AimData Aim, byte AmmoInClip);// 0x2713020
	void BroadcastWeaponComponentFired(uint32 BroadcastId, uint16 nEquipmentId, const AimData Aim);// 0x2712ef0
	void BroadcastWeaponComponentEmptyFire(uint32 BroadcastId, uint16 nEquipmentId);// 0x2712e20
	void BroadcastWeaponComponentCurrentFireRateStateHasChanged(uint16 nEquipmentId, enum State, float Timestamp, float PostFireTime);// 0x2712ce0
	void BroadcastWeaponComponentChargeMethodValuesUpdated(uint16 nEquipmentId, float NewMaxCharge, float CurrentCharge, float Timestamp);// 0x2712ba0
	void BroadcastWeaponComponentChargeConsumed(uint16 nEquipmentId, float Timestamp, float CurrentCharge);// 0x2712aa0
	void BroadcastWeaponComponentAmmoChange(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip, bool bBonusAmmo);// 0x2712960
	void BroadcastSpecialAmmoEvent(enum AmmoType, int AmmoDelta, FName EventName);// 0x2712860
	void BroadcastSkydiveSkipped();// 0x2712840
	void BroadcastReviveStart(KSCharacter* Reviver, float ReviveTime, bool Remote);// 0x2712740
	void BroadcastReviveInterrupt(KSCharacter* Reviver);// 0x27126b0
	void BroadcastReviveComplete(KSCharacter* Reviver);// 0x2712620
	void BroadcastReliableWeaponComponentStateChange(uint32 BroadcastId, uint16 nEquipmentId, KSWeaponDataUpdateContainer NewState);// 0x2712520
	void BroadcastReliableWeaponComponentPostReload(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip);// 0x2712420
	void BroadcastReliableWeaponComponentFiredFull(uint32 BroadcastId, uint16 nEquipmentId, const FullFireRepData Data);// 0x27122f0
	void BroadcastReliableWeaponComponentFiredAmmo(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip);// 0x27121f0
	void BroadcastReliableWeaponComponentFiredAimAndAmmo(uint32 BroadcastId, uint16 nEquipmentId, const AimData Aim, byte AmmoInClip);// 0x2712080
	void BroadcastReliableWeaponComponentFired(uint32 BroadcastId, uint16 nEquipmentId, const AimData Aim);// 0x2711f50
	void BroadcastReliableWeaponComponentEmptyFire(uint32 BroadcastId, uint16 nEquipmentId);// 0x2711e80
	void BroadcastReliableWeaponComponentAmmoChange(uint32 BroadcastId, uint16 nEquipmentId, byte AmmoInClip, bool bBonusAmmo);// 0x2711d40
	void BroadcastModEvent(FName ModEvent);// 0x2711cc0
	void BroadcastGrenadeExplodeInHand(KSWeaponAsset_Grenade* pGrenadeWeaponAsset);// 0x2711c30
	void BroadcastGadgetResupplied();// 0x2711c10
	void BroadcastFlashBangHit(const KSFlashBangRecord Record);// 0x2711b70
	void BroadcastArmorInteractStart(float InteractTime);// 0x2711af0
	void BroadcastArmorInteractInterrupt();// 0x2711ad0
	void BroadcastArmorInteractComplete();// 0x2711ab0
	void BroadcastAmmoChanged(enum AmmoType);// 0x2711a30
	bool BlueprintHandleDeath();// 0x2d74e00
	void Bleed();// 0x2711a10
	void BeginNonCharacterRevive(KSPlayerState* ReviveInstigator, float Duration, FName OverrideReviveeMontage);// 0x2711900
	void BeginInstantRevive(KSCharacter* Reviver, float Duration, bool Guaranteed);// 0x27117f0
	void AutoSprintTimerComplete();// 0x27117d0
	void AttachViewTargetOnlyBPComponents();// 0x2d74e00
	void ApplyMaxHealthBonus(float Bonus, Controller* EventInstigator, Actor* EventCauser, bool bAllowWhileDowned);// 0x2711680
	void ApplyLastHitImpulse(bool UpdateTargetRotation, bool AffectCapsule);// 0x2d74e00
	void ApplyFlinchFromPointDamage(float Damage, class DamageType DamageTypeClass, Vector RelativeImpactLocation, Vector RelativeImpactNormal, FName BoneName, Actor* DamageCauser);// 0x27114a0
	void ApplyCameraProximityFade(float Alpha);// 0x2711420
	bool ApplyApparelAsset(KSApparelAsset* ApparelAsset);// 0x2711390
	bool AnyActivatableModsActive();// 0x2711360
	void AnnounceCharacterSelected(KSJobItem* pJobSelected);// 0x2d74e00
	void AnimAuditStop();// 0x2711340
	void AnimAuditStart();// 0x2711320
	void AnimAuditResume();// 0x2711300
	void AnimAuditClear();// 0x27112e0
	void AimDownSightsToggle();// 0x27112c0
	void AimDownSightsReleased();// 0x27112a0
	void AimDownSightsPressed();// 0x2711280
	void AddTranslucencyModifier(out const FName InKeyObjectName, KSTranslucencyModifier InTranslucencyModifier);// 0x2711190
	int AddTranslucencyMaterialInfo(out const KSTranslucencyMaterialInfo InTranslucencyMaterialInfo);// 0x27110c0
	void AddSkinTag(out const GameplayTag InSkinTag);// 0x2711030
	void AddPhysicalEmoteProp(KSProp_Physical* InProp);// 0x2710fb0
	void AddFootprintInfo(out KSFootprintInfo InFootprintInfo);// 0x2710f10
	void AddEmoteActionRestrictor();// 0x2710ef0
	int AddActionRestrictionForDuration(out const KSActionRestrictor ActionRestrictor, float Duration);// 0x2710e00
	int AddActionRestriction(out const KSActionRestrictor ActionRestrictor);// 0x2710d50
	bool ActivatableModAtIndexActive(int AbilityIndex, bool bIsGameModeAbility);// 0x2710c90
	void AbortFireAllWeapons();// 0x2710c70
	void AbilityChargeUpdated(KSPlayerMod_Activated* ChargingMod);// 0x2710bf0

--------------------------------
Class: KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	byte PawnId;//[Offset: 0xcf8, Size: 1]
	MulticastInlineDelegateProperty OnTakeArmorDamage;//[Size: 1]
	float HealthRegenerationPerSecond;//[Offset: 0xd40, Size: 1]
	float HealthRegenerationPeriod;//[Offset: 0xd44, Size: 1]
	float HealthRegenerationDelay;//[Offset: 0xd48, Size: 1]
	MulticastInlineDelegateProperty OnHealthRegenDelayTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnHealthRegenDelayTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnHealthRegenDelayTimerComplete;//[Size: 1]
	KSTimerComponent* HealthRegenDelayTimer;//[Offset: 0xd80, Size: 1]
	float CurrentOverheal;//[Offset: 0xd90, Size: 1]
	float OverhealDecayPerSecond;//[Offset: 0xd94, Size: 1]
	float OverhealDecayPeriod;//[Offset: 0xd98, Size: 1]
	MulticastInlineDelegateProperty OnOverhealChanged;//[Size: 1]
	float QueuedMovementForgivenessPeriod;//[Offset: 0xdd0, Size: 1]
	float QueuedMovementForgivenessEndTime;//[Offset: 0xdd4, Size: 1]
	enum CurrentQueuedMovement;//[Offset: 0xdd8, Size: 1]
	FName FreeFallCollisionProfileName;//[Offset: 0xddc, Size: 1]
	CameraShake* CurrentFreeFallCameraShake;//[Offset: 0xdf4, Size: 1]
	class KSVelocityCameraShake* FreeFallCameraShake;//[Offset: 0xe08, Size: 1]
	MulticastInlineDelegateProperty OnEndFreeFallDel;//[Size: 1]
	bool bRealWantsCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe20, Size: 1]
	float AimedCrouchCapsuleHalfHeight;//[Offset: 0xe24, Size: 1]
	MulticastInlineDelegateProperty OnSprintChanged;//[Size: 1]
	bool bReplicatedSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe38, Size: 1]
	Vector_NetQuantizeNormal ReplicatedAccelDirection;//[Offset: 0xe3c, Size: 1]
	MulticastInlineDelegateProperty OnPowerSlideChanged;//[Size: 1]
	KSPowerSlideInfo bReplicatedPowerSlide;//[Offset: 0xe58, Size: 1]
	float DodgeRollDuration;//[Offset: 0xe5c, Size: 1]
	bool bReplicatedDodgeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 1]
	MulticastInlineDelegateProperty OnDOdgeRollChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnNearMiss;//[Size: 1]
	float NearMissRange;//[Offset: 0xec0, Size: 1]
	float NearMissCooldownTime;//[Offset: 0xec4, Size: 1]
	float NearMissADSCameraShakeScaleOverride;//[Offset: 0xec8, Size: 1]
	KSSpecialEffect NearMissSpecialEffect;//[Offset: 0xed0, Size: 1]
	class CameraShake* NearMissFrontCameraShake;//[Offset: 0xf28, Size: 1]
	class CameraShake* NearMissBackCameraShake;//[Offset: 0xf30, Size: 1]
	class CameraShake* NearMissRightCameraShake;//[Offset: 0xf38, Size: 1]
	class CameraShake* NearMissLeftCameraShake;//[Offset: 0xf40, Size: 1]
	KSLungeInfo LungeInfo;//[Offset: 0xf48, Size: 1]
	MulticastInlineDelegateProperty OnLungeChanged;//[Size: 1]
	bool bReplicatedAbilityMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf68, Size: 1]
	bool bReplicatedZipLineBracing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf69, Size: 1]
	bool bReplicatedZipLineEnding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6a, Size: 1]
	bool bReplicatedUpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6b, Size: 1]
	float SecondsAwayToBraceOnZipLine;//[Offset: 0xf6c, Size: 1]
	float SecondsAwayToEndOnZipLine;//[Offset: 0xf70, Size: 1]
	KSZipLineInfo ReplicatedZipLineInfo;//[Offset: 0xf78, Size: 1]
	bool bPrevPressedJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf88, Size: 1]
	MulticastInlineDelegateProperty OnJumpedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnLandedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnStartFallingDel;//[Size: 1]
	bool bReplicatedStun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd6, Size: 1]
	bool bReplicatedHardLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff8, Size: 1]
	CameraShake* CurrentSprintCameraShake;//[Offset: 0x1030, Size: 1]
	class KSSprintCameraShake* SprintCameraShake;//[Offset: 0x1040, Size: 1]
	CameraShake* CurrentLandedCameraShake;//[Offset: 0x1048, Size: 1]
	class KSCharacterCameraShake* LandedCameraShake;//[Offset: 0x1058, Size: 1]
	MulticastInlineDelegateProperty OnAimStateChanged;//[Size: 1]
	SceneComponent* ProjectileThrowComponent;//[Offset: 0x1070, Size: 1]
	SceneComponent* GrenadeThrowComponent;//[Offset: 0x1078, Size: 1]
	SceneComponent* MeleeThrowComponent;//[Offset: 0x1080, Size: 1]
	enum ReplicatedAimState;//[Offset: 0x1088, Size: 1]
	enum LastReplicatedAimState;//[Offset: 0x1089, Size: 1]
	bool bEnableSmoothedAimRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108a, Size: 1]
	ReplicatedViewInfo ViewInfo;//[Offset: 0x108c, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a4, Size: 1]
	float CameraLagMaxTimeStep;//[Offset: 0x10a8, Size: 1]
	float CameraRotationLagSpeed;//[Offset: 0x10ac, Size: 1]
	Rotator PreviousDesiredRot;//[Offset: 0x10b0, Size: 1]
	Rotator SmoothedViewRotation;//[Offset: 0x10bc, Size: 1]
	bool bIsSmoothingAimRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c8, Size: 1]
	bool bInRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c9, Size: 1]
	bool bInPreRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ca, Size: 1]
	KSDeathInfo DeathInfo;//[Offset: 0x10d0, Size: 1]
	class KSDamageTypeBase* InstantDeathDamageType;//[Offset: 0x10f8, Size: 1]
	bool bRadialMiss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1100, Size: 1]
	KSCharacterBase* LastCharacterToDamageMe;//[Offset: 0x1108, Size: 1]
	MulticastInlineDelegateProperty OnDeathStateChangedDel;//[Size: 1]
	SphereComponent* HeadCollisionComponent;//[Offset: 0x1188, Size: 1]
	SkeletalMeshComponent* ZiplineMeshComponent;//[Offset: 0x1190, Size: 1]
	SkeletalMeshComponent* UplineMeshComponent;//[Offset: 0x1198, Size: 1]
	PlayerState* BackupPlayerState;//[Offset: 0x11a0, Size: 1]
	FName[] HeadBones;//[Offset: 0x11b0, Size: 1]
	FName[] LimbBones;//[Offset: 0x11c0, Size: 1]
	FName[] ChestBones;//[Offset: 0x11d0, Size: 1]
	<FName,enum> CachedBoneToHitLocationType;//[Offset: 0x11e0, Size: 1]
	FName[] HeadshotPassthroughBones;//[Offset: 0x1230, Size: 1]
	FName[] ChestshotPassthroughBones;//[Offset: 0x1240, Size: 1]
	KSRevealInfo FriendlyVisibilityRevealParameters;//[Offset: 0x1258, Size: 1]
	KSRevealInfo AimedAtRevealParameters;//[Offset: 0x12a0, Size: 1]
	KSRevealInfo KilledByRevealParameters;//[Offset: 0x12e8, Size: 1]
	float KilledByRevealTimeSeconds;//[Offset: 0x1330, Size: 1]
	bool bRevealed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1334, Size: 1]
	LinearColor CurrentRevealColor;//[Offset: 0x1338, Size: 1]
	float OutlineZFadeMin;//[Offset: 0x1348, Size: 1]
	float OutlineZFadeMax;//[Offset: 0x134c, Size: 1]
	LinearColor SpawnImmuneOutlineColorEnemy;//[Offset: 0x1350, Size: 1]
	float FriendlyOutlineFadeDistanceMin;//[Offset: 0x1360, Size: 1]
	float FriendlyOutlineFadeDistanceMax;//[Offset: 0x1364, Size: 1]
	bool bReevaluateSilhouetteNextTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1368, Size: 1]
	bool bForceSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1369, Size: 1]
	enum ForcedSilhouetteType;//[Offset: 0x136a, Size: 1]
	bool bForcedFillSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136b, Size: 1]
	bool bForcedMarkSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136c, Size: 1]
	enum SilhouetteType;//[Offset: 0x136d, Size: 1]
	bool bFillSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136e, Size: 1]
	bool bMarkSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x136f, Size: 1]
	enum SilhouetteQualifier;//[Offset: 0x1370, Size: 1]
	bool bSilhouetteComponentsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1388, Size: 1]
	PrimitiveComponent*[] CachedSilhouetteComponents;//[Offset: 0x1390, Size: 1]
	MulticastInlineDelegateProperty OnRootChanged;//[Size: 1]
	KSMantleInfo ReplicatedMantleInfo;//[Offset: 0x13b0, Size: 1]
	MulticastInlineDelegateProperty OnMantleChanged;//[Size: 1]
	FName InteractionState;//[Offset: 0x1420, Size: 1]
	float InteractionTime;//[Offset: 0x1428, Size: 1]
	MulticastInlineDelegateProperty OnCharacterStartedMovingDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCharacterStoppedMovingDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSwimmingChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSubmergedChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnBreathUpdate;//[Size: 1]
	bool bIsSubmerged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14b0, Size: 1]
	float MaximumLungCapacity;//[Offset: 0x14b4, Size: 1]
	float CurrentLungCapacity;//[Offset: 0x14b8, Size: 1]
	float LungCapacityRecoveryTime;//[Offset: 0x14bc, Size: 1]
	bool bDestroyOnRoundSetup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c0, Size: 1]
	<FName,KSCharacterSocketInfo> CharacterSockets;//[Offset: 0x14e0, Size: 1]
	MulticastInlineDelegateProperty OnEmoteStartedPlaying;//[Size: 1]
	MulticastInlineDelegateProperty OnEmoteStoppedPlaying;//[Size: 1]
	bool bIsSpawnImmune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1550, Size: 1]
	void UpdateSilhouette(float DeltaSeconds);// 0x27260a0
	void UpdateDebugHealthVisibility();// 0x2d74e00
	void UnSubmerge(bool bClientSimulation);// 0x2725f00
	bool TryToInterruptEmote(enum Reason);// 0x2725e70
	void Submerge(bool bClientSimulation);// 0x2725db0
	void StopSprint(bool bInterrupted);// 0x2725d20
	void StopRegenerationTimers();// 0x2725d00
	void StartSprint();// 0x1fdc370
	void ShowDebugLocation(bool bVisible);// 0x2d74e00
	void SetSilhouetteQualifier(enum InQualifier);// 0x2725be0
	void ResetHealthRegeneration();// 0x2725bc0
	void ResetHealthRegenDelay();// 0x2725ba0
	void ResetFreeFallState();// 0x2725b80
	void OverhealDecayTick();// 0x2725b60
	float Overheal(float OverhealValue, Controller* HealInstigator, Actor* HealCauser);// 0x2725a50
	void OnStopDefaultAim();// 0x1fc36a0
	void OnStopAimOverShoulder();// 0x1fc33e0
	void OnStopAimDownSights();// 0x1fc3580
	void OnStopAimAlternate();// 0x1fc3640
	void OnStartDefaultAim();// 0x1fc3660
	void OnStartAimOverShoulder();// 0x1fc3560
	void OnStartAimDownSights();// 0x1fc36e0
	void OnStartAimAlternate();// 0x1fc3540
	void OnRep_Sprint();// 0x1f739f0
	void OnRep_Silhouette();// 0x2725a30
	void OnRep_ReplicatedStun();// 0x2725a10
	void OnRep_ReplicatedAimState();// 0x1fdc610
	void OnRep_ReplicatedAbilityMovement();// 0x1fdc7b0
	void OnRep_PowerSlide();// 0x27259f0
	void OnRep_MantleInfo();// 0x1fc6ce0
	void OnRep_LungeInfo();// 0x27259d0
	void OnRep_IsSubmerged();// 0x27259b0
	void OnRep_DeathState();// 0x1fc3120
	void OnRep_CurrentOverheal();// 0x2725990
	void OnRep_CurrentLungCapacity();// 0x2725970
	void OnRep_BackupPlayerState();// 0x1fc2a30
	void OnEndPowerSlide(enum EndReason);// 0x2d74e00
	void OnBeginPowerSlide();// 0x2d74e00
	void NetMulticast_PlayNearMissEffects(const Vector TraceStart, const Vector TraceEnd, AkAudioEvent* WhizbyAudioEvent);// 0x2725790
	void MarkSilhouetteComponentsDirty();// 0x2725770
	void LockoutMovement(float Time);// 0x27256f0
	bool IsUnderwater();// 0x27256c0
	bool IsThermalDetectable();// 0x2725690
	bool IsStunned();// 0x2725670
	bool IsSprinting();// 0x2725640
	bool IsPlayingEmote();// 0x2725610
	bool IsNearMissOnCooldown();// 0x27255e0
	bool IsLunging();// 0x27255b0
	bool IsLaunched();// 0x2725590
	bool IsInRagdoll();// 0x2725570
	bool IsInPowerSlide();// 0x2725540
	bool IsInHardLandLockout();// 0x2725520
	bool IsInAimTransition();// 0x27254f0
	bool IsBot();// 0x2725490
	bool IsAimingOverShoulder();// 0x2725460
	bool IsAimingDownSights();// 0x2725430
	bool IsAimingAlternate();// 0x2725400
	bool IsAiming();// 0x2725390
	bool IsAbilityMoving();// 0x2725360
	void HealthRegenerationTick();// 0x2725340
	void HealthRegenerationStopped(bool bFullyHealed);// 0x2d74e00
	void HealthRegenerationStarted();// 0x2d74e00
	void HealthRegenDelayTimerTick(float Seconds);// 0x27252c0
	void HealthRegenDelayTimerComplete();// 0x27252a0
	void HealthRegenDelayTimerActive(bool bActive);// 0x2725210
	float Heal(float HealAmount, Controller* HealInstigator, Actor* HealCauser, bool bCanModHeal);// 0x27250c0
	bool HasCharacterSocket(out const FName InSocketName);// 0x2725020
	float GetZiplineAdjustHeight();// 0x2724fe0
	Actor* GetStartSpot();// 0x2724f90
	KSRevealManager* GetRevealManager();// 0x2724f60
	enum GetReplicatedAimState();// 0x2724f40
	Transform GetProjectileThrowTransform();// 0x2724ee0
	Vector GetProjectileThrowLocation();// 0x2724ea0
	float GetPowerSlideProgress();// 0x2724e70
	float GetPowerSlideAngle();// 0x2724e40
	enum GetPlayerSilhouetteQualifier();// 0x2724e20
	byte GetPawnId();// 0x2724e00
	KSSpecialEffect GetNearMissSpecialEffect();// 0x2724cb0
	float GetNearMissRange();// 0x2724c90
	Transform GetMeleeThrowTransform();// 0x2724b50
	Vector GetMeleeThrowLocation();// 0x2724b10
	float GetMaximumLungCapacity();// 0x2724ad0
	float GetLungRecoveryTime();// 0x2724a90
	enum GetLastReplicatedAimState();// 0x2724a70
	KSCharacterMovementComponent* GetKSMovementComponent();// 0x2724a40
	KSCharacterAnimInst* GetKSCharacterAnimInst();// 0x2724a10
	KSCharacter* GetKSCharacter();// 0x27249e0
	KSAnimInstance* GetKSAnimInstance();// 0x27249b0
	FName GetInteractionState();// 0x2724990
	bool GetImmediateDeathRagdoll();// 0x2724970
	float GetHealthRegenDelayTime();// 0x2724920
	Transform GetGrenadeThrowTransform();// 0x27248c0
	Vector GetGrenadeThrowLocation();// 0x2724880
	enum GetDeathState();// 0x2724860
	float GetCurrentOverheal();// 0x2724820
	float GetCurrentLungCapacity();// 0x27247f0
	Vector GetCurrentDesiredMovementDirection();// 0x27247b0
	enum GetCurrentAimState();// 0x2724780
	Vector GetCurrentAccelDirection();// 0x2724740
	Transform GetCharacterSocketTransform(out const FName InSocketName);// 0x2724650
	Rotator GetCharacterSocketRotator(out const FName InSocketName);// 0x27245a0
	Vector GetCharacterSocketLocation(out const FName InSocketName);// 0x27244f0
	PlayerState* GetBestPlayerState();// 0x27244c0
	PlayerState* GetBackupPlayerState();// 0x27244a0
	void ForceStartHealthRegeneration();// 0x2724480
	void ForceSilhouette(bool bInForceSilhouette, enum InSilhouetteType, bool InFillSilhouette, bool InMarkSilhouette);// 0x2724320
	void EndAbilityMovement();// 0x1fdc010
	void DoStun(float StunDuration, bool FreezeInPlace);// 0x2724250
	void DoHardLandAvoid();// 0x1fdc810
	void DoHardLand(float LockoutDuration);// 0x27241d0
	bool CanViewDebugHealth();// 0x2724110
	void BroadcastInstantInteraction(FName InInteractionState);// 0x1f9f8a0
	void BroadcastHealthRegenerationStopped(bool bFullyHealed);// 0x2723ff0
	void BroadcastHardLandAvoid();// 0x1fa48f0
	void BlueprintOnStopSwimming();// 0x2d74e00
	void BlueprintOnStopSubmerged();// 0x2d74e00
	void BlueprintOnStartSwimming();// 0x2d74e00
	void BlueprintOnStartSubmerged();// 0x2d74e00
	void BlueprintEmoteStoppedPlaying();// 0x2d74e00
	void BlueprintEmoteStartedPlaying();// 0x2d74e00
	void BeginDodgeRoll();// 0x1fcb340
	void BeginAbilityMovement();// 0x1fdc030
	bool AllowSprintingRightNow();// 0x2723fa0
	bool AllowPowerSlideRightNow();// 0x2723f70

--------------------------------
Class: KSCharacterFoundation.Character.Pawn.Actor.Object
	Guid[] InputLocks;//[Offset: 0x4d0, Size: 1]
	bool CachedAimAssistVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e4, Size: 1]
	float NextValidAimAssistVisibilityTime;//[Offset: 0x4e8, Size: 1]
	bool bCanEverBeConsideredForAimAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ec, Size: 1]
	bool bIgnoreCollisionWithTeammates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ed, Size: 1]
	KSOutOfBoundsComponent* CachedOutOfBoundsComponent;//[Offset: 0x4f0, Size: 1]
	float ReleasedCachedTimeSeconds;//[Offset: 0x4f8, Size: 1]
	MulticastInlineDelegateProperty OnPlayerStateChangedDel;//[Size: 1]
	KSPlayerModManager* PlayerModManagerOverride;//[Offset: 0x530, Size: 1]
	float Health;//[Offset: 0x538, Size: 1]
	MulticastInlineDelegateProperty OnHealthChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnKilled;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayHitFromPointDamageDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayHitFromRadialDamageDel;//[Size: 1]
	<FName,KSFXCurveComponent*> ActiveFXCurveComponents;//[Offset: 0x5f0, Size: 1]
	PostProcessSettings BlendableSettings;//[Offset: 0x640, Size: 1]
	KSAkComponent* CharacterAkComponent;//[Offset: 0xbc0, Size: 1]
	AkAudioEvent* HitByShieldedAkEvent;//[Offset: 0xbc8, Size: 1]
	AkAudioEvent* HitByArmorBreakAkEvent;//[Offset: 0xbd0, Size: 1]
	bool bIsHovered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd8, Size: 1]
	bool bUseScreenSizeCutoff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd9, Size: 1]
	float PlayerHoverRange;//[Offset: 0xbdc, Size: 1]
	float HoverMinScreenHeightPct;//[Offset: 0xbe0, Size: 1]
	float HoverMinScreenHeightPctADS;//[Offset: 0xbe4, Size: 1]
	bool bUseConeHover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbe8, Size: 1]
	float HoverConeAngle;//[Offset: 0xbec, Size: 1]
	float ADSHoverConeScreenRadius;//[Offset: 0xbf0, Size: 1]
	float AlwaysHoverDistance;//[Offset: 0xbf4, Size: 1]
	bool bUnhoverWhenOccludedByHoveredCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbf8, Size: 1]
	float CachedCameraFOV;//[Offset: 0xbfc, Size: 1]
	Vector2D CachedViewPortSize;//[Offset: 0xc00, Size: 1]
	float CachedHalfTanFOV;//[Offset: 0xc08, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0xc60, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0xc88, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0xcb0, Size: 1]
	byte RoundCreated;//[Offset: 0xcd8, Size: 1]
	void StopKSEffect(FName InFxID);// 0x27298d0
	KSFXCurveComponent* StartKSSpecialEffect(out const KSSpecialEffect Effect, float PlayRate, bool bRestart);// 0x2729760
	CameraShake* StartCameraShakeFull(class CameraShake ShakeClass, out PlayerCameraManager* OutShakeOwner);// 0x2729680
	CameraShake* StartCameraShake(class CameraShake ShakeClass);// 0x27295e0
	void SetHealth(float NewHealth);// 0x2729560
	void SetFootstepsVisibleOnClient(bool bInFootstepsVisibleOnClient);// 0x27294e0
	void ReverseKSEffect(FName InFxID);// 0x2729320
	void ResetMeshRelativeCapsuleHeight(float HalfHeight);// 0x27292a0
	void ResetKSEffectTime(FName InFxID);// 0x2729220
	void ResetCapsuleHeight();// 0x2729200
	void RemoveParticleEffects(ParticleSystemComponent*[] ParticleSystems);// 0x2729120
	bool RemoveModInstance(KSPlayerModInstance* ModInst, bool bRemoveAll);// 0x2729050
	bool RemoveMod(KSPlayerMod* Mod, bool bRemoveAll);// 0x2728f80
	void RemoveInputLock(out const Guid ID);// 0x2728ee0
	void RemoveEffectCurve(FName InFxID);// 0x2728e60
	void RemoveCameraShakeFull(CameraShake* CameraShake, PlayerCameraManager* InShakeOwner);// 0x2728da0
	void RemoveCameraShake(CameraShake* CameraShake);// 0x2728d20
	void RemoveBlendable(interface classNone InBlendableObject);// 0x2728c80
	void PlayHitFromRadialDamage(out const DamageEffect Effect);// 0x2d74e00
	void PlayHitFromPointDamage(out const DamageEffect Effect);// 0x2d74e00
	void PlayHitBySFX(out const DamageEffect InDamageEffect);// 0x2728ba0
	void OnUnhovered(float ExtraTime);// 0x2728b20
	void OnTeamUpdated();// 0x1fc3440
	void OnRep_Health();// 0x1fc2d20
	void OnLeaveTeam(KSTeamState* OldTeam);// 0x2728a50
	void OnJoinTeam(KSTeamState* NewTeam);// 0x27289c0
	void OnHovered();// 0x1fc32a0
	bool IsLocallyViewed();// 0x2728910
	bool IsLocallyHovered();// 0x27288f0
	bool IsDeadOrDestroyed();// 0x27288c0
	bool HasModAny(out const KSPlayerMod*[] TestPlayerMods);// 0x2728800
	bool HasMod(const KSPlayerMod* TestPlayerMod);// 0x2728760
	bool GiveModInstance(KSPlayerMod* Mod, KSPlayerState* ModInstigator, out KSPlayerModInstance* Instance, bool Unique);// 0x2728600
	bool GiveMod(KSPlayerMod* Mod, KSPlayerState* ModInstigator, bool Unique);// 0x27284f0
	KSPlayerModManager* GetPlayerModManagerOverride();// 0x27284d0
	KSOutOfBoundsComponent* GetOutOfBoundsComponent();// 0x27284a0
	bool GetModInstances(out KSPlayerModInstance*[] OutMods);// 0x27283e0
	float GetMaxHealth();// 0x27283a0
	KSPlayerState* GetKSPlayerState();// 0x2728370
	KSCharacterAnimInstBase* GetKSCharacterAnimInstBase();// 0x2728340
	KSPlayerState* GetKSBestPlayerState();// 0x2728310
	float GetHealthPct();// 0x27282d0
	float GetHealth();// 0x2728290
	bool GetGameModeMods(out KSModInst_Activated*[] OutMods);// 0x27281d0
	KSFXCurveComponent* GetFXCurveComponentByFXID(FName InFxID);// 0x2728140
	KSAkComponent* GetCharacterAkComponent();// 0x2728120
	float GetBaseHealth();// 0x27280e0
	bool GetActiveMods(out KSPlayerMod*[] OutMods);// 0x2728020
	bool CanSeeFootprints();// 0x2727f20
	void BroadcastTakeRadialDamage(const DamageEffect Response);// 0x2727e50
	void BroadcastTakePointDamage(DamageEffect Response);// 0x2727d40
	bool AreFootstepsVisibleOnClient();// 0x2727d20
	ParticleSystemComponent*[] AddParticleEffects(KSParticleSystemAttachment[] ParticleSystemAttachments);// 0x2727bf0
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x2727b10
	Guid AddInputLock();// 0x2727ad0

--------------------------------
Class: KSPlayerController.PGame_PlayerController.PlayerController.Controller.Actor.Object
	float ProjectileDebugLifetime;//[Offset: 0x6b8, Size: 1]
	MulticastInlineDelegateProperty OnKSPlayerStateReplicatedDel;//[Size: 1]
	DeferredViewTargetChangeInfo[] DeferredViewTargetChangedUpdate;//[Offset: 0x718, Size: 1]
	KSPlayerState* CurrentSpectateTarget;//[Offset: 0x730, Size: 1]
	Controller* CurrentSpectateController;//[Offset: 0x738, Size: 1]
	Actor* CurrentSpectateViewTarget;//[Offset: 0x740, Size: 1]
	MulticastInlineDelegateProperty OnBeginPlayingState;//[Size: 1]
	ClientContext ClientContext;//[Offset: 0x798, Size: 1]
	ClientInputTypeUse ClientInputTypeUse;//[Offset: 0x8a8, Size: 1]
	bool bRecordingFrameRateInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b0, Size: 1]
	ClientStatistics Render;//[Offset: 0x8b8, Size: 1]
	ClientStatistics Game;//[Offset: 0x8e8, Size: 1]
	ClientStatistics GPU;//[Offset: 0x918, Size: 1]
	ClientStatistics RHIT;//[Offset: 0x948, Size: 1]
	ClientStatistics Frame;//[Offset: 0x978, Size: 1]
	ClientStatistics ResolutionFractionApproximation;//[Offset: 0x9a8, Size: 1]
	double FrameRateDataSmoothingFactor;//[Offset: 0x9d8, Size: 1]
	float FrameRateDataPushCountdown;//[Offset: 0x9e0, Size: 1]
	FName DefaultCameraName;//[Offset: 0x9f8, Size: 1]
	bool bWaitingToViewPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa00, Size: 1]
	float LastPingCalcTime;//[Offset: 0xa04, Size: 1]
	class HUD* HUDClass;//[Offset: 0xa10, Size: 1]
	KSPlayerShotListener* ShotListener;//[Offset: 0xa38, Size: 1]
	MulticastInlineDelegateProperty OnHUDSetup;//[Size: 1]
	bool bCachedIsUIRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90, Size: 1]
	bool bCachedIsOnlyASpector;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa91, Size: 1]
	MulticastInlineDelegateProperty OnPlayerControllerIsUIRelevantDel;//[Size: 1]
	MulticastInlineDelegateProperty OnViewedPawnChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnControllerChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSpectateStateChanged;//[Size: 1]
	KSCharacterBase* KSCharacter;//[Offset: 0xb18, Size: 1]
	bool IsInTouchMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20, Size: 1]
	bool StartInTouchMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb21, Size: 1]
	MulticastInlineDelegateProperty OnTouchModeAutoFireStateChangedDel;//[Size: 1]
	float TouchModeAutoFireRadius;//[Offset: 0xb50, Size: 1]
	float TouchModeAutoFireTickRate;//[Offset: 0xb54, Size: 1]
	float TouchModeClearAdsScopedDelay;//[Offset: 0xb58, Size: 1]
	float TouchModeClearAdsUnscopedDelay;//[Offset: 0xb5c, Size: 1]
	float TouchModeAutoFireTimer;//[Offset: 0xb60, Size: 1]
	bool TouchModeAutoFireActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb68, Size: 1]
	enum TouchModeAimState;//[Offset: 0xb69, Size: 1]
	TimerHandle TouchModeClearAdsTimer;//[Offset: 0xb70, Size: 1]
	uint32 LastTouchAutoFireWeaponID;//[Offset: 0xb78, Size: 1]
	RenderThreadInputHandler* RenderThreadInputHandler;//[Offset: 0xb80, Size: 1]
	MulticastInlineDelegateProperty OnTouchModeChanged;//[Size: 1]
	CurveFloat* MouseLookSensitivityCurve;//[Offset: 0xba0, Size: 1]
	InterpCurveFloat LookSensitivityToMaxLookSpeed;//[Offset: 0xba8, Size: 1]
	float BaseGamepadTurnRateScale;//[Offset: 0xbc0, Size: 1]
	float BaseGamepadLookUpRateScale;//[Offset: 0xbc4, Size: 1]
	Vector2D GamepadRightStickVelocity;//[Offset: 0xbc8, Size: 1]
	Rotator AccumulatedRotationInput;//[Offset: 0xbd0, Size: 1]
	Vector2D GamepadLook;//[Offset: 0xbe0, Size: 1]
	class KSGamepadLookSpeedManager* GamepadLookSpeedManagerClass;//[Offset: 0xbe8, Size: 1]
	class KSGamepadLookSpeedManager* JoyConLookSpeedManagerClass;//[Offset: 0xbf0, Size: 1]
	KSGamepadLookSpeedManager* GamepadLookSpeedManager;//[Offset: 0xbf8, Size: 1]
	KSGamepadLookSpeedManager* JoyConLookSpeedManager;//[Offset: 0xc00, Size: 1]
	float InputYawScaleADS;//[Offset: 0xc08, Size: 1]
	float InputPitchScaleADS;//[Offset: 0xc0c, Size: 1]
	float InputRollScaleADS;//[Offset: 0xc10, Size: 1]
	Rotator ThisFrameKickbackRotationCache;//[Offset: 0xc14, Size: 1]
	bool bKickbackEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 1]
	KickbackPlayback[] ActiveKickback;//[Offset: 0xc28, Size: 1]
	bool bKickbackRecoveryActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38, Size: 1]
	float KickbackRecoveryDelayRemaining;//[Offset: 0xc3c, Size: 1]
	float KickbackRecoveryAcceleration;//[Offset: 0xc40, Size: 1]
	float KickbackRecoveryTargetRate;//[Offset: 0xc44, Size: 1]
	float KickbackRecoveryRate;//[Offset: 0xc48, Size: 1]
	float MaxCumulativeKickbackVerticalAngle;//[Offset: 0xc4c, Size: 1]
	Rotator KickbackRecoveryRotation;//[Offset: 0xc50, Size: 1]
	Rotator KickbackCancelRotation;//[Offset: 0xc5c, Size: 1]
	float KickbackCancelThreshold;//[Offset: 0xc68, Size: 1]
	bool bAllowKickbackRecoveryCancel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc70, Size: 1]
	bool bUseSmartKickbackRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc71, Size: 1]
	float KickbackRecoveryEndThreshold;//[Offset: 0xc74, Size: 1]
	float KickbackScalingFactorMouse;//[Offset: 0xc78, Size: 1]
	KSAimAssistComponent* AimAssistComponent;//[Offset: 0xc80, Size: 1]
	MulticastInlineDelegateProperty ViewedPawnTakeDamageDel;//[Size: 1]
	MulticastInlineDelegateProperty ViewedPawnTakeArmorDamageDel;//[Size: 1]
	MulticastInlineDelegateProperty ViewedPawnInstigateDamageDel;//[Size: 1]
	MulticastInlineDelegateProperty ViewedPawnInstigateDamageNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OwnedPawnInstigateDamageNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OwnedPawnInstigatePreDamageNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OwnedPawnInstigateWeaponFireNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OwnedPawnTakesDamageNotifyDel;//[Size: 1]
	MulticastInlineDelegateProperty OnOwnedPawnTakeDamageFromInstigatorDel;//[Size: 1]
	MulticastInlineDelegateProperty OnHUDAnnouncementComponentCreated;//[Size: 1]
	bool bCreateHUDAnnouncementComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28, Size: 1]
	KSHUDAnnouncementComponent* HUDAnnouncementComponent;//[Offset: 0xd30, Size: 1]
	MulticastInlineDelegateProperty OnPlayerReadyForPlay;//[Size: 1]
	bool bLoadingScreenEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd78, Size: 1]
	bool bFirstPawnAcknowledged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd79, Size: 1]
	bool bFirstCharacterApparelFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7a, Size: 1]
	bool bFirstCharacterWeaponsEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7b, Size: 1]
	bool bKillcamWorldReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7c, Size: 1]
	float LastTimePlayedTime;//[Offset: 0xdb8, Size: 1]
	KSPingManager* PingManager;//[Offset: 0xdc0, Size: 1]
	KSRadialMenuManager* RadialMenuManager;//[Offset: 0xdc8, Size: 1]
	KSJobSelectionManager* JobSelectionManager;//[Offset: 0xdd0, Size: 1]
	CurveFloat* GyroTargetSpeedCurve;//[Offset: 0xe08, Size: 1]
	CurveFloat* GyroSensitivityConversionCurve;//[Offset: 0xe10, Size: 1]
	KSEquipmentManagerComponent* EquipmentManagerComponent;//[Offset: 0xe18, Size: 1]
	LevelSequenceActor* TeamCinematicSequenceActor;//[Offset: 0xe20, Size: 1]
	bool bIsTeamLoadedInLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 1]
	MulticastInlineDelegateProperty OnGameFubarDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuUsedLastSelection;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuForceClosed;//[Size: 1]
	bool bRadialMenuOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe80, Size: 1]
	MulticastInlineDelegateProperty OnAutoPickupChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnNewPollCalled;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalPlayerHasVoted;//[Size: 1]
	MulticastInlineDelegateProperty OnPollCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnVoteCountUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPollStateChanged;//[Size: 1]
	bool bLeftChoiceHeldDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef8, Size: 1]
	bool bRightChoiceHeldDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef9, Size: 1]
	bool bTelemetryFeatureActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xefd, Size: 1]
	MulticastInlineDelegateProperty OnTelemetrySettingsChanged;//[Size: 1]
	bool bUseFallackTeamNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7c, Size: 1]
	int FallbackTeamNum;//[Offset: 0xf80, Size: 1]
	KSMinimapRendererBase* CachedMinimapRenderer;//[Offset: 0xf88, Size: 1]
	MulticastInlineDelegateProperty OnUpdatePlayerRevealedUI;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdateEnemyDetectedUI;//[Size: 1]
	MulticastInlineDelegateProperty OnUpdateActorRevealStateLocally;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalViewAffected;//[Size: 1]
	enum QueueDivertType;//[Offset: 0xfd1, Size: 1]
	MulticastInlineDelegateProperty OnJobSelectorAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnMobileXpChanged;//[Size: 1]
	void ViewedPawnTakeDamage(Actor* InActor, float DamageAmount, const DamageType* DamageTypeCDO, Controller* EventInstigator, Actor* DamageCauser);// 0x27ecf90
	void ViewedPawnTakeArmorDamage(Actor* InActor, float DamageAmount, const DamageType* DamageTypeCDO, Controller* EventInstigator, Actor* DamageCauser);// 0x27ece00
	void ViewedPawnInstigatedDamageNotify(KSCharacterBase* InPawn, out const CombatEventInfo DamageInfo);// 0x27ecc90
	void ViewedPawnInstigatedDamage(KSCharacterBase* InPawn, float DamageAmount, const DamageType* DamageTypeCDO, Actor* Target, Actor* DamageCauser);// 0x27ecb00
	void TriggerInputAction(FName ActionName, Key ActionKey, byte InputEvent);// 0x27ec9a0
	void TriggerCustomAudioEvent(FString CustomEvent);// 0x27ec900
	void TriggerAudioEvent(enum Event);// 0x27ec880
	void ToggleTouch();// 0x27ec860
	bool ShouldVoteBlockMenu();// 0x27ec830
	bool ShouldThermalVisionSkipTeammates();// 0x27ec810
	void SetYawLocked(bool bNewLocked);// 0x27ec780
	void SetVoteShouldBlockMenu();// 0x27ec760
	void SetTouchModeClearAdsTimer(bool bIsScoped);// 0x27ec6d0
	void SetSkipTeammatesForThermalVision(bool bShouldSkip);// 0x27ec650
	void SetPitchLocked(bool bNewLocked);// 0x27ec5c0
	void SetIsTeamLoadedInLobby(bool bIsLoaded);// 0x27ec530
	void SetGamepadTurnRateScale(float NewScale);// 0x27ec4b0
	void SetGamepadLookUpRateScale(float NewScale);// 0x27ec430
	void SetForceThermalVision(bool bForceEnable, bool bIsSpectator);// 0x27ec360
	void SetAutoShoulderSwapEnabled(bool bEnable);// 0x27ec2d0
	void SetAutoPickupEnabled(bool bEnable);// 0x27ec240
	void ServerUpdatePing(float ExactPing);// 0x27ec0c0
	void ServerSetQueueDivertType(enum InQueueDivertType);// 0x27ec010
	void ServerSetIsTeamLoadedInLobby(bool bIsLoaded);// 0x27ebf50
	void ServerSetAutoPickupPreference(bool bEnableAutoPickup);// 0x27ebe90
	void ServerReselectJob();// 0x27ebe70
	void ServerReportQuitFromMenu();// 0x27ebe20
	void ServerPushInputTypeUse(const ClientInputTypeUse PushedClientInputTypeUse);// 0x27ebd60
	void ServerPushFrameRateData(const ClientStatistics PushedRender, const ClientStatistics PushedGame, const ClientStatistics PushedGPU, const ClientStatistics PushedRHI, const ClientStatistics PushedFrame, const ClientStatistics PushedResolutionFractionApproximation);// 0x27ebac0
	void ServerPushClientContext(const ClientContext PushedClientContext);// 0x27eb9b0
	void ServerNotifyClientSimpleSimulation(bool UseSimple);// 0x27eb8f0
	void ServerLagCompensationVisualization(bool bEnable);// 0x27eb830
	void ServerChangeSpectateTarget(bool bForward);// 0x27eb770
	void ServerBouncePing(float Timestamp);// 0x27eb6c0
	void Server_RequestEmoteOnCinematicCharacter(KSPlayerState* CallingPlayerState, KSEmote* Emote);// 0x27ec170
	void ReselectJob();// 0x27eb6a0
	void RequestEmoteOnCinematicCharacter(KSEmote* Emote);// 0x27eb620
	void ReportWeaponsEquipped();// 0x27eb5d0
	void ReportLoadingScreenEnded();// 0x27eb580
	void ReportKillcamWorldReady();// 0x27eb530
	void ReportApparelApplied();// 0x27eb4e0
	void ReportAllReadyConditionsMet();// 0x27eb490
	void ReevaluateSightMods();// 0x27eb470
	void ReevaluateFootprints(KSCharacter* CheckCharacter);// 0x27eb3f0
	void ReevaluateAllRevealDisplays();// 0x27eb3d0
	void RadialMenuUseLastSelection(enum ButtonCosmeticSlot);// 0x27eb350
	void RadialMenuReleased(enum ButtonCosmeticSlot, bool bIsContextualPingHold);// 0x27eb280
	void RadialMenuPressed(enum ButtonCosmeticSlot, bool bIsContextualPingHold);// 0x27eb1b0
	void RadialMenuForceClosed();// 0x27e7250
	void PlayEmoteOnCinematicCharacter(KSPlayerState* CallingPlayerState, KSEmote* Emote);// 0x27eb0f0
	void OnSpectateViewTargetDestroyed(Actor* InViewTarget);// 0x27eaf00
	void OnSpectateViewedCharacterKilledTimerElapsed(const KSCharacterBase* KilledCharacter);// 0x27eb060
	void OnSpectateViewedCharacterKilled(const KSCharacterFoundation* KillerCharacter, const KSCharacterFoundation* KilledCharacter);// 0x27eaf90
	void OnSpectateControllerDestroyed(Actor* InActor);// 0x27eae70
	void OnPrimaryPawnDestroyed(Actor* InPrimaryPawn);// 0x27eadf0
	void OnLoadingScreenEnded();// 0x27eadd0
	void OnKillcamWorldReady();// 0x27eadb0
	void OnJobSelectorDestroyed(Actor* DestroyedActor);// 0x27ead30
	void OnDelayedPossess(Pawn* InPawn);// 0x27eaca0
	void OnCurrentSpectateTargetDestroyed(Actor* DestroyedActor);// 0x27eac20
	void OnCharacterWeaponsEquipped();// 0x27eac00
	void OnCharacterApparelApplied();// 0x27eabe0
	void LocalStopAimDownSights();// 0x27eabc0
	void LocalStartAimDownSights();// 0x27eaba0
	bool IsViewWithinMinimapBounds();// 0x27eab70
	bool IsUIRelevantOrSpectator();// 0x27eab40
	bool IsUIRelevant();// 0x27eab10
	bool IsThermalVisionForced();// 0x27eaaf0
	static enum IsTeamNumFriendlyWithLocalPlayerAdvanced(const Object* WorldContextObject, int TeamNum, out int RelativeTeam);// 0x27ea9f0
	static enum IsTeamNumFriendlyWithLocalPlayer(const Object* WorldContextObject, int TeamNum);// 0x27ea930
	static enum IsTeamNumFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, int TeamNum, out int RelativeTeam);// 0x27ea830
	static enum IsTeamNumFriendlyWithController(const PlayerController* InPlayerController, int TeamNum);// 0x27ea770
	bool IsRadialMenuOpen();// 0x27ea740
	static enum IsPersistentPlayerFriendlyWithLocalPlayerAdvanced(const Object* WorldContentObject, const KSPersistentPlayerData* Data, out int RelativeTeam);// 0x27ea640
	static enum IsPersistentPlayerFriendlyWithLocalPlayer(const Object* WorldContextObject, const KSPersistentPlayerData* Data);// 0x27ea580
	static enum IsPersistentPlayerFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, const KSPersistentPlayerData* Data, out int RelativeTeam);// 0x27ea480
	static enum IsPersistentPlayerFriendlyWithController(const PlayerController* InPlayerController, const KSPersistentPlayerData* Data);// 0x27ea3c0
	bool IsPawnDesiredAimDefault();// 0x27ea390
	static bool IsOnlyASpectator(const PlayerController* PlayerController);// 0x27ea310
	static enum IsObjectiveFriendlyWithLocalPlayerAdvanced(const KSObjectiveBase* Objective, out int RelativeTeam);// 0x27ea240
	static enum IsObjectiveFriendlyWithLocalPlayer(const KSObjectiveBase* Objective);// 0x27ea1c0
	static enum IsObjectiveFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, const KSObjectiveBase* Objective, out int RelativeTeam);// 0x27ea0c0
	static enum IsObjectiveFriendlyWithController(const PlayerController* InPlayerController, const KSObjectiveBase* Objective);// 0x27ea000
	static bool IsLocalPlayerOnlyASpectator(const Object* WorldContextObject);// 0x27e9f80
	bool IsInShownWorld();// 0x27e9f50
	enum IsFriendlyWithTeamNumAdvanced(int TeamNum, out int RelativeTeam);// 0x27e9e80
	enum IsFriendlyWithTeamNum(int TeamNum);// 0x27e9df0
	enum IsFriendlyWithPersistentPlayerAdvanced(const KSPersistentPlayerData* Data, out int RelativeTeam);// 0x27e9d20
	enum IsFriendlyWithPersistentPlayer(const KSPersistentPlayerData* Data);// 0x27e9c90
	enum IsFriendlyWithObjectiveAdvanced(const KSObjectiveBase* Objective, out int RelativeTeam);// 0x27e9bc0
	enum IsFriendlyWithObjective(const KSObjectiveBase* Objective);// 0x27e9b30
	static enum IsFriendlyWithLocalPlayerAdvanced(const Actor* Actor, out int RelativeTeam);// 0x27e9a60
	static enum IsFriendlyWithLocalPlayer(const Actor* Actor);// 0x27e99e0
	static enum IsFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, const Actor* Actor, out int RelativeTeam);// 0x27e98e0
	static enum IsFriendlyWithController(const PlayerController* InPlayerController, const Actor* Actor);// 0x27e9820
	enum IsFriendlyWithComponentAdvanced(const SceneComponent* Component, out int RelativeTeam);// 0x27e9750
	enum IsFriendlyWithComponent(const SceneComponent* Component);// 0x27e96c0
	enum IsFriendlyWithAdvanced(const Actor* Actor, out int RelativeTeam);// 0x27e95f0
	enum IsFriendlyWith(const Actor* Actor);// 0x27e9560
	static enum IsComponentFriendlyWithLocalPlayerAdvanced(const SceneComponent* Component, out int RelativeTeam);// 0x27e9490
	static enum IsComponentFriendlyWithLocalPlayer(const SceneComponent* Component);// 0x27e9410
	static enum IsComponentFriendlyWithControllerAdvanced(const PlayerController* InPlayerController, const SceneComponent* Component, out int RelativeTeam);// 0x27e9310
	static enum IsComponentFriendlyWithController(const PlayerController* InPlayerController, const SceneComponent* Component);// 0x27e9250
	bool IsAutoShoulderSwapEnabled();// 0x27e9220
	bool IsAutoPickupEnabled();// 0x27e9200
	bool HasUIBlockingRightStickLookInput();// 0x27e91d0
	KSPlayerState* GetViewedPlayerState();// 0x27e91a0
	int GetValidSpectateTargetCount();// 0x27e9170
	Pawn* GetUIPawn();// 0x27e9140
	KSCharacter* GetUIKSCharacter();// 0x27e9110
	TelemetrySettings GetTelemetrySettings();// 0x27e90d0
	KSPlayerShotListener* GetShotListener();// 0x27e90b0
	KSRevealManager* GetRevealManager();// 0x27e9080
	KSRadialMenuManager* GetRadialMenuManager();// 0x27e9060
	FText GetRadialItemNameByEquipPoint(out const GameplayTag InEquipPoint);// 0x27e8f60
	KSCharacterBase* GetPrimaryPawn();// 0x27e8f20
	KSPingManager* GetPingManager();// 0x27e8f00
	int GetPing();// 0x27e8ed0
	static int GetPerceivedTeamNumForLocalPlayer(const Object* WorldContextObject);// 0x27e8e50
	static int GetPerceivedTeamNumForController(const PlayerController* InPlayerController);// 0x27e8dd0
	int GetPerceivedTeamNum();// 0x27e8da0
	static KSTeamState* GetPerceivedLocalTeamForLocalPlayer(const Object* WorldContextObject);// 0x27e8d20
	static KSTeamState* GetPerceivedLocalTeamForController(const PlayerController* InPlayerController);// 0x27e8ca0
	KSTeamState* GetPerceivedLocalTeam();// 0x27e8c70
	void GetOutgoingPacketInfo(out float KBPerSecond, out int PacketsPerSecond, out float PacketLossRatio);// 0x27e8b30
	KSPlayerState* GetKSPlayerState();// 0x27e8af0
	KSJobSelectionManager* GetJobSelectionManager();// 0x27e8ad0
	bool GetIsTeamLoadedInLobby();// 0x27e8ab0
	bool GetIsPlayerBackfilling();// 0x27e8a70
	void GetIncomingPacketInfo(out float KBPerSecond, out int PacketsPerSecond, out float PacketLossRatio);// 0x27e8930
	KSHUDAnnouncementComponent* GetHUDAnnouncementComponent();// 0x27e8910
	KSGamepadLookSpeedManager* GetGamepadLookSpeedManager();// 0x27e88b0
	float GetFPS();// 0x27e8880
	KSEquipmentManagerComponent* GetEquipmentManagerComponent();// 0x27e8860
	KSAimAssistComponent* GetAimAssistComponent();// 0x27e8840
	KSJobSelector* GetActiveJobSelector();// 0x27e8810
	void FlushVoteInput();// 0x27e87f0
	void FinalizeAutoPickupPreferenceChange();// 0x27e87d0
	void FillInClientContext();// 0x27e87b0
	void EventViewedPawnTakeDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin);// 0x2d74e00
	void EventViewedPawnTakeArmorDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin);// 0x2d74e00
	void EventViewedPawnInstigatedDamageNotify(out const CombatEventInfo DamageInfo);// 0x2d74e00
	void EventViewedPawnInstigatedDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* Target, Actor* DamageCauser);// 0x2d74e00
	void EnablePreventFlushPressedKeys();// 0x27e8790
	void CreateHUDAnnouncementComponent();// 0x27e8770
	void CompVis(bool bEnable);// 0x27e86e0
	void ClientViewedPawnTakeDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin, bool bPrimaryPawn);// 0x27e8460
	void ClientViewedPawnTakeArmorDamage(float DamageAmount, class DamageType DamageTypeClass, Actor* DamageCauser, Vector DamageOrigin, bool bPrimaryPawn);// 0x27e82b0
	void ClientViewedPawnInstigatedDamageNotify(CombatEventInfo DamageInfo, bool bPrimaryPawn);// 0x27e8000
	void ClientUpdateActivityProgressCount(int64 ActivityItemId, int NewProgressCount);// 0x27e7f30
	void ClientSpectateTeam();// 0x27e7f10
	void ClientSpectateFreeCam();// 0x27e7ef0
	void ClientSignalEndOfMatch();// 0x27e7ed0
	void ClientReturnPing(float Timestamp);// 0x27e7e50
	void ClientPlayInstantReplay(float TimeToRewind, float Duration, float DilationStart, float DilationAmount);// 0x27e7d00
	void ClientOnPollStateChanged(bool bIsPaused);// 0x27e7c70
	void ClientOnPollCompleted(KSPollResults PollResults);// 0x27e7ba0
	void ClientNotifyMobileXpGain(const KSMobileXpChangeEvent Event);// 0x27e7aa0
	void ClientDrawDebugSphere(const Vector Center, float Radius, const Color Color, float Duration);// 0x27e7960
	void ClientDrawDebugLine(const Vector start, const Vector end, const Color Color, float Duration);// 0x27e7820
	void ClientDrawDebugCapsule(const Transform Transform, float Radius, float HalfHeight, const Color Color, float Duration);// 0x27e7640
	void ClientDrawDebugBox(const Transform Transform, const Vector Extent, const Color Color, float Duration);// 0x27e74b0
	void ClientAddSystemMessage_LateJoin(FString PlayerName);// 0x27e7410
	void ClientAddSystemMessage_Backfill(FString PlayerName);// 0x27e7370
	void ClientAddSystemMessage(const FText Message);// 0x27e72b0
	void Client_ReevaluateSightMods();// 0x27e86c0
	void Client_ReevaluateRevealDisplayOfActor(Actor* ActorToCheck);// 0x27e8630
	void Client_ReevaluateAllRevealDisplays();// 0x27e8610
	void ClearTouchModeADSTimer();// 0x27e7290
	void ClearRotationLocks();// 0x27e7270
	void ClearActiveInteractableUI();// 0x27e7250
	bool CanViewedCharacterSeeFootprintsForCharacter(KSCharacter* CheckCharacter);// 0x27e71c0
	void CachePostMatchScoreboard(ScoreboardStats ScoreboardStats);// 0x27e70a0
	void CachePostMatchInfo(PlayerRewardsSummaryReplicated RewardsReplicated);// 0x27e6f60
	void ApplyKickback(const InterpCurveVector2D KickbackCurve, float InKickbackRecoveryDelay, float InKickbackRecoveryRate, float InKickbackRecoveryAccel, float InMaxCumulativeKickbackVerticalAngle, float ScalingFactor);// 0x27e6d20
	void AddTimePlayed();// 0x27e6d00
	bool ActivateRadialItemByEquipPoint(out const GameplayTag InEquipPoint);// 0x27e6c60

--------------------------------
Class: PGame_PlayerController.PlayerController.Controller.Actor.Object
	FString SonyMatchId;//[Offset: 0x658, Size: 1]
	FString SonyActivityId;//[Offset: 0x668, Size: 1]
	enum SonyMatchState;//[Offset: 0x678, Size: 1]
	enum QueuedSonyMatchState;//[Offset: 0x679, Size: 1]
	bool bIsSonyMatchOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67a, Size: 1]
	bool bIsEligibleSonyMatchOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67b, Size: 1]
	bool bIsExclusiveSonyMatchOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c, Size: 1]
	class PGame_CheatComponent* m_CheatComponentClass;//[Offset: 0x690, Size: 1]
	PGame_CheatComponent* r_CheatComponent;//[Offset: 0x698, Size: 1]
	SerializedMctsNetId r_ReplicatedNetId;//[Offset: 0x6a0, Size: 1]
	class InputComponent* InputComponentClass;//[Offset: 0x6a8, Size: 1]
	void ServerUpdateSonyMatchOwnerEligibility(bool bIsEligible);// 0xd954a0
	void ServerUpdateSonyMatchData(FString InMatchId);// 0xd95400
	void ServerUpdateEOSProductUserId(FString NewUserId);// 0xd95340
	void ClientUpdateSonyMatchData(FString InMatchId, FString InActivityId);// 0xd936b0
	void ClientGameFubared(enum Reason);// 0xd93630
	void ClientCheckSonyMatchOwnerEligibility();// 0xd93610

--------------------------------
Class: PGame_CheatComponent.ActorComponent.Object
	void TestFubarRewardPostLogin();// 0xd95af0
	void TestFubarRewardPosted();// 0xd95b40
	void TestFubar();// 0xd95aa0
	void ServerTestFubarRewardPostLogin();// 0xd94dd0
	void ServerTestFubarRewardPosted();// 0xd94e20
	void ServerTestFubar();// 0xd94d80
	void ServerExecCall(FString request);// 0xd94cc0
	void ServerExec(FString request);// 0xd94c20
	void Logout();// 0xd94910
	void gmJoinQueue(int QueueId);// 0xd95c30
	void gmCommand(FString request);// 0xd95b90
	void gmC(FString request);// 0xd95b90
	void ForceCrash();// 0xd93b80
	void DumpAnimationStats();// 0xd93a90
	void CustomForceStart();// 0xd93a70

--------------------------------
Class: CombatEventInfo
	PlayerState* EventVictim;//[Offset: 0x0, Size: 1]
	PlayerState* EventInstigator;//[Offset: 0x8, Size: 1]
	Controller* InstigatorController;//[Offset: 0x10, Size: 1]
	PlayerState*[] EventAssistants;//[Offset: 0x18, Size: 1]
	Actor* DamagedActor;//[Offset: 0x28, Size: 1]
	Actor* DamageCauser;//[Offset: 0x30, Size: 1]
	class DamageType* DamageType;//[Offset: 0x38, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x40, Size: 1]
	bool DownEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool KillEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	enum HitLocationType;//[Offset: 0x4a, Size: 1]
	float DamageDealt;//[Offset: 0x4c, Size: 1]
	float OverkillDamageDealt;//[Offset: 0x50, Size: 1]
	float OriginalDamageDealt;//[Offset: 0x54, Size: 1]
	float ArmorDurability;//[Offset: 0x58, Size: 1]
	bool IsArmorHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool bDidArmorBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]
	bool bDamageResisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e, Size: 1]
	bool bDamageReduced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f, Size: 1]
	bool bDamageShielded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	bool IsRadialDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]
	bool WasCharacterAlreadyDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 1]
	bool WasCharacterBeingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 1]
	bool bDamageMastered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	int VictimBounty;//[Offset: 0x68, Size: 1]
	float ArmorDamageDealt;//[Offset: 0x6c, Size: 1]
	bool bBonusDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	KSPlayerMod*[] DamageCauserTriggeredMods;//[Offset: 0x78, Size: 1]

--------------------------------
Class: KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	DataTable* ItemDisplayStatParamsTable;//[Offset: 0x280, Size: 1]
	DataTable* ItemCoalesceParamsTable;//[Offset: 0x288, Size: 1]
	FText WeaponDisplayName;//[Offset: 0x290, Size: 1]
	FText WeaponDescription;//[Offset: 0x2a8, Size: 1]
	enum WeaponEquipType;//[Offset: 0x2c0, Size: 1]
	class KSWeapon* WeaponClass;//[Offset: 0x2c8, Size: 1]
	class KSWeaponComponent* WeaponComponentClass;//[Offset: 0x2f0, Size: 1]
	class Object* WeaponAmmoWidgetClass;//[Offset: 0x318, Size: 1]
	class Object* RechargeMethod;//[Offset: 0x340, Size: 1]
	bool bUseComposedResourceName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 1]
	FName ChargeResourceName;//[Offset: 0x36c, Size: 1]
	class KSWeaponAssetDrop* WeaponDropClass;//[Offset: 0x378, Size: 1]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool bShouldBeRemovedWhenExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool bCanBeDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool bWillDropWhenDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	bool bForceUprightDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	bool bDoesRestoreAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5, Size: 1]
	bool bModsCanReplenishAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a6, Size: 1]
	bool bDoLocalReveals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a7, Size: 1]
	bool bCanEverFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a8, Size: 1]
	bool bCanAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a9, Size: 1]
	bool bLagCompensatedFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3aa, Size: 1]
	bool bIgnoreNoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ab, Size: 1]
	bool bLimitNumInPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 1]
	int MaxNumInPlay;//[Offset: 0x3b0, Size: 1]
	bool bLimitDeployablesByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 1]
	int PlayerDeployableThreshold;//[Offset: 0x3b8, Size: 1]
	bool bShowReserveAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	bool bUsesEquipPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bd, Size: 1]
	bool bUsesEquipSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3be, Size: 1]
	GameplayTagContainer ValidEquipPoints;//[Offset: 0x3c0, Size: 1]
	enum FireModeType;//[Offset: 0x3e0, Size: 1]
	enum CastType;//[Offset: 0x3e1, Size: 1]
	enum TouchAbilityCastType;//[Offset: 0x3e2, Size: 1]
	int RoundsPerBurst;//[Offset: 0x3e4, Size: 1]
	bool bUseAltFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool bUseBuildupForCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	float BuildupTime;//[Offset: 0x3ec, Size: 1]
	float PreFireTime;//[Offset: 0x3f0, Size: 1]
	float PreFireInterruptThreshold;//[Offset: 0x3f4, Size: 1]
	float AltPreFireTime;//[Offset: 0x3f8, Size: 1]
	float PostFireTime;//[Offset: 0x3fc, Size: 1]
	float AltPostFireTime;//[Offset: 0x400, Size: 1]
	float PostFireForgivenessTime;//[Offset: 0x404, Size: 1]
	bool bSwapAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool bSwapGadgetOnExhaust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	float CooldownTime;//[Offset: 0x40c, Size: 1]
	bool bUseChargingFireRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410, Size: 1]
	float InitialPostFireTime;//[Offset: 0x414, Size: 1]
	float FinalPostFireTime;//[Offset: 0x418, Size: 1]
	float PostFireChargeTime;//[Offset: 0x41c, Size: 1]
	float PostFireDecayTime;//[Offset: 0x420, Size: 1]
	float PostFireDecayDelay;//[Offset: 0x424, Size: 1]
	bool bCanEverReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bConsumeAmmoDirectlyFromInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	int ClipSize;//[Offset: 0x42c, Size: 1]
	enum ReloadType;//[Offset: 0x430, Size: 1]
	float PreReloadTime;//[Offset: 0x434, Size: 1]
	float PostReloadTime;//[Offset: 0x438, Size: 1]
	float ReloadCooldownTime;//[Offset: 0x43c, Size: 1]
	bool bReloadOnEmptyWhileScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	float FirstShotPreReloadTime;//[Offset: 0x444, Size: 1]
	bool bCanInterruptPreReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	enum AmmoType;//[Offset: 0x449, Size: 1]
	int DefaultAmmo;//[Offset: 0x44c, Size: 1]
	bool bUnlimitedAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450, Size: 1]
	bool bMuteEmptyClipWarnings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451, Size: 1]
	float HolsterTime;//[Offset: 0x454, Size: 1]
	bool bShouldRestrictHolsterInPostFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x458, Size: 1]
	float RetriveTime;//[Offset: 0x45c, Size: 1]
	bool bCanFireFromRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	enum ReticleType;//[Offset: 0x461, Size: 1]
	bool bFadeUIOnAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]
	bool bOverrideTouchCancelButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 1]
	bool bOverrideTouchCancelButtonVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	WeaponStateGraph WeaponStateGraph;//[Offset: 0x468, Size: 1]
	bool bDoRadialDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	bool bIsRadialDamageConical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a9, Size: 1]
	float HeadDamageAmount;//[Offset: 0x5ac, Size: 1]
	float DamageAmount;//[Offset: 0x5b0, Size: 1]
	float LimbDamageAmount;//[Offset: 0x5b4, Size: 1]
	InterpCurveFloat DamageFalloffCurve;//[Offset: 0x5b8, Size: 1]
	RadialDamageParams RadialDamageParams;//[Offset: 0x5d0, Size: 1]
	bool bIgnoreFriendlies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4, Size: 1]
	bool bIgnoreEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e5, Size: 1]
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e6, Size: 1]
	bool bIgnoreWalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e7, Size: 1]
	float RadialConicalHalfAngle;//[Offset: 0x5e8, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x5f0, Size: 1]
	float CautionRadius;//[Offset: 0x618, Size: 1]
	int ShotPenetrationCount;//[Offset: 0x61c, Size: 1]
	float DefaultAimTransitionTime;//[Offset: 0x620, Size: 1]
	bool bCanEverAimOverShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 1]
	float AimOverShoulderTransitionTime;//[Offset: 0x628, Size: 1]
	bool bCanEverAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c, Size: 1]
	float AimDownSightsTransitionTime;//[Offset: 0x630, Size: 1]
	bool bLockoutAimStateInCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634, Size: 1]
	float AimDownSightsFov;//[Offset: 0x638, Size: 1]
	bool bCanEverAimAlternate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	float AimAlternateTransitionTime;//[Offset: 0x640, Size: 1]
	bool bAimAlternateAbortsFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 1]
	bool bPrefireLockon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645, Size: 1]
	float PrefireLockonAngle;//[Offset: 0x648, Size: 1]
	float PrefireLockonDistance;//[Offset: 0x64c, Size: 1]
	bool bLimitCameraRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 1]
	float MinCameraPitch;//[Offset: 0x654, Size: 1]
	float MaxCameraPitch;//[Offset: 0x658, Size: 1]
	float MinCameraYaw;//[Offset: 0x65c, Size: 1]
	float MaxCameraYaw;//[Offset: 0x660, Size: 1]
	bool bOverrideShoulderCameraProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	float ShoulderCameraBoomLength;//[Offset: 0x668, Size: 1]
	Vector ShoulderCameraSocketOffset;//[Offset: 0x66c, Size: 1]
	Vector ShoulderCameraTargetOffset;//[Offset: 0x678, Size: 1]
	Transform ShoulderCameraTransform;//[Offset: 0x690, Size: 1]
	bool bIsMountedWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	bool bAllowsManualShoulderSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c1, Size: 1]
	enum ForcedShoulder;//[Offset: 0x6c2, Size: 1]
	bool bUseCrouchAOSCamVertOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c3, Size: 1]
	float GamepadTurnSpeedMultiplier;//[Offset: 0x6c4, Size: 1]
	float GamepadAimedTurnSpeedMultiplier;//[Offset: 0x6c8, Size: 1]
	bool bPrefireOverlapSkipsToFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	PrefireSkipWindow[] PrefireSkipWindows;//[Offset: 0x6d0, Size: 1]
	float PrefireOverlapGracePeriod;//[Offset: 0x6e0, Size: 1]
	enum ThirdPersonAimOriginType;//[Offset: 0x6e4, Size: 1]
	Vector ThirdPersonFixedRelativeOffset;//[Offset: 0x6e8, Size: 1]
	FName ThirdPersonAimOriginSocketName;//[Offset: 0x6f4, Size: 1]
	bool bUseMirroredAimOrigin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	FName MirroredThirdPersonAimOriginSocketName;//[Offset: 0x700, Size: 1]
	float BaseAccuracy;//[Offset: 0x708, Size: 1]
	float CrouchAccuracyModifier;//[Offset: 0x70c, Size: 1]
	float AimOverShoulderAccuracyModifier;//[Offset: 0x710, Size: 1]
	float InAirAccuracyModifier;//[Offset: 0x714, Size: 1]
	float MovementAccuracyPenalty;//[Offset: 0x718, Size: 1]
	bool bUseAccuracyLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71c, Size: 1]
	bool bUseAccuracyInADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71d, Size: 1]
	float AccuracyLossPerShot;//[Offset: 0x720, Size: 1]
	float MaxFiringAccuracyLoss;//[Offset: 0x724, Size: 1]
	float AccuracyReturnRate;//[Offset: 0x728, Size: 1]
	float AccuracyGainPerShot;//[Offset: 0x72c, Size: 1]
	float MaxFiringAccuracyGain;//[Offset: 0x730, Size: 1]
	float MaxAimedFiringAccuracyGain;//[Offset: 0x734, Size: 1]
	float AccuracyDecayRate;//[Offset: 0x738, Size: 1]
	float AccuracyReturnDelay;//[Offset: 0x73c, Size: 1]
	float MaxHipFireAccuracy;//[Offset: 0x740, Size: 1]
	float MaxAimedAccuracy;//[Offset: 0x744, Size: 1]
	KickbackModule* KickbackModule;//[Offset: 0x748, Size: 1]
	float KickbackApplicationTimeOverride;//[Offset: 0x750, Size: 1]
	bool bCanResetKickback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x754, Size: 1]
	float KickbackResetTime;//[Offset: 0x758, Size: 1]
	bool bUseKickbackRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75c, Size: 1]
	float KickbackRecoveryDelay;//[Offset: 0x760, Size: 1]
	float KickbackRecoveryRate;//[Offset: 0x764, Size: 1]
	float KickbackRecoveryAcceleration;//[Offset: 0x768, Size: 1]
	float MaxCumulativeKickbackVerticalAngle;//[Offset: 0x76c, Size: 1]
	float GamepadKickbackScaling;//[Offset: 0x770, Size: 1]
	float SprintRecoveryTime;//[Offset: 0x774, Size: 1]
	bool bStartFireInterruptsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	bool bStartReloadInterruptsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x779, Size: 1]
	bool bStartHolsterInterruptsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x77a, Size: 1]
	float DodgeRollRecoveryTime;//[Offset: 0x77c, Size: 1]
	bool bShouldPreventDodgeRollDuringFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x780, Size: 1]
	bool bCanFireWhileInPowerSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x781, Size: 1]
	bool bCanUseWhileOnZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x782, Size: 1]
	bool bIsAudible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x783, Size: 1]
	float AudibleRange;//[Offset: 0x784, Size: 1]
	float WalkSpeedModifier;//[Offset: 0x788, Size: 1]
	float CrouchSpeedModifier;//[Offset: 0x78c, Size: 1]
	float SprintSpeedModifier;//[Offset: 0x790, Size: 1]
	float ADSSpeedModifier;//[Offset: 0x794, Size: 1]
	float FiringSpeedModifier;//[Offset: 0x798, Size: 1]
	bool bCanUseOffGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79c, Size: 1]
	GameplayTagContainer ValidWeaponAttachmentPoints;//[Offset: 0x7a0, Size: 1]
	<KSWeaponAttachment*> ValidAttachments;//[Offset: 0x7c0, Size: 1]
	int AttachmentSlotCount;//[Offset: 0x810, Size: 1]
	KSItem* DefaultWrap;//[Offset: 0x818, Size: 1]
	<FName,KSWeaponAsset*> AuxiliaryWeapons;//[Offset: 0x840, Size: 1]
	ForceFeedbackEffect* VibrationEffect;//[Offset: 0x890, Size: 1]
	ForceFeedbackEffect* AlternativeVibrationEffect;//[Offset: 0x8b8, Size: 1]
	ForceFeedbackAttenuation* AlternativeVibrationAttenuation;//[Offset: 0x8e0, Size: 1]
	AkAudioEvent* RumbleEvent;//[Offset: 0x908, Size: 1]
	KSWeaponAsset* WeaponUpgrade;//[Offset: 0x910, Size: 1]
	Texture2D* ItemRenderImage;//[Offset: 0x938, Size: 1]
	Texture2D* ItemCosmeticImage;//[Offset: 0x960, Size: 1]
	float ADSRollMultiplier;//[Offset: 0x988, Size: 1]
	float ADSBumpStartStopMultiplier;//[Offset: 0x98c, Size: 1]
	float ADSBumpLoopingMultiplier;//[Offset: 0x990, Size: 1]
	ADSBlurValues ADSBlurValuesInfo;//[Offset: 0x998, Size: 1]
	KSAISnippet[] AISnippets;//[Offset: 0x9d8, Size: 1]
	bool WillDropWhenDowned();// 0x2877320
	bool UsingAccuracyLoss();// 0x28772e0
	bool UsingAccuracyInADS();// 0x28772c0
	static KSWeapon* TryToEquipToCharacterNoPointGiven(KSWeaponAsset* WeaponAsset, KSCharacter* InOwner, Actor* InInstigator, GiveItemParameters InGiveItemParameters, bool bAllowSyncLoad);// 0x2877090
	static KSWeapon* TryToEquipToCharacter(KSWeaponAsset* WeaponAsset, KSCharacter* InOwner, Actor* InInstigator, GameplayTag EquipPoint, GiveItemParameters InGiveItemParameters, bool bAllowSyncLoad);// 0x2876e50
	bool ShouldUseCrouchAOSCamVertOffset();// 0x2876c90
	bool ShouldUseComposedResourceName();// 0x2876c70
	bool ShouldUseChargingFireRate();// 0x2876c50
	bool ShouldUseBuildupForCooking();// 0x2876c30
	bool ShouldStartReloadInterruptSprinting();// 0x2876c10
	bool ShouldStartHolsterInterruptSprinting();// 0x2876bf0
	bool ShouldStartFireInterruptSprinting();// 0x2876bd0
	bool ShouldShowReserveAmmo();// 0x2876ba0
	bool ShouldPreventDodgeRollDuringFire();// 0x2876b80
	bool ShouldPrefireOverlapSkipToFire();// 0x2876b60
	bool ShouldOverrideShoulderCameraProperties();// 0x27725b0
	bool ShouldMuteEmptyClipWarnings();// 0x2876b40
	bool ShouldLockonPrefire();// 0x2876b20
	bool ShouldLimitCameraRotation();// 0x2876b00
	bool ShouldLagCompensateFire(KSPlayerState* FiringPlayer);// 0x2876a70
	bool ShouldForceUprightDrops();// 0x2876a50
	bool ShouldFadeUIOnAim();// 0x2876a30
	bool ShouldDoRadialDamage();// 0x2876a10
	bool ShouldBeRemovedWhenExhausted();// 0x27f8780
	bool ShouldAllowManualShoulderSwap();// 0x28769f0
	bool RequiresAnEquipSlot();// 0x28769d0
	bool RequiresAnEquipPoint();// 0x28769b0
	InterpCurveVector2D MakeKickbackCurve(int nShotIndex, float AbsoluteMaxDuration);// 0x2876600
	bool LockoutAimStateInCooldown();// 0x28765e0
	bool LimitNumInPlay();// 0x28765c0
	bool LimitDeployablesByPlayer();// 0x26cbba0
	bool IsUnique();// 0x27f87e0
	bool IsRadialDamageConical();// 0x28765a0
	bool IsMountedWeapon();// 0x2876580
	bool IsGun();// 0x2876550
	bool IsGadget();// 0x2876520
	float IsAudible();// 0x28764f0
	bool IsAbilityWeapon();// 0x28764c0
	bool HasKickback();// 0x2876490
	KSWeaponAsset* GetWeaponUpgrade();// 0x2876430
	GameplayTag GetWeaponType();// 0x2787290
	void GetWeaponStats(out FString[] OutStats);// 0x2876360
	FString GetWeaponNameAsString();// 0xe26d80
	FText GetWeaponName();// 0xe26cd0
	GameplayTag GetWeaponEquipType();// 0x2876320
	class KSWeaponAssetDrop GetWeaponDropClass();// 0x2876240
	FString GetWeaponDescriptionAsString();// 0xe26b80
	FText GetWeaponDescription();// 0xe26ad0
	class KSWeaponComponent GetWeaponComponentClass();// 0x27470d0
	class KSWeapon GetWeaponClass();// 0x28761a0
	enum GetWeaponCategoryType();// 0x2876170
	void GetWeaponAttachmentPoints(out GameplayTagContainer OutAttachPoints);// 0x28760b0
	class Object GetWeaponAmmoWidgetClass();// 0x2876010
	float GetWalkSpeedModifier();// 0x2875ff0
	ForceFeedbackEffect* GetVibrationEffect();// 0x2875f50
	GameplayTagContainer GetValidEquipPoints();// 0x2875ef0
	<KSWeaponAttachment*> GetValidAttachments();// 0x2875d50
	bool GetUseAltFire();// 0x2875d30
	bool GetUnlimitedAmmo();// 0x2875d10
	enum GetTouchAbilityCastType();// 0x2875cf0
	Vector GetThirdPersonFixedRelativeOffset();// 0x2875cc0
	bool GetSwapGadgetOnExhaust();// 0x2875ca0
	bool GetSwapAfterFire();// 0x2875c80
	float GetSprintSpeedModifier();// 0x2875c60
	float GetSprintRecoveryTime();// 0x2875c40
	Texture2D* GetSoftItemRenderImage();// 0x2791000
	SoftObjectPath GetSoftItemCosmeticImagePath();// 0x2875ba0
	Transform GetShoulderCameraTransform();// 0x2875b60
	Vector GetShoulderCameraTargetOffset();// 0x2875b30
	Vector GetShoulderCameraSocketOffset();// 0x2875b00
	float GetShoulderCameraBoomLength();// 0x2875ae0
	int GetShotPenetrationCount();// 0x281b9a0
	AkAudioEvent* GetRumbleEvent();// 0x2875a00
	int GetRoundsPerBurst();// 0x27f4520
	float GetRetrieveTime();// 0x28759e0
	enum GetReticleType();// 0x28759c0
	enum GetReloadType();// 0x28759a0
	float GetReloadCooldownTime();// 0x2875980
	class Object GetRechargeMethod();// 0x28758e0
	bool GetRadialIgnoreWalls();// 0x28758c0
	bool GetRadialIgnoreSelf();// 0x28758a0
	bool GetRadialIgnoreFriendlies();// 0x2875880
	bool GetRadialIgnoreEnemies();// 0x2875860
	RadialDamageParams GetRadialDamageParams();// 0x28757f0
	float GetRadialConicalHalfAngle();// 0x28757d0
	float GetPreReloadTime();// 0x28755c0
	float GetPreFireTime();// 0x27f4540
	int GetPrefireSkipWindowNum();// 0x28757b0
	PrefireSkipWindow GetPrefireSkipWindow(int Index);// 0x2875640
	float GetPrefireOverlapGracePeriod();// 0x2875620
	float GetPrefireLockonDistance();// 0x2875600
	float GetPrefireLockonAngle();// 0x28755e0
	float GetPreFireInterruptThreshold();// 0x27f4560
	float GetPostReloadTime();// 0x28755a0
	float GetPostFireTime();// 0x2875570
	float GetPostFireForgivenessTime();// 0x2875550
	float GetPostFireDecayTime();// 0x2875530
	float GetPostFireDecayDelay();// 0x2875510
	float GetPostFireChargeTime();// 0x28754f0
	int GetPlayerDeployableLimit();// 0x27f87c0
	float GetOuterRadius();// 0x28754d0
	float GetMovementAccuracyPenalty();// 0x28754b0
	int GetMaxNumInPlay();// 0x27f87a0
	float GetMaxHipFireAccuracy();// 0x2875490
	float GetMaxFiringAccuracyLoss();// 0x2875470
	float GetMaxFiringAccuracyGain();// 0x281bf20
	float GetMaxFalloffDistance();// 0x2875440
	float GetMaxCumulativeKickbackVerticalAngle();// 0x2875420
	float GetMaxAimedFiringAccuracyGain();// 0x2875400
	float GetMaxAimedAccuracy();// 0x28753e0
	float GetLimbDamageAmount();// 0x27730a0
	float GetKickbackResetTime();// 0x28753c0
	float GetKickbackRecoveryRate();// 0x2875380
	float GetKickbackRecoveryDelay();// 0x2875340
	float GetKickbackRecoveryAcceleration();// 0x2875300
	float GetKickbackApplicationOverride();// 0x28752e0
	float GetInnerRadius();// 0x28752c0
	float GetInitialPostFireTime();// 0x28752a0
	float GetInitialFireRate();// 0x2875270
	float GetInAirAccuracyModifier();// 0x2875250
	float GetHolsterTime();// 0x2875230
	float GetHeadDamageAmount();// 0x2875210
	float GetGamepadTurnSpeedMultiplier();// 0x28751f0
	float GetGamepadKickbackScaling();// 0x28751d0
	float GetGamepadAimedTurnSpeedMultiplier();// 0x28751b0
	enum GetForcedShoulder();// 0x2875190
	float GetFirstShotPreReloadTime();// 0x2875170
	float GetFiringSpeedModifier();// 0x2875150
	float GetFireRate();// 0x2875120
	enum GetFireModeType();// 0x2875100
	float GetFinalPostFireTime();// 0x28750e0
	float GetFinalFireRate();// 0x28750b0
	float GetDodgeRollRecoveryTime();// 0x2875090
	KSItem* GetDefaultWrap();// 0x2874f00
	int GetDefaultAmmo();// 0x2874ee0
	float GetDefaultAimTransitionTime();// 0x2874ec0
	class DamageType GetDamageTypeClass();// 0x2874e20
	float GetDamageAmount();// 0x2811310
	float GetCrouchSpeedModifier();// 0x2874e00
	float GetCrouchAccuracyModifier();// 0x2874de0
	float GetCooldownDownTime();// 0x2874dc0
	bool GetConsumeAmmoDirectlyFromInventory();// 0x2874da0
	void GetCompatibleAttachments(out KSWeaponAttachment*[] OutAttachments);// 0x2874d20
	void GetCompatibleAttachmentAssets(out KSWeaponAttachment*[] OutAttachments);// 0x2874c50
	int GetClipSize();// 0x2874c30
	FName GetChargeResourceName();// 0x2874c10
	float GetCautionRadius();// 0x281b980
	enum GetCastType();// 0x2874bf0
	bool GetCanUseOffGround();// 0x2874bd0
	float GetCanFireWhileInPowerSlide();// 0x2874ba0
	void GetCameraYawLimits(out float MinYaw, out float MaxYaw);// 0x2874ac0
	void GetCameraPitchLimits(out float MinPitch, out float MaxPitch);// 0x28749e0
	float GetBuildupTime();// 0x28749c0
	float GetBaseRadialDamage();// 0x28749a0
	float GetBaseAccuracy();// 0x2811590
	float GetAudibleRange();// 0x2874980
	int GetAttachmentSlotCount();// 0x2874960
	enum GetAmmoType();// 0x2874740
	ForceFeedbackEffect* GetAlternativeVibrationEffect();// 0x28746a0
	ForceFeedbackAttenuation* GetAlternativeVibrationAttenuation();// 0x2874600
	float GetAlternatePreFireTime();// 0x28745d0
	float GetAlternatePostFireTime();// 0x28745a0
	float GetAimOverShoulderTransitionTime();// 0x2874580
	float GetAimOverShoulderAccuracyModifier();// 0x2874560
	float GetAimDownSightsTransitionTime();// 0x2874540
	float GetAimDownSightsFOV();// 0x2874520
	float GetAimAlternateTransitionTime();// 0x2874500
	bool GetAimAlternateAbortsFire();// 0x28744e0
	float GetADSSpeedModifier();// 0x2874420
	float GetADSRollMultiplier();// 0x2874400
	float GetADSBumpStartStopMultiplier();// 0x28743e0
	float GetADSBumpLoopingMultiplier();// 0x28743c0
	ADSBlurValues GetADSBlurValuesInfo();// 0x2874370
	float GetAccuracyReturnRate();// 0x28744c0
	float GetAccuracyReturnDelay();// 0x28744a0
	float GetAccuracyLossPerShot();// 0x2874480
	float GetAccuracyGainPerShot();// 0x2874460
	float GetAccuracyDecayRate();// 0x2874440
	bool DoesScopingAllowAutoReload();// 0x28742c0
	bool DoesRestoreAmmo();// 0x28742a0
	bool DoesIgnoreNoFire();// 0x2874280
	static KSProjectile* CreateProjectile(Object* WorldContextObject, KSWeaponAsset* WeaponAsset, Vector SpawnLocation, Rotator SpawnRotation, DropItemParameters InDropItemParameters, KSWeapon* SpawningWeapon, Actor* SpawningOwner, Pawn* SpawningInstigator, bool bDeferConstruction, out const FName ProjectileInfoKey);// 0x2873f30
	static KSProjectile* CreateAndExplodeProjectile(Object* WorldContextObject, KSWeaponAsset* WeaponAsset, Vector SpawnLocation, Rotator SpawnRotation, DropItemParameters InDropItemParameters, KSWeapon* SpawningWeapon, Actor* SpawningOwner, Pawn* SpawningInstigator, bool bDeferConstruction);// 0x2873c60
	static float ConeHalfAngleToAccuracy(float HalfAngle);// 0x2873b50
	bool CanWeaponStateTransition(enum OldState, enum NewState);// 0x2873a80
	bool CanResetKickback();// 0x2873a60
	bool CanRecoverFromKickback();// 0x2873a40
	bool CanReceiveAttachment(const KSWeaponAttachment* InAttachment, out GameplayTagContainer AvailableAttachPoints);// 0x2873930
	bool CanModsReplenishAmmo();// 0x2873910
	bool CanInterruptPreReload();// 0x28738f0
	bool CanEverReload();// 0x279a770
	bool CanEverFire();// 0x20c63d0
	bool CanEverAimOverShoulder();// 0x28738d0
	bool CanEverAimDownSights();// 0x28738b0
	bool CanEverAimAlternate();// 0x2873890
	bool CanDoLocalReveals();// 0x2873870
	bool CanBeDropped();// 0x2873850
	bool CanAutoFire();// 0x20c62d0
	float CalculateDamageFromProjectileHit(out const HitResult HitInfo, const KSProjectile* Projectile);// 0x2873730
	float CalculateDamageFromInstantHit(out const HitResult HitInfo, float DamageFalloffRangeScaler, float FalloffRangeExtender);// 0x28735d0
	float CalculateDamageFalloffFromProjectileHit(out const HitResult HitInfo, const KSProjectile* Projectile);// 0x28734c0
	float CalculateDamageFalloffFromHitResults(out const HitResult HitInfo, float FalloffRangeScaler, float FalloffRangeExtender);// 0x2873360
	float CalculateDamageFalloffFromDistance(float Distance, float FalloffRangeScaler, float FalloffRangeExtender);// 0x2873250
	static float AccuracyToConeHalfAngle(float Accuracy);// 0x28731d0

--------------------------------
Class: KSWeapon.KSEquipment.Info.Actor.Object
	bool bCanSwapOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 1]
	bool bCanSwapOnDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 1]
	bool bCanSwapOutOnInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 1]
	bool bCanSwapOutWhileAimingDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2db, Size: 1]
	class KSItemDrop* LoadedDropClass;//[Offset: 0x300, Size: 1]
	bool bNoWeaponAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x310, Size: 1]
	KSWeaponAsset* WeaponAssetPtr;//[Offset: 0x318, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x340, Size: 1]
	uint32 AutoSwapOutWeaponId;//[Offset: 0x358, Size: 1]
	AuxiliaryWeaponInfo AuxiliaryWeaponInfo;//[Offset: 0x360, Size: 1]
	<FName,KSWeapon*> AuxiliaryWeapons;//[Offset: 0x370, Size: 1]
	MulticastInlineDelegateProperty OnCreatedDeployable;//[Size: 1]
	enum DestroyReason;//[Offset: 0x3d0, Size: 1]
	KSCharacter* CharacterOwner;//[Offset: 0x3d8, Size: 1]
	KSPlayerState* PlayerStateInstigator;//[Offset: 0x3e0, Size: 1]
	bool bUseCompressStateTransmission;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	enum WeaponState;//[Offset: 0x400, Size: 1]
	enum LocalWeaponState;//[Offset: 0x401, Size: 1]
	float LastStateChangeTimeStamp;//[Offset: 0x404, Size: 1]
	WeaponStateChangeRequest[] PendingStateChangeRequests;//[Offset: 0x408, Size: 1]
	uint16 NextStateRequestId;//[Offset: 0x41a, Size: 1]
	MulticastInlineDelegateProperty OnWeaponStateChangedDel;//[Size: 1]
	bool bPendingFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461, Size: 1]
	bool bBotPendingFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x462, Size: 1]
	bool bFireOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x463, Size: 1]
	int KickbackShotIndex;//[Offset: 0x464, Size: 1]
	float KickbackResetTimeLeft;//[Offset: 0x468, Size: 1]
	int BurstShotIndex;//[Offset: 0x46c, Size: 1]
	float MinCookTimeStamp;//[Offset: 0x470, Size: 1]
	bool bUsingPostFireForgiveness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x474, Size: 1]
	float PrefireStartTime;//[Offset: 0x478, Size: 1]
	Object* RechargeMethodInstance;//[Offset: 0x480, Size: 1]
	KSActionRestrictor FireLockout;//[Offset: 0x488, Size: 1]
	MulticastInlineDelegateProperty OnFire;//[Size: 1]
	MulticastInlineDelegateProperty OnReloadFailed;//[Size: 1]
	float DeathShotForgivenessTime;//[Offset: 0x4b0, Size: 1]
	bool bTryToReloadEveryTickOnEmpty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b4, Size: 1]
	int CachedReloadSize;//[Offset: 0x4b8, Size: 1]
	int AmmoInClip;//[Offset: 0x4bc, Size: 1]
	int ClipSize;//[Offset: 0x4c0, Size: 1]
	int AmmoConsumedSinceLastReload;//[Offset: 0x4c4, Size: 1]
	WeaponStateChangeRequest LastReloadRequest;//[Offset: 0x4c8, Size: 1]
	bool bWeaponStartsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	enum ReloadReplicationFlags;//[Offset: 0x4d9, Size: 1]
	MulticastInlineDelegateProperty OnExhaustedDel;//[Size: 1]
	bool bShouldResumeReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0, Size: 1]
	bool bFirstReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f1, Size: 1]
	bool bShouldSwapToNextOnExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f2, Size: 1]
	MulticastInlineDelegateProperty OnAmmoChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnAmmoInClipConsumed;//[Size: 1]
	bool bCanRetrieveWhileCharging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x530, Size: 1]
	class DamageType* LoadedDamageTypeClass;//[Offset: 0x538, Size: 1]
	MulticastInlineDelegateProperty OnHiddenInteractableUpdate;//[Size: 1]
	Actor* CachedHiddenInteractable;//[Offset: 0x550, Size: 1]
	float NextExpectedTimerEndTime;//[Offset: 0x570, Size: 1]
	TimerHandle ActiveTimer;//[Offset: 0x578, Size: 1]
	bool bCanEverInterruptSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x580, Size: 1]
	float SprintRecoveryRemaining;//[Offset: 0x584, Size: 1]
	bool bReleasedFireInSprintRecovery;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bDodgeRollInterruptedReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	bool bSprintCanInterruptReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58a, Size: 1]
	bool bDodgeRollCanInterruptReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58b, Size: 1]
	float DodgeRollRecoveryRemaining;//[Offset: 0x58c, Size: 1]
	bool bInLockon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	float LockonProgress;//[Offset: 0x5ac, Size: 1]
	float LockonDuration;//[Offset: 0x5b0, Size: 1]
	Rotator LockonStartRotation;//[Offset: 0x5b4, Size: 1]
	Rotator LockonEndRotation;//[Offset: 0x5c0, Size: 1]
	RandomStream WeaponRandomStream;//[Offset: 0x624, Size: 1]
	KSAimLockData* AimAssistLockData;//[Offset: 0x6b0, Size: 1]
	KSAimSnapData* AimAssistSnapData;//[Offset: 0x6b8, Size: 1]
	bool bRequireInputForAimAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c0, Size: 1]
	CurveVector* AimAssistLockCurve;//[Offset: 0x6c8, Size: 1]
	CurveFloat* AimAssistLockDistanceCurve;//[Offset: 0x6d0, Size: 1]
	bool bRequireInputForHipAimAssistLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8, Size: 1]
	CurveVector* HipAimAssistLockCurve;//[Offset: 0x6e0, Size: 1]
	CurveFloat* HipAimAssistLockDistanceCurve;//[Offset: 0x6e8, Size: 1]
	CurveVector* AimAssistSnapCurve;//[Offset: 0x6f0, Size: 1]
	bool WasRemoved();// 0x2869490
	bool WasDropped();// 0x2869460
	bool UsingAccuracyLoss();// 0x2869430
	void UpdateHiddenInteractable();// 0x1fdc570
	void TryToRemove();// 0x2869410
	bool StopFireOnRelease();// 0x28693e0
	void StopFire();// 0x1fa48f0
	void StopDefaultAim();// 0x1fc2a70
	bool StopAltFire();// 0x275b0e0
	void StopAimOverShoulder();// 0x1fa32d0
	void StopAimDownSights();// 0x1fc3260
	void StateRequestTimeoutExpired();// 0x28693c0
	bool StartRetrieving(bool bInstant);// 0x2869320
	bool StartReload();// 0x28692f0
	bool StartHolstering();// 0x28692c0
	bool StartFire();// 0x2869290
	void StartDefaultAim();// 0x1fc2a50
	bool StartAltFire();// 0x2869260
	void StartAimOverShoulder();// 0x1fc6620
	void StartAimDownSights();// 0x1fc35e0
	void SimulateConsumeAmmo(out int AmmoInClipAfterConsume, out int AmmoToConsumeFromInventory);// 0x2869180
	bool ShouldSwapOffBeInstant();// 0x2728910
	bool ShouldStartReloadInterruptSprinting();// 0x2869150
	bool ShouldStartHolsterInterruptSprinting();// 0x28129e0
	bool ShouldStartFireInterruptSprinting();// 0x2869120
	bool ShouldStartFireInterruptAimDownSights();// 0x2812a70
	bool ShouldQuickMeleeAsBackupFire();// 0x28690f0
	bool ShouldQuickCast();// 0x28690c0
	bool ShouldLimitCameraRotation();// 0x2869090
	bool ShouldEACRecordAsMeleeAttackNow();// 0x2869060
	bool ShouldConsumeAmmoDirectlyFromInventory();// 0x2869030
	bool ShouldBeRemovedWhenExhausted();// 0x2869000
	void SetAutoSwapOutWeaponId(uint32 OtherWeaponId);// 0x2868f80
	void ServerStartForcedVariableFireRateUpdate();// 0x1fc34c0
	void ServerRetrieveActiveWeaponCompressed(const WeaponStateChangeRequest request, uint16 LastRequestId);// 0x2868e70
	void ServerRetrieveActiveWeapon(const WeaponStateChangeRequest request);// 0x2868db0
	void ServerRequestStateChangeCompressed(const WeaponStateChangeRequest request, uint16 LastRequestId);// 0x2868ca0
	void ServerRequestStateChange(const WeaponStateChangeRequest request);// 0x2868be0
	void ServerPostReloadCompressed(const WeaponStateChangeRequest request, int AmmoDelta, uint16 LastRequestId);// 0x2868a90
	void ServerPostReload(const WeaponStateChangeRequest request, int AmmoDelta);// 0x2868980
	void ServerEndForcedVariableFireRateUpdate();// 0xdf0300
	void ServerCookReleasedCompressed(const WeaponStateChangeRequest request, float AdditionalCookTime, uint16 LastRequestId);// 0x2868830
	void ServerCookReleased(const WeaponStateChangeRequest request, float AdditionalCookTime);// 0x2868720
	int RemoveAmmoDirectlyFromClip(int RemovedAmmo, bool bBonusAmmo);// 0x2868660
	void Reload(bool bBonusAmmo);// 0x28685d0
	void RecoverBackToIdleOnUnpossess();// 0x1fc3400
	void Recharge();// 0x28685b0
	void ProcessHits(out const AimData ReceivedAim, out const HitResult[] Hits);// 0x2868490
	void PreLoadAmmo();// 0x2868450
	bool OwnerIsTransitioningAimState();// 0x2868420
	bool OwnerIsSwimming();// 0x28683f0
	bool OwnerIsSprinting();// 0x28683c0
	bool OwnerIsReloadingAnyWeapon();// 0x2868390
	bool OwnerIsMovingOnGround();// 0x2868360
	bool OwnerIsLocallyViewed();// 0x2868330
	bool OwnerIsFreeFalling();// 0x2868300
	bool OwnerIsFiringMeleeWeapon();// 0x28682d0
	bool OwnerIsDowned();// 0x28682a0
	bool OwnerIsAlive();// 0x2868270
	bool OwnerHasAmmo();// 0x2868240
	float OnStartRetrieving(enum PreviousState);// 0x28681b0
	float OnStartReloadCooldown(enum PreviousState);// 0x2868120
	float OnStartPreReload(enum PreviousState);// 0x2868090
	float OnStartPreFire(enum PreviousState);// 0x2868000
	float OnStartPostReload(enum PreviousState);// 0x2867f70
	float OnStartPostFire(enum PreviousState);// 0x2867ee0
	void OnStartInactive(enum PreviousState);// 0x1fc6bd0
	float OnStartHolstering(enum PreviousState);// 0x2867e50
	float OnStartCooldown(enum PreviousState);// 0x2867dc0
	float OnStartBuildup(enum PreviousState);// 0x2867d30
	void OnRep_WeaponState();// 0x2867d10
	void OnRep_WeaponAsset();// 0x2867cf0
	void OnRep_AuxiliaryWeaponInfo();// 0x2867cd0
	void OnRep_AutoSwapOutWeaponId();// 0x2867cb0
	void OnRep_Ammo();// 0xd95a80
	void OnPostMantleLockoutEnd();// 0x2867c90
	void OnOwnerMovementModeChangedNative(byte OldMode, byte OldCustomMode, byte NewMode, byte NewCustomMode);// 0x2867b50
	void OnOwnerMovementModeChanged(byte OldMode, byte OldCustomMode, byte NewMode, byte NewCustomMode);// 0x2d74e00
	void OnEndRetrieving(enum NextState);// 0x1fc3b80
	void OnEndReloadCooldown(enum NewState);// 0x2867ad0
	void OnEndPreReload(enum NextState);// 0x2867a50
	void OnEndPreFire(enum NextState);// 0x28679d0
	void OnEndPostReload(enum NextState);// 0x2867950
	void OnEndPostFire(enum NextState);// 0x28678d0
	void OnEndInactive(enum NextState);// 0x2867850
	void OnEndIdleState(enum NextState);// 0x28677d0
	void OnEndHolstering(enum NextState);// 0x2867750
	void OnEndCooldown(enum NextState);// 0x28676d0
	void OnEndBuildup(enum NextState);// 0x2867650
	void OnDecayFireRateTimerElapsed();// 0x2867630
	void OnBeginIdleState(enum PreviousState);// 0x28675b0
	float ModifyDamageDealt(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor);// 0x28673e0
	bool IsRetrieving();// 0x28673b0
	bool IsReloading();// 0x2867380
	bool IsInSprintRecovery();// 0x2867350
	bool IsInReloadingLoop();// 0x2867320
	bool IsInFiringLoop();// 0x28672f0
	bool IsInDodgeRollRecovery();// 0x28672c0
	bool IsHolstering();// 0x2867290
	bool IsFiring();// 0x2867260
	bool IsExhausted();// 0x2867230
	bool IsEquippedMelee();// 0x2867200
	bool IsEquippedMainWeapon();// 0x28671d0
	bool IsEquippedGrenade();// 0x28671a0
	bool IsCooking();// 0x2867170
	bool IsClipFull();// 0x2867140
	bool IsClipEmpty();// 0x2867110
	bool IsActiveWeapon();// 0x28670e0
	void InterruptFromInstantReloadInternal();// 0x1fa32b0
	void InterruptFromInstantReload();// 0x28670c0
	bool InstantReload(bool bBonusAmmo);// 0x2867030
	bool HasAttachment(const KSWeaponAttachmentInstance* InAttachment);// 0x2866fa0
	void HandleOnFullyCharged();// 0x2866f80
	void HandleOnChargeConsumed();// 0x2866f60
	void HandleExhausted();// 0x1fc2d00
	enum GetWeaponState();// 0x2866f40
	KSWeaponComponent* GetWeaponComponent();// 0x2866f10
	KSWeaponAsset* GetWeaponAsset();// 0x2866ee0
	int GetShotPenetrationCount();// 0x2866eb0
	int GetReserveBonusAmmo(bool bWithDefaultAmmoBonus);// 0x2866e20
	float GetReloadCooldownTime();// 0x2866df0
	interface classNone GetRechargeMethodInstance();// 0x2866db0
	float GetPreReloadTime();// 0x2866d80
	float GetPostReloadTime();// 0x2866d50
	float GetMovementAccuracyPenalty();// 0x2866d20
	float GetMaxHipFireAccuracy();// 0x2866cf0
	float GetMaxFiringAccuracyLoss();// 0x2866cc0
	float GetMaxFiringAccuracyGain();// 0x2866c90
	float GetMaxAimedFiringAccuracyGain();// 0x2866c60
	float GetMaxAimedAccuracy();// 0x2866c30
	float GetLimbDamageAmount();// 0x2866c00
	KSPlayerState* GetKSPlayerStateInstigator();// 0x2757900
	KSPlayerState* GetKSPlayerState();// 0x2866bd0
	float GetInAirAccuracyModifier();// 0x2866ba0
	Actor* GetHiddenInteractable();// 0x2866b80
	float GetHeadDamageAmount();// 0x2866b50
	float GetDefaultAimTransitionTime();// 0x2866b20
	Controller* GetDamageInstigator();// 0x2866af0
	float GetDamageFalloffRangeScaler();// 0x2866ac0
	float GetDamageFalloffRangeExtender();// 0x2866a90
	float GetCurrentSpeedModifier();// 0x2866a50
	float GetCrouchAccuracyModifier();// 0x2866a20
	int GetClipSize();// 0x28669f0
	KSCharacter* GetCharacterOwner();// 0x2758160
	bool GetCanUseOffGround();// 0x28669c0
	void GetCalculatedCameraYawLimits(out float MinYaw, out float MaxYaw);// 0x28668e0
	void GetCalculatedCameraPitchLimits(out float MinPitch, out float MaxPitch);// 0x2866800
	float GetBaseDamageAmount();// 0x28667d0
	float GetBaseAccuracy();// 0x28667a0
	void GetAttachments(out KSWeaponAttachment*[] OutWeaponAttachments);// 0x28666f0
	void GetAttachmentInstances(out KSWeaponAttachmentInstance*[] OutWeaponAttachmentInstances);// 0x2866640
	KSWeaponAttachmentInstance* GetAttachment(out const GameplayTag InAttachPoint);// 0x28665a0
	enum GetAmmoType();// 0x2866570
	int GetAmmoInOwnerInventory();// 0x2866540
	int GetAmmoInClip();// 0x2866510
	float GetAimOverShoulderTransitionTime();// 0x28664e0
	float GetAimOverShoulderAccuracyModifier();// 0x28664b0
	float GetAimDownSightsTransitionTime();// 0x2866480
	float GetAimDownSightsFOV();// 0x2866450
	float GetAccuracyReturnRate();// 0x2866420
	float GetAccuracyReturnDelay();// 0x28663f0
	float GetAccuracyLossPerShot();// 0x28663c0
	float GetAccuracyGainPerShot();// 0x2866390
	float GetAccuracyDecayRate();// 0x2866360
	void FireWeapon();// 0x1fc4690
	void EndState(enum NextState);// 0x28662e0
	void ConsumePendingFire();// 0x28662c0
	int ConsumeAmmo();// 0x2811e60
	void ClientUpdateChargeMethodValues(float Timestamp, float MaxCharge, float CurrentCharge);// 0x28661b0
	void ClientStateChangeRejected(uint16 nRequestId, enum RestoreState);// 0x28660e0
	void ClientStateChangeAccepted(uint16 nRequestId);// 0x2866050
	void ClientSetVariableFireRateState(enum State, float Timestamp, float PostFireTime);// 0x2865f40
	void ClientRecoverSeedMisalignment(uint16 RequestID, RandomStream ServerStream);// 0x2865e70
	void ClientNotifyRecoveryFinish();// 0x1fa4670
	void ClientInstantReload();// 0x1fc2de0
	void ClientFullyCharged(float Timestamp, float CurrentCharge);// 0x2865da0
	void ClientForceUpdateAmmoInClip(int NewAmmo, bool bBonusAmmo);// 0x2865cd0
	void ClientForceIdleFromFire();// 0x1fc2ce0
	void ClientFixLastReload(uint16 RequestID, int InAmmoInClip);// 0x2865c00
	void ClientFireWeaponRejected(uint16 nRequestId);// 0x2865b70
	void ClientChargeConsumed(float Timestamp, float CurrentCharge);// 0x2865aa0
	void CheckExhausted();// 0x2865a80
	bool CheckDeathShotForgiveness();// 0x2865a50
	bool CanUseAnAimStateNow();// 0x28659f0
	bool CanToggleOutOfAimDownSightsNow();// 0x28659c0
	bool CanToggleIntoAimDownSightsNow();// 0x2865990
	bool CanStartReloadNow();// 0x2865960
	bool CanStartFireNow();// 0x2865930
	bool CanRetrieveNow();// 0x2776780
	bool CanReloadNowCommon();// 0x277a2b0
	bool CanRefireNow();// 0x2865900
	bool CanReceiveAttachment(const KSWeaponAttachment* InAttachment, out GameplayTagContainer AvailableAttachPoints);// 0x28657e0
	bool CanInteractWith(Actor* InteractableTarget);// 0x2d74e00
	bool CanHolsterNow();// 0x28657b0
	bool CanFireNowCommon();// 0x2865780
	bool CanEverReload();// 0x2865750
	bool CanEverAimOverShoulder();// 0x2865720
	bool CanEverAimDownSights();// 0x28656f0
	bool CanEverAimAlternate();// 0x28656c0
	bool CanDropNow();// 0x2865690
	bool CanCookNow();// 0x2865660
	bool CanContinueReloadNow();// 0x2865630
	bool CancelHolstering();// 0x2865a20
	bool CanBeSwappedTo(bool bByForce);// 0x2865590
	bool CanBeSwappedFrom();// 0x2865560
	bool CanBeInterruptedNow();// 0x2865530
	float CalculateDamageFromHitInfo(out const HitResult HitInfo);// 0x2865460
	float CalculateDamageFalloffFromHitResults(out const HitResult HitInfo);// 0x2865390
	float CalculateDamageFalloffFromDistance(float Distance);// 0x2865300
	void BeginState(enum PreviousState);// 0x2865280
	void AltFireInitiated();// 0x1fc2be0
	void AltFireEnded();// 0x1fc3860
	bool AllowZiplineRightNow();// 0x2812b20
	bool AllowSprintingRightNow();// 0x2865250
	bool AllowDodgeRollRightNow();// 0x2812a10
	void AimTransitionComplete(enum NewAimState);// 0x28651d0
	int AddAmmoDirectlyToClip(int AddedAmmo, bool bBonusAmmo);// 0x2865110
	bool AbortReload();// 0x28650e0
	void AbortFire();// 0x1fc3300

--------------------------------
Class: KSEquipment.Info.Actor.Object
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	KSEquipRepInfo EquipInfo;//[Offset: 0x224, Size: 1]
	interface class None* EquipmentManagerOwner;//[Offset: 0x250, Size: 1]
	KSEquipmentManagerComponent* EquipmentManagerComponent;//[Offset: 0x260, Size: 1]
	GiveItemParameters GiveParameters;//[Offset: 0x280, Size: 1]
	uint16 EquipmentId;//[Offset: 0x2b0, Size: 1]
	KSEquipmentCosmeticComponent* EquipmentCosmeticComponent;//[Offset: 0x2b8, Size: 1]
	MulticastInlineDelegateProperty OnCosmeticComponentCreated;//[Size: 1]
	void Unequip(bool bLocal, bool bWillReequip);// 0x274fb10
	bool SetEquipPoint(out const GameplayTag InEquipPoint);// 0x274f9c0
	bool RequiresAnEquipSlot();// 0x274f970
	void OnUnequipped(bool bWillReequip);// 0x274f6c0
	void OnRep_GiveParameters();// 0x1fae4b0
	void OnRep_EquipPoint();// 0x1fa5370
	void OnRep_EquipmentId();// 0x274f5a0
	void OnEquipped();// 0x1f9f700
	bool IsInitialized();// 0x274f4d0
	bool IsInAction();// 0x274f4a0
	bool IsEquipped();// 0x274f460
	KSItem* GetKSItem();// 0x274f260
	GiveItemParameters GetGiveParameters();// 0x274f0a0
	GameplayTag GetEquipPoint();// 0x274f030
	uint16 GetEquipmentId();// 0x274f070
	KSEquipmentCosmeticComponent* GetCosmeticComponent();// 0xfb6390
	bool EquipNoPoint();// 0x274ed70
	void Drop();// 0x274eb10

--------------------------------
Class: GiveItemParameters
	enum ItemSource;//[Offset: 0x0, Size: 1]
	GameplayTag PreferredEquipPoint;//[Offset: 0x4, Size: 1]
	int OriginalOwnerId;//[Offset: 0xc, Size: 1]
	int ObjectiveId;//[Offset: 0x10, Size: 1]
	int Price;//[Offset: 0x14, Size: 1]
	bool bActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSEquipmentCosmeticComponent.ActorComponent.Object
	bool bHasBeenUnequipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	interface class None* EquipmentContainerOwner;//[Offset: 0xb8, Size: 1]
	KSEquipmentId EquipmentId;//[Offset: 0xc8, Size: 1]
	KSEquipmentId AuthorityEquipmentId;//[Offset: 0xcc, Size: 1]
	GameplayTag EquipPoint;//[Offset: 0xd0, Size: 1]
	bool bNoEquipPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	interface class None* SkinTagAssetOwner;//[Offset: 0xe0, Size: 1]
	KSCharacter* CharacterOwner;//[Offset: 0xf8, Size: 1]
	bool bPropSpawner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	void OnRep_EquipPoint();// 0x27475a0
	void OnRep_EquipmentId();// 0x1f6e730
	bool IsOwnerDeadOrDestroyed();// 0x27530f0
	bool IsLocallyViewed();// 0x2752fd0
	bool IsLocallyManaged();// 0x2752fa0
	bool IsInAction();// 0x2752f40
	bool IsAPropSpawner();// 0x2752bf0
	GameplayTag GetEquipPoint();// 0x273e9a0
	KSCharacterAnimInst* GetCharAnimInstance();// 0x2752110
	KSCharacter* GetCharacterOwner();// 0x2752170
	SkeletalMeshComponent* GetCharacterMesh();// 0x2752140
	void BlueprintOwnerSkinTagContainerChanged();// 0x2d74e00

--------------------------------
Class: KSCharacterAnimInst.KSCharacterAnimInstBase.KSAnimInstance.SkinnedAnimInstance.AnimInstance.Object
	float GadgetAdditiveRetrieveBlendTime;//[Offset: 0x550, Size: 1]
	float GadgetAdditiveThrowBlendTime;//[Offset: 0x554, Size: 1]
	bool bMountedWeaponActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x558, Size: 1]
	bool bMountedOnCoverActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x559, Size: 1]
	float MountedWeaponTargetHeight;//[Offset: 0x55c, Size: 1]
	float MountedWeaponModifiedAimPitch;//[Offset: 0x560, Size: 1]
	Vector MountedWeaponMountLocation;//[Offset: 0x564, Size: 1]
	Rotator MountedWeaponMountRotation;//[Offset: 0x570, Size: 1]
	bool bEmoteMontagePlayingGlobal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57c, Size: 1]
	bool bEmoteMontagePlayingLocal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57d, Size: 1]
	float EmoteMontageGlobalWeight;//[Offset: 0x580, Size: 1]
	float EmoteMontageLocalWeight;//[Offset: 0x584, Size: 1]
	FName EmoteSlotName;//[Offset: 0x588, Size: 1]
	int EmotePropRandomizerStoredInt;//[Offset: 0x590, Size: 1]
	bool bEmotePropRandomizerStaticSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594, Size: 1]
	bool bEmotePropRandomizerSkeletalSpawned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x595, Size: 1]
	float EmoteFastBlendMultiplier;//[Offset: 0x598, Size: 1]
	float EmoteSlowBlendMultiplier;//[Offset: 0x59c, Size: 1]
	bool bSprayIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	int CurrentMeshLOD;//[Offset: 0x5a4, Size: 1]
	float BodyLean;//[Offset: 0x5a8, Size: 1]
	Rotator BodyLeanRotator;//[Offset: 0x5ac, Size: 1]
	Rotator HeadLeanRotator;//[Offset: 0x5b8, Size: 1]
	bool bEnableAnimMirroring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	bool bCanTransitionDirections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c8, Size: 1]
	bool bEnableMovementImprovements;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc, Size: 1]
	bool bEnableDynamicLobbyPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cd, Size: 1]
	float SprintImpulseAmount;//[Offset: 0x5d0, Size: 1]
	Vector2D SprintLeftRightBodyLeanRange;//[Offset: 0x5d4, Size: 1]
	float ForwardRotatePostMirror;//[Offset: 0x5dc, Size: 1]
	float RightRotatePostMirror;//[Offset: 0x5e0, Size: 1]
	float BackRotatePostMirror;//[Offset: 0x5e4, Size: 1]
	float LeftRotatePostMirror;//[Offset: 0x5e8, Size: 1]
	Vector ForwardCrouchPelvicVector;//[Offset: 0x5ec, Size: 1]
	Vector ForwardCrouchFeetIKVector;//[Offset: 0x5f8, Size: 1]
	Vector BackCrouchPelvicVector;//[Offset: 0x604, Size: 1]
	Vector BackCrouchFeetIKVector;//[Offset: 0x610, Size: 1]
	Vector LeftCrouchPelvicVector;//[Offset: 0x61c, Size: 1]
	Vector LeftCrouchFeetIKVector;//[Offset: 0x628, Size: 1]
	Vector RightCrouchPelvicVector;//[Offset: 0x634, Size: 1]
	Vector RightCrouchFeetIKVector;//[Offset: 0x640, Size: 1]
	float ForwardCrouchPelvicOffset;//[Offset: 0x64c, Size: 1]
	float ForwardCrouchFeetIKOffset;//[Offset: 0x650, Size: 1]
	float BackCrouchPelvicOffset;//[Offset: 0x654, Size: 1]
	float BackCrouchFeetIKOffset;//[Offset: 0x658, Size: 1]
	float LeftCrouchPelvicOffset;//[Offset: 0x65c, Size: 1]
	float LeftCrouchFeetIKOffset;//[Offset: 0x660, Size: 1]
	float RightCrouchPelvicOffset;//[Offset: 0x664, Size: 1]
	float RightCrouchFeetIKOffset;//[Offset: 0x668, Size: 1]
	float CurrentAccelVectorLength;//[Offset: 0x66c, Size: 1]
	float MaxSlowWalkSpeed;//[Offset: 0x670, Size: 1]
	float MaxWalkSpeed;//[Offset: 0x674, Size: 1]
	float MaxADSWalkSpeed;//[Offset: 0x678, Size: 1]
	float MaxSprintSpeed;//[Offset: 0x67c, Size: 1]
	float MaxCrouchSpeed;//[Offset: 0x680, Size: 1]
	float MaxADSCrouchSpeed;//[Offset: 0x684, Size: 1]
	bool bShouldTransitionADSCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x688, Size: 1]
	bool bDoCheckFirstStepCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68c, Size: 1]
	float FirstStepTransitionAlpha;//[Offset: 0x690, Size: 1]
	float SpeedWarpingAlpha;//[Offset: 0x694, Size: 1]
	float SprintAnimPlayRate;//[Offset: 0x698, Size: 1]
	float ParachuteMovementPitch;//[Offset: 0x69c, Size: 1]
	float ParachuteMovementYaw;//[Offset: 0x6a0, Size: 1]
	float ParachuteMovementForward;//[Offset: 0x6a4, Size: 1]
	float ParachuteMovementLateral;//[Offset: 0x6a8, Size: 1]
	bool bSkydiveTurnOverridesStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac, Size: 1]
	bool bIsNoseDiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ad, Size: 1]
	float ParachuteYawInterpSpeed;//[Offset: 0x6b0, Size: 1]
	float ParachutePitchInterpSpeed;//[Offset: 0x6b4, Size: 1]
	float ParachuteForwardInterpSpeed;//[Offset: 0x6b8, Size: 1]
	float ParachuteLateralInterpSpeed;//[Offset: 0x6bc, Size: 1]
	float ParachuteForwardThreshold;//[Offset: 0x6c0, Size: 1]
	bool bParachuteReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c4, Size: 1]
	float ParachuteYawRotationFactor;//[Offset: 0x6c8, Size: 1]
	Vector LastFreeFallMovementVector;//[Offset: 0x6cc, Size: 1]
	FloatHitSpringState HitSpringRollState;//[Offset: 0x6d8, Size: 1]
	FloatHitSpringState HitSpringPitchState;//[Offset: 0x6e0, Size: 1]
	FloatHitSpringState HitSpringYawState;//[Offset: 0x6e8, Size: 1]
	float HitRotationAmountRoll;//[Offset: 0x6f0, Size: 1]
	float HitRotationAmountPitch;//[Offset: 0x6f4, Size: 1]
	float HitRotationAmountYaw;//[Offset: 0x6f8, Size: 1]
	float HitRotationPitchMax;//[Offset: 0x6fc, Size: 1]
	float HitRotationRollMax;//[Offset: 0x700, Size: 1]
	float HitRotationYawMax;//[Offset: 0x704, Size: 1]
	Vector PelvisHitOffset;//[Offset: 0x708, Size: 1]
	Rotator SpineHitOffset;//[Offset: 0x714, Size: 1]
	Rotator NeckHitOffset;//[Offset: 0x720, Size: 1]
	Rotator ArmHitOffset;//[Offset: 0x72c, Size: 1]
	float ADSHitReactionBlend;//[Offset: 0x738, Size: 1]
	float AOSHitReactionBlend;//[Offset: 0x73c, Size: 1]
	float HipfireHitReactionBlend;//[Offset: 0x740, Size: 1]
	float SimClientHitReactionBlend;//[Offset: 0x744, Size: 1]
	float CurrentHitReactionBlend;//[Offset: 0x748, Size: 1]
	float SpineFireRotationLimit;//[Offset: 0x74c, Size: 1]
	float NeckFireRotationLimit;//[Offset: 0x750, Size: 1]
	float ClavicleFireRotationLimit;//[Offset: 0x754, Size: 1]
	float UpperArmFireRotationPitchLimit;//[Offset: 0x758, Size: 1]
	float UpperArmFireRotationYawLimit;//[Offset: 0x75c, Size: 1]
	float ForearmFireRotationLimit;//[Offset: 0x760, Size: 1]
	FloatHitSpringState SpineFireSpringState;//[Offset: 0x764, Size: 1]
	FloatHitSpringState NeckFireSpringState;//[Offset: 0x76c, Size: 1]
	FloatHitSpringState ClavicleFireSpringState;//[Offset: 0x774, Size: 1]
	FloatHitSpringState UpperArmFireSpringState;//[Offset: 0x77c, Size: 1]
	FloatHitSpringState UpperArmFireYawSpringState;//[Offset: 0x784, Size: 1]
	FloatHitSpringState ForearmFireSpringState;//[Offset: 0x78c, Size: 1]
	float SpineFireRotationAmountPitch;//[Offset: 0x794, Size: 1]
	float NeckFireRotationAmountPitch;//[Offset: 0x798, Size: 1]
	float ClavicleFireRotationAmountYaw;//[Offset: 0x79c, Size: 1]
	float UpperArmFireRotationAmountPitch;//[Offset: 0x7a0, Size: 1]
	float UpperArmFireRotationAmountYaw;//[Offset: 0x7a4, Size: 1]
	float ForarmFireRotationAmountPitch;//[Offset: 0x7a8, Size: 1]
	Rotator SpineFireOffset;//[Offset: 0x7ac, Size: 1]
	Rotator NeckFireOffset;//[Offset: 0x7b8, Size: 1]
	Rotator ClavicleFireOffset;//[Offset: 0x7c4, Size: 1]
	Rotator UpperArmFireOffset;//[Offset: 0x7d0, Size: 1]
	Rotator ForearmFireOffset;//[Offset: 0x7dc, Size: 1]
	float WeaponFireAlpha;//[Offset: 0x7e8, Size: 1]
	float WeaponAdditiveAlpha;//[Offset: 0x7ec, Size: 1]
	RecoilProfile CurrentRecoilProfile;//[Offset: 0x7f0, Size: 1]
	int FireImpulseCounter;//[Offset: 0x9dc, Size: 1]
	bool bIsRecoiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 1]
	bool bBypassRecoiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e1, Size: 1]
	<FName,KSCharacterAnimInst*> SubAnimInstances;//[Offset: 0x9e8, Size: 1]
	bool bCanSwitchStartAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa38, Size: 1]
	bool bTriggerCustomPivot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa39, Size: 1]
	bool bActionEnablesPropLockAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3a, Size: 1]
	bool bActionDisablesLeftHandIKAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3b, Size: 1]
	bool bActionDisablesRightHandIKAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3c, Size: 1]
	bool bActionDisablesLeftHandGripOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3d, Size: 1]
	bool bActionDisablesRightHandGripOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3e, Size: 1]
	bool bForceDisableLHIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa3f, Size: 1]
	bool bForceDisableRHIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 1]
	bool bUseRightHandGadgetOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa41, Size: 1]
	bool bShouldUseFootIKDuringFreefall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa42, Size: 1]
	float ADSRollValue;//[Offset: 0xa44, Size: 1]
	Vector ADSBumpValue;//[Offset: 0xa48, Size: 1]
	bool bWantsNonComOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa54, Size: 1]
	bool bIsWeaponNonComOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa55, Size: 1]
	bool bSkinUseNonComOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa56, Size: 1]
	float EngHeadAdditiveAlpha;//[Offset: 0xa5c, Size: 1]
	bool bTestGadgetAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa60, Size: 1]
	bool GadgetStartedRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa61, Size: 1]
	bool GadgetFinishedRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa62, Size: 1]
	bool GadgetStartedThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa63, Size: 1]
	bool GadgetFinishedThrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa64, Size: 1]
	float HandIKAdditiveAlpha;//[Offset: 0xa68, Size: 1]
	float LeftHandIKAlpha;//[Offset: 0xa6c, Size: 1]
	float LeftHandIKAlphaTarget;//[Offset: 0xa70, Size: 1]
	float LeftHandIKBlendSpeed;//[Offset: 0xa74, Size: 1]
	float RightHandIKAlpha;//[Offset: 0xa78, Size: 1]
	float RightHandIKAlphaTarget;//[Offset: 0xa7c, Size: 1]
	float RightHandIKBlendSpeed;//[Offset: 0xa80, Size: 1]
	float SlowIKBlendSpeed;//[Offset: 0xa84, Size: 1]
	float MediumIKBlendSpeed;//[Offset: 0xa88, Size: 1]
	float FastIKBlendSpeed;//[Offset: 0xa8c, Size: 1]
	float UplineIKAlpha;//[Offset: 0xa90, Size: 1]
	float UplineIKAlphaTarget;//[Offset: 0xa94, Size: 1]
	int NextLeftHandIKForceRequestId;//[Offset: 0xa98, Size: 1]
	bool bLeftHandIKForceOffFromRequests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9c, Size: 1]
	<int> LeftHandIkForceOffRequests;//[Offset: 0xaa0, Size: 1]
	bool bLeftHandIKOffFromMainInstNotifyStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0, Size: 1]
	float FootIKAlpha;//[Offset: 0xb48, Size: 1]
	float FootIKAlphaTarget;//[Offset: 0xb4c, Size: 1]
	MulticastInlineDelegateProperty OnBeginZipline;//[Size: 1]
	MulticastInlineDelegateProperty OnEndZipline;//[Size: 1]
	Vector ZiplineRootOffset;//[Offset: 0xb70, Size: 1]
	Vector AppliedADSRootTranslation;//[Offset: 0xb7c, Size: 1]
	Vector DefaultADSRootTranslation;//[Offset: 0xb88, Size: 1]
	bool ForceZiplineMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb94, Size: 1]
	bool ApplyAimstoZiplineMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb95, Size: 1]
	bool ZiplineMontageLHIKOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb96, Size: 1]
	float ZiplineMontageLHIKAlpha;//[Offset: 0xb98, Size: 1]
	bool ActionPreventsZiplineIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9c, Size: 1]
	bool ForceZiplineLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9d, Size: 1]
	enum LocomotionPivotDirection;//[Offset: 0xb9e, Size: 1]
	float MovementDirectionRotateOnStartOrStop;//[Offset: 0xba0, Size: 1]
	bool bUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba4, Size: 1]
	bool bEngUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba5, Size: 1]
	bool bComUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba6, Size: 1]
	bool bNonComUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba7, Size: 1]
	bool bJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xba8, Size: 1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xba8, Size: 1]
	bool bDisableUpperBodyLands;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xba8, Size: 1]
	bool bInFreeFall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xba8, Size: 1]
	bool bReadyForFreeFall;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xba8, Size: 1]
	bool bVaulting;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xba8, Size: 1]
	bool bIsMantling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xba8, Size: 1]
	bool bMantleIsVault;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xba8, Size: 1]
	bool bCanInterruptMantle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xba9, Size: 1]
	float TotalVaultDuration;//[Offset: 0xbac, Size: 1]
	AnimSequence* CurrentMantleSequence;//[Offset: 0xbb0, Size: 1]
	MantleConfig CurrentMantleConfig;//[Offset: 0xbb8, Size: 1]
	float VaultStartTime;//[Offset: 0xc60, Size: 1]
	float PreVaultWorldHeight;//[Offset: 0xc64, Size: 1]
	float CurrentVaultTime;//[Offset: 0xc68, Size: 1]
	InterpCurveFloat VaultTimeScaleCurve;//[Offset: 0xc70, Size: 1]
	InterpCurveFloat VaultScaledVertCurve;//[Offset: 0xc88, Size: 1]
	Vector MantleGrabLocation;//[Offset: 0xca0, Size: 1]
	float MantleDistanceToTop;//[Offset: 0xcac, Size: 1]
	Vector MantleTowardsWallDir;//[Offset: 0xcb0, Size: 1]
	bool bMantleIKLeftHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbc, Size: 1]
	bool bMantleIKRightHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbd, Size: 1]
	float MantleIKLeftHandAlpha;//[Offset: 0xcc0, Size: 1]
	float MantleIKRightHandAlpha;//[Offset: 0xcc4, Size: 1]
	Vector MantleIKLeftHandLocation;//[Offset: 0xcc8, Size: 1]
	Vector MantleIKRightHandLocation;//[Offset: 0xcd4, Size: 1]
	bool bDodgeRolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xce0, Size: 1]
	float DodgeRollDuration;//[Offset: 0xce4, Size: 1]
	FName DodgeRollDirection;//[Offset: 0xce8, Size: 1]
	bool bIsInKneeSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf0, Size: 1]
	bool bIsInPowerSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xcf4, Size: 1]
	bool bAbilityMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcf4, Size: 1]
	bool bZipLining;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcf4, Size: 1]
	bool bZipLineBracing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcf4, Size: 1]
	bool bZipLineEnding;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xcf4, Size: 1]
	float ZiplineEndBlendtime;//[Offset: 0xcf8, Size: 1]
	float ZiplineEndOffsetBlendtime;//[Offset: 0xcfc, Size: 1]
	bool bZipLineIsUpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd00, Size: 1]
	bool bZipLineIntro;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd00, Size: 1]
	bool bStunned;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd00, Size: 1]
	bool bIsBlinded;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd00, Size: 1]
	bool bHardLand;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd00, Size: 1]
	bool bCrouching;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd00, Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd00, Size: 1]
	bool bWasCrouchedBeforeRoll;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd00, Size: 1]
	bool bSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd01, Size: 1]
	bool bIsInVehicle;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd01, Size: 1]
	AnimSequence* VehicleIdle;//[Offset: 0xd08, Size: 1]
	bool bIsSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd10, Size: 1]
	bool bIsSubmerged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd10, Size: 1]
	Rotator SwimSpineRotation;//[Offset: 0xd14, Size: 1]
	float AdditiveLandsAlphaMin;//[Offset: 0xd20, Size: 1]
	float AdditiveLandsAlphaMax;//[Offset: 0xd24, Size: 1]
	bool bCombat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd28, Size: 1]
	bool bDowned;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd28, Size: 1]
	bool bKnockedBack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd28, Size: 1]
	Rotator DownedRootFacing;//[Offset: 0xd2c, Size: 1]
	MulticastInlineDelegateProperty OnGoDown;//[Size: 1]
	bool bActivatingMod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd48, Size: 1]
	bool bAnyModsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd48, Size: 1]
	bool bEnableSprintAdditiveForAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4c, Size: 1]
	KSPlayerModInstance* DashMod;//[Offset: 0xd50, Size: 1]
	FName InteractionState;//[Offset: 0xd58, Size: 1]
	bool bIsReviving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd60, Size: 1]
	float IsInVehicleAlpha;//[Offset: 0xd64, Size: 1]
	float IsInVehicleInverseAlpha;//[Offset: 0xd68, Size: 1]
	bool bCachedCameraLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd6c, Size: 1]
	bool bCachedCameraLockoutCooldown;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd6c, Size: 1]
	float CachedCameraLockoutAlpha;//[Offset: 0xd74, Size: 1]
	float AdditiveLandsAlpha;//[Offset: 0xd78, Size: 1]
	bool bDownedCosmetic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7c, Size: 1]
	bool bWasRecentlyRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7d, Size: 1]
	bool bHasManuallyCanceledDownedCosmetic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7e, Size: 1]
	Vector PreviousLocalAccelDirection;//[Offset: 0xd80, Size: 1]
	float FwdBackIntroLean;//[Offset: 0xd8c, Size: 1]
	float LeftRightIntroLean;//[Offset: 0xd90, Size: 1]
	float IntroLeanMultiplier;//[Offset: 0xd94, Size: 1]
	float IntroLeanSpeed;//[Offset: 0xd98, Size: 1]
	float VelocityVsAccelDotProduct;//[Offset: 0xd9c, Size: 1]
	Rotator PowerSlideSlopeAngleRotation;//[Offset: 0xda0, Size: 1]
	Vector FootHeightAdjustmentOnSlope;//[Offset: 0xdac, Size: 1]
	Vector PelvisAdjustmentOnSlope;//[Offset: 0xdb8, Size: 1]
	float LocomotionStopBufferTime;//[Offset: 0xdc4, Size: 1]
	float LocomotionStopBufferExpireTime;//[Offset: 0xdc8, Size: 1]
	bool bSuccessPivotCompleteThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcc, Size: 1]
	bool HasLocomotionPivotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcd, Size: 1]
	bool HasLocomotionPrePivotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdce, Size: 1]
	bool HasLocomotionPostPivotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdcf, Size: 1]
	float LocomotionPivotThreshold;//[Offset: 0xdd0, Size: 1]
	Vector LocomotionPivotLocation;//[Offset: 0xdd4, Size: 1]
	Vector CachedLocomotionPivotLocation;//[Offset: 0xde0, Size: 1]
	float DistFromLocomotionPivot;//[Offset: 0xdec, Size: 1]
	float DistFromLocomotionPivotMax;//[Offset: 0xdf0, Size: 1]
	Vector LocomotionPrePivotLocation;//[Offset: 0xdf4, Size: 1]
	float DistFromLocomotionPrePivot;//[Offset: 0xe00, Size: 1]
	Vector LocomotionPostPivotLocation;//[Offset: 0xe04, Size: 1]
	float DistFromLocomotionPostPivot;//[Offset: 0xe10, Size: 1]
	bool bLocomotionStartUsesPivotDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 1]
	bool IsSprintJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe15, Size: 1]
	bool IsShortJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe16, Size: 1]
	float ShortJumpThreshold;//[Offset: 0xe18, Size: 1]
	float PowerSlideProgress;//[Offset: 0xe38, Size: 1]
	float PowerSlideAngle;//[Offset: 0xe3c, Size: 1]
	Rotator PowerSlideRotation;//[Offset: 0xe40, Size: 1]
	enum PowerSlideEndReason;//[Offset: 0xe4c, Size: 1]
	bool bIsPowerSlidingOnSlope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4d, Size: 1]
	bool bIsLocallyViewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4e, Size: 1]
	float DesiredComponentYaw;//[Offset: 0xe50, Size: 1]
	bool bTurnInPlaceInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe54, Size: 1]
	float TurnInPlaceTurnValue;//[Offset: 0xe58, Size: 1]
	float CurrentTurnInPlaceThreshold;//[Offset: 0xe5c, Size: 1]
	enum LastTurnInPlaceAnimationVariant;//[Offset: 0xe60, Size: 1]
	float TurnInPlaceMinThreshold;//[Offset: 0xe64, Size: 1]
	float TurnInPlaceMaxOffset;//[Offset: 0xe68, Size: 1]
	float TurnInPlaceRetriggerMinThreshold;//[Offset: 0xe6c, Size: 1]
	float TurnInPlaceRecoverySpeedWithAcceleration;//[Offset: 0xe70, Size: 1]
	float TurnInPlaceRecoverySpeed90;//[Offset: 0xe74, Size: 1]
	float TurnInPlaceRecoverySpeed180;//[Offset: 0xe78, Size: 1]
	Rotator AppliedTurnInPlaceRotator;//[Offset: 0xe7c, Size: 1]
	Rotator WorldTurnInPlaceRotator;//[Offset: 0xe88, Size: 1]
	bool bDisableTurnInPlaceCounterRotate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea4, Size: 1]
	bool bEnableTurnInPlaceForAOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea5, Size: 1]
	float EnableCounterRotateBlendTime;//[Offset: 0xea8, Size: 1]
	float DisableCounterRotateBlendTime;//[Offset: 0xeac, Size: 1]
	bool bShouldSplitUpperBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	bool bForceDisableSplitUpperBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb1, Size: 1]
	bool bEnableSplitUpperBodyForAbilities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb2, Size: 1]
	bool bDisableUpperBodyTurnInPlace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb3, Size: 1]
	bool bIsLockedToWorldRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb4, Size: 1]
	bool IsLockedToWorldRotationAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb5, Size: 1]
	Rotator LockedWorldRotation;//[Offset: 0xeb8, Size: 1]
	<byte> WorldRotationLockIds;//[Offset: 0xec8, Size: 1]
	byte NextWorldRotationLockId;//[Offset: 0xf18, Size: 1]
	bool bIsAimOverShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf38, Size: 1]
	bool bIsLeavingAOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf39, Size: 1]
	bool bIsAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf3a, Size: 1]
	float IsAimDownSightsAlpha;//[Offset: 0xf3c, Size: 1]
	bool bIsAimDownSightsFirstPerson;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf40, Size: 1]
	float IsAimDownSightsFirstPersonAlpha;//[Offset: 0xf44, Size: 1]
	bool bIs3PAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf48, Size: 1]
	Rotator PreviousCachedAimRotation;//[Offset: 0xf4c, Size: 1]
	Rotator CachedAimRotation;//[Offset: 0xf58, Size: 1]
	Rotator DeltaAimRotation;//[Offset: 0xf64, Size: 1]
	Rotator ThirdPersonAppliedAimRotator;//[Offset: 0xf70, Size: 1]
	float ThirdPersonAimYaw;//[Offset: 0xf7c, Size: 1]
	float ThirdPersonAimYawInverted;//[Offset: 0xf80, Size: 1]
	float ThirdPersonAimYawCosmetic;//[Offset: 0xf84, Size: 1]
	float ThirdPersonEngagedAimYawCosmetic;//[Offset: 0xf88, Size: 1]
	float ThirdPersonAimPitch;//[Offset: 0xf8c, Size: 1]
	float ThirdPersonAimPitchInverted;//[Offset: 0xf90, Size: 1]
	float ThirdPersonAimPitchUpline;//[Offset: 0xf94, Size: 1]
	float ThirdPersonLean;//[Offset: 0xf98, Size: 1]
	float ThirdPersonFwdLean;//[Offset: 0xf9c, Size: 1]
	float ThirdPersonLeanAlpha;//[Offset: 0xfa0, Size: 1]
	float ThirdPersonLeanMultiplier;//[Offset: 0xfa4, Size: 1]
	float ComLeanMultiplier;//[Offset: 0xfa8, Size: 1]
	float NonComLeanMultiplier;//[Offset: 0xfac, Size: 1]
	float EngagedLeanMultiplier;//[Offset: 0xfb0, Size: 1]
	float ThirdPersonLeanSpeed;//[Offset: 0xfb4, Size: 1]
	float YawDeltaMinimum;//[Offset: 0xfb8, Size: 1]
	float MinPitchAngle;//[Offset: 0xfbc, Size: 1]
	float MaxPitchAngle;//[Offset: 0xfc0, Size: 1]
	float MinYawAngle;//[Offset: 0xfc4, Size: 1]
	float MaxYawAngle;//[Offset: 0xfc8, Size: 1]
	float NormalYawInterpSpeed;//[Offset: 0xfcc, Size: 1]
	float ZipLineYawInterpSpeed;//[Offset: 0xfd0, Size: 1]
	float ZipLineYawInterpSpeedOver180;//[Offset: 0xfd4, Size: 1]
	float CurrentYawInterpSpeed;//[Offset: 0xfd8, Size: 1]
	float TargetYawInterpSpeed;//[Offset: 0xfdc, Size: 1]
	float NormalYawInterpAcceleration;//[Offset: 0xfe0, Size: 1]
	float ADSBlendToCrouchSlotTime;//[Offset: 0xfe4, Size: 1]
	float ADSBlendToStandingSlotTime;//[Offset: 0xfe8, Size: 1]
	bool bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfec, Size: 1]
	bool bIsSwitchingWeapon;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfec, Size: 1]
	bool bIsUsingItem;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfec, Size: 1]
	bool bIsUsingAbility;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfec, Size: 1]
	bool bIsRetrievingWeapon;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfec, Size: 1]
	bool bIsHacking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfec, Size: 1]
	bool bAttachHandWhileCrouching;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfec, Size: 1]
	bool bAttachHandMelee;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfec, Size: 1]
	bool bAttachHandWhileIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfed, Size: 1]
	bool bAttachHandWhileSprinting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfed, Size: 1]
	bool bAttachHandWhileMoving;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfed, Size: 1]
	bool bAttachHandWhileZiplining;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfed, Size: 1]
	bool bAttachRightHandWhileZiplining;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfed, Size: 1]
	bool bForceAttachHandIfNotNonCom;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfed, Size: 1]
	bool bAttachRightHand;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfed, Size: 1]
	bool bWeaponScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xfed, Size: 1]
	bool bRightPropBScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfee, Size: 1]
	bool bLeftPropBScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfee, Size: 1]
	bool bAimsDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfee, Size: 1]
	bool bMantlePlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfee, Size: 1]
	float LeftPropBScaleAlpha;//[Offset: 0xff0, Size: 1]
	float RightPropBScaleAlpha;//[Offset: 0xff4, Size: 1]
	float FreeFallAlpha;//[Offset: 0xff8, Size: 1]
	float BlindedAlpha;//[Offset: 0xffc, Size: 1]
	float TabletScaleAlpha;//[Offset: 0x1000, Size: 1]
	float PropLockAlpha;//[Offset: 0x1004, Size: 1]
	float PropLockAlphaTarget;//[Offset: 0x1008, Size: 1]
	float PropLockBlendSpeed;//[Offset: 0x100c, Size: 1]
	float HolsterLockAlpha;//[Offset: 0x1010, Size: 1]
	float LeftHolsterLockAlpha;//[Offset: 0x1014, Size: 1]
	float HeadAccessoryScaleAlpha;//[Offset: 0x1018, Size: 1]
	bool bUseCustomWingsuitIntro;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101c, Size: 1]
	AnimSequenceBase* FreeFallIntroJump;//[Offset: 0x1020, Size: 1]
	AnimSequenceBase* FreeFallIntroRun;//[Offset: 0x1028, Size: 1]
	Rotator DebugDesiredAimDifference;//[Offset: 0x1030, Size: 1]
	bool bUsingZipLineOver180InterpSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103c, Size: 1]
	Rotator FirstPersonAppliedAimRotator;//[Offset: 0x1040, Size: 1]
	Vector FirstPersonAppliedBreathStepTranslation;//[Offset: 0x104c, Size: 1]
	float FirstPersonBreathSpeed;//[Offset: 0x1058, Size: 1]
	float FirstPersonBreathHeight;//[Offset: 0x105c, Size: 1]
	float FirstPersonStepSpeedStanding;//[Offset: 0x1060, Size: 1]
	float FirstPersonStepSpeedCrouching;//[Offset: 0x1064, Size: 1]
	float FirstPersonStepHeight;//[Offset: 0x1068, Size: 1]
	float FirstPersonStepMinSpeed;//[Offset: 0x106c, Size: 1]
	Rotator FirstPersonLaggingAimRotator;//[Offset: 0x1070, Size: 1]
	float Normal1PAimInterpSpeed;//[Offset: 0x107c, Size: 1]
	float CurrentAimPitchSway;//[Offset: 0x1080, Size: 1]
	float CurrentAimPitchSwayOffset;//[Offset: 0x1084, Size: 1]
	float CurrentAimYawSway;//[Offset: 0x1088, Size: 1]
	float CurrentAimYawSwayOffset;//[Offset: 0x108c, Size: 1]
	float NormalLeanAndSwayInterpSpeed;//[Offset: 0x1090, Size: 1]
	float ADSBreathingTime;//[Offset: 0x10a0, Size: 1]
	float ADSSteppingTime;//[Offset: 0x10a4, Size: 1]
	bool bScaleOutWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10a8, Size: 1]
	float WeaponScaleAlpha;//[Offset: 0x10ac, Size: 1]
	bool WeaponScaleLeftPropOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b0, Size: 1]
	bool WeaponScaleRightPropOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b1, Size: 1]
	bool bUnarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b2, Size: 1]
	bool bGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b3, Size: 1]
	bool bMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b4, Size: 1]
	bool bQuickMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b5, Size: 1]
	bool bIsUsingMedPen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b6, Size: 1]
	bool bEnableMeleeLowerBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b7, Size: 1]
	bool bMeleeAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8, Size: 1]
	bool bMeleeNoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b9, Size: 1]
	float MeleeLowerBodyDuration;//[Offset: 0x10bc, Size: 1]
	enum MeleeLowerBodyDirection;//[Offset: 0x10c0, Size: 1]
	enum TestCombatState;//[Offset: 0x10c1, Size: 1]
	float TestCombatStateCooldownTime;//[Offset: 0x10c4, Size: 1]
	TimerHandle TestCombatStateCooldownTimer;//[Offset: 0x10c8, Size: 1]
	bool bIsUsingTestLocomotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d0, Size: 1]
	TimerHandle EngHeadAdditiveAlphaTimer;//[Offset: 0x10d8, Size: 1]
	float EngagedBlendTime;//[Offset: 0x10e0, Size: 1]
	float ComBlendTime;//[Offset: 0x10e4, Size: 1]
	float NonComBlendTime;//[Offset: 0x10e8, Size: 1]
	float LeftHandAdditiveReloadOverrideDisableBlendTime;//[Offset: 0x10ec, Size: 1]
	bool bDownedIdleToCrawlLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f0, Size: 1]
	bool bDownedCrawlLoopToIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f1, Size: 1]
	bool bCanBlink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f2, Size: 1]
	bool bIsBlinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f3, Size: 1]
	bool bBlinkIsClosingEyes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f4, Size: 1]
	bool bIsSlowBlinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f5, Size: 1]
	bool bIsDoubleBlinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10f6, Size: 1]
	float EyeBlinkAlpha;//[Offset: 0x10f8, Size: 1]
	float TimeToNextBlink;//[Offset: 0x10fc, Size: 1]
	float MinimumTimeBetweenBlinks;//[Offset: 0x1100, Size: 1]
	float MaximumTimeBetweenBlinks;//[Offset: 0x1104, Size: 1]
	float EyeBlinkSpeed;//[Offset: 0x1108, Size: 1]
	float EyeBlinkSpeedSlow;//[Offset: 0x110c, Size: 1]
	float SlowBlinkPercentageChance;//[Offset: 0x1110, Size: 1]
	float DoubleBlinkPercentageChance;//[Offset: 0x1114, Size: 1]
	TimerHandle BlinkTimer;//[Offset: 0x1118, Size: 1]
	enum Emotion;//[Offset: 0x1120, Size: 1]
	float EmotionAnimTime;//[Offset: 0x1124, Size: 1]
	MulticastInlineDelegateProperty OnAnimationEvent;//[Size: 1]
	bool bIsNonComIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1148, Size: 1]
	void UpdateTurnInPlace(float DeltaSeconds);// 0x271fb10
	void UpdatePostMirrorRotateValues();// 0x271faf0
	void UpdateHandIKAdditiveAlpha(float DesiredAlpha);// 0x271fa70
	void UpdateCachedPivotLocation();// 0x271fa50
	void UnplantRightHand();// 0x271fa30
	void UnplantLeftHand();// 0x271fa10
	void UnhideWeapon();// 0x271f9f0
	void UnhideMag(const int WepMeshIndex);// 0x2d74e00
	void UnhideGadget();// 0x271f9d0
	void TryToTriggerTurnInPlaceAnimation(enum AnimationVariant, float DelayTime);// 0x271f910
	KSCharacterBase* TryGetKSCharacterBase();// 0x271f8e0
	void TriggerDisableAims(bool bShouldDisable);// 0x271f850
	void TriggerCustomPivot();// 0x2d74e00
	void SwitchWeaponNative(KSWeaponComponent* Weapon);// 0x271f7c0
	void SwitchWeaponIKNative(KSWeaponComponent* Weapon);// 0x271f730
	void StopFire();// 0xd94a20
	void StopEmote();// 0x271f710
	void StartRevivee();// 0x2d74e00
	void StartFire();// 0x271f6f0
	void ShoulderCharge();// 0x2d74e00
	void SetMaxSpeedValues(KSWeaponAsset* WeaponAsset);// 0x271f670
	void SetDashMod(KSPlayerModInstance* NewDashMod);// 0x271f5f0
	void ReviveMesh(AnimMontage* ReviveMontage, bool bIsInAir);// 0x2d74e00
	void RetrieveEnd();// 0x1f6ece0
	void RetrieveBegin();// 0x1fb3ad0
	int RequestLeftHandIKForceOff();// 0x271f5c0
	bool ReleaseWorldRotationLock(byte InLockId);// 0x271f530
	bool PopLeftHandIKForceOffRequest(int RequestID);// 0x271f4a0
	void PlayRecoilProfile(RecoilProfile RecoilProfile);// 0x271f370
	void LocomotionPrePivot();// 0x2d74e00
	void LocomotionPivotCheckpoint();// 0x2d74e00
	void LocomotionPivot(Vector PivotLocation);// 0x2d74e00
	byte LockToCurrentInWorldRotation(bool bOverrideRotation, Rotator Override);// 0x271f290
	bool IsPlayingEmote();// 0x271f260
	bool IsLeftHandIKForcedOff();// 0x271f230
	void HideWeapon();// 0x271f210
	void HideMag(const int WepMeshIndex);// 0x2d74e00
	void HideGadget();// 0x271f1f0
	Rotator GetRawDesiredAimRotator();// 0x271f1b0
	static float FloatSpringInterp(float Current, float Target, out FloatHitSpringState SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);// 0x271efa0
	void EventStopSwimming();// 0x2d74e00
	void EventStopSubmerge();// 0x2d74e00
	void EventStartSwimming();// 0x2d74e00
	void EventStartSubmerge();// 0x2d74e00
	void EventStartInteraction(FName NewInteractState, float NewInteractTime);// 0x2d74e00
	void EventPlayHitReactionAnimation(FName AttackDirection, bool bWillReturnDamage);// 0x2d74e00
	void EventEndZipLineEnding();// 0x2d74e00
	void EventEndZipLineBrace();// 0x2d74e00
	void EventEndZipLine();// 0x2d74e00
	void EventEndVault();// 0x2d74e00
	void EventEndStun();// 0x2d74e00
	void EventEndPowerSlide(enum EndReason);// 0x2d74e00
	void EventEndInteraction(FName OldInteractState);// 0x2d74e00
	void EventEndHardLand();// 0x2d74e00
	void EventEndActivatingMod();// 0x2d74e00
	void EventEndAbilityMovement();// 0x2d74e00
	void EventDoZipLineEnding();// 0x2d74e00
	void EventDoZipLineBrace();// 0x2d74e00
	void EventDoZipLine();// 0x2d74e00
	void EventDoVault(float InMantleHeight, bool bInVault, float InVaultDrop, float InUpDuration, float InAcrossDuration, float InDownDuration, out const FName InMantleName);// 0x2d74e00
	void EventDoStun();// 0x2d74e00
	void EventDoPowerSlide();// 0x2d74e00
	void EventDoHardLandAvoid();// 0x2d74e00
	void EventDoHardLand();// 0x2d74e00
	void EventDoGoDown();// 0x2d74e00
	void EventDoDodgeRoll(float Duration, Vector2D Direction);// 0x2d74e00
	void EventDoActivatingMod();// 0x2d74e00
	void EventDoAbilityMovement();// 0x2d74e00
	void EventActivatedModExpired();// 0x2d74e00
	void EndRevivee();// 0x2d74e00
	void EnableAims();// 0x271ef80
	void EmoteMontageLostAllLocalWeight();// 0x2d74e00
	void EmoteMontageLostAllGlobalWeight();// 0x2d74e00
	void DropMagFromMultiMesh(const int meshToDropFrom);// 0x2d74e00
	void DoResetCustomPivot();// 0x2d74e00
	void DodgeRollExpire();// 0x271ef60
	void DisableAims();// 0x271ef40
	bool CheckCanSpray();// 0x271ef10
	bool CheckCanEmote();// 0x271eee0
	void CancelDownedCosmetic();// 0x2d74e00
	void BroadcastOnGoDown();// 0x271eec0
	void BroadcastAnimationEvent(FName EventName);// 0x271ee40
	void BlinkEyes();// 0x271ee20
	void AdditiveRetrieveEnd();// 0x2d74e00
	void AdditiveRetrieveBegin();// 0x2d74e00

--------------------------------
Class: KSCharacterAnimInstBase.KSAnimInstance.SkinnedAnimInstance.AnimInstance.Object
	float Speed;//[Offset: 0x348, Size: 1]
	float SpeedXY;//[Offset: 0x34c, Size: 1]
	float SpeedZ;//[Offset: 0x350, Size: 1]
	float Forward;//[Offset: 0x354, Size: 1]
	float Right;//[Offset: 0x358, Size: 1]
	enum MovementDirection;//[Offset: 0x35c, Size: 1]
	float DirectionBlendSpeed;//[Offset: 0x360, Size: 1]
	float DirectionChangedBlendSpeed;//[Offset: 0x364, Size: 1]
	float ForwardRotate;//[Offset: 0x36c, Size: 1]
	float RightRotate;//[Offset: 0x370, Size: 1]
	float BackRotate;//[Offset: 0x374, Size: 1]
	float LeftRotate;//[Offset: 0x378, Size: 1]
	float MovementDirectionRotate;//[Offset: 0x37c, Size: 1]
	Vector2D ForwardRotateInputRange;//[Offset: 0x380, Size: 1]
	Vector2D ForwardRotateOutputRange;//[Offset: 0x388, Size: 1]
	Vector2D RightRotateInputRange;//[Offset: 0x390, Size: 1]
	Vector2D RightRotateOutputRange;//[Offset: 0x398, Size: 1]
	float CurSpeedFraction;//[Offset: 0x3a0, Size: 1]
	float CurMaxSpeed;//[Offset: 0x3a4, Size: 1]
	float CurSpeedScaling;//[Offset: 0x3a8, Size: 1]
	Vector FacingDirection;//[Offset: 0x3ac, Size: 1]
	Vector Velocity;//[Offset: 0x3b8, Size: 1]
	Vector LocalVelocity;//[Offset: 0x3c4, Size: 1]
	Vector LocalRelativeVelocity;//[Offset: 0x3d0, Size: 1]
	Vector SmoothedVelocity;//[Offset: 0x3dc, Size: 1]
	float SmoothedVelocityInterp;//[Offset: 0x3e8, Size: 1]
	float SmoothedVelocitySpeedThreshold;//[Offset: 0x3ec, Size: 1]
	float SmoothedVelocityInterpRate;//[Offset: 0x3f0, Size: 1]
	float SmoothedVelocityInterpRateBelowThreshold;//[Offset: 0x3f4, Size: 1]
	Vector AccelDirection;//[Offset: 0x3f8, Size: 1]
	Vector LocalAccelDirection;//[Offset: 0x404, Size: 1]
	Vector FloorNormal;//[Offset: 0x410, Size: 1]
	Vector AccelRightDirection;//[Offset: 0x41c, Size: 1]
	Vector AccelNormDirection;//[Offset: 0x428, Size: 1]
	float SlopeAngle;//[Offset: 0x434, Size: 1]
	float SlopeAngleTarget;//[Offset: 0x438, Size: 1]
	Vector2D SlopeAngleDirectional;//[Offset: 0x43c, Size: 1]
	Rotator SlopeAngleDirectionalRotation;//[Offset: 0x444, Size: 1]
	float SlopeFeetAlpha;//[Offset: 0x450, Size: 1]
	float SlopeFeetAlphaTarget;//[Offset: 0x454, Size: 1]
	Vector RootAdjustmentOnSlope;//[Offset: 0x458, Size: 1]
	bool bDisableFeetTilting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x464, Size: 1]
	float fSlopeInterpSpeed;//[Offset: 0x468, Size: 1]
	enum LocomotionState;//[Offset: 0x46c, Size: 1]
	enum LocomotionStartDirection;//[Offset: 0x46d, Size: 1]
	enum LocomotionStopDirection;//[Offset: 0x46e, Size: 1]
	bool HasLocomotionStartLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46f, Size: 1]
	Vector LocomotionStartLocation;//[Offset: 0x470, Size: 1]
	float DistFromLocomotionStart;//[Offset: 0x47c, Size: 1]
	float DistFromLocomotionStartMax;//[Offset: 0x480, Size: 1]
	bool HasLocomotionStopLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 1]
	Vector LocomotionStopLocation;//[Offset: 0x488, Size: 1]
	float DistFromLocomotionStop;//[Offset: 0x494, Size: 1]
	bool HasJumpStartLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498, Size: 1]
	Vector JumpStartLocation;//[Offset: 0x49c, Size: 1]
	float DistFromJumpStart;//[Offset: 0x4a8, Size: 1]
	float DistFromJumpStartMax;//[Offset: 0x4ac, Size: 1]
	bool HasJumpLandLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0, Size: 1]
	bool JumpLandLocationOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1, Size: 1]
	bool JumpLandLocationInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b2, Size: 1]
	Vector JumpLandLocation;//[Offset: 0x4b4, Size: 1]
	Vector JumpLandLocationTarget;//[Offset: 0x4c0, Size: 1]
	float JumpLandLocationInterpSpeed;//[Offset: 0x4cc, Size: 1]
	float DistFromJumpLand;//[Offset: 0x4d0, Size: 1]
	float InitialDistFromJumpLand;//[Offset: 0x4d4, Size: 1]
	float DistFromJumpLandTarget;//[Offset: 0x4d8, Size: 1]
	float DistFromJumpLandInterpSpeed;//[Offset: 0x4dc, Size: 1]
	float MinZSpeedforJumpLand;//[Offset: 0x4e0, Size: 1]
	bool bZeroVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e4, Size: 1]
	bool bZeroAcceleration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e4, Size: 1]
	bool bDead;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4e4, Size: 1]
	bool bUpdateMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4e4, Size: 1]
	bool bFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e4, Size: 1]
	bool bIsStopped;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4e4, Size: 1]
	bool bIsPreRagdoll;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4e4, Size: 1]
	bool bIsRagdoll;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4e4, Size: 1]
	AnimSequence* FallDown;//[Offset: 0x4e8, Size: 1]
	HitReaction[] QueuedHits;//[Offset: 0x4f0, Size: 1]
	CurveVector* HitReactionTimeScale;//[Offset: 0x500, Size: 1]
	CurveFloat* HitReactionDamageScale;//[Offset: 0x508, Size: 1]
	bool bHeavyHitReactionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	bool bStaggerIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 1]
	enum CombatState;//[Offset: 0x512, Size: 1]
	enum InitialCombatState;//[Offset: 0x513, Size: 1]
	enum DefaultCombatState;//[Offset: 0x514, Size: 1]
	MulticastInlineDelegateProperty OnCombatStateChanged;//[Size: 1]
	float CombatStateCooldownTime;//[Offset: 0x528, Size: 1]
	float WeaponCombatStateCooldownTime;//[Offset: 0x52c, Size: 1]
	TimerHandle CombatStateCooldownTimer;//[Offset: 0x530, Size: 1]
	bool bCooldownBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	void UpdateCombatState(enum NewCombatState, bool bBlockCooldown, bool bForce);// 0x2725f90
	KSCharacterFoundation* TryGetKSCharacterFoundation();// 0x2725e40
	bool ShouldDisableFeetTilting(Vector ActorUpVector);// 0x2725c60
	void RequestNewCombatState(enum NewCombatState, bool bBlockCooldown, bool bForce);// 0x2d74e00
	void OnMovementDirectionChanged(enum OldDirection, enum NewDirection);// 0x27258b0
	void OnCombatStateCooldown();// 0x2725890
	void LocomotionStop(Vector StopLocation);// 0x2d74e00
	void LocomotionStart(Vector StartLocation);// 0x2d74e00
	void LocomotionJumpStart(Vector StartLocation);// 0x2d74e00
	void LocomotionJumpLand(Vector LandLocation);// 0x2d74e00
	bool IsFallingIntoWater();// 0x27254c0
	enum GetMovementDirectionFromLocalAcceleration(Vector NormalizedLocalAccel, bool bGetOppositeDirection);// 0x2724bb0
	enum GetCombatState();// 0x2724720
	void EventPlayFireAnimation();// 0x2d74e00
	bool EventPlayDeathAnimation();// 0x2d74e00
	bool CombatStateCanCoolDown(enum TestState);// 0x2724140
	bool CanUseCombatState(enum TestState);// 0x2724080
	void AttemptCombatStateCooldown();// 0x2723fd0

--------------------------------
Class: KSAnimInstance.SkinnedAnimInstance.AnimInstance.Object
	bool bIsInLobbyViewer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool bRecordAnimStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	KSAnimationAuditComponent* AuditingComponent;//[Offset: 0x2d0, Size: 1]
	bool bPlayingMirrorTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	bool bPlayingMirrorTransitionAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9, Size: 1]
	bool bAnimMirrorDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ea, Size: 1]
	bool bDisableMirrorPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2eb, Size: 1]
	bool bWantsMirroredPoseCosmetic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec, Size: 1]
	float PoseMirrorAlphaCosmetic;//[Offset: 0x2f0, Size: 1]
	float MirrorInterpSpeed;//[Offset: 0x2f4, Size: 1]
	float MirrorInterpSpeedEngaged;//[Offset: 0x2f8, Size: 1]
	float ShoulderSwapProgress;//[Offset: 0x2fc, Size: 1]
	enum CurrentShoulderCosmetic;//[Offset: 0x300, Size: 1]
	BoneMirrorConfig BoneMirrorConfig;//[Offset: 0x308, Size: 1]
	enum CurrentShoulder;//[Offset: 0x328, Size: 1]
	bool bWantsMirroredPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	float PoseMirrorAlpha;//[Offset: 0x32c, Size: 1]
	MulticastInlineDelegateProperty OnMirrorPoseUpdated;//[Size: 1]
	bool bIsShieldActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 1]
	void SetShieldActive(bool bSetIsShieldActive);// 0x2d74e00
	void SetLobbyState(bool bInModelViewer);// 0x26dbde0
	void OnShoulderChanged();// 0x2d74e00
	void OnMirrorPoseChanged();// 0x2d74e00
	void Montage_JumpToRandomSection(FName[] SectionNames, AnimMontage* Montage, bool bDisallowCurrentSection);// 0x26db830
	BoneReference[] GetUnpairedMirrorBones();// 0x26db5d0
	BoneMirrorPair[] GetPairedMirrorBones();// 0x26db540
	bool CanPlayMirrorTransitionAnimation();// 0x26db2f0
	void AnimMirrorDelayEnd();// 0x26db0f0

--------------------------------
Class: SkinnedAnimInstance.AnimInstance.Object
	MultiSkinObject* SkinObject;//[Offset: 0x2b8, Size: 1]
	MultiSkinObject* GetSkinObject();// 0xfb6390
	BlendSpace* GetSkinnedBlendSpace(FName Keyword, BlendSpace* Default, out bool bHasOverride);// 0xfb66e0
	AnimSequence* GetSkinnedAnimSequence(FName Keyword, AnimSequence* Default, out bool bHasOverride);// 0xfb65d0
	AimOffsetBlendSpace* GetSkinnedAnimOffset(FName Keyword, AimOffsetBlendSpace* Default, out bool bHasOverride);// 0xfb64c0
	AnimMontage* GetSkinnedAnimMontage(FName Keyword, AnimMontage* Default, out bool bHasOverride);// 0xfb63b0

--------------------------------
Class: KSAnimationAuditComponent.ActorComponent.Object
	KSAnimInstance* CurrentAnimInst;//[Offset: 0xb0, Size: 1]
	void AnimAuditStop(KSAnimInstance* AnimInst, bool bExportImmediately);// 0x26db020
	void AnimAuditStart(KSAnimInstance* AnimInst);// 0x26dafa0
	void AnimAuditClear(KSAnimInstance* AnimInst);// 0x26daf20

--------------------------------
Class: KSWeaponComponent.KSEquipmentCosmeticComponent.ActorComponent.Object
	enum WeaponComponentTickType;//[Offset: 0x128, Size: 1]
	bool bAllowTickingOnItemDropActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	byte ForcedWeaponLODWhenLocallyViewed;//[Offset: 0x12a, Size: 1]
	bool bForceResidentFlagOnWeaponTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 1]
	bool bAllowAnimationAsItemDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	bool bEmoteVisibilityCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12e, Size: 1]
	bool bUsePrecisionAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12f, Size: 1]
	bool bTouchUseReleaseToFire;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12f, Size: 1]
	bool bTouchReleaseToFireSemiAuto;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12f, Size: 1]
	bool bUseTouchAutoFireStartupDelay;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12f, Size: 1]
	float TouchModeADSAutoFireDelay;//[Offset: 0x130, Size: 1]
	float TouchModeHipFireAutoFireDelay;//[Offset: 0x134, Size: 1]
	float TouchModeADSAutoFireFallOff;//[Offset: 0x138, Size: 1]
	float TouchModeHipFireAutoFireFallOff;//[Offset: 0x13c, Size: 1]
	enum WeaponState;//[Offset: 0x140, Size: 1]
	enum InitialState;//[Offset: 0x141, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x148, Size: 1]
	KSWeapon* OwningWeapon;//[Offset: 0x150, Size: 1]
	bool bPendingFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	byte InitialAmmoInClip;//[Offset: 0x159, Size: 1]
	byte AmmoInClip;//[Offset: 0x15a, Size: 1]
	bool bInitializationStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 1]
	bool bInitializationCompleted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c, Size: 1]
	MulticastInlineDelegateProperty OnAmmoChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnFireRateChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCurrentChargeChangedDel;//[Size: 1]
	interface class None* RechargeMethodCosmetic;//[Offset: 0x1b0, Size: 1]
	KSWeaponMeshInfo PrimaryWeaponMeshInfo;//[Offset: 0x1c0, Size: 1]
	KSWeaponMeshInfo[] AdditionalWeaponMeshInfo;//[Offset: 0x230, Size: 1]
	MulticastInlineDelegateProperty OnWeaponComponentInitializationCompletedDel;//[Size: 1]
	bool bCachedWeaponVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	float MeshMaxDrawDistance;//[Offset: 0x26c, Size: 1]
	bool bUseMaxDistForCharacterOwnedWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	bool bHideAncillaryMagazine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271, Size: 1]
	int AncillaryMagazineIndex;//[Offset: 0x274, Size: 1]
	bool bIsGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 1]
	bool bUsesHeavyGadget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x279, Size: 1]
	FName MeleeComboTarget;//[Offset: 0x27c, Size: 1]
	bool bPreventReturnToHolsterFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	enum WeaponAttachType;//[Offset: 0x285, Size: 1]
	SkeletalMesh* SkeletalMesh;//[Offset: 0x288, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x290, Size: 1]
	FName WeaponSkeletalMeshCollisionProfileName;//[Offset: 0x298, Size: 1]
	bool bLoadWeaponSkeletalMeshComponentOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 1]
	FName[] ActiveRequiredDedicatedServerCharacterBoneNames;//[Offset: 0x2a8, Size: 1]
	enum MeshComponentVisibilityBasedAnimTickOption;//[Offset: 0x2b8, Size: 1]
	bool bAllowMeshCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	SkeletalMesh* ScopeMesh;//[Offset: 0x2c0, Size: 1]
	GameplayTag ScopeAttachmentTag;//[Offset: 0x2c8, Size: 1]
	SkeletalMesh* MagazineMesh;//[Offset: 0x2d0, Size: 1]
	GameplayTag MagazineAttachmentTag;//[Offset: 0x2d8, Size: 1]
	SkeletalMesh* StockMesh;//[Offset: 0x2e0, Size: 1]
	GameplayTag StockAttachmentTag;//[Offset: 0x2e8, Size: 1]
	SkeletalMesh* SilencerMesh;//[Offset: 0x2f0, Size: 1]
	GameplayTag SilencerAttachmentTag;//[Offset: 0x2f8, Size: 1]
	SkeletalMesh* GripMesh;//[Offset: 0x300, Size: 1]
	GameplayTag GripAttachmentTag;//[Offset: 0x308, Size: 1]
	FName[] KeywordsForCompositingMesh;//[Offset: 0x310, Size: 1]
	FName BaseMeshOverrideKeyword;//[Offset: 0x320, Size: 1]
	FName MeshNeedsCPUAccessKeyword;//[Offset: 0x328, Size: 1]
	FName PhysicsAssetOverrideKeyword;//[Offset: 0x330, Size: 1]
	class AnimInstance* AnimInstance;//[Offset: 0x338, Size: 1]
	FName AnimInstanceOverrideKeyword;//[Offset: 0x340, Size: 1]
	FName EquipSocketOverride;//[Offset: 0x348, Size: 1]
	KSWeaponSkeletalMeshComponent* WeaponSkeletalMeshComponent;//[Offset: 0x350, Size: 1]
	KSWeaponSkeletalMeshComponent*[] WeaponSkeletalMeshComponents;//[Offset: 0x358, Size: 1]
	KSWeaponSkeletalMeshComponent* PropWeaponSkeletalMeshComponent;//[Offset: 0x368, Size: 1]
	bool bHideOnCreation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	bool bWeaponLoweringEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x371, Size: 1]
	FName CharacterRightShoulderBoneName;//[Offset: 0x374, Size: 1]
	FName CharacterRightElbowBoneName;//[Offset: 0x37c, Size: 1]
	FName CharacterLeftShoulderBoneName;//[Offset: 0x384, Size: 1]
	FName CharacterLeftElbowBoneName;//[Offset: 0x38c, Size: 1]
	FName CharacterChestBoneName;//[Offset: 0x394, Size: 1]
	FName WeaponBarrelBoneName;//[Offset: 0x39c, Size: 1]
	float WeaponLowerSphereTraceRadius;//[Offset: 0x3a4, Size: 1]
	float WeaponLowerTestDistanceAdjustment;//[Offset: 0x3a8, Size: 1]
	AncillaryWeaponMeshInfo[] AncillaryMeshData;//[Offset: 0x3b0, Size: 1]
	float WeaponLowerViewDotThreshold;//[Offset: 0x3c0, Size: 1]
	bool bResetLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	uint32 NextBroadcastId;//[Offset: 0x3c8, Size: 1]
	uint32 LastBroadcastReceived;//[Offset: 0x3cc, Size: 1]
	SkeletalMeshComponent*[] AncillaryMeshes;//[Offset: 0x3d0, Size: 1]
	bool bPreventRetreive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	bool bForceDisableLHIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e1, Size: 1]
	bool bAttachHandWhileSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e2, Size: 1]
	bool bAttachHandWhileMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e3, Size: 1]
	bool bAttachHandWhileCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4, Size: 1]
	bool bAttachHandMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5, Size: 1]
	bool bAttachHandWhileIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e6, Size: 1]
	bool bAttachHandWhileZiplining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e7, Size: 1]
	bool bForceAttachHandIfNotNonCom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	bool bForceDisableRHIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 1]
	bool bAttachRightHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 1]
	bool bAttachRightHandWhileZiplining;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb, Size: 1]
	bool bHasMirroredReloadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	bool bHasMirroredQuickReloadAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ed, Size: 1]
	bool bHasMirroredFireAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ee, Size: 1]
	bool bIsWeaponNonComOffsetOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ef, Size: 1]
	bool bReplicateWeaponStateAsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bForceBroadcastAllWeaponStateChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	bool bForceReliableWeaponStateBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2, Size: 1]
	int ShotsFiredSinceLastReload;//[Offset: 0x3f4, Size: 1]
	bool bFirstReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool bIsMounted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	bool bShouldBroadcastEmptyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fa, Size: 1]
	bool bShouldReliablyBroadcastEmptyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fb, Size: 1]
	bool bShouldReliablyBroadcastAmmoChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	MulticastInlineDelegateProperty OnWeaponComponentStateChangedDel;//[Size: 1]
	bool bIsInAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428, Size: 1]
	bool bNonComUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	bool bComUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42a, Size: 1]
	bool bEngUseLimitedMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42b, Size: 1]
	bool bEnableTurnInPlaceForAOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	MulticastInlineDelegateProperty ZoomFOVChanged;//[Size: 1]
	enum CachedAimMode;//[Offset: 0x440, Size: 1]
	float DefaultAimCameraTransitionTime;//[Offset: 0x444, Size: 1]
	float AimOverShoulderCameraTransitionTime;//[Offset: 0x448, Size: 1]
	float AimDownSightsCameraTransitionTime;//[Offset: 0x44c, Size: 1]
	MulticastInlineDelegateProperty OnWeaponComponentAimModeChangedDel;//[Size: 1]
	KSWeaponAttachmentCosmeticInst*[] AttachmentCosmetics;//[Offset: 0x4a8, Size: 1]
	enum SkinObjectParenting;//[Offset: 0x4b8, Size: 1]
	int ActiveIndex;//[Offset: 0x4bc, Size: 1]
	MulticastInlineDelegateProperty OnEquipmentBecomeActiveDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentEndActiveDel;//[Size: 1]
	AnimMontage* ActiveReloadMontage;//[Offset: 0x520, Size: 1]
	AnimMontage*[] ActiveWeaponReloadMontages;//[Offset: 0x528, Size: 1]
	bool bMultiStageReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	bool bIsRevolver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x539, Size: 1]
	bool PostReloadTimerIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53a, Size: 1]
	bool EnableAimsDuringReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53b, Size: 1]
	bool bShieldIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c, Size: 1]
	FName MuzzleSocketKeyword;//[Offset: 0x540, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0x578, Size: 1]
	DataTableInfo[] BaseAssetDataTables;//[Offset: 0x588, Size: 1]
	bool bCreateDataTableForLegacyAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	DynamicSkinTable* AssetDataTableManager;//[Offset: 0x5a0, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x5a8, Size: 1]
	bool bSkinObjectAdded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0, Size: 1]
	Vector ViewModelScale;//[Offset: 0x5c8, Size: 1]
	Rotator ViewModelRotation;//[Offset: 0x5d4, Size: 1]
	Vector ViewModelLocationOffset;//[Offset: 0x5e0, Size: 1]
	float WeaponCombatStateCooldown;//[Offset: 0x5f0, Size: 1]
	float ForceNonCombatShotBlockDistance;//[Offset: 0x5f4, Size: 1]
	class KSWeaponTargetingModule* TargetingVisualizationClass;//[Offset: 0x5f8, Size: 1]
	bool bIsTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	bool bForcingTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 1]
	KSWeaponTargetingModule* TargetingVisualizerInstance;//[Offset: 0x608, Size: 1]
	ForceFeedbackEffect* VibrationEffect;//[Offset: 0x610, Size: 1]
	ForceFeedbackEffect* AlternateVibrationEffect;//[Offset: 0x618, Size: 1]
	ForceFeedbackAttenuation* AlternativeVibrationAttenuation;//[Offset: 0x620, Size: 1]
	RecoilProfileAsset* RecoilProfileAsset;//[Offset: 0x628, Size: 1]
	bool bIsMeleeWeaponComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x630, Size: 1]
	FString VFXSpangKeywordPrefix;//[Offset: 0x638, Size: 1]
	FString DecalSpangKeywordPrefix;//[Offset: 0x648, Size: 1]
	FName VFXSpangDefaultKeyword;//[Offset: 0x658, Size: 1]
	<byte,FName> VFXSpangKeywordMap;//[Offset: 0x660, Size: 1]
	FName DecalSpangDefaultKeyword;//[Offset: 0x6b0, Size: 1]
	<byte,FName> DecalSpangKeywordMap;//[Offset: 0x6b8, Size: 1]
	bool UsingAccuracyLoss();// 0x288bd70
	void UpdateOwnerLocallyViewed(bool bIsLocallyViewed);// 0x288bce0
	void UpdateAimDownSightsBlurValues();// 0x2d74e00
	void TriggerEngagement();// 0x288bcc0
	void TriggerCombat();// 0x288bca0
	void TickViewerAim(float DeltaTime);// 0x288bc20
	void TickNonViewerAim(float DeltaTime);// 0x288bba0
	void StopDefaultAim();// 0x288bb80
	void StopAimOverShoulder();// 0x1fcb320
	void StopAimDownSights();// 0x288bb60
	void StopAimAlternate();// 0x1f6ece0
	void StartDefaultAim();// 0x288bb40
	void StartAimOverShoulder();// 0x1fcb6e0
	void StartAimDownSights();// 0x288bb20
	void StartAimAlternate();// 0x1fb3ad0
	bool ShouldBroadcastWeaponStateChange(KSWeaponDataUpdateContainer OldState, KSWeaponDataUpdateContainer NewState, out bool bReliable);// 0x288ba00
	void SetWeaponVisibility(bool Visible);// 0x288b970
	void SetWeaponMeshCollisionEnabled(byte NewType);// 0x288b8f0
	void SetViewModelScale(Vector newVal);// 0x288b870
	void SetViewModelRotation(Rotator newVal);// 0x288b7f0
	void SetViewModelLocationOffset(Vector newVal);// 0x288b770
	void SetGamepadTriggerEffect(byte TriggerType, byte TriggerStartPosition, byte TriggerStopPosition, byte TriggerHapticStrength);// 0x288b5a0
	void SaveDropMagValues();// 0x2d74e00
	void RestoreDropMagValues();// 0x2d74e00
	void ReportNewWeaponLowerAlpha(float NewAlpha, float DeltaTime, bool ForceReset);// 0x2d74e00
	void PostCreateWeaponSkeletalMeshComponent(KSWeaponSkeletalMeshComponent* CreatedWeaponSkeletalMeshComponent);// 0x1f66cc0
	void OverrideDropMagValues(Transform transformOverride, Vector velocityOverride, bool ForceDisableMagDrop, bool DropMultipleMags);// 0x2d74e00
	void OnWeaponStateChanged(enum OldState, enum NewState);// 0x288b430
	void OnUnsetAsActivePrimaryWeapon();// 0x26ebed0
	void OnSkyDiveStarted(KSCharacter* SkyDiver);// 0x2d74e00
	void OnSkyDiveSkipped(KSCharacter* SkyDiver);// 0x2d74e00
	void OnSkyDiveEnded(KSCharacter* SkyDiver);// 0x2d74e00
	void OnSetAsActivePrimaryWeapon();// 0x288b410
	void OnRep_WeaponState();// 0x288b3f0
	void OnRep_WeaponAsset();// 0x27475a0
	void OnRep_InitialState();// 0x288b3d0
	void OnRep_AmmoInClip(byte OldAmmoInClip);// 0x1279820
	void OnMirrorPoseChanged();// 0x2d74e00
	void OnInvalidFire();// 0x288b240
	void OnInitialize();// 0x288b220
	void OnFireWeaponFull(out const FullFireRepData Data);// 0x288b170
	void OnFireWeapon(out const AimData Aim);// 0x288b0c0
	void OnEmptyFire();// 0x27b5500
	void OnCurrentChargeUpdated();// 0x288b0a0
	void OnActiveMaterialsApplied(SkinnableSkeletalMeshComponent* SkinnableSkelComp);// 0x288b010
	void ObjectiveInteractionStart();// 0x2d74e00
	void ObjectiveInteractionEnd();// 0x2d74e00
	void NotifyStopFireReceived();// 0x2d74e00
	bool IsWeaponSilenced();// 0x288afe0
	bool IsWeaponPendingFireWithValidAmmo();// 0x288afb0
	bool IsUsingPropWeapon();// 0x288af80
	bool IsTargetingEnabled();// 0x288af50
	bool IsTargeting();// 0x288af20
	bool IsReloading();// 0x288aef0
	bool IsPrimaryActiveWeapon();// 0x288aec0
	bool IsModelViewer();// 0x288aea0
	bool IsClipEmpty();// 0x288ae70
	bool IsAimingOverShoulder();// 0x288ae00
	bool IsAimingDownSights();// 0x288add0
	bool IsAimingAlternate();// 0x288ada0
	bool IsAiming();// 0x288ad70
	bool IsAimedAtFriendly();// 0x288ad40
	bool IsAimedAtEnemy();// 0x288ad10
	bool IsActiveWeapon();// 0x288ace0
	void InitiateMountedWeaponState();// 0x2d74e00
	enum GetWeaponState();// 0x27fc630
	void GetWeaponSkeletalMeshComponents(out KSWeaponSkeletalMeshComponent*[] OutKSWeaponSkeletalMeshComponents);// 0x288aa30
	KSWeaponSkeletalMeshComponent* GetWeaponSkeletalMeshComponentNew();// 0x288a970
	KSWeaponSkeletalMeshComponent* GetWeaponSkeletalMeshComponentAtIndex(int Index);// 0x288a9a0
	SkeletalMeshComponent* GetWeaponSkeletalMeshComponent();// 0x288a970
	Vector GetWeaponCameraOffset();// 0x288a930
	KSWeaponAsset* GetWeaponAsset();// 0x288a910
	AnimInstance* GetWeaponAnimInstance();// 0x288a8e0
	Vector GetViewModelScale();// 0x288a8b0
	Rotator GetViewModelRotation();// 0x288a880
	Vector GetViewModelLocationOffet();// 0x288a850
	ForceFeedbackEffect* GetVibrationEffect();// 0x288a820
	static FName GetVFXSpangKeyword(byte SurfaceType);// 0x288a700
	class KSWeaponTargetingModule GetTargetingVisualizationClass();// 0x288a6e0
	KSWeaponTargetingModule* GetTargetingModuleInstance();// 0x26cbb20
	int GetShotPenetrationCount();// 0x288a5d0
	FName GetScopeSocketName();// 0x288a590
	float GetRetrieveTime();// 0x288a560
	float GetRequiredCharge();// 0x288a530
	void GetReloadTimes(out float PreReloadScaled, out float FirstShotPreReloadScaled, out float PostReloadScaled, out float PreReloadMultiplier, out float PostReloadMultiplier);// 0x288a330
	float GetReloadTime();// 0x288a300
	bool GetReactiveAttachmentCosmeticInstance(out KSAttachCosmeticInst_Reactive* OutWeaponReactiveCometic);// 0x288a260
	float GetPreReloadTimeScaled();// 0x288a230
	float GetPostReloadTimeScaled();// 0x288a200
	float GetPostFireTime();// 0x288a1d0
	KSWeapon* GetOwningWeapon();// 0x288a1b0
	int GetNumCharges();// 0x288a180
	FName GetMuzzleSocketName();// 0x288a140
	float GetMovementAccuracyPenalty();// 0x2889e80
	float GetMaximumCharge();// 0x288a110
	float GetMaxHipFireAccuracy();// 0x288a0e0
	float GetMaxFiringAccuracyLoss();// 0x288a0b0
	float GetMaxFiringAccuracyGain();// 0x288a080
	float GetMaxAimedFiringAccuracyGain();// 0x288a050
	float GetMaxAimedAccuracy();// 0x288a020
	float GetMagnifierValue();// 0x2889f50
	void GetLoadedAccumulatedAttachmentOverrideData(out LoadedWeaponAttachmentAnimationData OutData);// 0x2889eb0
	float GetInAirAccuracyModifier();// 0x2889e80
	float GetFirstShotReloadTimeScaled();// 0x2889d10
	float GetFiringTime();// 0x2889ce0
	float GetDefaultAimTransitionTime();// 0x2889a70
	static FName GetDecalSpangKeyword(byte SurfaceType);// 0x28899f0
	float GetDamageModifier(class DamageType DamageTypeClass);// 0x2889950
	float GetCurrentSpeedModifier();// 0x2889910
	enum GetCurrentFireRateState();// 0x28898f0
	float GetCurrentFireRate();// 0x28898c0
	float GetCurrentCharge();// 0x2889890
	float GetCurrentAccuracy();// 0x2889860
	float GetCrouchAccuracyModifier();// 0x2889830
	float GetCooldownTimeRemaining();// 0x2889800
	byte GetClipSize();// 0x28897d0
	float GetChargeRateMultiplier();// 0x28897a0
	KSWeaponSkeletalMeshComponent* GetBestWeaponSkeletalMeshComponent();// 0x2889750
	float GetBaseRetrieveTime();// 0x2889720
	float GetBaseReloadTime();// 0x28896f0
	float GetBaseFiringTime();// 0x28896c0
	float GetBaseAccuracy();// 0x2889690
	void GetAttachments(out KSWeaponAttachment*[] OutWeaponAttachments);// 0x28895e0
	void GetAttachmentCosmeticInstances(out KSWeaponAttachmentCosmeticInst*[] OutWeaponAttachmentCosmetics);// 0x2889530
	SkeletalMeshComponent*[] GetAncillaryMeshes();// 0x2889410
	int GetAmmoInOwnerInventory();// 0x28893e0
	byte GetAmmoInClip();// 0x28893b0
	ForceFeedbackEffect* GetAlternativeVibrationEffect();// 0x2889380
	ForceFeedbackAttenuation* GetAlternativeVibrationAttenuation();// 0x2889350
	float GetAimOverShoulderTransitionTime();// 0x2889320
	float GetAimOverShoulderAccuracyModifier();// 0x28892f0
	enum GetAimMode();// 0x28892c0
	float GetAimDownSightsTransitionTime();// 0x2889290
	float GetAdjustedRetrieveRate();// 0x2889260
	float GetAdjustedReloadRate();// 0x2889230
	float GetAdjustedFiringRate();// 0x2889200
	int GetActiveIndex();// 0x28891e0
	float GetAccuracyReturnRate();// 0x28891b0
	float GetAccuracyReturnDelay();// 0x2889180
	float GetAccuracyLossPerShot();// 0x2889150
	float GetAccuracyGainPerShot();// 0x2889120
	float GetAccuracyDecayRate();// 0x28890f0
	static FName GenerateSurfaceBasedKeyword(FString Prefix, byte SurfaceType);// 0x2889010
	void ForceTargeting();// 0x2888ff0
	void ForceRetrieveWeapon();// 0x2d74e00
	void ForceRetrieveState();// 0x2d74e00
	void ForceHolsterWeapon();// 0x2d74e00
	void ForceAttachWeaponToHolsterSocket();// 0x2d74e00
	void ForceAttachWeaponToActiveSocket();// 0x2d74e00
	void ForceAimUpdate();// 0x2888fd0
	void EventUpdateOwnerLocallyViewed(bool bIsLocallyViewed);// 0x2d74e00
	float EvaluateWeaponLowering(float DeltaTime);// 0x2888f40
	void EndMountedWeaponState();// 0x2d74e00
	void EndForcedTargeting();// 0x2888f20
	void DropMagazine(const int meshToDropFrom);// 0x2d74e00
	void DisableGamepadTriggerEffect();// 0xd94a20
	static void DisableAllGamepadTriggerEffects();// 0x2888f00
	void DetatchWeaponSkeletalMeshComponentAttachedChildren();// 0x2888ee0
	bool CanUseCombatState(enum TestState);// 0x2888e50
	bool CanReceiveAttachment(const KSWeaponAttachment* InAttachment, out GameplayTagContainer AvailableAttachPoints);// 0x2888d40
	bool CanLowerWeaponNow();// 0x2888d10
	void CancelReloadCosmetic();// 0x2d74e00
	int CalcAmmoToBeReloaded();// 0x2888ce0
	void BroadcastWeaponStateChange(uint32 BroadcastId, KSWeaponDataUpdateContainer NewState);// 0x2888c10
	void BroadcastReliableWeaponStateChange(uint32 BroadcastId, KSWeaponDataUpdateContainer NewState);// 0x2888b40
	void BroadcastReliablePostReload(uint32 BroadcastId, byte InAmmoInClip);// 0x2888a70
	void BroadcastReliablePostFireWithAmmo(uint32 BroadcastId, byte InAmmoInClip);// 0x28889a0
	void BroadcastReliableEmptyFire(uint32 BroadcastId);// 0x2888910
	void BroadcastReliableAmmoChange(uint32 BroadcastId, byte InAmmoInClip, bool bBonusAmmo);// 0x2888810
	void BroadcastReliableAimedPostFireWithAmmo(uint32 BroadcastId, const AimData Aim, byte InAmmoInClip);// 0x28886e0
	void BroadcastReliableAimedPostFireFull(uint32 BroadcastId, const FullFireRepData Data);// 0x28885f0
	void BroadcastReliableAimedPostFire(uint32 BroadcastId, const AimData Aim);// 0x2888510
	void BroadcastPostReload(uint32 BroadcastId, byte InAmmoInClip);// 0x2888440
	void BroadcastPostFireWithAmmo(uint32 BroadcastId, byte InAmmoInClip);// 0x2888370
	void BroadcastFullyCharged(float Timestamp, float CurrentCharge);// 0x28882a0
	void BroadcastEmptyFire(uint32 BroadcastId);// 0x2888210
	void BroadcastCurrentFireRateStateHasChanged(enum State, float Timestamp, float PostFireTime);// 0x2888100
	void BroadcastChargeMethodValuesUpdated(float NewMaxCharge, float CurrentCharge, float Timestamp);// 0x2887ff0
	void BroadcastChargeConsumed(float Timestamp, float CurrentCharge);// 0x2887f20
	void BroadcastAmmoChange(uint32 BroadcastId, byte InAmmoInClip, bool bBonusAmmo);// 0x2887e20
	void BroadcastAimedPostFireWithAmmo(uint32 BroadcastId, const AimData Aim, byte InAmmoInClip);// 0x2887cf0
	void BroadcastAimedPostFireFull(uint32 BroadcastId, const FullFireRepData Data);// 0x2887c00
	void BroadcastAimedPostFire(uint32 BroadcastId, const AimData Aim);// 0x2887b20
	void BlueprintPrepareKillCamPlayback();// 0x2d74e00
	void BlueprintPersistentCosmeticsUpdate();// 0x2d74e00
	void BlueprintFinishKillCamPlayback();// 0x2d74e00
	void BlueprintFillLegacyDataTable(DataTable* LegacyDataTable);// 0x2d74e00
	void AimDownSightsCheckpoint();// 0x285fa30

--------------------------------
Class: KSWeaponDataUpdateContainer
	bool bChangeWeaponState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum WeaponState;//[Offset: 0x1, Size: 1]
	bool bChangeAimMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	enum AimMode;//[Offset: 0x3, Size: 1]

--------------------------------
Class: KSWeaponSkeletalMeshComponent.KSSkeletalMeshComponent.SkinnableMergedMeshComponent.SkinnableSkeletalMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bApplySkeletalMeshBoundsParameterToMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda0, Size: 1]
	FName SkeletalMeshBoundsParameterName;//[Offset: 0xda4, Size: 1]
	bool bApplySkeletalLengthParameterToMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdac, Size: 1]
	FName SkeletalMeshLengthParameterName;//[Offset: 0xdb0, Size: 1]
	bool bApplySkeletalWidthParameterToMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb8, Size: 1]
	FName SkeletalMeshWidthParameterName;//[Offset: 0xdbc, Size: 1]
	bool bApplySkeletalHeightParameterToMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc4, Size: 1]
	FName SkeletalMeshHeightParameterName;//[Offset: 0xdc8, Size: 1]

--------------------------------
Class: KSWeaponMeshInfo
	SkeletalMesh* SkeletalMesh;//[Offset: 0x0, Size: 1]
	FName SkeletalMeshOverrideKeyword;//[Offset: 0x8, Size: 1]
	bool bLoadWeaponSkeletalMeshComponentOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bAllowMeshCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]
	FName[] KeywordsForCompositingMesh;//[Offset: 0x18, Size: 1]
	class AnimInstance* AnimInstance;//[Offset: 0x28, Size: 1]
	FName AnimInstanceOverrideKeyword;//[Offset: 0x30, Size: 1]
	enum MeshComponentVisibilityBasedAnimTickOption;//[Offset: 0x38, Size: 1]
	FName PhysicsAssetOverrideKeyword;//[Offset: 0x3c, Size: 1]
	PhysicsAsset* PhysicsAsset;//[Offset: 0x48, Size: 1]
	FName WeaponSkeletalMeshCollisionProfileName;//[Offset: 0x50, Size: 1]
	enum WeaponAttachType;//[Offset: 0x58, Size: 1]
	FName EquipSocketOverride;//[Offset: 0x5c, Size: 1]
	FName MeshNeedsCPUAccessKeyword;//[Offset: 0x64, Size: 1]

--------------------------------
Class: AncillaryWeaponMeshInfo
	SkeletalMesh* Mesh;//[Offset: 0x0, Size: 1]
	FName DefaultAttachSocket;//[Offset: 0x8, Size: 1]
	FName DefaultDetachSocket;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSWeaponAttachmentCosmeticInst.KSEquipmentCosmeticComponent.ActorComponent.Object
	DataTable* DefaultAssetDataTable;//[Offset: 0x138, Size: 1]
	int DefaulAssetDataTablePriority;//[Offset: 0x140, Size: 1]
	KSWeaponAttachmentSkinDetails* SkinDetailsPtr;//[Offset: 0x148, Size: 1]
	bool bShouldOverrideDropMagOnParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	Transform DropMagSpawnTransformOverride;//[Offset: 0x190, Size: 1]
	Vector DropVelocityOverride;//[Offset: 0x1c0, Size: 1]
	bool bDisableMagDropOnParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc, Size: 1]
	bool bDropMultipleMags;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd, Size: 1]
	KSWeaponAttachment* AttachmentAsset;//[Offset: 0x1d0, Size: 1]
	GameplayTag AttachPoint;//[Offset: 0x1d8, Size: 1]
	KSWeaponComponent* ParentComponent;//[Offset: 0x1e0, Size: 1]
	KSEquipmentId ParentEquipmentId;//[Offset: 0x1e8, Size: 1]
	KSWeaponAsset* ParentWeaponAsset;//[Offset: 0x1f0, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 1]
	void OnRep_ParentEquipmentId();// 0x27475a0
	void OnRep_AttachPoint();// 0x27475a0
	void OnRep_AttachmentAsset();// 0x27475a0
	void OnParentWeaponComponentInitialized();// 0x1f6ead0
	void OnParentWeaponComponentCosmeticUpdate();// 0x2881080
	void OnComponentCosmeticUpdate(KSWeaponComponent* InComponent);// 0x2881000
	bool IsInitialized();// 0x2880fe0
	KSWeaponComponent* GetParentComponent();// 0x2880e20
	bool GetLoadedMeshAnimAnimOverrideData(out LoadedWeaponAttachmentAnimationData OutData);// 0x2880ce0
	GameplayTag GetAttachPoint();// 0x2880af0
	KSWeaponAttachment* GetAttachmentAsset();// 0x2880b10
	void GetAccumulatedMeshAndAnimOverrideData(KSWeaponAsset* InWeaponAsset, out WeaponAttachmentAnimationData OutData);// 0x28809e0
	void EventOnInitialized();// 0x26ec1c0

--------------------------------
Class: KSWeaponAttachmentSkinDetails.PrimaryDataAsset.DataAsset.Object
	KSWeaponAsset* Weapon;//[Offset: 0x30, Size: 1]
	class KSWeaponAttachmentCosmeticInst* AttachmentCosmetic;//[Offset: 0x58, Size: 1]
	DataTableInfo[] AssetOverrideTables;//[Offset: 0x80, Size: 1]

--------------------------------
Class: KSWeaponAttachment.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSWeaponAttachmentInstance* FunctionalClass;//[Offset: 0x280, Size: 1]
	class KSWeaponAttachmentCosmeticInst* CosmeticClass;//[Offset: 0x2a8, Size: 1]
	bool bRequiresAttachPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	GameplayTagContainer ValidAttachPoints;//[Offset: 0x2d8, Size: 1]
	KSAttachmentCompatRules* WeaponCompatibilityRules;//[Offset: 0x2f8, Size: 1]
	GameplayTagContainer CompatibleWeaponTypes;//[Offset: 0x300, Size: 1]
	bool bShouldBeInAttachmentCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	AttachmentCollection* GlobalWeaponAttachmentCollection;//[Offset: 0x328, Size: 1]
	bool RequiresAttachPoint();// 0x287d4e0
	void GetValidAttachPoints(out GameplayTagContainer OutAttachPoints);// 0x287d240
	KSWeaponAsset* GetSpecificCompatibleWeapon();// 0x287d100
	class KSWeaponAttachmentInstance GetFunctionalClass();// 0x287c7d0
	class KSWeaponAttachmentCosmeticInst GetCosmeticClass();// 0x287c730
	bool CheckCompatibilityRules(const KSWeaponAsset* InWeaponAsset);// 0x287c4b0
	bool CanAttachTo(const KSWeapon* InWeapon, out GameplayTagContainer AvailableAttachPoints);// 0x287c370

--------------------------------
Class: KSWeaponAttachmentInstance.ActorComponent.Object
	KSWeapon* WeaponOwner;//[Offset: 0xd0, Size: 1]
	KSWeaponAttachmentCosmeticInst* AttachmentCosmeticComponent;//[Offset: 0xd8, Size: 1]
	KSEquipRepInfo AttachPoint;//[Offset: 0xf8, Size: 1]
	KSWeaponAttachment* AttachmentAsset;//[Offset: 0x120, Size: 1]
	bool bPersistsOnWeaponDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	void SetPersistsOnWeaponDrop(bool bEnable);// 0x288b6e0
	void OnUnattached();// 0x1f73ab0
	void OnRep_AttachPoint();// 0x2881080
	void OnRep_AttachmentAsset();// 0x1f6ead0
	void OnAttached();// 0x1f6ea30
	bool IsAttached();// 0x288ae30
	bool GetPersistsOnWeaponDrop();// 0x27583f0
	KSWeapon* GetOwningWeapon();// 0x273e9a0
	GameplayTag GetAttachPoint();// 0x28894d0
	KSWeaponAttachment* GetAttachmentAsset();// 0x2889510

--------------------------------
Class: KSEquipRepInfo
	bool NoEquipPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	GameplayTag EquipPoint;//[Offset: 0x4, Size: 1]
	uint32 UpdateId;//[Offset: 0xc, Size: 1]
	KSEquipmentId ComponentId;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSEquipmentId
	enum Type;//[Offset: 0x0, Size: 1]
	uint16 EquipmentIdNumber;//[Offset: 0x2, Size: 1]

--------------------------------
Class: GameplayTagContainer
	GameplayTag[] GameplayTags;//[Offset: 0x0, Size: 1]
	GameplayTag[] ParentTags;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSAttachmentCompatRules.Object
	bool IsWeaponAssetCompatible(const KSWeaponAsset* InWeaponAsset);// 0x26e36e0

--------------------------------
Class: AttachmentCollection.ItemCollection.PrimaryDataAsset.DataAsset.Object
	FText AttachmentCollectionName;//[Offset: 0x98, Size: 1]
	FText AttachmentCollectionDescription;//[Offset: 0xb0, Size: 1]
	void GetCompatibleAttachmentsForWeaponType(out const GameplayTag WeaponType, out KSWeaponAttachment*[] OutCompatibleAttachments);// 0x26af6f0

--------------------------------
Class: ItemCollection.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x30, Size: 1]
	GameplayTagQuery CollectionQuery;//[Offset: 0x40, Size: 1]
	FName PrimaryAssetType;//[Offset: 0x88, Size: 1]

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0, Size: 1]
	int ChunkId;//[Offset: 0x4, Size: 1]
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	enum CookRule;//[Offset: 0x9, Size: 1]

--------------------------------
Class: LoadedWeaponAttachmentAnimationData
	SkeletalMesh* WeaponAttachmentMesh;//[Offset: 0x0, Size: 1]
	AnimSequence* WeaponAttachmentSequence;//[Offset: 0x8, Size: 1]
	AnimMontage* Player3PHolsterMontage;//[Offset: 0x10, Size: 1]
	AnimMontage* Player3PRetrieveMontage;//[Offset: 0x18, Size: 1]
	AnimMontage* Player3PFireMontage;//[Offset: 0x20, Size: 1]
	AnimMontage* Player3PReloadMontage;//[Offset: 0x28, Size: 1]
	AimOffsetBlendSpace* Player3PStandingAimOffset;//[Offset: 0x30, Size: 1]
	AimOffsetBlendSpace* Player3PCrouchedAimOffset;//[Offset: 0x38, Size: 1]
	BlendSpace* Player3PStandingBlendSpace;//[Offset: 0x40, Size: 1]
	BlendSpace* Player3PCrouchedBlendSpace;//[Offset: 0x48, Size: 1]
	AnimSequence* Player3PStandingIdleSequence;//[Offset: 0x50, Size: 1]
	AnimSequence* Player3PCrouchedIdleSequence;//[Offset: 0x58, Size: 1]
	AnimMontage* Player1PFireMontage;//[Offset: 0x60, Size: 1]
	BlendSpace* Player1PStandingBlendSpace;//[Offset: 0x68, Size: 1]
	BlendSpace* Player1PCrouchedBlendSpace;//[Offset: 0x70, Size: 1]
	AimOffsetBlendSpace* Player1PStandingAimOffset;//[Offset: 0x78, Size: 1]
	AnimMontage* Player1PRetrieveMontage;//[Offset: 0x80, Size: 1]
	AnimMontage* Player1PReloadMontage;//[Offset: 0x88, Size: 1]
	class CameraShake* Player1PCameraShake;//[Offset: 0x90, Size: 1]
	class CameraShake* Player1PADSCameraShake;//[Offset: 0x98, Size: 1]
	AnimSequence* Player1PAdditiveStandGunPose;//[Offset: 0xa0, Size: 1]
	AnimSequence* Player1PAdditiveCrouchGunPose;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: WeaponAttachmentAnimationData.TableRowBase
	bool bUseDefaultIfNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x10, Size: 1]
	SkeletalMesh* WeaponAttachmentMesh;//[Offset: 0x38, Size: 1]
	AnimSequence* WeaponAttachmentSequence;//[Offset: 0x60, Size: 1]
	AnimMontage* Player3PHolsterMontage;//[Offset: 0x88, Size: 1]
	AnimMontage* Player3PRetrieveMontage;//[Offset: 0xb0, Size: 1]
	AnimMontage* Player3PFireMontage;//[Offset: 0xd8, Size: 1]
	AnimMontage* Player3PReloadMontage;//[Offset: 0x100, Size: 1]
	AimOffsetBlendSpace* Player3PStandingAimOffset;//[Offset: 0x128, Size: 1]
	AimOffsetBlendSpace* Player3PCrouchedAimOffset;//[Offset: 0x150, Size: 1]
	BlendSpace* Player3PStandingBlendSpace;//[Offset: 0x178, Size: 1]
	BlendSpace* Player3PCrouchedBlendSpace;//[Offset: 0x1a0, Size: 1]
	AnimSequence* Player3PStandingIdleSequence;//[Offset: 0x1c8, Size: 1]
	AnimSequence* Player3PCrouchedIdleSequence;//[Offset: 0x1f0, Size: 1]
	AnimMontage* Player1PFireMontage;//[Offset: 0x218, Size: 1]
	BlendSpace* Player1PStandingBlendSpace;//[Offset: 0x240, Size: 1]
	BlendSpace* Player1PCrouchedBlendSpace;//[Offset: 0x268, Size: 1]
	AimOffsetBlendSpace* Player1PStandingAimOffset;//[Offset: 0x290, Size: 1]
	AnimMontage* Player1PRetrieveMontage;//[Offset: 0x2b8, Size: 1]
	AnimMontage* Player1PReloadMontage;//[Offset: 0x2e0, Size: 1]
	class CameraShake* Player1PCameraShake;//[Offset: 0x308, Size: 1]
	class CameraShake* Player1PADSCameraShake;//[Offset: 0x330, Size: 1]
	AnimSequence* Player1PAdditiveStandGunPose;//[Offset: 0x358, Size: 1]
	AnimSequence* Player1PAdditiveCrouchGunPose;//[Offset: 0x380, Size: 1]

--------------------------------
Class: KSWeaponTargetingModule.Object
	TargetingModuleTickFunction TargetingTick;//[Offset: 0x28, Size: 1]
	bool bAimedAtEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	bool bAimedAtFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	int TargetingIndex;//[Offset: 0x5c, Size: 1]
	FName ModeKey;//[Offset: 0x60, Size: 1]
	Transform OverriddenOriginTransform;//[Offset: 0x70, Size: 1]
	Transform OverriddenOriginTransformOffset;//[Offset: 0xa0, Size: 1]
	bool bOverrideOriginTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	bool bCookTimeAffectsVisuals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1, Size: 1]
	FName AimPostProcessCookTimeParameterName;//[Offset: 0xd4, Size: 1]
	MaterialInterface* AimPostProcessMaterial;//[Offset: 0xe0, Size: 1]
	MaterialInstanceDynamic* AimPostProcessMaterialInstance;//[Offset: 0xe8, Size: 1]
	KSWeaponAsset* OverriddenWeaponAsset;//[Offset: 0xf0, Size: 1]
	KSWeaponTargetingModule*[] ChildTargetingModules;//[Offset: 0xf8, Size: 1]
	float HitScanRange;//[Offset: 0x108, Size: 1]
	KSWeaponComponent* OwningWeaponComponent;//[Offset: 0x118, Size: 1]
	KSCharacter* OwningCharacter;//[Offset: 0x120, Size: 1]
	void UpdateOverriddenOriginTransformOffset(out const Transform NewOverriddenOriginTransformOffset);// 0x2895c00
	void UpdateOverriddenOriginTransform(out const Transform NewOverriddenOriginTransform);// 0x2895b10
	void UpdateCachedHoveredActor(Actor* NewCachedHoveredActor);// 0xe8dfd0
	void TickTargeting(float DeltaSeconds);// 0x2895a90
	bool ShouldShowPath();// 0x20c6240
	void SetShowPath(bool bNewShowPath);// 0x28959e0
	void SetParentTargetingModule(KSWeaponTargetingModule* NewParentTargetingModule);// 0x28958e0
	void SetOverrideOriginTransform(bool bNewOverrideOriginTransform);// 0x2895860
	void SetOverriddenWeaponAsset(KSWeaponAsset* NewOverriddenWeaponAsset);// 0x28957e0
	void SetAimPostProcessMaterialInstance(MaterialInstanceDynamic* NewAimPostProcessMaterialInstance);// 0x2895760
	void LookForHoveredActors();// 0x28956e0
	bool IsTargetingModeEnabled();// 0x2895540
	bool IsAimedAtFriendly();// 0x2895510
	bool IsAimedAtEnemy();// 0x28954e0
	KSWeaponComponent* GetWeaponComponent();// 0x27fc370
	KSWeaponAsset* GetWeaponAsset();// 0x28954b0
	int GetTargetingIndex();// 0x2895400
	KSCharacter* GetOwningCharacter();// 0x2889510
	Transform GetOverriddenOriginTransform();// 0x2895390
	Transform GetOriginTransform();// 0x2895320
	FName GetModeKey();// 0x2895300
	float GetHitScanRange();// 0x26df340
	MaterialInstanceDynamic* GetAimPostProcessMaterialInstance();// 0x28952e0
	MaterialInterface* GetAimPostProcessMaterial();// 0x27946f0
	void ExitTargetingMode();// 0x2847ca0
	void EnterTargetingMode();// 0x28952c0
	KSWeaponTargetingModule* AddChildTargetingModule(KSWeaponAsset* NewTargetingModuleWeaponAsset, int ChildTargetingIndex, bool bUsesOverrideOriginTransform, MaterialInstanceDynamic* SharedAimPostProcessMaterialInstance);// 0x2895070

--------------------------------
Class: TargetingModuleTickFunction.TickFunction

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: RecoilProfileAsset.DataAsset.Object
	RecoilProfile RecoilProfile;//[Offset: 0x30, Size: 1]
	bool DontPlayRecoilMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21c, Size: 1]

--------------------------------
Class: RecoilProfile
	RecoilInfo PelvisRecoil;//[Offset: 0x0, Size: 1]
	RecoilInfo SpineRecoil;//[Offset: 0x60, Size: 1]
	RecoilInfo NeckRecoil;//[Offset: 0xc0, Size: 1]
	RecoilInfo HandRecoil;//[Offset: 0x120, Size: 1]
	RecoilInfo RightClavicleRecoil;//[Offset: 0x180, Size: 1]
	float Spine1RecoilAlpha;//[Offset: 0x1e0, Size: 1]
	float Spine2RecoilAlpha;//[Offset: 0x1e4, Size: 1]
	float Spine3RecoilAlpha;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: RecoilInfo
	float TimeDurationPos;//[Offset: 0x0, Size: 1]
	float TimeDurationRot;//[Offset: 0x4, Size: 1]
	Vector RotAmplitude;//[Offset: 0x8, Size: 1]
	Vector RotFrequency;//[Offset: 0x14, Size: 1]
	RecoilParams RotParams;//[Offset: 0x20, Size: 1]
	Vector LocAmplitude;//[Offset: 0x30, Size: 1]
	Vector LocFrequency;//[Offset: 0x3c, Size: 1]
	RecoilParams LocParams;//[Offset: 0x48, Size: 1]
	float BlendInTime;//[Offset: 0x58, Size: 1]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 1]
	bool Mirrored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 1]

--------------------------------
Class: RecoilParams
	Vector PhaseOffset;//[Offset: 0x0, Size: 1]
	byte X;//[Offset: 0xc, Size: 1]
	byte Y;//[Offset: 0xd, Size: 1]
	byte Z;//[Offset: 0xe, Size: 1]

--------------------------------
Class: FullFireRepData
	AimData Aim;//[Offset: 0x0, Size: 1]
	bool bIgnoreExtraData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	RandomStream RandomStream;//[Offset: 0x54, Size: 1]
	float Accuracy;//[Offset: 0x5c, Size: 1]
	byte AmmoAfterThisShot;//[Offset: 0x60, Size: 1]
	bool bIgnoreAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 1]

--------------------------------
Class: AimData
	Vector_NetQuantize10 StartTrace;//[Offset: 0x0, Size: 1]
	Vector_NetQuantizeNormal Direction;//[Offset: 0xc, Size: 1]
	Vector_NetQuantize10 ViewPoint;//[Offset: 0x18, Size: 1]
	enum AimDataMode;//[Offset: 0x24, Size: 1]
	Vector_NetQuantize10 EndTrace;//[Offset: 0x28, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 1]
	Vector_NetQuantizeNormal[] SpreadDirections;//[Offset: 0x40, Size: 1]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0, Size: 1]
	int Seed;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSAttachCosmeticInst_Reactive.KSWeaponAttachmentCosmeticInst.KSEquipmentCosmeticComponent.ActorComponent.Object
	bool bWasInitializedOnNewWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	int DemoModePreviewStateIndex;//[Offset: 0x204, Size: 1]
	KSWeaponSkeletalMeshComponent* WeaponMesh;//[Offset: 0x218, Size: 1]
	KSWeaponSkeletalMeshComponent*[] WeaponMeshes;//[Offset: 0x220, Size: 1]
	bool bEnableDemoPreviewMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	bool bCosmeticUpdatesHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x241, Size: 1]
	enum CurrentWeaponState;//[Offset: 0x242, Size: 1]
	bool bOwningPawnInstigatedMostRecentDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x243, Size: 1]
	bool bOwningWeaponInstigatedMostRecentDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x244, Size: 1]
	float DamageWithinTimePeriod;//[Offset: 0x248, Size: 1]
	TimerHandle IdleCooldownTimer;//[Offset: 0x250, Size: 1]
	TimerHandle DamageWithinTimePeriodTimer;//[Offset: 0x258, Size: 1]
	KSWeaponAttachment_Reactive* WepAttachReactive;//[Offset: 0x260, Size: 1]
	int ProgressionIntA;//[Offset: 0x268, Size: 1]
	int ProgressionIntB;//[Offset: 0x26c, Size: 1]
	int ProgressionIntC;//[Offset: 0x270, Size: 1]
	float ProgressionFloatA;//[Offset: 0x274, Size: 1]
	float ProgressionFloatB;//[Offset: 0x278, Size: 1]
	float ProgressionFloatC;//[Offset: 0x27c, Size: 1]
	bool bTrackAIsResetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bTrackBIsResetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bTrackCIsResetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	bool bTrackAShouldResetOnNewWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 1]
	bool bTrackBShouldResetOnNewWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool bTrackCShouldResetOnNewWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 1]
	bool bTrackAIsSaveLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x286, Size: 1]
	bool bTrackBIsSaveLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x287, Size: 1]
	bool bTrackCIsSaveLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	byte PersistentCacheA;//[Offset: 0x289, Size: 1]
	byte PersistentCacheB;//[Offset: 0x28a, Size: 1]
	byte PersistentCacheC;//[Offset: 0x28b, Size: 1]
	byte PersistentFlags;//[Offset: 0x28c, Size: 1]
	void WeaponPropAssigned();// 0xe9c800
	void UnhideCosmetics();// 0x2d74e00
	void TriggerCosmetic(enum Trigger);// 0x2d74e00
	void SetSFXDampening(bool bShouldDampenSFX);// 0x2d74e00
	void SetReactiveDemoMode(bool bSet);// 0x26e41e0
	void SaveReactiveWrapProgression();// 0x2d74e00
	void SaveIntProgression(enum DataCache, int InProgression, bool IsTimeSensitive);// 0x26e40d0
	void SaveFloatProgression(enum DataCache, float InProgression, bool IsTimeSensitive);// 0x26e3fc0
	void ResetDamageWithinTimePeriod();// 0x1f6ece0
	void ResetCosmetic(enum ResetTrigger);// 0x2d74e00
	void PlayerKilled(CombatEventInfo EventInfo);// 0x26e3e80
	void PlayerDownedOrKilled(CombatEventInfo EventInfo, bool bPlayerKilled);// 0x26e3d00
	void PlayerDowned(CombatEventInfo EventInfo, int ExpBonus);// 0x26e3b80
	void OwningPawnTakeDamage(KSCharacterFoundation* Character, DamageEffect Response);// 0x26e3a40
	void OwningPawnInstigatedDamage(out const CombatEventInfo DamageInfo);// 0x26e3910
	void OwningPawnAchievedMultiDown(int DownCount);// 0x26e3880
	void OwningComponentStateChanged(const KSWeaponComponent* WeaponComponent, enum OldState, enum NewState);// 0x26e3780
	void OnWrapEventTriggered();// 0x2d74e00
	void OnLoadedReactiveWrapProgression();// 0x2d74e00
	void HideCosmetics();// 0x2d74e00
	bool GetCurrentDemoState(out ReactiveWrapMilestoneDisplay DemoState);// 0x26e2af0
	void AimModeChanged(const KSWeaponComponent* WeaponComponent, enum OldMode, enum NewMode);// 0x26e29f0

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSWeaponAttachment_Reactive.KSWeaponAttachment.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool ReactiveWrapPreviewModeActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 1]
	FText ReactiveWrapPreviewDisplayDescription;//[Offset: 0x338, Size: 1]
	FName ProgressionTrackATitle;//[Offset: 0x350, Size: 1]
	FName ProgressionTrackBTitle;//[Offset: 0x358, Size: 1]
	FName ProgressionTrackCTitle;//[Offset: 0x360, Size: 1]
	ReactiveWrapMilestoneDisplay[] ReactiveWrapPreviewParameters;//[Offset: 0x368, Size: 1]
	int StartingMilestonePreviewIndex;//[Offset: 0x378, Size: 1]
	bool UtilizeOnComponentStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 1]
	bool TriggerOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 1]
	bool ResetOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e, Size: 1]
	bool ResetOnInactive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37f, Size: 1]
	bool ResetOnHolster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool ResetOnIdleTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	float IdleResetTimerDuration;//[Offset: 0x384, Size: 1]
	bool UtilizeOnAimModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 1]
	bool HideOnADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x389, Size: 1]
	bool UtilizeOnAnyPlayerDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38a, Size: 1]
	bool TriggerOnKillingAnEnemyWithAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38b, Size: 1]
	bool TriggerOnKillingAnEnemyWithYourReactiveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c, Size: 1]
	bool ResetOnYourDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 1]
	bool UtilizeOnAnyPlayerDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 1]
	bool TriggerOnDowningAnEnemyWithAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38f, Size: 1]
	bool TriggerOnDowningAnEnemyWithYourReactiveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 1]
	bool ResetOnYourDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x391, Size: 1]
	bool UtilizeOnOwnedPawnInstigateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x392, Size: 1]
	bool TriggerOnDamagingAnEnemyWithAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x393, Size: 1]
	bool TriggerOnDamagingAnEnemyWithYourReactiveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x394, Size: 1]
	bool ResetOnOwnedPawnTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x395, Size: 1]
	bool TriggerOnDamageThresholdWithYourReactiveWeaponOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x396, Size: 1]
	float TargetTriggerDamageThreshold;//[Offset: 0x398, Size: 1]
	float DamageThresholdResetTimerDuration;//[Offset: 0x39c, Size: 1]
	bool UtilizeOnOwnedPawnTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	bool TriggerOnOwnedPawnTakeDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1, Size: 1]
	bool UtilizeOnMultiDownAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a2, Size: 1]
	bool TriggerOnMutlipleDownsWithAnything;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a3, Size: 1]
	bool TriggerOnMutlipleDownsWithYourReactiveWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 1]
	int TargetNumberOfDownsToAchieve;//[Offset: 0x3a8, Size: 1]

--------------------------------
Class: ReactiveWrapMilestoneDisplay
	FText PreviewMilestoneDescription;//[Offset: 0x0, Size: 1]
	float TargetProgressionValueA;//[Offset: 0x18, Size: 1]
	float TransitionSpeedA;//[Offset: 0x1c, Size: 1]
	float TargetProgressionValueB;//[Offset: 0x20, Size: 1]
	float TransitionSpeedB;//[Offset: 0x24, Size: 1]
	float TargetProgressionValueC;//[Offset: 0x28, Size: 1]
	float TransitionSpeedC;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: DamageEffect
	float Damage;//[Offset: 0x0, Size: 1]
	float AttemptedDamage;//[Offset: 0x4, Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 1]
	Actor* DamageCauser;//[Offset: 0x10, Size: 1]
	Vector DamageOrigin;//[Offset: 0x18, Size: 1]
	bool bArmorBroke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float ArmorDurability;//[Offset: 0x28, Size: 1]
	bool bDamageResisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bDamageReduced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bDamageShielded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	Vector RelativeImpactLocation;//[Offset: 0x30, Size: 1]
	Vector_NetQuantizeNormal RelativeImpactNormal;//[Offset: 0x3c, Size: 1]
	FName BoneName;//[Offset: 0x48, Size: 1]
	bool IsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	float ArmorDamage;//[Offset: 0x54, Size: 1]

--------------------------------
Class: KSPlayerModInstance.ActorComponent.Object
	MulticastInlineDelegateProperty OnModInstRemoved;//[Size: 1]
	bool ModOverridesActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnModTriggered;//[Size: 1]
	bool bPreventModInitialization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9, Size: 1]
	KSPlayerModAttachment*[] ModAttachments;//[Offset: 0x100, Size: 1]
	KSPlayerModManager* OwningPlayerModManager;//[Offset: 0x110, Size: 1]
	KSCharacter* OwnerCharacter;//[Offset: 0x118, Size: 1]
	KSCharacterFoundation* OwnerCharacterFoundation;//[Offset: 0x128, Size: 1]
	KSPlayerMod* ModAsset;//[Offset: 0x130, Size: 1]
	KSPlayerState* ModInstigator;//[Offset: 0x138, Size: 1]
	enum ModSource;//[Offset: 0x140, Size: 1]
	Actor* ActorInstigator;//[Offset: 0x144, Size: 1]
	int InstanceCount;//[Offset: 0x14c, Size: 1]
	int LocalInstanceCount;//[Offset: 0x150, Size: 1]
	bool bUsesDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool bDisplaysDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	bool bUseAssetDataTableManager;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 1]
	DynamicSkinTable* AssetDataTableManager;//[Offset: 0x170, Size: 1]
	DataTableInfo[] PersistentSkinDataTables;//[Offset: 0x178, Size: 1]
	DataTableInfo[] UISkinDataTables;//[Offset: 0x188, Size: 1]
	KSAISnippet[] AISnippets;//[Offset: 0x1a0, Size: 1]
	bool bLatencyElapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	KSPlayerModInputBinding[] InputActions;//[Offset: 0x1d0, Size: 1]
	bool UsesDuration();// 0x27fdc80
	void TryTransferPlayerState(KSPlayerState* OldPlayerState, KSPlayerState* NewPlayerState);// 0x27fdbb0
	bool StopAnimationFromEvent(FName AnimEventName, KSCharacterAnimInst* CharAnimInstance);// 0x2d74e00
	bool ShouldDisplayIcon(out const DamageEvent DamageEvent, enum HitLocation, out const CombatEventInfo DamageInfo);// 0x27fd9e0
	void SetActorInstigator(Actor* InActorInstigator);// 0x27fd950
	void RemovePlayerModAttachment(const KSPlayerModAttachment* Attachment);// 0x27fd8d0
	bool ReactsToAnimationEvent(FName AnimEventName, out int Priority);// 0x27fd7f0
	void PlayAnimationFromEvent(FName AnimEventName, KSCharacterAnimInst* CharAnimInstance);// 0x2d74e00
	bool OwnerIsLocal();// 0x27fd7c0
	bool OwnerHasAuthority();// 0x27fd790
	bool OverrideInteraction(out const interface classNone Interactable, out float Duration, out class KSInteractionType Type);// 0x27fd640
	void OnRep_OwnerCharacterFoundation();// 0xe9c800
	void OnRep_ModAsset();// 0x1fcb6e0
	void OnRep_InstanceCount();// 0x27fd620
	void OnOwnerDied(const KSCharacterFoundation* KillerCharacter, const KSCharacterFoundation* KilledCharacter);// 0x27fd550
	void OnNewCharacterFoundation();// 0x27fd4b0
	void OnModInitialized();// 0x2d74e00
	void OnModAttachmentRemoved(const KSPlayerModAttachment* Attachment);// 0x27fd420
	void OnModAttachmentAdded(const KSPlayerModAttachment* Attachment);// 0x27fd390
	void OnInstanceCountChanged(int DeltaInstances);// 0x27fd300
	void OnInputActionTriggered(FName ActionName, bool bReleasedAction);// 0x2d74e00
	void OnEstimatedLatencyElapsed();// 0x27fd2e0
	void OnCharacterFoundationOwnerDeath(const KSCharacterFoundation* Killer, const KSCharacterFoundation* Killed);// 0x27fd220
	float ModifyDamageTaken(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor, enum HitLocation);// 0x27fce70
	float ModifyDamageDealt(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor, enum HitLocation);// 0x27fcc90
	float ModifyArmorDamageDealt(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor, enum HitLocation);// 0x27fcab0
	void ModEventReceived(FName ModEvent);// 0x27fca20
	bool IsBonusDamage(out const DamageEvent DamageEvent, enum HitLocation);// 0x27fc930
	void InitializeMod();// 0xe9c780
	bool HasEstimatedLatencyElapsed();// 0x27fc910
	void GivePlayerModAttachment(const KSPlayerModAttachment* Attachment);// 0x27fc890
	KSVehicleBase* GetVehicleOwner();// 0x27fc860
	KSPlayerState* GetPlayerStateOwner();// 0x27fc690
	KSPlayerModManager* GetOwningPlayerModManager();// 0x26af840
	enum GetModType();// 0x27fc650
	enum GetModSource();// 0x27fc630
	KSPlayerState* GetModInstigator();// 0x27fc610
	KSPlayerMod* GetModAsset();// 0x27fc5f0
	int GetInstanceCount();// 0x27fc5d0
	void GetDuration(out float Duration, out float RemainingTime, out bool UsesDuration);// 0x27fc4a0
	int GetClampedInstanceCount();// 0x27fc390
	KSCharacter* GetCharacterOwner();// 0x27fc370
	KSCharacterFoundation* GetCharacterFoundationOwner();// 0x27fc350
	float GetArmorPassthrough(out const DamageEvent DamageEvent, enum HitLocation);// 0x27fc180
	void FinishAssetPreload();// 0x27fc160
	bool DisplaysDuration();// 0x27fc140
	void BroadcastModTriggeredInternal();// 0x1f6e6f0
	void BroadcastModTriggered();// 0x27c0460
	bool AreModOverridesActive();// 0x2782730

--------------------------------
Class: KSPlayerModAttachment.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSPlayerModAttachmentProperty[] AttachmentProperties;//[Offset: 0x280, Size: 1]
	KSPlayerModAttachmentCustomProperty[] CustomAttachmentProperties;//[Offset: 0x290, Size: 1]
	KSWeaponAttachment*[] WeaponAttachments;//[Offset: 0x2a0, Size: 1]
	KSPlayerMod* ParentMod;//[Offset: 0x2b0, Size: 1]
	FString[] GetAvailablePropertyOptions();// 0x27fc270

--------------------------------
Class: KSPlayerModAttachmentProperty.KSPlayerModAttachmentPropertyBase.KSPlayerModPropertyBase
	FName Name;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSPlayerModAttachmentPropertyBase.KSPlayerModPropertyBase
	bool bShouldShowAttachmentType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	enum ModAttachmentType;//[Offset: 0x21, Size: 1]

--------------------------------
Class: KSPlayerModPropertyBase
	bool bIsCustomProperty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int Priority;//[Offset: 0x4, Size: 1]
	enum PropertyType;//[Offset: 0x8, Size: 1]
	int int32Value;//[Offset: 0xc, Size: 1]
	float FloatValue;//[Offset: 0x10, Size: 1]
	bool boolValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	class CameraShake* CameraShakeValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSPlayerModAttachmentCustomProperty.KSPlayerModAttachmentPropertyBase.KSPlayerModPropertyBase
	FName Name;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSPlayerMod.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool bDisplayIconOnDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool bDisplayIconOnDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bDisplayIconOnElim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	KSPlayerModProperty[] ModProperties;//[Offset: 0x288, Size: 1]
	KSPlayerModCustomProperty[] CustomModProperties;//[Offset: 0x298, Size: 1]
	KSPlayerModPropertyDamageFilter[] DamagePropertyFilters;//[Offset: 0x2a8, Size: 1]
	bool bIsPerk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 1]
	bool bCanBePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b9, Size: 1]
	class KSPlayerModInstance* FunctionalClass;//[Offset: 0x2c0, Size: 1]
	bool bIsInstanceReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	int ModUnlockTier;//[Offset: 0x2ec, Size: 1]
	enum AttachmentInteraction;//[Offset: 0x2f0, Size: 1]
	bool bSingleInstanceStack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1, Size: 1]
	bool bStacksPerInstigator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f2, Size: 1]
	bool bRemoveAllInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f3, Size: 1]
	int MaxStackCount;//[Offset: 0x2f4, Size: 1]
	bool bCapInstanceCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8, Size: 1]
	enum ModType;//[Offset: 0x2f9, Size: 1]
	bool bShouldAssist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fa, Size: 1]
	bool bShouldDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fb, Size: 1]
	GameplayTagContainer EffectCategories;//[Offset: 0x300, Size: 1]
	FName[] TriggerEvents;//[Offset: 0x320, Size: 1]
	<FName,int> AnimEventPriorityMap;//[Offset: 0x330, Size: 1]
	bool bShouldLagCompensateEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	bool bGiveModToAllControlledPawns;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 1]
	bool bCanActivateOnZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 1]
	bool bCanEverActivateDuringDodgeroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x383, Size: 1]
	KSPlayerModAttachment*[] AutomaticAttachments;//[Offset: 0x388, Size: 1]
	bool bCheckInstigatorOwnership;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	bool ShouldRemoveAllInstances();// 0x27f4cc0
	bool ShouldLagCompensateEffects();// 0x27f4ca0
	bool ShouldGiveModToAllControlledPawns();// 0x27f4c80
	bool IsSingleInstanceStack();// 0x27f4b20
	bool IsPerk();// 0x27f4b00
	bool IsModTemporary();// 0x27f4ad0
	bool IsInstanceReplicated();// 0x27f4ab0
	FName[] GetTriggerEvents();// 0x27f4970
	bool GetPerkCategory(out PerkCategory* FoundPerkCategory);// 0x27f4860
	int GetModUnlockTier();// 0x27f4840
	enum GetModType();// 0x27f4820
	enum GetModInteraction();// 0x27722a0
	int GetMaxStackCount();// 0x27f4790
	class KSPlayerModInstance GetFunctionalClass();// 0x27f4730
	GameplayTagContainer GetEffectCategories();// 0x27f46b0
	FString[] GetDamagePropertyOptions();// 0x27f45d0
	FString[] GetAvailablePropertyOptions();// 0x27f45d0

--------------------------------
Class: PerkCategory.ItemCollection.PrimaryDataAsset.DataAsset.Object
	FText PerkCategoryName;//[Offset: 0x98, Size: 1]
	FText PerkCategoryDescription;//[Offset: 0xb0, Size: 1]
	class Object* AssociatedPerkTree;//[Offset: 0xc8, Size: 1]
	LinearColor ThemeColorLight;//[Offset: 0xf0, Size: 1]
	LinearColor ThemeColorDark;//[Offset: 0x100, Size: 1]
	Texture2D* PerkCategoryIcon;//[Offset: 0x120, Size: 1]
	Texture2D* GetSoftCategoryIcon();// 0x28a0890

--------------------------------
Class: KSPlayerModProperty.KSPlayerModPropertyBase
	FName Name;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSPlayerModCustomProperty.KSPlayerModPropertyBase
	FName Name;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSPlayerModPropertyDamageFilter
	FName PropertyName;//[Offset: 0x0, Size: 1]
	class DamageType[] ValidDamageTypes;//[Offset: 0x8, Size: 1]
	class DamageType[] BlacklistedDamageTypes;//[Offset: 0x18, Size: 1]
	enum[] ValidHitLocations;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSPlayerState.PGame_PlayerState.PlayerState.Info.Actor.Object
	bool bIsDemoRecording;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338, Size: 1]
	MulticastInlineDelegateProperty OnCharacterOwnerChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnBackupCharacterOwnerChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendlyFireInflicted;//[Size: 1]
	float TrackedFriendlyFireDamage;//[Offset: 0x370, Size: 1]
	bool bReverseFriendlyFireEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374, Size: 1]
	float PredictionFudge;//[Offset: 0x378, Size: 1]
	float MaxPredictionPing;//[Offset: 0x37c, Size: 1]
	MulticastInlineDelegateProperty OnTrackedActorBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnTrackedActorEnd;//[Size: 1]
	enum PlayerType;//[Offset: 0x3a0, Size: 1]
	KSTeamState* r_Team;//[Offset: 0x3a8, Size: 1]
	int BackupTeamNum;//[Offset: 0x3b8, Size: 1]
	bool bHasServerTravelled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc, Size: 1]
	MulticastInlineDelegateProperty OnKSPlayerStateTeamChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnKSPlayerStateNameChangedDel;//[Size: 1]
	KSCharacterBase* CharacterOwner;//[Offset: 0x410, Size: 1]
	KSCharacterBase* BackupCharacterOwner;//[Offset: 0x418, Size: 1]
	KSCharacterFoundation* CharacterFoundationOwner;//[Offset: 0x420, Size: 1]
	enum EliminatedState;//[Offset: 0x458, Size: 1]
	MulticastInlineDelegateProperty OnPlayerEliminated;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerInPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerLeftPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerKilled;//[Size: 1]
	bool bDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a0, Size: 1]
	MulticastInlineDelegateProperty OnPlayerDownedChangedDel;//[Size: 1]
	Vector LastKnownLocation;//[Offset: 0x4b8, Size: 1]
	int LocalSideNum;//[Offset: 0x4c4, Size: 1]
	bool bUIRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool bMarkedUIIrrelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	SerializedMctsNetId r_ReplicatedNetId;//[Offset: 0x4d0, Size: 1]
	MulticastInlineDelegateProperty OnRespawnTicketsChanged;//[Size: 1]
	int RespawnTickets;//[Offset: 0x500, Size: 1]
	bool bIsPendingRepossession;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	KSTimerComponent* RespawnTimer;//[Offset: 0x508, Size: 1]
	KSTimerComponent* DisallowGiveUpTimer;//[Offset: 0x510, Size: 1]
	MulticastInlineDelegateProperty OnRespawnTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnTimerComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnDisallowGiveUpTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnDisallowGiveUpTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnDisallowGiveUpTimerComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnMultiDownAchievedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnMultiDownAchievedWithDataDel;//[Size: 1]
	int Kills;//[Offset: 0x5c0, Size: 1]
	int deaths;//[Offset: 0x5c4, Size: 1]
	int Assists;//[Offset: 0x5c8, Size: 1]
	int downs;//[Offset: 0x5cc, Size: 1]
	int DownSpree;//[Offset: 0x5d0, Size: 1]
	int Revives;//[Offset: 0x5d4, Size: 1]
	int eliminations;//[Offset: 0x5d8, Size: 1]
	int Headshots;//[Offset: 0x5dc, Size: 1]
	int Hacks;//[Offset: 0x5e0, Size: 1]
	int Dehacks;//[Offset: 0x5e4, Size: 1]
	int MitigatedDamageDealt;//[Offset: 0x5e8, Size: 1]
	int MitigatedDamageReceived;//[Offset: 0x5ec, Size: 1]
	int RawDamageDealt;//[Offset: 0x5f0, Size: 1]
	int RawDamageReceived;//[Offset: 0x5f4, Size: 1]
	int RoundsPlayed;//[Offset: 0x5f8, Size: 1]
	int TimeAlive;//[Offset: 0x5fc, Size: 1]
	int timePlayed;//[Offset: 0x600, Size: 1]
	MulticastInlineDelegateProperty OnUIRelevantPlayerStateChangedDel;//[Size: 1]
	KSScoreChangeList ScoreChangeList;//[Offset: 0x630, Size: 1]
	KSPlayerMatchStats* PreviewRecordedStats;//[Offset: 0x6c0, Size: 1]
	int Money;//[Offset: 0x6c8, Size: 1]
	int LastMoney;//[Offset: 0x6cc, Size: 1]
	MulticastInlineDelegateProperty OnMoneyEarned;//[Size: 1]
	MulticastInlineDelegateProperty OnMoneyChanged;//[Size: 1]
	bool bMoneyGivesCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f0, Size: 1]
	int cash;//[Offset: 0x6f4, Size: 1]
	int LastCash;//[Offset: 0x6f8, Size: 1]
	bool bHasReceivedStartingCash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 1]
	int TotalCashEarned;//[Offset: 0x700, Size: 1]
	int LastCashEarned;//[Offset: 0x704, Size: 1]
	int InitialCash;//[Offset: 0x708, Size: 1]
	MulticastInlineDelegateProperty OnCashChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCashEarnedChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCashChangeEvent;//[Size: 1]
	KSCashChangeList CashChangeList;//[Offset: 0x740, Size: 1]
	MulticastInlineDelegateProperty OnItemPickedUpBySelf;//[Size: 1]
	MulticastInlineDelegateProperty OnItemPickedUpByTeam;//[Size: 1]
	bool bShouldRestoreInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	KSPlayerStateAssistant* PlayerStateAssistant;//[Offset: 0x808, Size: 1]
	KSPlayerMod*[] ModsToRestoreOnReactivated;//[Offset: 0x810, Size: 1]
	MulticastInlineDelegateProperty OnPlayerModCharge;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerModActivationChange;//[Size: 1]
	MulticastInlineDelegateProperty OnModAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnModRemovedDel;//[Size: 1]
	KSSpecialty*[] Specialties;//[Offset: 0x890, Size: 1]
	MulticastInlineDelegateProperty OnJobChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnJobChangedWithState;//[Size: 1]
	KSJobItem* JobItem;//[Offset: 0x8c0, Size: 1]
	int JobMasteryXpLevel;//[Offset: 0x8c8, Size: 1]
	MulticastInlineDelegateProperty OnJobLoadFinishedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnJobMasteryXpLevelChanged;//[Size: 1]
	KSSkinBundle* SkinItem;//[Offset: 0x910, Size: 1]
	MulticastInlineDelegateProperty OnSkinChanged;//[Size: 1]
	KSLoadoutClass* LoadoutClass;//[Offset: 0x928, Size: 1]
	KSItemDrop*[] ItemsDroppedOnDeath;//[Offset: 0x940, Size: 1]
	KSCharacterGender Gender;//[Offset: 0x968, Size: 1]
	KSCharacterGender LocalGender;//[Offset: 0x96a, Size: 1]
	GameplayTagContainer SkinTagContainer;//[Offset: 0x970, Size: 1]
	bool bStale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8, Size: 1]
	FString[] AllyWidgetPoolName;//[Offset: 0x9b0, Size: 1]
	MulticastInlineDelegateProperty OnShopItemPurchased;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemRefunded;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemActive;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemInactive;//[Size: 1]
	MulticastInlineDelegateProperty OnPersistentPlayerDataChanged;//[Size: 1]
	bool bPollInProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa30, Size: 1]
	bool bHasVoted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa31, Size: 1]
	class KSPollBase* CurrentPollType;//[Offset: 0xa38, Size: 1]
	KSPollData CachedPollData;//[Offset: 0xa40, Size: 1]
	bool bCachedLocallyViewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa50, Size: 1]
	MulticastInlineDelegateProperty OnCharacterLocalViewChange;//[Size: 1]
	Actor*[] StimulatingObjects;//[Offset: 0xa68, Size: 1]
	KSRevealManager* RevealManager;//[Offset: 0xa78, Size: 1]
	MulticastInlineDelegateProperty OnActivityEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnCombatActivityEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetedActivityEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponActivityEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnRevealEventTriggered;//[Size: 1]
	MulticastInlineDelegateProperty OnInstigatedDamage;//[Size: 1]
	MulticastInlineDelegateProperty OnInstigatedPreDamage;//[Size: 1]
	MulticastInlineDelegateProperty OnAccoladeActivityTrigger;//[Size: 1]
	MulticastInlineDelegateProperty OnInstigatedHeal;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponReloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponFiredPreDamage;//[Size: 1]
	MulticastInlineDelegateProperty OnWeaponFiredPostDamage;//[Size: 1]
	bool bBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40, Size: 1]
	int SavedHumanPlayerId;//[Offset: 0xb44, Size: 1]
	<FName,float> ActionTimestampMap;//[Offset: 0xb48, Size: 1]
	<int64,float> LastDamagedByPlayerTimestampMap;//[Offset: 0xb98, Size: 1]
	<int,int> CachedItemValueMap;//[Offset: 0xbe8, Size: 1]
	<FString,float> ActivityBehaviorCache;//[Offset: 0xc38, Size: 1]
	KSVehicleBase* VehicleOwner;//[Offset: 0xc88, Size: 1]
	MulticastInlineDelegateProperty OnCharacterFoundationPossessionChangedDel;//[Size: 1]
	bool WasPreviouslyAlive();// 0x2815fb0
	void UpdatePollVotes(KSPollData NewPollData);// 0x2815f10
	void TryToBroadCastUIRelevantInfoHasChanged();// 0x2815ef0
	void TriggerAccoladeActivityEvent(const KSAccoladeTracker* AccoladeTracker);// 0x2815e60
	bool SpendCash(int cost);// 0x2815dd0
	void SpawnedDropDestroyed(Actor* Drop);// 0x2815d50
	void SetTimestampForActionTag(out const GameplayTag ActionTag);// 0x2815cc0
	void SetTimestampForAction(out const FName ActionString);// 0x2815c30
	void SetRevealManager(KSRevealManager* NewRevealManager);// 0x2815b30
	void SetPlayerStateAssistant(KSPlayerStateAssistant* InPlayerStateAssistant);// 0x2815ab0
	void SetMoney(int NewAmount);// 0x2815a30
	void SetGiveUpEnabled(bool bAllowed);// 0x28159a0
	void SetGameShopEnabled(bool bEnable);// 0x2815910
	void SetDamageTimestamp(const int64 InPlayerId);// 0x2815890
	void SetCash(int NewAmount, FText Reason);// 0x2815770
	void SetCachedValueForKey(FString InKey, float InValue);// 0x2815690
	void SetCachedValueForItemId(int ItemId, int Value);// 0x28155d0
	void ServerPlayerProposePoll(FString PollTypeId);// 0x2815460
	void ServerPlayerCastVote(bool bVoteInFavor);// 0x28153d0
	void ServerChangeMobileArmoryLoadoutIndex(int NewArmoryLoadoutIndex);// 0x2815320
	void Server_BroadcastPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x2815500
	void RespawnTimerTick(float Seconds);// 0x28152a0
	void RespawnTimerComplete();// 0x2815280
	void RespawnTimerActive(bool bActive);// 0x28151f0
	void ResetElimination();// 0x28151d0
	bool RemoveModsOfSource(enum ModSource);// 0x2815140
	bool RemoveModInstance(KSPlayerModInstance* ModInst, bool bRemoveAll, KSCharacterFoundation* ModRecipient);// 0x2815030
	bool RemoveMod(KSPlayerMod* Mod, bool RemoveAll, KSCharacterFoundation* ModRecipient);// 0x2814f20
	void RecordPreviouslyAlive(bool PlayerAliveNow);// 0x2814e90
	void RebindRestoreMods();// 0x2814e70
	void PollEnded(KSPollResults PollResults);// 0x2814da0
	bool PlayerProposePoll(FString PollTypeId);// 0x2814cf0
	void PlayerCastVote(bool bVoteInFavor);// 0x2814c60
	void OnTeamUpdated();// 0x1fdc330
	void OnSideNumUpdated();// 0x1fdc5d0
	void OnReverseFriendlyFireEnabled();// 0x2d74e00
	void OnRep_TotalCashEarned();// 0x2814c40
	void OnRep_Specialties();// 0x2814b60
	void OnRep_SkinItem();// 0x2814c20
	void OnRep_RespawnTimer();// 0x2814c00
	void OnRep_RespawnTickets();// 0x2814bc0
	void OnRep_PlayerType();// 0x1fdc570
	void OnRep_Money();// 0x2814ba0
	void OnRep_MctsNetId();// 0x2814b80
	void OnRep_LoadoutClass();// 0x2814b60
	void OnRep_JobMasteryXpLevel();// 0x2814b40
	void OnRep_JobItem();// 0x2814b20
	void OnRep_HasVoted();// 0x2814b00
	void OnRep_Gender();// 0x2814ae0
	void OnRep_Eliminated();// 0x1fdc270
	void OnRep_Downed();// 0x1fc70b0
	void OnRep_DisallowGiveUpTimer();// 0x2814ac0
	void OnRep_CurrentPollType();// 0x2814aa0
	void OnRep_Cash();// 0x2814a80
	void OnRep_CachedPollData();// 0x2814a60
	void OnJobMasteryInventoryUpdated(out const InventoryId InventoryId);// 0x2814890
	void OnDeathDrop(KSItem* InItem, KSItemDrop* InDrop);// 0x28147d0
	void NotifyWeaponReloaded();// 0x28147a0
	void NotifyWeaponFiredPreDamage();// 0x2814770
	void NotifyWeaponFiredPostDamage();// 0x2814740
	void NotifyWeaponFired(const KSWeapon* InWeapon);// 0x2814690
	void NotifyTearGasDisorientOther(const KSCharacterFoundation* InTargetCharacter);// 0x28145e0
	void NotifySemtexStuckToPlayer(const KSCharacter* InTargetCharacter);// 0x2814530
	void NotifyScoreChange(KSScoreChangeEvent Event);// 0x2814410
	void NotifySavedTeammate();// 0x28143b0
	void NotifyRogueLinked(const KSCharacter* InTargetCharacter);// 0x2814300
	void NotifyRevivedOther(const KSCharacter* InTargetCharacter);// 0x2814250
	void NotifyRevealedOther(out const KSRevealInfo InRevealInfo);// 0x2814120
	void NotifyReplenishTriggered();// 0x28140c0
	void NotifyQuickAndQuietTriggered();// 0x2814060
	void NotifyPointScored();// 0x2814000
	void NotifyPointCaptured();// 0x2813fa0
	void NotifyPlayerHitByEMP(out const CombatEventInfo DamageInfo);// 0x2813e00
	void NotifyObjectiveInteractionCompleted();// 0x2813da0
	void NotifyMeleeWeaponThrown();// 0x2813d40
	void NotifyMedDroneReviveOther(const KSCharacter* InTargetCharacter);// 0x2813c90
	void NotifyLifedrainTriggered();// 0x2813c30
	void NotifyLeftBattleZoneCircle();// 0x2813bd0
	void NotifyInstigatedPreDamage(out const CombatEventInfo DamageInfo);// 0x2813a50
	void NotifyInstigatedHeal(const KSCharacterBase* InHealedCharacter, float HealAmount);// 0x2813970
	void NotifyInstigatedDamage(out const CombatEventInfo DamageInfo);// 0x28137f0
	void NotifyHypeMeterHealedPlayer(const KSCharacter* InTargetCharacter);// 0x2813740
	void NotifyEnemyHacked();// 0x28136e0
	void NotifyEnemyEquipmentWasEMPDisabled();// 0x2813680
	void NotifyEnemyAbilityWasEMPDisabled();// 0x2813620
	void NotifyElusiveTriggered();// 0x28135c0
	void NotifyEliminatedOther(const KSCharacter* InTargetCharacter);// 0x2813510
	void NotifyDangerCloseReviveOther(const KSCharacter* InTargetCharacter);// 0x2813460
	void NotifyCubeDisarmed();// 0x2813400
	void NotifyCubeArmed();// 0x28133a0
	void NotifyCrateOpened();// 0x2813340
	void NotifyCashEarned();// 0x28132e0
	void NotifyCashChange(KSScoreChangeEvent Event);// 0x28131c0
	void NotifyBuildDeployed(const KSWeapon* InWeapon);// 0x2813110
	void NotifyBriefcaseUsedByOther();// 0x28130b0
	void NotifyBombDisarmed();// 0x2813050
	void NotifyBombArmed();// 0x2812ff0
	void NotifyBlindedOther(const KSCharacterFoundation* InTargetCharacter);// 0x2812f40
	void NotifyAssistDownOther(const KSCharacter* InTargetCharacter);// 0x2812e90
	void NotifyAPSDestroyedProjectile();// 0x2812d30
	void NotifyActivityTick(out const GameplayTag ActivityEventTag);// 0x2812df0
	void NotifyAbilityUsed();// 0x2812d90
	void NetMulticast_BroadcastPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x2812c60
	void LoadoutSetSkin();// 0x2812c40
	void LeavePlay();// 0x2812c20
	bool IsWaitingForGiveUp();// 0x2812bf0
	bool IsUIRelevant();// 0x2812bd0
	bool IsReverseFriendlyFireEnabled();// 0x2812ba0
	bool IsRespawning();// 0x2812b70
	bool IsPollInProgress();// 0x2812b50
	bool IsPlayer();// 0x2812b20
	bool IsInPlay();// 0x2812a70
	bool IsInParty();// 0x2812a40
	bool IsIndependentHuman();// 0x2812ae0
	bool IsIndependentBot();// 0x2812aa0
	bool IsEliminated();// 0x2812a10
	bool IsDowned();// 0x28129e0
	bool IsCharacterLocallyViewed();// 0x28129b0
	bool IsBackfilling();// 0x2812990
	bool IsBackfilledHuman();// 0x2812950
	bool IsBackfilledBot();// 0x2812910
	bool IsActorStimulatingPlayer(const Actor* Actor);// 0x2812880
	bool HasRole(enum RoleToCheck);// 0x2812720
	bool HasModAny(out const KSPlayerMod*[] TestPlayerMods, const KSCharacterFoundation* ModRecipient);// 0x2812620
	bool HasMod(const KSPlayerMod* TestPlayerMod, const KSCharacterFoundation* ModRecipient);// 0x2812560
	bool GiveModInstance(KSPlayerMod* Mod, KSPlayerState* ModInstigator, out KSPlayerModInstance* Instance, bool Unique, KSCharacterFoundation* ModRecipient);// 0x28123a0
	bool GiveMod(KSPlayerMod* Mod, KSPlayerState* ModInstigator, bool Unique, enum ModSource);// 0x2812240
	void GiveCharge(float Charge);// 0x28121c0
	KSVehicleBase* GetVehicleOwner();// 0x2812160
	int GetTotalCashEarned();// 0x2812140
	float GetTimeUntilGiveUpAllowed();// 0x2812020
	bool GetTimestampForAction(out const FName ActionString, out float Timestamp);// 0x2812050
	int GetStatValue(enum Stat);// 0x2811f90
	bool GetSpecialties(out KSSpecialty*[] OutSpecialties);// 0x2811ed0
	KSSkinBundle* GetSkinItem();// 0x2811eb0
	float GetSecondsInvisible();// 0x2811e90
	int GetScore();// 0x2811e60
	int GetRevives();// 0x2811e30
	KSRevealManager* GetRevealManager();// 0x2811e10
	int GetRespawnTickets();// 0x2811df0
	float GetRemainingRespawnTime();// 0x2811dc0
	KSPlayerStateAssistant* GetPlayerStateAssistant();// 0x2811da0
	KSPlayerModManager* GetPlayerModManagerByRecipient(const KSCharacterFoundation* ModRecipient);// 0x2811d10
	KSPlayerModManager* GetPlayerModManager();// 0x2811ce0
	PUMG_PlayerInfo* GetPlayerInfo(PUMG_HUD* HUD);// 0x2811c50
	int GetPlayerId();// 0x2811c30
	KSPersistentPlayerData* GetPersistentPlayerData();// 0x2811bd0
	int GetPartySize();// 0x2811ba0
	int GetMVPScore();// 0x2811950
	bool GetModInstancesOfType(enum Type, out KSPlayerModInstance*[] OutMods);// 0x2811aa0
	bool GetModInstances(out KSPlayerModInstance*[] OutMods, const KSCharacterFoundation* ModRecipient);// 0x28119a0
	float GetMMR();// 0x2811920
	int64 GetMctsPlayerId();// 0x2811980
	bool GetLoadoutClass(out KSLoadoutClass* OutLoadoutClass);// 0x2811880
	bool GetLastTimePlayerDamagedMe(const int64 InPlayerId, out float Timestamp);// 0x28117a0
	int GetKills();// 0x2811770
	int GetJobMasteryLevel();// 0x2811740
	KSJobItem* GetJob();// 0x2811720
	KSItemDrop*[] GetItemsDroppedOnDeath();// 0x2811690
	bool GetIsPendingRepossession();// 0x2811670
	int GetInventoryItemQuantity(int ItemId);// 0x28115e0
	float GetInitialRespawnTime();// 0x28115b0
	int GetInitialCash();// 0x2811590
	int GetHeadshots();// 0x2811560
	int GetHacks();// 0x2811530
	bool GetGameModeMods(out KSModInst_Activated*[] OutMods, const KSCharacterFoundation* ModRecipient, bool bIncludeChildMods);// 0x28113f0
	int GetEliminations();// 0x28113c0
	enum GetEliminatedState();// 0x2811390
	int GetDownSpree();// 0x2811330
	int GetDowns();// 0x2811360
	float GetDistanceTravelled();// 0x27730c0
	float GetDistanceSprinted();// 0x27730a0
	float GetDistanceCrouchWalked();// 0x2811310
	int GetDehacks();// 0x28112e0
	int GetDeaths();// 0x28112b0
	float GetCurrentTimePlayed();// 0x2811280
	int GetCurrentRankedLevel();// 0x2811250
	int GetCurrentCash();// 0x2811230
	KSCharacterBase* GetCharacterOwner();// 0x28111d0
	KSCharacterFoundation* GetCharacterFoundationOwner();// 0x2811170
	float GetCachedValueForKey(FString InKey);// 0x28110c0
	int GetCachedValueForItemId(int ItemId);// 0x2811030
	<FString,float> GetBonusProgressionMultiplierFromEvents(FString Key);// 0x2810f40
	<FString,float> GetBonusProgressionMultiplierFromBoosters(FString Key);// 0x2810e50
	float GetBonusProgressionMultiplier(FString Key);// 0x2810da0
	KSCharacterBase* GetBestCharacterOwner();// 0x2810d70
	KSCharacterBase* GetBackupCharacterOwner();// 0x2810d10
	int GetAssists();// 0x2810ce0
	int GetArmoryLoadoutIndex();// 0x2810cc0
	bool GetActivatableMods(out KSModInst_Activated*[] OutMods, const KSCharacterFoundation* ModRecipient, bool bIncludeChildMods);// 0x2810b80
	void FriendlyFirePenalty(bool IsKilled, KSPlayerState* Victim);// 0x2810ac0
	void EnterPlay(bool bSkipResetEliminatedOrDownedTest, bool bSpendTicket);// 0x28109f0
	void EliminatePlayer();// 0x28109d0
	void EarnCash(int Earnings, bool bShareWithTeam, FText Reason, bool bBonus);// 0x2810810
	void DisallowGiveUpTimerTick(float Seconds);// 0x2810790
	void DisallowGiveUpTimerComplete();// 0x2810770
	void DisallowGiveUpTimerActive(bool bActive);// 0x28106e0
	void ClientPollProposalFailed();// 0x1fc3720
	void ClientNotifyFriendlyFireDamageApplied(float Amount);// 0x28105a0
	void ClientNotifyExceededReverseFriendlyFireThreshold();// 0x1fc2a70
	void ClearDamageTimestamps();// 0x2810560
	void ClaimLootItem(int LootItemId, int Quantity);// 0x28104a0
	void ChangeMoney(int Delta, FText Reason, bool bBonus);// 0x28102c0
	void ChangeArmoryLoadoutIndex(int NewArmoryLoadoutIndex);// 0x2810240
	void BroadcastPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x2810180
	void AssignModsToRestoreOnReactivation(KSPlayerMod*[] InModsToRestoreOnReactivated);// 0x2810000
	bool AnyActivatableModsActive();// 0x280ffd0
	void AddSecondsInvisible(float InSeconds);// 0x280ff50
	void AddScore(int InScore);// 0x280fec0
	void AddRevive(int Count);// 0x280fe30
	void AddKill(int Count);// 0x280fda0
	void AddHeadshot(int Count);// 0x280fd10
	void AddHack(int Count);// 0x280fc80
	void AddElimination(int Count);// 0x280fbf0
	void AddDown(int Count);// 0x280fb60
	void AddDehack(int Count);// 0x280fad0
	void AddDeath(int Count);// 0x280fa40
	void AddAssist(int Count);// 0x280f9b0
	bool ActivatableModAtIndexActive(int AbilityIndex);// 0x280f920
	bool ActivatableGameModeModAtIndexActive(int AbilityIndex);// 0x280f890

--------------------------------
Class: PGame_PlayerState.PlayerState.Info.Actor.Object
	FString EOSProductUserIdString;//[Offset: 0x320, Size: 1]

--------------------------------
Class: KSTeamState.Info.Actor.Object
	int r_TeamNum;//[Offset: 0x220, Size: 1]
	bool bTeamEliminated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x224, Size: 1]
	bool bTeamEliminatedOrDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x225, Size: 1]
	MulticastInlineDelegateProperty OnTeamEliminated;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamEliminatedOrDowned;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamMemberEliminatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamMemberDownedDel;//[Size: 1]
	KSPlayerState*[] AllMembers;//[Offset: 0x280, Size: 1]
	KSPlayerState*[] PlayerMembers;//[Offset: 0x290, Size: 1]
	MulticastInlineDelegateProperty OnMemberAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnMemberRemoved;//[Size: 1]
	KSRespawnConfig RespawnConfig;//[Offset: 0x300, Size: 1]
	int Respawns;//[Offset: 0x318, Size: 1]
	MulticastInlineDelegateProperty OnRespawnsChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnQueueChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRespawnConfigChangedDel;//[Size: 1]
	KSPlayerState*[] RespawnQueue;//[Offset: 0x350, Size: 1]
	KSPersistentPlayerData*[] PersistentRespawnQueue;//[Offset: 0x360, Size: 1]
	int Score;//[Offset: 0x370, Size: 1]
	int IntraScore;//[Offset: 0x374, Size: 1]
	int IntraScoreGoal;//[Offset: 0x378, Size: 1]
	int RoundWins;//[Offset: 0x37c, Size: 1]
	int RoundLosses;//[Offset: 0x380, Size: 1]
	MulticastInlineDelegateProperty OnScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnIntraScoreChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnIntraScoreGoalChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnObjectiveRoleChanged;//[Size: 1]
	enum TeamType;//[Offset: 0x3c8, Size: 1]
	MulticastInlineDelegateProperty OnPingAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnPingRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnPingChanged;//[Size: 1]
	KSJobSelectionComponent* JobSelectionComponent;//[Offset: 0x400, Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionComponentReady;//[Size: 1]
	int TotalKills;//[Offset: 0x460, Size: 1]
	int TotalDeaths;//[Offset: 0x464, Size: 1]
	int TotalAssists;//[Offset: 0x468, Size: 1]
	int SideNum;//[Offset: 0x46c, Size: 1]
	int LocalSideNum;//[Offset: 0x470, Size: 1]
	KSPersistentPlayerData*[] PersistentTeamMembers;//[Offset: 0x478, Size: 1]
	MulticastInlineDelegateProperty OnPersistentTeamMemberAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnPersistentTeamMemberRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamCanSurrenderChanged;//[Size: 1]
	bool bTeamCanProposeSurrender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	MultiPlayerSkinMapReplicator SkinMapReplicator;//[Offset: 0x510, Size: 1]
	bool SubtractTickets(int NumTickets);// 0x2851c40
	bool ShouldKeepTeamAlive();// 0x2788c40
	void SetTeamType(enum NewType);// 0x2851a80
	void ResetTeamElimination();// 0x2851a60
	bool RequestQueueRespawn(int Count);// 0x28519d0
	void OnTeamUpdated();// 0x1fae4d0
	void OnTeamMemberRemoved(KSPlayerState* LostMember);// 0x28518f0
	void OnTeamMemberEliminated(KSPlayerState* Member);// 0x2d74e00
	void OnTeamMemberDowned(KSPlayerState* Member);// 0x2d74e00
	void OnTeamMemberAdded(KSPlayerState* NewMember);// 0x2851860
	void OnSurrenderPollStarted();// 0xd94a20
	void OnSurrenderPollFailed();// 0xd94a20
	void OnSideNumUpdated();// 0x1fae4b0
	void OnRep_TeamType();// 0x2851840
	void OnRep_TeamEliminatedOrDowned();// 0x1fa4530
	void OnRep_TeamEliminated();// 0xd13910
	void OnRep_TeamCanProposeSurrender();// 0x2851820
	void OnRep_Score();// 0x28517e0
	void OnRep_Respawns();// 0x28517c0
	void OnRep_RespawnQueue();// 0x28517a0
	void OnRep_RespawnConfig();// 0x2851780
	void OnRep_JobSelectionComponent();// 0x2851760
	void OnRep_IntraScoreGoal();// 0x2851720
	void OnRep_IntraScore();// 0x28516e0
	void OnPlayerLogout(Controller* Controller);// 0x2851660
	void NewPingRequest(out const PingInfo PingInfo);// 0x2851510
	void NewPingRemoveRequest(int PingId, KSPlayerState* PingingPlayer);// 0x2851450
	void NewPingChangeRequest(int PingId, KSPlayerState* PingingPlayer, KSPlayerState* AcknowledgingPlayer);// 0x2851350
	bool IsEliminated();// 0x2851320
	bool IsDefending();// 0x28512f0
	bool IsAttacking();// 0x28512c0
	enum GetTeamType();// 0x2851160
	KSPlayerState*[] GetSortedPlayers();// 0x28510e0
	KSRespawnConfig GetRespawnConfig();// 0x28510b0
	int GetRemainingRespawns();// 0x2851090
	int GetPlayersRemaining(bool DownAsDead);// 0x2851000
	int GetNumberOfPlayers();// 0x273ed70
	int GetNumberOfHumanPlayers();// 0x2850fd0
	int GetNumberOfBotPlayers();// 0x2850fa0
	int GetLivesRemaining(bool CountDowned);// 0x2850f10
	int GetExpectedTeamSize();// 0x2850ee0
	void GetAllPersistentTeamMembers(out KSPersistentPlayerData*[] OutPersistentTeamMembers);// 0x2850e30
	KSPlayerState*[] GetAllMembers();// 0x2850d70
	void ForceResetTeamElimination();// 0x2850d10
	void EliminateTeam();// 0x2850cf0
	bool AllPlayersEliminatedOrDowned();// 0x27b5f20

--------------------------------
Class: PingInfo
	enum PingType;//[Offset: 0x0, Size: 1]
	enum PingMessage;//[Offset: 0x1, Size: 1]
	Vector_NetQuantize Location;//[Offset: 0x4, Size: 1]
	Vector_NetQuantize PingIconOffset;//[Offset: 0x10, Size: 1]
	Actor* PingedActor;//[Offset: 0x20, Size: 1]
	KSPlayerState* PingingPlayer;//[Offset: 0x28, Size: 1]
	KSPlayerState*[] AcknowledgedPlayers;//[Offset: 0x30, Size: 1]
	LinearColor PingColor;//[Offset: 0x40, Size: 1]
	Texture2D* PingIconTexture;//[Offset: 0x50, Size: 1]
	FText PingTextForTextChat;//[Offset: 0x78, Size: 1]
	FText[] PingTextParameters;//[Offset: 0x90, Size: 1]
	TimerHandle ExpirationHandle;//[Offset: 0xa0, Size: 1]
	int PingId;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: KSRespawnConfig
	enum RespawnMode;//[Offset: 0x0, Size: 1]
	int TotalRespawns;//[Offset: 0x4, Size: 1]
	int PersonalRespawns;//[Offset: 0x8, Size: 1]
	float RespawnTime;//[Offset: 0xc, Size: 1]
	bool WaveRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int CostPerRespawn;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSPersistentPlayerData.Object
	bool bIsBoundToMinPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	KSPlayerState* PlayerState;//[Offset: 0x30, Size: 1]
	KSPersistentPlayerId ID;//[Offset: 0x48, Size: 1]
	int TeamNum;//[Offset: 0x58, Size: 1]
	FString PlayerName;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnMinimumPlayerDataUpdatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDataTeamChangedDel;//[Size: 1]
	bool bAbandoned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	MulticastInlineDelegateProperty OnPersistentPlayerDataAbandonedDel;//[Size: 1]
	int CachedEliminations;//[Offset: 0xf0, Size: 1]
	int CachedDowns;//[Offset: 0xf4, Size: 1]
	int CachedAssists;//[Offset: 0xf8, Size: 1]
	int CachedDeaths;//[Offset: 0xfc, Size: 1]
	int CachedRevives;//[Offset: 0x100, Size: 1]
	int CachedMoney;//[Offset: 0x104, Size: 1]
	int CachedTotalCashEarned;//[Offset: 0x108, Size: 1]
	int CachedBounty;//[Offset: 0x10c, Size: 1]
	<KSItem*,KSItem*> SkinMap;//[Offset: 0x110, Size: 1]
	KSJobItem* ActiveJob;//[Offset: 0x160, Size: 1]
	MulticastInlineDelegateProperty OnActiveJobMasteryXpChanged;//[Size: 1]
	int ActiveJobMasteryXp;//[Offset: 0x190, Size: 1]
	int ActiveJobMasteryLevel;//[Offset: 0x194, Size: 1]
	bool IsBoundToPlayerState();// 0x27d8fb0
	bool IsAbandoned();// 0x27d8f90
	bool HasATeam();// 0x27d8f50
	int GetTotalCashEarned();// 0x27d8d60
	int GetTeamNum();// 0x27d8d30
	int GetRevives();// 0x27d8d00
	KSPlayerState* GetPlayerState();// 0x27d8cd0
	FString GetPlayerName();// 0x27d8c50
	int64 GetPlayerId();// 0x27d8c20
	int GetMoney();// 0x27d8bf0
	int GetJobMasteryLevel();// 0x27d8bc0
	KSJobItem* GetJob();// 0x27d8aa0
	int GetEliminations();// 0x27d89e0
	int GetDowns();// 0x27d89b0
	int GetDeaths();// 0x27d8980
	int GetBounty();// 0x27d8910
	int GetAssists();// 0x27d88e0
	void BoundPlayerStateDestroyed(Actor* InActor);// 0x27d8720

--------------------------------
Class: KSJobItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool IsStarterJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	bool IsRandomJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281, Size: 1]
	bool bDisabledByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x282, Size: 1]
	bool bIsMobileJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x283, Size: 1]
	bool AllowDuplicates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	KSSkinBundle* JobDefaultSkin;//[Offset: 0x288, Size: 1]
	KSJobItem* VariantParent;//[Offset: 0x2b0, Size: 1]
	int JobSkinBundleLootTableId;//[Offset: 0x2d8, Size: 1]
	KSJobRole* JobRoleItem;//[Offset: 0x2e0, Size: 1]
	KSItem* UniqueItem;//[Offset: 0x308, Size: 1]
	KSItem* PrimaryWeaponOptionOne;//[Offset: 0x330, Size: 1]
	KSWeaponCategoryAsset* PrimaryWeaponCategoryOptionOne;//[Offset: 0x358, Size: 1]
	bool PrimaryWeaponOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 1]
	KSItem* PrimaryWeaponOptionTwo;//[Offset: 0x388, Size: 1]
	KSWeaponCategoryAsset* PrimaryWeaponCategoryOptionTwo;//[Offset: 0x3b0, Size: 1]
	bool PrimaryWeaponOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	KSItem* SecondaryWeaponOptionOne;//[Offset: 0x3e0, Size: 1]
	bool SecondaryWeaponOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	KSItem* SecondaryWeaponOptionTwo;//[Offset: 0x410, Size: 1]
	bool SecondaryWeaponOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	KSItem* MeleeWeapon;//[Offset: 0x440, Size: 1]
	KSItem* QuickMeleeWeapon;//[Offset: 0x468, Size: 1]
	KSItem*[] Passives;//[Offset: 0x490, Size: 1]
	KSItem*[] Traits;//[Offset: 0x4a0, Size: 1]
	KSItem* GadgetOptionOne;//[Offset: 0x4b0, Size: 1]
	bool GadgetOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d8, Size: 1]
	KSItem* GadgetOptionTwo;//[Offset: 0x4e0, Size: 1]
	bool GadgetOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	KSItem* PerkOptionOne;//[Offset: 0x510, Size: 1]
	bool PerkOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	KSItem* PerkOptionTwo;//[Offset: 0x540, Size: 1]
	bool PerkOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	KSItem* PerkOptionThree;//[Offset: 0x570, Size: 1]
	bool PerkOptionThreeIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	KSItem* PerkOptionFour;//[Offset: 0x5a0, Size: 1]
	bool PerkOptionFourIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 1]
	KSItem* PerkOptionFive;//[Offset: 0x5d0, Size: 1]
	bool PerkOptionFiveIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	KSItem* PerkOptionSix;//[Offset: 0x600, Size: 1]
	bool PerkOptionSixIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628, Size: 1]
	KSItem* PerkOptionSeven;//[Offset: 0x630, Size: 1]
	bool PerkOptionSevenIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 1]
	KSItem* PerkOptionEight;//[Offset: 0x660, Size: 1]
	bool PerkOptionEightIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	KSItem* PerkOptionNine;//[Offset: 0x690, Size: 1]
	bool PerkOptionNineIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 1]
	KSItem* PerkOptionTen;//[Offset: 0x6c0, Size: 1]
	bool PerkOptionTenIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	KSItem* PerkOptionEleven;//[Offset: 0x6f0, Size: 1]
	bool PerkOptionElevenIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x718, Size: 1]
	KSItem* PerkOptionTwelve;//[Offset: 0x720, Size: 1]
	bool PerkOptionTwelveIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x748, Size: 1]
	KSItem* GambitOptionOne;//[Offset: 0x750, Size: 1]
	bool GambitOptionOneIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x778, Size: 1]
	KSItem* GambitOptionTwo;//[Offset: 0x780, Size: 1]
	bool GambitOptionTwoIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	KSItem* GambitOptionThree;//[Offset: 0x7b0, Size: 1]
	bool GambitOptionThreeIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 1]
	KSItem* GambitOptionFour;//[Offset: 0x7e0, Size: 1]
	bool GambitOptionFourIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 1]
	KSItem* GambitOptionFive;//[Offset: 0x810, Size: 1]
	bool GambitOptionFiveIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 1]
	KSItem* GambitOptionSix;//[Offset: 0x840, Size: 1]
	bool GambitOptionSixIsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x868, Size: 1]
	KSEmote*[] DefaultEmotes;//[Offset: 0x870, Size: 1]
	KSQuip*[] DefaultQuips;//[Offset: 0x880, Size: 1]
	KSCommunication*[] DefaultCommunications;//[Offset: 0x890, Size: 1]
	KSSpray*[] DefaultSprays;//[Offset: 0x8a0, Size: 1]
	KSItem* DefaultWingsuit;//[Offset: 0x8b0, Size: 1]
	SoftObjectPath[] LobbyPropsToPreload;//[Offset: 0x8d8, Size: 1]
	KSPlayerMod*[] DefaultJobLoadoutPassives;//[Offset: 0x8e8, Size: 1]
	int MaximumEquippableJobLoadoutPassives;//[Offset: 0x8f8, Size: 1]
	GameplayTag[] AllowedGameModeTags;//[Offset: 0x900, Size: 1]
	Texture2D* SmallJobIcon;//[Offset: 0x910, Size: 1]
	Texture2D* JobPortrait;//[Offset: 0x938, Size: 1]
	Texture2D* JobDiamondPortrait;//[Offset: 0x960, Size: 1]
	Texture2D* JobSquarePortrait;//[Offset: 0x988, Size: 1]
	bool IsValidJobItem(KSItem* KSItem);// 0x2791380
	bool IsOnFreeRotation();// 0x2791280
	Texture2D* GetSoftSmallJobIcon();// 0x2791140
	Texture2D* GetSoftJobSquarePortrait();// 0x27910a0
	Texture2D* GetSoftJobPortrait();// 0x2791000
	Texture2D* GetSoftJobDiamondPortrait();// 0x2790f60
	Texture2D* GetSmallJobIcon();// 0x2790e80
	bool GetSecondaryWeapons(out KSItem*[] SecondaryWeapons);// 0x2790b20
	bool GetQuickMeleeWeapon(out KSItem* OutItem);// 0x2790a50
	bool GetPrimaryWeapons(out KSItem*[] PrimaryWeapons);// 0x2790970
	bool GetPerks(out KSItem*[] Perks);// 0x2790890
	bool GetMeleeWeapons(out KSItem*[] MeleeWeapons);// 0x27907b0
	bool GetMeleeWeapon(out KSItem* OutItem);// 0x27906e0
	KSJobRole* GetJobRole();// 0x27905c0
	KSActivityInstance* GetJobMasteryActivityInstance(const Object* WorldContextObject);// 0x2790530
	bool GetGambits(out KSItem*[] Gambits);// 0x2790450
	bool GetGadgets(out KSItem*[] Gadgets);// 0x2790370
	bool GetFirstPassive(out KSItem* Passive);// 0x27902a0
	bool GetDefaultSprays(out KSSpray*[] Sprays);// 0x27901c0
	KSSkinBundle* GetDefaultSkin();// 0x2790190
	bool GetDefaultSecondaryWeapon(out KSItem* OutItem);// 0x27900c0
	bool GetDefaultRadialMenuItems(out KSRadialMenuItem*[] RadialMenuItems, enum CosmeticSlot);// 0x278ffa0
	bool GetDefaultQuips(out KSQuip*[] quips);// 0x278fec0
	bool GetDefaultPrimaryWeapon(out KSItem* OutItem);// 0x278fdf0
	bool GetDefaultPerks(out KSItem*[] Perks);// 0x278fd10
	bool GetDefaultGambits(out KSItem*[] Gambits);// 0x278fc30
	bool GetDefaultGadget(out KSItem* OutItem);// 0x278fb60
	bool GetDefaultEmotes(out KSEmote*[] Emotes);// 0x278fa80
	bool GetDefaultCommunications(out KSCommunication*[] communications);// 0x278f9a0
	bool GetAlternativeSecondaryWeapon(out KSItem* OutItem);// 0x278f790
	bool GetAlternativePrimaryWeapon(out KSItem* OutItem);// 0x278f6c0
	bool GetAlternativeGadget(out KSItem* OutItem);// 0x278f5f0

--------------------------------
Class: KSSkinBundle.KSItemBundle.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSLobbyCharacter* RogueSelectCharacterClass;//[Offset: 0x290, Size: 1]
	KSWeaponAttachment*[] SkinSpecificWeaponAttachments;//[Offset: 0x2b8, Size: 1]
	bool bOverrideAttachedWeaponWraps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	bool StarterSkin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9, Size: 1]
	Texture2D* SkinFlatImage;//[Offset: 0x2d0, Size: 1]
	KSJobItem* Job;//[Offset: 0x2f8, Size: 1]
	bool bOverrideJobLobbyProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	SoftObjectPath[] LobbyPropsToPreload;//[Offset: 0x328, Size: 1]
	static KSJobItem* StaticGetAssociatedJob(out const KSSkinBundle* InSkinBundle);// 0x2848db0
	bool IsStarterSkin();// 0x27a1f70
	Texture2D* GetSkinImage();// 0x28483e0
	class KSLobbyCharacter GetRogueSelectCharacterClass();// 0x2848050
	KSJobItem* GetAssociatedJob();// 0x2847dc0

--------------------------------
Class: KSItemBundle.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSItem*[] BundledItems;//[Offset: 0x280, Size: 1]
	void GetSortedBundledItems(out KSItem*[] SortedItems);// 0x2787c40

--------------------------------
Class: KSLobbyCharacter.KSCharacter.KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	FName ViewModelName;//[Offset: 0x3d68, Size: 1]
	AnimMontage* ActiveLobbyMontage;//[Offset: 0x3d70, Size: 1]
	bool bEnableRogueSelectWeaponPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d78, Size: 1]
	bool bEnableWalkinCinematicWeaponPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d79, Size: 1]
	enum CharacterIndex;//[Offset: 0x3d7a, Size: 1]
	KSWeaponSkeletalMeshComponent* LobbyWeapon01Component;//[Offset: 0x3d80, Size: 1]
	KSWeaponSkeletalMeshComponent* LobbyWeapon02Component;//[Offset: 0x3d88, Size: 1]
	KSWeaponSkeletalMeshComponent* LobbyProp01Component;//[Offset: 0x3d90, Size: 1]
	KSWeaponSkeletalMeshComponent* LobbyProp02Component;//[Offset: 0x3d98, Size: 1]
	KSStaticMeshComponent* LobbyPropStatic01Component;//[Offset: 0x3da0, Size: 1]
	KSStaticMeshComponent* LobbyPropStatic02Component;//[Offset: 0x3da8, Size: 1]
	<FName,LobbySkeletalPropInfo> SkeletalPropMapping;//[Offset: 0x3db0, Size: 1]
	<FName,LobbyStaticPropInfo> StaticPropMapping;//[Offset: 0x3e00, Size: 1]
	bool ShouldHideInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e50, Size: 1]
	bool bWereTexturesStreamedIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e51, Size: 1]
	bool bIsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e52, Size: 1]
	bool bHideUntilTexturesStream;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e53, Size: 1]
	bool bForceEnableClothSim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e54, Size: 1]
	bool bPrestreamTextures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e55, Size: 1]
	int ForcedLodModel;//[Offset: 0x3e58, Size: 1]
	bool bCustomForcedLodForSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e5c, Size: 1]
	int ForcedLodModelSwitch;//[Offset: 0x3e60, Size: 1]
	enum CurrentAnimState;//[Offset: 0x3e6c, Size: 1]
	MulticastInlineDelegateProperty OnVisibilityChangedDel;//[Size: 1]
	int[] PersistentMaterialOverrideIDs;//[Offset: 0x3e80, Size: 1]
	bool bIsRotatable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e90, Size: 1]
	Vector MaxAxisRotation;//[Offset: 0x3e94, Size: 1]
	float IdleSecondsToResetRotation;//[Offset: 0x3ea0, Size: 1]
	float ResetRotationSpeedRadians;//[Offset: 0x3ea4, Size: 1]
	Vector RotationRatePerAxis;//[Offset: 0x3ea8, Size: 1]
	void VisibilityChanged(bool IsVisible);// 0x2d74e00
	bool UpdateHiddenInGame();// 0x27a3150
	void UnsetCharacter();// 0x27a3130
	void UnbindControllerFromActor();// 0x27a3110
	void StopLobbyCharacterMontage();// 0x2d74e00
	void StopCurrentEmote();// 0x27a30f0
	void ShowLobbyNameplate();// 0x27a3050
	void SetUpStaticLobbyProp(LobbyStaticPropInfo LobbyStaticPropInfo, KSStaticMeshComponent* StaticPropComponent);// 0x27a2e40
	void SetUpSkeletalLobbyProp(LobbySkeletalPropInfo LobbyPropInfo, KSWeaponSkeletalMeshComponent* SkeletalPropComponent);// 0x27a2c70
	void SetupLobbyCharacter(KSPlayerInfo* playerinfo);// 0x27a2fd0
	void SetShouldHideInGame(bool ShouldHide);// 0x27a2bf0
	void SetLobbyNameplate(KSPlayerInfo* playerinfo);// 0x27a2ad0
	void SetLobbyCharacterAnimState(enum AnimState);// 0x27a2a50
	void SetCharacterSkin(KSItem* SkinItem);// 0x27a2940
	void SetCharacterEmote(KSItem* EmoteItem);// 0x27a28c0
	void PlayLobbyCharacterMontage();// 0x2d74e00
	void OnLobbyPresenceStateChange(enum LobbyPresenceState);// 0x27a2050
	bool IsSet();// 0x27a2030
	bool IsLobbyCharacter();// 0x27a1fe0
	void InitializeSkeletalPropAnimation(AnimInstance* PropAnimInstance);// 0x2d74e00
	void InitializeLobbyCharacterAnimation();// 0x2d74e00
	void HideLobbyNameplate();// 0x1f8e500
	float GetSkeletalPropMontageStartTime();// 0x27a1e80
	float GetCurrentMontagePosition();// 0x27a1b60
	enum GetCurrentAnimState();// 0x27a1b40
	enum GetCharacterIndex();// 0x27a1b00
	void EmoteCosmeticComponentCreated(KSEquipment* Emote);// 0x27a1a80
	void EmoteActionStateChanged(KSEquipmentCosmeticComponent* Cosmetic);// 0x27a1a00
	void DeattachStaticLobbyProp(KSStaticMeshComponent* StaticPropComponent);// 0x27a1980
	void DeattachSkeletalLobbyProp(KSWeaponSkeletalMeshComponent* SkeletalPropComponent);// 0x27a1900
	void DeattachAllLobbyProps();// 0x27a18e0
	void ClearAllLobbyPropInfo();// 0x27a18c0
	void BindControllerToActor();// 0x27a1810
	void BeginRotationReset();// 0x27a17e0
	void AttachAllActiveLobbyProps();// 0x27a17c0

--------------------------------
Class: KSStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LobbySkeletalPropInfo
	bool enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	SoftObjectPath WeaponAsset;//[Offset: 0x8, Size: 1]
	FName AttachPoint;//[Offset: 0x20, Size: 1]
	class AnimInstance* AnimInstance;//[Offset: 0x28, Size: 1]
	AnimMontage* Montage;//[Offset: 0x30, Size: 1]
	int TargetLOD;//[Offset: 0x38, Size: 1]
	Transform TransformOffset;//[Offset: 0x40, Size: 1]
	int WeaponAnimIndex;//[Offset: 0x70, Size: 1]
	bool ShouldOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 1]
	FName RowNameContainingMaterialOverride;//[Offset: 0x78, Size: 1]

--------------------------------
Class: LobbyStaticPropInfo
	bool enable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	FName AttachPoint;//[Offset: 0x4, Size: 1]
	StaticMesh* StaticMesh;//[Offset: 0x10, Size: 1]
	Transform TransformOffset;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSPlayerInfo.PUMG_PlayerInfo.Object
	MulticastInlineDelegateProperty OnPlayerStatusChanged;//[Size: 1]
	void ViewExternalProfile();// 0x27f1970
	void ToggleDND();// 0x27f1950
	bool ShouldShowViewGamercardForPlayer();// 0x27f1920
	bool ShouldShowViewExternalProfile();// 0x27f18f0
	bool ShouldShowInviteToPartyForPlayer();// 0x27f18c0
	bool ShouldShowCrossplayIconForPlayer();// 0x27f1890
	bool IsSuggestedFriend();// 0x27f1440
	bool IsSamePortalAsLocalPlayer();// 0x27f1410
	bool IsRoCoFriend();// 0x27f13e0
	bool IsRequestingFriend();// 0x27f13b0
	bool IsPlayingThisGame();// 0x27f1380
	bool IsPendingFriend();// 0x27f1350
	bool IsOnline();// 0x27f1320
	bool IsMuted();// 0x27f12f0
	bool IsInVoiceChannel();// 0x27f12c0
	bool IsInQueue();// 0x27f1290
	bool IsInMatch();// 0x27f1260
	bool IsInLocalParty();// 0x27f1230
	bool IsInLobby();// 0x27f1200
	bool IsFriend();// 0x27f11d0
	bool IsDND();// 0x27f11a0
	bool InviteToParty(out FText OutErrorText);// 0x27f10c0
	bool HasPortalRelationship();// 0x27f1090
	bool HasPortalInfoForClientPortal();// 0x27f1060
	bool HasHRRelationship();// 0x27f1030
	bool HasDeserter();// 0x27f1000
	FText GetStatusMessage();// 0x27f0f60
	FText GetRichPresenceText();// 0x27f0ec0
	int GetRankedLevelProgress(int QueueId);// 0x27f0e30
	int GetRankedLevel(int QueueId);// 0x27f0da0
	int GetQuantityForItem(int ItemId);// 0x27f0d10
	enum GetPlayerSelectedInputType();// 0x27f0c40
	bool GetPlayersDisplayedSkin(out KSItem* SkinItem);// 0x27f0c70
	enum GetPlayerPlatformType();// 0x27f0c10
	enum GetPlayerOnlineStatus(bool bAllowPartyStatus, bool bAllowFriendRequestStatus);// 0x27f0b30
	int GetPlayerLevel();// 0x27f0b00
	PlayerAlias[] GetPlayerAliases();// 0x27f09e0
	bool GetOwnedJobsCount(out int OutOwnedJobsCount, bool bIncludeFreeRotation);// 0x27f0900
	bool GetEquippedAccountItem(enum eSlot, out KSItem* EquippedItem);// 0x27f0740
	int GetDurationForItem(int ItemId);// 0x27f06b0
	int GetDeserterPenaltySeconds();// 0x27f0680
	bool CanBeSpectated();// 0x2779c50
	bool CanBeChallenged();// 0x27f0340

--------------------------------
Class: PUMG_PlayerInfo.Object
	MulticastInlineDelegateProperty OnFilteredNameSetDel;//[Size: 1]
	void SetIgnored(bool Ignored);// 0xe91f80
	bool IsIgnored();// 0xe91ae0
	int64 GetPlayerId();// 0xe915f0
	FText GetName();// 0xe91490
	FString GetMctsName();// 0xe91410
	int GetAvatarItemId();// 0xe90fc0

--------------------------------
Class: PlayerAlias

--------------------------------
Class: KSJobRole.DataAsset.Object
	FText JobRoleDisplayName;//[Offset: 0x30, Size: 1]
	FName JobRoleName;//[Offset: 0x48, Size: 1]
	FText JobRoleDescription;//[Offset: 0x50, Size: 1]
	int JobRoleSortOrder;//[Offset: 0x68, Size: 1]
	bool ShouldHideRole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c, Size: 1]
	Texture2D* JobRoleIcon;//[Offset: 0x70, Size: 1]
	Texture2D* GetRoleIcon();// 0x26af9c0

--------------------------------
Class: KSWeaponCategoryAsset.ItemCollection.PrimaryDataAsset.DataAsset.Object
	GameplayTag CategoryTag;//[Offset: 0x98, Size: 1]
	GameplayTag WrapTag;//[Offset: 0xa0, Size: 1]
	bool bExcludeUpgrades;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool bRequireItemId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	FText DisplayName;//[Offset: 0xb0, Size: 1]
	FText DisplayNameSingular;//[Offset: 0xc8, Size: 1]
	FText DisplayNameCategory;//[Offset: 0xe0, Size: 1]
	Texture2D* SoftSymbolIcon;//[Offset: 0xf8, Size: 1]
	Texture2D* SoftFlatSymbolIcon;//[Offset: 0x120, Size: 1]
	Texture2D* SoftMasteryIcon;//[Offset: 0x148, Size: 1]
	Texture2D* SoftVerticalSplash;//[Offset: 0x170, Size: 1]
	Texture2D* SoftHorizontalSplash;//[Offset: 0x198, Size: 1]
	bool ShowsMasteryUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c0, Size: 1]
	bool ShowsWeaponUnlockUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c1, Size: 1]
	bool ShowsRelatedJobsUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c2, Size: 1]
	KSWeaponAsset* DefaultPreviewWeapon;//[Offset: 0x1d8, Size: 1]
	GameplayTag GetWrapTag();// 0x288acc0
	KSItem*[] GetWeaponsForCategory();// 0x288aae0
	Texture2D* GetVerticalSplash();// 0x288a780
	Texture2D* GetSymbolIcon();// 0x288a640
	bool GetShowsWeaponUnlockUI();// 0x288a620
	bool GetShowsRelatedJobsUI();// 0x288a600
	bool GetShowsMasteryUI();// 0x27fc910
	Texture2D* GetMasteryIcon();// 0x2889f80
	Texture2D* GetHorizontalSplash();// 0x2889de0
	Texture2D* GetFlatSymbolIcon();// 0x2889d40
	FText GetDisplayNameSingular();// 0x2889c30
	FText GetDisplayNameCategory();// 0x2889b80
	FText GetDisplayName();// 0x2889ad0
	KSWeaponAsset* GetDefaultPreviewWeapon();// 0x2889aa0
	GameplayTag GetCategoryTag();// 0x2889780

--------------------------------
Class: KSEmote.KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool bFlushKeysOnPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	class KSEmoteCosmeticComponent* EmoteCosmeticComponentClass;//[Offset: 0x2f0, Size: 1]
	enum EmoteCameraPosition;//[Offset: 0x318, Size: 1]
	Vector EmotePreviewLocationOffset;//[Offset: 0x31c, Size: 1]
	float EmotePreviewScaleOverride;//[Offset: 0x328, Size: 1]
	bool bMovingEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	FName[] ApparelObjectsToInfluence;//[Offset: 0x330, Size: 1]
	SoftObjectPath[] WeaponPropsToPreload;//[Offset: 0x340, Size: 1]
	bool IsMovingEmote();// 0xe9bc70
	float GetEmotePreviewScaleOverride();// 0x2747280
	Vector GetEmotePreviewLocationOffset();// 0x2747250
	class KSEmoteCosmeticComponent GetEmoteCosmeticClass();// 0x27470d0
	enum GetEmoteCameraPosition();// 0x27470b0

--------------------------------
Class: KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSRadialMenuItemInstance* RadialMenuItemInstanceClass;//[Offset: 0x288, Size: 1]
	SoftDataTableInfo[] AssetDataTables;//[Offset: 0x2b0, Size: 1]
	KSJobItem*[] JobAllowList;//[Offset: 0x2c0, Size: 1]
	float GlobalRadialMenuItemCooldownTime;//[Offset: 0x2d0, Size: 1]
	enum InterruptNotifyBehavior;//[Offset: 0x2d4, Size: 1]
	float RadialMenuItemIsPlayingTimeout;//[Offset: 0x2d8, Size: 1]
	KSRadialMenuItemInterruptRules InterruptRules;//[Offset: 0x2dc, Size: 1]
	bool bLockPawnRotationWhilePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	enum Emotion;//[Offset: 0x2e1, Size: 1]
	bool ShouldPreventPlay(enum InReason);// 0x282df10
	bool ShouldInterrupt(enum InReason);// 0x282dda0
	bool IsJobAllowed(KSJobItem* Item);// 0x282dcb0
	bool IsAllowedForAllJobs();// 0x282dbf0
	class KSRadialMenuItemInstance GetRadialMenuItemInstanceClass();// 0x282d790
	bool GetLockPawnRotationWhilePlaying();// 0x27a1de0
	GameplayTag GetGameplayTagBase();// 0x282d750
	enum GetEmotionToApply();// 0x282d730
	FString GetCosmeticSlotString();// 0x282d6b0
	enum GetCosmeticSlot();// 0x282d690
	KSJobItem*[] GetAllowedJobs();// 0x282d550

--------------------------------
Class: KSRadialMenuItemInstance.KSEquipment.Info.Actor.Object
	KSRadialMenuItem* RadialMenuItemAsset;//[Offset: 0x2d8, Size: 1]
	void ServerPlayRadialMenuItem();// 0x2831de0
	void ServerForceStopRadialMenuItem();// 0x2831d90
	bool PlayRadialMenuItem(out enum OutInterruptReason, bool bForcePlayRadialMenuItem);// 0x2831c90
	void OnRep_RadialMenuItemAsset();// 0x1fc3720
	bool IsThrottled();// 0x2831930
	bool IsManagingRadialMenuItemLocally();// 0x28318d0
	KSRadialMenuItem* GetRadialMenuItemAsset();// 0x26cbad0
	KSCharacter* GetActiveCharacterOwner();// 0x28312e0
	void ForceStopRadialMenuItem();// 0x28312c0
	void DoRadialMenuItem();// 0xdf0300
	bool CanPlayRadialMenuItemNow(out enum OutInterruptReason);// 0x2830f80

--------------------------------
Class: KSEmoteCosmeticComponent.KSEquipmentCosmeticComponent.ActorComponent.Object
	byte PawnRotationLockId;//[Offset: 0x120, Size: 1]
	int EmotionInstanceId;//[Offset: 0x124, Size: 1]
	KSEmote* EmoteAsset;//[Offset: 0x158, Size: 1]
	uint16 PlayTicker;//[Offset: 0x160, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x168, Size: 1]
	DynamicSkinTable* SkinTable;//[Offset: 0x170, Size: 1]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218, Size: 1]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219, Size: 1]
	bool bShouldLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a, Size: 1]
	Vector LastEmotePlayedLocation;//[Offset: 0x21c, Size: 1]
	KSEmoteInterruptTickFunction InterruptTick;//[Offset: 0x230, Size: 1]
	KSEmoteCosmeticSubInstance*[] SubInstances;//[Offset: 0x288, Size: 1]
	void OnRep_PlayTicker();// 0x27475c0
	void OnRep_EmoteAsset();// 0x27475a0
	void OnInitialize();// 0x2d74e00
	void MarkStopped();// 0x2747480
	void MarkPlaying();// 0x2747460
	bool IsPlaying();// 0x2747420
	bool IsInitialized();// 0x2747370
	MultiSkinObject* GetSkinObject();// 0xe8c0b0
	KSEmote* GetEmoteAsset();// 0x2747090
	void BlueprintPlayEmote();// 0x2d74e00
	void BlueprintInterruptEmote(enum Reason);// 0x2d74e00
	KSEmoteCosmeticSubInstance* AddEmoteCosmeticSubInstance(class KSEmoteCosmeticSubInstance SubInstanceClass);// 0x2746c10

--------------------------------
Class: KSEmoteCosmeticSubInstance.Object
	void MarkOwnerStopped();// 0x2747440
	bool IsOwnerDeadOrDestroyed();// 0x27473f0
	bool IsLocallyViewed();// 0x27473c0
	bool IsLocallyManaged();// 0x2747390
	void HandleEmoteStarted();// 0x2747350
	void HandleEmoteFinished();// 0x2747330
	MultiSkinObject* GetSkinObject();// 0x2747300
	KSEmoteCosmeticComponent* GetOwningEmoteCosmeticComponent();// 0x27472a0
	KSCharacterAnimInst* GetCharAnimInstance();// 0x2746f70
	KSCharacter* GetCharacterOwner();// 0x2746fd0
	SkeletalMeshComponent* GetCharacterMesh();// 0x2746fa0
	void BlueprintStopped();// 0x2d74e00
	void BlueprintOnUnregister();// 0x2d74e00
	void BlueprintOnRegister();// 0x2d74e00
	void BlueprintInterrupt(enum Reason);// 0x2d74e00

--------------------------------
Class: KSEmoteInterruptTickFunction.TickFunction

--------------------------------
Class: SoftDataTableInfo
	DataTable* DataTable;//[Offset: 0x0, Size: 1]
	int TablePriority;//[Offset: 0x28, Size: 1]
	GameplayTagQuery SkinTagQuery;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSRadialMenuItemInterruptRules
	bool Walking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool Sprinting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool Crouching;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool Downed;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool Dead;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool Interacting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool Zipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool SkyDiving;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool DodgeRolling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool Falling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool NonRadialMenuItemEquipment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool RadialMenuItemActivated;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool Cooldown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool DistFromOrigin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]
	bool Throttled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 1]

--------------------------------
Class: KSQuip.KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	FName OverriddenAudioEventName;//[Offset: 0x2e8, Size: 1]
	AkAudioEvent* QuipAudioEvent;//[Offset: 0x2f0, Size: 1]

--------------------------------
Class: KSCommunication.KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	enum PingType;//[Offset: 0x2e8, Size: 1]
	enum PingMessage;//[Offset: 0x2e9, Size: 1]

--------------------------------
Class: KSSpray.KSEmote.KSRadialMenuItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSActivity* StatTrackingActivity;//[Offset: 0x350, Size: 1]
	KSActivity* GetStatTrackingActivity();// 0x2848440

--------------------------------
Class: KSActivity.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	FText ItemDescriptionSingular;//[Offset: 0x1b8, Size: 1]
	int64 ProgressLootId;//[Offset: 0x1d0, Size: 1]
	int64 RemoveProgressLootId;//[Offset: 0x1d8, Size: 1]
	int64 SetProgressLootId;//[Offset: 0x1e0, Size: 1]
	int64 ResetProgressLootId;//[Offset: 0x1e8, Size: 1]
	int64 SpecialLootId;//[Offset: 0x1f0, Size: 1]
	int64 ClaimableRewardLootId;//[Offset: 0x1f8, Size: 1]
	int64 RewardTokenItemId;//[Offset: 0x200, Size: 1]
	int64 RewardVendorId;//[Offset: 0x208, Size: 1]
	int64 RewardXpTableId;//[Offset: 0x210, Size: 1]
	int64 SortOrder;//[Offset: 0x218, Size: 1]
	int64[] EntitlementItemIds;//[Offset: 0x220, Size: 1]
	class KSEventTracker* TrackerClass;//[Offset: 0x230, Size: 1]
	int ProgressInterval;//[Offset: 0x258, Size: 1]
	int MaxProgressThreshold;//[Offset: 0x25c, Size: 1]
	int MaxProgressPerMatch;//[Offset: 0x260, Size: 1]
	bool bAllowMultipleProgressFromTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x264, Size: 1]
	bool bResetAccumulationAfterTriggerEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x265, Size: 1]
	bool bResetAccumulationAfterProgressIncrease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x266, Size: 1]
	bool bRemoveProgressFromAccumulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x267, Size: 1]
	bool bIsClientAuthority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool bCreateTrackerIfFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool bCreateInstanceIfInvalid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool bAlwaysPackageActivityIfCreated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	bool bCanPackageActivityWithoutTracker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool bCanCreateInstanceForBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	bool bAllowLastTierToRepeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e, Size: 1]
	enum ProgressDisplayPreference;//[Offset: 0x26f, Size: 1]
	enum ClientNotifyFrequency;//[Offset: 0x270, Size: 1]
	ActivityTierStructure[] ActivityTierData;//[Offset: 0x278, Size: 1]
	bool bShowInPostMatchLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bDisableAfterJobChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bIsOwnableItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool bShouldDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	bool bDuplicateProgressToSpecialLootId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	bool IsLocalActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28d, Size: 1]
	KSActivityComponent*[] ActivityComponents;//[Offset: 0x290, Size: 1]
	KSActivityRequirement*[] ActivityRequirements;//[Offset: 0x2a0, Size: 1]
	KSActivityRewardCondition*[] ActivityRewardConditions;//[Offset: 0x2b0, Size: 1]
	KSSubActivityEntry[] SubActivityEntries;//[Offset: 0x2c0, Size: 1]
	class KSActivityBehavior[] ActivityBehaviors;//[Offset: 0x2d0, Size: 1]
	GameplayTag[] ActivityTypes;//[Offset: 0x2e0, Size: 1]
	bool bDevCookOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	Texture2D* CarouselBackground;//[Offset: 0x2f8, Size: 1]
	bool MatchesTags(GameplayTag[] ActivityTags);// 0x26b6420
	bool MatchesTagAndString(out const GameplayTag ActivityTag, FString Value);// 0x26b6320
	bool MatchesTagAndInt(out const GameplayTag ActivityTag, int Value);// 0x26b6240
	bool MatchesTag(out const GameplayTag ActivityTag);// 0x26b61a0
	bool IsWeaponConditionMet(const KSWeapon* InWeapon);// 0x26b6110
	bool IsUnlocked(const Controller* InController);// 0x26b6080
	bool IsTriggerConditionMet(const int64 PlayerId, const Object* WorldContextObject);// 0x26b5fc0
	bool IsTargetConditionMet(const KSCharacter* InTargetCharacter, const KSPlayerState* InSelfPlayerState);// 0x26b5f00
	bool IsShopPurchaseConditionMet(const KSItem* InItem);// 0x26b5ca0
	bool IsRoundResultConditionMet(out const RoundResult InRoundResult, const Controller* InController);// 0x26b5e10
	bool IsRevealConditionMet(out const KSRevealInfo InRevealInfo);// 0x26b5d60
	bool IsItemPickedUpConditionMet(const KSItem* ItemPickedUp);// 0x26b5ca0
	bool IsCombatConditionMet(out const CombatEventInfo DamageInfo);// 0x26b5b60
	bool IsCashEarnedConditionMet(int InCashEarned, out const FText InCashEarnedReason);// 0x26b5a40
	bool IsActivityEventTriggerConditionMet(out const GameplayTag InActivityEventGameplayTag);// 0x26b5980
	bool IsAccoladeTriggerConditionMet(const KSAccoladeTracker* AccoladeTracker);// 0x26b58f0
	KSActivityComponent_WeaponMastery_Milestone* GetWeaponMilestoneComponent();// 0x26b55d0
	int GetTimeUntilUnlock();// 0x26b55a0
	bool GetTierDataForProgress(int Progress, out ActivityTierStructure TierData);// 0x26b5400
	KSActivityComponent_MercMastery* GetMercMasteryComponent();// 0x26b5100
	KSActivityComponent_LoginReward* GetLoginRewardComponent();// 0x26b5060
	KSActivityComponent_Job* GetJobComponent();// 0x26b4f90
	KSActivityInstance* GetInstanceForPlayer(const Object* WorldContextObject, const Controller* Controller);// 0x26b4ed0
	FText GetFormattedDescriptionForTier(ActivityTier ActivityTier);// 0x26b4d20
	KSActivityComponent_Contract* GetContractComponent();// 0x26b4c80
	KSActivityComponent_BattlePass* GetBattlePassComponent();// 0x26b4be0
	KSActivityComponent_Award* GetAwardComponent();// 0x26b4b40
	KSActivityComponent_Achievement* GetAchievementComponent();// 0x26b4aa0
	bool CanSubtractProgress(const int64 InPlayerId, const KSGameState* InGameState);// 0x26b4760
	bool CanAddProgress(const int64 InPlayerId, const KSGameState* InGameState);// 0x26b46a0

--------------------------------
Class: KSEventTracker.Object
	MulticastInlineDelegateProperty OnTriggered;//[Size: 1]
	bool bDoesTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	Controller* OwningController;//[Offset: 0x44, Size: 1]
	KSActivityInstance* WeakActivityInstance;//[Offset: 0x4c, Size: 1]
	<enum,float> ProgressEarnedBySource;//[Offset: 0x58, Size: 1]
	<FString,float> ProgressEarnedByEvent;//[Offset: 0xa8, Size: 1]
	<FString,float> ProgressEarnedByBooster;//[Offset: 0xf8, Size: 1]
	<FString,float> ExtraData;//[Offset: 0x148, Size: 1]
	KSEventTrackerPlayerData* PlayerData;//[Offset: 0x198, Size: 1]
	void TriggerEvent(int Count);// 0x2753930
	void TickTracker(float DeltaTime);// 0x2d74e00
	void StoreProgressBySource(enum Source, float Progress);// 0x2753870
	void StoreProgressByEvent(FString EventName, float Progress);// 0x2753790
	void StoreProgressByBooster(FString BoosterName, float Progress);// 0x27536b0
	void StoreExtraData(FString ExtraDataKey, float ExtraDataValue);// 0x27535d0
	void ResetAccumulatedProgress();// 0x2753330
	bool IsTriggerConditionMet();// 0x2753300
	void HandleTrackerInitialized();// 0x2d74e00
	void HandleLostController();// 0x2d74e00
	KSWorldSettings* GetWorldSettings();// 0x2752b70
	KSPlayerState* GetPlayerState();// 0x27527e0
	int GetMatchProgress();// 0xe26eb0
	KSGameState* GetGameState();// 0x2752630
	KSGameMode* GetGameMode();// 0x2752600
	KSGameInstance* GetGameInstance();// 0x27525d0
	int GetAccumulatedProgress();// 0x2751f80

--------------------------------
Class: KSActivityInstance.Object
	MulticastInlineDelegateProperty OnProgressIncremented;//[Size: 1]
	MulticastInlineDelegateProperty OnProgressTierReached;//[Size: 1]
	MulticastInlineDelegateProperty OnProgressCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnProgressInitialized;//[Size: 1]
	KSEventTracker* TrackerInstance;//[Offset: 0x68, Size: 1]
	KSActivityBehavior*[] BehaviorInstances;//[Offset: 0x70, Size: 1]
	int ProgressCount;//[Offset: 0x80, Size: 1]
	bool HasProgressBeenInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 1]
	ActivityTier[] ActivityTiers;//[Offset: 0x88, Size: 1]
	Controller* OwningController;//[Offset: 0x98, Size: 1]
	KSActivity* Activity;//[Offset: 0xa0, Size: 1]
	KSActivityManagerBase* ActivityManager;//[Offset: 0xa8, Size: 1]
	bool bIsInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	int InitialProgress;//[Offset: 0xb4, Size: 1]
	bool InitialUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int CurrentProgressEarned;//[Offset: 0xbc, Size: 1]
	int TotalProgressEarned;//[Offset: 0xc0, Size: 1]
	bool ShouldSetProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	<FString,double> PlatformProgressPerAchievement;//[Offset: 0xc8, Size: 1]
	<enum,float> TotalProgressEarnedBySource;//[Offset: 0x118, Size: 1]
	<FString,float> TotalProgressEarnedByEvent;//[Offset: 0x168, Size: 1]
	<FString,float> TotalProgressEarnedByBooster;//[Offset: 0x1b8, Size: 1]
	<FString,float> ExtraData;//[Offset: 0x208, Size: 1]
	void UpdateActivityTiers();// 0x26bdac0
	void SyncProgressToInventoryCount();// 0x26bdaa0
	bool SetProgress(int Count);// 0x26bda10
	bool ResetProgress();// 0x26bd9e0
	void ResetAccumulatedProgress();// 0x26bd9c0
	void ProcessExtraData();// 0x26bd570
	void OnSubActivityProgressIncremented(KSActivityInstance* Activity, int Count);// 0x26bd4b0
	void OnEventTrackerTriggered(int Count);// 0x26bced0
	bool IsUnlocked();// 0x26bcd20
	bool IsTriggerConditionMet();// 0x26bccf0
	bool IsFinished();// 0x26bcc90
	bool IsActive();// 0x26bcc60
	bool IncrementProgress(int Count);// 0x26bcb50
	bool HasAuthority();// 0x26bcb20
	int GetTotalProgressForCurrentTier();// 0x26bca50
	int GetTotalProgressEarned();// 0x26bca30
	void GetTiersForXpRange(out ActivityTier[] Tiers, int StartingCount, int EndingCount);// 0x26bc8e0
	void GetTiers(out ActivityTier[] Tiers);// 0x26bc810
	bool GetTierDataForProgress(int Progress, out ActivityTierStructure TierData);// 0x26bc670
	bool GetTierCompletionTime(const Object* WorldContextObject, ActivityTier Tier, out DateTime TimeCompleted);// 0x26bc4f0
	ActivityTier GetProgressTierForSpecifiedProgressCount(int SpecifiedCount);// 0x26bc3b0
	ActivityTier GetProgressTier();// 0x26bc360
	bool GetProgressPercentageToNextTier(out float ProgressPercentage);// 0x26bc2b0
	bool GetProgressPercentageToMaxTier(out float ProgressPercentage);// 0x26bc200
	float GetProgressFromSource(enum Source);// 0x26bc170
	float GetProgressFromEvent(FString EventName);// 0x26bc0c0
	float GetProgressFromBooster(FString BoosterName);// 0x26bc010
	FText GetProgressDisplayText(enum DisplayType);// 0x26bbf20
	int GetProgressCount();// 0x26bb8b0
	int64 GetPlayerId();// 0x26bbeb0
	ActivityTier GetNextTierForSpecifiedProgressCount(int SpecifiedCount, bool RepeatFinalTier);// 0x26bbdb0
	ActivityTier GetNextTier();// 0x26bbd60
	bool GetMaxTier(out ActivityTier MaxTier);// 0x26bbc80
	DateTime GetLastProgressTime();// 0x26bbc40
	int GetInventoryProgressCount();// 0x26bbbb0
	bool GetInitialUnlocked();// 0x26bbb90
	int GetInitialProgress();// 0x26bbb70
	FText GetFormattedDescriptionForTier(ActivityTier ActivityTier);// 0x26bba30
	FText GetFormattedDescriptionForNextTier();// 0x26bb990
	float GetExtraDataEntry(FString ExtraDataKey);// 0x26bb8e0
	int GetDisplayProgess();// 0x26bb8b0
	int GetDisplayCompletionProgress();// 0x26bb880
	int GetCurrentProgressEarned();// 0x26bb860
	int GetActivityId();// 0x26bab20
	int GetAccumulatedProgress();// 0x26ba0e0
	void CreateTracker();// 0x26ba030
	void CreateBehaviors();// 0x26ba010
	bool CheckInventoryProgressCount(out int OutProgressCount);// 0x26b9ef0

--------------------------------
Class: KSActivityBehavior.Object
	Controller* OwningController;//[Offset: 0x28, Size: 1]
	KSActivityInstance* WeakActivityInstance;//[Offset: 0x30, Size: 1]
	void HandleProgressedFromSubActivity(const KSActivityInstance* SubActivity, const int ProgressFromSubActivity);// 0x2d74e00
	void HandleLostController();// 0x2d74e00
	void HandleBehaviorInitialized();// 0x2d74e00
	void HandleActivityTriggered();// 0x2d74e00
	KSPlayerState* GetPlayerState();// 0x26b5270
	KSGameState* GetKSGameState();// 0x26b5030

--------------------------------
Class: KSGameState.PGame_GameState.GameState.GameStateBase.Info.Actor.Object
	int RandomSessionSeed;//[Offset: 0x2a8, Size: 1]
	MulticastInlineDelegateProperty OnTeamCinematicSequenceSkippedDel;//[Size: 1]
	bool bBackfillEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	KSPlayerIdentitiesContainer PlayerIdentitiesContainer;//[Offset: 0x2f8, Size: 1]
	<uint64,KSLagCompensatedActor*> PredictedActors;//[Offset: 0x418, Size: 1]
	enum KillCamStatus;//[Offset: 0x478, Size: 1]
	float KillCamRecordingSecondsToKeep;//[Offset: 0x47c, Size: 1]
	Pawn* KillCamFocusPawn;//[Offset: 0x480, Size: 1]
	Pawn* KillCamSecondaryFocusPawn;//[Offset: 0x490, Size: 1]
	Actor* KillCamFocusSpecial;//[Offset: 0x4a0, Size: 1]
	float KillCamTime;//[Offset: 0x4ac, Size: 1]
	MulticastInlineDelegateProperty OnGameDisplayInfo;//[Size: 1]
	MulticastInlineDelegateProperty OnRemoveGameDisplayInfo;//[Size: 1]
	MulticastInlineDelegateProperty OnPhaseChangeDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSetupStartDel;//[Size: 1]
	MulticastInlineDelegateProperty OnSetupEndDel;//[Size: 1]
	MulticastInlineDelegateProperty OnExpectedPhaseCountChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTimerSecondTick;//[Size: 1]
	MatchPhase MatchPhase;//[Offset: 0x5a0, Size: 1]
	int ExpectedPhaseCount;//[Offset: 0x5b4, Size: 1]
	float ExpectedTimeForRemainingPhases;//[Offset: 0x5b8, Size: 1]
	MatchPhase PreviousPhase;//[Offset: 0x5bc, Size: 1]
	bool bHasProcessedMatchStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0, Size: 1]
	PGame_ReplicatedTimer ReplicatedMatchTimer;//[Offset: 0x620, Size: 1]
	bool bCharacterBodiesPersistAfterDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x664, Size: 1]
	float SecondsForCharacterBodiesToPersistAfterDeath;//[Offset: 0x668, Size: 1]
	float SecondsToViewBodyAfterDeath;//[Offset: 0x66c, Size: 1]
	MulticastInlineDelegateProperty OnPlayerDeath;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDown;//[Size: 1]
	MulticastInlineDelegateProperty OnRadialMenuItemUse;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerSpawn;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerRevive;//[Size: 1]
	MulticastInlineDelegateProperty OnWinnerSet;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerAssist;//[Size: 1]
	MulticastInlineDelegateProperty OnLastManStanding;//[Size: 1]
	MulticastInlineDelegateProperty OnUIRelevantPlayerStateChangedDel;//[Size: 1]
	float DefaultMinimapWidth;//[Offset: 0x700, Size: 1]
	MulticastInlineDelegateProperty OnTeamAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamCelebrateDel;//[Size: 1]
	class KSAccoladeTracker[] AccoladeTrackerClasses;//[Offset: 0x738, Size: 1]
	KSMiniMapAssistant* MiniMapAssistant;//[Offset: 0x760, Size: 1]
	<int,KSTeamState*> teams;//[Offset: 0x768, Size: 1]
	CombatEventList CombatEventList;//[Offset: 0x7c0, Size: 1]
	RadialMenuItemEventList RadialMenuItemEventList;//[Offset: 0x848, Size: 1]
	AssistEventList AssistEventList;//[Offset: 0x8d0, Size: 1]
	ReviveEventList ReviveEventList;//[Offset: 0x958, Size: 1]
	MulticastInlineDelegateProperty OnTeamEliminatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnTeamEliminatedOrDownedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerEliminatedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDownedChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnAttackingTeamUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnDisplayCashChanged;//[Size: 1]
	bool bDisplayCash;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa40, Size: 1]
	int CashPerDown;//[Offset: 0xa44, Size: 1]
	FText DownDescription;//[Offset: 0xa48, Size: 1]
	int CashPerAssist;//[Offset: 0xa60, Size: 1]
	FText AssistDescription;//[Offset: 0xa68, Size: 1]
	int CashPerRevive;//[Offset: 0xa80, Size: 1]
	FText ReviveDescription;//[Offset: 0xa88, Size: 1]
	int CashPerElim;//[Offset: 0xaa0, Size: 1]
	FText EliminationDescription;//[Offset: 0xaa8, Size: 1]
	int CashPerSuicide;//[Offset: 0xac0, Size: 1]
	FText SuicideDescription;//[Offset: 0xac8, Size: 1]
	<class KSDamageTypeBase,int> CashPerDeployableDestroyed;//[Offset: 0xae0, Size: 1]
	FString MercSelectSubLevel;//[Offset: 0xb30, Size: 1]
	FString[] ActiveCinematicSubLevelNames;//[Offset: 0xb40, Size: 1]
	KSCinematicSequenceManager* ActiveCinematicSequenceManager;//[Offset: 0xb50, Size: 1]
	FString ClientGameVersion;//[Offset: 0xb58, Size: 1]
	FString ServerGameVersion;//[Offset: 0xb68, Size: 1]
	MulticastInlineDelegateProperty OnTeamSidesFlipped;//[Size: 1]
	int[] TierUnlockThresholds;//[Offset: 0xb88, Size: 1]
	float MaxMarkerDistanceForCommonLoot;//[Offset: 0xb98, Size: 1]
	enum ObjectiveTicketDisplayType;//[Offset: 0xb9c, Size: 1]
	KSLootSiteBase*[] WorldLootSites;//[Offset: 0xed0, Size: 1]
	KSObjectiveBase*[] WorldObjectives;//[Offset: 0xee0, Size: 1]
	KSFlightPoint*[] WorldFlightPoints;//[Offset: 0xef0, Size: 1]
	KSDestructibleBase*[] WorldDestructibles;//[Offset: 0xf00, Size: 1]
	KSItemDrop*[] WorldDrops;//[Offset: 0xf10, Size: 1]
	KSProjectile*[] WorldProjectiles;//[Offset: 0xf20, Size: 1]
	KSPlayerController*[] WorldPlayerControllers;//[Offset: 0xf30, Size: 1]
	KSCharacter*[] WorldCharacters;//[Offset: 0xf40, Size: 1]
	KSHeatSourceComponent*[] WorldHeatSources;//[Offset: 0xf50, Size: 1]
	interface classNone[] WorldHazards;//[Offset: 0xf60, Size: 1]
	KSWayPointSet*[] WorldWayPointSets;//[Offset: 0xf70, Size: 1]
	KSOutOfBoundsRecoveryPoint*[] WorldRecoveryPoints;//[Offset: 0xf80, Size: 1]
	KSAnnouncer*[] WorldAnnouncers;//[Offset: 0xf90, Size: 1]
	KSGameShop*[] WorldGameShops;//[Offset: 0xfa0, Size: 1]
	KSPlayerShop*[] WorldPlayerShops;//[Offset: 0xfb0, Size: 1]
	KSPlayerShopZone*[] WorldShopZones;//[Offset: 0xfc0, Size: 1]
	KSRoyaleSafeZone*[] WorldRoyaleZones;//[Offset: 0xfd0, Size: 1]
	InitialGameObjectiveInfo[] InitialGameObjectiveInfos;//[Offset: 0xfe0, Size: 1]
	MulticastInlineDelegateProperty OnHUDTimerPrioritiesChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnMarkerTimerPrioritiesChangedDel;//[Size: 1]
	KSTimerPriorityConfig HUDTimerPriorityConfig;//[Offset: 0x1010, Size: 1]
	<enum,enum> HUDTimerPriorityMap;//[Offset: 0x1018, Size: 1]
	KSTimerPriorityConfig MarkerTimerPriorityConfig;//[Offset: 0x1068, Size: 1]
	<enum,enum> MarkerTimerPriorityMap;//[Offset: 0x1070, Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveRegistered;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveTransfered;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveUnregistered;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveTimerComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnGameObjectiveTimerTick;//[Size: 1]
	<int,interface classNone> GameObjectives;//[Offset: 0x1140, Size: 1]
	MulticastInlineDelegateProperty OnHeatSourceAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnHeatSourceRemoved;//[Size: 1]
	Actor*[] WorldDeployables;//[Offset: 0x11b0, Size: 1]
	bool bDestroyDeployableOnInstigatorDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c0, Size: 1]
	MulticastInlineDelegateProperty OnItemDropAdded;//[Size: 1]
	float ItemDropLifeSpan;//[Offset: 0x11d8, Size: 1]
	bool bShouldOffsetWeaponDrops;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11dc, Size: 1]
	float ProjectileLifeSpan;//[Offset: 0x11e0, Size: 1]
	interface classNone[] SkyDiveListeners;//[Offset: 0x11e8, Size: 1]
	KSCharacter*[] SkyDivers;//[Offset: 0x11f8, Size: 1]
	FText PresenceDisplayText;//[Offset: 0x12b0, Size: 1]
	FString PresenceKey;//[Offset: 0x12c8, Size: 1]
	KSTimerComponent* WaveRespawnTimer;//[Offset: 0x12e0, Size: 1]
	KSLootRarityTimerPair[] LootRarityTimerPairs;//[Offset: 0x12e8, Size: 1]
	<enum,KSTimerComponent*> LootRarityTimerMap;//[Offset: 0x12f8, Size: 1]
	MulticastInlineDelegateProperty OnLootRespawnTimerTick;//[Size: 1]
	MulticastInlineDelegateProperty OnLootRespawnTimerActive;//[Size: 1]
	MulticastInlineDelegateProperty OnAccoladeDisplay;//[Size: 1]
	AccoladeEventList AccoladeEventList;//[Offset: 0x1378, Size: 1]
	bool bBlockWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1400, Size: 1]
	float HealthGate;//[Offset: 0x1404, Size: 1]
	bool BotsIgnoreHealthGate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1408, Size: 1]
	bool bPreserveReserveAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1409, Size: 1]
	bool bInfiniteAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140a, Size: 1]
	bool bShowHUDObjectiveRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140b, Size: 1]
	bool bShowHUDObjectiveRoleBeforeJobSelect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140c, Size: 1]
	bool bInvertHUDObjectiveRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140d, Size: 1]
	KSGameHUDSettings GameModeHUDSettings;//[Offset: 0x1410, Size: 1]
	bool bPlayersShouldSpectateDefaultCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1448, Size: 1]
	bool bShowingPreviewActorSubLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1449, Size: 1]
	bool bPreviewActorsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144a, Size: 1]
	MulticastInlineDelegateProperty OnDynamicDestroyPreviewActorsDel;//[Size: 1]
	MulticastInlineDelegateProperty OnDynamicDisablePreviewActorsDel;//[Size: 1]
	MulticastInlineDelegateProperty OnDynamicEnablePreviewActorsDel;//[Size: 1]
	MulticastInlineDelegateProperty OnCinematicSubLevelEnabled;//[Size: 1]
	MulticastInlineDelegateProperty OnCinematicSubLevelDisabled;//[Size: 1]
	MulticastInlineDelegateProperty OnSetNumDebugCinematicRogues;//[Size: 1]
	int NumDebugCinematicRogues;//[Offset: 0x14f8, Size: 1]
	FName[] AlwaysIncludedClientBundles;//[Offset: 0x1500, Size: 1]
	FName[] AlwaysIncludedServerBundles;//[Offset: 0x1510, Size: 1]
	ReplicatedPreloader Preloader;//[Offset: 0x1520, Size: 1]
	bool bPostSelectionCinematicDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1700, Size: 1]
	bool bForceAllowLeaveMatchButton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1701, Size: 1]
	KSPersistentMinPlayerDataContainer PersistentPlayerDataContainer;//[Offset: 0x1708, Size: 1]
	MulticastInlineDelegateProperty OnPersistentPlayerDataCreatedDel;//[Size: 1]
	KSPersistentDataReplicator* PersistentDataReplicator;//[Offset: 0x1990, Size: 1]
	int FriendlyFireKillPenalty;//[Offset: 0x1998, Size: 1]
	int FriendlyFireDownPenalty;//[Offset: 0x199c, Size: 1]
	bool bCanToggleScoreboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19b8, Size: 1]
	DataTable* PollAssetDataTable;//[Offset: 0x19d0, Size: 1]
	bool bMatchEndedInSurrender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d8, Size: 1]
	KSTeamState* SurrenderWinningTeam;//[Offset: 0x19e0, Size: 1]
	Actor*[] StimulusSourceObjects;//[Offset: 0x19e8, Size: 1]
	<FName,FString> HUDComponentPropMap;//[Offset: 0x19f8, Size: 1]
	class KSHUDAnnouncementComponent* HUDAnnouncementComponentClass;//[Offset: 0x1a48, Size: 1]
	class KSEmoteMusicManager* EmoteMusicManagerClass;//[Offset: 0x1a50, Size: 1]
	KSEmoteMusicManager* EmoteMusicManager;//[Offset: 0x1a58, Size: 1]
	FName[] ActiveCinematicState;//[Offset: 0x1a60, Size: 1]
	KSCinematicDataContainer* CinematicDataContainer;//[Offset: 0x1a98, Size: 1]
	KSMVPDeterminant* MVPDeterminant;//[Offset: 0x1aa0, Size: 1]
	KSPersistentPlayerData*[] CachedOrderedMVPPlayers;//[Offset: 0x1aa8, Size: 1]
	KSWayPointSetCollection* WayPointSetCollection;//[Offset: 0x1ab8, Size: 1]
	KSSquadManagerBase* AISquadManager;//[Offset: 0x1ac0, Size: 1]
	bool bAllowPlayersToReselectJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac8, Size: 1]
	<FString,float> ActivityBehaviorCache;//[Offset: 0x1ad0, Size: 1]
	KSActionRestrictor GlobalActionRestrictor;//[Offset: 0x1b20, Size: 1]
	MulticastInlineDelegateProperty OnStatChange_PlayersUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnStatChange_StatsUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnStatChange_StatValuesUpdated;//[Size: 1]
	int64[] PlayerStatOrder;//[Offset: 0x1b70, Size: 1]
	KSScoreboardStat[] StatOrder;//[Offset: 0x1b80, Size: 1]
	float[] StatData;//[Offset: 0x1b90, Size: 1]
	GameplayTag StatSortTag;//[Offset: 0x1ba0, Size: 1]
	KSHUDComponent_Objective* ObjectiveHUDComponent;//[Offset: 0x1ba8, Size: 1]
	bool WasLastPhasePrepare();// 0x2776780
	bool UseMobileArmoryLoadouts();// 0x2776750
	void UnregisterGameObjective(interface classNone Objective);// 0x27766b0
	void TriggerPostSelectionPhaseBeginFadeOutDel();// 0x2776690
	void TriggerOnTeamCinematicSequenceSkippedDel();// 0x2776670
	void TriggerOnTeamCinematicSequenceBeginDel();// 0x2776650
	void TrackedPlayerStateDestroyed(Actor* InActor);// 0x27765d0
	void StopWaveRespawnTimer();// 0x27765b0
	void StartWaveRespawnTimer();// 0x2776590
	bool ShouldShowLeaveMatchButtonInHumanBackfill();// 0x2776550
	bool ShouldForceAllowLeaveMatchButton();// 0x2776530
	bool ShouldDestroyDeployableOnInstigatorDeath();// 0x2776510
	void SetWinner(const Actor* InWinner);// 0x2776480
	void SetSideForTeam(int TeamNumber, int SideNumber);// 0x27763c0
	void SetNumDebugCinematicRogues(int NewNumDebugCinematicRogues);// 0x2776340
	void SetMVPDeterminant(KSMVPDeterminant* InMVPDeterminant);// 0x2776230
	void SetMarkerTimerPriorities(KSTimerPriorityConfig NewTimerPriorityConfig);// 0x27762b0
	void SetHUDTimerPriorities(KSTimerPriorityConfig NewTimerPriorityConfig);// 0x27761a0
	void SetExpectedTimeForRemainingPhases(float InExpectedTimeForRemainingPhases);// 0x2776120
	void SetExpectedPhaseCount(int NumPhases);// 0x27760a0
	void SetCinematicDataContainer(KSCinematicDataContainer* InCinematicDataContainer);// 0x2776020
	void SetCachedValueForKey(FString InKey, float InValue);// 0x2775f40
	void SetBlockWeaponFire(bool bBlock);// 0x2775ec0
	void SetActiveCinematicSequenceManager(KSCinematicSequenceManager* NewCinematicSequenceManager);// 0x2775e40
	void Server_RequestEmoteOnCinematicCharacter(KSPlayerState* CallingPlayerState, KSEmote* Emote);// 0x2775d70
	void RemoveGameDisplayInfoForActor(Actor* pActor);// 0x2775cf0
	void RemoveGameDisplayInfoById(int DisplayInfoIdToRemove);// 0x2775c70
	void RemoveDeployable(interface classNone Deployable);// 0x2775bd0
	void RegisterGameObjective(int ObjectiveId, interface classNone Objective);// 0x2775af0
	void ReceivedKillCamStatus();// 0x1fdc7f0
	void PollManagerHandlePlayerDisconnect(Controller* Controller);// 0x2775a70
	void OnRep_WaveRespawnTimer();// 0xd94a20
	void OnRep_StatOrder();// 0x2775a50
	void OnRep_StatData();// 0x2775a30
	void OnRep_PlayerStatOrder();// 0x2775a10
	void OnRep_MatchPhase();// 0x1fc7530
	void OnRep_MarkerTimerPriorities();// 0x27759f0
	void OnRep_LootRarityTimerPairs();// 0x1f9f720
	void OnRep_InvertHUDObjectiveRoles();// 0x27759d0
	void OnRep_InfiniteAmmo();// 0x27759b0
	void OnRep_HUDTimerPriorities();// 0x2775990
	void OnRep_GlobalActionRestrictor();// 0x2775970
	void OnRep_ExpectedPhaseCount();// 0x1fc3cf0
	void OnRep_EmoteMusicManagerClass();// 0x2775950
	void OnRep_DisplayCash();// 0x2775930
	void OnRegisteredStimulusObjectDestroyed(Actor* DestroyedActor);// 0x27758b0
	void OnObjectiveTimerTick(float Time, int ObjectiveId);// 0x27757e0
	void OnObjectiveTimerComplete(int ObjectiveId);// 0x2775760
	void OnObjectiveTimerActive(bool Active, int ObjectiveId);// 0x27756a0
	void OnGameObjectiveStateChangedCallback(interface classNone Objective);// 0x2775600
	void OnGameObjectiveDestroyed(Actor* ObjectiveAsActor);// 0x2775580
	void NotifyExitDropship(KSCharacter* Jumper);// 0x2775500
	void NotifyDropshipDoorOpened();// 0x27754e0
	void NetMulticast_RequestEmoteOnCinematicCharacter(KSPlayerState* CallingPlayerState, KSEmote* Emote);// 0x2775410
	void Multicast_UnregisterGameObjective(Actor* ObjectiveAsActor);// 0x2775380
	void Multicast_RegisterGameObjective(int ObjectiveId, Actor* ObjectiveAsActor);// 0x27752b0
	void Multicast_ObjectiveStateChanged(Actor* ObjectiveAsActor, KSObjectiveState ObjectiveState);// 0x2775190
	void LootRespawnTimerTick(float Seconds, enum Rarity);// 0x27750d0
	void LootRespawnTimerComplete(enum Rarity);// 0x2775050
	void LootRespawnTimerActive(bool bActive, enum Rarity);// 0x2774f80
	bool IsRoyaleMode();// 0x2774f50
	bool IsPostSelectionCinematicDisabled();// 0x2774f30
	bool IsMVPLineupCinematicActive();// 0x2774f00
	bool IsLocalPlayerWinner();// 0x2774ed0
	bool IsKillCamRecording();// 0x2774eb0
	bool IsInSetup();// 0x2774e80
	bool IsInSelection();// 0x2774e50
	bool IsCinematicSubLevelActive(FString CinematicSubLevelName);// 0x2774da0
	bool IsAnyCinematicSubLevelActive();// 0x2774d70
	bool HasCompletedMatchPrePrep();// 0x2774d40
	void HandleStatUpdated(int64 PlayerId, KSScoreboardStat StatStruct, float NewTotalProgress);// 0x2774b90
	Actor*[] GetWorldDeployables();// 0x2774b60
	int GetWinningTeamNum();// 0x2774b30
	void GetUIMatchTime(out float OutTimeRemaining, out float OutTotalTime);// 0x2774a40
	KSItemDrop*[] GetTrackedWorldDrops();// 0x27749b0
	KSProjectile*[] GetTrackedProjectiles();// 0x2774920
	void GetTeamsWithObjectiveRole(enum Filter, out KSTeamState*[] OutTeams, bool bInverseFilter);// 0x27747f0
	KSTeamState*[] GetTeams();// 0x2774760
	KSTeamState* GetTeamConst(int TeamNum);// 0x27746c0
	KSStatWrapper* GetStatWrapperForTag(out const GameplayTag StatTag);// 0x27745d0
	KSStatWrapper* GetStatWrapperForStatIndex(int StatIndex);// 0x2774540
	KSScoreboardStat[] GetStatsToDisplay();// 0x2774670
	GameplayTag GetStatSortTag();// 0x2774500
	float GetStatForPlayerByStatIndex(int64 PlayerId, int StatIndex);// 0x2774440
	float GetStatForPlayer(int64 PlayerId, out const GameplayTag StatTag);// 0x2774370
	int GetSideForTeam(int TeamNumber);// 0x27742e0
	float GetSecondsFromSurrenderFailure();// 0x27742b0
	float GetSecondsFromPlayerDisconnect();// 0x2774280
	float GetSecondsFromMatchStart();// 0x2774250
	KSScoreboardStat[] GetScoreboardStatsToDisplay();// 0x2774200
	KSHeatSourceComponent*[] GetRegisteredHeatSources();// 0x2774170
	int GetPointLead();// 0x2774140
	KSPlayerState* GetPlayerStateByPlayerId(int64 InPlayerId);// 0x27740b0
	bool GetPlayerIdentityDataByPlayerState(KSPlayerState* PlayerState, out KSPlayerIdentityData PlayerIdentityData);// 0x2773f60
	bool GetPlayerIdentityDataByPersistentPlayer(KSPersistentPlayerData* PersistentPlayer, out KSPlayerIdentityData PlayerIdentityData);// 0x2773e10
	KSPersistentPlayerData* GetPersistentPlayerDataById(out const KSPersistentPlayerId InId);// 0x2773d60
	float[] GetOrderedStatsForPlayer(int64 PlayerId);// 0x2773c80
	KSHUDComponent_Objective* GetObjectiveHUDComponent();// 0x2773c40
	int GetNumDebugCinematicRogues();// 0x2773c20
	int GetNextAvailableSide();// 0x2773bf0
	KSMVPDeterminant* GetMVPDeterminant();// 0x2773870
	KSMiniMapAssistant* GetMiniMapAssistant();// 0x2773bd0
	enum GetMatchTimerState();// 0x2773ba0
	void GetMatchTimer(out float OutPhaseTimeRemaining, out float OutTotalPhaseTime);// 0x2773ac0
	FName GetMatchPhaseName();// 0x2773a80
	MatchPhase GetMatchPhase();// 0x2773a40
	FName GetMatchDescription();// 0x2773a00
	<enum,enum> GetMarkerTimerPriorities();// 0x2773890
	Pawn* GetKillCamSecondaryFocusPawn(int LocalPlayerIndex);// 0x27737a0
	KSProjectile* GetKillCamFocusSpecial(int LocalPlayerIndex);// 0x27736d0
	Pawn* GetKillCamFocusPawn(int LocalPlayerIndex);// 0x2773600
	Actor* GetKillCamActor(int Guid, int LocalPlayerIndex);// 0x2773540
	<enum,enum> GetHUDTimerPriorities();// 0x27733d0
	class KSHUDAnnouncementComponent GetHUDAnnouncementComponentClass();// 0x27733b0
	void GetGameObjectives(out interface classNone[] objectives);// 0x2773300
	interface classNone GetGameObjectiveById(int ID);// 0x2773260
	KSTeamState* GetFirstTeamWithObjectiveRole(enum Filter);// 0x27731d0
	int GetFirstTeamForSide(int SideNumber);// 0x2773140
	KSRoyaleSafeZone* GetFirstRoyaleZone();// 0x2773110
	KSAnnouncer* GetFirstAnnouncer();// 0x27730e0
	float GetExpectedTimeForRemainingPhases();// 0x27730c0
	int GetExpectedPhaseCount();// 0x27730a0
	float GetEstimatedRemainingRoundTime();// 0x2773050
	KSCinematicDataContainer* GetCinematicDataContainer();// 0x2773030
	float GetCachedValueForKey(FString InKey);// 0x2772f80
	KSTeamState* GetAttackingTeam();// 0x2772f50
	void GetAllTeams(out KSTeamState*[] AllTeams);// 0x2772e80
	void GetAllPersistentPlayerDataForTeamNumber(int TeamNumber, out <KSPersistentPlayerData*> OutPlayerData);// 0x2772d10
	void GetAllPersistentPlayerData(out <KSPersistentPlayerData*> OutPlayerData);// 0x2772be0
	bool GetAllowPlayersToReselectJob();// 0x2772f30
	void GetAllFriendlyTeams(PlayerController* InPlayerController, out KSTeamState*[] FriendlyTeams);// 0x2772af0
	void GetAllEnemyTeams(PlayerController* InPlayerController, out KSTeamState*[] EnemyTeams);// 0x2772a00
	FString[] GetActiveCinematicSubLevelNames();// 0x27729d0
	KSCinematicSequenceManager* GetActiveCinematicSequenceManager();// 0x27729b0
	void FlipTeamSides();// 0x2772990
	void FindLastTeam(out KSTeamState* outLastTeam, out int outNumTeamsRemaining);// 0x27728b0
	void EndGameInSurrender(int WinningTeamNum);// 0x2772830
	bool DoesQueueAllowSurrender();// 0x2772800
	void ClientsNotifyWinnerSet(int TeamNum);// 0x2772770
	void ClientsNotifyLastManStanding(KSPlayerState* LastPlayer);// 0x27726e0
	void ClearMarkerTimerPriorities();// 0x27726a0
	void ClearHUDTimerPriorities();// 0x2772660
	void CheatSetMatchPhase(out const FName InMatchPhaseName);// 0x27725d0
	bool CharacterBodiesPersistAfterDeath();// 0x27725b0
	bool CanDownPlayers();// 0x2772580
	bool CanDownBots();// 0x2772550
	int CalculateCashForAssist(float DamagePercent);// 0x27724c0
	void BroadcastTeamSidesFlipped();// 0x1fc2a50
	void BroadcastKillCamParameters(Pawn* InPawn, Pawn* InSecondaryPawn, Actor* InSpecialDamageCauser);// 0x27723c0
	bool BlueprintIsMatchInProgress();// 0x2772390
	bool BlueprintHasMatchEnded();// 0x2772360
	void BindGameObjectiveStateTimerCallbacks(interface classNone Objective);// 0x27722c0
	bool AllowsHumanBackfill();// 0x27722a0
	int AddGameDisplayInfo(DisplayInfo DisplayInfo);// 0x2771fd0
	void AddDeployable(interface classNone Deployable);// 0x2771f30

--------------------------------
Class: PGame_GameState.GameState.GameStateBase.Info.Actor.Object
	FString r_SonyMatchIdForPlayerFeedback;//[Offset: 0x290, Size: 1]
	void OnRep_SonyMatchIdForPlayerFeedback();// 0xd94a20

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x270, Size: 1]
	FName PreviousMatchState;//[Offset: 0x278, Size: 1]
	int ElapsedTime;//[Offset: 0x280, Size: 1]
	void OnRep_MatchState();// 0xe87e90
	void OnRep_ElapsedTime();// 0xe87320
	bool CheckIsFriendly(const Actor* pActor1, const Actor* pActor2);// 0x4563520
	bool CheckIsEnemy(const Actor* pActor1, const Actor* pActor2);// 0x4563450

--------------------------------
Class: KSPlayerIdentitiesContainer.FastArraySerializer
	KSPlayerIdentityData[] ReplicatedData;//[Offset: 0x108, Size: 1]

--------------------------------
Class: KSPlayerIdentityData.FastArraySerializerItem
	KSPersistentPlayerId ID;//[Offset: 0x10, Size: 1]
	KSItem* avatar;//[Offset: 0x20, Size: 1]
	KSItem* Banner;//[Offset: 0x48, Size: 1]
	KSItem* PreferredJob;//[Offset: 0x70, Size: 1]
	KSItem* Border;//[Offset: 0x98, Size: 1]
	KSItem* Title;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: KSPersistentPlayerId
	SerializedMctsNetId NetId;//[Offset: 0x0, Size: 1]
	int EngineId;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SerializedMctsNetId
	uint64 A;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSLagCompensatedActor.Actor.Object
	KSLagCompensatedActor* RealActor;//[Offset: 0x220, Size: 1]
	KSLagCompensatedActor* FakeActor;//[Offset: 0x228, Size: 1]
	float PredictedSpawnTimeoutTime;//[Offset: 0x230, Size: 1]
	bool bDestroyFakeOnYieldToReal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x234, Size: 1]
	int DefaultTeamNum;//[Offset: 0x238, Size: 1]
	SerializedMctsNetId InstigatorId;//[Offset: 0x240, Size: 1]
	uint64 LagCompActorID;//[Offset: 0x248, Size: 1]
	void YieldToRealActor();// 0x1fa1660
	void TryToDestroy();// 0x279e4e0
	void SetLagCompActorIDFromWeapon(KSWeapon* SpawningWeapon);// 0x279e230
	void SetLagCompActorIDFromParentProjectile(KSProjectile* ParentProjectile, int Index);// 0x279e170
	void SetLagCompActorIDFromParentAgent(KSAgentBase* ParentAgent, int Index);// 0x279e0b0
	void SetLagCompActorIDFromModInstance(KSPlayerModInstance* SpawningModInst);// 0x279e030
	void RealActorTakeOver();// 0x1fa5370
	void RealActorDestroyed(Actor* Real);// 0x279d7b0
	void OnTakeOverAsRealActor();// 0x1f9f700
	void OnRep_LagCompActorID();// 0x279d500
	void OnRealActorSpawn(KSLagCompensatedActor* Real);// 0x2760bd0
	void OnPlayerStateChanged(PlayerState* InPlayerState);// 0x279d480
	void OnPlayerSpawned(KSCharacterBase* InCharacter);// 0x279d400
	bool IsClientPredictedActor();// 0x279cf70
	bool IsActiveRealActor();// 0x279cde0
	void InitializeRealActor();// 0xd137b0
	void InitializeFakeActor();// 0x2743930
	void FakeDestroyCleanup();// 0x1fa35a0

--------------------------------
Class: KSProjectile.KSLagCompensatedActor.Actor.Object
	KSEquipmentContainer EquipmentContainer;//[Offset: 0x2d8, Size: 1]
	KSWeaponComponent* WeaponComponent;//[Offset: 0x500, Size: 1]
	KSEquipmentId WeaponComponentEquipmentId;//[Offset: 0x508, Size: 1]
	KSWeaponAsset* CachedWeaponAsset;//[Offset: 0x510, Size: 1]
	enum WeaponComponentType;//[Offset: 0x518, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0x520, Size: 1]
	GameplayTagContainer SkinTagContainer;//[Offset: 0x530, Size: 1]
	float HorizontalThrowSpeed;//[Offset: 0x568, Size: 1]
	float MaxSpeed;//[Offset: 0x56c, Size: 1]
	bool bModifyInitialSpeedWithPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	bool bDeadOrDownedDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571, Size: 1]
	bool bCanBeIntercepted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x572, Size: 1]
	SceneComponent* CollisionComponent0;//[Offset: 0x578, Size: 1]
	ProjectileMovementComponent* ProjectileMovementComponent;//[Offset: 0x580, Size: 1]
	HitResult ProjectileHit;//[Offset: 0x588, Size: 1]
	float LifeSpanAfterDeactivate;//[Offset: 0x610, Size: 1]
	bool bShouldHideOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 1]
	bool bStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 1]
	int NumBounces;//[Offset: 0x618, Size: 1]
	int NumPenetrations;//[Offset: 0x61c, Size: 1]
	float AdditionalPredictionTimeLenience;//[Offset: 0x630, Size: 1]
	float AdditionalPredictionArcTime;//[Offset: 0x634, Size: 1]
	float HitValidationLenience;//[Offset: 0x638, Size: 1]
	bool bValidateHitsWithCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c, Size: 1]
	HitResult StoppingHit;//[Offset: 0x640, Size: 1]
	bool bAttachWhenStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 1]
	bool bDetachWhenBumped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 1]
	bool bSimulatePhysicsWhenStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ca, Size: 1]
	bool bFreezeProjectileOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cb, Size: 1]
	bool bDeflectOffShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cc, Size: 1]
	bool bDealPointDamageAfterDetach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e0, Size: 1]
	float DebugDrawLifetime;//[Offset: 0x6e4, Size: 1]
	bool bCreateClusterSegmentsOnStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e8, Size: 1]
	bool bCreateClusterSegmentsOnExplode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e9, Size: 1]
	MulticastInlineDelegateProperty OnWeaponAssetSet;//[Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x710, Size: 1]
	KSWeaponAsset* ParentWeaponAsset;//[Offset: 0x718, Size: 1]
	KSWeaponAsset* DamageWeaponAssetOverride;//[Offset: 0x720, Size: 1]
	KSWeapon* SpawningWeapon;//[Offset: 0x728, Size: 1]
	float TimeCooked;//[Offset: 0x730, Size: 1]
	Vector SpawnLocation;//[Offset: 0x734, Size: 1]
	Rotator SpawnRotation;//[Offset: 0x740, Size: 1]
	PrimitiveComponent* PrimitiveCollisionComponent;//[Offset: 0x750, Size: 1]
	Vector LocationLastFrame;//[Offset: 0x758, Size: 1]
	bool bDestroyUponMVPStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x764, Size: 1]
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x765, Size: 1]
	enum DeactivateExplosionType;//[Offset: 0x766, Size: 1]
	bool bDeactivateInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x767, Size: 1]
	MulticastInlineDelegateProperty OnProjectileDeactivated;//[Size: 1]
	MulticastInlineDelegateProperty OnProjectileInitializationComplete;//[Size: 1]
	bool bCanBeKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	float MaxHealth;//[Offset: 0x794, Size: 1]
	bool bSetInstigatorToKiller;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x798, Size: 1]
	float CurrentHealth;//[Offset: 0x79c, Size: 1]
	float LifeSpanAfterKilled;//[Offset: 0x7a0, Size: 1]
	bool bExplodeOnKilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	Controller* FriendlyKiller;//[Offset: 0x7a8, Size: 1]
	bool bProjectileKillPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b0, Size: 1]
	MulticastInlineDelegateProperty OnProjectileKilled;//[Size: 1]
	bool bAffectsFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	bool bAllowFriendlyPlayersToDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c9, Size: 1]
	bool bPenetratesFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ca, Size: 1]
	bool bAffectsEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cb, Size: 1]
	bool bPenetratesEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc, Size: 1]
	bool bHasPlayedExplosion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd, Size: 1]
	MulticastInlineDelegateProperty OnPlayExplosion;//[Size: 1]
	ParticleSystem* DefaultSpang;//[Offset: 0x7e0, Size: 1]
	<byte,ParticleSystem*> SurfaceSpangs;//[Offset: 0x7e8, Size: 1]
	float SpinsPerSecond;//[Offset: 0x838, Size: 1]
	float SpeedToReachSpinsPerSecond;//[Offset: 0x83c, Size: 1]
	Vector SpinAxis;//[Offset: 0x840, Size: 1]
	bool bSpinAfterDetaching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool bCanBreakDestructibles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	KSInteractableComponent* InteractableComponent;//[Offset: 0x850, Size: 1]
	bool bCanReclaim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x858, Size: 1]
	bool bDestroyOnReclaim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	float InteractionDistanceOffset;//[Offset: 0x85c, Size: 1]
	enum ReclaimPermissions;//[Offset: 0x860, Size: 1]
	bool bShouldRestoreWeaponAssetOnReclaim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x861, Size: 1]
	KSCharacter* Reclaimer;//[Offset: 0x868, Size: 1]
	bool bReclaimPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x870, Size: 1]
	int ReclaimStock;//[Offset: 0x874, Size: 1]
	MulticastInlineDelegateProperty OnReclaim;//[Size: 1]
	bool bShouldModifyVisibilityChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x888, Size: 1]
	float VisibilityDistance;//[Offset: 0x88c, Size: 1]
	bool bShowOnHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890, Size: 1]
	Object* WidgetIcon;//[Offset: 0x898, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0x8a0, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0x8c8, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x8f0, Size: 1]
	enum WidgetIconAudience;//[Offset: 0x918, Size: 1]
	enum OverlayIconAudience;//[Offset: 0x919, Size: 1]
	ProjectileWidgetInfo[] WidgetInfos;//[Offset: 0x920, Size: 1]
	int OriginalOwnerId;//[Offset: 0x930, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x938, Size: 1]
	void UpdateSpinRotation(float DeltaSeconds);// 0x281dda0
	void UpdateIgnoreActorWhenMovingOnCollider();// 0x281dd80
	void TriggerExplosionFromHitResult(out const HitResult HitResult, enum ExplosionType);// 0x281dc50
	void TriggerExplosion(out const ProjectileExplosionInfo ExplosionInfo);// 0x281dbb0
	void TakeoverDelayComplete();// 0x281db90
	void SpawnSpang(out const HitResult Hit);// 0x281dab0
	void SimulateExplosion();// 0x2d74e00
	bool ShouldPenetrate(out const HitResult HitResult);// 0x281d850
	bool ShouldBounceOff(out const HitResult HitResult);// 0x281d780
	void SetWeaponAsset(KSWeaponAsset* InAsset);// 0x281d650
	void SetSkinObjectParent(MultiSkinObject* InParent);// 0x2d74e00
	void SetHorizontalThrowSpeed(float InSpeed);// 0x2731700
	void SetFumbled();// 0x281d4b0
	void SetDamageOverrideWeaponAsset(KSWeaponAsset* InWeaponAsset);// 0x281d430
	void ServerProcessPredictedHits(const LaggedProjectileHit[] PredictedHits);// 0x281d370
	void RestartMovementAfterStop();// 0x1fc6620
	void RecordPredictedHits(out HitResult[] HitResults, enum PredictionType);// 0x281d240
	void RecordPredictedHit(out const HitResult HitResult, enum PredictionType);// 0x281d130
	bool Reclaim(KSCharacter* ReclaimingCharacter);// 0x281d090
	void PlayFizzle(out const ProjectileExplosionInfo ExplosionInfo);// 0x2d74e00
	void PlayExplosion(out const ProjectileExplosionInfo ExplosionInfo);// 0x2d74e00
	void OnTimeCookedSet();// 0x1fa0540
	void OnRootComponentDetached(SceneComponent* DetachedComponent);// 0x281cee0
	void OnRep_WeaponAsset();// 0x1fdc270
	void OnRep_TimeCooked();// 0x281cec0
	void OnRep_StoppingHit();// 0x281cea0
	void OnRep_ReclaimStock();// 0x281ce80
	void OnRep_ProjectileHit();// 0xdf0300
	void OnRep_ParentWeaponAsset();// 0x1fc70b0
	void OnRep_CurrentHealth();// 0x281ce40
	bool OnProjectileStopped(out const HitResult HitResult);// 0x281cab0
	bool OnProjectilePenetrated(out const HitResult HitResult);// 0x281c9e0
	bool OnProjectileBounced(out const HitResult HitResult, out const Vector ImpactVelocity);// 0x281c8c0
	void OnNewPlayerState(KSPlayerState* NewState);// 0x281c5c0
	void OnKilled(Controller* EventInstigator);// 0x27ba970
	void OnInstigatorChanged();// 0x1fc30e0
	void NotifyPredictedHitRejected();// 0x1fc3460
	void NativeOnProjectileStopped(out const HitResult HitResult);// 0x281c500
	void NativeOnProjectilePenetrated(out const HitResult HitResult);// 0x281c440
	void NativeOnProjectileBounced(out const HitResult HitResult, out const Vector ImpactVelocity);// 0x281c330
	float ModifyDamageDealt(float DamageAmount, out const DamageEvent DamageEvent, Controller* EventInstigator, Actor* DamageCauser, Actor* DamagedActor);// 0x281c160
	bool IsStopped();// 0x281c140
	bool IsFullyCooked();// 0x281c110
	bool IsActive();// 0x281c0f0
	void HandleMVPPhase(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x281bf60
	KSWeaponComponent* GetWeaponComponent();// 0xfa7620
	KSWeaponAsset* GetWeaponAsset();// 0x281bf40
	float GetTimeCooked();// 0x281bf20
	Rotator GetSpawnRotation();// 0x281bed0
	Vector GetSpawnLocation();// 0x281bea0
	KSWeapon* GetSpawningWeapon();// 0x281bf00
	int GetReclaimStock();// 0x281be60
	FText GetReclaimPromptText(KSCharacter* Character);// 0x281bd60
	FText GetReclaimProgressText(KSCharacter* Character);// 0x281bc60
	SceneComponent* GetProjectileUpdatedComponent();// 0x281bc40
	KSWeaponAsset* GetParentWeaponAsset();// 0x281ba90
	void GetOutlineableMeshes(out PrimitiveComponent*[] OutMeshes);// 0x2d74e00
	int GetNumPenetrations();// 0x281b9a0
	int GetNumBounces();// 0x281b980
	ProjectileMovementComponent* GetMovementComponent();// 0x281b960
	float GetHorizontalThrowSpeed();// 0x281b900
	KSWeaponAsset* GetDamageWeaponAsset();// 0x281b8d0
	Controller* GetDamageInstigator();// 0x281b8a0
	float GetDamageFalloffRangeScaler();// 0x281b870
	float GetDamageFalloffRangeExtender();// 0x281b840
	SceneComponent* GetComponentToRotate();// 0x281b810
	KSProjectileClusterComponent* GetClusterComponent();// 0x281b7e0
	void GetAttachments(out KSWeaponAttachment*[] OutWeaponAttachments);// 0x281b730
	void FixupWeaponComponent();// 0x1fc2a70
	void DoRadialDamageDefault();// 0x281b590
	bool DoesPenetrateFriendly();// 0x281b610
	bool DoesPenetrateEnemy();// 0x281b5f0
	bool DoesAffectFriendly();// 0x281b5d0
	bool DoesAffectEnemy();// 0x281b5b0
	Actor*[] DetermineIgnoredActors(out const HitResult HitResult);// 0x281b480
	void Deactivate();// 0x1fdc7f0
	void CreateClusterSegmentsFromStoppingHit();// 0x281b460
	float ComponentTakeDamage(PrimitiveComponent* HitComponent, float DamageAmount);// 0x281b390
	void ChangeOwnerWithCollisionUpdates(Actor* NewOwner, Pawn* NewInstigator);// 0x281b210
	bool CanEverBreakDestructibles();// 0x281b140
	bool CanCharacterReclaim(KSCharacter* QueriedCharacter);// 0x27bf010
	void BroadcastExplosion(const ProjectileExplosionInfo ExplosionInfo);// 0x281b030
	bool AffectsActor(Actor* InActor);// 0x281af90
	bool AddAttachment(KSWeaponAttachment* InAttachment);// 0x281af00

--------------------------------
Class: ProjectileExplosionInfo
	enum ExplosionType;//[Offset: 0x0, Size: 1]
	byte SurfaceType;//[Offset: 0x1, Size: 1]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x4, Size: 1]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf0, Size: 1]
	float MaxSpeed;//[Offset: 0xf4, Size: 1]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8, Size: 1]
	bool bRotationRemainsVertical;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf8, Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf8, Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf8, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf8, Size: 1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf8, Size: 1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf8, Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf8, Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf9, Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf9, Size: 1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf9, Size: 1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf9, Size: 1]
	float PreviousHitTime;//[Offset: 0xfc, Size: 1]
	Vector PreviousHitNormal;//[Offset: 0x100, Size: 1]
	float ProjectileGravityScale;//[Offset: 0x10c, Size: 1]
	float Buoyancy;//[Offset: 0x110, Size: 1]
	float Bounciness;//[Offset: 0x114, Size: 1]
	float Friction;//[Offset: 0x118, Size: 1]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x11c, Size: 1]
	float MinFrictionFraction;//[Offset: 0x120, Size: 1]
	MulticastInlineDelegateProperty OnProjectileBounce;//[Size: 1]
	MulticastInlineDelegateProperty OnProjectileStop;//[Size: 1]
	float HomingAccelerationMagnitude;//[Offset: 0x148, Size: 1]
	SceneComponent* HomingTargetComponent;//[Offset: 0x14c, Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x154, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x158, Size: 1]
	int BounceAdditionalIterations;//[Offset: 0x15c, Size: 1]
	float InterpLocationTime;//[Offset: 0x160, Size: 1]
	float InterpRotationTime;//[Offset: 0x164, Size: 1]
	float InterpLocationMaxLagDistance;//[Offset: 0x168, Size: 1]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x16c, Size: 1]
	void StopSimulating(out const HitResult HitResult);// 0x4624450
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x46243c0
	void SetInterpolatedComponent(SceneComponent* Component);// 0x4624230
	void ResetInterpolation();// 0x27b5500
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x2d74e00
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x2d74e00
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x4623fc0
	Vector LimitVelocity(Vector NewVelocity);// 0x4623f10
	bool IsVelocityUnderSimulationThreshold();// 0x4623eb0
	bool IsInterpolationComplete();// 0x4623e80

--------------------------------
Class: KSInteractableComponent.ActorComponent.Object
	class KSInteractionType* InteractionType;//[Offset: 0xb0, Size: 1]
	int InteractionPriority;//[Offset: 0xb8, Size: 1]
	enum InputType;//[Offset: 0xbc, Size: 1]
	float InteractionDuration;//[Offset: 0xc0, Size: 1]
	bool bPredictInteractionLocally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4, Size: 1]
	bool bAutomaticInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5, Size: 1]
	bool bAllowMultipleInteractors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6, Size: 1]
	bool bCanInteractWithModifiedRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7, Size: 1]
	bool bShouldCauseWeaponRetrieve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 1]
	FName AnimationTag;//[Offset: 0xcc, Size: 1]
	bool bCanInteractFromBehind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4, Size: 1]
	bool bInteractRestrictsMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5, Size: 1]
	bool bCanInteractWhileSkydiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd6, Size: 1]
	bool bCanInteractWhileVaulting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd7, Size: 1]
	bool bMustCrouchWhileInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8, Size: 1]
	KSInteractableCameraTransition CameraTransition;//[Offset: 0xe0, Size: 1]
	bool bHiddenInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bShouldDisplayPrompt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	bool bShouldDisplayProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x112, Size: 1]
	MulticastInlineDelegateProperty OnHoveringInteractorsChanged;//[Size: 1]
	int NumActiveInteractions;//[Offset: 0x128, Size: 1]
	bool bInteractionBlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c, Size: 1]
	KSInteractionBlocker[] InteractionBlockers;//[Offset: 0x130, Size: 1]
	Actor*[] HoveringInteractors;//[Offset: 0x140, Size: 1]
	KSInteractionManager*[] ActiveInteractions;//[Offset: 0x150, Size: 1]
	bool ShouldPredictInteractionLocally();// 0x27827b0
	bool ShouldInteractRestrictMovement();// 0x2782790
	bool ShouldDisplayPrompt();// 0x2782770
	bool ShouldDisplayProgress();// 0x2782750
	bool ShouldCrouchWhileInteracting();// 0x2782730
	bool ShouldCauseWeaponRetrieve();// 0x2782710
	void RemoveInteractionBlocker(KSInteractionBlocker InInteractionBlocker);// 0x2782340
	void RemoveHoveringInteractor(Actor* InInteractor);// 0x27822c0
	bool IsHiddenInteraction();// 0xe869f0
	bool IsAutomaticInteraction();// 0x2781ca0
	class KSInteractionType GetInteractionType();// 0x26af820
	int GetInteractionPriority();// 0x2781910
	float GetInteractionDuration();// 0x26bca30
	enum GetInputType();// 0x273fcf0
	KSInteractableCameraTransition GetCameraTransition();// 0x2781530
	FName GetAnimationTag();// 0x2781460
	bool CanInteractWithModifiedRange();// 0x2780f10
	bool CanInteractWhileVaulting();// 0x2780ef0
	bool CanInteractWhileSkydiving();// 0x2780ed0
	bool CanInteractFromBehind();// 0x2780eb0
	bool AllowsMultipleInteractors();// 0x2780e90
	void AddInteractionBlocker(KSInteractionBlocker InInteractionBlocker);// 0x2780e10

--------------------------------
Class: KSInteractionType.Object
	FName InteractionMode;//[Offset: 0x28, Size: 1]
	bool bInteractionStartsCameraLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	SkinnableAudioEvent CharacterStartSound;//[Offset: 0x38, Size: 1]
	SkinnableAudioEvent InteractableStartSound;//[Offset: 0x48, Size: 1]
	SkinnableAudioEvent LocalStartSound;//[Offset: 0x58, Size: 1]
	<enum,SkinnableAudioEvent> CharacterEndSound;//[Offset: 0x68, Size: 1]
	<enum,SkinnableAudioEvent> InteractableEndSound;//[Offset: 0xb8, Size: 1]
	<enum,SkinnableAudioEvent> LocalEndSound;//[Offset: 0x108, Size: 1]
	bool bAutomaticallyPlayAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool bAttachCharacterAutoAudioToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool bAttachInteractableAutoAudioToSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	KSParticleSystemAttachment CharacterStartEffect;//[Offset: 0x160, Size: 1]
	KSParticleSystemAttachment InteractableStartEffect;//[Offset: 0x198, Size: 1]
	<enum,KSParticleSystemAttachment> CharacterEndEffect;//[Offset: 0x1d0, Size: 1]
	<enum,KSParticleSystemAttachment> InteractableEndEffect;//[Offset: 0x220, Size: 1]
	ParticleSystemComponent* CurrentCharacterEffect;//[Offset: 0x270, Size: 1]
	ParticleSystemComponent* CurrentInteractableEffect;//[Offset: 0x278, Size: 1]
	FName StartInteractionMontageRow;//[Offset: 0x280, Size: 1]
	<GameplayTag,FName> TagToInteractMontageRowMap;//[Offset: 0x288, Size: 1]
	<enum,FName> EndInteractionMontageSection;//[Offset: 0x2d8, Size: 1]
	<enum,FName> EndInteractionMontageRow;//[Offset: 0x328, Size: 1]
	GameplayTagContainer DontSuppressRetrieveForWeaponTypes;//[Offset: 0x378, Size: 1]
	void PlayInteractionAnimation(bool bIsStart, KSCharacter* Character, Actor* InInteractionTarget, enum Result, Vector InteractableLocation);// 0x2782100
	ParticleSystemComponent* MakeInteractableEffect(bool bIsStart, KSCharacter* Character, Actor* Interactable, enum Result, Vector InteractableLocation);// 0x2781e90
	ParticleSystemComponent* MakeCharacterEffect(bool bIsStart, KSCharacter* Character, Actor* Interactable, enum Result, Vector InteractableLocation);// 0x2781cc0
	KSParticleSystemAttachment GetInteractableEffect(bool bIsStart, enum Result);// 0x2781720
	KSParticleSystemAttachment GetCharacterEffect(bool bIsStart, enum Result);// 0x2781570

--------------------------------
Class: SkinnableAudioEvent
	FName SoundRowName;//[Offset: 0x0, Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSParticleSystemAttachment
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 1]
	FName SocketName;//[Offset: 0x8, Size: 1]
	Vector Scale;//[Offset: 0x10, Size: 1]
	Vector AttachmentOffset;//[Offset: 0x1c, Size: 1]
	Rotator AttachmentRotationOffset;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSInteractableCameraTransition
	FName CameraName;//[Offset: 0x0, Size: 1]
	float TransitionInTime;//[Offset: 0x8, Size: 1]
	byte TransitionInFunction;//[Offset: 0xc, Size: 1]
	float TransitionInExp;//[Offset: 0x10, Size: 1]
	float TransitionOutTime;//[Offset: 0x14, Size: 1]
	bool bForceCameraShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	enum CameraShoulder;//[Offset: 0x19, Size: 1]
	float RotationLockAngle;//[Offset: 0x1c, Size: 1]
	bool RotationLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool bLockPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool bLockYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool bFaceInteractable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool bCameraShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	class CameraShake* CameraShake;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSInteractionBlocker
	FName BlockReason;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSInteractionManager.ActorComponent.Object
	float CachedInteractionTimeStamp;//[Offset: 0xe8, Size: 1]
	byte InteractRequestId;//[Offset: 0xf0, Size: 1]
	KSInteractionState* State;//[Offset: 0xf8, Size: 1]
	KSInteractionState* PreviousState;//[Offset: 0x100, Size: 1]
	KSCharacter* User;//[Offset: 0x108, Size: 1]
	interface class None* Interactable;//[Offset: 0x110, Size: 1]
	KSInteractableCameraTransition CameraTransition;//[Offset: 0x120, Size: 1]
	void ServerTap(bool bAllowTapAsHold);// 0x2782650
	void ServerStartNew(int InInteractionId, Actor* InInteractable, KSCharacter* InUser);// 0x2782520
	void ServerHoldRelease();// 0x27824d0
	void ServerHold(bool bAllowHoldAsTap);// 0x2782410
	void ServerCancel();// 0x27823c0
	void OnInteractableDestroyed(Actor* DestroyedInteractable);// 0x2782060
	void ClientInteractionStopped(int InInteractionId, enum Result);// 0x27810d0
	void ClientInteractionStarted(int InInteractionId, float Duration);// 0x2781000

--------------------------------
Class: KSInteractionState.Object
	enum Result;//[Offset: 0x28, Size: 1]

--------------------------------
Class: ProjectileWidgetInfo

--------------------------------
Class: LaggedProjectileHit
	HitResult HitResult;//[Offset: 0x0, Size: 1]
	float ClientHitTimeStamp;//[Offset: 0x88, Size: 1]
	float AdditionalPredictionTime;//[Offset: 0x8c, Size: 1]
	enum PredictionType;//[Offset: 0x90, Size: 1]

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MatchPhase
	FName Name;//[Offset: 0x0, Size: 1]
	FName Description;//[Offset: 0x8, Size: 1]
	int ID;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSProjectileClusterComponent.ActorComponent.Object
	enum ProjectileClusterSpreadType;//[Offset: 0xbc, Size: 1]
	Vector ClusterSegmentSpawnOffset;//[Offset: 0xc0, Size: 1]
	bool bLinkSpreadGrenades;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool bIgnoreZAxisForClusterDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcd, Size: 1]
	bool bAlwaysUseInitialClusterDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce, Size: 1]
	float RandomMinPitch;//[Offset: 0xd0, Size: 1]
	float RandomMaxPitch;//[Offset: 0xd4, Size: 1]
	float RandomMinYaw;//[Offset: 0xd8, Size: 1]
	float RandomMaxYaw;//[Offset: 0xdc, Size: 1]
	KSProjectileClusterSegment[] ClusterSegmentDefinitions;//[Offset: 0xe0, Size: 1]
	KSProjectile*[] ClusterSegments;//[Offset: 0xf0, Size: 1]
	MulticastInlineDelegateProperty OnOwnedSegmentKilled;//[Size: 1]
	void OnSegmentKilled(KSProjectile* Segment);// 0x2828360
	KSProjectile*[] GetSpawnedSegments();// 0x26d3360
	Vector GetInitialClusterDirection();// 0x2828030
	Transform GetImpactRelativeSegmentTransform(HitResult Hit, Vector PassThroughVector, Vector AdditionalOffset);// 0x2827e50
	Vector GetClusterSegmentSpawnOffset();// 0x2827e20
	KSProjectileClusterSegment[] GetClusterSegmentDefinitions();// 0x2827d90
	void CreateClusterSegments(HitResult Hit, KSWeapon* WeaponUsed);// 0x2827c50

--------------------------------
Class: KSProjectileClusterSegment
	class KSProjectile* ProjectileClass;//[Offset: 0x0, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x8, Size: 1]
	Vector SpawnOffset;//[Offset: 0x10, Size: 1]
	Rotator InitialRotation;//[Offset: 0x1c, Size: 1]
	Vector Direction;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSAgentBase.KSLagCompensatedActor.Actor.Object
	MulticastInlineDelegateProperty OnAgentRefund;//[Size: 1]
	bool BeginMissionOnPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	InterpToMovementComponent* MovementComponent;//[Offset: 0x288, Size: 1]
	BoxComponent* CollisionBox;//[Offset: 0x290, Size: 1]
	Controller* OwningPlayer;//[Offset: 0x298, Size: 1]
	SkinnableMergedMeshComponent* MeshComponent;//[Offset: 0x2a0, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x2a8, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0x2b0, Size: 1]
	FName[] FullKeywordList;//[Offset: 0x2c0, Size: 1]
	float MaxHealth;//[Offset: 0x2d0, Size: 1]
	enum RefundMethod;//[Offset: 0x2d4, Size: 1]
	KSWeaponAsset* AssociatedWeaponAsset;//[Offset: 0x2d8, Size: 1]
	float CurrentHealth;//[Offset: 0x2e0, Size: 1]
	MulticastInlineDelegateProperty OnHealthUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnAgentMissionBegin;//[Size: 1]
	int OriginalOwnerId;//[Offset: 0x308, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x310, Size: 1]
	void RefundAgentAsset();// 0xd13910
	void OnRep_CurrentHealth();// 0x26cc1a0
	void OnOwnerControlTransferred(KSPlayerState* OldPlayerState, KSPlayerState* NewPlayerState);// 0x26cc020
	void OnMissionBegin();// 0x2d74e00
	void MovementPlaybackStop(out const HitResult ImpactResult, float Time);// 0x26cbe60
	bool IsOwnerLocal();// 0x26cbe30
	KSPlayerState* GetPlayerStateOwner();// 0x26cbc20
	KSCharacter* GetCharacterOwner();// 0x26cbaf0
	KSWeaponAsset* GetAssociatedWeaponAsset();// 0x26cbad0
	void BroadcastMissionBegin();// 0x1fa46b0

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xf0, Size: 1]
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	bool bSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	enum TeleportType;//[Offset: 0xf9, Size: 1]
	enum BehaviourType;//[Offset: 0xfa, Size: 1]
	bool bCheckIfStillInWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb, Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc, Size: 1]
	MulticastInlineDelegateProperty OnInterpToReverse;//[Size: 1]
	MulticastInlineDelegateProperty OnInterpToStop;//[Size: 1]
	MulticastInlineDelegateProperty OnWaitBeginDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnWaitEndDelegate;//[Size: 1]
	MulticastInlineDelegateProperty OnResetDelegate;//[Size: 1]
	float MaxSimulationTimeStep;//[Offset: 0x150, Size: 1]
	int MaxSimulationIterations;//[Offset: 0x154, Size: 1]
	InterpControlPoint[] ControlPoints;//[Offset: 0x158, Size: 1]
	void StopSimulating(out const HitResult HitResult);// 0x4573130
	void RestartMovement(float InitialDirection);// 0x45730b0
	void OnInterpToWaitEndDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2d74e00
	void OnInterpToWaitBeginDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2d74e00
	void OnInterpToStopDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2d74e00
	void OnInterpToReverseDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2d74e00
	void OnInterpToResetDelegate__DelegateSignature(out const HitResult ImpactResult, float Time);// 0x2d74e00
	void FinaliseControlPoints();// 0x4573090

--------------------------------
Class: InterpControlPoint
	Vector PositionControlPoint;//[Offset: 0x0, Size: 1]
	bool bPositionIsRelative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x448, Size: 1]
	float LineThickness;//[Offset: 0x454, Size: 1]
	void SetLineThickness(float InLineThickness);// 0x4526ea0
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x4526dc0
	Vector GetUnscaledBoxExtent();// 0x4526620
	Vector GetScaledBoxExtent();// 0x45265b0

--------------------------------
Class: PGame_ReplicatedTimer
	enum TimerState;//[Offset: 0x8, Size: 1]
	float InitialTime;//[Offset: 0xc, Size: 1]
	float TimeRemaining;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSAccoladeTracker.Object
	AccoladeDisplayInfo AccoladeDisplayInfo;//[Offset: 0x38, Size: 1]
	void StartTracking();// 0x26b68d0
	void ResetTracker();// 0xe8d1d0
	void NativeHandleElimEvent(CombatEventInfo ElimEvent);// 0x26b6650
	void NativeHandleDownEvent(CombatEventInfo DownEvent);// 0x26b6510
	void HandleElimEvent(CombatEventInfo ElimEvent);// 0x26b57b0
	void HandleDownEvent(CombatEventInfo DownEvent);// 0x26b5670
	AccoladeDisplayInfo GetPrimaryAccoladeDisplayInfo();// 0x26b52a0
	bool GetOwningGameMode(out KSGameMode* OutGameMode);// 0x26b51d0
	void DispatchGameStateAccoladeDisplay(KSPlayerState* RelevantPlayer, AccoladeDisplayInfo AccoladeToDisplay, bool IgnoreRelevantPlayerId);// 0x26b48a0

--------------------------------
Class: AccoladeDisplayInfo
	enum Category;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x1, Size: 1]
	Texture2D* DisplayIcon;//[Offset: 0x8, Size: 1]
	FText DisplayTitle;//[Offset: 0x10, Size: 1]
	float DisplayDuration;//[Offset: 0x28, Size: 1]
	int Multiplier;//[Offset: 0x2c, Size: 1]
	KSVoicelineEvent AccoladeVoiceLine;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSVoicelineEvent
	FName EventName;//[Offset: 0x0, Size: 1]
	FName SelfEventName;//[Offset: 0x8, Size: 1]
	enum Audience;//[Offset: 0x10, Size: 1]
	enum VoicelineType;//[Offset: 0x11, Size: 1]
	float ActivationChance;//[Offset: 0x14, Size: 1]
	bool bAffectedByGlobalCooldown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	int CooldownGroup;//[Offset: 0x1c, Size: 1]
	float CooldownDuration;//[Offset: 0x20, Size: 1]
	float VoicelineChangeValue;//[Offset: 0x24, Size: 1]
	enum LinePriority;//[Offset: 0x28, Size: 1]
	bool bPlayedByOwnerAlready;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool bPlaySpecificVoiceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	AkAudioEvent* SpecificAkAudioEvent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSGameMode.PGame_GameMode.PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	MulticastInlineDelegateProperty OnPlayerLogin;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerLogout;//[Size: 1]
	float PlayerReadyTimeoutTime;//[Offset: 0x538, Size: 1]
	class KSPlayerJoinRuleComponent* KSPlayerJoinRuleComponentClass;//[Offset: 0x540, Size: 1]
	KSPlayerJoinRuleComponent* KSPlayerJoinRuleComponent;//[Offset: 0x548, Size: 1]
	KSChargeRuleComponent* ChargeRuleComponent;//[Offset: 0x550, Size: 1]
	KSBackfillRuleComponent* BackfillRuleComponent;//[Offset: 0x558, Size: 1]
	KSPointsToCashRuleComponent* PointsToCashRuleComponent;//[Offset: 0x560, Size: 1]
	bool bCachedShouldPlayersStartSpectatingDefaultCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	KSRespawnConfig RespawnConfiguration;//[Offset: 0x578, Size: 1]
	MulticastInlineDelegateProperty OnPhaseChangeDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPhaseTimerExpired;//[Size: 1]
	MatchPhase MatchPhase;//[Offset: 0x5c0, Size: 1]
	bool bUseMatchTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4, Size: 1]
	float MatchSetupTime;//[Offset: 0x5d8, Size: 1]
	bool bUseSelectionPhase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc, Size: 1]
	float PreSelectionPhaseTime;//[Offset: 0x5e0, Size: 1]
	float SelectionPhaseTime;//[Offset: 0x5e4, Size: 1]
	float PostSelectionPhaseTime;//[Offset: 0x5e8, Size: 1]
	float PostSelectionPhaseMinTime;//[Offset: 0x5ec, Size: 1]
	bool bSkipPostSelectionCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f0, Size: 1]
	float PostSelectionCinematicPhaseTime;//[Offset: 0x5f4, Size: 1]
	bool bUsePostMatchMVPLineup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 1]
	float TimeBeforeMVPLineupCinematicBegins;//[Offset: 0x5fc, Size: 1]
	float PostMatchMVPLineupPhaseTime;//[Offset: 0x600, Size: 1]
	float MatchDefaultPhaseTime;//[Offset: 0x604, Size: 1]
	float MatchTimerUpdatePeriod;//[Offset: 0x638, Size: 1]
	class KSSpawnSelectorComponent* KSSpawnSelectorComponentClass;//[Offset: 0x650, Size: 1]
	class KSSpawnSelectorComponent* KSSpawnSelectorComponentSoftClass;//[Offset: 0x658, Size: 1]
	KSSpawnSelectorComponent* KSSpawnSelectorComponent;//[Offset: 0x680, Size: 1]
	bool bAllowFindInactivePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	bool bUseLoginStartSpotForPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689, Size: 1]
	bool bAIPlayersUseLoginStartSpotForPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a, Size: 1]
	int DefaultTeamCount;//[Offset: 0x6c0, Size: 1]
	enum TeamAssignmentType;//[Offset: 0x6c4, Size: 1]
	bool bFirstDebugPlayerIsOnlySpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c5, Size: 1]
	KSRevealManager* RevealManager;//[Offset: 0x738, Size: 1]
	class KSRevealManager* RevealManagerClass;//[Offset: 0x740, Size: 1]
	MulticastInlineDelegateProperty MatchStatsFinalizedDelegate;//[Size: 1]
	float MatchStartTime;//[Offset: 0x780, Size: 1]
	float MatchEndTime;//[Offset: 0x784, Size: 1]
	bool bIsTutorial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788, Size: 1]
	bool bIsPractice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789, Size: 1]
	bool bIsAiPvpMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78a, Size: 1]
	bool bIsPlayerSpectateOnlyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78b, Size: 1]
	float DefaultMinimapWidth;//[Offset: 0x78c, Size: 1]
	class KSTeamState* DefaultTeamState;//[Offset: 0x790, Size: 1]
	float ReverseFriendlyFireStartThreshold;//[Offset: 0x798, Size: 1]
	float FriendlyFireModiferBase;//[Offset: 0x79c, Size: 1]
	float ReverseFriendlyFireModiferBase;//[Offset: 0x7a0, Size: 1]
	bool bCanDownPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4, Size: 1]
	bool bCanDownBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a5, Size: 1]
	bool bCreditInstantKillWithDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a6, Size: 1]
	bool bCreditSuicideWithDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a7, Size: 1]
	bool bImmediateDeathForLastManStanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8, Size: 1]
	bool bEliminatePlayerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a9, Size: 1]
	bool bPivotToKillerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7aa, Size: 1]
	bool bTrackKillerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ab, Size: 1]
	bool bRevealKillerOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ac, Size: 1]
	bool bShouldRandomizeSides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ad, Size: 1]
	bool bStartJobSelectionOnSideSwap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ae, Size: 1]
	bool bAssistOnReveal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7af, Size: 1]
	bool bClearAssistWithFullHp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7af, Size: 1]
	bool bIsMobileGameMode;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7af, Size: 1]
	bool bUseMobileArmoryLoadouts;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7af, Size: 1]
	KSGlobalShotListener* ShotListener;//[Offset: 0x7b0, Size: 1]
	MulticastInlineDelegateProperty OnTeamSidesFlipped;//[Size: 1]
	bool bClearObjectivesMarkedUsedOnSidesFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	Actor* Winner;//[Offset: 0x7d8, Size: 1]
	Actor* CheatWinner;//[Offset: 0x7e0, Size: 1]
	class KSRewardsCalculator* DefaultRewardsCalculatorClass;//[Offset: 0x7e8, Size: 1]
	bool bIncludeInitialInventoryFromDefaultPawnInStartingInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0, Size: 1]
	KSItem*[] StartingInventory;//[Offset: 0x7f8, Size: 1]
	bool bGiveStartingInventoryToBots;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x808, Size: 1]
	KSItem*[] PlayerSpawnInventory;//[Offset: 0x810, Size: 1]
	KSItem*[] PlayerInitialSpawnInventory;//[Offset: 0x820, Size: 1]
	KSItem*[] PlayerRespawnInventory;//[Offset: 0x830, Size: 1]
	KSPlayerMod*[] PlayerSpawnMods;//[Offset: 0x840, Size: 1]
	KSPlayerMod*[] PlayerInitialSpawnMods;//[Offset: 0x850, Size: 1]
	KSPlayerMod*[] PlayerRespawnMods;//[Offset: 0x860, Size: 1]
	KSPlayerMod* FreefallMod;//[Offset: 0x870, Size: 1]
	bool bIsBotMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a8, Size: 1]
	int StartingCash;//[Offset: 0x8ac, Size: 1]
	MulticastInlineDelegateProperty OnSpecialtyItemVendorLoaded;//[Size: 1]
	bool bUsePlayerLoadouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bDisableLoadoutValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	float WaitForPlayersTimeout;//[Offset: 0xb10, Size: 1]
	<KSWeaponAsset*,int> LoadingLoot;//[Offset: 0xb28, Size: 1]
	bool bPopulateLootSites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78, Size: 1]
	<enum,KSLootGroupGuaranteeMap> LootGroupGuarantees;//[Offset: 0xb80, Size: 1]
	bool bSpawnLootOnMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd0, Size: 1]
	KSLootRaritySwapInfo[] LootRaritySwaps;//[Offset: 0xc28, Size: 1]
	enum LootRespawnMode;//[Offset: 0xc38, Size: 1]
	<enum,float> LootSiteRespawnPeriods;//[Offset: 0xc40, Size: 1]
	KSAIActorCollection* AIActorCollection;//[Offset: 0xce0, Size: 1]
	bool bRecordKillCam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xce8, Size: 1]
	float AFKIdleTime;//[Offset: 0xcec, Size: 1]
	DataTable* AccoladeTrackerDataTable;//[Offset: 0xd28, Size: 1]
	KSAccoladeTracker*[] AccoladeTrackerInstances;//[Offset: 0xd30, Size: 1]
	class KSAccoladeTracker[] AccoladeTrackerClasses;//[Offset: 0xd40, Size: 1]
	KSGameHUDSettings GameModeHUDSettings;//[Offset: 0xd50, Size: 1]
	Actor*[] InteractiveObjectCache;//[Offset: 0xd88, Size: 1]
	class KSOutOfBoundsManager* OutOfBoundsManagerClass;//[Offset: 0xd98, Size: 1]
	KSMatchDataRecorder* MatchDataRecorder;//[Offset: 0xda0, Size: 1]
	bool ShouldForceCompetitiveLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb0, Size: 1]
	enum PerSecondChargeMode;//[Offset: 0xdb1, Size: 1]
	float PerSecondChargePercent;//[Offset: 0xdb4, Size: 1]
	float WeaponChargeRateMultiplier;//[Offset: 0xdb8, Size: 1]
	KSGameRuleComponent*[] GameRules;//[Offset: 0xdc0, Size: 1]
	<FName,FString> EditorPropertyMap;//[Offset: 0xdd0, Size: 1]
	FString FriendlyAudioName;//[Offset: 0xe70, Size: 1]
	class KSAnnouncer* KSAnnouncerClass;//[Offset: 0xe80, Size: 1]
	float RoundTimeRunningOutTime;//[Offset: 0xe88, Size: 1]
	int BurnTestNumberOfRoundToWin;//[Offset: 0xe8c, Size: 1]
	MulticastInlineDelegateProperty OnCharacterControlTransferred;//[Size: 1]
	bool bAllowPlayersToUseUnownedJobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 1]
	int[] AllowedUnownedJobIds;//[Offset: 0xeb8, Size: 1]
	enum EnforcedJobUniqueness;//[Offset: 0xec8, Size: 1]
	class KSJobSelectionRules* JobSelectionRules;//[Offset: 0xed0, Size: 1]
	KSJobSelectionAuthority* JobSelectionAuthority;//[Offset: 0xed8, Size: 1]
	bool bFubarIfNoVendorsByMatchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 1]
	bool bOnlyFubarIfNoJobVendor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee1, Size: 1]
	bool bFubarIfAbsentPlayers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee2, Size: 1]
	enum BotNamingMethod;//[Offset: 0xee5, Size: 1]
	bool bUseIntraScoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 1]
	FText GameModeDisplayName;//[Offset: 0xef8, Size: 1]
	class KSEmoteMusicManager* EmoteMusicManagerClass;//[Offset: 0xf10, Size: 1]
	bool bRequireJobToEnterPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf18, Size: 1]
	KSCinematicDataContainer* CinematicDataContainer;//[Offset: 0xf20, Size: 1]
	KSMVPDeterminant* MVPDeterminant;//[Offset: 0xf28, Size: 1]
	KSSeamlessTravelTransferInfo* SeamlessTravelInfo;//[Offset: 0xf30, Size: 1]
	KSSeamlessTravelSettings SeamlessTravelSettings;//[Offset: 0xf38, Size: 1]
	GameplayTag[] GameModeTags;//[Offset: 0xf50, Size: 1]
	KSScoreboardConfig* ScoreboardConfig;//[Offset: 0xf60, Size: 1]
	int NumericId;//[Offset: 0xf68, Size: 1]
	bool bAbandonPlayersOnLogOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6c, Size: 1]
	KSBotDefinition* BackfillBotDefinition;//[Offset: 0xf70, Size: 1]
	byte NextPawnId;//[Offset: 0xf88, Size: 1]
	GameplayTag[] AllowedJobTags;//[Offset: 0xf90, Size: 1]
	bool UsePlayerLoadouts();// 0x275cb30
	bool UseMobileArmoryLoadouts();// 0x275cb00
	bool UseInitialSpawnPoint();// 0x2725400
	void StartPreSelectionPhase(bool bReset);// 0x275ca70
	bool ShouldGrantAssistOnReveal();// 0x275ca40
	bool ShouldClearAssistAtFullHp();// 0x275ca10
	void SetInfiniteAmmo(bool bValue);// 0x275c980
	Actor* SelectAWinner();// 0x275c950
	void PopulateLootSites();// 0x1fc33e0
	void PopulateInteractiveObjects();// 0x275c930
	bool PlayerCanRestartCommon(Controller* Player);// 0x275c890
	bool PlayerCanEnterPlay(Controller* C);// 0x275c7f0
	void PawnLeavingGame(PlayerController* PawnController);// 0x275c760
	void OnWaitForPlayersExpired();// 0x275c740
	void OnTeamEliminated(KSTeamState* Team);// 0x275c6b0
	void OnPlayerEliminated(KSPlayerState* Player);// 0x275c620
	void OnPlayerDownStateChanged(KSPlayerState* Player);// 0x275c590
	void OnKSCharacterRevived(KSCharacter* InRevivee, KSPlayerState* InReviver);// 0x275c4c0
	void OnKSCharacterRadialMenuItemUsed(KSCharacter* InCharacter, PlayerState* CharacterPlayer, KSRadialMenuItem* RadialMenuItem);// 0x275c3c0
	void OnKSCharacterDowned(KSCharacter* InCharacter, Controller* EventInstigator, class DamageType DamageType, enum HitLocationType, Actor* DamageCauser, float DamageDealt);// 0x275c200
	void OnKSCharacterDownAssist(KSCharacter* InVictim, Controller* DownInstigator, Controller* DownAssistant, float RawDamage, float DamagePercent);// 0x275c080
	void OnKSCharacterCombatSummary(out const AdvancedCombatSummary CombatSummary);// 0x275bfd0
	void OnKSCharacterCombatEvent(out const AdvancedCombatEvent CombatEvent);// 0x275bef0
	void OnKSCharacterBaseDied(KSCharacterBase* InCharacter, PlayerState* CharacterPlayer, Controller* EventInstigator, class DamageType DamageType, enum HitLocationType, out const KSEventAssistants EventAssistants, Actor* DamageCauser, float DamageDealt);// 0x275bc90
	void OnCosmeticItemVendorsLoaded(int GroupId, out const int[] VendorIds);// 0x275bbb0
	void K2_OnMatchPhaseSet(FName NewPhase);// 0x2d74e00
	bool IsMobileGameMode();// 0x275bb80
	enum IsAWinner(Actor* Other);// 0x275bae0
	void HandleStartingNewAIPlayer(KSAIController* NewPlayer);// 0x1f6e770
	void HandleAllPlayersFinishedPrePrep();// 0x1fcb360
	float GetWeaponChargeRateMultiplier();// 0x275bac0
	int GetStartingTeamNum(Player* NewPlayer, PGame_PlayerController* NewPlayerController);// 0x275b9f0
	KSGlobalShotListener* GetShotListener();// 0x275b9c0
	class KSRewardsCalculator GetRewardsCalculatorClass();// 0x275b980
	KSRevealManager* GetRevealManager();// 0x275b960
	float GetPerSecondChargePercent();// 0x275b940
	enum GetPerSecondChargeMode();// 0x275b920
	KSMVPDeterminant* GetMVPDeterminant();// 0x275b870
	float GetMatchTimeElapsed();// 0x275b8e0
	FName GetMatchPhaseName();// 0x275b8c0
	MatchPhase GetMatchPhase();// 0x275b890
	bool GetIsTutorial();// 0x275b850
	bool GetIsPractice();// 0x275b830
	bool GetIsPlayerSpectateOnlyMode();// 0x275b810
	bool GetIsAIPvpMode();// 0x275b7f0
	FName GetGamePhase();// 0x275b7b0
	KSGameHUDSettings GetGameModeHUDSettings();// 0x275b710
	KSPlayerMod*[] GetDefaultPlayerMods();// 0x275b690
	Actor*[] GetCachedInteractiveObjects();// 0x275b4b0
	int GetBounty(PlayerState* PlayerState);// 0x275b410
	bool FlippingTeamSidesThisRound();// 0x275b3f0
	void EventOnTeamCreated(KSTeamState* Team);// 0x275b360
	bool DoesClearObjectivesMarkedUsedOnSidesFlipped();// 0x275b340
	void DestroyDynamicZipLines();// 0x275b320
	void DestroyActive(class Object ActorClass);// 0x275b2a0
	void CreateRevealManager();// 0x275b280
	void ClearLootSites();// 0x275b260
	void ClearInteractiveObjects();// 0x275b240
	bool CanUsePlayerStart(Controller* Player, PlayerStart* PlayerStart);// 0x275b170
	bool CanSpawnBotsNow();// 0x275b140
	void AllPlayersLockedInForComponent();// 0x1fdc3f0
	bool AllowsHumanBackfill();// 0x275b110
	bool AllowDamageNow();// 0x275b0e0
	bool AIPlayerCanRestart(KSAIController* Player);// 0x275af60
	void AddInteractiveObject(Actor* ObjectToAdd);// 0x275b000

--------------------------------
Class: PGame_GameMode.PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	bool bAutoEnableCombatLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0, Size: 1]
	bool bUploadCombatLogOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1, Size: 1]
	bool bFubarForCPUFramerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440, Size: 1]
	bool bFubarForPacketLoss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x441, Size: 1]
	float FubarShutdownWaitTimeoutTime;//[Offset: 0x444, Size: 1]
	bool bDeferWelcomeUntilAllPlayersConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	bool bReadyForWelcome;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 1]
	FString SonyActivityId;//[Offset: 0x4a8, Size: 1]
	float SonyMatchOwnerNetTimeout;//[Offset: 0x4b8, Size: 1]
	PGame_SonyMatchData SonyMatchData;//[Offset: 0x4c0, Size: 1]
	uint32[] SonyIneligibleMatchOwners;//[Offset: 0x4d8, Size: 1]
	PGame_InactivePlayerStateEntry[] PGame_InactivePlayerArray;//[Offset: 0x4f8, Size: 1]
	bool bGlobalDisableAIBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool bAllowAIBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	bool bHasPerformedInitialAIBackfill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 1]
	void OnFubarShutdownTimeout();// 0xd94930
	void InactivePlayerStateDestroyed(Actor* InActor);// 0xd94240
	void FinalShutdown();// 0xd93b40
	void FinalizeMatchEnded();// 0xd93b60

--------------------------------
Class: PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	FString PersistentMapSuffix;//[Offset: 0x388, Size: 1]
	FString[] SublevelSuffixes;//[Offset: 0x398, Size: 1]
	FString[] HighMemorySublevelSuffixes;//[Offset: 0x3a8, Size: 1]
	FString[] LowMemorySublevelSuffixes;//[Offset: 0x3b8, Size: 1]
	bool bPlayerEx_TriggerMatchHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bPlayerEx_TriggerMatchHasEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	float CalculateMatchCloseness();// 0xd935d0

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2c0, Size: 1]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8, Size: 1]
	int NumSpectators;//[Offset: 0x2cc, Size: 1]
	int NumPlayers;//[Offset: 0x2d0, Size: 1]
	int NumBots;//[Offset: 0x2d4, Size: 1]
	float MinRespawnDelay;//[Offset: 0x2d8, Size: 1]
	int NumTravellingPlayers;//[Offset: 0x2dc, Size: 1]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2e0, Size: 1]
	PlayerState*[] InactivePlayerArray;//[Offset: 0x2e8, Size: 1]
	float InactivePlayerStateLifeSpan;//[Offset: 0x2f8, Size: 1]
	int MaxInactivePlayers;//[Offset: 0x2fc, Size: 1]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	void StartMatch();// 0x1fc2e00
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);// 0x455df20
	void Say(FString Msg);// 0x455de80
	void RestartGame();// 0x1fc2d60
	bool ReadyToStartMatch();// 0x455d840
	bool ReadyToEndMatch();// 0x452eda0
	void K2_OnSetMatchState(FName NewState);// 0x2d74e00
	bool IsMatchInProgress();// 0x455bb40
	bool HasMatchEnded();// 0x455b950
	FName GetMatchState();// 0x455a920
	void EndMatch();// 0x1fc2de0
	void AbortMatch();// 0x1fc2d40

--------------------------------
Class: KSPlayerJoinRuleComponent.KSGameRuleComponent.ActorComponent.Object
	void ProcessNextTaskForPlayer(PlayerController* Player);// 0x27f1600
	bool PlayerHasJoinTasks(PlayerController* Player);// 0x27f1570
	void OnAllTasksCompleteForPlayer(PlayerController* Player);// 0x27f14f0
	void NewKSPlayerReadyForPlay(KSPlayerController* NewKSPlayer);// 0x27f1470
	void GetJoinTasksForPlayer(PlayerController* Player, out KSPlayerJoinTask*[] OutTasksForPlayer);// 0x27f0810

--------------------------------
Class: KSGameRuleComponent.ActorComponent.Object
	void OnTeamSidesFlipped();// 0x1f6daf0
	void OnTeamChanged(KSPlayerState* Player, KSTeamState* OldTeam, KSTeamState* NewTeam);// 0x2760d60
	void OnLogout(Controller* Controller);// 0x2760aa0
	void OnLogin(Controller* Controller);// 0x2760a20
	void NewPlayerStarting(PlayerController* NewPlayer);// 0x2760790
	void NewBotStarting(KSAIController* NewBot);// 0x2760700

--------------------------------
Class: KSPlayerJoinTask.Object
	MulticastInlineDelegateProperty OnPlayerJoinTaskComplete;//[Size: 1]
	bool BeginTask(PlayerController* Player);// 0x26e36e0

--------------------------------
Class: KSAIController.AIController.Controller.Actor.Object
	KSCharacterBase* KSCharacter;//[Offset: 0x378, Size: 1]
	KSCharacter* CachedKSCharacter;//[Offset: 0x380, Size: 1]
	bool bAutoManageWayPointSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398, Size: 1]
	KSWayPointSet* WayPointSet;//[Offset: 0x3a8, Size: 1]
	bool bShouldReverseWayPointSetDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	KSPlayerShop* Shop;//[Offset: 0x3d8, Size: 1]
	Actor* StartPointToSpawnAt;//[Offset: 0x410, Size: 1]
	class KSCharacter* CharacterToSpawn;//[Offset: 0x418, Size: 1]
	BehaviorTree* TreeToRun;//[Offset: 0x420, Size: 1]
	KSBTDifficulty* InitialDifficulty;//[Offset: 0x428, Size: 1]
	DataTable* DifficultyTable;//[Offset: 0x438, Size: 1]
	KSBTDifficultyConfig SpawnDifficultyConfig;//[Offset: 0x440, Size: 1]
	DataTable* ObjectivePriorityTable;//[Offset: 0x4c0, Size: 1]
	DataTable* ItemPriorityTable;//[Offset: 0x4c8, Size: 1]
	DataTable* AbilityTable;//[Offset: 0x4d0, Size: 1]
	KSInitialLoadout InitialLoadout;//[Offset: 0x4d8, Size: 1]
	KSAIPerceptionComponent* KSAIPerception;//[Offset: 0x510, Size: 1]
	KSAIReasonerComponent* KSAIReasoner;//[Offset: 0x518, Size: 1]
	Actor* ActorForFocalOffset;//[Offset: 0x548, Size: 1]
	float CrowdCollisionQueryRange;//[Offset: 0x560, Size: 1]
	float CrowdPathOptimizationRange;//[Offset: 0x564, Size: 1]
	float CrowdAvoidanceRangeMultiplier;//[Offset: 0x568, Size: 1]
	float CrowdSeparationWeight;//[Offset: 0x56c, Size: 1]
	bool bStartWithCrowdFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570, Size: 1]
	int TeamNumber;//[Offset: 0x574, Size: 1]
	GameplayTagQuery AllowedJobQuery;//[Offset: 0x5a8, Size: 1]
	KSAIItemPriorityComponent* ItemPriorityComponent;//[Offset: 0x5f0, Size: 1]
	KSAIItemPriorityComponent* TempItemPriorityComponent;//[Offset: 0x5f8, Size: 1]
	KSAIObjectivePriorityComponent* ObjectivePriorityComponent;//[Offset: 0x600, Size: 1]
	KSAIDifficultyComponent* DifficultyComponent;//[Offset: 0x608, Size: 1]
	void SetNavigationInteractTarget(Actor* InteractTargetIn);// 0x26cc7c0
	void OnPawnKilled(const KSCharacterFoundation* KillerCharacter, const KSCharacterFoundation* KilledCharacter);// 0x26cc0e0
	void OnCosmeticLoadoutComplete();// 0x26cc000
	void HandleTeamSidesFlipped();// 0x26cbde0
	void HandleJobChanged();// 0x26cbdc0
	KSSquadManagerBase* GetSquadManager();// 0x26cbd60
	KSCharacter* GetOwnedCharacter();// 0x26cbbf0
	Actor* GetNavigationInteractTarget();// 0x26cbbc0
	KSAIReasonerComponent* GetKSReasonerComponent();// 0x26cbb80
	KSAIPerceptionComponent* GetKSPerceptionComponent();// 0x26cbb60
	KSAIDifficultyComponent* GetDifficultyComponent();// 0x26cbb20
	void ClearNavigationInteractTarget();// 0x26cba70

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStartAILogicOnPossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0, Size: 1]
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0, Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0, Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0, Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d0, Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d0, Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d0, Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x2d8, Size: 1]
	BrainComponent* BrainComponent;//[Offset: 0x2e0, Size: 1]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x2e8, Size: 1]
	PawnActionsComponent* ActionsComp;//[Offset: 0x2f0, Size: 1]
	BlackboardComponent* Blackboard;//[Offset: 0x2f8, Size: 1]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x300, Size: 1]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x308, Size: 1]
	MulticastInlineDelegateProperty ReceiveMoveCompleted;//[Size: 1]
	bool UseBlackboard(BlackboardData* BlackboardAsset, out BlackboardComponent* BlackboardComponent);// 0x47d7eb0
	void UnclaimTaskResource(class GameplayTaskResource ResourceClass);// 0x47d7c80
	void SetPathFollowingComponent(PathFollowingComponent* NewPFComponent);// 0x47d77b0
	void SetMoveBlockDetection(bool bEnable);// 0x47d7720
	bool RunBehaviorTree(BehaviorTree* BTAsset);// 0x47d7550
	void OnUsingBlackBoard(BlackboardComponent* BlackboardComp, BlackboardData* BlackboardAsset);// 0x2d74e00
	void OnGameplayTaskResourcesClaimed(GameplayResourceSet NewlyClaimed, GameplayResourceSet FreshlyReleased);// 0x47d6f60
	byte MoveToLocation(out const Vector Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x47d6cf0
	byte MoveToActor(Actor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class NavigationQueryFilter FilterClass, bool bAllowPartialPath);// 0x47d6ad0
	void K2_SetFocus(Actor* NewFocus);// 0x47d6940
	void K2_SetFocalPoint(Vector FP);// 0x47d68b0
	void K2_ClearFocus();// 0x47d6890
	bool HasPartialPath();// 0x47d66b0
	PathFollowingComponent* GetPathFollowingComponent();// 0x26cbad0
	byte GetMoveStatus();// 0x47d63b0
	Vector GetImmediateMoveDestination();// 0x47d6280
	Actor* GetFocusActor();// 0x47d6250
	Vector GetFocalPointOnActor(const Actor* Actor);// 0x47d61a0
	Vector GetFocalPoint();// 0x47d6160
	AIPerceptionComponent* GetAIPerceptionComponent();// 0x47d5e50
	void ClaimTaskResource(class GameplayTaskResource ResourceClass);// 0x47d5b70

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xe8, Size: 1]
	NavigationData* MyNavData;//[Offset: 0xf8, Size: 1]
	void OnNavDataRegistered(NavigationData* NavData);// 0x47ef720
	void OnActorBump(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x47ef580
	Vector GetPathDestination();// 0x47ef1d0
	byte GetPathActionType();// 0x47ef1a0

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x228, Size: 1]
	NavDataConfig NavDataConfig;//[Offset: 0x230, Size: 1]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a8, Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2a8, Size: 1]
	bool bAutoDestroyWhenNoNavigation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2a8, Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2a8, Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2a8, Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2a8, Size: 1]
	enum RuntimeGeneration;//[Offset: 0x2ac, Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x2b0, Size: 1]
	uint32 DataVersion;//[Offset: 0x2b4, Size: 1]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x398, Size: 1]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 1]
	Color Color;//[Offset: 0x38, Size: 1]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 1]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 1]
	class Actor* NavDataClass;//[Offset: 0x50, Size: 1]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 1]
	int AreaID;//[Offset: 0x10, Size: 1]
	class Object* AreaClass;//[Offset: 0x18, Size: 1]

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xb8, Size: 1]
	AIController* AIOwner;//[Offset: 0xc0, Size: 1]
	void StopLogic(FString Reason);// 0x47e0e10
	void StartLogic();// 0x1f6ea30
	void RestartLogic();// 0x1f6deb0
	bool IsRunning();// 0x47e0480
	bool IsPaused();// 0x2752f40

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xb0, Size: 1]
	BlackboardData* DefaultBlackboardAsset;//[Offset: 0xb8, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0, Size: 1]
	BlackboardKeyType*[] KeyInstances;//[Offset: 0xe8, Size: 1]
	void SetValueAsVector(out const FName KeyName, Vector VectorValue);// 0x47e0d20
	void SetValueAsString(out const FName KeyName, FString StringValue);// 0x47e0bf0
	void SetValueAsRotator(out const FName KeyName, Rotator VectorValue);// 0x47e0b00
	void SetValueAsObject(out const FName KeyName, Object* ObjectValue);// 0x47e0a30
	void SetValueAsName(out const FName KeyName, FName NameValue);// 0x47e0960
	void SetValueAsInt(out const FName KeyName, int IntValue);// 0x47e0890
	void SetValueAsFloat(out const FName KeyName, float FloatValue);// 0x47e07c0
	void SetValueAsEnum(out const FName KeyName, byte EnumValue);// 0x47e06f0
	void SetValueAsClass(out const FName KeyName, class Object ClassValue);// 0x47e0620
	void SetValueAsBool(out const FName KeyName, bool boolValue);// 0x47e0550
	bool IsVectorValueSet(out const FName KeyName);// 0x47e04b0
	Vector GetValueAsVector(out const FName KeyName);// 0x47e0370
	FString GetValueAsString(out const FName KeyName);// 0x47e0290
	Rotator GetValueAsRotator(out const FName KeyName);// 0x47e01e0
	Object* GetValueAsObject(out const FName KeyName);// 0x47e0140
	FName GetValueAsName(out const FName KeyName);// 0x47e00a0
	int GetValueAsInt(out const FName KeyName);// 0x47e0000
	float GetValueAsFloat(out const FName KeyName);// 0x47dff60
	byte GetValueAsEnum(out const FName KeyName);// 0x47dfec0
	class Object GetValueAsClass(out const FName KeyName);// 0x47dfe20
	bool GetValueAsBool(out const FName KeyName);// 0x47dfd80
	bool GetRotationFromEntry(out const FName KeyName, out Rotator ResultRotation);// 0x47dfc90
	bool GetLocationFromEntry(out const FName KeyName, out Vector ResultLocation);// 0x47dfba0
	void ClearValue(out const FName KeyName);// 0x47dfb10

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x30, Size: 1]
	BlackboardEntry[] Keys;//[Offset: 0x38, Size: 1]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: BlackboardEntry
	FName EntryName;//[Offset: 0x0, Size: 1]
	BlackboardKeyType* KeyType;//[Offset: 0x8, Size: 1]
	bool bInstanceSynced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	AISenseConfig*[] SensesConfig;//[Offset: 0xb0, Size: 1]
	class AISense* DominantSense;//[Offset: 0xc0, Size: 1]
	AIController* AIOwner;//[Offset: 0xd8, Size: 1]
	MulticastInlineDelegateProperty OnPerceptionUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnTargetPerceptionUpdated;//[Size: 1]
	void SetSenseEnabled(class AISense SenseClass, const bool bEnable);// 0x47d7830
	void RequestStimuliListenerUpdate();// 0x47d7530
	void OnOwnerEndPlay(Actor* Actor, byte EndPlayReason);// 0x47d70f0
	void GetPerceivedHostileActors(out Actor*[] OutActors);// 0x47d64d0
	void GetPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x47d63e0
	void GetKnownPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x47d62c0
	void GetCurrentlyPerceivedActors(class AISense SenseToUse, out Actor*[] OutActors);// 0x47d6070
	bool GetActorsPerception(Actor* Actor, out ActorPerceptionBlueprintInfo Info);// 0x47d5e70
	void ForgetAll();// 0x47d5db0

--------------------------------
Class: AISenseConfig.Object
	Color DebugColor;//[Offset: 0x28, Size: 1]
	float MaxAge;//[Offset: 0x2c, Size: 1]
	bool bStartsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x28, Size: 1]
	enum NotifyType;//[Offset: 0x2c, Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x38, Size: 1]

--------------------------------
Class: AIPerceptionSystem.AISubsystem.Object
	AISense*[] Senses;//[Offset: 0x88, Size: 1]
	float PerceptionAgingRate;//[Offset: 0x98, Size: 1]
	static void ReportPerceptionEvent(Object* WorldContextObject, AISenseEvent* PerceptionEvent);// 0x47d7480
	void ReportEvent(AISenseEvent* PerceptionEvent);// 0x47d7400
	static bool RegisterPerceptionStimuliSource(Object* WorldContextObject, class AISense Sense, Actor* Target);// 0x47d72f0
	void OnPerceptionStimuliSourceEndPlay(Actor* Actor, byte EndPlayReason);// 0x47d71b0
	static class AISense GetSenseClassForStimulus(Object* WorldContextObject, out const AIStimulus Stimulus);// 0x47d6580

--------------------------------
Class: AISubsystem.Object
	AISystem* AISystem;//[Offset: 0x30, Size: 1]

--------------------------------
Class: AISenseEvent.Object

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x58, Size: 1]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x70, Size: 1]
	float AcceptanceRadius;//[Offset: 0x88, Size: 1]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x8c, Size: 1]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x90, Size: 1]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94, Size: 1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95, Size: 1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96, Size: 1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97, Size: 1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99, Size: 1]
	bool bForgetStaleActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a, Size: 1]
	byte DefaultSightCollisionChannel;//[Offset: 0x9b, Size: 1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0xa0, Size: 1]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0xa8, Size: 1]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0xb0, Size: 1]
	AIAsyncTaskBlueprintProxy*[] AllProxyObjects;//[Offset: 0xb8, Size: 1]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xc8, Size: 1]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xd0, Size: 1]
	void AILoggingVerbose();// 0x2729950
	void AIIgnorePlayers();// 0xe8d1d0

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x28, Size: 1]
	BehaviorTreeTemplateInfo[] LoadedTemplates;//[Offset: 0x30, Size: 1]
	BehaviorTreeComponent*[] ActiveComponents;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BehaviorTreeTemplateInfo
	BehaviorTree* Asset;//[Offset: 0x0, Size: 1]
	BTCompositeNode* Template;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x30, Size: 1]
	BlackboardData* BlackboardAsset;//[Offset: 0x38, Size: 1]
	BTDecorator*[] RootDecorators;//[Offset: 0x40, Size: 1]
	BTDecoratorLogic[] RootDecoratorOps;//[Offset: 0x50, Size: 1]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	BTCompositeChild[] Children;//[Offset: 0x58, Size: 1]
	BTService*[] Services;//[Offset: 0x68, Size: 1]
	bool bApplyDecoratorScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88, Size: 1]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x30, Size: 1]
	BehaviorTree* TreeAsset;//[Offset: 0x40, Size: 1]
	BTCompositeNode* ParentNode;//[Offset: 0x48, Size: 1]

--------------------------------
Class: BTCompositeChild
	BTCompositeNode* ChildComposite;//[Offset: 0x0, Size: 1]
	BTTaskNode* ChildTask;//[Offset: 0x8, Size: 1]
	BTDecorator*[] Decorators;//[Offset: 0x10, Size: 1]
	BTDecoratorLogic[] DecoratorOps;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BTTaskNode.BTNode.Object
	BTService*[] Services;//[Offset: 0x58, Size: 1]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x60, Size: 1]
	float RandomDeviation;//[Offset: 0x64, Size: 1]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 1]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60, Size: 1]
	byte FlowAbortMode;//[Offset: 0x64, Size: 1]

--------------------------------
Class: BTDecoratorLogic
	byte Operation;//[Offset: 0x0, Size: 1]
	uint16 Number;//[Offset: 0x2, Size: 1]

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BTNode*[] NodeInstances;//[Offset: 0x130, Size: 1]
	BehaviorTree* DefaultBehaviorTreeAsset;//[Offset: 0x268, Size: 1]
	void SetDynamicSubtree(GameplayTag InjectTag, BehaviorTree* BehaviorAsset);// 0x47dc520
	float GetTagCooldownEndTime(GameplayTag CooldownTag);// 0x47dbe30
	void AddCooldownTagDuration(GameplayTag CooldownTag, float CooldownDuration, bool bAddToExistingDuration);// 0x47dbbc0

--------------------------------
Class: EnvQueryManager.AISubsystem.Object
	EnvQueryInstanceCache[] InstanceCache;//[Offset: 0xa8, Size: 1]
	EnvQueryContext*[] LocalContexts;//[Offset: 0xb8, Size: 1]
	EnvQueryInstanceBlueprintWrapper*[] GCShieldedWrappers;//[Offset: 0xc8, Size: 1]
	float MaxAllowedTestingTime;//[Offset: 0x12c, Size: 1]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	int QueryCountWarningThreshold;//[Offset: 0x134, Size: 1]
	double QueryCountWarningInterval;//[Offset: 0x138, Size: 1]
	static EnvQueryInstanceBlueprintWrapper* RunEQSQuery(Object* WorldContextObject, EnvQuery* QueryTemplate, Object* Querier, byte RunMode, class EnvQueryInstanceBlueprintWrapper WrapperClass);// 0x47ec2a0

--------------------------------
Class: EnvQuery.DataAsset.Object
	FName QueryName;//[Offset: 0x30, Size: 1]
	EnvQueryOption*[] Options;//[Offset: 0x38, Size: 1]

--------------------------------
Class: EnvQueryOption.Object
	EnvQueryGenerator* Generator;//[Offset: 0x28, Size: 1]
	EnvQueryTest*[] Tests;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryGenerator.EnvQueryNode.Object
	FString OptionName;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x40, Size: 1]
	bool bAutoSortTests;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]

--------------------------------
Class: EnvQueryNode.Object
	int VerNum;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EnvQueryItemType.Object

--------------------------------
Class: EnvQueryTest.EnvQueryNode.Object
	int TestOrder;//[Offset: 0x30, Size: 1]
	byte TestPurpose;//[Offset: 0x34, Size: 1]
	FString TestComment;//[Offset: 0x38, Size: 1]
	byte MultipleContextFilterOp;//[Offset: 0x48, Size: 1]
	byte MultipleContextScoreOp;//[Offset: 0x49, Size: 1]
	byte FilterType;//[Offset: 0x4a, Size: 1]
	AIDataProviderBoolValue boolValue;//[Offset: 0x50, Size: 1]
	AIDataProviderFloatValue FloatValueMin;//[Offset: 0x88, Size: 1]
	AIDataProviderFloatValue FloatValueMax;//[Offset: 0xc0, Size: 1]
	byte ScoringEquation;//[Offset: 0xf9, Size: 1]
	byte ClampMinType;//[Offset: 0xfa, Size: 1]
	byte ClampMaxType;//[Offset: 0xfb, Size: 1]
	enum NormalizationType;//[Offset: 0xfc, Size: 1]
	AIDataProviderFloatValue ScoreClampMin;//[Offset: 0x100, Size: 1]
	AIDataProviderFloatValue ScoreClampMax;//[Offset: 0x138, Size: 1]
	AIDataProviderFloatValue ScoringFactor;//[Offset: 0x170, Size: 1]
	AIDataProviderFloatValue ReferenceValue;//[Offset: 0x1a8, Size: 1]
	bool bDefineReferenceValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bWorkOnFloatValues;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 1]

--------------------------------
Class: AIDataProviderBoolValue.AIDataProviderTypedValue.AIDataProviderValue
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: AIDataProviderTypedValue.AIDataProviderValue
	class Object* PropertyType;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AIDataProviderValue
	AIDataProvider* DataBinding;//[Offset: 0x10, Size: 1]
	FName DataField;//[Offset: 0x18, Size: 1]

--------------------------------
Class: AIDataProvider.Object

--------------------------------
Class: AIDataProviderFloatValue.AIDataProviderTypedValue.AIDataProviderValue
	float DefaultValue;//[Offset: 0x30, Size: 1]

--------------------------------
Class: EnvQueryInstanceBlueprintWrapper.Object
	int QueryID;//[Offset: 0x30, Size: 1]
	class EnvQueryItemType* ItemType;//[Offset: 0x58, Size: 1]
	int OptionIndex;//[Offset: 0x60, Size: 1]
	MulticastInlineDelegateProperty OnQueryFinishedEvent;//[Size: 1]
	void SetNamedParam(FName ParamName, float Value);// 0x47ec420
	Vector[] GetResultsAsLocations();// 0x47ec220
	Actor*[] GetResultsAsActors();// 0x47ec1a0
	bool GetQueryResultsAsLocations(out Vector[] ResultLocations);// 0x47ec0e0
	bool GetQueryResultsAsActors(out Actor*[] ResultActors);// 0x47ec020
	float GetItemScore(int ItemIndex);// 0x47ebf90
	void EQSQueryDoneSignature__DelegateSignature(EnvQueryInstanceBlueprintWrapper* QueryInstance, byte QueryStatus);// 0x2d74e00

--------------------------------
Class: EnvQueryInstanceCache
	EnvQuery* Template;//[Offset: 0x0, Size: 1]

--------------------------------
Class: EnvQueryContext.Object

--------------------------------
Class: AIAsyncTaskBlueprintProxy.Object
	MulticastInlineDelegateProperty OnSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnFail;//[Size: 1]
	void OnMoveCompleted(AIRequestID RequestID, byte MovementResult);// 0x47d7030

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	static bool SetLocalNavigationGridDensity(Object* WorldContextObject, float CellSize);// 0x47ef910
	static void RemoveLocalNavigationGrid(Object* WorldContextObject, int GridId, bool bRebuildGrids);// 0x47ef7a0
	static bool FindLocalNavigationGridPath(Object* WorldContextObject, out const Vector start, out const Vector end, out Vector[] PathPoints);// 0x47eeff0
	static int AddLocalNavigationGridForPoints(Object* WorldContextObject, out const Vector[] Locations, const int Radius2D, const float Height, bool bRebuildGrids);// 0x47eed70
	static int AddLocalNavigationGridForPoint(Object* WorldContextObject, out const Vector Location, const int Radius2D, const float Height, bool bRebuildGrids);// 0x47eebc0
	static int AddLocalNavigationGridForCapsule(Object* WorldContextObject, out const Vector Location, float CapsuleRadius, float CapsuleHalfHeight, const int Radius2D, const float Height, bool bRebuildGrids);// 0x47ee9c0
	static int AddLocalNavigationGridForBox(Object* WorldContextObject, out const Vector Location, Vector Extent, Rotator Rotation, const int Radius2D, const float Height, bool bRebuildGrids);// 0x47ee7a0

--------------------------------
Class: AIStimulus
	float Age;//[Offset: 0x0, Size: 1]
	float ExpirationAge;//[Offset: 0x4, Size: 1]
	float Strength;//[Offset: 0x8, Size: 1]
	Vector StimulusLocation;//[Offset: 0xc, Size: 1]
	Vector ReceiverLocation;//[Offset: 0x18, Size: 1]
	FName Tag;//[Offset: 0x24, Size: 1]
	bool bSuccessfullySensed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 1]

--------------------------------
Class: ActorPerceptionBlueprintInfo
	Actor* Target;//[Offset: 0x0, Size: 1]
	AIStimulus[] LastSensedStimuli;//[Offset: 0x8, Size: 1]
	bool bIsHostile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 1]

--------------------------------
Class: KSSquadManagerBase.Info.Actor.Object
	float ConsiderationPeriod;//[Offset: 0x220, Size: 1]
	void OnSquadCharacterSpawn(KSCharacter* Character);// 0x2d74e00
	void OnSquadBotSpawn(KSAIController* TargetBot);// 0x2d74e00
	KSAIController*[] GetTeamBots(int TeamNum);// 0x284d450
	KSCharacterBase*[] GetProximityListofEnemies(KSAIController* TargetBot);// 0x284ce70
	KSCharacterBase*[] GetProximityListofAllies(KSAIController* TargetBot);// 0x284cd90
	int[] GetAllTeamNums();// 0x284c1d0
	KSSquadManagerAction* DetermineCurrentAction();// 0x273aa00
	void AddBot(KSAIController* NewBot);// 0x281b0b0

--------------------------------
Class: KSSquadManagerAction.ActorComponent.Object
	float Stickiness;//[Offset: 0xb0, Size: 1]
	KSSquadManagerBase* SquadManager;//[Offset: 0xb8, Size: 1]
	bool TickAction(float DeltaSeconds);// 0x284dac0
	bool StopAction();// 0x284da00
	bool StartAction();// 0x284d9d0
	bool CheckActivationCondition();// 0x284baa0
	float CalculateConsiderationWeight();// 0x284b9b0

--------------------------------
Class: KSAIReasonerComponent.ActorComponent.Object
	float ConsiderationPeriod;//[Offset: 0xb0, Size: 1]
	KSReasonerOptionBase* CurrentActiveOption;//[Offset: 0x118, Size: 1]
	void SetNearbyEnemies(KSCharacterBase*[] Enemies);// 0x26d3a60
	void SetNearbyAllies(KSCharacterBase*[] Allies);// 0x26d3960
	KSCharacterBase*[] GetNearbyEnemies();// 0x26d3420
	KSCharacterBase*[] GetNearbyAllies();// 0x26d3360
	KSReasonerOptionBase*[] GetAllActiveOptions();// 0x26d3150
	void ClearSquadOptions();// 0x26d3130
	void AddSquadTaskOptions(class KSReasonerOptionBase[] NewOptions, bool ReplaceOldOptions);// 0x26d2f60
	void AddSquadTaskOption(class KSReasonerOptionBase NewOption, bool ReplaceOldOptions);// 0x26d2e90

--------------------------------
Class: KSReasonerOptionBase.ActorComponent.Object
	FName Name;//[Offset: 0xb0, Size: 1]
	float Stickiness;//[Offset: 0xb8, Size: 1]
	KSReasonerCondition[] ActivationConditions;//[Offset: 0xc0, Size: 1]
	KSAIConsiderationBase*[] Considerations;//[Offset: 0xd0, Size: 1]
	bool TickAction(float DeltaSeconds, BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x28321e0
	bool StopAction(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x2832110
	bool StartAction(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x2832040
	KSSquadManagerBase* GetSquadManager(KSAIController* AIController);// 0x2831810
	bool CheckAllConditions(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x2831100
	bool CheckActivationCondition(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x2831030
	float CalculateConsiderationWeight(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x2830c00
	float CalculateAllConsiderations(BehaviorTreeComponent* BehaviorComponent, KSAIController* AIController);// 0x2830b40

--------------------------------
Class: KSReasonerCondition
	enum ActivationType;//[Offset: 0x0, Size: 1]
	enum TargetType;//[Offset: 0x1, Size: 1]
	enum ComparisonType;//[Offset: 0x2, Size: 1]
	bool AsPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	FName BlackboardKey;//[Offset: 0x4, Size: 1]
	bool BooleanValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float FloatValue;//[Offset: 0x10, Size: 1]
	Vector VectorValue;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSAIConsiderationBase.DataAsset.Object
	FName Name;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSAIPerceptionComponent.AIPerceptionComponent.ActorComponent.Object
	void GetCurrentlyPerceivedStimuli(class AISense SenseToUse, out KSStimulusEvent[] Stimuli);// 0x26d3270

--------------------------------
Class: KSStimulusEvent
	Actor* Actor;//[Offset: 0x0, Size: 1]
	AIStimulus Stimulus;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAIDifficultyComponent.ActorComponent.Object
	KSBTDifficulty* Difficulty;//[Offset: 0xb0, Size: 1]
	DataTable* DifficultyTable;//[Offset: 0xb8, Size: 1]
	bool AllowDynamicDifficulty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	KSBTDifficultyConfig DifficultySpawnConfig;//[Offset: 0xc8, Size: 1]
	float AccuracyMultiplierStandard;//[Offset: 0x148, Size: 1]
	float AccuracyMultiplierThrownMelee;//[Offset: 0x14c, Size: 1]
	float AccuracyMultiplierThrownGrenade;//[Offset: 0x150, Size: 1]
	float AccuracyMultiplierWhenBlinded;//[Offset: 0x154, Size: 1]
	float AccuracyMultiplierWhenCrosshairHidden;//[Offset: 0x158, Size: 1]
	float NewTargetAccuracyMultiplier;//[Offset: 0x15c, Size: 1]
	float NewTargetTime;//[Offset: 0x160, Size: 1]
	float TargetLowHealthAccuracyMultiplier;//[Offset: 0x164, Size: 1]
	float TargetLowHealthThreshold;//[Offset: 0x168, Size: 1]
	float AttackDelayClipPercentMin;//[Offset: 0x16c, Size: 1]
	float AttackDelayClipPercentMax;//[Offset: 0x170, Size: 1]
	float AttackDelay;//[Offset: 0x174, Size: 1]
	float DamageDealtMultiplier;//[Offset: 0x178, Size: 1]
	float HeadshotDamageDealtMultiplier;//[Offset: 0x17c, Size: 1]
	float DamageTakenMultiplier;//[Offset: 0x180, Size: 1]
	float HeadshotDamageTakenMultiplier;//[Offset: 0x184, Size: 1]
	float AimForHeadshotProbability;//[Offset: 0x188, Size: 1]
	float DodgeRollProbability;//[Offset: 0x18c, Size: 1]
	float StrafeProbability;//[Offset: 0x190, Size: 1]
	float ThrowGrenadeProbability;//[Offset: 0x194, Size: 1]
	float ThrowMeleeProbability;//[Offset: 0x198, Size: 1]
	float PerceptionStrengthMin;//[Offset: 0x19c, Size: 1]
	float PerceptionStrengthMax;//[Offset: 0x1a0, Size: 1]
	float PerceptionStrength;//[Offset: 0x1a4, Size: 1]
	KSBTAction*[] AllowedActions;//[Offset: 0x1a8, Size: 1]
	KSBTAction*[] DisallowedActions;//[Offset: 0x1b8, Size: 1]
	float SpeedMultiplier;//[Offset: 0x1c8, Size: 1]
	KSWeapon* LastFiredWeapon;//[Offset: 0x1cc, Size: 1]
	int AttacksSinceLastAttackDelay;//[Offset: 0x1d4, Size: 1]
	int AttacksNeededToTriggerAttackDelay;//[Offset: 0x1d8, Size: 1]
	float GetThrowMeleeProbability();// 0x26cf800
	float GetThrowGrenadeProbability();// 0x26cf7d0
	float GetStrafeProbability();// 0x26cf7a0
	float GetSpeedMultiplier();// 0x26cf770
	float GetPerceptionStrength();// 0x26cf060
	float GetDodgeRollProbability();// 0x26ceff0
	KSBTDifficulty* GetCurrentDifficulty();// 0x26af820
	float GetAttackDelayClipPercentMin();// 0x26cef80
	float GetAttackDelayClipPercentMax();// 0x26cef50
	float GetAttackDelay();// 0x26cef20
	float GetAimForHeadshotProbability();// 0x26cedf0
	float GetAccuracyModifier(const KSWeapon* InWeapon);// 0x26cec40
	void ChangeDifficulty(KSBTDifficulty* DifficultyIn);// 0x26ceb20

--------------------------------
Class: KSBTDifficulty.DataAsset.Object
	FString DifficultyName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSBTDifficultyConfig
	float AccuracyMultiplierStandard;//[Offset: 0x0, Size: 1]
	float AccuracyMultiplierThrownMelee;//[Offset: 0x4, Size: 1]
	float AccuracyMultiplierThrownGrenade;//[Offset: 0x8, Size: 1]
	float AccuracyMultiplierWhenBlinded;//[Offset: 0xc, Size: 1]
	float AccuracyMultiplierWhenCrosshairHidden;//[Offset: 0x10, Size: 1]
	float NewTargetAccuracyMultiplier;//[Offset: 0x14, Size: 1]
	float NewTargetTime;//[Offset: 0x18, Size: 1]
	float TargetLowHealthAccuracyMultiplier;//[Offset: 0x1c, Size: 1]
	float TargetLowHealthThreshold;//[Offset: 0x20, Size: 1]
	float SpeedMultiplier;//[Offset: 0x24, Size: 1]
	float AttackDelayClipPercentMin;//[Offset: 0x28, Size: 1]
	float AttackDelayClipPercentMax;//[Offset: 0x2c, Size: 1]
	float AttackDelay;//[Offset: 0x30, Size: 1]
	float DamageDealtMultiplier;//[Offset: 0x34, Size: 1]
	float HeadshotDamageDealtMultiplier;//[Offset: 0x38, Size: 1]
	float DamageTakenMultiplier;//[Offset: 0x3c, Size: 1]
	float HeadshotDamageTakenMultiplier;//[Offset: 0x40, Size: 1]
	float AimForHeadshotProbability;//[Offset: 0x44, Size: 1]
	float DodgeRollProbability;//[Offset: 0x48, Size: 1]
	float StrafeProbability;//[Offset: 0x4c, Size: 1]
	float ThrowGrenadeProbability;//[Offset: 0x50, Size: 1]
	float ThrowMeleeProbability;//[Offset: 0x54, Size: 1]
	float PerceptionStrengthMin;//[Offset: 0x58, Size: 1]
	float PerceptionStrengthMax;//[Offset: 0x5c, Size: 1]
	KSBTAction*[] AllowedActions;//[Offset: 0x60, Size: 1]
	KSBTAction*[] DisallowedActions;//[Offset: 0x70, Size: 1]

--------------------------------
Class: KSBTAction.DataAsset.Object
	FString ActionName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSWayPointSet.Actor.Object
	int WayPointSet;//[Offset: 0x220, Size: 1]
	KSWayPoint*[] Waypoints;//[Offset: 0x228, Size: 1]
	int[] ForwardSides;//[Offset: 0x238, Size: 1]
	int[] ReversingSides;//[Offset: 0x248, Size: 1]
	FString[] ValidRegionIDs;//[Offset: 0x2a8, Size: 1]
	<FString,KSWayPointRegion> WayPointRegions;//[Offset: 0x2b8, Size: 1]
	void UpdateWayPointVisuals();// 0x2d74e00
	bool ShouldSideReverseOnThisWaypointSet(int SideNum);// 0x2860170
	KSWayPoint*[] PickPathFromBestWayPoints(Vector StartLocation, Vector EndLocation, <KSWayPoint*,int> WayPointsToAvoid);// 0x285fad0
	void LinkWayPoints();// 0x285f990
	KSWayPoint*[] GetAllWayPointsInRegionByID(out FString InId);// 0x285f740
	bool CanSideUseThisWaypointSet(int SideNum);// 0x285f450

--------------------------------
Class: KSWayPoint.KSMapPoint.Actor.Object
	FString RegionId;//[Offset: 0x258, Size: 1]
	KSWayPoint*[] RegionChildren;//[Offset: 0x268, Size: 1]
	uint32 AutoRegionDepth;//[Offset: 0x278, Size: 1]
	<KSWayPointSet*,KSWayPointLink> WayPointSetLinks;//[Offset: 0x280, Size: 1]
	KSWayPointLink DefaultWayPointLinks;//[Offset: 0x2d0, Size: 1]
	float DefensePointProbability;//[Offset: 0x2f0, Size: 1]
	float DefensePointWaitTimeMin;//[Offset: 0x2f4, Size: 1]
	float DefensePointWaitTimeMax;//[Offset: 0x2f8, Size: 1]
	KSDefensePoint*[] DefensePointsForward;//[Offset: 0x300, Size: 1]
	KSDefensePoint*[] DefensePointsReverse;//[Offset: 0x310, Size: 1]
	float ArrivalWaitTime;//[Offset: 0x320, Size: 1]
	void SubmitRegionChanges();// 0x2860260
	KSWayPoint*[] GetNextWayPoints(const KSWayPointSet* WayPointSet);// 0x285f880
	void CreateAutoRegion();// 0x285f5a0

--------------------------------
Class: KSMapPoint.Actor.Object
	GameplayTagContainer MapPointTypes;//[Offset: 0x220, Size: 1]
	int[] ValidSides;//[Offset: 0x240, Size: 1]
	bool bShouldCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool ShouldCrouch();// 0x27aeff0
	bool MatchesTags(GameplayTagContainer InMapPointTypes);// 0x27aeb30
	bool MatchesTag(GameplayTag InMapPointType);// 0x27aea90
	bool IsFriendlyPoint(const Actor* InActor);// 0x26f1ff0
	bool IsAvailable(const Actor* InActor);// 0x26cea80
	bool IsActive();// 0x273b880

--------------------------------
Class: KSWayPointLink
	KSWayPoint*[] NextWayPoints;//[Offset: 0x0, Size: 1]
	KSWayPoint*[] PrevWayPoints;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSDefensePoint.KSMapPoint.Actor.Object
	KSObjectiveBase* RelevantObjective;//[Offset: 0x258, Size: 1]
	Actor*[] AssignedDefenders;//[Offset: 0x260, Size: 1]
	bool bObjectiveDefender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 1]
	void RelevantObjectiveUpdated(KSObjectiveBase* Objective);// 0x273f820
	Vector GetTargetDefensePoint();// 0x26cebc0

--------------------------------
Class: KSObjectiveBase.Actor.Object
	MulticastInlineDelegateProperty OnObjectiveUpdate;//[Size: 1]
	enum MapIconType;//[Offset: 0x240, Size: 1]
	int DisplayId;//[Offset: 0x244, Size: 1]
	int ActiveObjectiveIndex;//[Offset: 0x248, Size: 1]
	bool bUsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24c, Size: 1]
	ObjectiveState ObjectiveState;//[Offset: 0x250, Size: 1]
	int ObjectiveId;//[Offset: 0x264, Size: 1]
	enum ObjectiveType;//[Offset: 0x268, Size: 1]
	FName DefaultState;//[Offset: 0x26c, Size: 1]
	FName InitialActivateState;//[Offset: 0x274, Size: 1]
	FText DisplayName;//[Offset: 0x280, Size: 1]
	FString ObjectiveDisplayLabel;//[Offset: 0x298, Size: 1]
	bool bAppendActiveIndexToLabel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	int ObjectiveLootGroup;//[Offset: 0x2c8, Size: 1]
	Vector NavigationLocation;//[Offset: 0x2cc, Size: 1]
	bool UseNavLocationForDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0x2e8, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0x310, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x338, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x360, Size: 1]
	FName SoundEventName;//[Offset: 0x370, Size: 1]
	float SoundEventLoudness;//[Offset: 0x378, Size: 1]
	float RepeatTimeToNotifyBots;//[Offset: 0x37c, Size: 1]
	void SetState(FName NewState, int NewOwner);// 0x27cdd60
	void ResetState(bool ClearOwner);// 0x27a2440
	void OnRep_ObjectiveState();// 0x27cdb30
	void OnRep_ObjectiveId();// 0x27cdb30
	void NotifyBots();// 0x27cd0b0
	void HandleNewState();// 0x1fa35a0
	FName GetPreviousState();// 0x27ccea0
	int GetOwningTeamOrPlayer();// 0x27cce70
	float GetObjectiveMeterProgressTotal();// 0x27cce30
	float GetObjectiveMeterProgress();// 0x27ccdf0
	int GetObjectiveLootGroup();// 0x27ccdc0
	int GetObjectiveId();// 0x27430e0
	FText GetObjectiveDisplayName();// 0x27ccd10
	FString GetObjectiveDisplayLabel();// 0x27ccc90
	FName GetCurrentState();// 0x27ccc50
	bool CanChangeState(FName NewState, int NewOwner);// 0x27cc9d0
	void CallOnTeamSidesFlipped();// 0x1fae4d0
	void AssignObjectiveId(int NewId);// 0x27cc8d0
	void ActivateObjective(int NewOwner);// 0x27cc840

--------------------------------
Class: ObjectiveState
	FName CurrentState;//[Offset: 0x0, Size: 1]
	FName PreviousState;//[Offset: 0x8, Size: 1]
	int Owner;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSItemStimuliSourceComponent.AIPerceptionStimuliSourceComponent.ActorComponent.Object

--------------------------------
Class: AIPerceptionStimuliSourceComponent.ActorComponent.Object
	bool bAutoRegisterAsSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 1]
	class AISense[] RegisterAsSourceForSenses;//[Offset: 0xb8, Size: 1]
	void UnregisterFromSense(class AISense SenseClass);// 0x47d7e30
	void UnregisterFromPerceptionSystem();// 0x47d7e10
	void RegisterWithPerceptionSystem();// 0x47d73e0
	void RegisterForSense(class AISense SenseClass);// 0x47d7270

--------------------------------
Class: KSWayPointRegion
	FString RegionId;//[Offset: 0x0, Size: 1]
	KSWayPoint* ParentWayPoint;//[Offset: 0x10, Size: 1]
	KSWayPoint*[] RegionWayPoints;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSPlayerShop.Info.Actor.Object
	KSPlayerState* PlayerState;//[Offset: 0x230, Size: 1]
	MulticastInlineDelegateProperty OnPurchaseAcknowledged;//[Size: 1]
	MulticastInlineDelegateProperty OnRefundAcknowledged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopManifestChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopOfferingsChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemPurchased;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemRefunded;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemActive;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemInactive;//[Size: 1]
	MulticastInlineDelegateProperty OnShopOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnShopClosed;//[Size: 1]
	bool bWeaponMasterySwapEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 1]
	float CashPerKSPoint;//[Offset: 0x2ec, Size: 1]
	bool bDelayApplyPurchases;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0, Size: 1]
	ShopManifest ShopManifestMap;//[Offset: 0x308, Size: 1]
	Object* ConfiguratorObject;//[Offset: 0x428, Size: 1]
	<KSItem*,int> OverridePricingMap;//[Offset: 0x4d0, Size: 1]
	int NextTransactionId;//[Offset: 0x820, Size: 1]
	bool bShopOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x830, Size: 1]
	bool bShopInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x832, Size: 1]
	bool bPlayersCanAccessShopWhileDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x833, Size: 1]
	uint32 MinimumUndoableTransactionId;//[Offset: 0x834, Size: 1]
	KSPlayerShopHistoryComponent* PlayerShopHistoryComponent;//[Offset: 0x838, Size: 1]
	bool bAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	MulticastInlineDelegateProperty OnShopAvailabilityChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnShopOptionsChanged;//[Size: 1]
	ShopOptions ShopOptions;//[Offset: 0x868, Size: 1]
	PrimaryOffering[] PrimaryOneOfferings;//[Offset: 0x870, Size: 1]
	PrimaryOffering[] PrimaryTwoOfferings;//[Offset: 0x880, Size: 1]
	KSWeaponCategoryAsset* PistolWeaponCategory;//[Offset: 0x890, Size: 1]
	PrimaryOffering[] PistolOfferings;//[Offset: 0x898, Size: 1]
	KSWeaponCategoryAsset* MeleeWeaponCategory;//[Offset: 0x8a8, Size: 1]
	PrimaryOffering[] MeleeOfferings;//[Offset: 0x8b0, Size: 1]
	KSWeaponCategoryAsset* GadgetWeaponCategory;//[Offset: 0x8c0, Size: 1]
	PrimaryOffering[] GadgetOneOfferings;//[Offset: 0x8c8, Size: 1]
	PrimaryOffering[] GadgetTwoOfferings;//[Offset: 0x8d8, Size: 1]
	bool bDisableShopOnClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ea, Size: 1]
	void Undo();// 0x2807a00
	void TryToSetItemActive(enum ShopItemType, bool bActive);// 0x2807930
	void TryToPurchaseItem(enum ShopItemType);// 0x28078b0
	void TryToChangeOfferingForType(enum ShopItemType, KSItem* Item);// 0x28077f0
	void ToggleShop();// 0x28077d0
	static bool ShopItem_Equals(out const ShopItem A, out const ShopItem B);// 0x28075f0
	bool ShopHasWeaponMasterySwap();// 0x27f4ab0
	void ServerTryToOpenShop();// 0x2807520
	void ServerTryToCloseShop();// 0x28074d0
	void ServerAttemptRefund(PlayerShopTransaction InRefundTransactionInfo, PlayerShopTransaction InPurchaseTransactionInfo);// 0x28073c0
	void ServerAttemptPurchase(PlayerShopTransaction InTransactionInfo);// 0x2807300
	void ServerAttemptChangeOfferingForType(enum ShopItemType, KSItem* Item);// 0x2807200
	void ServerAttemptActivate(PlayerShopTransaction InTransactionInfo, bool bActivate);// 0x2807100
	void ResetManifest();// 0x28070e0
	void OpenShop();// 0x2806eb0
	void OnRoundStarted(out const RoundInitState RoundState);// 0x2806e10
	void OnRep_ShopOptions();// 0x1fa16a0
	void OnRep_ShopOpen();// 0x2806dd0
	void OnRep_PrimaryTwoOfferings();// 0x2806db0
	void OnRep_PrimaryOneOfferings();// 0x2806d90
	void OnRep_ConfiguratorObject();// 0x2806d70
	void OnRep_bAvailable();// 0x2806df0
	void OnPlayerSpawned(KSPlayerState* InPlayerState, KSCharacterBase* Character);// 0x2806cb0
	void OnPlayerKilled(CombatEventInfo EventInfo);// 0x2806b70
	void OnPlayerJobChanged();// 0x1fa0540
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x2806af0
	void OnKilledPlayerPossessionChanged(KSCharacterFoundation* UnpossessedCharacter, KSCharacterFoundation* PossessedCharacter);// 0x2806a30
	void OnInShopZoneChanged(KSPlayerState* Player, bool bInZone);// 0x2806960
	void OnAFKTimerRefreshed(KSPlayerController* InPlayerController);// 0x28068e0
	void NotifyShopItemRefunded(out const ShopItem ShopItem);// 0x28067f0
	void NotifyShopItemPurchased(out const ShopItem ShopItem);// 0x2806700
	void NotifyShopItemInactive(out const ShopItem ShopItem);// 0x2806610
	void NotifyShopItemChanged(out const ShopItem ShopItem);// 0x2806520
	void NotifyShopItemActive(out const ShopItem ShopItem);// 0x2806430
	ShopItem MakeShopItem(KSItem* Item);// 0x28061f0
	bool IsShopOpen();// 0x28061d0
	bool IsCircleGameShopEnabled();// 0x28061b0
	void InitializeShopItems();// 0x1fc3460
	void HandlePlayerStateJobChanged();// 0x2805f80
	enum GetTypeOfFavoriteItem();// 0x2805b70
	ShopOptions GetShopOptions();// 0x2805b30
	bool GetShopItemByType(enum ShopItemType, out ShopItem Item);// 0x28059f0
	bool GetShopAvailability();// 0x28059d0
	enum[] GetRestrictionsForType(enum ShopItemType);// 0x2805900
	int GetPriceOfItem(KSItem* InItem, bool bIsUpgrade);// 0x2805830
	enum[] GetPrerequisitesForType(enum ShopItemType);// 0x2805760
	int GetNumPurchasedForCategory(enum ShopCategoryType);// 0x28056a0
	int GetMaxPurchasedForCategory(enum ShopCategoryType);// 0x2805330
	static enum GetCategoryTypeForItemType(enum ItemType);// 0x28051b0
	KSItem*[] GetAppliedItems();// 0x2805130
	void ForceSetItemIndex(enum ShopItemType, GameplayTag PreferredEquipPoint, int CurrentIndex);// 0x2804f30
	void ForceSetItemActive(enum ShopItemType, GameplayTag PreferredEquipPoint, bool bActive);// 0x2804e20
	void EnableShopForPlayer(KSPlayerState* InPlayerState);// 0x2804da0
	void DisableShopForPlayer(KSPlayerState* InPlayerState);// 0x2804d20
	void CreateShopManifest();// 0x1fa35a0
	void CloseShop();// 0x2804d00
	void ClientRefundAcknowledge(PlayerShopTransaction InRefundTransactionInfo, PlayerShopTransaction InPurchaseTransactionInfo, bool bSuccess);// 0x2804c00
	void ClientPurchaseAcknowledge(PlayerShopTransaction InTransactionInfo, bool bSuccess);// 0x2804b30
	void ClientOpenShop();// 0x1fa1660
	void ClientCloseShop();// 0x1f9f700
	bool CanRefundItemNow(enum ShopItemType);// 0x2804aa0
	bool CanPurchaseItemNow(enum ShopItemType);// 0x2804a10
	bool CanPlayersAccessShopWhileDead();// 0x28049f0
	bool CanChangeShopOfferingForType(enum ShopItemType, KSItem* Item);// 0x2804930
	bool CanAffordItemNow(enum ShopItemType);// 0x28048a0
	void ApplyTransactions();// 0x2804880

--------------------------------
Class: ShopItem.FastArraySerializerItem
	enum Type;//[Offset: 0xc, Size: 1]
	GameplayTag PreferredEquipPoint;//[Offset: 0x10, Size: 1]
	ShopSubItem[] CurrentSubItemList;//[Offset: 0x18, Size: 1]
	ShopSubItem[] AppliedSubItemList;//[Offset: 0x28, Size: 1]
	bool bResetable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	int NextSubItemIndex;//[Offset: 0x3c, Size: 1]
	int CurrentSubItemIndex;//[Offset: 0x40, Size: 1]
	int AppliedSubItemIndex;//[Offset: 0x44, Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bIsAppliedActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	bool bStartInactive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a, Size: 1]
	bool bOneTimePurchase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b, Size: 1]
	bool bResetOnExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	bool bResetOnRound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d, Size: 1]
	bool bAuthorityIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e, Size: 1]
	int AuthorityPurchaseIndex;//[Offset: 0x50, Size: 1]
	int AuthorityLatestTransactionId;//[Offset: 0x54, Size: 1]
	bool bSimulatedIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int SimulatedPurchaseIndex;//[Offset: 0x5c, Size: 1]
	int SimulatedLatestTransactionId;//[Offset: 0x60, Size: 1]

--------------------------------
Class: ShopSubItem
	KSItem* Item;//[Offset: 0x0, Size: 1]
	int Price;//[Offset: 0x8, Size: 1]
	bool bPurchased;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]

--------------------------------
Class: ShopManifest.FastArraySerializer
	ShopItem[] Manifest;//[Offset: 0x108, Size: 1]
	KSPlayerShop* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: KSPlayerShopHistoryComponent.ActorComponent.Object
	void ClearTransactionHistory();// 0x2810580

--------------------------------
Class: ShopOptions
	bool bPrimary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSecondary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bGadgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bPerks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bGambits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bGlobals;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]

--------------------------------
Class: PrimaryOffering
	KSItem* Offering;//[Offset: 0x0, Size: 1]
	bool Mastered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool Favorited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	bool Default;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]

--------------------------------
Class: PlayerShopTransaction
	enum TransactionType;//[Offset: 0x0, Size: 1]
	enum ItemType;//[Offset: 0x1, Size: 1]
	uint32 TransactionRequestId;//[Offset: 0x4, Size: 1]

--------------------------------
Class: RoundInitState
	byte RoundNumber;//[Offset: 0x0, Size: 1]
	int AttackingTeam;//[Offset: 0x4, Size: 1]
	int DefendingTeam;//[Offset: 0x8, Size: 1]
	byte LastPrepareTriggered;//[Offset: 0xc, Size: 1]
	byte LastRoundStartTriggered;//[Offset: 0xd, Size: 1]

--------------------------------
Class: GameplayTaskResource.Object
	int ManualResourceID;//[Offset: 0x28, Size: 1]
	int8 AutoResourceID;//[Offset: 0x2c, Size: 1]
	bool bManuallySetID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 1]

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xb0, Size: 1]
	PawnActionStack[] ActionStacks;//[Offset: 0xb8, Size: 1]
	PawnActionEvent[] ActionEvents;//[Offset: 0xc8, Size: 1]
	PawnAction* CurrentAction;//[Offset: 0xd8, Size: 1]
	bool K2_PushAction(PawnAction* NewAction, byte Priority, Object* Instigator);// 0x47ef480
	static bool K2_PerformAction(Pawn* Pawn, PawnAction* Action, byte Priority);// 0x47ef390
	byte K2_ForceAbortAction(PawnAction* ActionToAbort);// 0x47ef300
	byte K2_AbortAction(PawnAction* ActionToAbort);// 0x47ef270

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x28, Size: 1]
	PawnAction* ParentAction;//[Offset: 0x30, Size: 1]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x38, Size: 1]
	Object* Instigator;//[Offset: 0x40, Size: 1]
	BrainComponent* BrainComp;//[Offset: 0x48, Size: 1]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 1]
	byte GetActionPriority();// 0x47ef180
	void Finish(byte WithResult);// 0x3c2c990
	static PawnAction* CreateActionInstance(Object* WorldContextObject, class PawnAction ActionClass);// 0x47eef30

--------------------------------
Class: PawnActionStack
	PawnAction* TopAction;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PawnActionEvent
	PawnAction* Action;//[Offset: 0x0, Size: 1]

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	bool bIsNetDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xbc, Size: 1]
	GameplayTask*[] SimulatedTasks;//[Offset: 0xc0, Size: 1]
	GameplayTask*[] TaskPriorityQueue;//[Offset: 0xd0, Size: 1]
	GameplayTask*[] TickingTasks;//[Offset: 0xf0, Size: 1]
	GameplayTask*[] KnownTasks;//[Offset: 0x100, Size: 1]
	MulticastInlineDelegateProperty OnClaimedResourcesChange;//[Size: 1]
	void OnRep_SimulatedTasks();// 0x474fdf0
	static enum K2_RunGameplayTask(interface classNone TaskOwner, GameplayTask* Task, byte Priority, class GameplayTaskResource[] AdditionalRequiredResources, class GameplayTaskResource[] AdditionalClaimedResources);// 0x474fbb0

--------------------------------
Class: GameplayTask.Object
	FName InstanceName;//[Offset: 0x30, Size: 1]
	enum ResourceOverlapPolicy;//[Offset: 0x3a, Size: 1]
	GameplayTask* ChildTask;//[Offset: 0x60, Size: 1]
	void ReadyForActivation();// 0x474fe10
	void GenericGameplayTaskDelegate__DelegateSignature();// 0x2d74e00
	void EndTask();// 0x474fac0

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 1]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 1]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 1]
	float TravelCostOverride;//[Offset: 0x8, Size: 1]
	float EnteringCostOverride;//[Offset: 0xc, Size: 1]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x30, Size: 1]
	float FixedAreaEnteringCost;//[Offset: 0x34, Size: 1]
	Color DrawColor;//[Offset: 0x38, Size: 1]
	NavAgentSelector SupportedAgents;//[Offset: 0x3c, Size: 1]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x40, Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x40, Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x40, Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x40, Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41, Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x41, Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x41, Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x41, Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x41, Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x41, Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x41, Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x41, Size: 1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 1]

--------------------------------
Class: GameplayResourceSet

--------------------------------
Class: KSInitialLoadout
	KSItem*[] LoadoutItems;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSAIItemPriorityComponent.ActorComponent.Object
	KSBTItemPriorityTableRow[] ItemPriorities;//[Offset: 0xb0, Size: 1]
	void InsertPriority(out const KSBTItemPriorityTableRow ItemPriority);// 0x26cfa90
	void InsertPriorities(const DataTable* ItemPriorityTable);// 0x26cfa10
	float GetWeightByName(FString ItemName);// 0x26cf920
	float GetWeight(KSItem* Item);// 0x26cf830
	float GetShopPurchaseWeightByName(FString ItemName);// 0x26cf680
	float GetShopPurchaseWeight(KSItem* Item);// 0x26cf590
	float GetShopPriorityGroupByName(FString ItemName);// 0x26cf4a0
	float GetShopPriorityGroup(KSItem* Item);// 0x26cf3b0
	float GetPriorityMultiplierByName(FString ItemName);// 0x26cf180
	float GetPriorityMultiplier(KSItem* Item);// 0x26cf090
	void ClearPriorities();// 0x26ceba0

--------------------------------
Class: KSBTItemPriorityTableRow.TableRowBase
	KSItem* ItemAsset;//[Offset: 0x8, Size: 1]
	float Weight;//[Offset: 0x30, Size: 1]
	float ShopPurchaseWeight;//[Offset: 0x34, Size: 1]
	float ShopPriorityGroup;//[Offset: 0x38, Size: 1]
	float Multiplier;//[Offset: 0x3c, Size: 1]

--------------------------------
Class: KSAIObjectivePriorityComponent.ActorComponent.Object
	DataTable* ObjectivePriorityTable;//[Offset: 0xb0, Size: 1]
	<FName,KSBTObjectivePriorityTableRow> ObjectivePriorities;//[Offset: 0xb8, Size: 1]
	KSBTObjectivePriorityTableRow[] SortedPriorities;//[Offset: 0x108, Size: 1]
	void UpdatePriority(out const FName Key, out const KSBTObjectivePriorityTableRow ObjectivePriority, bool ShouldResort);// 0x26d3c60
	void UpdatePriorities(DataTable* ObjectivePriorityTableIn);// 0x26d3be0
	void Setup(DataTable* ObjectivePriorityTableIn);// 0x26d3b60
	void InsertPriority(out const FName Key, out const KSBTObjectivePriorityTableRow ObjectivePriority, bool ShouldResort);// 0x26d3600
	void InsertPriorities(DataTable* ObjectivePriorityTableIn);// 0x26d3580
	float GetPriority(out const FName Key);// 0x26d34e0
	void ClearPriorities();// 0x26d3110
	void ApplyPrioritiesFromDifficulty(DataTable* ObjectivePriorityTableIn);// 0x26d3090

--------------------------------
Class: KSBTObjectivePriorityTableRow.TableRowBase
	KSBTObjective* Objective;//[Offset: 0x8, Size: 1]
	float MinDistance;//[Offset: 0x10, Size: 1]
	float MaxDistance;//[Offset: 0x14, Size: 1]
	float MaxSecondsElapsed;//[Offset: 0x18, Size: 1]
	float MinSecondsElapsed;//[Offset: 0x1c, Size: 1]
	float MaxSecondsRemaining;//[Offset: 0x20, Size: 1]
	float MinSecondsRemaining;//[Offset: 0x24, Size: 1]
	float Priority;//[Offset: 0x28, Size: 1]
	KSPlayerMod*[] RequiredAbilities;//[Offset: 0x30, Size: 1]
	KSBTTargetSelector*[] ObjectiveValidationArray;//[Offset: 0x40, Size: 1]
	DataTable* TargetSelectionTable;//[Offset: 0x50, Size: 1]
	DataTable* OverrideDataTable;//[Offset: 0x58, Size: 1]
	GameplayTag[] RequiredGameplayTags;//[Offset: 0x60, Size: 1]

--------------------------------
Class: KSBTObjective.DataAsset.Object
	FString ObjectiveName;//[Offset: 0x30, Size: 1]
	FString ObjectiveTargetKeyName;//[Offset: 0x40, Size: 1]
	KSBTAction*[] RequiredActions;//[Offset: 0x50, Size: 1]
	KSPlayerMod*[] RequiredAbilities;//[Offset: 0x60, Size: 1]

--------------------------------
Class: KSBTTargetSelector.DataAsset.Object
	class AISense[] SensesToUse;//[Offset: 0x30, Size: 1]
	KSPerceptionFilter PerceptionFilter;//[Offset: 0x40, Size: 1]
	bool SelectCombatTargetOfResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x230, Size: 1]
	bool SelectClosestTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x231, Size: 1]
	bool SelectFurthestTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x232, Size: 1]
	bool SelectRandomTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x233, Size: 1]

--------------------------------
Class: KSPerceptionFilter
	FName PerceptionEvent;//[Offset: 0x0, Size: 1]
	KSAffiliationFilter AffiliationFilter;//[Offset: 0x8, Size: 1]
	KSCharacterStateFilter CharacterStateFilter;//[Offset: 0x10, Size: 1]
	KSInteractableStateFilter InteractableStateFilter;//[Offset: 0xe8, Size: 1]
	KSDestructibleStateFilter DestructibleStateFilter;//[Offset: 0x120, Size: 1]
	KSItemDropStateFilter ItemDropStateFilter;//[Offset: 0x124, Size: 1]
	KSLootSiteFilter LootSiteFilter;//[Offset: 0x134, Size: 1]
	KSDestroyableHazardStateFilter DestroyableHazardStateFilter;//[Offset: 0x136, Size: 1]
	KSMapPointStateFilter MapPointStateFilter;//[Offset: 0x140, Size: 1]
	KSObjectiveStateFilter ObjectiveStateFilter;//[Offset: 0x170, Size: 1]
	bool bCheckDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 1]
	byte DistanceOperation;//[Offset: 0x189, Size: 1]
	float Distance;//[Offset: 0x18c, Size: 1]
	bool bCheckDistanceRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	float MinDistance;//[Offset: 0x194, Size: 1]
	float MaxDistance;//[Offset: 0x198, Size: 1]
	bool bCheckActorClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c, Size: 1]
	class Actor* ActorClass;//[Offset: 0x1a0, Size: 1]
	bool bCheckActorClassArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	class Actor[] ActorClassArray;//[Offset: 0x1d0, Size: 1]
	bool bCheckLOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bCheckForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	float MaxForwardAngle;//[Offset: 0x1e4, Size: 1]
	bool bCheckIntersectsNavMeshPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]

--------------------------------
Class: KSAffiliationFilter
	bool bCountEnemies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bCountAllies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bCountSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bCountUnaffiliated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: KSCharacterStateFilter
	bool bCheckHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte HealthOperation;//[Offset: 0x1, Size: 1]
	float HealthPercent;//[Offset: 0x4, Size: 1]
	bool bCheckDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	byte Downed;//[Offset: 0x9, Size: 1]
	bool bCheckDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 1]
	byte Dead;//[Offset: 0xb, Size: 1]
	bool bCheckCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	byte Crouched;//[Offset: 0xd, Size: 1]
	bool bCheckFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	byte Falling;//[Offset: 0xf, Size: 1]
	bool bCheckSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	byte Sprinting;//[Offset: 0x11, Size: 1]
	bool bCheckSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 1]
	byte Swimming;//[Offset: 0x13, Size: 1]
	bool bCheckRidingZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	byte RidingZipline;//[Offset: 0x15, Size: 1]
	bool bCheckIsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 1]
	byte IsBot;//[Offset: 0x17, Size: 1]
	bool bCheckBehaviorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	byte BehaviorOperation;//[Offset: 0x19, Size: 1]
	enum BehaviorState;//[Offset: 0x1a, Size: 1]
	bool bCheckInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	byte Interacting;//[Offset: 0x1c, Size: 1]
	bool bCheckInteractableClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 1]
	class Actor* InteractableClass;//[Offset: 0x20, Size: 1]
	float MinInteractTimeRemaining;//[Offset: 0x48, Size: 1]
	float MaxInteractTimeRemaining;//[Offset: 0x4c, Size: 1]
	bool bCheckADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	byte ADS;//[Offset: 0x51, Size: 1]
	bool bCheckHasReviver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	byte HasReviver;//[Offset: 0x53, Size: 1]
	bool bCheckReviverAffiliation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	KSAffiliationFilter ReviverAffiliation;//[Offset: 0x55, Size: 1]
	bool bCheckIsOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59, Size: 1]
	byte IsOnFire;//[Offset: 0x5a, Size: 1]
	bool bCheckIsWeaponEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b, Size: 1]
	byte IsWeaponEquipped;//[Offset: 0x5c, Size: 1]
	class KSWeapon* EquippedWeaponClass;//[Offset: 0x60, Size: 1]
	bool bCheckIsWeaponAssetEquipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	byte IsWeaponAssetEquipped;//[Offset: 0x89, Size: 1]
	KSWeaponAsset* EquippedWeaponAsset;//[Offset: 0x90, Size: 1]
	bool bCheckRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	enum[] RolesToCheck;//[Offset: 0xc0, Size: 1]
	bool bRequireAllRoles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]

--------------------------------
Class: KSInteractableStateFilter
	bool bCheckIsInteracting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte IsInteracting;//[Offset: 0x1, Size: 1]
	bool bCheckInteractorAffiliation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	KSAffiliationFilter InteractorAffiliation;//[Offset: 0x3, Size: 1]
	bool bCheckCanInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	byte CanInteract;//[Offset: 0x8, Size: 1]
	bool bCheckInteractableClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	class Actor* InteractableClass;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSDestructibleStateFilter
	bool bCheckIsDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte Destroyed;//[Offset: 0x1, Size: 1]

--------------------------------
Class: KSItemDropStateFilter
	bool bCheckEquipPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	GameplayTag EquipPoint;//[Offset: 0x4, Size: 1]
	bool bCheckHasBeenSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	byte HasBeenSeen;//[Offset: 0xd, Size: 1]
	bool bCheckIsInActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 1]
	byte IsInActiveState;//[Offset: 0xf, Size: 1]

--------------------------------
Class: KSLootSiteFilter
	bool bCheckHasBeenSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte HasBeenSeen;//[Offset: 0x1, Size: 1]

--------------------------------
Class: KSDestroyableHazardStateFilter
	bool bReturnTrueIfNotDestroyableHazard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bCheckCanBotDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	byte CanBotDetect;//[Offset: 0x2, Size: 1]
	bool bCheckShouldDestroyWithGunfire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	byte ShouldDestroyWithGunfire;//[Offset: 0x4, Size: 1]
	bool bCheckShouldDestroyWithEMP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	byte ShouldDestroyWithEMP;//[Offset: 0x6, Size: 1]

--------------------------------
Class: KSMapPointStateFilter
	bool bCheckMapPointType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	GameplayTagContainer RequiredMapPointTypes;//[Offset: 0x8, Size: 1]
	bool bCheckIsPointActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	byte IsPointActive;//[Offset: 0x29, Size: 1]
	bool bCheckIsPointAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	byte IsPointAvailable;//[Offset: 0x2b, Size: 1]
	bool bCheckIsPointFriendly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	byte IsPointFriendly;//[Offset: 0x2d, Size: 1]

--------------------------------
Class: KSObjectiveStateFilter
	bool bCheckObjectiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte MatchesObjectiveState;//[Offset: 0x1, Size: 1]
	FName[] StateNamesToCheck;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSChargeRuleComponent.KSGameRuleComponent.ActorComponent.Object
	bool bDefaultChargeOnRoundStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	float ChargePerRound;//[Offset: 0xbc, Size: 1]
	bool bDefaultChargePerSecond;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	float ChargePerSecond;//[Offset: 0xc4, Size: 1]
	float ChargePerDown;//[Offset: 0xc8, Size: 1]
	float ChargePerElimination;//[Offset: 0xcc, Size: 1]
	float ChargePerAssist;//[Offset: 0xd0, Size: 1]
	float ChargePerRevive;//[Offset: 0xd4, Size: 1]
	void OnRoundStarted(out const RoundInitState RoundState);// 0x2732730
	void OnRoundOver(KSGameState* KSGameState, out const RoundResult RoundResult);// 0x2732650

--------------------------------
Class: RoundResult
	byte RoundNumber;//[Offset: 0x0, Size: 1]
	KSTeamState* WinningTeam;//[Offset: 0x8, Size: 1]
	int WinnerScore;//[Offset: 0x10, Size: 1]
	bool WinByElimination;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	byte LastTriggeredRound;//[Offset: 0x15, Size: 1]
	KSObjectiveBase* ObjectiveChosen;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSBackfillRuleComponent.KSGameRuleComponent.ActorComponent.Object
	float BackfillRequestTimeToLive;//[Offset: 0xe8, Size: 1]
	float BackfillRequestOverlapTime;//[Offset: 0xec, Size: 1]
	float BackfillRequestBatchDelay;//[Offset: 0xf0, Size: 1]
	enum BackfillRankingType;//[Offset: 0x100, Size: 1]
	float MinRankRangeOffset;//[Offset: 0x104, Size: 1]
	float MaxRankRangeOffset;//[Offset: 0x108, Size: 1]
	bool bStartSealed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 1]
	bool bDynamicSeal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10d, Size: 1]
	KSBackfillDynamicSealInfo DynamicSealInfo;//[Offset: 0x110, Size: 1]
	float BackfillPlayerReserveTime;//[Offset: 0x12c, Size: 1]
	float BackfillPartyReserveTime;//[Offset: 0x130, Size: 1]
	void SendBackfillRequest();// 0x26e7aa0
	void PlayerReserveTimerExpired(int PlayerId);// 0x26e7970
	void PartyReserveTimerExpired(int PartyId);// 0x26e78f0

--------------------------------
Class: KSBackfillDynamicSealInfo
	bool bRoundCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int RoundCount;//[Offset: 0x4, Size: 1]
	bool bLeadCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int LeadCount;//[Offset: 0xc, Size: 1]
	bool bWinsUntilVictory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	int WinsUntilVictory;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSPointsToCashRuleComponent.KSGameRuleComponent.ActorComponent.Object
	float CashPerPoint;//[Offset: 0xb0, Size: 1]
	void OnScoreEvent(KSScoreChangeEvent ScoreEvent);// 0x281cf70

--------------------------------
Class: KSScoreChangeEvent
	int Delta;//[Offset: 0x0, Size: 1]
	FText Reason;//[Offset: 0x8, Size: 1]
	bool bBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	KSPlayerState* Instigator;//[Offset: 0x24, Size: 1]

--------------------------------
Class: AdvancedCombatSummary
	Pawn* DamageInstigatorPawn;//[Offset: 0x0, Size: 1]
	Actor* DamageCauser;//[Offset: 0x8, Size: 1]
	AdvancedCombatEvent[] CombatEvents;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AdvancedCombatEvent
	PlayerState* DamageInstigator;//[Offset: 0x0, Size: 1]
	Vector_NetQuantize DamageInstigatorLocation;//[Offset: 0x8, Size: 1]
	int KSCharacterAimMode;//[Offset: 0x14, Size: 1]
	bool IsAimingDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool IsAimingOverTheShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	bool IsAimingAlternate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a, Size: 1]
	bool IsAimingDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 1]
	Pawn* DamageInstigatorPawn;//[Offset: 0x1c, Size: 1]
	Actor* DamageCauser;//[Offset: 0x24, Size: 1]
	float Damage;//[Offset: 0x2c, Size: 1]
	class DamageType* DamageType;//[Offset: 0x30, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x38, Size: 1]
	int VictimId;//[Offset: 0x40, Size: 1]
	FString Victim;//[Offset: 0x48, Size: 1]
	Vector_NetQuantize VictimLocation;//[Offset: 0x58, Size: 1]
	int VictimTeamNum;//[Offset: 0x64, Size: 1]
	int InstigatorId;//[Offset: 0x68, Size: 1]
	FString Instigator;//[Offset: 0x70, Size: 1]
	enum FriendlyFireType;//[Offset: 0x80, Size: 1]
	float GameTimeStamp;//[Offset: 0x84, Size: 1]
	Vector_NetQuantize HitLocation;//[Offset: 0x88, Size: 1]
	FName HitBone;//[Offset: 0x94, Size: 1]
	bool Headshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 1]
	bool DowningHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d, Size: 1]
	bool FatalHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e, Size: 1]
	bool bResisted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f, Size: 1]
	bool bReduced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	bool bShielded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 1]

--------------------------------
Class: PGame_SonyMatchData
	FString MatchID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PGame_InactivePlayerStateEntry
	PlayerState* PlayerState;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSEventAssistants
	PlayerState*[] Assistants;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSGlobalShotListener.Actor.Object
	MulticastInlineDelegateProperty ShotNotifyDelegate;//[Size: 1]
	void ShotNotify(KSGlobalShotInfo ShotInfo);// 0x277a3d0

--------------------------------
Class: KSGlobalShotInfo
	PlayerState* FiringPlayer;//[Offset: 0x0, Size: 1]
	Vector FiringLocation;//[Offset: 0x8, Size: 1]
	float AudibleRange;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSRewardsCalculator.Object
	void CalcPlayerRewards(int PlayerTeamNum, KSPlayerMatchStats* playerStats, out PlayerRewardsSummary Rewards, KSPlayerController* PlayerController);// 0x283ae20

--------------------------------
Class: KSPlayerMatchStats.Object
	<enum,PlayerMatchStatInfo> StatsByType;//[Offset: 0x28, Size: 1]
	bool GetStat(enum StatType, out PlayerMatchStatInfo OutStat);// 0x284cf50

--------------------------------
Class: PlayerMatchStatInfo
	enum StatType;//[Offset: 0x0, Size: 1]
	float StatValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PlayerRewardsSummary
	<int64,RewardProgress> ActivityRewards;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RewardProgress
	int InitialQuantity;//[Offset: 0x0, Size: 1]
	int Quantity;//[Offset: 0x4, Size: 1]
	enum[] SourceKeys;//[Offset: 0x8, Size: 1]
	float[] SourceValues;//[Offset: 0x18, Size: 1]
	FString[] EventKeys;//[Offset: 0x28, Size: 1]
	float[] EventValues;//[Offset: 0x38, Size: 1]
	FString[] BoosterKeys;//[Offset: 0x48, Size: 1]
	float[] BoosterValues;//[Offset: 0x58, Size: 1]
	FString[] ExtraDataKeys;//[Offset: 0x68, Size: 1]
	float[] ExtraDataValues;//[Offset: 0x78, Size: 1]
	bool InitialUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]

--------------------------------
Class: KSRevealManager.Actor.Object
	MulticastInlineDelegateProperty OnServerRevealAdded;//[Size: 1]
	LinearColor FriendlyColor;//[Offset: 0x230, Size: 1]
	LinearColor EnemyColor;//[Offset: 0x240, Size: 1]
	LinearColor NeutralColor;//[Offset: 0x250, Size: 1]
	LinearColor FriendlyObjectiveColor;//[Offset: 0x260, Size: 1]
	LinearColor EnemyObjectiveColor;//[Offset: 0x270, Size: 1]
	LinearColor NeutralObjectiveColor;//[Offset: 0x280, Size: 1]
	KSGameState* GameStateRef;//[Offset: 0x290, Size: 1]
	KSRevealInfoSerializerContainer ActiveRevealInfoContainer;//[Offset: 0x298, Size: 1]
	KSRevealInfo[] LocalActiveRevealInfos;//[Offset: 0x3b8, Size: 1]
	void SetGameStateRef(KSGameState* NewGameState);// 0x283c200
	void ReevaluateRevealedStatusForActor(Actor* ActorToCheck);// 0x283bec0
	void Local_RemoveAllRevealsOfSourceForActor(enum RevealSourcesToRemove, const Actor* ActorToRemove);// 0x283be00
	void Local_RemoveAllRevealsOfActor(const Actor* ActorToRemove);// 0x283bd80
	void Local_AddRevealInfo(out const KSRevealInfo NewRevealInfo, float RevealTimeSeconds, float RevealDelaySeconds);// 0x283bc50
	bool HasMatchingRevealInfo(const Actor* RevealedActor, const KSPlayerState* Revealer, enum RevealSource);// 0x283bab0
	void HandOffReveals(KSPlayerState* OriginalRevealer, KSPlayerState* NewRevealer);// 0x283b900
	KSGameState* GetGameStateRef();// 0x283b5c0
	KSPlayerState*[] GetAllRevealersForRevealedActor(Actor* RevealedActor, bool bIncludeSelfOnlyReveals);// 0x283b4b0
	void DetermineRevealParameters(const Actor* RevealTargetToCheck, const KSPlayerState* PlayerStateToCheck, out bool bRevealTargetToPlayer, out LinearColor OutRevealColor, out bool bShowPlayerRevealedUI, out bool bShowEnemyDetectedUI);// 0x283b1e0
	void Authority_RequestReevaluateRevealedStatusForAllActorsOnAllClients();// 0x283ad60
	void Authority_RequestReevaluateRevealedStatusForActorOnAllClients(Actor* ActorToCheck);// 0x283ace0
	void Authority_RemoveRevealInfo(out const KSRevealInfo RevealInfoToRemove);// 0x283ac40
	void Authority_RemoveAllRevealsOfSourceForPlayer(enum RevealSourcesToRemove, const KSPlayerState* PlayerStateToRemove);// 0x283ab80
	void Authority_RemoveAllRevealsOfActorForInstigator(const Actor* ActorToRemove, const Object* OwningInstigator);// 0x283aac0
	void Authority_RemoveAllRevealsOfActorAtPriority(const Actor* ActorToRemove, enum MaxRemovePriority);// 0x283aa00
	void Authority_RemoveAllRevealsOfActor(const Actor* ActorToRemove);// 0x283a980
	void Authority_RemoveAllRevealsForPlayerById(out const KSPersistentPlayerId PlayerId);// 0x283a8e0
	void Authority_RemoveAllRevealsForPlayer(const KSPlayerState* PlayerStateToRemove);// 0x283a860
	void Authority_RemoveAllRevealsForInstigator(const Object* OwningInstigator);// 0x283a7e0
	void Authority_AddRevealInfo(out const KSRevealInfo NewRevealInfo, float RevealTimeSeconds, float RevealDelaySeconds);// 0x283a6b0

--------------------------------
Class: KSRevealInfo
	int RevealID;//[Offset: 0x0, Size: 1]
	KSPlayerState* Revealer;//[Offset: 0x4, Size: 1]
	Actor* RevealTarget;//[Offset: 0xc, Size: 1]
	Object* RevealInstigator;//[Offset: 0x14, Size: 1]
	class Object* RevealClass;//[Offset: 0x20, Size: 1]
	enum TargetAudience;//[Offset: 0x28, Size: 1]
	enum RevealSource;//[Offset: 0x29, Size: 1]
	enum RevealPriority;//[Offset: 0x2a, Size: 1]
	bool bUseRevealOverrideColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	LinearColor RevealOverrideColor;//[Offset: 0x2c, Size: 1]
	bool bFilled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	bool bOutlineTargetOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	bool bNotifyTargetRevealed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e, Size: 1]
	bool bDisplayEnemyDetectedUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f, Size: 1]
	bool bForcedDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: KSRevealInfoSerializerContainer.FastArraySerializer
	KSRevealInfoSerializerItem[] RevealInfoSerializerItems;//[Offset: 0x108, Size: 1]

--------------------------------
Class: KSRevealInfoSerializerItem.FastArraySerializerItem
	KSRevealInfo RevealInfo;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSMVPDeterminant.DataAsset.Object
	GameplayTag[] TopStats;//[Offset: 0x30, Size: 1]
	<GameplayTag,float> StatToWeightMap;//[Offset: 0x40, Size: 1]
	GameplayTag[] GetSortedTopStatsForPersistentPlayerData(KSPersistentPlayerData* PersistentPlayerData);// 0x27c85e0
	KSPersistentPlayerData*[] GetOrderedPersistentPlayerDatasForMVPPoints(KSPersistentPlayerData*[] UnorderedPersistentPlayerDatas);// 0x27c8450
	int ComputeMVPScoreForPlayerState(const KSPlayerState* PlayerState);// 0x27c7df0
	bool ComputeMVPPointsForPersistentPlayerData(KSPersistentPlayerData* PersistentPlayerData, out int OutMVPPoints);// 0x27c7d20

--------------------------------
Class: KSGameHUDSettings
	bool ShouldShowEnemyCaptureProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	class UserWidget* GameModeWidget;//[Offset: 0x8, Size: 1]
	bool ShowRoundEndResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x248, Size: 1]

--------------------------------
Class: KSSpawnSelectorComponent.ActorComponent.Object
	KSSpawnSelectorTreeNode BaseRoot;//[Offset: 0xb0, Size: 1]
	KSSpawnSelectorTreeNode SideRoot;//[Offset: 0xd8, Size: 1]
	KSSpawnSelectorTreeNode FlipRoot;//[Offset: 0x100, Size: 1]
	KSSpawnSelectorTreeNode GameRoot;//[Offset: 0x128, Size: 1]
	PlayerStart*[] PlayerStarts;//[Offset: 0x150, Size: 1]
	FName FriendlyName;//[Offset: 0x160, Size: 1]
	bool bCanEverFlip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	float InvalidFlipPercent;//[Offset: 0x17c, Size: 1]
	bool bFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 1]
	void RemovePlayerStart(PlayerStart* NewPlayerStart);// 0x2848a00
	void OnRoundOver(KSGameState* KSGameState, out const RoundResult RoundResult);// 0x2848920
	void InitSideRoot(out KSSpawnSelectorTreeNode InSideRoot);// 0x2d74e00
	void InitGameRoot(out KSSpawnSelectorTreeNode InGameRoot);// 0x2d74e00
	void InitFlipRoot(out KSSpawnSelectorTreeNode InFlipRoot);// 0x2d74e00
	void InitBaseRoot(out KSSpawnSelectorTreeNode InBaseRoot);// 0x2d74e00
	FName[] GetSelectorComponentFriendlyNameHierarchy();// 0x2848350
	PlayerStart*[] GetPlayerStarts();// 0x2848020
	FName GetFriendlyName();// 0x2847fd0
	bool AreSidesFlipped();// 0x2847c80
	void AddPlayerStart(PlayerStart* NewPlayerStart);// 0x2847c00

--------------------------------
Class: KSSpawnSelectorTreeNode
	KSSpawnSelectorTier SelectorTier;//[Offset: 0x0, Size: 1]
	KSSpawnSelectorTierBranch* SelectorTierBranch;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSSpawnSelectorTier
	FName Name;//[Offset: 0x0, Size: 1]
	float Tolerance;//[Offset: 0x8, Size: 1]
	float MinScore;//[Offset: 0xc, Size: 1]
	KSSpawnSelectorTierRule[] SpawnSelectorTierRules;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSSpawnSelectorTierRule
	KSSpawnRule* SpawnRule;//[Offset: 0x0, Size: 1]
	float Multiplier;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSpawnRule.Object
	FName RuleName;//[Offset: 0x28, Size: 1]
	FName[] OverridePropertyNames;//[Offset: 0x30, Size: 1]
	void Initialize();// 0x27b60a0
	bool GetWorldSettingsPropertyInt(out const FName PropertyName, out int OutInt);// 0x28486f0
	bool GetWorldSettingsPropertyFloat(out const FName PropertyName, out float OutFloat);// 0x2848600
	bool GetWorldSettingsPropertyBool(out const FName PropertyName, out bool OutBool);// 0x2848510
	float GetScoreForSpawn(const Controller* Controller, const PlayerStart* PlayerStart);// 0x2848280
	FName GetRuleName();// 0x2848160
	KSSpawnSelectorComponent* GetOuterSpawnSelectorComponent();// 0x2847ff0

--------------------------------
Class: KSSpawnSelectorTierBranch.KSSpawnRule.Object
	KSSpawnSelectorTreeNode DefaultBranch;//[Offset: 0x40, Size: 1]
	bool bDoesHandleFailure;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 1]
	KSSpawnSelectorTreeNode FailureBranch;//[Offset: 0x70, Size: 1]
	KSSpawnSelectorTreeNode SelectSpawnSelectorTreeNode(const Controller* Controller, out const PlayerStart*[] SpawnPoints);// 0x2848a80
	void GetBranches(out KSSpawnSelectorTreeNode[] OutBranches);// 0x2847e20

--------------------------------
Class: KSLootGroupGuaranteeMap
	int TotalLootSitesActive;//[Offset: 0x0, Size: 1]
	<byte,KSLootGroupGuarantee> GuaranteeMap;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSLootGroupGuarantee
	int Quantity;//[Offset: 0x0, Size: 1]
	int[] ObjectiveLootGroups;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSLootRaritySwapInfo
	float Chance;//[Offset: 0x0, Size: 1]
	int Amount;//[Offset: 0x4, Size: 1]
	enum OldRarity;//[Offset: 0x8, Size: 1]
	enum NewRarity;//[Offset: 0x9, Size: 1]

--------------------------------
Class: KSAIActorCollection.ActorComponent.Object
	KSDropLocation*[] DropLocations;//[Offset: 0xb0, Size: 1]
	DataTable* BotNameTable;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: KSDropLocation.KSMapPoint.Actor.Object
	KSWayPointSet* WayPointSet;//[Offset: 0x258, Size: 1]
	bool ReverseWayPointSetDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	float FlightDistanceModifier;//[Offset: 0x264, Size: 1]
	float FreefallXYDistance;//[Offset: 0x268, Size: 1]
	float FreefallHeight;//[Offset: 0x26c, Size: 1]
	bool ShouldReverseWayPointSetDirection();// 0x2743900
	void IncrementSelectionCount();// 0x2743370
	void HandleRoundSetup(out const RoundInitState RoundInitState);// 0x27432d0
	KSWayPointSet* GetWayPointSet();// 0x27432a0
	int[] GetValidSides();// 0x27431e0
	Vector GetTargetDropLocation();// 0x26cebc0
	int GetNumTimesSelected();// 0x2743140
	float GetFreefallXYDistance();// 0x2743120
	float GetFreefallHeight();// 0x2743100
	float GetFlightDistanceModifier();// 0x27430e0

--------------------------------
Class: KSOutOfBoundsManager.ActorComponent.Object
	float OutOfBoundsWarningTime;//[Offset: 0xc4, Size: 1]
	float OutOfBoundsTickDamageTime;//[Offset: 0xc8, Size: 1]
	float OutOfBoundsTickDamage;//[Offset: 0xcc, Size: 1]
	float TimeSpentGroundedAllowedBeforeSave;//[Offset: 0xd0, Size: 1]
	class DamageType* OutOfBoundsDamageType;//[Offset: 0xd8, Size: 1]
	bool bAllowSaving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	AkAudioEvent* AnnouncerLineOnSaved;//[Offset: 0xe8, Size: 1]
	AkAudioEvent* AnnouncerLineOnEntered;//[Offset: 0xf0, Size: 1]
	int CharacterOverlaps;//[Offset: 0xf8, Size: 1]
	TimerHandle CharacterWarningTimer;//[Offset: 0x100, Size: 1]
	TimerHandle CharacterDamageTickTimer;//[Offset: 0x108, Size: 1]
	int VehicleOverlaps;//[Offset: 0x110, Size: 1]
	TimerHandle VehicleWarningTimer;//[Offset: 0x118, Size: 1]
	TimerHandle VehicleDamageTickTimer;//[Offset: 0x120, Size: 1]
	PrimitiveComponent* OverlapCheckComponent;//[Offset: 0x128, Size: 1]
	TimerHandle TimeSpentGroundedTimerHandle;//[Offset: 0x130, Size: 1]
	float DefaultRecoveryUseTime;//[Offset: 0x138, Size: 1]
	void TickDamage();// 0x27cde30
	void OnOutOfBoundsWarningExpired();// 0x27cdb10
	void OnCharacterOutOfWorld(KSCharacter* Character);// 0x27cda70
	void OnActorOverlapZoneEnd(Actor* OverlappedActor, Actor* OtherActor);// 0x27cd9a0
	void OnActorOverlapZoneBegin(Actor* OverlappedActor, Actor* OtherActor);// 0x27cd800
	void OnActorOverlapVolumeEnd(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x27cd5f0
	void OnActorOverlapVolumeBegin(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x27cd2c0
	void ExpireTimeSpentGroundedTimer();// 0x27ccc30

--------------------------------
Class: KSMatchDataRecorder.Object
	MatchRecord MatchRecord;//[Offset: 0x28, Size: 1]
	<uint64,WeaponUseSummaryRecord> InProgressWeaponSummaries;//[Offset: 0x288, Size: 1]
	void SendGeneralEvents();// 0x27aee20
	void PushJsonMatchData();// 0xd94a20
	void OnPlayerLogout(GameModeBase* GameMode, Controller* Player);// 0x27aece0
	void OnPlayerLogin(GameModeBase* GameMode, PlayerController* NewPlayer);// 0x27aec20

--------------------------------
Class: MatchRecord
	int version_major;//[Offset: 0x0, Size: 1]
	int version_minor;//[Offset: 0x4, Size: 1]
	SerializedInstanceId instance_id;//[Offset: 0x8, Size: 1]
	int instance_site_id;//[Offset: 0x18, Size: 1]
	SerializedMatchId match_id;//[Offset: 0x20, Size: 1]
	FString map_name;//[Offset: 0x30, Size: 1]
	FString mode_name;//[Offset: 0x40, Size: 1]
	int map_game_id;//[Offset: 0x50, Size: 1]
	int queue_id;//[Offset: 0x54, Size: 1]
	int team_size;//[Offset: 0x58, Size: 1]
	int winning_team;//[Offset: 0x5c, Size: 1]
	FString match_start_time;//[Offset: 0x60, Size: 1]
	FString match_end_time;//[Offset: 0x70, Size: 1]
	int match_fubar_state;//[Offset: 0x80, Size: 1]
	int Duration;//[Offset: 0x84, Size: 1]
	int total_rounds;//[Offset: 0x88, Size: 1]
	int total_players;//[Offset: 0x8c, Size: 1]
	int total_bots;//[Offset: 0x90, Size: 1]
	int total_human_backfills;//[Offset: 0x94, Size: 1]
	int total_bot_backfills;//[Offset: 0x98, Size: 1]
	int total_earned;//[Offset: 0x9c, Size: 1]
	int total_spent;//[Offset: 0xa0, Size: 1]
	int total_refunded;//[Offset: 0xa4, Size: 1]
	int total_on_time;//[Offset: 0xa8, Size: 1]
	int total_deserters;//[Offset: 0xac, Size: 1]
	int total_deserter_rounds;//[Offset: 0xb0, Size: 1]
	int total_surrender_polls;//[Offset: 0xb4, Size: 1]
	bool ended_in_surrender;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int total_penalized_players;//[Offset: 0xbc, Size: 1]
	MinimapData Minimap;//[Offset: 0xc0, Size: 1]
	PlayerRecord[] Players;//[Offset: 0xe0, Size: 1]
	JobSelectionRecord[] job_selection_records;//[Offset: 0xf0, Size: 1]
	JobBanRecord[] job_ban_records;//[Offset: 0x100, Size: 1]
	ClientContextRecord[] client_context_records;//[Offset: 0x110, Size: 1]
	<int,ObjectDictionaryRecord> object_dictionary_records;//[Offset: 0x120, Size: 1]
	RoundEventRecord[] rounds;//[Offset: 0x170, Size: 1]
	PlayerConnectionEventRecord[] player_connections;//[Offset: 0x180, Size: 1]
	BotBackfillEventRecord[] bot_backfill;//[Offset: 0x190, Size: 1]
	HumanBackfillEventRecord[] human_backfill;//[Offset: 0x1a0, Size: 1]
	ObjectiveCaptureEventRecord[] objective_capture_events;//[Offset: 0x1b0, Size: 1]

--------------------------------
Class: SerializedInstanceId

--------------------------------
Class: SerializedMatchId

--------------------------------
Class: MinimapData
	LocationRecord northwest_corner;//[Offset: 0x0, Size: 1]
	float Width;//[Offset: 0xc, Size: 1]
	ObjectiveRecord[] objectives;//[Offset: 0x10, Size: 1]

--------------------------------
Class: LocationRecord
	float X;//[Offset: 0x0, Size: 1]
	float Y;//[Offset: 0x4, Size: 1]
	float Z;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ObjectiveRecord
	int Type;//[Offset: 0x0, Size: 1]
	LocationRecord Location;//[Offset: 0x4, Size: 1]

--------------------------------
Class: PlayerRecord.PlayerStatisticsBase
	FString login_session_uuid;//[Offset: 0xb0, Size: 1]
	FString installation_uuid;//[Offset: 0xc0, Size: 1]
	int ue_player_id;//[Offset: 0xd0, Size: 1]
	int hz_player_id;//[Offset: 0xd4, Size: 1]
	FString player_name;//[Offset: 0xd8, Size: 1]
	int team_id;//[Offset: 0xe8, Size: 1]
	int class_id;//[Offset: 0xec, Size: 1]
	int player_type;//[Offset: 0xf0, Size: 1]
	int portal_id;//[Offset: 0xf4, Size: 1]
	int input_type;//[Offset: 0xf8, Size: 1]
	int platform_type;//[Offset: 0xfc, Size: 1]
	int ranking_id;//[Offset: 0x100, Size: 1]
	float ranking;//[Offset: 0x104, Size: 1]
	float ranking_variance;//[Offset: 0x108, Size: 1]
	int task_force_id;//[Offset: 0x10c, Size: 1]
	Guid group_id;//[Offset: 0x110, Size: 1]
	int party_id;//[Offset: 0x120, Size: 1]
	int party_size;//[Offset: 0x124, Size: 1]
	int backfill_round;//[Offset: 0x128, Size: 1]
	FString backfill_time;//[Offset: 0x130, Size: 1]
	int skin_id;//[Offset: 0x140, Size: 1]
	int account_level;//[Offset: 0x144, Size: 1]
	int ranked_level;//[Offset: 0x148, Size: 1]
	int class_level;//[Offset: 0x14c, Size: 1]
	float time_played;//[Offset: 0x150, Size: 1]
	float time_alive;//[Offset: 0x154, Size: 1]
	int eliminations;//[Offset: 0x158, Size: 1]
	int total_earned;//[Offset: 0x15c, Size: 1]
	int total_spent;//[Offset: 0x160, Size: 1]
	int total_refunded;//[Offset: 0x164, Size: 1]
	int on_time;//[Offset: 0x168, Size: 1]
	int connect_count;//[Offset: 0x16c, Size: 1]
	int disconnect_round;//[Offset: 0x170, Size: 1]
	int deserter_rounds;//[Offset: 0x174, Size: 1]
	int penalties;//[Offset: 0x178, Size: 1]
	int afk_kicked;//[Offset: 0x17c, Size: 1]
	int client_selected_site_id;//[Offset: 0x180, Size: 1]
	int client_selected_queue_id;//[Offset: 0x184, Size: 1]
	FString client_current_language;//[Offset: 0x188, Size: 1]

--------------------------------
Class: PlayerStatisticsBase
	int starting_cash;//[Offset: 0x0, Size: 1]
	int spent_cash;//[Offset: 0x4, Size: 1]
	int executes;//[Offset: 0x8, Size: 1]
	int Assists;//[Offset: 0xc, Size: 1]
	int downs;//[Offset: 0x10, Size: 1]
	int Revives;//[Offset: 0x14, Size: 1]
	int Downed;//[Offset: 0x18, Size: 1]
	int deaths;//[Offset: 0x1c, Size: 1]
	int ability_uses;//[Offset: 0x20, Size: 1]
	int gadget_uses;//[Offset: 0x24, Size: 1]
	int kills_single;//[Offset: 0x28, Size: 1]
	int kills_double;//[Offset: 0x2c, Size: 1]
	int kills_triple;//[Offset: 0x30, Size: 1]
	int kills_quadra;//[Offset: 0x34, Size: 1]
	int kills_penta;//[Offset: 0x38, Size: 1]
	int accumulated_damage;//[Offset: 0x3c, Size: 1]
	int accumulated_self_damage;//[Offset: 0x40, Size: 1]
	int accumulated_friendly_damage;//[Offset: 0x44, Size: 1]
	int accumulated_reverse_friendly_damage;//[Offset: 0x48, Size: 1]
	float average_shots_hit_distance;//[Offset: 0x4c, Size: 1]
	float average_head_shots_distance;//[Offset: 0x50, Size: 1]
	float average_non_head_shots_distance;//[Offset: 0x54, Size: 1]
	int bad_distances;//[Offset: 0x58, Size: 1]
	int missing_instigators;//[Offset: 0x5c, Size: 1]
	int shots_fired;//[Offset: 0x60, Size: 1]
	int shots_fired_sniper;//[Offset: 0x64, Size: 1]
	int shots_fired_shotgun;//[Offset: 0x68, Size: 1]
	int shots_hit;//[Offset: 0x6c, Size: 1]
	int head_shots;//[Offset: 0x70, Size: 1]
	int non_head_shots;//[Offset: 0x74, Size: 1]
	int shots_hit_aiming_down_sights;//[Offset: 0x78, Size: 1]
	int shots_hit_aiming_over_the_shoulder;//[Offset: 0x7c, Size: 1]
	int shots_hit_aiming_alternate;//[Offset: 0x80, Size: 1]
	int shots_hit_aiming_default;//[Offset: 0x84, Size: 1]
	int shots_hit_primary_slot_weapon;//[Offset: 0x88, Size: 1]
	int shots_hit_sniper_weapon;//[Offset: 0x8c, Size: 1]
	int shots_hit_shotgun_weapon;//[Offset: 0x90, Size: 1]
	int shots_hit_secondary_slot_weapon;//[Offset: 0x94, Size: 1]
	int shots_hit_melee_slot_weapon;//[Offset: 0x98, Size: 1]
	int shots_hit_other;//[Offset: 0x9c, Size: 1]
	int self_downs;//[Offset: 0xa0, Size: 1]
	int self_executes;//[Offset: 0xa4, Size: 1]
	int own_team_downs;//[Offset: 0xa8, Size: 1]
	int own_team_executes;//[Offset: 0xac, Size: 1]

--------------------------------
Class: JobSelectionRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	int class_id;//[Offset: 0xc, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]
	int skin_id;//[Offset: 0x20, Size: 1]
	int wingsuit_id;//[Offset: 0x24, Size: 1]
	int primary_weapon_1_wrap_id;//[Offset: 0x28, Size: 1]
	int primary_weapon_2_wrap_id;//[Offset: 0x2c, Size: 1]
	int secondary_weapon_wrap_id;//[Offset: 0x30, Size: 1]
	int melee_weapon_wrap_id;//[Offset: 0x34, Size: 1]
	int[] emotes_and_sprays;//[Offset: 0x38, Size: 1]
	int[] quips;//[Offset: 0x48, Size: 1]
	int[] communications;//[Offset: 0x58, Size: 1]

--------------------------------
Class: JobBanRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	int class_id;//[Offset: 0xc, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ClientContextRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	FString login_session_uuid;//[Offset: 0x8, Size: 1]
	FString installation_uuid;//[Offset: 0x18, Size: 1]
	FString build_version;//[Offset: 0x28, Size: 1]
	FString client_current_language;//[Offset: 0x38, Size: 1]
	int client_selected_site_id;//[Offset: 0x48, Size: 1]
	int divert_from_queue_id;//[Offset: 0x4c, Size: 1]
	int divert_to_queue_id;//[Offset: 0x50, Size: 1]
	enum queue_divert_type;//[Offset: 0x54, Size: 1]
	float sheltered_mm_attempt_timeout;//[Offset: 0x58, Size: 1]
	float sheltered_mm_level_limit;//[Offset: 0x5c, Size: 1]
	int forced_bot_match_limit;//[Offset: 0x60, Size: 1]
	int mercy_match_losses_required;//[Offset: 0x64, Size: 1]
	FString device_model;//[Offset: 0x68, Size: 1]
	int available_ram_megabytes;//[Offset: 0x78, Size: 1]
	int total_ram_megabytes;//[Offset: 0x7c, Size: 1]
	FString cpu_type;//[Offset: 0x80, Size: 1]
	int cpu_cores;//[Offset: 0x90, Size: 1]
	FString gpu_type;//[Offset: 0x98, Size: 1]
	int screen_resolution;//[Offset: 0xa8, Size: 1]
	int viewport_size_x;//[Offset: 0xac, Size: 1]
	int viewport_size_y;//[Offset: 0xb0, Size: 1]
	float resolution_quality;//[Offset: 0xb4, Size: 1]
	float cpu_benchmark_results;//[Offset: 0xb8, Size: 1]
	float gpu_benchmark_results;//[Offset: 0xbc, Size: 1]
	int global_quality;//[Offset: 0xc0, Size: 1]
	int view_distance_quality;//[Offset: 0xc4, Size: 1]
	int antialiasing_quality;//[Offset: 0xc8, Size: 1]
	int shadow_quality;//[Offset: 0xcc, Size: 1]
	int postprocess_quality;//[Offset: 0xd0, Size: 1]
	int texture_quality;//[Offset: 0xd4, Size: 1]
	int effects_quality;//[Offset: 0xd8, Size: 1]
	int foliage_quality;//[Offset: 0xdc, Size: 1]
	int shading_quality;//[Offset: 0xe0, Size: 1]

--------------------------------
Class: ObjectDictionaryRecord
	int weapon_id;//[Offset: 0x0, Size: 1]
	FString weapon_name;//[Offset: 0x8, Size: 1]
	FString item_type_name;//[Offset: 0x18, Size: 1]
	int weapon_category_type_value;//[Offset: 0x28, Size: 1]
	enum weapon_category_type_name;//[Offset: 0x2c, Size: 1]
	int weapon_slot_type_value;//[Offset: 0x30, Size: 1]
	enum weapon_slot_type_name;//[Offset: 0x34, Size: 1]
	bool is_accuracy_weapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 1]
	float base_accuracy;//[Offset: 0x38, Size: 1]
	float max_aimed_accuracy;//[Offset: 0x3c, Size: 1]
	float max_hip_fire_accuracy;//[Offset: 0x40, Size: 1]
	int fire_mode_type_value;//[Offset: 0x44, Size: 1]
	enum fire_mode_type_name;//[Offset: 0x48, Size: 1]
	int reload_type_value;//[Offset: 0x4c, Size: 1]
	enum reload_type_name;//[Offset: 0x50, Size: 1]
	int rounds_per_burst;//[Offset: 0x54, Size: 1]

--------------------------------
Class: RoundEventRecord
	int round_id;//[Offset: 0x0, Size: 1]
	FString round_start_time;//[Offset: 0x8, Size: 1]
	int Duration;//[Offset: 0x18, Size: 1]
	TeamSideRecord[] team_sides;//[Offset: 0x20, Size: 1]
	int winning_team;//[Offset: 0x30, Size: 1]
	FString win_condition;//[Offset: 0x38, Size: 1]
	MirrorMatchupRecord[] mirror_matchup_records;//[Offset: 0x48, Size: 1]
	PlayerStartingCashRecord[] round_starting_cash;//[Offset: 0x58, Size: 1]
	PurchasedItemEventRecord[] purchased_item_events;//[Offset: 0x68, Size: 1]
	PurchasedItemEventRecord[] refunded_item_events;//[Offset: 0x78, Size: 1]
	CashCollectionEventRecord[] cash_collection_events;//[Offset: 0x88, Size: 1]
	DownEventRecord[] down_events;//[Offset: 0x98, Size: 1]
	ExecuteEventRecord[] execute_events;//[Offset: 0xa8, Size: 1]
	AssistEventRecord[] assist_events;//[Offset: 0xb8, Size: 1]
	ReviveEventRecord[] revive_events;//[Offset: 0xc8, Size: 1]
	WeaponUseSummaryRecord[] weapon_use_summaries;//[Offset: 0xd8, Size: 1]
	AbilityUseEventRecord[] ability_use_events;//[Offset: 0xe8, Size: 1]
	RadialMenuItemUseEventRecord[] radial_menu_item_use_events;//[Offset: 0xf8, Size: 1]
	CommunicationUseEventRecord[] communication_use_events;//[Offset: 0x108, Size: 1]
	GadgetUseEventRecord[] gadget_use_events;//[Offset: 0x118, Size: 1]
	EliminationStreakEventRecord[] elimination_streak_events;//[Offset: 0x128, Size: 1]
	MultipleKillEventRecord[] multiple_kill_events;//[Offset: 0x138, Size: 1]
	BotStartingDifficultyRecord[] round_starting_bot_difficulties;//[Offset: 0x148, Size: 1]
	BotDifficultyChangeEventRecord[] bot_difficulty_change_events;//[Offset: 0x158, Size: 1]
	OrientationEventRecord[] orientation_events;//[Offset: 0x168, Size: 1]
	PollEndEventRecord[] poll_end_events;//[Offset: 0x178, Size: 1]
	RoundClientInputTypeUse[] client_input_use;//[Offset: 0x188, Size: 1]
	<uint64,RoundPlayerSummary> round_player_summary;//[Offset: 0x198, Size: 1]
	RoundSummary round_summary;//[Offset: 0x1e8, Size: 1]

--------------------------------
Class: TeamSideRecord
	int team_id;//[Offset: 0x0, Size: 1]
	int side_id;//[Offset: 0x4, Size: 1]
	int team_role;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MirrorMatchupRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int team_id;//[Offset: 0x8, Size: 1]
	int class_id;//[Offset: 0xc, Size: 1]
	int has_mirror_match;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PlayerStartingCashRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int cash;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PurchasedItemEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int item_id;//[Offset: 0x8, Size: 1]
	int cost;//[Offset: 0xc, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CashCollectionEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord Location;//[Offset: 0x8, Size: 1]
	FString Timestamp;//[Offset: 0x18, Size: 1]
	int Amount;//[Offset: 0x28, Size: 1]

--------------------------------
Class: DownEventRecord
	int instigator_ue_player_id;//[Offset: 0x0, Size: 1]
	int instigator_hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord instigator_location;//[Offset: 0x8, Size: 1]
	int victim_ue_player_id;//[Offset: 0x14, Size: 1]
	int victim_hz_player_id;//[Offset: 0x18, Size: 1]
	LocationRecord victim_location;//[Offset: 0x1c, Size: 1]
	int weapon_id;//[Offset: 0x28, Size: 1]
	FString weapon_name;//[Offset: 0x30, Size: 1]
	float Distance;//[Offset: 0x40, Size: 1]
	bool self_or_own_team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	FString Timestamp;//[Offset: 0x48, Size: 1]

--------------------------------
Class: ExecuteEventRecord
	int instigator_ue_player_id;//[Offset: 0x0, Size: 1]
	int instigator_hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord instigator_location;//[Offset: 0x8, Size: 1]
	int victim_ue_player_id;//[Offset: 0x14, Size: 1]
	int victim_hz_player_id;//[Offset: 0x18, Size: 1]
	LocationRecord victim_location;//[Offset: 0x1c, Size: 1]
	int weapon_id;//[Offset: 0x28, Size: 1]
	FString weapon_name;//[Offset: 0x30, Size: 1]
	float Distance;//[Offset: 0x40, Size: 1]
	bool self_or_own_team;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 1]
	FString Timestamp;//[Offset: 0x48, Size: 1]

--------------------------------
Class: AssistEventRecord
	int assistor_ue_player_id;//[Offset: 0x0, Size: 1]
	int assistor_hz_player_id;//[Offset: 0x4, Size: 1]
	int victim_ue_player_id;//[Offset: 0x8, Size: 1]
	int victim_hz_player_id;//[Offset: 0xc, Size: 1]
	LocationRecord victim_location;//[Offset: 0x10, Size: 1]
	FString Timestamp;//[Offset: 0x20, Size: 1]

--------------------------------
Class: ReviveEventRecord
	int reviver_ue_player_id;//[Offset: 0x0, Size: 1]
	int reviver_hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord reviver_location;//[Offset: 0x8, Size: 1]
	int revivee_ue_player_id;//[Offset: 0x14, Size: 1]
	int revivee_hz_player_id;//[Offset: 0x18, Size: 1]
	LocationRecord revivee_location;//[Offset: 0x1c, Size: 1]
	FString Timestamp;//[Offset: 0x28, Size: 1]

--------------------------------
Class: WeaponUseSummaryRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int weapon_id;//[Offset: 0x8, Size: 1]
	FString weapon_name;//[Offset: 0x10, Size: 1]
	FString item_type_name;//[Offset: 0x20, Size: 1]
	int weapon_category_type_value;//[Offset: 0x30, Size: 1]
	enum weapon_category_type_name;//[Offset: 0x34, Size: 1]
	int weapon_slot_type_value;//[Offset: 0x38, Size: 1]
	enum weapon_slot_type_name;//[Offset: 0x3c, Size: 1]
	bool is_accuracy_weapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d, Size: 1]
	int shots_fired;//[Offset: 0x40, Size: 1]
	int shots_hit;//[Offset: 0x44, Size: 1]
	int head_shots;//[Offset: 0x48, Size: 1]
	int non_head_shots;//[Offset: 0x4c, Size: 1]
	float average_shots_hit_distance;//[Offset: 0x50, Size: 1]
	float average_head_shots_distance;//[Offset: 0x54, Size: 1]
	float average_non_head_shots_distance;//[Offset: 0x58, Size: 1]
	int bad_distances;//[Offset: 0x5c, Size: 1]
	int missing_instigators;//[Offset: 0x60, Size: 1]
	int[] character_aim_modes;//[Offset: 0x68, Size: 1]
	int shots_hit_aiming_down_sights;//[Offset: 0x78, Size: 1]
	int shots_hit_aiming_over_the_shoulder;//[Offset: 0x7c, Size: 1]
	int shots_hit_aiming_alternate;//[Offset: 0x80, Size: 1]
	int shots_hit_aiming_default;//[Offset: 0x84, Size: 1]
	int accumulated_damage;//[Offset: 0x88, Size: 1]
	int accumulated_self_damage;//[Offset: 0x8c, Size: 1]
	int accumulated_friendly_damage;//[Offset: 0x90, Size: 1]
	int accumulated_reverse_friendly_damage;//[Offset: 0x94, Size: 1]
	float AccumulatingDamage;//[Offset: 0x98, Size: 1]
	float AccumulatingSelfDamage;//[Offset: 0x9c, Size: 1]
	float AccumulatingFriendlyDamage;//[Offset: 0xa0, Size: 1]
	float AccumulatingReverseFriendlyDamage;//[Offset: 0xa4, Size: 1]

--------------------------------
Class: AbilityUseEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord Location;//[Offset: 0x8, Size: 1]
	int ability_id;//[Offset: 0x14, Size: 1]
	FString Timestamp;//[Offset: 0x18, Size: 1]
	int accumulated_damage;//[Offset: 0x28, Size: 1]
	int accumulated_self_damage;//[Offset: 0x2c, Size: 1]
	int accumulated_friendly_damage;//[Offset: 0x30, Size: 1]
	int accumulated_reverse_friendly_damage;//[Offset: 0x34, Size: 1]
	float AccumulatingDamage;//[Offset: 0x38, Size: 1]
	float AccumulatingSelfDamage;//[Offset: 0x3c, Size: 1]
	float AccumulatingFriendlyDamage;//[Offset: 0x40, Size: 1]
	float AccumulatingReverseFriendlyDamage;//[Offset: 0x44, Size: 1]
	float FireGameTime;//[Offset: 0x48, Size: 1]

--------------------------------
Class: RadialMenuItemUseEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	FString cosmetic_type;//[Offset: 0x10, Size: 1]
	int item_id;//[Offset: 0x20, Size: 1]
	FString item_name;//[Offset: 0x28, Size: 1]
	LocationRecord Location;//[Offset: 0x38, Size: 1]
	RotationRecord Rotation;//[Offset: 0x44, Size: 1]
	FString game_phase;//[Offset: 0x50, Size: 1]
	FString Timestamp;//[Offset: 0x60, Size: 1]

--------------------------------
Class: RotationRecord
	float Yaw;//[Offset: 0x0, Size: 1]
	float Pitch;//[Offset: 0x4, Size: 1]

--------------------------------
Class: CommunicationUseEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	FString cosmetic_type;//[Offset: 0x10, Size: 1]
	int item_id;//[Offset: 0x20, Size: 1]
	FString item_name;//[Offset: 0x28, Size: 1]
	LocationRecord Location;//[Offset: 0x38, Size: 1]
	RotationRecord Rotation;//[Offset: 0x44, Size: 1]
	FString game_phase;//[Offset: 0x50, Size: 1]
	FString Timestamp;//[Offset: 0x60, Size: 1]

--------------------------------
Class: GadgetUseEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord Location;//[Offset: 0x8, Size: 1]
	int gadget_id;//[Offset: 0x14, Size: 1]
	FString Timestamp;//[Offset: 0x18, Size: 1]
	int accumulated_damage;//[Offset: 0x28, Size: 1]
	int accumulated_self_damage;//[Offset: 0x2c, Size: 1]
	int accumulated_friendly_damage;//[Offset: 0x30, Size: 1]
	int accumulated_reverse_friendly_damage;//[Offset: 0x34, Size: 1]
	float AccumulatingDamage;//[Offset: 0x38, Size: 1]
	float AccumulatingSelfDamage;//[Offset: 0x3c, Size: 1]
	float AccumulatingFriendlyDamage;//[Offset: 0x40, Size: 1]
	float AccumulatingReverseFriendlyDamage;//[Offset: 0x44, Size: 1]
	float FireGameTime;//[Offset: 0x48, Size: 1]

--------------------------------
Class: EliminationStreakEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int Count;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MultipleKillEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	int Count;//[Offset: 0x8, Size: 1]

--------------------------------
Class: BotStartingDifficultyRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int difficulty_index;//[Offset: 0x4, Size: 1]

--------------------------------
Class: BotDifficultyChangeEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int difficulty_index;//[Offset: 0x4, Size: 1]
	FString Timestamp;//[Offset: 0x8, Size: 1]

--------------------------------
Class: OrientationEventRecord
	int ue_player_id;//[Offset: 0x0, Size: 1]
	int hz_player_id;//[Offset: 0x4, Size: 1]
	LocationRecord Location;//[Offset: 0x8, Size: 1]
	RotationRecord Rotation;//[Offset: 0x14, Size: 1]
	int movement_state;//[Offset: 0x1c, Size: 1]
	FString Timestamp;//[Offset: 0x20, Size: 1]
	int ping_ms;//[Offset: 0x30, Size: 1]
	<FString,ClientStatisticsRecord> client_statistics;//[Offset: 0x38, Size: 1]

--------------------------------
Class: ClientStatisticsRecord
	float smoothed;//[Offset: 0x0, Size: 1]
	float Maximum;//[Offset: 0x4, Size: 1]
	float Minimum;//[Offset: 0x8, Size: 1]
	float average;//[Offset: 0xc, Size: 1]
	int sample_count;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PollEndEventRecord
	int round_id;//[Offset: 0x0, Size: 1]
	bool poll_passed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	FString poll_name;//[Offset: 0x8, Size: 1]
	int team_id;//[Offset: 0x18, Size: 1]
	int[] hz_player_ids_for;//[Offset: 0x20, Size: 1]
	int[] hz_player_ids_against;//[Offset: 0x30, Size: 1]
	FString game_phase;//[Offset: 0x40, Size: 1]
	FString Timestamp;//[Offset: 0x50, Size: 1]

--------------------------------
Class: RoundClientInputTypeUse
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int16 input_type_kbm;//[Offset: 0x4, Size: 1]
	int16 input_type_gpad;//[Offset: 0x6, Size: 1]
	int16 input_type_touch;//[Offset: 0x8, Size: 1]
	int16 input_type_other;//[Offset: 0xa, Size: 1]

--------------------------------
Class: RoundPlayerSummary.PlayerStatisticsBase
	int round_id;//[Offset: 0xb0, Size: 1]
	int ue_player_id;//[Offset: 0xb4, Size: 1]
	int hz_player_id;//[Offset: 0xb8, Size: 1]
	int class_id;//[Offset: 0xbc, Size: 1]

--------------------------------
Class: RoundSummary.PlayerStatisticsBase
	int round_id;//[Offset: 0xb0, Size: 1]
	FString round_start_time;//[Offset: 0xb8, Size: 1]
	int Duration;//[Offset: 0xc8, Size: 1]
	int winning_team;//[Offset: 0xcc, Size: 1]
	int first_blood_team;//[Offset: 0xd0, Size: 1]
	int first_capture_team;//[Offset: 0xd4, Size: 1]
	int surrender_polls;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: PlayerConnectionEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	int8 is_connected;//[Offset: 0xc, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: BotBackfillEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int bot_ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: HumanBackfillEventRecord
	int backfill_hz_player_id;//[Offset: 0x0, Size: 1]
	int backfill_ue_player_id;//[Offset: 0x4, Size: 1]
	int round_id;//[Offset: 0x8, Size: 1]
	FString Timestamp;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ObjectiveCaptureEventRecord
	int hz_player_id;//[Offset: 0x0, Size: 1]
	int ue_player_id;//[Offset: 0x4, Size: 1]
	int team_id;//[Offset: 0x8, Size: 1]
	FString mode_name;//[Offset: 0x10, Size: 1]
	int round_id;//[Offset: 0x20, Size: 1]
	int objective_type;//[Offset: 0x24, Size: 1]
	FString capture_action;//[Offset: 0x28, Size: 1]
	LocationRecord Location;//[Offset: 0x38, Size: 1]
	RotationRecord Rotation;//[Offset: 0x44, Size: 1]
	FString Timestamp;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSAnnouncer.Info.Actor.Object
	MulticastInlineDelegateProperty OnAllyLivingPlayersChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnEnemyLivingPlayersChanged;//[Size: 1]
	KSVOPriorityManager* PriorityManager;//[Offset: 0x258, Size: 1]
	AkComponent* AnnouncerAkComponent;//[Offset: 0x270, Size: 1]
	<FName,TimeAnnouncementList> PhaseTimeAnnouncements;//[Offset: 0x278, Size: 1]
	AkAudioEvent* SuddenDeathAnnouncement;//[Offset: 0x2c8, Size: 1]
	AkAudioEvent* FallbackEliminationAnnouncement;//[Offset: 0x2d8, Size: 1]
	AkAudioEvent* FallbackEliminationAnnouncementAlly;//[Offset: 0x2e0, Size: 1]
	float MaxAnnouncementDuration;//[Offset: 0x328, Size: 1]
	delegate OnVOLineFinished;//[Offset: 0x32c, Size: 1]
	float VODuckingAmount;//[Offset: 0x33c, Size: 1]
	bool ShouldPlayTimeAnnouncementFromGroup(out const FName[] Groups);// 0x26e0330
	void QueueAnnouncementStruct(Announcement Announcement, int TeamNum, bool DelayProcessing);// 0x26dfae0
	void QueueAnnouncement(AkAudioEvent* AkEvent, AkAudioEvent* AltAkEvent, enum Priority, float Lifetime, float Delay, float Lockout, int TeamNum, bool DelayProcessing, KSPlayerState* TargetPlayer, AkAudioEvent* TargetPlayerAkEvent);// 0x26df810
	void ProcessTimeAnnouncementList(out TimeAnnouncementList TimeAnnouncementList, float Time, int TeamNum);// 0x26df6f0
	void OnObjectiveTimerZero();// 0x2d74e00
	void OnObjectiveSpawned(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveReset(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveHeld(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveExploded(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveDropped(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveDisarming(out const interface class          GameObjective);// 0x2d74e00
	void OnObjectiveDisarmed(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveDeactivated(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveContested(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveArming(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveArmed(out const interface classNone GameObjective);// 0x2d74e00
	void OnMatchTimerUpdate(float TimeInWholeSeconds);// 0x26df650
	void OnLocalViewTargetMovementModeChanged(byte OldMode, byte OldCustomMode, byte NewMode, byte NewCustomMode);// 0x2d74e00
	void OnLocalViewTargetChanged(KSPlayerController* Controller, Actor* OldViewTarget, Actor* NewViewTarget);// 0x2d74e00
	void OnGameObjectiveStateChanged(interface classNone GameObjective);// 0x26df5b0
	void LocalPlayerControllerDestroyed(Actor* PlayerController);// 0x26df530
	int GetTeamOverrideForAnnouncementGroup(out const FName[] Groups);// 0x26df3f0
	KSPlayerController* GetPlayerController();// 0x26df380
	void FinishedLineCallback(enum in_eType, AkCallbackInfo* in_pCallbackInfo);// 0x26df240
	void EventQueueInGame();// 0x2d74e00
	void EventLocalPlayerControllerDestroyed(KSPlayerController* PlayerController);// 0x2d74e00
	void CurrentAnnouncementComplete();// 0x26df120
	void AnnouncePlayerDeath(out const CombatEventInfo CombatEvent);// 0x26defc0

--------------------------------
Class: KSVOPriorityManager.ActorComponent.Object
	enum AnnouncerSquelchThreshold;//[Offset: 0xb0, Size: 1]
	enum AnnouncerDuckThreshold;//[Offset: 0xb1, Size: 1]
	enum CharacterSquelchThreshold;//[Offset: 0xb2, Size: 1]
	enum CharacterDuckThreshold;//[Offset: 0xb3, Size: 1]
	PriorityVoiceLine[] PlayingLines;//[Offset: 0xb8, Size: 1]

--------------------------------
Class: PriorityVoiceLine
	enum State;//[Offset: 0x0, Size: 1]
	enum Priority;//[Offset: 0x1, Size: 1]
	interface class None* Source;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Announcement
	AkAudioEvent* AkEvent;//[Offset: 0x0, Size: 1]
	AkAudioEvent* AltAkEvent;//[Offset: 0x8, Size: 1]
	enum Priority;//[Offset: 0x10, Size: 1]
	float Lifetime;//[Offset: 0x14, Size: 1]
	float ValidUntil;//[Offset: 0x18, Size: 1]
	float Delay;//[Offset: 0x1c, Size: 1]
	float Lockout;//[Offset: 0x20, Size: 1]
	float RTPC;//[Offset: 0x24, Size: 1]
	int TeamNum;//[Offset: 0x28, Size: 1]
	SerializedMctsNetId PlayerId;//[Offset: 0x30, Size: 1]
	AkAudioEvent* TargetPlayerAkEvent;//[Offset: 0x38, Size: 1]

--------------------------------
Class: TimeAnnouncementList
	TimeAnnouncement[] TimeAnnouncements;//[Offset: 0x0, Size: 1]

--------------------------------
Class: TimeAnnouncement
	float Time;//[Offset: 0x0, Size: 1]
	Announcement Announcement;//[Offset: 0x8, Size: 1]
	FName[] AnnouncementGroups;//[Offset: 0x48, Size: 1]
	bool Block;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]

--------------------------------
Class: AkCallbackInfo.Object
	AkComponent* AkComponent;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSJobSelectionRules.DraftRules.Object
	enum BlacklistOrWhitelist;//[Offset: 0x90, Size: 1]
	KSJobItem*[] FilteredJobs;//[Offset: 0x98, Size: 1]
	GameplayTagQuery AIJobSelectionQuery;//[Offset: 0xa8, Size: 1]
	JobCollection* JobCollection;//[Offset: 0xf0, Size: 1]
	KSJobItem* RandomJob;//[Offset: 0xf8, Size: 1]
	bool bAllowRandomJob;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x120, Size: 1]
	bool bDelayRandomSelection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x121, Size: 1]
	class KSJobSelectionRules* AlternateSecondaryRules;//[Offset: 0x128, Size: 1]
	static bool DraftPlayerEqualsPersistentPlayer(out const DraftPlayerIdHandle InDraftPlayerId, const KSPersistentPlayerData* InPersistentPlayerData);// 0x27940e0
	static KSPersistentPlayerId ConvertToKSPlayerId(out const DraftPlayerIdHandle InDraftPlayerId);// 0x2794020
	static DraftPlayerIdHandle ConvertToDraftPlayerIdHandle(out const KSPersistentPlayerId InPlayerId);// 0x2793f70

--------------------------------
Class: DraftRules.Object
	enum PickExclusivity;//[Offset: 0x28, Size: 1]
	enum PickProxyRules;//[Offset: 0x29, Size: 1]
	bool bProxyAlwaysCompletesPicks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool bCanAbstainFromBan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	enum BanEffects;//[Offset: 0x2c, Size: 1]
	enum BanProxyRules;//[Offset: 0x2d, Size: 1]
	bool bProxyAlwaysCompletesBans;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	enum LockProxyRules;//[Offset: 0x2f, Size: 1]
	bool bProxyAlwaysCompletesLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	float ReselectTime;//[Offset: 0x34, Size: 1]
	bool bRequireChoiceOwnership;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool bShowUnavailableChoicesOnUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]
	GameplayTagQuery AIDraftQuery;//[Offset: 0x40, Size: 1]
	class DraftReplicatedActor* DraftReplicatedActorClass;//[Offset: 0x88, Size: 1]
	FText GetOverallStatusTextAndTimer(const DraftReplicatedActor* InDraftActor, out PGame_ReplicatedTimerId OutActiveTimerId, out DraftTask PrimaryTask);// 0x12668b0

--------------------------------
Class: DraftReplicatedActor.Info.Actor.Object
	FName DraftName;//[Offset: 0x220, Size: 1]
	class DraftRules* DraftRules;//[Offset: 0x228, Size: 1]
	DraftTask PersonalActiveTask;//[Offset: 0x230, Size: 1]
	DraftTask LocalPersonalActiveTask;//[Offset: 0x278, Size: 1]
	bool bLocalPersonalTaskPendingComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	DraftChoice[] Choices;//[Offset: 0x2c8, Size: 1]
	DraftTaskList CompletedTasks;//[Offset: 0x2d8, Size: 1]
	DraftTaskList ActiveTasks;//[Offset: 0x408, Size: 1]
	DraftTaskList PendingTasks;//[Offset: 0x538, Size: 1]
	bool bAllPersonalTasksAreComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 1]
	bool bLocalAllPersonalTasksAreComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x669, Size: 1]
	bool bDraftHasEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66a, Size: 1]
	MulticastInlineDelegateProperty OnRequestSelectSuccessful;//[Size: 1]
	MulticastInlineDelegateProperty OnRequestSelectFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnRequestCompleteSuccessful;//[Size: 1]
	MulticastInlineDelegateProperty OnRequestCompleteFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnDraftChoicesChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTasksChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPendingTasksChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTaskCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnPersonalActiveTaskChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAllPersonalTasksCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnEndDraft;//[Size: 1]
	DraftAuthority* DraftAuthority;//[Offset: 0x720, Size: 1]
	float PostDraftLifeSpan;//[Offset: 0x728, Size: 1]
	int DraftActorId;//[Offset: 0x72c, Size: 1]
	DraftPlayerIdHandle CachedDraftPlayerId;//[Offset: 0x730, Size: 1]
	PGame_ReplicatedTimerManagerSlave TimerManager;//[Offset: 0x740, Size: 1]
	bool bChoicesAreDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 1]
	bool bTasksAreDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c1, Size: 1]
	bool bPendingTasksAreDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c2, Size: 1]
	bool bPersonalTaskIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c3, Size: 1]
	bool bAllPersonTasksCompleteIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c4, Size: 1]
	bool bOwnerIsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c5, Size: 1]
	<DraftTaskId> BroadcastedTasks;//[Offset: 0x8c8, Size: 1]
	<Object*,int> ObjectToChoiceIndexMap;//[Offset: 0x918, Size: 1]
	PlayerController* OwningPlayerController;//[Offset: 0x9b8, Size: 1]
	Object* PrevLocalSelectedChoice;//[Offset: 0x9c0, Size: 1]
	Object* PrevLockedChoiceForLocalPlayer;//[Offset: 0x9c8, Size: 1]
	static bool TasksEqual(out const DraftTask A, out const DraftTask B);// 0x1267480
	void ServerRequestSelect(DraftTaskId TaskId, Object* ChoiceObject);// 0x1267380
	void ServerRequestComplete(DraftTaskId TaskId, Object* ChoiceObject);// 0x1267280
	enum RequestSelect(Object* ChoiceObject);// 0x12671f0
	enum RequestCompleteTask(Object* ChoiceObject);// 0x1267160
	void OnRep_PersonalActiveTask();// 0x1267140
	void OnRep_DraftName();// 0x1267120
	void OnRep_Choices();// 0x1267100
	void OnRep_AllPersonalTasksAreComplete();// 0x12670e0
	void OnPlayerOwnerLogout(Actor* InActor);// 0x1267060
	enum IsValidChoiceForPersonalActiveTask(Object* ChoiceObject);// 0x1266fd0
	static bool IsTaskValid(out const DraftTask InTask);// 0x1266ef0
	static bool IsTaskIdValid(out const DraftTaskId InTaskId);// 0x1266d80
	static bool IsTaskIdsEqual(out const DraftTaskId A, out const DraftTaskId B);// 0x1266e10
	float GetTimeUntilNextActiveTaskExpires();// 0x1266c10
	float GetTimeUntilLastActiveTaskExpires();// 0x1266be0
	enum GetTimerStateByTimerId(out const PGame_ReplicatedTimerId TimerId);// 0x1266ce0
	enum GetTimerStateByTaskId(out const DraftTaskId TaskId);// 0x1266c40
	float GetTimeRemainingByTimerId(out const PGame_ReplicatedTimerId TimerId);// 0x1266b40
	float GetTimeRemainingByTaskId(out const DraftTaskId TaskId);// 0x1266aa0
	PlayerController* GetOwningPlayerController();// 0x1266a80
	DraftTask[] GetCompletedTasksForPlayer(out const DraftPlayerIdHandle InPlayerId);// 0x12666a0
	DraftTask GetActiveTaskForPlayer(out const DraftPlayerIdHandle InPlayerId, out bool bPendingComplete);// 0x1266510
	DraftChoice FindChoiceByUObject(Object* ChoiceObject);// 0x1266470
	void ClientAcknowledgeSelect(DraftTaskId TaskId, bool bSuccess);// 0x12663a0
	void ClientAcknowledgeComplete(DraftTaskId TaskId, bool bSuccess);// 0x12662d0

--------------------------------
Class: DraftTask.FastArraySerializerItem
	DraftTaskId TaskId;//[Offset: 0xc, Size: 1]
	enum TaskType;//[Offset: 0xe, Size: 1]
	Object* SelectedChoice;//[Offset: 0x10, Size: 1]
	DraftPlayerIdHandle Player;//[Offset: 0x18, Size: 1]
	DraftPlayerIdHandle SelectingProxy;//[Offset: 0x28, Size: 1]
	int TeamNum;//[Offset: 0x38, Size: 1]
	bool bHaltingTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 1]
	float TimeForTask;//[Offset: 0x40, Size: 1]
	PGame_ReplicatedTimerId TimerId;//[Offset: 0x44, Size: 1]

--------------------------------
Class: DraftTaskId
	uint16 ID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DraftPlayerIdHandle

--------------------------------
Class: PGame_ReplicatedTimerId
	byte ID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DraftChoice
	Object* ChoiceObject;//[Offset: 0x0, Size: 1]
	bool bIsVisibleToUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bIsUnavailable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bIsUnavailableByOwnership;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bIsBanned;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	bool bAlreadyPicked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 1]
	bool bAlreadyLocked;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 1]
	bool bCannotLock;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 1]
	bool bSelectedByTeammate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 1]
	bool bSelectedByOpponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 1]
	bool bSelectedBySelf;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 1]
	bool bPendingCompleteBySelf;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 1]
	bool bPickedByLocalTeam;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 1]
	bool bPickedByOpponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 1]
	bool bLockedByLocalPlayer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 1]
	enum OwnershipState;//[Offset: 0xa, Size: 1]

--------------------------------
Class: DraftTaskList.FastArraySerializer
	DraftTask[] Tasks;//[Offset: 0x108, Size: 1]

--------------------------------
Class: DraftAuthority.Info.Actor.Object
	FName DraftName;//[Offset: 0x290, Size: 1]
	bool bAllowUnownedChoices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	<Object*> AllowUnownedSpecificChoices;//[Offset: 0x2a0, Size: 1]
	class DraftRules* DraftRules;//[Offset: 0x2f0, Size: 1]
	DraftChoice[] Choices;//[Offset: 0x2f8, Size: 1]
	DraftTaskList CompletedDraftTasks;//[Offset: 0x308, Size: 1]
	DraftTaskList ActiveDraftTasks;//[Offset: 0x438, Size: 1]
	DraftTaskList PendingDraftTasks;//[Offset: 0x568, Size: 1]
	DraftTaskList DelayedDraftTasks;//[Offset: 0x698, Size: 1]
	<DraftPlayerIdHandle> ParticipatingPlayers;//[Offset: 0x7c8, Size: 1]
	<DraftPlayerIdHandle> RemainingPlayers;//[Offset: 0x818, Size: 1]
	<DraftPlayerIdHandle,DraftReplicatedActor*> ActiveDraftReplicatedActors;//[Offset: 0x868, Size: 1]
	<DraftPlayerIdHandle> KnownDisconnectPlayers;//[Offset: 0x8b8, Size: 1]
	DraftPlayerIdHandle[] AvailableProxies;//[Offset: 0x908, Size: 1]
	<DraftPlayerIdHandle> AIPlayers;//[Offset: 0x918, Size: 1]
	bool bHasStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968, Size: 1]
	bool bHasCompletedInitialDraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x969, Size: 1]
	int TimesStarted;//[Offset: 0x96c, Size: 1]
	PGame_ReplicatedTimerManager TimerManager;//[Offset: 0x970, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimerManager.PGame_ReplicatedTimerManagerBase.FastArraySerializer
	byte NextTimerId;//[Offset: 0x120, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimerManagerBase.FastArraySerializer
	PGame_ReplicatedTimerManagerEntry[] Timers;//[Offset: 0x108, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimerManagerEntry.FastArraySerializerItem
	PGame_ReplicatedTimerId ID;//[Offset: 0xc, Size: 1]
	PGame_ReplicatedTimer Timer;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PGame_ReplicatedTimerManagerSlave.PGame_ReplicatedTimerManagerBase.FastArraySerializer

--------------------------------
Class: JobCollection.ItemCollection.PrimaryDataAsset.DataAsset.Object
	FText CollectionName;//[Offset: 0x98, Size: 1]
	FText CollectionDescription;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: KSJobSelectionAuthority.DraftAuthority.Info.Actor.Object
	void BroadcastRemoteInspectedJobChanged(DraftPlayerIdHandle Player, KSJobItem* JobItem);// 0x278f3d0

--------------------------------
Class: KSEmoteMusicManager.Actor.Object
	float MaxAudibleEmoteDistance;//[Offset: 0x248, Size: 1]
	void RemovePlayingMusic(AkComponent* Sound);// 0x2747600
	void AddPlayingMusic(AkComponent* Sound);// 0x2746ca0

--------------------------------
Class: KSCinematicDataContainer.DataAsset.Object
	<FName,KSCinematicData> CinematicDatas;//[Offset: 0x30, Size: 1]
	FName GetDefaultCameraTag(out const FName CinematicName);// 0x273a8b0
	FString GetCinematicSubLevelName(out const FName CinematicName, const Object* WorldContextObject);// 0x273a520
	enum GetCinematicLevelStreamingMethod(out const FName CinematicName);// 0x273a480
	FText GetCinematicDisplayName(out const FName CinematicName);// 0x273a380
	FName[] GetAllCinematicNames();// 0x273a110

--------------------------------
Class: KSCinematicData
	FText CinematicDisplayName;//[Offset: 0x0, Size: 1]
	FString CinematicSubLevelName;//[Offset: 0x18, Size: 1]
	enum CinematicLevelStreamingMethod;//[Offset: 0x28, Size: 1]
	FName DefaultCameraTag;//[Offset: 0x2c, Size: 1]
	bool bPerMapCinematicSubLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 1]

--------------------------------
Class: KSSeamlessTravelTransferInfo.Object

--------------------------------
Class: KSSeamlessTravelSettings
	bool bRestoreLoadouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bSkipDestinationDefaultInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bRestoreCharacterState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	CharacterRestoreOptions CharacterStateRestoreOptions;//[Offset: 0x4, Size: 1]
	bool bCanReuseControllers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	bool bRestoreBotDataPlayerStates;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 1]

--------------------------------
Class: CharacterRestoreOptions
	bool bReplaceAmmo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bReplaceInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bReplaceHealth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	float MinimumStartingHealthPercentage;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSScoreboardConfig.DataAsset.Object
	class KSStatWrapper[] ScoreboardStats;//[Offset: 0x30, Size: 1]
	GameplayTag ScoreboardStatForSorting;//[Offset: 0x40, Size: 1]
	class KSStatWrapper[] MatchSummaryStats;//[Offset: 0x48, Size: 1]
	class KSStatWrapper[] TopStatsOrder;//[Offset: 0x58, Size: 1]

--------------------------------
Class: KSStatWrapper.Object
	Texture2D* Icon;//[Offset: 0x28, Size: 1]
	GameplayTag StatTag;//[Offset: 0x50, Size: 1]
	FText DisplayName;//[Offset: 0x58, Size: 1]
	FText SingularName;//[Offset: 0x70, Size: 1]
	FText PluralName;//[Offset: 0x88, Size: 1]
	bool ShouldRepresentValueAsFloat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 1]
	float GetTotalProgressSum(out const KSActivityInstance*[] InActivityInstances);// 0x284d5c0
	float GetTotalProgress(const KSActivityInstance* InActivityInstance);// 0x284d520
	FText GetStatValueText(const Object* InWorldContextObject, const KSPlayerState* InPlayerState, const int DescriptorId, FString DescriptorString, const bool ShouldOverwriteValue, const float OverwriteValue);// 0x284d210
	float GetStatValue(const Object* InWorldContextObject, const KSPlayerState* InPlayerState, const int DescriptorId, FString DescriptorString, const bool ShouldOverwriteValue, const float OverwriteValue);// 0x284d030
	float GetInventoryQuantitySum(out const KSActivityInstance*[] InActivityInstances);// 0x284cb20
	float GetInventoryQuantity(const KSActivityInstance* InActivityInstance);// 0x284ca80
	float GetCurrentProgressSum(out const KSActivityInstance*[] InActivityInstances);// 0x284c910
	float GetCurrentProgress(const KSActivityInstance* InActivityInstance);// 0x284c870
	float GetCurrentAccumulatedProgressSum(out const KSActivityInstance*[] InActivityInstances);// 0x284c7b0
	float GetCurrentAccumulatedProgress(const KSActivityInstance* InActivityInstance);// 0x284c710
	KSActivityInstance*[] GetActivityInstancesByDescriptors(const Object* InWorldContextObject, out const KSActivityDescriptor[] InActivityDescriptors, const KSPlayerState* InPlayerState);// 0x284c020
	KSActivityInstance*[] GetActivityInstancesByDescriptor(const Object* InWorldContextObject, out const KSActivityDescriptor InActivityDescriptor, const KSPlayerState* InPlayerState);// 0x284be80
	KSActivityInstance* GetActivityInstanceByDescriptors(const Object* InWorldContextObject, out const KSActivityDescriptor[] InActivityDescriptors, const KSPlayerState* InPlayerState);// 0x284bd20
	KSActivityInstance* GetActivityInstanceByDescriptor(const Object* InWorldContextObject, out const KSActivityDescriptor InActivityDescriptor, const KSPlayerState* InPlayerState);// 0x284bbe0

--------------------------------
Class: KSActivityDescriptor
	GameplayTag ActivityTag;//[Offset: 0x0, Size: 1]
	int64 DescriptorId;//[Offset: 0x8, Size: 1]
	FString DescriptorString;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSBotDefinition.DataAsset.Object
	FString FriendlySearchName;//[Offset: 0x30, Size: 1]
	BotSpawnTableRow Info;//[Offset: 0x40, Size: 1]

--------------------------------
Class: BotSpawnTableRow.TableRowBase
	class KSCharacter* Character;//[Offset: 0x8, Size: 1]
	class KSAIController* Controller;//[Offset: 0x30, Size: 1]
	BehaviorTree* BehaviorTree1;//[Offset: 0x58, Size: 1]
	KSBTDifficulty* InitialDifficulty;//[Offset: 0x80, Size: 1]
	DataTable* DifficultyTable;//[Offset: 0x88, Size: 1]
	bool AllowDynamicDifficulty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	KSBTDifficultyConfig SpawnDifficultyConfig;//[Offset: 0x98, Size: 1]
	DataTable*[] ItemLoadoutTables;//[Offset: 0x118, Size: 1]
	DataTable* ObjectivePriorityTable;//[Offset: 0x128, Size: 1]
	DataTable* ItemPriorityTable;//[Offset: 0x130, Size: 1]
	GameplayTagQuery AllowedJobQuery;//[Offset: 0x138, Size: 1]
	DataTable* AbilityTable;//[Offset: 0x180, Size: 1]
	DataTable* RandomCharacterSkinTable;//[Offset: 0x188, Size: 1]
	DataTable* RandomEquipmentSkinTable;//[Offset: 0x190, Size: 1]
	bool bIsPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 1]
	bool bUseGameModeInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 1]
	bool bDelayPawnUntilLoadoutComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19a, Size: 1]

--------------------------------
Class: KSMiniMapAssistant.Info.Actor.Object
	void GetRelativeMinimapHeightToLocalPlayer(Vector ActorLocation, out enum RelativeHeight);// 0x1fad5e0

--------------------------------
Class: CombatEventList.SizedArraySerializer.ReplicatedLog
	CombatEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: SizedArraySerializer.ReplicatedLog

--------------------------------
Class: ReplicatedLog
	int MaxEntryReplication;//[Offset: 0x0, Size: 1]
	int MaxHistory;//[Offset: 0x4, Size: 1]
	int TailRepIndex;//[Offset: 0x8, Size: 1]
	int HeadRepIndex;//[Offset: 0xc, Size: 1]
	int ItemArrayTail;//[Offset: 0x10, Size: 1]
	int ItemArrayHead;//[Offset: 0x14, Size: 1]

--------------------------------
Class: CombatEventItem.ReplicatedLogItem
	CombatEventInfo CombatEvent;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ReplicatedLogItem

--------------------------------
Class: RadialMenuItemEventList.SizedArraySerializer.ReplicatedLog
	RadialMenuItemEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: RadialMenuItemEventItem.ReplicatedLogItem
	RadialMenuItemEventInfo RadialMenuItemEvent;//[Offset: 0x0, Size: 1]

--------------------------------
Class: RadialMenuItemEventInfo
	PlayerState* EventInstigator;//[Offset: 0x0, Size: 1]
	KSRadialMenuItem* RadialMenuItem;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AssistEventList.SizedArraySerializer.ReplicatedLog
	AssistEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AssistEventItem.ReplicatedLogItem
	AssistInfo AssistInfo;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AssistInfo
	KSPlayerState* Assistant;//[Offset: 0x0, Size: 1]
	float DamageContributed;//[Offset: 0x8, Size: 1]
	float ContributionPercent;//[Offset: 0xc, Size: 1]
	int PointsAwarded;//[Offset: 0x10, Size: 1]
	KSPlayerState* Victim;//[Offset: 0x14, Size: 1]
	KSPlayerState* DownInstigator;//[Offset: 0x1c, Size: 1]
	bool bLethal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: ReviveEventList.SizedArraySerializer.ReplicatedLog
	ReviveEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: ReviveEventItem.ReplicatedLogItem
	ReviveEvent ReviveEvent;//[Offset: 0x0, Size: 1]

--------------------------------
Class: ReviveEvent
	KSPlayerState* Reviver;//[Offset: 0x0, Size: 1]
	KSPlayerState* Revivee;//[Offset: 0x8, Size: 1]
	int ExpBonus;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSDamageTypeBase.DamageType.Object
	enum DamageCategory;//[Offset: 0x40, Size: 1]
	ParticleSystem* HitPawnEffect;//[Offset: 0x48, Size: 1]
	AkAudioEvent* HitBodyAudioEvent;//[Offset: 0x50, Size: 1]
	AkAudioEvent* HitHeadAudioEvent;//[Offset: 0x58, Size: 1]
	AkAudioEvent* HitResistedAudioEvent;//[Offset: 0x60, Size: 1]
	AkAudioEvent* HitReducedAudioEvent;//[Offset: 0x68, Size: 1]
	AkAudioEvent* HitByAudioEvent;//[Offset: 0x70, Size: 1]
	AkAudioEvent* HitByResistedAudioEvent;//[Offset: 0x78, Size: 1]
	AkAudioEvent* HitByReducedAudioEvent;//[Offset: 0x80, Size: 1]
	KSSpecialEffect HitSpecialEffect;//[Offset: 0x88, Size: 1]
	FName EffectAttachPointName;//[Offset: 0xe0, Size: 1]
	bool bPreProcessResistable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8, Size: 1]
	bool bRequiresDamageForDebuffs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 1]
	bool bUIDisplayable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea, Size: 1]
	bool bClientPredictable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb, Size: 1]
	bool bHideDamageDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bCountTowardsTrackedFriendlyFireDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bDoFriendlyDamageWithReverseFriendlyFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	KSPlayerMod*[] DebuffsAppliedOnDamage;//[Offset: 0xf0, Size: 1]
	float FlinchDuration;//[Offset: 0x100, Size: 1]
	float FlinchRecoveryRate;//[Offset: 0x104, Size: 1]
	float FlinchMinHeightBody;//[Offset: 0x108, Size: 1]
	float FlinchMaxHeightBody;//[Offset: 0x10c, Size: 1]
	float FlinchMinHeightHead;//[Offset: 0x110, Size: 1]
	float FlinchMaxHeightHead;//[Offset: 0x114, Size: 1]
	GameplayTagContainer DamageTags;//[Offset: 0x118, Size: 1]
	float ImpulseMagnitudePerDamage;//[Offset: 0x138, Size: 1]
	bool PreProcessDamageEffects(Actor* DamagedActor, out float Damage, out const KSDamageEventInfo DamageEventInfo, Controller* EventInstigator, Actor* DamageCauser);// 0x273f650
	void PostProcessDamageEffects(Actor* DamagedActor, float AttemptedDamage, float ActualDamage, out const KSDamageEventInfo DamageEventInfo, out const CombatEventInfo CombatEventInfo, Controller* EventInstigator, Actor* DamageCauser, bool IsKillEvent);// 0x273f330
	static void GetDefaultObjectPropertiesFromDamageType(class KSDamageTypeBase DamageTypeClass, out ParticleSystem* OutHitPawnEffect, out AkAudioEvent* OutHitBodyAudioEvent, out AkAudioEvent* OutHitHeadAudioEvent, out AkAudioEvent* OutHitByAudioEvent);// 0x273ea30

--------------------------------
Class: KSDamageEventInfo
	class DamageType* DamageTypeClass;//[Offset: 0x0, Size: 1]
	int DamageClassId;//[Offset: 0x8, Size: 1]
	HitResult[] HitResults;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSSpecialEffect
	FName FXID;//[Offset: 0x0, Size: 1]
	float EffectEndTime;//[Offset: 0x8, Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	float LoopStartTime;//[Offset: 0x10, Size: 1]
	float LoopEndTime;//[Offset: 0x14, Size: 1]
	bool bRemoveOnForwardComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]
	bool bRemoveOnReverseComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19, Size: 1]
	KSPostProcessFloatCurve[] FloatCurves;//[Offset: 0x20, Size: 1]
	KSPostProcessColorCurve[] ColorCurves;//[Offset: 0x30, Size: 1]
	class KSFXCurveComponent* FXCurveClass;//[Offset: 0x40, Size: 1]
	Object* EffectAsset;//[Offset: 0x48, Size: 1]
	Object* MobileEffectAssetOverride;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSPostProcessFloatCurve
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 1]
	FName FloatParameterName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSPostProcessColorCurve
	CurveLinearColor* ColorCurve;//[Offset: 0x0, Size: 1]
	FName ColorParameterName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSFXCurveComponent.ActorComponent.Object
	MaterialInstanceDynamic* PostProcessMID;//[Offset: 0x108, Size: 1]
	MaterialInterface* PostProcessMIDParent;//[Offset: 0x110, Size: 1]
	ParticleSystemComponent* ParticleSystem;//[Offset: 0x118, Size: 1]
	ParticleSystem* ParticleSystemParent;//[Offset: 0x120, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bReversing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 1]
	float CurrentTime;//[Offset: 0x12c, Size: 1]
	void UpdateScalarTrack(FName TrackName, float TrackValue);// 0x1f73ad0
	void UpdateColorTrack(FName TrackName, const LinearColor TrackValue);// 0x2758830
	void Stop();// 0x27586d0
	void Reverse();// 0x27585b0
	void ResetTime();// 0x2758590
	void Play();// 0x2758570
	bool IsPlaying();// 0x27583f0
	FName GetFxID();// 0x26af820
	KSCharacter* GetCharacterOwner();// 0x27579b0
	KSCharacterFoundation* GetCharacterFoundationOwner();// 0x2757980

--------------------------------
Class: KSCinematicSequenceManager.Actor.Object
	LevelSequenceActor* SequenceActor;//[Offset: 0x220, Size: 1]
	LevelSequence* Sequence;//[Offset: 0x228, Size: 1]
	KSCinematicCharacterManager*[] CinematicCharacterHandles;//[Offset: 0x230, Size: 1]
	class KSLobbyCharacter* CinematicCharacterClass;//[Offset: 0x240, Size: 1]
	bool VerifyAllCinematicCharactersLoaded();// 0x273b880
	void SetCinematicCharactersTimeDilation(float NewDilation);// 0x273b540
	void SetCinematicCharactersFromWinningTeam();// 0x273b520
	void SetCinematicCharactersFromTopMVP(int NumPlayersToShow);// 0x273b4a0
	void SetCinematicCharactersFromPlayerTeam();// 0x273b480
	bool PlaySequence(bool bRequireCharactersLoaded, LevelSequence* InLevelSequence);// 0x273b170
	LevelSequence* GetSequence();// 0x273aa00
	KSSkinBundle* GetDebugPreviewSkinByIndex(int InIndex);// 0x273a7e0
	KSCharacter*[] GetCinematicCharacters();// 0x273a300
	KSCinematicCharacterManager*[] GetCinematicCharacterManagers();// 0x273a240
	void FillCharacterManagersWithPreviewRogues(int NumToFill);// 0x273a090

--------------------------------
Class: LevelSequenceActor.Actor.Object
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x230, Size: 1]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x248, Size: 1]
	SoftObjectPath LevelSequence;//[Offset: 0x250, Size: 1]
	Actor*[] AdditionalEventReceivers;//[Offset: 0x268, Size: 1]
	LevelSequenceCameraSettings CameraSettings;//[Offset: 0x278, Size: 1]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x280, Size: 1]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x288, Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 1]
	bool bOverrideInstanceData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 1]
	bool bReplicatePlayback;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 1]
	Object* DefaultInstanceData;//[Offset: 0x298, Size: 1]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x2a0, Size: 1]
	bool bShowBurnin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	void ShowBurnin();// 0x3da2e50
	void SetSequence(LevelSequence* InSequence);// 0x3da2dd0
	void SetReplicatePlayback(bool ReplicatePlayback);// 0x3da2d40
	void SetEventReceivers(Actor*[] AdditionalReceivers);// 0x3da2c00
	void SetBindingByTag(FName BindingTag, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3da2a10
	void SetBinding(MovieSceneObjectBindingID Binding, out const Actor*[] Actors, bool bAllowBindingsFromAsset);// 0x3da28c0
	void ResetBindings();// 0x3da28a0
	void ResetBinding(MovieSceneObjectBindingID Binding);// 0x3da27f0
	void RemoveBindingByTag(FName Tag, Actor* Actor);// 0x3da26c0
	void RemoveBinding(MovieSceneObjectBindingID Binding, Actor* Actor);// 0x3da25d0
	void OnLevelSequenceLoaded__DelegateSignature();// 0x2d74e00
	LevelSequence* LoadSequence();// 0x3da2560
	void HideBurnin();// 0x3da2540
	LevelSequencePlayer* GetSequencePlayer();// 0x3da24f0
	LevelSequence* GetSequence();// 0x3da24a0
	MovieSceneObjectBindingID[] FindNamedBindings(FName Tag);// 0x3da2380
	MovieSceneObjectBindingID FindNamedBinding(FName Tag);// 0x3da22d0
	void AddBindingByTag(FName BindingTag, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3da1fd0
	void AddBinding(MovieSceneObjectBindingID Binding, Actor* Actor, bool bAllowBindingsFromAsset);// 0x3da1e90

--------------------------------
Class: LevelSequence.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 1]
	LevelSequenceObjectReferenceMap ObjectReferences;//[Offset: 0x350, Size: 1]
	LevelSequenceBindingReferences BindingReferences;//[Offset: 0x3a0, Size: 1]
	<FString,LevelSequenceObject> PossessedObjects;//[Offset: 0x440, Size: 1]
	class Object* DirectorClass;//[Offset: 0x490, Size: 1]
	void RemoveMetaDataByClass(class Object InClass);// 0x3da2780
	Object* FindOrAddMetaDataByClass(class Object InClass);// 0x3da20e0
	Object* FindMetaDataByClass(class Object InClass);// 0x3da20e0
	Object* CopyMetaData(Object* InMetaData);// 0x3da20e0

--------------------------------
Class: LevelSequenceObjectReferenceMap

--------------------------------
Class: LevelSequenceBindingReferences
	<Guid,LevelSequenceBindingReferenceArray> BindingIdToReferences;//[Offset: 0x0, Size: 1]
	<Guid> AnimSequenceInstances;//[Offset: 0x50, Size: 1]

--------------------------------
Class: LevelSequenceBindingReferenceArray
	LevelSequenceBindingReference[] References;//[Offset: 0x0, Size: 1]

--------------------------------
Class: LevelSequenceBindingReference
	FString PackageName;//[Offset: 0x0, Size: 1]
	SoftObjectPath ExternalObjectPath;//[Offset: 0x10, Size: 1]
	FString ObjectPath;//[Offset: 0x28, Size: 1]

--------------------------------
Class: LevelSequenceObject
	Object* ObjectOrOwner;//[Offset: 0x0, Size: 1]
	FString ComponentName;//[Offset: 0x20, Size: 1]
	Object* CachedComponent;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LevelSequencePlayer.MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnCameraCut;//[Size: 1]
	CameraComponent* GetActiveCameraComponent();// 0x3da2460
	static LevelSequencePlayer* CreateLevelSequencePlayer(Object* WorldContextObject, LevelSequence* LevelSequence, MovieSceneSequencePlaybackSettings Settings, out LevelSequenceActor* OutActor);// 0x3da2160

--------------------------------
Class: MovieSceneSequencePlayer.Object
	MulticastInlineDelegateProperty OnPlay;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayReverse;//[Size: 1]
	MulticastInlineDelegateProperty OnStop;//[Size: 1]
	MulticastInlineDelegateProperty OnPause;//[Size: 1]
	MulticastInlineDelegateProperty OnFinished;//[Size: 1]
	byte Status;//[Offset: 0x458, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 1]
	MovieSceneSequence* Sequence;//[Offset: 0x460, Size: 1]
	FrameNumber StartTime;//[Offset: 0x468, Size: 1]
	int DurationFrames;//[Offset: 0x46c, Size: 1]
	int CurrentNumLoops;//[Offset: 0x470, Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x488, Size: 1]
	MovieSceneRootEvaluationTemplateInstance RootTemplateInstance;//[Offset: 0x4a0, Size: 1]
	MovieSceneSequenceReplProperties NetSyncProps;//[Offset: 0x828, Size: 1]
	interface class None* PlaybackClient;//[Offset: 0x838, Size: 1]
	void StopAtCurrentTime();// 0x3a9e810
	void Stop();// 0x3a9e7f0
	void SetTimeRange(float StartTime, float Duration);// 0x3a9e730
	void SetPlayRate(float PlayRate);// 0x3a9e470
	void SetPlaybackRange(const float NewStartTime, const float NewEndTime);// 0x3a9e5f0
	void SetPlaybackPosition(float NewPlaybackPosition);// 0x3a9e4f0
	void SetFrameRate(FrameRate FrameRate);// 0x3a9e3e0
	void SetFrameRange(int StartFrame, int Duration);// 0x3a9e320
	void SetDisableCameraCuts(bool bInDisableCameraCuts);// 0x3a9e290
	void ScrubToSeconds(float TimeInSeconds);// 0x3a9dc30
	bool ScrubToMarkedFrame(FString InLabel);// 0x3a9e1e0
	void ScrubToFrame(FrameTime NewPosition);// 0x3a9e150
	void Scrub();// 0x3a9e130
	void RPC_OnStopEvent(FrameTime StoppedTime);// 0x3a9e0a0
	void RPC_ExplicitServerUpdateEvent(enum Method, FrameTime RelevantTime);// 0x3a9dfd0
	void PlayToSeconds(float TimeInSeconds);// 0x3a9df50
	bool PlayToMarkedFrame(FString InLabel);// 0x3a9dea0
	void PlayToFrame(FrameTime NewPosition);// 0x3a9de10
	void PlayReverse();// 0x3a9ddf0
	void PlayLooping(int NumLoops);// 0x3a9dd70
	void Play();// 0x3a9dd50
	void Pause();// 0x3a9dd30
	void JumpToSeconds(float TimeInSeconds);// 0x3a9dcb0
	void JumpToPosition(float NewPlaybackPosition);// 0x3a9dc30
	bool JumpToMarkedFrame(FString InLabel);// 0x3a9db80
	void JumpToFrame(FrameTime NewPosition);// 0x3a9daf0
	bool IsReversed();// 0x3a9dac0
	bool IsPlaying();// 0x3a9da90
	bool IsPaused();// 0x3a9da60
	void GoToEndAndStop();// 0x3a9da40
	QualifiedFrameTime GetStartTime();// 0x3a9d9f0
	float GetPlayRate();// 0x3a9d790
	float GetPlaybackStart();// 0x3a9d940
	float GetPlaybackPosition();// 0x3a9d850
	float GetPlaybackEnd();// 0x3a9d7c0
	MovieSceneObjectBindingID[] GetObjectBindings(Object* InObject);// 0x3a9d6b0
	float GetLength();// 0x3a9d680
	FrameRate GetFrameRate();// 0x3a9d660
	int GetFrameDuration();// 0x3a9d630
	QualifiedFrameTime GetEndTime();// 0x3a9d5d0
	QualifiedFrameTime GetDuration();// 0x3a9d590
	bool GetDisableCameraCuts();// 0x3a9d560
	QualifiedFrameTime GetCurrentTime();// 0x3a9d520
	Object*[] GetBoundObjects(MovieSceneObjectBindingID ObjectBinding);// 0x3a9d420
	void ChangePlaybackDirection();// 0x3a9d400

--------------------------------
Class: QualifiedFrameTime
	FrameTime Time;//[Offset: 0x0, Size: 1]
	FrameRate Rate;//[Offset: 0x8, Size: 1]

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	MovieSceneSequenceLoopCount LoopCount;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float StartTime;//[Offset: 0xc, Size: 1]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 1]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 1]
	bool bDisableCameraCuts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 1]
	bool bPauseAtEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 1]

--------------------------------
Class: MovieSceneSequenceLoopCount
	int Value;//[Offset: 0x0, Size: 1]

--------------------------------
Class: MovieSceneRootEvaluationTemplateInstance
	<MovieSceneSequenceID,Object*> DirectorInstances;//[Offset: 0x18, Size: 1]

--------------------------------
Class: MovieSceneSequenceReplProperties
	FrameTime LastKnownPosition;//[Offset: 0x0, Size: 1]
	byte LastKnownStatus;//[Offset: 0x8, Size: 1]
	int LastKnownNumLoops;//[Offset: 0xc, Size: 1]

--------------------------------
Class: LevelSequenceCameraSettings
	bool bOverrideAspectRatioAxisConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	byte AspectRatioAxisConstraint;//[Offset: 0x1, Size: 1]

--------------------------------
Class: LevelSequenceBurnInOptions.Object
	bool bUseBurnIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	SoftClassPath BurnInClass;//[Offset: 0x30, Size: 1]
	LevelSequenceBurnInInitSettings* Settings;//[Offset: 0x48, Size: 1]
	void SetBurnIn(SoftClassPath InBurnInClass);// 0x3da2b40

--------------------------------
Class: LevelSequenceBurnInInitSettings.Object

--------------------------------
Class: MovieSceneBindingOverrides.Object
	MovieSceneBindingOverrideData[] BindingData;//[Offset: 0x28, Size: 1]

--------------------------------
Class: MovieSceneBindingOverrideData
	MovieSceneObjectBindingID ObjectBindingID;//[Offset: 0x0, Size: 1]
	Object* Object;//[Offset: 0x18, Size: 1]
	bool bOverridesDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: LevelSequenceBurnIn.UserWidget.Widget.Visual.Object
	LevelSequencePlayerSnapshot FrameInformation;//[Offset: 0x238, Size: 1]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2f0, Size: 1]
	void SetSettings(Object* InSettings);// 0x2d74e00
	class LevelSequenceBurnInInitSettings GetSettingsClass();// 0x3da2520

--------------------------------
Class: LevelSequencePlayerSnapshot
	FString MasterName;//[Offset: 0x0, Size: 1]
	QualifiedFrameTime MasterTime;//[Offset: 0x10, Size: 1]
	QualifiedFrameTime SourceTime;//[Offset: 0x20, Size: 1]
	FString CurrentShotName;//[Offset: 0x30, Size: 1]
	QualifiedFrameTime CurrentShotLocalTime;//[Offset: 0x40, Size: 1]
	QualifiedFrameTime CurrentShotSourceTime;//[Offset: 0x50, Size: 1]
	FString SourceTimecode;//[Offset: 0x60, Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x70, Size: 1]
	LevelSequenceSnapshotSettings Settings;//[Offset: 0x98, Size: 1]
	LevelSequence* ActiveShot;//[Offset: 0xa8, Size: 1]
	MovieSceneSequenceID ShotID;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: LevelSequenceSnapshotSettings
	byte ZeroPadAmount;//[Offset: 0x0, Size: 1]
	FrameRate FrameRate;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSCinematicCharacterManager.KSJobSelectPreviewActor.Info.Actor.Object
	KSCinematicSequenceManager* CinematicSequenceManager;//[Offset: 0x428, Size: 1]
	enum CinematicCharacterType;//[Offset: 0x430, Size: 1]
	bool bRequireCharacterToBeVisibleToCountAsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x431, Size: 1]
	bool VerifyCinematicCharacterLoaded();// 0x26cb880
	void OnNewCharacterTimeDilationSet(float NewDilation);// 0x2d74e00
	void OnCharacterSpawned(KSCharacter* SpawnedCharacter);// 0x2d74e00
	KSCharacter* GetCinematicCharacter();// 0x273a210

--------------------------------
Class: KSJobSelectPreviewActor.Info.Actor.Object
	KSPersistentPlayerData* OwningPersistantPlayerData;//[Offset: 0x220, Size: 1]
	class KSLobbyCharacter* LobbyCharacterClass;//[Offset: 0x228, Size: 1]
	KSLobbyCharacter* ChildLobbyCharacter;//[Offset: 0x230, Size: 1]
	float ModelViewerDelay;//[Offset: 0x238, Size: 1]
	enum JobSelectionState;//[Offset: 0x23c, Size: 1]
	FName[] SkinPreloadBundles;//[Offset: 0x268, Size: 1]
	int PositionIndex;//[Offset: 0x278, Size: 1]
	bool bOffsetCharacterByCapsuleHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	bool bKeepActiveJobVisibleWhileLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 1]
	SceneComponent* BaseComponent;//[Offset: 0x280, Size: 1]
	TimerHandle JobModelViewerTimer;//[Offset: 0x288, Size: 1]
	KSJobItem* ActiveJobItem;//[Offset: 0x290, Size: 1]
	KSSkinBundle* ActiveSkinBundle;//[Offset: 0x298, Size: 1]
	<KSItem*,KSItem*> ActiveFullSkinMap;//[Offset: 0x2a0, Size: 1]
	KSJobItem* QueuedJob;//[Offset: 0x2f0, Size: 1]
	enum CachedState;//[Offset: 0x318, Size: 1]
	bool bHideChildCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x319, Size: 1]
	MulticastInlineDelegateProperty OnJobPreviewStateChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPersistentPlayerDataSetDel;//[Size: 1]
	KSJobItem* JobFromLoadout;//[Offset: 0x370, Size: 1]
	<KSItem*,KSItem*> PendingFullSkinMap;//[Offset: 0x378, Size: 1]
	<KSItem*,PreviewActorPropSkinInfo> PropsAndSkins;//[Offset: 0x3c8, Size: 1]
	bool bHasTriggeredVO;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	void SetPersistantPlayerData(KSPersistentPlayerData* PersistantPlayerData);// 0x2795580
	void SetModelViewerDelay(float Timer);// 0x2795500
	void SetJobToQueuedId();// 0x27954e0
	void SetJobAndSkin(out const KSJobItem* InJobItem, out const KSSkinBundle* InSkinItem);// 0x27953a0
	void SetJob(out const KSJobItem* InJobItem);// 0x27952e0
	void SetHoveredJob(int JobId, int SkinId, enum InJobSelectionState);// 0x27950c0
	void SetCharacterHidden(bool bShouldHide);// 0x2795030
	void PreLobbyCharacterDestroy();// 0x2d74e00
	void PostLobbyCharacterSpawned();// 0x2d74e00
	bool IsLockedIn();// 0x2794b10
	bool HasQueuedJob();// 0x2794a50
	KSSkinBundle* GetSkinBundle();// 0x2794a20
	enum GetPreviewLoadState();// 0x27949f0
	int GetPositionIndex();// 0x27949d0
	KSPersistentPlayerData* GetPersistantPlayerData();// 0x27948c0
	class KSLobbyCharacter GetLobbyCharacterClassToUse(KSJobItem* JobToUse, KSSkinBundle* SkinToUse);// 0x27947f0
	KSLobbyCharacter* GetLobbyCharacter();// 0x27947d0
	KSJobItem* GetJobItem();// 0x27946c0
	bool GetCharacterShouldBeHidden();// 0x27945a0
	FText GetCharacterName();// 0x2794500
	FString GetCharacterFriendlySearchName();// 0x2794480
	void CheatSetJobAndSkin(out const KSJobItem* InJobItem, out const KSSkinBundle* InSkinItem);// 0x2793bc0
	void CheatClearJob();// 0x2793ba0
	void CallShowLobbyCharacterFromEnablingCinematic(FString CinematicSubLevelName);// 0x2793b00
	void CallHideLobbyCharacterFromDisablingCinematic(FString CinematicSubLevelName);// 0x2793a60
	void BlueprintStateChanged(enum PreviousState);// 0x2d74e00

--------------------------------
Class: PreviewActorPropSkinInfo
	KSItem* Prop;//[Offset: 0x0, Size: 1]
	bool bIsSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	KSItem* LastSetSkin;//[Offset: 0x10, Size: 1]
	KSItem* ActiveSkin;//[Offset: 0x18, Size: 1]
	KSItem* PendingSkin;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSLootSiteBase.Actor.Object
	MulticastInlineDelegateProperty OnLootSiteSpawned;//[Size: 1]
	MulticastInlineDelegateProperty OnLootSiteStateChanged;//[Size: 1]
	enum RarityTag;//[Offset: 0x250, Size: 1]
	MulticastInlineDelegateProperty OnLootSiteRarityChanged;//[Size: 1]
	byte SiteGroupNumber;//[Offset: 0x268, Size: 1]
	<enum,DataTable*> RarityLootSiteTableMap;//[Offset: 0x270, Size: 1]
	KSItemDrop* SpawnedDrop;//[Offset: 0x2d0, Size: 1]
	Object*[] ObjectsToKeepAround;//[Offset: 0x2d8, Size: 1]
	float SpawnRate;//[Offset: 0x2e8, Size: 1]
	float SpawnDelay;//[Offset: 0x2ec, Size: 1]
	float RespawnDelay;//[Offset: 0x2f0, Size: 1]
	bool bAutoRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4, Size: 1]
	bool bDestroySiteOnLooted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5, Size: 1]
	bool bDisableWeaponCosmeticZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f6, Size: 1]
	KSLootSiteBase*[] ChildSpawners;//[Offset: 0x2f8, Size: 1]
	float SurfaceCheckHeight;//[Offset: 0x308, Size: 1]
	bool bUsePrecisePlacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	LootSiteState LootSiteState;//[Offset: 0x30d, Size: 1]
	bool CosmeticVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30f, Size: 1]
	TimerHandle SpawnDelayTimer;//[Offset: 0x310, Size: 1]
	Vector NavigationLocation;//[Offset: 0x318, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x330, Size: 1]
	Actor*[] ActorsSeenBy;//[Offset: 0x338, Size: 1]
	static void WeightedSiteShuffle(out KSLootSiteBase*[] SiteArray);// 0x27af2a0
	void SpawnSpecificLoot(out const LootSiteDropInfo Loot);// 0x27af160
	void SpawnSpecificItemDrop(KSItem* ItemAsset);// 0x27af0e0
	void SpawnItemDropInternal();// 0x27af0c0
	void SpawnItemDrop(bool UseDelay);// 0x27af030
	void SpawnedDropDestroyed(Actor* DestroyedActor);// 0x27af220
	bool SetSiteActive(bool Active);// 0x27aef60
	void SetRarity(enum NewRarity);// 0x27aeee0
	void Reset();// 0x27aee00
	void OnRep_RarityTag();// 0x27aede0
	void OnRep_LootSiteState();// 0x27aedc0
	void OnRep_CosmeticVisible();// 0x27aeda0
	void OnCosmeticVisibilityChanged(bool Visible);// 0x2d74e00
	bool IsLooted();// 0x27aea60
	bool IsActive();// 0x27aea00
	LootSiteState GetLootSiteState();// 0x27ae350
	Vector FindBestDropLocation(KSItemDrop* InDrop);// 0x27ae120
	LootSiteDropInfo ChoostLoot();// 0x27ae030
	static LootSiteDropInfo ChooseRandomLoot(out const LootSiteDropInfo[] InLoot, const Object* WorldContextObject);// 0x27adf20
	KSItem* ChooseItemAsset();// 0x2d74e00

--------------------------------
Class: LootSiteState
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bLooted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: LootSiteDropInfo
	KSItem* Item;//[Offset: 0x0, Size: 1]
	KSWeaponAttachment* Attachment1;//[Offset: 0x8, Size: 1]
	KSWeaponAttachment* Attachment2;//[Offset: 0x10, Size: 1]
	KSWeaponAttachment* Attachment3;//[Offset: 0x18, Size: 1]
	float Weight;//[Offset: 0x20, Size: 1]
	int Price;//[Offset: 0x24, Size: 1]
	float ChanceToSkipAttachment;//[Offset: 0x28, Size: 1]
	bool bRandomizeAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: KSFlightPoint.TargetPoint.Actor.Object
	SplineComponent* SplineComponent;//[Offset: 0x220, Size: 1]
	byte SplinePointType;//[Offset: 0x228, Size: 1]
	bool bIsEndPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 1]

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x430, Size: 1]
	InterpCurveVector SplineInfo;//[Offset: 0x498, Size: 1]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x4b0, Size: 1]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x4c8, Size: 1]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x4e0, Size: 1]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f8, Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x4fc, Size: 1]
	float Duration;//[Offset: 0x500, Size: 1]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x505, Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x507, Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x509, Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a, Size: 1]
	float LoopPosition;//[Offset: 0x50c, Size: 1]
	Vector DefaultUpVector;//[Offset: 0x510, Size: 1]
	void UpdateSpline();// 0x464dcc0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x464d830
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x464d6d0
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x464cdf0
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x464d510
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x464d3b0
	void SetSplineWorldPoints(out const Vector[] Points);// 0x464d230
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x464d000
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x464d100
	void SetSplineLocalPoints(out const Vector[] Points);// 0x464cf50
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x464cdf0
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x464cc90
	void SetDrawDebug(bool bShow);// 0x464cc00
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x464cb20
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x464ca10
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x464c940
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x464c880
	bool IsClosedLoop();// 0x464c850
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x464c7a0
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x464c6b0
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x464c600
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x464c510
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x464c460
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x464c3b0
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x464c2c0
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x464c210
	Vector GetVectorPropertyAtSplinePoint(int Index, FName PropertyName);// 0x464c140
	Vector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x464c060
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x464bf40
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x464be70
	Vector GetUpVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x464bd90
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x464bcb0
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x464bb20
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x464b9e0
	Transform GetTransformAtSplineInputKey(float InKey, byte CoordinateSpace, bool bUseScale);// 0x464b890
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x464b740
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x464b620
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4649e00
	Vector GetTangentAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x464b540
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x464b460
	byte GetSplinePointType(int PointIndex);// 0x464b3d0
	float GetSplineLength();// 0x464b3a0
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x464b230
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x464b190
	Vector GetScaleAtSplineInputKey(float InKey);// 0x464b0f0
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x464b050
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x464af30
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x464ae60
	Rotator GetRotationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x464ad80
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x464aca0
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x464ab90
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x464aad0
	float GetRollAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x464aa00
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x464a930
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x464a810
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x464a740
	Vector GetRightVectorAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x464a660
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x464a580
	int GetNumberOfSplineSegments();// 0x464a550
	int GetNumberOfSplinePoints();// 0x464a520
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x464a400
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x464a330
	Vector GetLocationAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x464a250
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x464a170
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x464a000
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x4649ed0
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4649e00
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x4649d70
	float GetFloatPropertyAtSplinePoint(int Index, FName PropertyName);// 0x4649cb0
	float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);// 0x4649be0
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x4649b50
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4649a30
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4649960
	Vector GetDirectionAtSplineInputKey(float InKey, byte CoordinateSpace);// 0x4649880
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x46497a0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x4649700
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4649630
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4649540
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x46493f0
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4649300
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x4649250
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4649160
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4649080
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4648f90
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4648ea0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x4648e00
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4648d10
	void ClearSplinePoints(bool bUpdateSpline);// 0x4648c80
	void AddSplineWorldPoint(out const Vector Position);// 0x4648be0
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x4648a80
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x4648970
	void AddSplineLocalPoint(out const Vector Position);// 0x46488e0
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x46487e0
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x46486d0

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 1]
	Vector Position;//[Offset: 0x4, Size: 1]
	Vector ArriveTangent;//[Offset: 0x10, Size: 1]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 1]
	Rotator Rotation;//[Offset: 0x28, Size: 1]
	Vector Scale;//[Offset: 0x34, Size: 1]
	byte Type;//[Offset: 0x40, Size: 1]

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 1]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 1]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 1]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 1]
	SplineMetadata* MetaData;//[Offset: 0x60, Size: 1]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 1]
	Quat OutVal;//[Offset: 0x10, Size: 1]
	Quat ArriveTangent;//[Offset: 0x20, Size: 1]
	Quat LeaveTangent;//[Offset: 0x30, Size: 1]
	byte InterpMode;//[Offset: 0x40, Size: 1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 1]
	float OutVal;//[Offset: 0x4, Size: 1]
	float ArriveTangent;//[Offset: 0x8, Size: 1]
	float LeaveTangent;//[Offset: 0xc, Size: 1]
	byte InterpMode;//[Offset: 0x10, Size: 1]

--------------------------------
Class: SplineMetadata.Object

--------------------------------
Class: KSDestructibleBase.Actor.Object
	bool bRenderTrueCollisionUntilDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 1]
	SceneComponent* SceneRoot;//[Offset: 0x230, Size: 1]
	DestructibleComponent* VisualMesh;//[Offset: 0x238, Size: 1]
	StaticMeshComponent* TrueCollision;//[Offset: 0x240, Size: 1]
	BoxComponent* SpeedOverlap;//[Offset: 0x248, Size: 1]
	bool bAllowDestructibleMeshSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x250, Size: 1]
	bool bAllowPlayerToWalkOnSurface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x251, Size: 1]
	bool bAllowDestructionAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x252, Size: 1]
	AkAudioEvent* DefaultDestructionEvent;//[Offset: 0x258, Size: 1]
	bool bSpawnBreakParticleAtActorLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	ParticleSystem* BreakParticles;//[Offset: 0x268, Size: 1]
	ParticleSystem* ImpactParticles;//[Offset: 0x270, Size: 1]
	ParticleSystem* FakeHitDecalParticle;//[Offset: 0x278, Size: 1]
	class CameraShake* CharacterSpeedOverlapCameraShake;//[Offset: 0x280, Size: 1]
	MulticastInlineDelegateProperty OnDestructibleDestroyed;//[Size: 1]
	float MaxHealth;//[Offset: 0x298, Size: 1]
	float Health;//[Offset: 0x29c, Size: 1]
	float LocalHealth;//[Offset: 0x2a0, Size: 1]
	bool bResetOnRoundChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4, Size: 1]
	bool bAllowsWeaponPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5, Size: 1]
	bool bCanBreakWithSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6, Size: 1]
	bool bAllProjectilesInstantBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7, Size: 1]
	float SpeedBreakThreshold;//[Offset: 0x2a8, Size: 1]
	bool bTransparentDestructible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ac, Size: 1]
	<enum,float> DamageTypeMultipliers;//[Offset: 0x2b0, Size: 1]
	float BreakingDamage;//[Offset: 0x300, Size: 1]
	float BreakingImpulse;//[Offset: 0x304, Size: 1]
	bool bUseRadialDestruction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	float BreakingRadius;//[Offset: 0x30c, Size: 1]
	float ImpactImpulseOffset;//[Offset: 0x310, Size: 1]
	bool bIgnoreCharacterVerticalSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314, Size: 1]
	float BadDestroyCheckTime;//[Offset: 0x318, Size: 1]
	float EventlessDestroyWaitTime;//[Offset: 0x31c, Size: 1]
	bool MeshDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	PhysicalMaterial* PhysicalMaterialOverride;//[Offset: 0x328, Size: 1]
	DestructibleMesh* MeshAsset;//[Offset: 0x330, Size: 1]
	Vector LastHitLocation;//[Offset: 0x338, Size: 1]
	Vector LastHitDirection;//[Offset: 0x344, Size: 1]
	Vector LastHitNormal;//[Offset: 0x350, Size: 1]
	ParticleSystemComponent*[] FakeHitDecals;//[Offset: 0x360, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x380, Size: 1]
	void UndoBadDestroy();// 0x273ff70
	void SpeedGateOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x273fd80
	bool ShouldProjectilesInstantBreak();// 0x273fd30
	void SetupPreBroken();// 0x273fc70
	void ResetDestructible();// 0x273fb00
	int PostDestructionEvent(AkAudioEvent* InEvent);// 0x273f2a0
	void OnRoundChange(out const RoundInitState RoundInitState);// 0x273f200
	void OnRep_Health();// 0x273f1e0
	void OnDestructionChange(bool Destroyed, bool bInitialSetup);// 0x273f110
	void OnDamageEvent(float NewHealth, Vector HitLocation, Vector HitDirection, Vector HitNormal, bool FromServer);// 0x273ef60
	float GetMaxHealth();// 0x273ed70
	float GetCurrentHealth();// 0x273e9e0
	void BlueprintPrepareKillCamPlayback();// 0x2d74e00

--------------------------------
Class: DestructibleComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bFractureEffectOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x670, Size: 1]
	FractureEffect[] FractureEffects;//[Offset: 0x678, Size: 1]
	bool bEnableHardSleeping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 1]
	float LargeChunkThreshold;//[Offset: 0x68c, Size: 1]
	MulticastInlineDelegateProperty OnComponentFracture;//[Size: 1]
	void SetDestructibleMesh(DestructibleMesh* NewMesh);// 0xc6d020
	DestructibleMesh* GetDestructibleMesh();// 0xc6cff0
	void ApplyRadiusDamage(float BaseDamage, out const Vector HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);// 0xc6ce40
	void ApplyDamage(float DamageAmount, out const Vector HitLocation, out const Vector ImpulseDir, float ImpulseStrength);// 0xc6ccd0

--------------------------------
Class: DestructibleMesh.SkeletalMesh.StreamableRenderAsset.Object
	DestructibleParameters DefaultDestructibleParameters;//[Offset: 0x388, Size: 1]
	FractureEffect[] FractureEffects;//[Offset: 0x410, Size: 1]

--------------------------------
Class: DestructibleParameters
	DestructibleDamageParameters DamageParameters;//[Offset: 0x0, Size: 1]
	DestructibleDebrisParameters DebrisParameters;//[Offset: 0x1c, Size: 1]
	DestructibleAdvancedParameters AdvancedParameters;//[Offset: 0x48, Size: 1]
	DestructibleSpecialHierarchyDepths SpecialHierarchyDepths;//[Offset: 0x58, Size: 1]
	DestructibleDepthParameters[] DepthParameters;//[Offset: 0x70, Size: 1]
	DestructibleParametersFlag Flags;//[Offset: 0x80, Size: 1]

--------------------------------
Class: DestructibleDamageParameters
	float DamageThreshold;//[Offset: 0x0, Size: 1]
	float DamageSpread;//[Offset: 0x4, Size: 1]
	bool bEnableImpactDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	float ImpactDamage;//[Offset: 0xc, Size: 1]
	int DefaultImpactDamageDepth;//[Offset: 0x10, Size: 1]
	bool bCustomImpactResistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]
	float ImpactResistance;//[Offset: 0x18, Size: 1]

--------------------------------
Class: DestructibleDebrisParameters
	float DebrisLifetimeMin;//[Offset: 0x0, Size: 1]
	float DebrisLifetimeMax;//[Offset: 0x4, Size: 1]
	float DebrisMaxSeparationMin;//[Offset: 0x8, Size: 1]
	float DebrisMaxSeparationMax;//[Offset: 0xc, Size: 1]
	Box ValidBounds;//[Offset: 0x10, Size: 1]

--------------------------------
Class: DestructibleAdvancedParameters
	float DamageCap;//[Offset: 0x0, Size: 1]
	float ImpactVelocityThreshold;//[Offset: 0x4, Size: 1]
	float MaxChunkSpeed;//[Offset: 0x8, Size: 1]
	float FractureImpulseScale;//[Offset: 0xc, Size: 1]

--------------------------------
Class: DestructibleSpecialHierarchyDepths
	int SupportDepth;//[Offset: 0x0, Size: 1]
	int MinimumFractureDepth;//[Offset: 0x4, Size: 1]
	bool bEnableDebris;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	int DebrisDepth;//[Offset: 0xc, Size: 1]
	int EssentialDepth;//[Offset: 0x10, Size: 1]

--------------------------------
Class: DestructibleDepthParameters
	byte ImpactDamageOverride;//[Offset: 0x0, Size: 1]

--------------------------------
Class: DestructibleParametersFlag
	bool bAccumulateDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bAssetDefinedSupport;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	bool bWorldSupport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 1]
	bool bDebrisTimeout;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 1]
	bool bDebrisMaxSeparation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 1]
	bool bCrumbleSmallestChunks;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 1]
	bool bAccurateRaycasts;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 1]
	bool bUseValidBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 1]
	bool bFormExtendedStructures;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]

--------------------------------
Class: FractureEffect
	ParticleSystem* ParticleSystem;//[Offset: 0x0, Size: 1]
	SoundBase* Sound;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSHeatSourceComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnTemperatureChanged;//[Size: 1]
	bool bSkipCosmeticIfOwnerIsLocallyViewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0, Size: 1]
	bool bOnlySkipCosmeticForOnAndViewedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1, Size: 1]
	float Temperature;//[Offset: 0xc4, Size: 1]
	float TemperatureScalarModifier;//[Offset: 0xc8, Size: 1]
	bool bDisableTickWhenTemperatureTransitionCompletes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	float TransitionTargetTemp;//[Offset: 0xd0, Size: 1]
	float TransitionRate;//[Offset: 0xd4, Size: 1]
	enum LastKnownViewModeState;//[Offset: 0xd8, Size: 1]
	PrimitiveComponent*[] WithoutHeatVisibilityBlockers;//[Offset: 0xe0, Size: 1]
	PrimitiveComponent*[] HeatOnlyVisibilityBlockers;//[Offset: 0xf0, Size: 1]
	void UnregisterWithoutHeatVisibilityBlocker(PrimitiveComponent* Blocker);// 0x277ea20
	void UnregisterHeatOnlyVisibilityBlocker(PrimitiveComponent* Blocker);// 0x277e9a0
	void TransitionToTemperature(float NewTemperature, float RatePerSecond);// 0x277e8e0
	void SetTemperatureScalarModifier(float NewTemperatureModifier);// 0x277e6c0
	void SetTemperature(float NewTemperature);// 0x277e640
	void RegisterWithoutHeatVisibilityBlocker(PrimitiveComponent* Blocker);// 0x277e000
	void RegisterHeatOnlyVisibilityBlocker(PrimitiveComponent* Blocker);// 0x277df80
	void OnThermalVisionStateChanged(enum NewState);// 0x2d74e00
	void OnOwnerInfoUpdateNotify();// 0x2d74e00
	void NotifyThermalVisionStateChanged(enum NewState);// 0x277dcf0
	float GetUnmodifiedTemperature();// 0x277dc30
	float GetTemperature();// 0x277dc00

--------------------------------
Class: KSOutOfBoundsRecoveryPoint.NavigationObjectBase.Actor.Object
	int SideNum;//[Offset: 0x248, Size: 1]

--------------------------------
Class: KSGameShop.Info.Actor.Object
	MulticastInlineDelegateProperty OnLoadoutChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnAvailable;//[Size: 1]
	MulticastInlineDelegateProperty OnUnavailable;//[Size: 1]
	bool bAvailable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	MulticastInlineDelegateProperty OnEnabled;//[Size: 1]
	MulticastInlineDelegateProperty OnDisabled;//[Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	MulticastInlineDelegateProperty OnOpened;//[Size: 1]
	MulticastInlineDelegateProperty OnClosed;//[Size: 1]
	bool bAllowUnmasteredWeapons;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	bool bLockUndoTransactionHistoryOnRoundReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	bool bResetOnRoundReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b2, Size: 1]
	bool bResetOnTeamSidesFlipped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b3, Size: 1]
	MulticastInlineDelegateProperty OnShopItemAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnShopItemRemoved;//[Size: 1]
	<FName,KSGameShopItemComponent*> ShopItemComponentMap;//[Offset: 0x2d8, Size: 1]
	int MinimumUndoableTransactionId;//[Offset: 0x338, Size: 1]
	KSGameShopMod*[] Mods;//[Offset: 0x340, Size: 1]
	void Undo();// 0x2761d00
	void ToggleShop();// 0x2761ce0
	void SetEnabled(bool bInEnabled);// 0x27617e0
	void SetAvailable(bool bInAvailable);// 0x2761590
	void ServerTryToOpen();// 0x2761540
	void ServerTryToClose();// 0x27614f0
	void ResetItems(KSGameShopItemComponent*[] GameShopItemComponents);// 0x2761410
	void ResetAllItems();// 0x27613f0
	void RemoveMod(KSGameShopMod* Mod);// 0x2761370
	void Open();// 0x2760e80
	void OnTeamSidesFlipped();// 0x2760e60
	void OnShopItemRefunded(KSGameShopItemComponent* ShopItemComponent);// 0x2760ce0
	void OnShopItemPurchased(KSGameShopItemComponent* ShopItemComponent);// 0x2760c60
	void OnShopItemComponentRemoved(KSGameShopItemComponent* ShopItemComponent);// 0x2760bd0
	void OnShopItemComponentAdded(KSGameShopItemComponent* ShopItemComponent);// 0x2760b40
	void OnRep_Open();// 0x2760b20
	void OnRep_bEnabled();// 0x1fa4530
	void OnRep_bAvailable();// 0xd13910
	void OnModeInitiatedReset();// 0x2d74e00
	void OnGamePhaseChangedWrapper(MatchPhase PreviousPhase, MatchPhase NewPhase);// 0x2760920
	void OnGamePhaseChanged(out const MatchPhase PreviousPhase, out const MatchPhase NewPhase);// 0x2760820
	void LockUndoTransactionHistory();// 0x2760640
	bool IsOpen();// 0xe953c0
	bool IsLockedForUndo(KSGameShopItemComponent* ShopItemComponent);// 0x2760550
	bool IsEnabled();// 0xe95400
	bool IsAvailable();// 0x2760530
	KSGameShopItemComponent* GetShopItemComponent(FName Name);// 0x27603f0
	KSGameShopMod*[] GetMods();// 0x27602b0
	void GetComponentsToResetOnTeamSidesFlipped(out KSGameShopItemComponent*[] OutGameShopItemComponents);// 0x2760200
	void GetComponentsToResetOnRoundReset(out KSGameShopItemComponent*[] OutGameShopItemComponents);// 0x2760150
	KSItem*[] GetAppliedItems();// 0x27600d0
	bool GetAllowUnmasteredWeapons();// 0x27600b0
	void ForceRemoveFromPurchaseHistory(KSGameShopItemComponent* ShopItemComponent, bool IgnoreTransactionLock);// 0x275ffe0
	void FirstRoundInitialization();// 0x2d74e00
	void DestroyShopItemComponent(KSGameShopItemComponent* ShopItemComponent);// 0x275f920
	KSGameShopItemComponent* CreateShopItemComponent(class KSGameShopItemComponent ShopItemComponentClass);// 0x275f890
	void Close();// 0x275f870
	void ClientOpen();// 0x1fa5370
	void ClientClose();// 0x2743930
	bool CanOpen();// 0x275f570
	bool CanClose();// 0x275f540
	void ApplyItems();// 0x275f4e0
	KSGameShopMod* AddMod(class KSGameShopMod ModClass);// 0x275f450

--------------------------------
Class: KSGameShopItemComponent.KSGameShopComponent.ActorComponent.Object
	KSGameShop* GameShopOwner;//[Offset: 0xb0, Size: 1]
	bool bRegisteredToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	FName Name;//[Offset: 0xbc, Size: 1]
	FName Category;//[Offset: 0xc4, Size: 1]
	int ID;//[Offset: 0xcc, Size: 1]
	KSGameShopItem InitialGameShopItem;//[Offset: 0xd0, Size: 1]
	int StartingIndex;//[Offset: 0xe0, Size: 1]
	MulticastInlineDelegateProperty OnGameShopItemChanged;//[Size: 1]
	KSGameShopItem GameShopItem;//[Offset: 0xf8, Size: 1]
	KSItem* AppliedItem;//[Offset: 0x108, Size: 1]
	bool bExcludeFromTransactionHistory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	MulticastInlineDelegateProperty OnItemPurchased;//[Size: 1]
	MulticastInlineDelegateProperty OnItemRefunded;//[Size: 1]
	MulticastInlineDelegateProperty OnItemIndexChanged;//[Size: 1]
	int AuthoratativeIndex;//[Offset: 0x148, Size: 1]
	int AbsoluteIndex;//[Offset: 0x14c, Size: 1]
	MulticastInlineDelegateProperty OnItemEnabledStatusChanged;//[Size: 1]
	bool bItemEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178, Size: 1]
	MulticastInlineDelegateProperty OnItemActiveStatusChanged;//[Size: 1]
	bool bItemActiveByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 1]
	bool bAuthoratativeItemActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 1]
	MulticastInlineDelegateProperty OnToggleRelationshipChanged;//[Size: 1]
	bool bDefaultToggleRelationship;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a8, Size: 1]
	bool bIsInToggleRelationship;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a9, Size: 1]
	void TryToSetToggleRelationshipOn();// 0x2766220
	void TryToSetToggleRelationshipOff();// 0x2766200
	void TryToRefund();// 0x27661e0
	bool TryToPurchase();// 0x27661b0
	void TryToDeactivateItem();// 0x2766170
	bool TryToActivateItem();// 0x2766140
	void SetItemEnabled(bool bEnabled);// 0x27660b0
	void SetGameShopItem(out const KSGameShopItem InGameShopItem);// 0x2766000
	void SetCurrentIndex(int Index);// 0x2765f80
	void SetAbsoluteIndex(int Index);// 0x2765f00
	void Server_Refund();// 0x2765cf0
	void Server_Purchase();// 0x2765ca0
	void Server_DeactivateItem();// 0x2765c50
	void Server_ActivateItem();// 0x2765c00
	void RemoveAppliedItem();// 0x2765be0
	void PreApplyItem();// 0x2765bc0
	void OnRep_GameShopOwner();// 0x27659f0
	void OnRep_GameShopItem();// 0x27659d0
	void OnRep_bItemEnabled();// 0x2765a70
	void OnRep_bIsInToggleRelationship();// 0x2765a50
	void OnRep_bAuthoratativeItemActive();// 0x2765a30
	void OnRep_AuthoratativeIndex();// 0x2765990
	bool IsRegisteredToOwner();// 0x26bbb90
	bool IsPurchased();// 0x2765410
	bool IsLocked();// 0x27653e0
	bool IsItemEnabled();// 0x27653c0
	bool IsItemActive();// 0x2765360
	bool IsInToggleRelationship();// 0x2765390
	bool IsEquipped();// 0x2765360
	bool IsAffordable();// 0x2765330
	int GetRarityValue();// 0x2765300
	int GetNextPrice();// 0x27651a0
	KSItem* GetNextItem();// 0x2765170
	int GetNextIndex();// 0x2765140
	int GetMaxIndex();// 0x2765110
	KSItem* GetItemToApply();// 0x27650e0
	KSItem*[] GetItems();// 0x2764ec0
	int GetItemPrice(KSItem* KSItem);// 0x2764f30
	KSGameShopItem GetGameShopItem();// 0x2764ec0
	int GetFirstPrice();// 0x2764e90
	KSItem* GetFirstItem();// 0x2764e60
	int GetCurrentPrice();// 0x2764e30
	KSItem* GetCurrentItem();// 0x2764e00
	int GetCurrentIndex();// 0x2764dd0
	KSItem* GetAppliedItem();// 0x2764cf0
	int GetAbsoluteIndex();// 0x2764cc0
	void Client_RefundAck(bool bSuccess, int AuthoratativeIndexRep);// 0x2764bf0
	void Client_PurchaseAck(bool bSuccess, int AuthoratativeIndexRep);// 0x2764b20
	void Client_DeactivateItemAck(bool bSuccess, bool bItemActiveAuthorityRep);// 0x2764a50
	void Client_ActivateItemAck(bool bSuccess, bool bItemActiveAuthorityRep);// 0x2764980
	bool CanSetToggleRelationshipOn();// 0x2764890
	bool CanSetToggleRelationshipOff();// 0x2764860
	bool CanRefund();// 0x2764830
	bool CanPurchase();// 0x2764800
	bool CanDeactivateItem();// 0x27647d0
	bool CanActivateItem();// 0x27647a0
	void ApplyItem();// 0x2764780

--------------------------------
Class: KSGameShopComponent.ActorComponent.Object
	bool OwnerHasAuthority();// 0x2765b90
	KSGameShop* GetGameShopOwner();// 0x2764f00

--------------------------------
Class: KSGameShopItem
	KSItem*[] Items;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSGameShopMod.ActorComponent.Object
	bool GetItemPriceOverride(out int OutValue, const KSGameShopItemComponent* GameShopItemComponent, const KSItem* KSItem);// 0x2764fc0

--------------------------------
Class: KSPlayerShopZone.Actor.Object
	bool bActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	MulticastInlineDelegateProperty OnInShopZoneChanged;//[Size: 1]
	void ZoneLeftByPlayer(KSPlayerState* PlayerState);// 0x2816050
	void ZoneEnteredByPlayer(KSPlayerState* PlayerState);// 0x2815fd0
	void OnRep_Active();// 0x2814a40
	void OnPlayerStateDestroyed(Actor* DestroyedPlayerState);// 0x28149c0
	void OnDeactivated();// 0x2d74e00
	void OnActivated();// 0x2d74e00

--------------------------------
Class: KSRoyaleSafeZone.Actor.Object
	BoxComponent* ValidityZone;//[Offset: 0x220, Size: 1]
	KSWeaponAsset* ZoneDamageAsset;//[Offset: 0x228, Size: 1]
	float StartingRadius;//[Offset: 0x230, Size: 1]
	SafeZoneParams OldParams;//[Offset: 0x234, Size: 1]
	SafeZoneParams NewParams;//[Offset: 0x244, Size: 1]
	float ZoneLerpVelocity;//[Offset: 0x254, Size: 1]
	float ZoneLerpAlpha;//[Offset: 0x258, Size: 1]
	Vector CurrentCenter;//[Offset: 0x25c, Size: 1]
	float CurrentRadius;//[Offset: 0x268, Size: 1]
	bool ZoneActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	bool IsShrinking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d, Size: 1]
	KSAkComponent* Sound;//[Offset: 0x278, Size: 1]
	AkAudioEvent* SoundStart;//[Offset: 0x280, Size: 1]
	AkAudioEvent* SoundStop;//[Offset: 0x288, Size: 1]
	bool TryToDamage(Actor* TargetActor, float AttemptedDamage);// 0x2840b10
	void StartShrink();// 0x2840a30
	void SetNewZoneParams(float NewRadius, float TimeToChange, Actor* MustContainActor, float MustContainSafeRadius);// 0x283f920
	void PlayShrinkSound();// 0x1fa35a0
	void OnZoneShrinkStart();// 0x2d74e00
	void OnZoneShrinkEnd();// 0x2d74e00
	void OnZoneActivated();// 0x2d74e00
	void OnRep_ZoneActive();// 0x283f8e0
	void OnRep_Shrinking();// 0x283f8c0
	void OnRep_NewParams();// 0x283f8a0
	void OnCircleUpdate(float NewRadius, Vector NewLocation);// 0x2d74e00
	bool IsZoneShrinking();// 0x283f470
	bool IsZoneActive();// 0x283f450
	bool IsActorInZone(Actor* Actor);// 0x283f390
	void ForceEndShrink();// 0x283f230

--------------------------------
Class: SafeZoneParams
	Vector CenterPosition;//[Offset: 0x0, Size: 1]
	float Radius;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSAkComponent.AkComponent.AkGameObject.SceneComponent.ActorComponent.Object
	enum OcclusionType;//[Offset: 0x404, Size: 1]
	float MinTimeBetweenOcclusionUpdates;//[Offset: 0x408, Size: 1]
	float OcclusionDistanceMultiplier;//[Offset: 0x40c, Size: 1]
	int OcclusionInterpolationMilliseconds;//[Offset: 0x410, Size: 1]
	float CurrentObstruction;//[Offset: 0x414, Size: 1]
	float CurrentOcclusion;//[Offset: 0x418, Size: 1]
	bool RequiresListenerDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x420, Size: 1]
	float MinTimeBetweenDistanceUpdates;//[Offset: 0x424, Size: 1]
	bool RequiresListenerDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 1]
	float MinTimeBetweenDirectionUpdates;//[Offset: 0x430, Size: 1]
	BakedOcclusionLUT* LUT;//[Offset: 0x440, Size: 1]
	AkAudioEvent*[] PendingStopEvents;//[Offset: 0x448, Size: 1]
	<int,AkAudioEvent*> LoopIdToStopEventMap;//[Offset: 0x458, Size: 1]
	void StopLoopingEvent(int StopHandle);// 0x26dbfb0
	void StopAllLoopingEvents();// 0x26dbf70
	void OnOwnerDestroyed(Actor* DestroyedActor);// 0x26dbae0
	int AddLoopingEvent(AkAudioEvent* EventStart, AkAudioEvent* EventStop);// 0x26dae60

--------------------------------
Class: InitialGameObjectiveInfo
	int ID;//[Offset: 0x0, Size: 1]
	Actor* ObjectiveAsActor;//[Offset: 0x8, Size: 1]
	KSObjectiveState ObjectiveState;//[Offset: 0x10, Size: 1]
	KSObjectiveState PreviousObjectiveState;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSObjectiveState
	enum State;//[Offset: 0x0, Size: 1]
	int Team;//[Offset: 0x4, Size: 1]
	KSPlayerState* Holder;//[Offset: 0x8, Size: 1]
	interface class None* PointOfInterest;//[Offset: 0x10, Size: 1]
	Object* POI;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSTimerPriorityConfig
	enum RoundTimerPriority;//[Offset: 0x0, Size: 1]
	enum PhaseTimerPriority;//[Offset: 0x1, Size: 1]
	enum ObjectiveTimerPriority;//[Offset: 0x2, Size: 1]

--------------------------------
Class: KSTimerComponent.ActorComponent.Object
	MulticastInlineDelegateProperty TimerActive;//[Size: 1]
	MulticastInlineDelegateProperty TimerComplete;//[Size: 1]
	PGame_ReplicatedTimer ReplicatedTimer;//[Offset: 0xd0, Size: 1]
	KSTimerState TimerState;//[Offset: 0x108, Size: 1]
	KSTimerState LocalTimerState;//[Offset: 0x110, Size: 1]
	void StopTimer();// 0x2858680
	void StartTimer(float Seconds);// 0x2858600
	void SetTimerRefreshRate(float RefreshRate);// 0x2858580
	void OnRep_TimerState();// 0x2858560
	bool IsTimerComplete();// 0x2858540
	bool IsTimerActive();// 0x2858520
	float GetTimeRemaining();// 0x2858500
	float GetInitialTime();// 0x28584d0

--------------------------------
Class: KSTimerState
	bool bIsTimerActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bIsTimerComplete;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	int Counter;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSLootRarityTimerPair
	enum Rarity;//[Offset: 0x0, Size: 1]
	KSTimerComponent* Timer;//[Offset: 0x8, Size: 1]

--------------------------------
Class: AccoladeEventList.SizedArraySerializer.ReplicatedLog
	AccoladeEventItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: AccoladeEventItem.ReplicatedLogItem
	AccoladeEventEntry AccoladeEventEntry;//[Offset: 0x0, Size: 1]

--------------------------------
Class: AccoladeEventEntry
	KSPlayerState* RelevantPlayer;//[Offset: 0x0, Size: 1]
	AccoladeDisplayInfo AccoladeDisplayInfo;//[Offset: 0x8, Size: 1]
	bool IgnoreRelevantPlayerId;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]

--------------------------------
Class: ReplicatedPreloader.FastArraySerializer
	RepPreloaderItem[] RepArray;//[Offset: 0x158, Size: 1]
	FName[] AlwaysIncludeBundles;//[Offset: 0x168, Size: 1]

--------------------------------
Class: RepPreloaderItem.FastArraySerializerItem
	PrimaryAssetId PrimaryAssetId;//[Offset: 0xc, Size: 1]
	FName BundleName;//[Offset: 0x1c, Size: 1]
	bool bEntryWasReplicated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: PrimaryAssetId
	PrimaryAssetType PrimaryAssetType;//[Offset: 0x0, Size: 1]
	FName PrimaryAssetName;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PrimaryAssetType
	FName Name;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSPersistentMinPlayerDataContainer.FastArraySerializer
	KSPersistentMinPlayerData[] ReplicatedPlayerData;//[Offset: 0x108, Size: 1]
	<KSPersistentPlayerId,KSPersistentPlayerData*> LocalPlayerData;//[Offset: 0x118, Size: 1]
	<KSPersistentPlayerData*> AllLocalPlayerData;//[Offset: 0x168, Size: 1]
	<int> KnownDeadEnginePlayerIds;//[Offset: 0x1b8, Size: 1]

--------------------------------
Class: KSPersistentMinPlayerData.FastArraySerializerItem
	KSPersistentPlayerId ID;//[Offset: 0x10, Size: 1]
	int TeamNum;//[Offset: 0x20, Size: 1]
	FString PlayerName;//[Offset: 0x28, Size: 1]
	bool bAbandoned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]

--------------------------------
Class: KSPersistentDataReplicator.Info.Actor.Object
	AccountJobStatReplicator StatsReplicator;//[Offset: 0x220, Size: 1]
	int RequestJobMasteryExperience(out const KSPersistentPlayerId InPlayerId, KSJobItem* InJob);// 0x27d9360
	int GetJobMastery(out const KSPersistentPlayerId InPlayerId, KSJobItem* InJob);// 0x27d8ad0

--------------------------------
Class: AccountJobStatReplicator.FastArraySerializer
	AccountJobStatReplicatorEntry[] RepItems;//[Offset: 0x118, Size: 1]
	<AccountJobStatKey,int> AccountJobStatsMap;//[Offset: 0x128, Size: 1]
	<InventoryId,AccountJobStatKey> InventoryIdToStatKeyMap;//[Offset: 0x1c8, Size: 1]

--------------------------------
Class: AccountJobStatReplicatorEntry.FastArraySerializerItem
	AccountJobStatKey Key;//[Offset: 0x10, Size: 1]
	int Value;//[Offset: 0x50, Size: 1]

--------------------------------
Class: AccountJobStatKey
	KSPersistentPlayerId PlayerId;//[Offset: 0x0, Size: 1]
	KSJobItem* Job;//[Offset: 0x10, Size: 1]
	enum AccountJobStatType;//[Offset: 0x38, Size: 1]

--------------------------------
Class: InventoryId
	int64 PlayerId;//[Offset: 0x0, Size: 1]
	int64 ItemId;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSHUDAnnouncementComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnEndOfMatch;//[Size: 1]
	KSPlayerController* OwningPlayer;//[Offset: 0xc0, Size: 1]
	MulticastInlineDelegateProperty OnAnnouncement;//[Size: 1]
	MulticastInlineDelegateProperty OnResultAnnouncement;//[Size: 1]
	void OnObjectiveSpawned(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveReset(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveHeld(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveExploded(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveDropped(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveDisarming(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveDisarmed(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveDeactivated(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveContested(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveArming(out const interface classNone GameObjective);// 0x2d74e00
	void OnObjectiveArmed(out const interface classNone GameObjective);// 0x2d74e00
	void OnGameObjectiveStateChanged(interface classNone GameObjective);// 0x277dd70
	KSPlayerController* GetPlayerController();// 0x277d930

--------------------------------
Class: KSWayPointSetCollection.Object

--------------------------------
Class: KSActionRestrictor
	bool bRestrictMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bRestrictFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bRestrictAltFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bRestrictAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bRestrictAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bRestrictRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool bRestrictWeaponSwaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool bRestrictReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]

--------------------------------
Class: KSScoreboardStat
	GameplayTag StatTag;//[Offset: 0x0, Size: 1]
	FText StatHeaderText;//[Offset: 0x8, Size: 1]
	bool DisplayOnScoreboard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool DisplayInMatchSummary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool DisplayInTopStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	int MatchSummaryOrder;//[Offset: 0x24, Size: 1]
	int TopStatsOrder;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSHUDComponent_Objective.KSHUDComponent.ActorComponent.Object
	Texture2D* TopBarObjectiveIcon;//[Offset: 0xb0, Size: 1]
	Texture2D* NameplateObjectiveIcon;//[Offset: 0xd8, Size: 1]
	Texture2D* ScoreIcon;//[Offset: 0x100, Size: 1]
	Texture2D* TicketIcon;//[Offset: 0x128, Size: 1]
	bool ShowNameplateObjectiveForEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150, Size: 1]
	bool ForceAlwaysShowNameplateObjective;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x151, Size: 1]
	bool ShowTopBarObjectiveMarker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152, Size: 1]
	bool ShowBombIconInTopBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153, Size: 1]
	bool ShowEnemyBombIconInTopBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154, Size: 1]
	bool ConnectTopBarMarkerToTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155, Size: 1]
	bool ShowInWorldMarkerTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x156, Size: 1]
	bool ObjectiveMarkerProgressFills;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x157, Size: 1]
	bool ScoreboardDisplayIntraScoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 1]
	bool UseIntraScoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x159, Size: 1]
	bool UseTicketSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15a, Size: 1]
	bool HideTeams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b, Size: 1]
	enum PointsBarType;//[Offset: 0x15c, Size: 1]
	enum TicketDisplaySide;//[Offset: 0x15d, Size: 1]
	enum MarkerTimerType;//[Offset: 0x15e, Size: 1]
	static KSHUDComponent_Objective* GetActiveObjectiveHUDComponent(const Object* WorldContextObject);// 0x277d880

--------------------------------
Class: KSHUDComponent.ActorComponent.Object

--------------------------------
Class: DisplayInfo
	<enum,class UserWidget> DisplayWidgetMap;//[Offset: 0x0, Size: 1]
	bool bUseWidgetPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	FString[] WidgetPoolName;//[Offset: 0x58, Size: 1]
	int UniqueId;//[Offset: 0x68, Size: 1]
	KSPlayerState* CreatingPlayer;//[Offset: 0x70, Size: 1]
	Actor* AssociatedActor;//[Offset: 0x78, Size: 1]
	Object* AssociatedObject;//[Offset: 0x80, Size: 1]
	Vector DefaultLocation;//[Offset: 0x88, Size: 1]
	float Lifespan;//[Offset: 0x94, Size: 1]
	TimerHandle TimerHandle;//[Offset: 0x98, Size: 1]

--------------------------------
Class: ActivityTier
	int Tier;//[Offset: 0x0, Size: 1]
	int StartingCount;//[Offset: 0x4, Size: 1]
	int Count;//[Offset: 0x8, Size: 1]
	TierRewardItemData[] RewardItems;//[Offset: 0x10, Size: 1]

--------------------------------
Class: TierRewardItemData
	PUMG_StoreItem* RewardItem;//[Offset: 0x0, Size: 1]
	int QuantityInTier;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PUMG_StoreItem.Object
	MulticastInlineDelegateProperty OnPriceSetDirty;//[Size: 1]
	PUMG_StoreItemHelper* pItemHelper;//[Offset: 0x48, Size: 1]
	PlatformInventoryItem* InventoryItem;//[Offset: 0x50, Size: 1]
	PUMG_PortalOffer* PortalOffer;//[Offset: 0x78, Size: 1]
	void UIX_ShowPurchaseConfirmation(PUMG_StoreItemPrice* pPrice);// 0xe97630
	bool ShouldDisplayToUser();// 0xe97450
	void PurchaseFromPortal();// 0xe971c0
	bool IsRented(int64 PlayerId);// 0xe97050
	bool IsRecipeFulfilled(int64 PlayerId);// 0xe96fb0
	bool IsOwned(int64 PlayerId);// 0xe96f10
	bool IsOnSale();// 0xe96ee0
	bool IsActive();// 0xe96eb0
	bool HasPortalOffer();// 0xe96e80
	int GetVendorId();// 0xe96c50
	int GetUIHint();// 0xe96c20
	int GetType();// 0xe96bf0
	int GetSubType();// 0xe96bc0
	int GetSortOrder();// 0xe96520
	SoftObjectPath GetSoftItemIconAsPath();// 0xe96490
	Texture2D* GetSoftItemIcon();// 0xe96420
	int GetRecipeEntryType();// 0xe963f0
	int GetQuantityOwned(int64 PlayerId);// 0xe96350
	PUMG_StorePurchaseRequest* GetPurchaseRequest();// 0xe96320
	PUMG_StoreItemPrice*[] GetPrices();// 0xe962a0
	PUMG_StoreItemPrice* GetPrice(PlatformInventoryItem* nCurrencyType);// 0xe96120
	PUMG_PortalOffer* GetPortalOffer();// 0xe96100
	FText GetName();// 0xe95fa0
	int GetLootQuantity();// 0xe95f40
	int GetLootId();// 0xe95f10
	int GetItemId();// 0xe95e20
	PlatformInventoryItem* GetInventoryItem();// 0xe95dc0
	FText GetFormattedNameDisplay(int ExternalQuantity);// 0xe95c90
	FText GetFormattedDescDisplay();// 0xe95bf0
	FText GetDescription();// 0xe95af0
	PUMG_StoreItem*[] GetCouponsForPrice(PUMG_StoreItemPrice* Price);// 0xe95a10
	int GetBundleId();// 0xe95920
	bool GetBundledContents(out PUMG_StoreItem*[] ContainedItems);// 0xe95950
	int GetBestDiscount();// 0xe958f0
	PUMG_StoreItem* GetBestCouponForPrice(PUMG_StoreItemPrice* Price);// 0xe95860
	void ConfirmGotoPortalOffer();// 0xe95670
	bool CanAfford(PUMG_StoreItemPrice* Price, int Quantity);// 0xe954f0
	bool BundleContainsItemId(int nItemId, bool bSearchSubContainers);// 0xe95420

--------------------------------
Class: PUMG_StoreItemHelper.Object
	MulticastInlineDelegateProperty OnPurchaseItem;//[Size: 1]
	MulticastInlineDelegateProperty OnPurchasePortalItem;//[Size: 1]
	MulticastInlineDelegateProperty OnNotEnoughCurrency;//[Size: 1]
	MulticastInlineDelegateProperty OnReceiveVendor;//[Size: 1]
	MulticastInlineDelegateProperty OnReceiveXpTables;//[Size: 1]
	MulticastInlineDelegateProperty OnReceivePricePoints;//[Size: 1]
	MulticastInlineDelegateProperty OnPortalOffersReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnPendingPurchaseReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnPurchaseSubmitted;//[Size: 1]
	int PremiumCurrencyRulesetId;//[Offset: 0xb8, Size: 1]
	FName StoreOSS;//[Offset: 0xbc, Size: 1]
	<FString,PUMG_StoreItem*> SkuToStoreItem;//[Offset: 0xe8, Size: 1]
	<int,PUMG_StoreItem*> StoreItems;//[Offset: 0x138, Size: 1]
	<int64,PUMG_XpTable*> XpTables;//[Offset: 0x1e8, Size: 1]
	bool XpTablesLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool PricePointsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool PortalOffersLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool IsQueryingPortalOffers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28b, Size: 1]
	GameInstance* GameInstance;//[Offset: 0x290, Size: 1]
	void UIX_RedeemCode(FString Code);// 0xe97550
	bool UIX_CompletePurchaseItem(PUMG_StorePurchaseRequest* PurchaseRequest);// 0xe974b0
	int RequestVendorData(int[] VendorIds);// 0xe971e0
	bool HasPendingPurchase();// 0xe96e40
	PUMG_XpTable* GetXpTable(int64 XpTableId);// 0xe96da0
	PUMG_StoreItem*[] GetStoreItemsForVendor(int nVendorId, bool bIncludeInactiveItems, bool bSearchSubContainers);// 0xe96a70
	PUMG_StoreItem*[] GetStoreItemsAndQuantitiesForVendor(int nVendorId, bool bIncludeInactiveItems, bool bSearchSubContainers, out <int,int> QuantityMap, int ExternalQuantity);// 0xe967d0
	PUMG_StoreItem* GetStoreItemForVendorByItemId(int nVendorId, int nItemId, bool bSearchSubVendors);// 0xe966c0
	PUMG_StoreItem* GetStoreItemForVendor(int nVendorId, int nLootItemId);// 0xe965f0
	PUMG_StoreItem* GetStoreItem(int LootId);// 0xe96550
	PUMG_StorePurchaseRequest*[] GetPendingPurchaseData();// 0xe96040
	void ExitInGameStoreUI();// 0xe95840
	void EnterInGameStoreUI();// 0xe95820
	bool DoesVendorContainItem(int nVendorId, PUMG_StoreItem* Item, bool bIncludeInactiveItems, bool bSearchSubContainers);// 0xe956d0
	bool DoesPortalHaveOffers();// 0xe95690
	bool AreXpTablesLoaded();// 0xe95400
	bool ArePricePointsLoaded();// 0xe953e0
	bool ArePortalOffersLoaded();// 0xe953c0

--------------------------------
Class: PUMG_XpTable.Object
	int64 GetXpAtLevel(int XpLevel);// 0xe96d10
	int64 GetXpAtIndex(int Index);// 0xe96c80
	int GetMinXpLevel();// 0xe95f70
	int GetLevelCount();// 0xe95ee0
	int GetLevelAtXp(int64 XpPoints);// 0xe95e50
	int64 GetId();// 0xe95d90

--------------------------------
Class: PUMG_StorePurchaseRequest.Object
	int LootTableItemId;//[Offset: 0x28, Size: 1]
	int VendorId;//[Offset: 0x2c, Size: 1]
	int PriceInUI;//[Offset: 0x30, Size: 1]
	PlatformInventoryItem* CurrencyType;//[Offset: 0x38, Size: 1]
	int Quantity;//[Offset: 0x40, Size: 1]
	int LocationId;//[Offset: 0x44, Size: 1]
	FString ExternalTransactionId;//[Offset: 0x48, Size: 1]
	int CouponId;//[Offset: 0x58, Size: 1]
	int GiftPlayerId;//[Offset: 0x5c, Size: 1]
	int GiftMsgIndex;//[Offset: 0x60, Size: 1]
	bool AnonymousGift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 1]
	bool SkipCurrencyAmountValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65, Size: 1]
	PUMG_StoreItemHelper* pItemHelper;//[Offset: 0x68, Size: 1]
	bool SubmitPurchaseRequest();// 0xe97480

--------------------------------
Class: PUMG_StoreItemPrice.Object
	int PreSalePrice;//[Offset: 0x28, Size: 1]
	int Price;//[Offset: 0x2c, Size: 1]
	PlatformInventoryItem* CurrencyType;//[Offset: 0x30, Size: 1]
	PUMG_StoreItemHelper* pItemHelper;//[Offset: 0x58, Size: 1]
	int GetPriceWithCoupon(PUMG_StoreItem* Coupon);// 0xe96210
	int GetDiscountPercentage();// 0xe95bc0
	bool CanAfford(int Quantity, PUMG_StoreItem* Coupon);// 0xe955b0

--------------------------------
Class: PUMG_PortalOffer.Object
	FString SKU;//[Offset: 0x28, Size: 1]
	float PreSaleCost;//[Offset: 0x38, Size: 1]
	FText DisplayPreSaleCost;//[Offset: 0x40, Size: 1]
	float cost;//[Offset: 0x58, Size: 1]
	FText DisplayCost;//[Offset: 0x60, Size: 1]
	FText CurrencyCode;//[Offset: 0x78, Size: 1]
	FText Name;//[Offset: 0x90, Size: 1]
	FText Desc;//[Offset: 0xa8, Size: 1]
	FText ShortDesc;//[Offset: 0xc0, Size: 1]
	FText TaxMessage;//[Offset: 0xd8, Size: 1]
	int GetDiscountPercentage();// 0xe95b90

--------------------------------
Class: KSActivityManagerBase.Object
	KSGameInstance* GameInstance;//[Offset: 0x40, Size: 1]
	KSGameMode* GameMode;//[Offset: 0x48, Size: 1]
	<int64,KSPlayerActivityInstanceContainer*> ActivityInstancesPerPlayer;//[Offset: 0xf0, Size: 1]
	int VendorsLoadGroupId;//[Offset: 0x190, Size: 1]
	KSActivity*[] Activities;//[Offset: 0x198, Size: 1]
	Controller*[] RegisteredControllers;//[Offset: 0x1a8, Size: 1]
	enum SetupPhase;//[Offset: 0x208, Size: 1]
	void RequestActivitiesLoad();// 0x26bd980
	bool QueryActivityInstancesByTime(out const KSActivityInstance*[] ActivityInstances, out const Timespan TimeWindow, out KSActivityInstance*[] Results, enum QueryType);// 0x26bd7b0
	bool QueryActivityInstances(out const KSActivityInstance*[] ActivityInstances, enum QueryType, out KSActivityInstance*[] Results);// 0x26bd650
	void OnStoreVendorsLoaded(int GroupId, out const int[] VendorIds);// 0x26bd3d0
	void OnSetupPhaseStarted(enum Phase);// 0x26bd350
	void OnSetupPhaseFinished(enum Phase);// 0x26bd2d0
	void OnServerPlayerPostLogin(GameModeBase* InGameMode, PlayerController* NewPlayer);// 0x26bd210
	void OnServerPlayerLogout(GameModeBase* InGameMode, Controller* Controller);// 0x26bd150
	void OnGameStateBeginPlay(KSGameState* GameState);// 0x26bd0d0
	void OnGameModePhaseChanged(MatchPhase PreviousPhase, MatchPhase NewPhase);// 0x26bcfd0
	void OnGameModeInitialized(GameModeBase* InGameMode);// 0x26bcf50
	void OnClientLoggedOff(uint32 Code);// 0x26bce50
	void OnClientLoggedIn();// 0x26bce30
	void OnBotSpawned(KSAIController* NewBot);// 0x26bcdb0
	void OnAssetLoadComplete();// 0x26bcd90
	void OnAllActivitiesLoaded();// 0x26bcd70
	bool IsSetupFinished();// 0x26bccc0
	void InitializeActivityInstancesForController(Controller* InController);// 0x26bcbe0
	void HandleJobChanged(KSPlayerState* PlayerState);// 0x26bcaa0
	void GoToNextSetupPhase();// 0x26bca80
	bool GetActivityInstancesByTags(GameplayTag[] ActivityTags, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26bb6a0
	bool GetActivityInstancesByTagAndString(out const GameplayTag ActivityTag, FString Value, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26bb4d0
	bool GetActivityInstancesByTagAndInt(out const GameplayTag ActivityTag, int Value, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26bb320
	bool GetActivityInstancesByTag(out const GameplayTag ActivityTag, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26bb180
	KSActivityInstance* GetActivityInstanceByTags(GameplayTag[] ActivityTags, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26bb010
	KSActivityInstance* GetActivityInstanceByTagAndString(out const GameplayTag ActivityTag, FString Value, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26bae90
	KSActivityInstance* GetActivityInstanceByTagAndInt(out const GameplayTag ActivityTag, int Value, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26bad20
	KSActivityInstance* GetActivityInstanceByTag(out const GameplayTag ActivityTag, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26bac10
	KSActivityInstance* GetActivityInstanceByItemId(const int64 ItemId, int64 PlayerId);// 0x26bab50
	KSActivity* GetActivityByTags(GameplayTag[] ActivityTags);// 0x26baa30
	KSActivity* GetActivityByTagAndString(out const GameplayTag ActivityTag, FString Value);// 0x26ba930
	KSActivity* GetActivityByTagAndInt(out const GameplayTag ActivityTag, int Value);// 0x26ba850
	KSActivity* GetActivityByTag(out const GameplayTag ActivityTag);// 0x26ba7b0
	bool GetActivitiesByTags(GameplayTag[] ActivityTags, out KSActivity*[] OutActivities);// 0x26ba650
	bool GetActivitiesByTagAndString(out const GameplayTag ActivityTag, FString Value, out KSActivity*[] OutActivities);// 0x26ba4f0
	bool GetActivitiesByTagAndInt(out const GameplayTag ActivityTag, int Value, out KSActivity*[] OutActivities);// 0x26ba3b0
	bool GetActivitiesByTag(out const GameplayTag ActivityTag, out KSActivity*[] OutActivities);// 0x26ba2b0
	bool GetActiveActivityInstancesByTag(out const GameplayTag ActivityTag, out KSActivityInstance*[] OutActivityInstances, const Controller* OwningController, const KSPlayerState* PlayerState);// 0x26ba110
	bool DoesRequireSetupPhase(enum Phase);// 0x26ba050
	void CompleteActivityByTag(GameplayTag ActivityTag);// 0x26b9f90
	void AttemptInitialActivityCreation();// 0x26b9e10

--------------------------------
Class: KSGameInstance.PGame_GameInstance.GameInstance.Object
	MulticastInlineDelegateProperty LoadingScreenBeganDel;//[Size: 1]
	MulticastInlineDelegateProperty LoadingScreenEndedDel;//[Size: 1]
	GameplayTagQuery AlwaysNeededPrimaryAssetQuery;//[Offset: 0x278, Size: 1]
	FName[] AlwaysNeededPrimaryAssetBundles;//[Offset: 0x2c0, Size: 1]
	DataTable* LoadingScreenTipsTable;//[Offset: 0x328, Size: 1]
	LoadingScreenImageManager* LoadingScreenImageManager;//[Offset: 0x330, Size: 1]
	bool bDisableScreenSaver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x339, Size: 1]
	KSActivityManagerBase*[] ActivityManagers;//[Offset: 0x350, Size: 1]
	KSAcquisitionManager* AcquisitionManager;//[Offset: 0x360, Size: 1]
	PUMG_StoreItemHelper* StoreItemHelper;//[Offset: 0x368, Size: 1]
	KSJsonDataFactory* JsonDataFactory;//[Offset: 0x370, Size: 1]
	KSPushNotificationManager* PushNotificationManager;//[Offset: 0x378, Size: 1]
	KSLoadoutDataFactory* LoadoutDataFactory;//[Offset: 0x380, Size: 1]
	class KSArmoryLoadoutData* DefaultArmoryLoadoutClass;//[Offset: 0x388, Size: 1]
	KSUISessionManager* UISessionManager;//[Offset: 0x390, Size: 1]
	KSSupplyDropManager* SupplyDropManager;//[Offset: 0x398, Size: 1]
	KSActivityInstanceManager* ActivityInstanceManager;//[Offset: 0x3a0, Size: 1]
	KSPlayerInventoryHelper* PlayerInventoryHelper;//[Offset: 0x3a8, Size: 1]
	KSPlayerStatsManager* PlayerStatsManager;//[Offset: 0x3b0, Size: 1]
	KSPlayerChallengesManager* PlayerChallengesManager;//[Offset: 0x3b8, Size: 1]
	KSNPETrackManager* NPETrackManager;//[Offset: 0x3c0, Size: 1]
	KSMercMasteryManager* MercMasteryManager;//[Offset: 0x3c8, Size: 1]
	KSMercManager* MercManager;//[Offset: 0x3d0, Size: 1]
	KSWeaponManager* WeaponManager;//[Offset: 0x3d8, Size: 1]
	KSAwardsManager* AwardsManager;//[Offset: 0x3e0, Size: 1]
	KSGeneralProgressionManager* GeneralProgressionManager;//[Offset: 0x3e8, Size: 1]
	KSRankedManager* RankedManager;//[Offset: 0x3f0, Size: 1]
	KSBattlePassProgressionManager* BattlePassProgressionManager;//[Offset: 0x3f8, Size: 1]
	KSEventChallengesManager* EventChallengesManager;//[Offset: 0x400, Size: 1]
	KSSeasonalEventChallengesManager* SeasonalEventChallengesManager;//[Offset: 0x408, Size: 1]
	KSActivitySequenceManager* ActivitySequenceManager;//[Offset: 0x410, Size: 1]
	KSAudioManager* AudioManager;//[Offset: 0x418, Size: 1]
	KSPunishmentManager* PunishmentManager;//[Offset: 0x420, Size: 1]
	KSBoosterManager* BoosterManager;//[Offset: 0x428, Size: 1]
	KSWeaponMasteryManager* WeaponMasteryManager;//[Offset: 0x430, Size: 1]
	PUMG_VoiceChatManager* VoiceChatManager;//[Offset: 0x438, Size: 1]
	KSInstancePlayerStatManager* InstancePlayerStatManager;//[Offset: 0x440, Size: 1]
	KSMobileActivityManager* MobileActivityManager;//[Offset: 0x448, Size: 1]
	KSMarketingEventHelper* MarketingHelper;//[Offset: 0x450, Size: 1]
	KSCallToActionManager* CallToActionManager;//[Offset: 0x458, Size: 1]
	KSWeaponAsset* WingsuitWeaponAsset;//[Offset: 0x4e0, Size: 1]
	bool ShouldUseZombiePrevention;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	int ZombiePreventionSeconds;//[Offset: 0x4ec, Size: 1]
	void UpdateRecordedAnimStats(out <FName,KSAnimStats> NewStats);// 0x2758900
	KSWeaponMasteryManager* GetWeaponMasteryManager();// 0x1218470
	KSWeaponManager* GetWeaponManager();// 0x2758160
	KSSupplyDropManager* GetSupplyDropManager();// 0x2758140
	PUMG_StoreItemHelper* GetStoreItemHelper();// 0x2758120
	KSRankedManager* GetRankedManager();// 0x2758100
	KSPunishmentManager* GetPunishmentManager();// 0x27580e0
	KSPlayerStatsManager* GetPlayerStatsManager();// 0x2758090
	KSPlayerInventoryHelper* GetPlayerInventoryHelper();// 0x2758070
	KSPlayerChallengesManager* GetPlayerChallengesManager();// 0x2758050
	KSNPETrackManager* GetNPETrackManager();// 0x2757ef0
	KSMobileActivityManager* GetMobileActivityManager();// 0x2757ed0
	KSMercMasteryManager* GetMercMasteryManager();// 0x2757eb0
	KSMercManager* GetMercManager();// 0x2757e90
	KSMarketingEventHelper* GetMarketingHelper();// 0x2757e70
	KSLoadoutDataFactory* GetLoadoutDataFactory();// 0x2757e50
	bool GetLoadingScreenImage(out Texture2D* LoadingScreenImageSoftRef, FString InMapName, out FText MapDisplayName, out FText MapRegion, out FText MapDescription);// 0x2757b90
	KSInstancePlayerStatManager* GetInstancePlayerStatManager();// 0x2757a80
	KSGeneralProgressionManager* GetGeneralProgressionManager();// 0x2757a20
	KSEventChallengesManager* GetEventChallengesManager();// 0x2757a00
	class KSArmoryLoadoutData GetDefaultArmoryLoadoutClass();// 0x27579e0
	KSCallToActionManager* GetCallToActionManager();// 0x2757960
	KSBoosterManager* GetBoosterManager();// 0x2757940
	KSBattlePassProgressionManager* GetBattlePassProgressionManager();// 0x2757920
	KSAwardsManager* GetAwardsManager();// 0x2757900
	KSAudioManager* GetAudioManager();// 0x27578e0
	KSActivitySequenceManager* GetActivitySequenceManager();// 0x27578c0
	KSActivityInstance* GetActivityInstanceForActivity(KSActivity* Activity, Controller* OwningController);// 0x2757800
	void ExportAnimAudit(const FString Filename);// 0x2757700
	void EndLoading();// 0x2d74e00
	void ClaimTutorialAward();// 0x27576e0
	void BeginLoading(FString mapName);// 0x2d74e00

--------------------------------
Class: PGame_GameInstance.GameInstance.Object
	bool bLogoffOnAppSuspend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	bool bLogoffOnAppResume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9, Size: 1]
	FString LastSonyMatchId;//[Offset: 0x1f0, Size: 1]
	bool bStartHotfixProcessingOnUpdateAppSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 1]
	void ProvideSonyMatchFeedback(bool bReviewTeamOnly);// 0xd94af0
	bool HasValidSonyMatch();// 0xd94210
	void EndLoadingScreen(World* World);// 0xd93ab0
	void BeginLoadingScreen(FString mapName);// 0xd93530

--------------------------------
Class: LoadingScreenImageManager.DataAsset.Object
	LoadingScreenImageInfo FailSafeLoadingScreen;//[Offset: 0x30, Size: 1]

--------------------------------
Class: LoadingScreenImageInfo
	Texture2D* LoadingScreenImage;//[Offset: 0x0, Size: 1]
	FText MapDisplayName;//[Offset: 0x28, Size: 1]
	FText MapRegion;//[Offset: 0x40, Size: 1]
	FText MapDescription;//[Offset: 0x58, Size: 1]

--------------------------------
Class: KSAcquisitionManager.PUMG_AcquisitionManager.Object
	MulticastInlineDelegateProperty OnAcquisitionReady;//[Size: 1]
	KSAcquisition*[] QueuedAcquisitions;//[Offset: 0x78, Size: 1]
	KSAcquisition* PendingAcquisition;//[Offset: 0x88, Size: 1]
	KSEquipOnAcquisitionData*[] PendingEquipables;//[Offset: 0x90, Size: 1]
	void SetupEventGrandPrizeTestAcquisition();// 0x26b6850
	void SetupBattlePassTestAcquisition(int StartTier, int EndTier);// 0x26b6790
	KSAcquisition* GetNextAcquistion();// 0x26b51a0
	void CreateAcquisitionForItem(PUMG_StoreItem* StoreItem);// 0x26b4820

--------------------------------
Class: PUMG_AcquisitionManager.Object
	MulticastInlineDelegateProperty OnAcquisitionSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnAcquisitionFailed;//[Size: 1]
	PUMG_StoreItemHelper* StoreItemHelper;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSAcquisition.Object
	enum AcquisitionType;//[Offset: 0x28, Size: 1]
	AcquisitionItemData*[] AcquisitionItems;//[Offset: 0x30, Size: 1]
	KSJobItem* DisplayedJob;//[Offset: 0x40, Size: 1]
	void SortAcquisitionItemsBySortOrder();// 0x26b6890
	void SortAcquisitionItemsByBattlePassDisplayOrder();// 0x26b6870
	bool IsPurchase();// 0x26b5d30
	bool IsBundleAcquisition();// 0x26b5a20

--------------------------------
Class: AcquisitionItemData.Object
	PUMG_StoreItem* StoreItem;//[Offset: 0x28, Size: 1]
	int Quantity;//[Offset: 0x30, Size: 1]
	KSWeaponAsset* AssociatedWeapon;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSEquipOnAcquisitionData.Object
	int LoadoutTypeId;//[Offset: 0x28, Size: 1]
	int LoadoutSlotTypeId;//[Offset: 0x2c, Size: 1]
	int LoadoutSlotPosition;//[Offset: 0x30, Size: 1]
	KSJobItem* JobToEquipTo;//[Offset: 0x38, Size: 1]
	KSWeaponAsset* WeaponToEquipTo;//[Offset: 0x40, Size: 1]
	KSItem* ItemToEquip;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSJsonDataFactory.PUMG_JsonDataFactory.PUMG_DataFactory.Object
	<FString,Texture2DDynamic*> mapFilePathToTexture;//[Offset: 0x48, Size: 1]
	<FString,Texture2DDynamic*> FilePathToWeakTexture;//[Offset: 0x98, Size: 1]
	void OnInventoryItemUpdated(out const InventoryId InventoryId);// 0x279d350

--------------------------------
Class: PUMG_JsonDataFactory.PUMG_DataFactory.Object
	void HandleJsonReady(PGame_LandingPanelJSONHandler* pHandler);// 0xe8c7b0
	void HandleImagesReady(PGame_LandingPanelJSONHandler* pHandler);// 0xe8c720

--------------------------------
Class: PUMG_DataFactory.Object
	PUMG_HUD* MyHud;//[Offset: 0x28, Size: 1]
	bool IsLoggedIn();// 0xe82d30

--------------------------------
Class: PGame_LandingPanelJSONHandler.Object
	MulticastInlineDelegateProperty OnHandlerObjectReady;//[Size: 1]
	MulticastInlineDelegateProperty OnJsonDownloaded;//[Size: 1]
	MulticastInlineDelegateProperty OnJsonReady;//[Size: 1]
	MulticastInlineDelegateProperty OnImagesDownloaded;//[Size: 1]
	<FString,Texture2DDynamic*> mapFilePathToTexture;//[Offset: 0x120, Size: 1]
	void RequestNewJson();// 0xd94c00

--------------------------------
Class: Texture2DDynamic.Texture.StreamableRenderAsset.Object
	byte Format;//[Offset: 0xc0, Size: 1]

--------------------------------
Class: PUMG_HUD.HUD.Actor.Object
	MulticastInlineDelegateProperty OnInputStateChanged;//[Size: 1]
	<int64,PlayerDataUpdated(MulticastInlineDelegateProperty)> PlayerDataUpdated;//[Offset: 0x320, Size: 1]
	PUMG_InputManager* InputManager;//[Offset: 0x370, Size: 1]
	PUMG_ViewManager* ViewManager;//[Offset: 0x378, Size: 1]
	class PUMG_InputManager* InputManagerClass;//[Offset: 0x380, Size: 1]
	PUMG_UISoundTheme* SoundTheme;//[Offset: 0x388, Size: 1]
	void TestHirezLogin(FString User, FString password);// 0xe87ff0
	void TestAutoLogin(int ControllerId);// 0xe87f70
	void ShowSystemTrayNotification(FString popupType);// 0xe87eb0
	void SetUseNewUIFeatures(bool UseNewFeatures);// 0x2d74e00
	void SetUIFocus();// 0xe87e90
	void SetNavigationEnabled(bool Enabled);// 0xe87c90
	void OnQuit();// 0xe87320
	bool OnNavigateBack();// 0x2d74e00
	void OnConfirmQuit();// 0xe87300
	PUMG_PlayerInfo* NewPlayerInfo();// 0xe872d0
	bool IsLobbyHUD();// 0xe872a0
	bool IsCrossplayEnabled();// 0xe87270
	void InputStateChangePassthrough(byte InputState);// 0xe871f0
	void gmmf(bool bAutolaunch, int TaskForces);// 0xe885c0
	PUMG_ViewManager* GetViewManager();// 0xe87110
	void GetPortalTokenDetails();// 0xe870f0
	PUMG_PopupManager* GetPopupManager();// 0x2d74e00
	PlayerController* GetPlayerControllerOwner();// 0xe870c0
	PUMG_PlayerInfo* GetOrCreatePlayerInfo(int64 PlayerId);// 0xe86f40
	PUMG_InputManager* GetInputManager();// 0xe86f20
	byte GetCurrentInputState();// 0xe86980
	void DisplayGenericPopup(FString sTitle, FString sDesc);// 0xe86830
	void DisplayGenericError(FString sDesc);// 0xe86790

--------------------------------
Class: PUMG_InputManager.Object
	<PUMG_Widget*,PUMG_InputFocusDetails> InputFocusData;//[Offset: 0x28, Size: 1]
	InputComponent* InputComponent;//[Offset: 0xa0, Size: 1]
	FName GlobalRouteName;//[Offset: 0xe4, Size: 1]
	InputComponent* ContextActionInputComponent;//[Offset: 0xf0, Size: 1]
	SoftObjectPath ContextActionDataTableClassName;//[Offset: 0xf8, Size: 1]
	DataTable* ContextActionDT;//[Offset: 0x110, Size: 1]
	<FName,RouteContextInfo> RouteContextInfoMap;//[Offset: 0x118, Size: 1]
	FName ActiveRoute;//[Offset: 0x168, Size: 1]
	FName[] OverrideRouteStack;//[Offset: 0x170, Size: 1]
	void SetInputActions(ContextActionData*[] ActionData);// 0xe87bb0
	void SetContextHoldReleaseAction(FName Route, FName ContextName, out const delegate UpdateCallback, out const delegate EventCallback);// 0xe879a0
	void SetContextCycleAction(FName Route, FName ContextName, out const delegate EventCallback);// 0xe87870
	void SetContextAction(FName Route, FName ContextName, out const delegate EventCallback);// 0xe87740
	void SetActiveRoute(FName Route);// 0xe876c0
	bool RemoveOverrideRoute(FName Route);// 0xe87530
	void PushOverrideRoute(FName Route);// 0xe87380
	FName PopOverrideRoute();// 0xe87340
	void HandleModeChange(byte Mode);// 0xe87170
	bool GetFocusedWidget(PUMG_Widget* ParentWidget, out Widget* FocusWidget);// 0xe86a10
	FName GetCurrentRoute();// 0xe869b0
	FName GetCurrentContextRoute();// 0xe86940
	void ClearOverrideRouteStack();// 0xe86750
	void ClearNavInputThrottled();// 0xe86730
	void ClearNavInputDebouncedThrottled();// 0xe86710
	void ClearContextAction(FName Route, FName ContextName);// 0xe86650
	void ClearAllContextActions(FName Route);// 0xe865b0
	void AddContextActions(FName Route, FName[] ContextNames);// 0xe863a0
	void AddContextAction(FName Route, FName ContextName, FText FormatAdditive);// 0xe86240

--------------------------------
Class: ContextActionData.Object
	FName RowName;//[Offset: 0x30, Size: 1]
	FText FormatAdditive;//[Offset: 0x38, Size: 1]
	ContextAction RowData;//[Offset: 0x50, Size: 1]
	delegate OnContextAction;//[Offset: 0xa0, Size: 1]
	delegate OnCycleAction;//[Offset: 0xb0, Size: 1]
	delegate OnHoldActionUpdate;//[Offset: 0xc0, Size: 1]
	delegate OnHoldReleaseAction;//[Offset: 0xd0, Size: 1]
	void TriggerHoldReleaseContextAction(enum Status);// 0xe881d0
	void TriggerCycleContextActionPrev();// 0xe881b0
	void TriggerCycleContextActionNext();// 0xe88190
	void TriggerCycleContextAction(bool bNext);// 0xe88100
	void TriggerContextAction();// 0xe880e0
	void StartTriggerHoldAction();// 0xe87f50
	void ClearTriggerHoldAction();// 0xe86770

--------------------------------
Class: ContextAction.TableRowBase
	FText Text;//[Offset: 0x8, Size: 1]
	FName ActionName;//[Offset: 0x20, Size: 1]
	byte[] ValidInputTypes;//[Offset: 0x28, Size: 1]
	int SortOrder;//[Offset: 0x38, Size: 1]
	enum Anchor;//[Offset: 0x3c, Size: 1]
	enum ActionType;//[Offset: 0x3d, Size: 1]
	class PUMG_Widget* PromptWidget;//[Offset: 0x40, Size: 1]
	float HoldDuration;//[Offset: 0x48, Size: 1]
	bool IsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]

--------------------------------
Class: PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnGamepadHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnMouseEntered;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateBack;//[Size: 1]
	MulticastInlineDelegateProperty OnTextureLoadComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateUpFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateDownFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateLeftFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnNavigateRightFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusGroupNavigateUpFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusGroupNavigateDownFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusGroupNavigateLeftFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnFocusGroupNavigateRightFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnHideSequenceFinished;//[Size: 1]
	MulticastInlineDelegateProperty OnShowSequenceFinished;//[Size: 1]
	PUMG_HUD* MyHud;//[Offset: 0x318, Size: 1]
	FName MyRouteName;//[Offset: 0x320, Size: 1]
	bool CloseOnLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328, Size: 1]
	bool IsComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329, Size: 1]
	bool StartsHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32a, Size: 1]
	bool InputComponentUsesWidgetPriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32b, Size: 1]
	bool UsesBlocker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	bool BlockerClickToClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d, Size: 1]
	bool EnableGameStateSetNotify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32e, Size: 1]
	Texture2D* LoadedTexture;//[Offset: 0x338, Size: 1]
	PUMG_MobileLayoutSequencePlayer* MobileLayoutSequencePlayer;//[Offset: 0x4b0, Size: 1]
	WidgetAnimation* MobileLayoutAnim;//[Offset: 0x4b8, Size: 1]
	bool bMobileLayoutActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c0, Size: 1]
	void UpdateRegistrationToInputManager(Widget* Widget, int FocusGroup, Widget* Up, Widget* Down, Widget* Left, Widget* Right);// 0xe9dee0
	void UnregisterWidgetFromInputManager(Widget* Widget);// 0xe9de60
	void UnregisterFocusGroup(int FocusGroup);// 0xe9dde0
	void UninitializeWidget();// 0xe9ddc0
	void ToggleMobileLayout(byte InputState);// 0xe9dd40
	bool SwapViewRoute(FName RouteName, FName SwapTargetRoute, bool ForceTransition);// 0xe9dc40
	void StartShowSequence(FName FromRoute, FName ToRoute);// 0xe9da70
	void StartHideSequence(FName FromRoute, FName ToRoute);// 0xe9d9a0
	void ShowWidget();// 0xe9d980
	bool ShouldUseMobileLayout();// 0xe9d950
	void SetRouteName(FName RouteName);// 0xe9d7b0
	void SetPendingRouteData(FName RouteName, Object* Data);// 0xe9d6f0
	void SetFocusToWidgetOfGroup(int FocusGroup, PUMG_Widget* Widget);// 0xe9d4f0
	Widget* SetFocusToThis();// 0xe9d4c0
	void SetFocusToGroup(int FocusGroup, bool KeepLastFocus);// 0xe9d3f0
	void SetDefaultFocusForGroup(Widget* Widget, int FocusGroup);// 0xe9d330
	void SetContextHoldReleaseAction(FName ContextName, out const delegate UpdateCallback, out const delegate EventCallback);// 0xe9d1d0
	void SetContextCycleAction(FName ContextName, out const delegate EventCallback);// 0xe9d0e0
	void SetContextAction(FName ContextName, out const delegate EventCallback);// 0xe9cff0
	bool RemoveViewRoute(FName RouteName, bool ForceTransition);// 0xe9ce20
	bool RemoveTopViewRoute(bool ForceTransition);// 0xe9cd90
	void RegisterWidgetToInputManager(Widget* Widget, int FocusGroup, Widget* Up, Widget* Down, Widget* Left, Widget* Right);// 0xe9cb10
	void OnShown();// 0xe9c950
	void OnHide();// 0xe9c890
	void OnGamepadUnhover();// 0xe9c870
	void OnGamepadHover();// 0xe9c850
	void OnExitMobileLayout();// 0x2d74e00
	void OnEnterMobileLayout();// 0x2d74e00
	void NavigateUpFailure();// 0x2d74e00
	void NavigateRightFailure();// 0x2d74e00
	void NavigateLeftFailure();// 0x2d74e00
	void NavigateDownFailure();// 0x2d74e00
	bool NavigateConfirmPressed();// 0xe9c820
	void NavigateConfirmCancelled();// 0xe9c800
	bool NavigateConfirm();// 0xe9c7d0
	bool NavigateBackPressed();// 0xe9c7a0
	void NavigateBackCancelled();// 0xe9c780
	bool NavigateBack();// 0xe9c750
	void NativeFocusGroupNavigateUpFailure(int FocusGroup, PUMG_Widget* Widget);// 0xe9c680
	void NativeFocusGroupNavigateRightFailure(int FocusGroup, PUMG_Widget* Widget);// 0xe9c5b0
	void NativeFocusGroupNavigateLeftFailure(int FocusGroup, PUMG_Widget* Widget);// 0xe9c4e0
	void NativeFocusGroupNavigateDownFailure(int FocusGroup, PUMG_Widget* Widget);// 0xe9c410
	bool IsTopViewRoute();// 0xe9c3e0
	bool IsFocusEnabled();// 0xe9c290
	void InitializeWidgetNavigation();// 0xe9c210
	void InitializeWidgetButtonListeners();// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0xe9c180
	void InheritFocusGroupFromWidget(int TargetFocusGroupNum, PUMG_Widget* SourceWidget, int SourceFocusGroupNum);// 0xe9bfe0
	void HideWidget();// 0xe9bfc0
	PUMG_ViewManager* GetViewManager();// 0xe9bc90
	bool GetUsesBlocker();// 0xe9bc70
	bool GetPendingRouteData(FName RouteName, out Object* Data);// 0xe9bb00
	bool GetIsComponent();// 0xe9ba10
	Geometry GetGeometryFromLastTick();// 0xe9b9a0
	bool GetCurrentFocusGroup(out int OutFocusGroup);// 0xe9b750
	Widget* GetCurrentFocusForGroup(int FocusGroup);// 0xe9b6c0
	bool GetBlockerClickToClose();// 0xe9b6a0
	void GameStateSet(GameStateBase* GameState);// 0xe9b3b0
	void GamepadUnhover();// 0x2d74e00
	void GamepadHover();// 0x2d74e00
	EventReply GamepadButtonUp(Key Button);// 0xe9b570
	EventReply GamepadButtonDown(Key Button);// 0xe9b440
	void FocusGroupNavigateUpFailure(int FocusGroup);// 0x2d74e00
	void FocusGroupNavigateRightFailure(int FocusGroup);// 0x2d74e00
	void FocusGroupNavigateLeftFailure(int FocusGroup);// 0x2d74e00
	void FocusGroupNavigateDownFailure(int FocusGroup);// 0x2d74e00
	bool ExplicitNavigateUp();// 0xe9b380
	bool ExplicitNavigateRight();// 0xe9b350
	bool ExplicitNavigateLeft();// 0xe9b320
	bool ExplicitNavigateDown();// 0xe9b2f0
	void DisplayGenericPopup(FString sTitle, FString sDesc);// 0xe9b200
	void DisplayGenericError(FString sDesc);// 0xe9b160
	void ClearNavigationInputThrottle();// 0xe9b0b0
	void ClearContextAction(FName ContextName);// 0xe9b030
	void ClearAllContextActions();// 0xe9b010
	bool CanCloseOnLogout();// 0xe9afe0
	void CallOnShowSequenceFinished();// 0xe9afc0
	void CallOnHideSequenceFinished();// 0xe9afa0
	void BindToInputManager(int DefaultFocusGroup);// 0xe9af20
	void AsyncLoadTexture2D(Texture2D* Texture2DRef);// 0xe9ae40
	bool AddViewRoute(FName RouteName, bool ClearRouteStack, bool ForceTransition, Object* Data);// 0xe9acd0
	void AddContextActions(FName[] ContextNames);// 0xe9abf0
	void AddContextAction(FName ContextName, FText FormatAdditive);// 0xe9aac0

--------------------------------
Class: PUMG_ViewManager.Object
	PUMG_ViewLayer*[] ViewLayers;//[Offset: 0x28, Size: 1]
	<FName,PUMG_Widget*> StickyWidgetMap;//[Offset: 0x38, Size: 1]
	MulticastInlineDelegateProperty OnViewStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnViewStateChangeStarted;//[Size: 1]
	PUMG_HUD* HudRef;//[Offset: 0xa8, Size: 1]
	CanvasPanel*[] CanvasPanels;//[Offset: 0xb0, Size: 1]
	StickyWidgetData[] StickyWidgets;//[Offset: 0xc0, Size: 1]
	DataTable* Routes;//[Offset: 0xd0, Size: 1]
	ViewRouteRedirectData[] AlwaysCheckRouteData;//[Offset: 0xd8, Size: 1]
	bool SwapRoute(FName RouteName, FName SwapTargetRoute, bool ForceTransition);// 0xe9db40
	void SetPendingRouteData(FName RouteName, Object* Data);// 0xe9d630
	bool ReplaceRoute(FName RouteName, bool ForceTransition, Object* Data);// 0xe9cee0
	bool RemoveRoute(FName RouteName, bool ForceTransition);// 0xe9ccd0
	bool PushRoute(FName RouteName, bool ForceTransition, Object* Data);// 0xe9ca00
	bool PopRoute(bool ForceTransition);// 0xe9c970
	bool IsLayerIdle(enum LayerType);// 0xe9c2c0
	bool IsEveryLayerIdle();// 0xe9c260
	bool IsBlockingAcquisitions();// 0xe9c230
	void InitializeRoutes(DataTable* RouteTable);// 0xe9c100
	void Initialize();// 0xe9c0e0
	bool HasCompletedRedirectFlow(enum RedirectPhase);// 0xe9bf30
	int GetViewRouteCount();// 0xe9bde0
	bool GetViewRoute(FName RouteName, out ViewRoute ViewRoute);// 0xe9bcc0
	PUMG_Widget* GetTopViewRouteWidget();// 0xe9bc40
	FName GetTopViewRoute();// 0xe9bc00
	enum GetTopLayer();// 0xe9bbd0
	bool GetPendingRouteData(FName RouteName, out Object* Data);// 0xe9ba30
	FName GetDefaultRouteForLayer(enum LayerType);// 0xe9b910
	FName GetCurrentTransitionRoute(enum Layer);// 0xe9b880
	FName GetCurrentRoute(enum Layer);// 0xe9b7f0
	bool ContainsRoute(FName RouteName);// 0xe9b0d0

--------------------------------
Class: PUMG_ViewLayer.Object
	CanvasPanel* DisplayTarget;//[Offset: 0x28, Size: 1]
	PUMG_ViewManager* MyManager;//[Offset: 0x30, Size: 1]
	enum CurrentTransitionState;//[Offset: 0x38, Size: 1]
	FName[] CurrentRouteStack;//[Offset: 0x40, Size: 1]
	FName[] CurrentTransitionRouteStack;//[Offset: 0x50, Size: 1]
	<FName,PUMG_Widget*> RouteWidgetMap;//[Offset: 0x60, Size: 1]
	FName DefaultRoute;//[Offset: 0xb0, Size: 1]
	<FName,Object*> PendingRouteData;//[Offset: 0xc0, Size: 1]
	DataTable* Routes;//[Offset: 0x110, Size: 1]
	bool IsRouteValid(FName RouteName);// 0xe9c350
	void GoToRoute_InternalShowStep();// 0xe9bf10
	void GoToRoute_HandleShowFinished(PUMG_Widget* Widget);// 0xe9be90
	void GoToRoute_HandleHideFinished(PUMG_Widget* Widget);// 0xe9be10

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	CanvasPanelSlot* AddChildToCanvas(Widget* Content);// 0x3c0ad80

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x38, Size: 1]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 1]
	int ZOrder;//[Offset: 0x64, Size: 1]
	void SetZOrder(int InZOrder);// 0x3c0ce90
	void SetSize(Vector2D InSize);// 0x3c0ca30
	void SetPosition(Vector2D InPosition);// 0x3c0c8b0
	void SetOffsets(Margin InOffset);// 0x3c0c4d0
	void SetMinimum(Vector2D InMinimumAnchors);// 0x3c0c3d0
	void SetMaximum(Vector2D InMaximumAnchors);// 0x3c0c350
	void SetLayout(out const AnchorData InLayoutData);// 0x3c0c130
	void SetAutoSize(bool InbAutoSize);// 0x3c0b610
	void SetAnchors(Anchors InAnchors);// 0x3c0b4f0
	void SetAlignment(Vector2D InAlignment);// 0x3c0b470
	int GetZOrder();// 0x3c0b3b0
	Vector2D GetSize();// 0x3c0b110
	Vector2D GetPosition();// 0x3c0b0d0
	Margin GetOffsets();// 0x3c0b090
	AnchorData GetLayout();// 0x3c0b000
	bool GetAutoSize();// 0x3c0af70
	Anchors GetAnchors();// 0x3c0af30
	Vector2D GetAlignment();// 0x3c0aef0

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0, Size: 1]
	Anchors Anchors;//[Offset: 0x10, Size: 1]
	Vector2D Alignment;//[Offset: 0x20, Size: 1]

--------------------------------
Class: StickyWidgetData
	FName StickyWidgetName;//[Offset: 0x0, Size: 1]
	PUMG_Widget* Widget;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ViewRouteRedirectData
	FName RouteName;//[Offset: 0x0, Size: 1]
	int CheckOrder;//[Offset: 0x8, Size: 1]
	bool OpenOverOriginal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 1]
	PUMG_ViewRedirecter* Redirector;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PUMG_ViewRedirecter.Object
	bool ShouldRedirect(PUMG_HUD* HUD, FName Route, out Object* SceneData);// 0xe9d830

--------------------------------
Class: ViewRoute.TableRowBase
	class PUMG_Widget* ViewWidget;//[Offset: 0x8, Size: 1]
	FName[] ViewStickyWidgets;//[Offset: 0x10, Size: 1]
	enum ViewLayer;//[Offset: 0x20, Size: 1]
	bool IsDefaultRoute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool ShouldPreload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool RequiresLoggedIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool AlwaysShowContextBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	enum RedirectionPhase;//[Offset: 0x25, Size: 1]
	int RedirectionPhaseOrder;//[Offset: 0x28, Size: 1]
	class PUMG_ViewRedirecter* ViewRedirector;//[Offset: 0x30, Size: 1]
	bool OpenOverOriginal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	bool BlockAcquisitions;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 1]

--------------------------------
Class: PUMG_MobileLayoutSequencePlayer.UMGSequencePlayer.Object

--------------------------------
Class: PUMG_InputFocusDetails
	PUMG_InputFocusGroup[] FocusGroups;//[Offset: 0x0, Size: 1]
	int DefaultFocusGroupIndex;//[Offset: 0x10, Size: 1]
	int CurrentFocusGroupIndex;//[Offset: 0x14, Size: 1]

--------------------------------
Class: PUMG_InputFocusGroup

--------------------------------
Class: RouteContextInfo
	ContextActionData*[] ActionData;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PUMG_UISoundTheme.Object
	<FName,PUMG_SoundThemeEventMapping> SoundEventBindings;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PUMG_SoundThemeEventMapping
	FName SoundEventName;//[Offset: 0x0, Size: 1]
	SoundCue* SoundToPlay;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bPrimeOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x160, Size: 1]
	SoundNode* FirstNode;//[Offset: 0x168, Size: 1]
	float VolumeMultiplier;//[Offset: 0x170, Size: 1]
	float PitchMultiplier;//[Offset: 0x174, Size: 1]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x178, Size: 1]
	float SubtitlePriority;//[Offset: 0x518, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x520, Size: 1]
	bool bExcludeFromRandomNodeBranchCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x520, Size: 1]
	int CookedQualityIndex;//[Offset: 0x524, Size: 1]
	bool bHasPlayWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x528, Size: 1]

--------------------------------
Class: SoundNode.Object
	SoundNode*[] ChildNodes;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PUMG_PopupManager.PUMG_Widget.UserWidget.Widget.Visual.Object
	PUMG_PopupConfig[] PopupQueue;//[Offset: 0x4d8, Size: 1]
	int m_nPopupId;//[Offset: 0x4e8, Size: 1]
	FText CommittedText;//[Offset: 0x5d0, Size: 1]
	void ShowPopup(PUMG_PopupConfig popupData);// 0x2d74e00
	void RemovePopup(int PopupId);// 0xe91f00
	void OnPopupResponse(int nPopupId, int nResponseIndex);// 0xe91e40
	void OnPopupCanceled();// 0xe91e20
	void NextPopup();// 0xe91e00
	void HidePopup();// 0x2d74e00
	void CloseUnimportantPopups();// 0xe90e20
	void CloseAllPopups();// 0xe90e00
	int AddPopup(out const PUMG_PopupConfig popupData);// 0xe90990

--------------------------------
Class: PUMG_PopupConfig
	FText Header;//[Offset: 0x0, Size: 1]
	FText SubHeading;//[Offset: 0x18, Size: 1]
	Texture2D* HeadingIcon;//[Offset: 0x30, Size: 1]
	FText Description;//[Offset: 0x58, Size: 1]
	FText Warning;//[Offset: 0x70, Size: 1]
	bool TextEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 1]
	FText TextEntryHint;//[Offset: 0x90, Size: 1]
	bool IsImportant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 1]
	bool TreatAsBlocker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9, Size: 1]
	PUMG_PopupButtonConfig[] Buttons;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty CancelAction;//[Size: 1]
	byte TextAlignment;//[Offset: 0xd0, Size: 1]
	int PopupId;//[Offset: 0xd4, Size: 1]
	enum PopupFormat;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: PUMG_PopupButtonConfig
	FText Label;//[Offset: 0x0, Size: 1]
	MulticastInlineDelegateProperty Action;//[Size: 1]
	enum Type;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSPushNotificationManager.Object
	KSJsonDataFactory* JsonDataFactory;//[Offset: 0x28, Size: 1]
	FString JsonPanel;//[Offset: 0x30, Size: 1]
	KSJsonPushNotification*[] Notifications;//[Offset: 0x40, Size: 1]
	enum State;//[Offset: 0x50, Size: 1]
	bool bNotificationPermissionGranted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51, Size: 1]
	void HandleRegisteredForUserNotifications(int Types);// 0x282da30
	void HandleRegisteredForRemoteNotifications(byte[] InToken);// 0x282d950
	void HandleJsonReady(FString JsonName);// 0x282d830

--------------------------------
Class: KSJsonPushNotification.KSJsonData.Object
	FString Header;//[Offset: 0x88, Size: 1]
	FString Body;//[Offset: 0x98, Size: 1]
	FString ActivationEvent;//[Offset: 0xa8, Size: 1]

--------------------------------
Class: KSJsonData.Object
	FName UniqueId;//[Offset: 0x28, Size: 1]
	int AssociatedLootId;//[Offset: 0x30, Size: 1]
	int[] HideIfItemOwned;//[Offset: 0x38, Size: 1]
	int[] ShowIfItemOwned;//[Offset: 0x48, Size: 1]
	bool HideIfOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58, Size: 1]
	int MinLevel;//[Offset: 0x5c, Size: 1]
	int MaxLevel;//[Offset: 0x60, Size: 1]
	bool showSteam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool showEpic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool showPS4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool showPS5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool showXB1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool showXSX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool showNX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	bool showIOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 1]
	bool showAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]

--------------------------------
Class: KSLoadoutDataFactory.PUMG_LoadoutDataFactory.Object
	int StartingArmoryLoadoutSlotsCount;//[Offset: 0xf8, Size: 1]
	int RoguePerkSlotsCount;//[Offset: 0xfc, Size: 1]
	MulticastInlineDelegateProperty OnArmoryLoadoutCleared;//[Size: 1]
	MulticastInlineDelegateProperty OnArmoryAllLoadoutsCleared;//[Size: 1]
	MulticastInlineDelegateProperty OnInventoryChanged;//[Size: 1]
	bool TryCreateArmoryLoadout(out KSArmoryLoadoutEntry OutArmoryLoadoutEntry, int LoadoutNumber);// 0x279e360
	void SetFavoriteArmoryLoadoutIndex(int NewIndex, bool SaveToServer);// 0x279df70
	bool SetEquippedAttachmentAtSlot(const int LoadoutNumber, int WeaponId, const int AttachmentNumber, const KSItem* Item, const bool bSave);// 0x279dde0
	bool SetArmoryLoadoutWeaponWrap(int LoadoutNumber, int WeaponId, const KSItem* WeaponWrap, const bool bSave);// 0x279dca0
	void SaveLoadoutByType(enum LoadoutType);// 0x279dc20
	bool RequestXPCardExchange(Object* ContextObject, <KSItem_XPCard*,int> CardToQuantityMap);// 0x279da70
	bool RemoveEquippedAttachmentAtSlot(const int LoadoutNumber, int WeaponId, const int AttachmentNumber, const bool bSave);// 0x279d930
	void RemoveArmoryPerkFromSlot(int SlotPosition, KSJobItem* JobItem, KSItem* PerkItem);// 0x279d830
	bool IsSpecialSlotUnlockedOnItem(KSItem* TargetItem, int SlotIndex);// 0x279d1f0
	bool IsSlotUnlockedOnItem(KSItem* TargetItem, int SlotIndex);// 0x279d070
	bool IsSlotUnlocked_Internal(KSItem* TargetItem, int SlotIndex);// 0x279d130
	bool IsLoadoutEquipRelationUnlocked(KSItem* InEquipItem, KSItem* InTargetItem);// 0x279cf90
	bool IsEquipUnlockOwned(KSItem_LoadoutEquipUnlock* EquipUnlock);// 0x279cc90
	bool IsArmoryLoadoutUnlocked(int SlotIndex);// 0x279cee0
	bool IsArmoryItemEquippedToLoadout(int ItemId, int LoadoutNumber);// 0x279ce20
	bool IsAccountItemEquippedInSlot(KSItem* AccountItem, enum eSlot);// 0x279cd20
	bool IsAbilityUpgradeUnlocked(KSPlayerModAttachment* InModAttachment);// 0x279cc90
	int GetUnlockTierForEquipUnlockItems(const KSItem* InEquipItem, const KSItem* InTargetItem);// 0x279c690
	int GetUnlockTierForEquipUnlock(KSItem_LoadoutEquipUnlock* InEquipUnlock);// 0x279c600
	bool GetUnlockedSpecialSlotsCountOnItem(KSItem* TargetItem, out int OutUnlockedCount);// 0x279ca20
	bool GetUnlockedSlotsCountOnItem(KSItem* TargetItem, out int OutUnlockedCount);// 0x279c880
	bool GetUnlockedSlotsCount_Internal(KSItem* TargetItem, out int OutUnlockedCount);// 0x279c950
	int GetUnlockedLoadoutPerkUpgrades(KSPlayerMod* Perk);// 0x279c7f0
	bool GetUnlockedArmoryLoadoutsCount(out int OutUnlockedCount);// 0x279c750
	void GetSlotUnlockTiersOnItem(KSItem* TargetItem, out int[] OutUnlockTiers);// 0x279c420
	void GetSlotUnlockTiers_Internal(KSItem* TargetItem, out int[] OutUnlockTiers);// 0x279c510
	KSItem_LoadoutSlotUnlock* GetSlotUnlockItemOnItem(KSItem* TargetItem);// 0x279c300
	KSItem_LoadoutSlotUnlock* GetSlotUnlockItem_Internal(KSItem* TargetItem);// 0x279c390
	KSItem_MobileRogueTier* GetRogueTierItem_Internal(KSJobItem* TargetJobItem);// 0x279c270
	int GetRogueShardItemId(KSJobItem* InJobItem);// 0x279c150
	FName[] GetRogueShardItemCTAPath(KSJobItem* InJobItem);// 0x279c070
	KSRogueShard* GetRogueShardItem_Internal(KSJobItem* TargetJobItem);// 0x279c1e0
	KSActivityInstance* GetProgressInstanceForTargetItem(KSItem* TargetItem);// 0x279bfe0
	KSActivityInstance* GetProgressInstanceForLoadoutSlots();// 0x279bfb0
	static KSJobItem* GetPreferredJob(const Object* WorldContextObject);// 0x279bf30
	bool GetOwnedShardsForRogue(KSJobItem* InJobItem, out int OutShardsCount);// 0x279bc80
	bool GetOwnedMobileReputation(out int OutMobileReputation);// 0x279bbe0
	bool GetOrFindAvailableXPCardsForObject(Object* ContextObject, out <KSItem_XPCard*,int> OutXPCardsToOwnedCount);// 0x279ba60
	KSItem_XPCard*[] GetOrFindAllXPCardsForObject_Internal(Object* ContextObject);// 0x279b980
	bool GetOrCreateTierUpRewards(KSJobItem* InJobItem, int InTier, out KSItem*[] OutTierUpRewards);// 0x279b860
	bool GetOrCreateTierUpRequirements(KSJobItem* InJobItem, int InTier, out <int,int> OutRequirementIdsToQuantities);// 0x279b6b0
	bool GetOrCreateMaxTierForRogue(KSJobItem* InJobItem, out int OutMaxTier);// 0x279b5e0
	bool GetOrCreateIsTierValidForRogue(KSJobItem* InJobItem, int InTier);// 0x279b520
	bool GetOrCreateIsItemIdTierRewardForRogue(int InItemId, KSJobItem* InJobItem);// 0x279b460
	bool GetOrCreateCanRogueUpgradeCurrentTier(KSJobItem* InJobItem, out bool bOutCanUpgrade);// 0x279b390
	bool GetOrCreateAbilityUpgradeLevels(KSJobItem* InJobItem, out int OutCurrentLevel, out int OutMaxLevel);// 0x279b270
	int GetMobileReputationItemId();// 0x279b240
	bool GetLoadoutByType(out PUMG_Loadout* Loadout, enum LoadoutType, bool bCreateIfNeeded);// 0x279b130
	static KSLoadoutDataFactory* GetKSLoadoutDataFactory(const Object* WorldContextObject);// 0x279b0b0
	int GetFavoriteArmoryLoadoutIndex();// 0x279b080
	KSItem_LoadoutEquipUnlock* GetEquipUnlockItemForItems(const KSItem* InEquipItem, const KSItem* InTargetItem);// 0x279aab0
	bool GetEquippedCosmeticForWeapon(KSWeaponAsset* WeaponItem, out KSWeaponAttachment* CosmeticItem);// 0x279afb0
	bool GetEquippedAttachmentsForWeaponId(int LoadoutNumber, int WeaponId, out KSItem*[] OutItems);// 0x279ae60
	bool GetEquippedArmoryPerkBySlot(int SlotPosition, KSJobItem* JobItem, out KSItem* PerkItem);// 0x279ad50
	bool GetEquippedArmoryItemAtSlot(enum eSlot, int LoadoutNumber, out KSItem* EquippedItem);// 0x279ac40
	bool GetEquippedAccountItem(enum eSlot, out KSItem* EquippedItem);// 0x279ab70
	bool GetDefaultCosmeticItem(enum eSlot, int SlotPosition, KSJobItem* JobItem, out KSItem* DefaultCosmeticItem, bool SkipGlobal);// 0x279a860
	bool GetCurrentTierForRogue(KSJobItem* InJobItem, out int OutCurrentTier);// 0x279a790
	static KSJobItem* GetBestJobToPreviewItem(KSItem* InItem, const Object* WorldContextObject);// 0x279a530
	void GetArmoryLoadoutUnlockTiers(out int[] OutUnlockTiers);// 0x279a2e0
	KSItem_LoadoutSlotUnlock* GetArmoryLoadoutUnlockItem();// 0x279a2b0
	bool GetArmoryLoadoutEntry(out KSArmoryLoadoutEntry OutArmoryLoadoutEntry, int LoadoutNumber);// 0x279a130
	KSItem_LoadoutEquipUnlock*[] GetAllEquipUnlocksForTargetItem(const KSItem* InTargetItem);// 0x2799f50
	bool GetAllEquippedArmoryPerks(KSJobItem* JobItem, out KSItem*[] OutPerks);// 0x279a030
	bool GetAllArmorySpecialistPerks(out KSPlayerMod*[] OutPerks);// 0x2799e90
	bool GetAllArmoryPerks(out KSPlayerMod*[] OutPerks);// 0x2799dd0
	bool GetAllArmoryLoadouts(out KSArmoryLoadoutEntry[] OutArmoryLoadoutEntries);// 0x2799c80
	KSPlayerModAttachment*[] GetAbilityUpgradesForMod(KSPlayerMod* InPlayerMod);// 0x2799ba0
	KSPlayerModAttachment*[] GetAbilityUpgradesForJob(KSJobItem* InJobItem);// 0x2799ac0
	ActivityTier[] FindRewardTiers(KSActivityInstance* ActivityInstance, KSItem* RewardItem);// 0x27997c0
	bool EquipCosmeticToWeapon(KSWeaponAttachment* CosmeticItem, KSWeaponAsset* WeaponItem, bool bGlobal);// 0x27995f0
	bool EquipArmoryPerkToSlot(int SlotPosition, KSJobItem* JobItem, KSItem* PerkItem);// 0x27994f0
	bool EquipArmoryItemToSlot(enum eSlot, int LoadoutNumber, KSItem* Item, bool bCreateIfNeeded, bool bSave);// 0x2799350
	bool EquipAccountItemToSlot(enum eSlot, KSItem* Item, bool bSave);// 0x2799250
	bool ClearEquippedCosmeticForWeapon(KSWeaponAsset* WeaponItem, bool bGlobal);// 0x2799130
	bool ClearArmoryLoadouts();// 0x2799100
	bool ClearArmoryLoadout(int LoadoutIndex);// 0x2799070
	bool AttemptUpgradeCurrentTier(KSJobItem* InJobItem);// 0x2798fb0

--------------------------------
Class: PUMG_LoadoutDataFactory.Object
	MulticastInlineDelegateProperty OnLoadoutsInitialized;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutsUpdatedFromServer;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutFactoryReadyNoLoadouts;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnLoadoutDeleted;//[Size: 1]
	PUMG_Loadout*[] Loadouts;//[Offset: 0x98, Size: 1]

--------------------------------
Class: PUMG_Loadout.Object
	MulticastInlineDelegateProperty OnRenamed;//[Size: 1]
	MulticastInlineDelegateProperty OnNumberChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTypeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnServerUpdate;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalUpdate;//[Size: 1]

--------------------------------
Class: KSArmoryLoadoutEntry
	KSItem* PrimaryWeapon;//[Offset: 0x0, Size: 1]
	KSItem* SecondaryWeapon;//[Offset: 0x28, Size: 1]
	KSItem* Gadget;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSItem_XPCard.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int ExchangeVendorId;//[Offset: 0x280, Size: 1]
	int GetOrFindExchangeValueOnObject(Object* ContextObject, const Object* WorldContextObject);// 0x2787a80
	int GetOrFindExchangeIdOnObject(Object* ContextObject, const Object* WorldContextObject);// 0x27879c0

--------------------------------
Class: KSItem_LoadoutEquipUnlock.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSItem* EquipItem;//[Offset: 0x280, Size: 1]
	KSItem* TargetItem;//[Offset: 0x2a8, Size: 1]
	void InitNewlyCreatedEquipUnlock(KSItem* InEquipItem, KSItem* InTargetItem);// 0x2788230

--------------------------------
Class: KSItem_LoadoutSlotUnlock.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	enum SlotType;//[Offset: 0x280, Size: 1]
	int StartingUnlockedCount;//[Offset: 0x284, Size: 1]
	KSItem* TargetItem;//[Offset: 0x288, Size: 1]
	bool MatchesItem(KSItem* InItem);// 0x27884a0
	FText GetFormattedSlotName();// 0x2786f40
	FText GetFormattedSlotDesc();// 0x2786ea0

--------------------------------
Class: KSItem_MobileRogueTier.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int StartingTierCount;//[Offset: 0x280, Size: 1]
	KSJobItem* TargetJobItem;//[Offset: 0x288, Size: 1]
	int TierUpgradeVendorId;//[Offset: 0x2b0, Size: 1]
	bool MatchesJobItem(KSJobItem* InJobItem);// 0x2788670
	bool GetOrCreateTierUpRewards(int InTier, out int[] OutTierUpRewards);// 0x2787800
	bool GetOrCreateTierUpRequirements(int InTier, out <int,int> OutRequirementIdsToQuantities);// 0x2787690
	bool GetOrCreateTierUpgradeVendorId(int InTier, out int OutVendorId);// 0x27878f0
	bool GetOrCreateMaxTier(out int OutMaxTier);// 0x27875f0
	bool GetOrCreateIsTierValid(int InTier);// 0x2787560

--------------------------------
Class: KSRogueShard.KSCurrency.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	KSJobItem* TargetJobItem;//[Offset: 0x300, Size: 1]
	bool MatchesJobItem(KSJobItem* InJobItem);// 0x283f490

--------------------------------
Class: KSCurrency.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool IsDLCVoucher;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	int SortOrder;//[Offset: 0x284, Size: 1]
	DataTable* CurrencyDataByQtyTable;//[Offset: 0x288, Size: 1]
	Texture2D* FullSplash;//[Offset: 0x2b0, Size: 1]
	Texture2D* CurrencySmallIcon;//[Offset: 0x2d8, Size: 1]
	Texture2D* GetSoftFullSplashImage();// 0x273ab60
	Texture2D* GetSoftCurrencySmallIcon();// 0x273aac0
	bool GetCurrencyDataForQuantity(int Quantity, out CurrencyImageRow Data);// 0x273a670

--------------------------------
Class: CurrencyImageRow.TableRowBase
	int Quantity;//[Offset: 0x8, Size: 1]
	int BonusQuantity;//[Offset: 0xc, Size: 1]
	Texture2D* Image;//[Offset: 0x10, Size: 1]
	Texture2D* FullSplashImage;//[Offset: 0x38, Size: 1]
	<enum,FString> ExternalProductSkus;//[Offset: 0x60, Size: 1]

--------------------------------
Class: KSArmoryLoadoutData.Object
	GameplayTagContainer ArmoryItemTags;//[Offset: 0x28, Size: 1]
	KSArmoryLoadoutEntry[] ArmoryLoadoutEntries;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSUISessionManager.Object
	bool bAchievementIntegrationEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb, Size: 1]
	bool bHasInitialInventory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	int DivertFromQueueId;//[Offset: 0xc0, Size: 1]
	int DivertToQueueId;//[Offset: 0xc4, Size: 1]
	enum QueueDivertType;//[Offset: 0xc8, Size: 1]
	float ShelteredMMAttemptTimeout;//[Offset: 0xcc, Size: 1]
	float ShelteredMMLevelLimit;//[Offset: 0xd0, Size: 1]
	int ForcedBotMatchLimit;//[Offset: 0xd4, Size: 1]
	int SisterQueueId;//[Offset: 0xd8, Size: 1]
	int MercyMatchLossesRequired;//[Offset: 0xdc, Size: 1]
	bool bHasReceivedPlayerEmail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	bool bEmailCallWasSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1, Size: 1]
	FString PlayerEmail;//[Offset: 0xe8, Size: 1]

--------------------------------
Class: KSSupplyDropManager.Object
	MulticastInlineDelegateProperty OnSupplyDropOpenStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnSupplyDropOpenFailed;//[Size: 1]
	MulticastInlineDelegateProperty OnSupplyDropContentsReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnDisplaySupplyDropIntro;//[Size: 1]
	MulticastInlineDelegateProperty OnDisplaySupplyDropIntroAndOpen;//[Size: 1]
	MulticastInlineDelegateProperty OnSupplyDropLeave;//[Size: 1]
	MulticastInlineDelegateProperty OnSupplyDropOpenSequenceCompleted;//[Size: 1]
	int64[] SupplyDropLootIds;//[Offset: 0x98, Size: 1]
	PUMG_StoreItemHelper* StoreItemHelper;//[Offset: 0xb0, Size: 1]
	<int64,KSSupplyDropDetails*> UnopenedSupplyDropIdToContents;//[Offset: 0xb8, Size: 1]
	void OnStoreVendorsLoaded(int GroupId, out const int[] VendorIds);// 0x284d7d0
	static FText GetContentCategoryName(byte Category);// 0x284c530
	void CallOnSupplyDropOpeningSequenceComplete();// 0x284b9f0

--------------------------------
Class: KSSupplyDropDetails.Object
	PUMG_StoreItem* SupplyDrop;//[Offset: 0x28, Size: 1]
	KSSupplyDropContents*[] Contents;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSSupplyDropContents.Object
	int LootTableItemId;//[Offset: 0x28, Size: 1]
	PUMG_StoreItem*[] BundleContents;//[Offset: 0x30, Size: 1]
	FText[] GetContentsFilterOptions();// 0x284c610

--------------------------------
Class: KSActivityInstanceManager.Object

--------------------------------
Class: KSPlayerInventoryHelper.PUMG_PlayerInventoryHelper.Object
	<InventoryId,DynamicCallbacksPerInventoryId(MulticastInlineDelegateProperty)> DynamicCallbacksPerInventoryId;//[Offset: 0x118, Size: 1]
	<InventoryTypeId,DynamicCallbacksPerInventoryTypeId(MulticastInlineDelegateProperty)> DynamicCallbacksPerInventoryTypeId;//[Offset: 0x168, Size: 1]
	MulticastInlineDelegateProperty OnInventoryItemsUpdatedDynamicCallbacks;//[Size: 1]
	void RemoveInventoryItemsUpdatedCallback(out const delegate Callback);// 0x27f17e0
	void RemoveAllItemUpdatedCallbacks(out const delegate Callback);// 0x27f1730
	void RemoveAllItemTypeUpdatedCallbacks(out const delegate Callback);// 0x27f1680
	int GetCountByType(int ItemTypeId, int ItemSubTypeId, KSPlayerController* Player);// 0x27f0580
	int GetCount(int64 ItemId, KSPlayerController* Player);// 0x27f04c0
	DateTime GetAcquiredTime(int64 ItemId, KSPlayerController* Player);// 0x27f03f0
	void AddItemUpdatedCallback(out const delegate Callback, int64 ItemId, KSPlayerController* Player);// 0x27f0220
	void AddItemTypeUpdatedCallback(out const delegate Callback, int ItemTypeId, int ItemSubTypeId, KSPlayerController* Player);// 0x27f00a0
	void AddInventoryItemsUpdatedCallback(out const delegate Callback);// 0x27efff0

--------------------------------
Class: PUMG_PlayerInventoryHelper.Object

--------------------------------
Class: DateTime

--------------------------------
Class: InventoryTypeId
	int64 PlayerId;//[Offset: 0x0, Size: 1]
	int ItemTypeId;//[Offset: 0x8, Size: 1]
	int ItemSubTypeId;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSPlayerStatsManager.KSActivityManagerBase.Object
	FString ForceActivityDataTablePath;//[Offset: 0x238, Size: 1]

--------------------------------
Class: KSPlayerChallengesManager.KSActivityManagerBase.Object
	MulticastInlineDelegateProperty OnPlayerChallengesReady;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerChallengesChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerDailyContractTimerChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerWeeklyContractTimerChanged;//[Size: 1]
	bool ChallengesReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280, Size: 1]
	MulticastInlineDelegateProperty TestPlayerChallengeComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnLoginRewardClaimed;//[Size: 1]
	bool SaveSeenChallenges(out const KSActivityInstance*[] SeenChallenges);// 0x27e19a0
	void RequestNewContracts(bool ForceRequest);// 0x27e18f0
	void OnWeeklyContractTimerRefresh(out const InventoryId InventoryId);// 0x27e1540
	void OnStoredContractUpdated(out const InventoryId InventoryId);// 0x27e1490
	void OnLastRankedWeekActiveUpdated(out const InventoryId InventoryId);// 0x27e12e0
	void OnDailyContractTimerRefresh(out const InventoryId InventoryId);// 0x27e1230
	void OnChallengeProgressUpdated(out const InventoryTypeId InventoryTypeId);// 0x27e1170
	bool GetUnseenChallenges(out KSActivityInstance*[] OutActivityInstances, bool UnlockedOnly);// 0x27e0f20
	int GetSecondsUntilRankedContractEnds();// 0x27e0ef0
	int GetSecondsUntilNewWeeklyContract();// 0x27e0ec0
	int GetSecondsUntilNewDailyContract();// 0x27e0e90
	<int,KSActivityInstance*> GetNewDailyContractsRelativeTo(out const KSActivityInstance*[] PriorList);// 0x27e0880
	KSActivityInstance* GetCurrentWeeklyMasteryInstance(KSPlayerController* Player, KSPlayerState* PlayerState);// 0x27e0700
	KSActivityInstance* GetCurrentRankedMasteryInstance(KSPlayerController* Player, KSPlayerState* PlayerState);// 0x27e0640
	KSActivityInstance*[] GetActiveWeeklyContracts();// 0x27e05c0
	KSActivityInstance*[] GetActiveRankedContracts();// 0x27e0540

--------------------------------
Class: KSNPETrackManager.KSActivityManagerBase.Object

--------------------------------
Class: KSMercMasteryManager.KSActivityManagerBase.Object
	static KSActivity* StaticGetMercMasteryActivity(const Object* WorldContextObject, KSJobItem* Job);// 0x27b5f80
	float GetWinPercentForJob(KSJobItem* JobItem, KSPlayerController* Player);// 0x27b4ae0
	KSActivityInstance* GetMercXpActivityInstanceForJob(KSJobItem* JobItem);// 0x27b4420
	KSActivity* GetMercMasteryActivity(KSJobItem* Job);// 0x27b4390
	KSJobItem* GetLowestJobForActivityType(GameplayTag ActivityTag, KSPlayerController* Player);// 0x27b42a0
	int GetJobMasteryLevelForXpValue(KSJobItem* JobItem, int XpValue);// 0x27b3b20
	KSJobItem* GetHighestJobForActivityType(GameplayTag ActivityTag, KSPlayerController* Player);// 0x27b3970

--------------------------------
Class: KSMercManager.Object
	void Uninitialize();// 0x27b60a0
	bool IsItemEquippedInSlot(KSItem* CosmeticItem, enum eSlot, int SlotPosition, KSJobItem* JobItem);// 0x27b5230
	bool IsItemEquippedInAnySlot(KSItem* CosmeticItem, enum eSlot, int[] SlotPosition, KSJobItem* JobItem);// 0x27b50a0
	void Initialize();// 0x26b68d0
	KSLoadoutDataFactory* GetLoadoutDataFactory();// 0x27b4240
	KSJobItem*[] GetJobItems();// 0x27b3a30
	bool GetEquippedPassiveBySlot(int SlotPosition, KSJobItem* JobItem, out KSItem* PassiveItem);// 0x27b3860
	bool GetEquippedCosmeticItemBySlot(enum eSlot, int SlotPosition, KSJobItem* JobItem, out KSItem* CosmeticItem);// 0x27b3710
	bool EquipPassiveToSlot(int SlotPosition, KSJobItem* JobItem, KSItem* PassiveItem);// 0x27b2c40
	bool EquipCosmeticItemToSlot(enum eSlot, int SlotPosition, KSJobItem* JobItem, KSItem* CosmeticItem, bool bGlobal);// 0x27b2ab0
	void ClearCosmeticItemOnSlot(enum eSlot, int SlotPosition, KSJobItem* JobItem, bool bGlobal);// 0x27b27c0

--------------------------------
Class: KSWeaponManager.Object
	bool bLockedWeaponsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	void Uninitialize();// 0x27b60a0
	bool IsWeaponUnlocked(const KSWeaponAsset* InWeaponAsset);// 0x2890bf0
	bool IsWeaponCategoryUnlocked(const KSWeaponCategoryAsset* InWeaponCategoryAsset);// 0x2890aa0
	void Initialize(KSGameInstance* KSGameInstance);// 0x2890a10
	KSWeaponCategoryAsset* GetWeaponCategoryAssetByXPInstance(KSActivityInstance* MasteryProgressInstance);// 0x2890510
	KSWeaponAsset* GetWeaponAssetByActivityInstance(KSActivityInstance* MasteryProgressInstance);// 0x2890480
	bool GetUnlockTierForWeapon(const KSWeaponAsset* InWeaponAsset, out int OutUnlockTier);// 0x28903b0
	KSWeaponCategoryAsset* GetCategoryByTag(GameplayTag CategoryTag);// 0x2890170

--------------------------------
Class: KSAwardsManager.KSActivityManagerBase.Object

--------------------------------
Class: KSGeneralProgressionManager.KSActivityManagerBase.Object

--------------------------------
Class: KSRankedManager.KSActivityManagerBase.Object
	int GetRequiredPlacementMatches(FString SeasonKey);// 0x2831760
	bool GetRankedSeasonKeyForQueue(int QueueId, out FString OutKey);// 0x2831640
	KSRankedSeason*[] GetAllRankedSeasons();// 0x2831390
	int GetAllowedPartyRankRange(FString SeasonKey);// 0x2831410
	KSRankedSeason*[] GetAllActiveRankedSeasons();// 0x2831310

--------------------------------
Class: KSRankedSeason.KSEvent.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int RankedYear;//[Offset: 0x2d8, Size: 1]
	int RankedYearSeason;//[Offset: 0x2dc, Size: 1]
	bool UsesPlacementMatches;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int PlacementMatchItemId;//[Offset: 0x2e4, Size: 1]
	int PlacementMatchLootId;//[Offset: 0x2e8, Size: 1]
	int InitXpLootId;//[Offset: 0x2ec, Size: 1]
	int XpTableId;//[Offset: 0x2f0, Size: 1]
	float WinBaseRankedXP;//[Offset: 0x2f4, Size: 1]
	float LossBaseRankedXP;//[Offset: 0x2f8, Size: 1]
	float MinBonusClamp;//[Offset: 0x2fc, Size: 1]
	float MaxBonusClamp;//[Offset: 0x300, Size: 1]
	float RankDifferenceMultiplier;//[Offset: 0x304, Size: 1]
	int RequiredPlacementMatches;//[Offset: 0x308, Size: 1]
	int PartyRankRange;//[Offset: 0x30c, Size: 1]
	int InitialPlacementDifference;//[Offset: 0x310, Size: 1]
	int MinPlacementPartyLevel;//[Offset: 0x314, Size: 1]
	int MaxPlacementPartyLevel;//[Offset: 0x318, Size: 1]
	KSFavoredMatchBonusStruct[] FavoredMatchBonuses;//[Offset: 0x320, Size: 1]
	float[] MMRZoneList;//[Offset: 0x330, Size: 1]

--------------------------------
Class: KSEvent.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	FName EventTag;//[Offset: 0x280, Size: 1]
	bool CanBeEquippedPostEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	int[] ActivityVendorIds;//[Offset: 0x290, Size: 1]
	int[] ActivityRewardVendorIds;//[Offset: 0x2a0, Size: 1]
	int OwnershipItemId;//[Offset: 0x2b0, Size: 1]
	KSContainerItem_Item*[] EquipSlots;//[Offset: 0x2b8, Size: 1]
	FName[] PairedEventTags;//[Offset: 0x2c8, Size: 1]
	bool ShouldFetchVendors(const Object* WorldContextObject);// 0x2753540
	bool ShouldDisplayCallToAction(const Object* WorldContextObject);// 0x27534b0
	bool IsToggledActive();// 0x27532d0
	bool IsPastStartDate();// 0x2753120
	bool IsOwned(const Object* WorldContextObject, int64 InPlayerNetId);// 0x2753030
	bool IsEquipped(const Object* WorldContextObject, int64 InPlayerNetId);// 0x2752e80
	bool IsBeforeEndDate();// 0x2752e50
	bool IsActiveForCurrentQueue(const KSPlayerState* PlayerState);// 0x2752dc0
	bool IsActiveByTimeframe();// 0x2752d90
	bool IsActiveByEquip(const Object* WorldContextObject, int64 InPlayerNetId);// 0x2752cd0
	bool IsActive(const Object* WorldContextObject, int64 InPlayerNetId);// 0x2752c10
	int GetRemainingSeconds();// 0x27529b0
	bool GetCallToActionTag(const Object* WorldContextObject, out FName Tag);// 0x2752030
	void EquipEvent(const Object* WorldContextObject, bool ShouldReplaceSlot, int SlotToReplace);// 0x2751e80
	void ClearCallToAction(const Object* WorldContextObject);// 0x2751dd0

--------------------------------
Class: KSContainerItem_Item.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: KSFavoredMatchBonusStruct
	float MaxMMRDifference;//[Offset: 0x0, Size: 1]
	int BonusValue;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSBattlePassProgressionManager.KSActivityManagerBase.Object
	MulticastInlineDelegateProperty OnBattlePassProgressionActivitiesReady;//[Size: 1]
	bool BattlePassReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 1]
	bool ShouldDisplayBattlePass(GameplayTag BattlepassTag);// 0x26e7ac0
	bool IsBattlePassPurchaseItem(PUMG_StoreItem* StoreItem);// 0x26e7750
	bool HasPremiumBattlePass(GameplayTag BattlepassTag);// 0x26e76c0
	PUMG_StoreItem*[] GetTierRewardItems(int StartTier, int EndTier);// 0x26e7480
	GameplayTag GetSeasonTag();// 0x26e70d0
	bool GetSeasonalChallengeInstances(out KSActivityInstance*[] ActivityInstances, KSPlayerController* Player, KSPlayerState* PlayerState);// 0x26e7110
	PUMG_StoreItem*[] GetPurchaseConfirmDisplayItems(PUMG_StoreItem* BattlePassPurchaseItem, int Quantity);// 0x26e6fd0
	PUMG_StoreItem*[] GetPurchasableBattlePassBundles(GameplayTag BattlepassTag);// 0x26e6ef0
	int GetLockedRogueBucksCount();// 0x26e6b70
	int GetLockedItemsCount(bool IncludeInstantUnlocks, int AdditionalTiers);// 0x26e6aa0
	PUMG_StoreItem*[] GetLockedItems(bool IncludeInstantUnlock, int AdditionalTiers);// 0x26e6980
	enum GetItemBattlePassSource(const PUMG_StoreItem* StoreItem);// 0x26e68d0
	KSActivityInstance* GetHighestCompletionUnlockedSeasonalChallenge(KSPlayerController* Player, KSPlayerState* PlayerState);// 0x26e67f0
	KSActivityInstance* GetCurrentSeasonMasteryInstance(KSPlayerController* Player, KSPlayerState* PlayerState);// 0x26e6730
	KSBattlepass* GetCurrentBattlepass();// 0x26e6700
	int GetBattlePassXpItemId(GameplayTag BattlepassTag);// 0x26e65e0
	int64 GetBattlePassPremiumItemId(GameplayTag BattlepassTag);// 0x26e6550
	KSBattlepass* GetBattlepassForSeason(GameplayTag BattlepassTag);// 0x26e6670
	KSActivityInstance* GetBattlePassActivityInstance(GameplayTag BattlepassTag);// 0x26e64c0
	FText GetBattleBassTimeRemainingText(GameplayTag BattlepassTag);// 0x26e63d0
	KSBattlepass*[] GetAllBattlepasses();// 0x26e6350
	PUMG_StoreItem*[] GetActiveTierBundles();// 0x26e62d0

--------------------------------
Class: KSBattlepass.KSEvent.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	BattlepassUpsellData UpsellScreenData;//[Offset: 0x2d8, Size: 1]
	int ProgressItemId;//[Offset: 0x418, Size: 1]
	int PremiumRewardVendorId;//[Offset: 0x41c, Size: 1]
	int64 LevelPurchaseLootTableId;//[Offset: 0x420, Size: 1]
	int64 LevelPurchaseLootId;//[Offset: 0x428, Size: 1]
	int64 InstantUnlockRewardVendorId;//[Offset: 0x430, Size: 1]
	Texture2D* FreeIcon;//[Offset: 0x438, Size: 1]
	Texture2D* PremiumIcon;//[Offset: 0x460, Size: 1]
	DataTable* ActivitySequenceTable;//[Offset: 0x488, Size: 1]
	FName[] ChallengeWeekRowNames;//[Offset: 0x490, Size: 1]

--------------------------------
Class: BattlepassUpsellData
	Texture2D* background;//[Offset: 0x0, Size: 1]
	Texture2D* Shade;//[Offset: 0x28, Size: 1]
	Texture2D* Outfits;//[Offset: 0x50, Size: 1]
	Texture2D* Wingsuits;//[Offset: 0x78, Size: 1]
	Texture2D* WeaponWraps;//[Offset: 0xa0, Size: 1]
	Texture2D* ChaseSkin;//[Offset: 0xc8, Size: 1]
	Texture2D* Smoke;//[Offset: 0xf0, Size: 1]
	Texture2D* Currency;//[Offset: 0x118, Size: 1]

--------------------------------
Class: KSEventChallengesManager.KSActivityManagerBase.Object
	MulticastInlineDelegateProperty OnEventChallengeActivitiesReady;//[Size: 1]
	MulticastInlineDelegateProperty OnSelectedChallengeChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnEventChallengeDisplayed;//[Size: 1]
	bool EventChallengesReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool SetSelectedEventChallenge(KSActivityInstance* ActivityInstance);// 0x2753420
	bool IsPremiumChallengeInstance(const KSActivityInstance* ActivityInstance);// 0x2753210
	bool IsPremiumChallenge(const KSActivity* Activity);// 0x2753180
	bool GetSortedEventChallenges(out KSActivityInstance*[] OutActivityInstances, KSPlayerController* Player, KSPlayerState* PlayerState);// 0x2752a10
	KSActivityInstance* GetSelectedEventChallenge();// 0x27529e0
	PUMG_StoreItem*[] GetPurchasableEventBundles();// 0x2752840
	PUMG_StoreItem* GetPremiumUnlockItem();// 0x2752810
	int GetHolidayEventEndTimeRemainingSeconds();// 0x27526a0
	GrandPrizeProgression GetGrandPrizeProgression();// 0x2752660
	KSRankedSeason* GetFirstActiveRankedSeason(Object* WorldContextObject);// 0x2752540
	KSNarrativeEvent* GetFirstActiveNarrativeEvent(Object* WorldContextObject);// 0x27524b0
	PUMG_StoreItem* GetEventGrandPrizeBundle();// 0x2752450
	KSEvent* GetEventForKey(FString InKey);// 0x27523a0
	static int GetEventCreditsItemId();// 0x2752370
	FText GetEventChallengesTimeRemainingText();// 0x27522d0
	enum GetEventChallengesDisplayState();// 0x27522a0
	static GameplayTag GetEventActivityTag();// 0x2752260
	KSEvent*[] GetAllEvents();// 0x2751fb0
	bool ClearSelectedEventChallenge();// 0x2751e50
	bool CanSelectChallenge(KSActivityInstance* ActivityInstance);// 0x2751d40

--------------------------------
Class: GrandPrizeProgression
	int CurrentProgression;//[Offset: 0x0, Size: 1]
	int EndingProgression;//[Offset: 0x4, Size: 1]
	bool IsUnlocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: KSNarrativeEvent.KSEvent.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	NarrativePanelData[] NarrativePanels;//[Offset: 0x2d8, Size: 1]
	DataTable* ActivitySequenceTable;//[Offset: 0x2e8, Size: 1]
	FName ChallengeSequenceName;//[Offset: 0x2f0, Size: 1]

--------------------------------
Class: NarrativePanelData
	Texture2D* background;//[Offset: 0x0, Size: 1]
	FText Header;//[Offset: 0x28, Size: 1]
	FText Body;//[Offset: 0x40, Size: 1]

--------------------------------
Class: KSSeasonalEventChallengesManager.KSActivityManagerBase.Object

--------------------------------
Class: KSActivitySequenceManager.KSActivityManagerBase.Object
	bool IsActivitySequenceUnlocked(out const ActivitySequenceRow ActivitySequence, const KSPlayerController* PlayerController);// 0x26c67d0
	bool IsActivitySequenceComplete(out const ActivitySequenceRow ActivitySequence, const KSPlayerController* PlayerController);// 0x26c6690
	bool IsActivityFirstInSequence(const DataTable* ActivitySequenceTable, const KSActivity* Activity, FName SequenceRowName);// 0x26c6590
	bool IsActivityActiveInSequence(out const ActivitySequenceRow ActivitySequence, int64 PlayerId, const KSActivity* TargetActivity);// 0x26c6400
	bool GetPrecedingActivityInSequence(const DataTable* ActivitySequenceTable, const KSActivity* Activity, FName SequenceRowName, out KSActivity* OutPrecedingActivity);// 0x26c62b0
	bool GetFirstIncompleteInSequence(out const ActivitySequenceRow ActivitySequence, const KSPlayerController* PlayerController, out KSActivityInstance* IncompleteActivityInstance);// 0x26c6110
	int GetCompletedCountInSequence(out const ActivitySequenceRow ActivitySequence, const KSPlayerController* PlayerController);// 0x26c5fd0
	bool GetActivitySequence(const DataTable* ActivitySequenceTable, const FName SequenceRowName, out ActivitySequenceRow OutActivitySequenceRow);// 0x26c5e60

--------------------------------
Class: ActivitySequenceRow.TableRowBase
	FText DisplayName;//[Offset: 0x8, Size: 1]
	KSActivity*[] ActivitySequence;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSAudioManager.Object
	KSAudioPlayerStateParameterData* AudioPlayerStateParameters;//[Offset: 0x28, Size: 1]
	<FString,DataTable*> LoadedAudioDataTables;//[Offset: 0x50, Size: 1]
	KSGameInstance* WeakGameInstance;//[Offset: 0x170, Size: 1]
	KSJobSelectionRules* JobSelectionRules;//[Offset: 0x188, Size: 1]
	void HandleViewStateChanged(FName NewRoute, FName PreviousRoute, enum Layer);// 0x26e35e0
	void HandleSkydiveStarted(KSCharacter* Diver);// 0x26e3560
	void HandleSkydiveSkipped(KSCharacter* Diver);// 0x26e34e0
	void HandleSkydiveEnded(KSCharacter* Diver);// 0x26e3460
	void HandleRoundHasEnded(int RoundWinner, int MatchWinner);// 0x26e33a0
	void HandlePostSelectionPhaseBeginFadeOut();// 0x26e32c0
	void HandlePhaseChanged(MatchPhase NewPhase, MatchPhase PreviousPhase);// 0x26e31c0
	void HandleMatchTimerUpdate(float TimeInWholeSeconds);// 0x26e3140
	void HandleLoadingScreenEnded();// 0x26e3120
	void HandleLoadingScreenBegan();// 0x26e3100
	void HandleLeavingMap();// 0x26e30e0
	void HandleLastManStanding(KSPlayerState* LastPlayer);// 0x26e3060
	void HandleLandAfterDropship(KSCharacter* Jumper);// 0x26e2fe0
	void HandleJobSelectorAddedToController(KSJobSelector* NewSelector);// 0x26e2f60
	void HandleGameStateEndPlay(KSGameState* GameState);// 0x26e2ee0
	void HandleGameStateBeginPlay(KSGameState* GameState);// 0x26e2e60
	void HandleGameModeReceived();// 0x26e2e40
	void HandleExitDropship(KSCharacter* Jumper);// 0x26e2dc0
	void HandleDropshipDoorOpened();// 0x26e2da0
	void HandleControlPointCaptured(KSTeamState* CapturingTeam);// 0x26e2d20
	void HandleCinematicSubLevelsChanged(FString CinematicSubLevel);// 0x26e2c80
	void HandleActiveDraftTasksUpdated();// 0x26e2c60

--------------------------------
Class: KSJobSelector.DraftReplicatedActor.Info.Actor.Object
	MulticastInlineDelegateProperty OnTaskGroupsChanged;//[Size: 1]
	KSDraftTaskGroup[] TaskGroups;//[Offset: 0x9e0, Size: 1]
	int ActionTaskGroupsCount;//[Offset: 0x9f0, Size: 1]
	MulticastInlineDelegateProperty OnPinnedJobChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnInspectedJobChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHoveredJobChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnRemoteInspectedJobChanged;//[Size: 1]
	KSJobItem* HoveredJob;//[Offset: 0xa48, Size: 1]
	KSJobItem* InspectedJob;//[Offset: 0xa50, Size: 1]
	void UpdateTaskGroups();// 0x2795680
	void SetPinnedJob(KSJobItem* JobItem);// 0x2795600
	void SetInspectedJob(KSJobItem* InJob);// 0x2795260
	void SetHoveredJob(KSJobItem* InHoveredJob);// 0x27951c0
	void ServerRemoteInspectedJobChanged(DraftPlayerIdHandle Player, KSJobItem* InJob);// 0x2794e10
	bool IsPinnedJob(KSJobItem* JobItem);// 0x2794b40
	bool IsCasualTaskGroups();// 0x2794ae0
	bool IsAllActionPending();// 0x2794ab0
	bool IsAllActionComplete();// 0x2794a80
	KSJobItem* GetPersonalSelectedJob(out bool OutIsLockedIn);// 0x2794930
	KSJobItem* GetPersonalActiveTaskChoice();// 0x2794900
	bool GetLastCompletedTaskGroup(out KSDraftTaskGroup OutTaskGroup);// 0x2794710
	KSJobItem* GetInspectedJob();// 0x27946a0
	KSJobItem* GetHoveredJob();// 0x2794680
	bool GetFirstPendingTaskGroup(out KSDraftTaskGroup OutTaskGroup);// 0x27945c0
	void GetAllTasks(out DraftTask[] OutAllTasks);// 0x27943b0
	bool GetActiveTaskGroup(out KSDraftTaskGroup OutActiveTaskGroup, out int OutIndex);// 0x27942a0
	int GetActionTaskGroupsCount();// 0x2794280
	bool DraftPlayerMatches(DraftPlayerIdHandle InPlayer);// 0x27941d0
	void ClientRemoteInspectedJobChanged(DraftPlayerIdHandle Player, KSJobItem* InJob);// 0x2793e90
	void ClearPinnedJob(KSJobItem* JobItem);// 0x2793d00

--------------------------------
Class: KSDraftTaskGroup
	enum GroupState;//[Offset: 0x0, Size: 1]
	bool HasGroupType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	enum GroupType;//[Offset: 0x2, Size: 1]
	enum GroupAlignment;//[Offset: 0x3, Size: 1]
	KSDraftTaskClientInfo[] GroupTaskInfo;//[Offset: 0x8, Size: 1]
	float TimeForTasks;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSDraftTaskClientInfo
	DraftTask Task;//[Offset: 0x0, Size: 1]
	enum TaskState;//[Offset: 0x48, Size: 1]

--------------------------------
Class: KSPunishmentManager.KSActivityManagerBase.Object

--------------------------------
Class: KSBoosterManager.KSActivityManagerBase.Object

--------------------------------
Class: KSWeaponMasteryManager.KSActivityManagerBase.Object
	DataTable* MiscRewardsTable;//[Offset: 0x238, Size: 1]
	bool IsWeaponUnlockedInStore(KSWeaponAsset* WeaponAsset, KSPlayerState* PlayerState);// 0x2890c80
	bool IsWeaponMastered(KSWeaponAsset* WeaponAsset, KSPlayerState* PlayerState);// 0x2890b30
	bool IsWeaponFullyMastered(KSWeaponAsset* WeaponAsset, KSPlayerState* PlayerState);// 0x2890b30
	void GetWeaponMasteryRewardDisplayData(enum MasteryType, ActivityTier RewardTier, FText[] RewardItemsTypeTexts, Object* MasteryContextObject, out WeaponMasteryRewardDisplayData[] RewardData);// 0x2890670
	bool GetWeaponMasteryLevel(KSWeaponAsset* WeaponAsset, out int OutLevel);// 0x28905a0
	int GetLockedMilestonesCount(KSWeaponAsset* WeaponAsset);// 0x2890320
	bool GetAllObjectiveProgressInstances(KSWeaponAsset* WeaponAsset, out KSActivityInstance*[] OutObjectiveInstances, KSPlayerState* PlayerState);// 0x2890040
	KSActivityInstance* FindActivityInstanceByProgressLootId(const int64 ProgressLootId, KSPlayerController* Player);// 0x288f260

--------------------------------
Class: WeaponMasteryRewardDisplayData
	FText Name;//[Offset: 0x0, Size: 1]
	FText Description;//[Offset: 0x18, Size: 1]
	Texture2D* SoftIcon;//[Offset: 0x30, Size: 1]
	GameplayTag RarityTag;//[Offset: 0x58, Size: 1]
	FText ItemTypeText;//[Offset: 0x60, Size: 1]
	enum RewardGroup;//[Offset: 0x78, Size: 1]
	int DisplayQuantity;//[Offset: 0x7c, Size: 1]
	bool AlreadyOwned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	PUMG_StoreItem* PreviewStoreItem;//[Offset: 0x88, Size: 1]
	enum RewardPreviewType;//[Offset: 0x90, Size: 1]

--------------------------------
Class: PUMG_VoiceChatManager.Object
	bool bPendingPartyVoipJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bPendingMatchVoipJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	FString CurrentPartyVoiceChatChannel;//[Offset: 0x30, Size: 1]
	int CurrentPartyId;//[Offset: 0x40, Size: 1]
	FString CurrentMatchVoiceChatChannel;//[Offset: 0x48, Size: 1]
	enum CurrentMatchStatus;//[Offset: 0x58, Size: 1]
	SerializedMatchId CurrentMatchId;//[Offset: 0x60, Size: 1]
	bool bCurrentIsTokenForTaskForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 1]
	PUMG_PartyDataFactory* PartyDataFactory;//[Offset: 0x78, Size: 1]
	PUMG_QueueDataFactory* QueueDataFactory;//[Offset: 0x80, Size: 1]
	void OnPartyDataUpdated();// 0xe9c930
	void OnMatchStatusUpdated(enum MatchStatus);// 0xe9c8b0

--------------------------------
Class: PUMG_PartyDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnPartyDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyLocalPlayerLeft;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyLocalPlayerPromoted;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMemberPromoted;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMemberDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnPendingPartyMemberDataAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnPendingPartyMemberAccepted;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMemberRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMemberLeft;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyDisbanded;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationError;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationSent;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyMessageReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationAccepted;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationRejected;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInvitationExpired;//[Size: 1]
	MulticastInlineDelegateProperty OnPartyInfoUpdated;//[Size: 1]
	PUMG_PartyMemberData[] PartyMembers;//[Offset: 0x158, Size: 1]
	PUMG_PlayerInfo* PartyInviter;//[Offset: 0x168, Size: 1]
	FString LastInviteSentErrorMessage;//[Offset: 0x170, Size: 1]
	int MaxPartySize;//[Offset: 0x198, Size: 1]
	void UIX_PromoteMemberToLeader(int64 PlayerId);// 0xe8dfd0
	void UIX_LeaveParty();// 0xe8d410
	void UIX_KickMemberFromParty(int64 PlayerId);// 0xe8d380
	bool UIX_InviteMemberToParty(int64 PlayerId);// 0xe8d2e0
	void UIX_GiveInvitePermission(int64 PlayerId);// 0xe8d250
	void UIX_DisbandParty();// 0xe8d230
	void UIX_DenyPartyInvitation();// 0xe8d210
	void UIX_AcceptPartyInvitation();// 0xe8d1f0
	void SetPartyInfo(FString Key, FString Value);// 0xe8d000
	void SendPartyMessage(FString Data);// 0xe8cf60
	void PartyPromoteResponse();// 0xe8cec0
	void PartyLeaveResponse();// 0xe8cea0
	void PartyKickResponse();// 0xe8ce80
	bool IsPlayerInParty(int64 PlayerId);// 0xe8c970
	bool IsPartyMaxed();// 0xe8c950
	bool IsLeader();// 0xe8c920
	bool IsInParty();// 0xe8c8f0
	bool HasInvitePrivileges(int64 PlayerId);// 0xe8c860
	FText GetPartyMemeberName(int64 PlayerId);// 0xe8c3b0
	PUMG_PartyMemberData[] GetPartyMembers();// 0xe8c220
	int GetPartyMemberCount();// 0xe8c200
	PUMG_PartyMemberData GetPartyMemberByID(int64 PlayerId);// 0xe8c0d0
	PUMG_PlayerInfo* GetPartyInviter();// 0xe8c0b0
	enum GetPartyInviteMode();// 0xe8c090
	FString GetPartyInfo(FString Key);// 0xe8bfa0
	int GetMaxPartyMembers();// 0xe8bf80
	bool CheckPartyMemberIsLeader(int64 PlayerId);// 0xe8bc30

--------------------------------
Class: PUMG_PartyMemberData
	PUMG_PlayerInfo* PlayerData;//[Offset: 0x0, Size: 1]
	bool IsFriend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	FText StatusMessage;//[Offset: 0x10, Size: 1]
	bool Online;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool IsPending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool CanInvite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool IsLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	bool IsReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]

--------------------------------
Class: PUMG_QueueDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnQueueJoined;//[Size: 1]
	MulticastInlineDelegateProperty OnQueueLeft;//[Size: 1]
	MulticastInlineDelegateProperty OnQueueStatusChange;//[Size: 1]
	MulticastInlineDelegateProperty OnQueueDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnMatchStatusUpdatedError;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomMatchJoined;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomQueueMemberAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomQueueMemberRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomQueueMemberUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomQueueChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCustomInviteErrorRecieved;//[Size: 1]
	int PendingCustomMatchMapId;//[Offset: 0xe8, Size: 1]
	PUMG_ActivityQueuePair[] ActivityQueuePairs;//[Offset: 0xf0, Size: 1]
	FString ActivityToJoin;//[Offset: 0x100, Size: 1]
	bool bActivityToJoinIsMultiplayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	bool bRequestedMatchRejoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111, Size: 1]
	int[] QueueIds;//[Offset: 0x118, Size: 1]
	float QueueUpdatePollInterval;//[Offset: 0x188, Size: 1]
	TimerHandle QueueUpdateTimerHandle;//[Offset: 0x190, Size: 1]
	PUMG_CustomMatchMember[] CustomMatchMembers;//[Offset: 0x198, Size: 1]
	int CustomMatchSpectateTeamId;//[Offset: 0x218, Size: 1]
	int[] RepeatMapGameIds;//[Offset: 0x220, Size: 1]
	float RepeatMapOdds;//[Offset: 0x230, Size: 1]
	void StartCustomMatch(bool bDoChecks);// 0xe921d0
	void SetPlayerTeamCustomMatch(int64 PlayerId, int TeamId);// 0xe92110
	void SetPendingMapForCustomQueue(int MapId);// 0xe92090
	void SetMapForCustomMatch(int MapId);// 0xe92010
	bool LeaveQueue(bool bLeaveMatch);// 0xe91d60
	void KickFromCustomMatch(int64 PlayerId);// 0xe91ce0
	bool JoinQueue(int QueueId);// 0xe91c40
	bool IsQueueActive(int QueueId);// 0xe91ba0
	static bool IsInQueue();// 0xe91b70
	static bool IsInGame();// 0xe91b40
	static bool IsInCustomMatch();// 0xe91b10
	bool IsCustomInvitePending(int64 PlayerId);// 0xe91a50
	void InviteToCustomMatch(int64 PlayerId);// 0xe919d0
	void IncrementPlayerTeamCustomMatch(int64 PlayerId);// 0xe91950
	static bool HasCurrentMatchId();// 0xe91920
	void HandleInviteCooldowns();// 0xe91900
	void HandleConfirmKickCustomPlayer();// 0xe918e0
	float GetTimeInQueueSeconds();// 0xe918b0
	int GetTeamMemberCount(int TeamId);// 0xe91820
	int[] GetQueueIds();// 0xe916a0
	int GetPlayerTeamId(int64 PlayerId);// 0xe91610
	int GetPendingCustomMatchMapId();// 0xe915d0
	int GetNextTeamId(int RelativeToTeamId);// 0xe91540
	bool GetIsJoiningBackfillGame();// 0xe913f0
	enum GetCustomMatchPermissions(int64 PlayerId);// 0xe91360
	PUMG_CustomMatchMember[] GetCustomMatchMembers();// 0xe912d0
	int GetCustomMatchMapId();// 0xe912a0
	PUMG_PlayerInfo* GetCustomMatchInviterPlayerInfo();// 0xe91270
	enum GetCurrentQueueMatchState();// 0xe91240
	static bool GetCurrentQueueId(out int QueueId);// 0xe911b0
	bool GetBaseQueueInfoById(int QueueId, out PUMG_ClientQueueInfo InClientQueueInfo);// 0xe90ff0
	void DeclineMatchInvite();// 0xe90f30
	void CreateCustomMatch(int QueueId, int TeamSize, int TaskForceCount);// 0xe90e40
	enum CheckCustomMatch(bool bAllowGMOverride);// 0xe90d70
	bool CanQueue();// 0xe90d40
	bool CanLocalPlayerPromoteCustomLobbyPlayer(int64 PlayerId);// 0xe90cb0
	bool CanLocalPlayerKickCustomLobbyPlayer(int64 PlayerId);// 0xe90c20
	bool CanLocalPlayerControlCustomLobbyPlayer(int64 PlayerId);// 0xe90b90
	bool BackfillQueue(int QueueId);// 0xe90af0
	bool AttemptRejoinMatch(bool Forced);// 0xe90a50
	void AcceptMatchInvite();// 0xe90970

--------------------------------
Class: PUMG_CustomMatchMember
	PUMG_PlayerInfo* playerinfo;//[Offset: 0x0, Size: 1]
	int TeamId;//[Offset: 0x8, Size: 1]
	enum Permissions;//[Offset: 0xc, Size: 1]

--------------------------------
Class: PUMG_ClientQueueInfo
	FText Name;//[Offset: 0x8, Size: 1]
	FText Description;//[Offset: 0x20, Size: 1]
	int ID;//[Offset: 0x38, Size: 1]
	int LevelLock;//[Offset: 0x3c, Size: 1]
	int MinPartySize;//[Offset: 0x40, Size: 1]
	int MaxPartySize;//[Offset: 0x44, Size: 1]
	bool IsCustom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]

--------------------------------
Class: PUMG_ActivityQueuePair
	FString ActivityId;//[Offset: 0x0, Size: 1]
	int QueueId;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSInstancePlayerStatManager.KSActivityManagerBase.Object
	<int64,KSInstancePlayerStatEntry*> PlayerStatMap;//[Offset: 0x248, Size: 1]
	FString StatWrapperDataTablePath;//[Offset: 0x298, Size: 1]
	DataTable* StatWrapperDataTable;//[Offset: 0x2a8, Size: 1]
	KSStatWrapper* GetStatWrapperForTag(out const GameplayTag StatTag);// 0x2781c00

--------------------------------
Class: KSInstancePlayerStatEntry.Object
	<GameplayTag,float> playerStats;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSMobileActivityManager.KSActivityManagerBase.Object
	bool IsLootIdMobileXPActivityReward(int LootId);// 0x27b5450
	KSActivityInstance* GetMobileXPActivityInstanceByLootId(int64 InLootId);// 0x27b46c0
	bool GetMobileWeaponProgress(KSWeaponAsset* InWeaponAsset, out int OutWeaponLevel, out int OutCurrentLevelProgress, out int OutCurrentLevelSize);// 0x27b4520
	KSActivityInstance* GetMobilePlayerXpActivityInstance();// 0x27b44f0
	KSActivityInstance* FindMobileWeaponProgressActivityInstance(KSWeaponAsset* InWeaponAsset);// 0x27b3340

--------------------------------
Class: KSMarketingEventHelper.Object
	KSGameInstance* GameInstance;//[Offset: 0x28, Size: 1]
	class KSMarketingAPI[] MarketingPlugins;//[Offset: 0x30, Size: 1]
	KSMarketingAPI*[] MarketingHelpers;//[Offset: 0x40, Size: 1]
	void HandleTutorialComplete();// 0x27ae950
	void HandleLevelUp(KSActivityInstance* ActivityInstance, int Tier, int Count);// 0x27ae570
	void BindPlayerStatsDelegates(int64 InPlayerId, out const KSActivityInstance*[] ActivityInstances);// 0x27ade30
	void BindGameStateDelegates(KSGameState* InGameState);// 0x27addb0

--------------------------------
Class: KSMarketingAPI.Object

--------------------------------
Class: KSCallToActionManager.Object
	bool UnregisterCTAStateChanged(out const FName[] CTAPath, delegate Callback);// 0x2706290
	bool UnregisterCTASeenAmountChanged(out const FName[] CTAPath, delegate Callback);// 0x2706170
	int UnregisterCTAActiveChildrenCountChanged(out const FName[] CTAPath, delegate Callback);// 0x2706050
	int SetCTASeenAmount(out const FName[] CTAPath, int SeenAmount);// 0x2705f60
	bool SetCTASeen(out const FName[] CTAPath, bool bSetChildrenSeen);// 0x2705e60
	bool RegisterCTAStateChanged(out const FName[] CTAPath, delegate Callback);// 0x2705d20
	bool RegisterCTASeenAmountChanged(out const FName[] CTAPath, delegate Callback);// 0x2705c00
	int RegisterCTAActiveChildrenCountChanged(out const FName[] CTAPath, delegate Callback);// 0x2705ae0
	void OnInventoryItemsUpdated(out const <InventoryId> UpdatedItems);// 0x27058f0
	bool IsCTAActive(out const FName[] CTAPath);// 0x2705690
	bool GetCTAStateAndAmounts(out const FName[] CTAPath, out int OutInventoryAmount, out int OutSeenAmount, out int OutActiveChildrenCount);// 0x2705310
	int GetCTAActiveChildrenCount(out const FName[] CTAPath);// 0x2705250

--------------------------------
Class: KSAnimStats
	float PlayTime;//[Offset: 0x0, Size: 1]
	float PlayTimeWeighted;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSPlayerActivityInstanceContainer.Object
	<int,KSActivityInstance*> ActivityInstances;//[Offset: 0x30, Size: 1]

--------------------------------
Class: Timespan

--------------------------------
Class: ActivityTierStructure
	int ProgressRequired;//[Offset: 0x0, Size: 1]
	FText Name;//[Offset: 0x8, Size: 1]
	FText Description;//[Offset: 0x20, Size: 1]
	Texture2D* Image;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSEventTrackerPlayerData.Object
	bool UsesPlacementMatches();// 0x27539b0
	int SetInitialRankedXp();// 0x27533f0
	bool IsRankedLossPreventionBoosterActive();// 0x27532a0
	bool IsPlayerDeserter();// 0x2753150
	bool IsLossPreventionEnabled();// 0x2753000
	bool IsInLastPlacementMatch();// 0x2752f70
	void IncrementPlacementMatches();// 0x2752bd0
	bool HasCompletedPlacementMatches();// 0x2752ba0
	int GetTeamNum();// 0x2752b40
	float GetRankedXpWinBaseValue();// 0x2752980
	float GetRankedXpMinBonusClamp();// 0x2752950
	float GetRankedXpMaxBonusClamp();// 0x2752920
	float GetRankedXpLossBaseValue();// 0x27528f0
	float GetRankDifferenceMultiplier();// 0x27528c0
	FString GetPlayerName();// 0x2752760
	int GetPlacementMatchCount();// 0x2752730
	int GetMmrZoneRankedLevel();// 0x2752700
	float GetMMR();// 0x27526d0
	int GetFavoredMatchBonusXp();// 0x2752480
	int GetCurrentRankedLevel();// 0x2752190

--------------------------------
Class: KSActivityComponent_WeaponMastery_Milestone.KSActivityComponent.DataAsset.Object
	int MilestoneTier;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSActivityComponent.DataAsset.Object

--------------------------------
Class: KSActivityRequirement.DataAsset.Object

--------------------------------
Class: KSActivityRewardCondition.DataAsset.Object
	bool IsCombatConditionMet(out const CombatEventInfo InDamageInfo);// 0x26c1d70

--------------------------------
Class: KSActivityComponent_MercMastery.KSActivityComponent.DataAsset.Object
	GameplayTag MercMasteryStatTag;//[Offset: 0x30, Size: 1]
	Texture2D* Icon;//[Offset: 0x38, Size: 1]
	FText DisplayName;//[Offset: 0x60, Size: 1]

--------------------------------
Class: KSActivityComponent_LoginReward.KSActivityComponent.DataAsset.Object
	int64 LoginNewRewardLootId;//[Offset: 0x30, Size: 1]
	int64 LoginChallengeTracker;//[Offset: 0x38, Size: 1]
	bool CanGrabNewLoginReward();// 0x26b9e30
	void AttemptClaimLoginReward();// 0x26b9df0

--------------------------------
Class: KSActivityComponent_Job.KSActivityComponent.DataAsset.Object
	KSJobItem* JobItem;//[Offset: 0x30, Size: 1]
	void LoadJobItem();// 0x26bcd50
	int64 GetJobItemId();// 0x26bbc10
	KSJobItem* GetJobItem();// 0x26bbbe0

--------------------------------
Class: KSActivityComponent_Contract.KSActivityComponent.DataAsset.Object
	GameplayTag TimedContractTag;//[Offset: 0x30, Size: 1]
	bool AllowRerolls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 1]
	int RerollTrackerItemId;//[Offset: 0x3c, Size: 1]
	int RerollsAllowed;//[Offset: 0x40, Size: 1]
	void RerollContract();// 0x26bd9a0
	void PromptRerollContract(PUMG_HUD* HUD, const KSActivity* OwningActivity);// 0x26bd590
	int GetRerollLootId(const KSActivity* OwningActivity);// 0x26bc460
	bool CanRerollContract(const KSActivityInstance* OwningActivityInstance);// 0x26b9e60

--------------------------------
Class: KSActivityComponent_BattlePass.KSActivityComponent.DataAsset.Object
	GameplayTag SeasonTag;//[Offset: 0x30, Size: 1]
	KSBattlepass* Battlepass;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSActivityComponent_Award.KSActivityComponent.DataAsset.Object

--------------------------------
Class: KSActivityComponent_Achievement.KSActivityComponent.DataAsset.Object
	<FName,FString> AchievementIdByOSSName;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSSubActivityEntry
	bool bOverrideProgress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int ProgressOverride;//[Offset: 0x4, Size: 1]
	KSActivity* SubActivity;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSJobSelectionComponent.ActorComponent.Object
	JobSelectionList JobSelectionList;//[Offset: 0xb0, Size: 1]
	SelectionActivityStatus SelectionActivityStatus;//[Offset: 0x1d0, Size: 1]
	KSJobSelectionAllowUnownedJobs AllowUnownedJobsStruct;//[Offset: 0x220, Size: 1]
	enum EnforcedJobUniqueness;//[Offset: 0x240, Size: 1]
	int JobTableVendorId;//[Offset: 0x244, Size: 1]
	JobCollection* JobCollection;//[Offset: 0x248, Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionEntryAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionEntryChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionInitialized;//[Size: 1]
	MulticastInlineDelegateProperty OnAllPlayersLockedIn;//[Size: 1]
	MulticastInlineDelegateProperty OnSelectionActivityStatusChanged;//[Size: 1]
	int[] BannedJobIds;//[Offset: 0x300, Size: 1]
	int ExpectedBanCount;//[Offset: 0x310, Size: 1]
	KSTeamState* CachedOwner;//[Offset: 0x318, Size: 1]
	bool bSelectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	int EntryCount;//[Offset: 0x324, Size: 1]
	KSAudioManager* pAudioManager;//[Offset: 0x330, Size: 1]
	void OnRep_SelectionActivityStatus();// 0x2791750
	void OnRep_EntryCount();// 0x2791730
	void OnRep_AllowUnownedJobs();// 0x2791730
	void OnPhaseChange(out const MatchPhase NewPhase);// 0x2791690
	void NewPlayerStarting(PlayerController* NewPlayer);// 0x2791610
	void NewBotStarting(KSAIController* NewBot);// 0x2791610
	static bool JobSelectEntryMatchesPlayerState(out const JobSelectionEntry Entry, const KSPlayerState* PlayerState);// 0x2791510
	static bool JobSelectEntryMatchesPersistentPlayer(out const JobSelectionEntry Entry, const KSPersistentPlayerData* PersistentPlayer);// 0x2791410
	bool IsReady();// 0x2791340
	bool IsPlayerCurrentlySelecting(const KSPlayerState* InPlayerState);// 0x27912b0
	void InitializeJobSelectionList();// 0x2791260
	KSPlayerState*[] GetSortedPlayers();// 0x27911e0
	SelectionActivityStatus GetSelectionActivityStatusInfo();// 0x2790c20
	enum GetSelectionActivityState();// 0x2790c00
	JobSelectionEntry[] GetJobSelectionEntries();// 0x27905f0
	enum FindOpponentSelectionActivityState();// 0x278f5c0
	bool CanPlayerLockInSelection(const KSPlayerState* InPlayerState);// 0x278f4b0

--------------------------------
Class: JobSelectionEntry.FastArraySerializerItem
	int JobId;//[Offset: 0xc, Size: 1]
	PlayerJobSelectInfo[] CurrentPlayerInfos;//[Offset: 0x10, Size: 1]
	enum LocalAvailability;//[Offset: 0x20, Size: 1]
	enum CachedJobUniquenessRule;//[Offset: 0x21, Size: 1]

--------------------------------
Class: PlayerJobSelectInfo
	KSPlayerState* PlayerState;//[Offset: 0x0, Size: 1]
	SerializedMctsNetId NetId;//[Offset: 0x8, Size: 1]
	int SkinId;//[Offset: 0x10, Size: 1]
	int JobMasteryXp;//[Offset: 0x14, Size: 1]
	enum SelectionState;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SelectionActivityStatus
	enum SelectionState;//[Offset: 0x30, Size: 1]
	KSPlayerState*[] CurrentlySelectingPlayers;//[Offset: 0x38, Size: 1]
	int NumBansOccurred;//[Offset: 0x48, Size: 1]

--------------------------------
Class: JobSelectionList.FastArraySerializer
	JobSelectionEntry[] EntryMap;//[Offset: 0x108, Size: 1]
	KSJobSelectionComponent* Owner;//[Offset: 0x118, Size: 1]

--------------------------------
Class: KSJobSelectionAllowUnownedJobs
	enum AllowUnownedJobsState;//[Offset: 0x0, Size: 1]
	int[] AllowedUnownedJobIds;//[Offset: 0x8, Size: 1]
	bool IsInitializationFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18, Size: 1]

--------------------------------
Class: MultiPlayerSkinMapReplicator.FastArraySerializer
	MultiSkinMapReplicatorEntry[] RepItems;//[Offset: 0x108, Size: 1]
	<KSPersistentPlayerId,PlayerSkinMap> PlayerSkinMaps;//[Offset: 0x118, Size: 1]

--------------------------------
Class: MultiSkinMapReplicatorEntry.FastArraySerializerItem
	KSPersistentPlayerId PlayerId;//[Offset: 0x10, Size: 1]
	KSItem* Item;//[Offset: 0x20, Size: 1]
	KSItem* Skin;//[Offset: 0x28, Size: 1]

--------------------------------
Class: PlayerSkinMap
	KSPersistentPlayerId PlayerId;//[Offset: 0x0, Size: 1]
	<KSItem*,KSItem*> SkinMap;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSPollData
	int VoterCount;//[Offset: 0x0, Size: 1]
	int VotesInFavor;//[Offset: 0x4, Size: 1]
	int VotesAgainst;//[Offset: 0x8, Size: 1]
	float TimeElapsed;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSPlayerStateAssistant.Info.Actor.Object
	KSResourceManagerComponent* ResourceManagerComponent;//[Offset: 0x220, Size: 1]
	KSPersistentPlayerId LastOwnerPlayerId;//[Offset: 0x228, Size: 1]
	KSPlayerState* PlayerStateOwner;//[Offset: 0x238, Size: 1]
	KSPlayerModManager* PlayerModManager;//[Offset: 0x240, Size: 1]
	void SetPlayerStateOwner(KSPlayerState* NewPlayerState);// 0x281d550
	void SetPlayerModManager(KSPlayerModManager* InPlayerModManager);// 0x281d4d0
	void RemoveAndDestroyPlayerStateAssistant();// 0x281d350
	KSResourceManagerComponent* GetResourceManagerComponent();// 0x281be80
	KSPlayerState* GetPlayerStateOwner();// 0x281bad0
	KSPlayerModManager* GetPlayerModManager();// 0x281bab0
	KSPersistentPlayerId GetLastOwnerPlayerId();// 0x281b920

--------------------------------
Class: KSPlayerModManager.Info.Actor.Object
	bool bOnlyChargeModsWhenAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	KSPlayerState* PlayerStateOwner;//[Offset: 0x228, Size: 1]
	KSPlayerModInstance*[] ActiveMods;//[Offset: 0x248, Size: 1]
	void SetPlayerStateOwner(KSPlayerState* NewPlayerState);// 0x2807570
	bool RemoveModsOfSource(enum ModSource);// 0x2807050
	bool RemoveModInstance(KSPlayerModInstance* ModInst, bool bRemoveAll);// 0x2806f90
	bool RemoveMod(KSPlayerMod* Mod, bool RemoveAll);// 0x2806ed0
	void RemoveAndDestroyPlayerModManager();// 0x2705750
	bool HasModOfSource(const KSPlayerMod* TestPlayerMod, enum TestSource);// 0x28060f0
	bool HasModAny(out const KSPlayerMod*[] TestPlayerMods);// 0x2806030
	bool HasMod(const KSPlayerMod* TestPlayerMod);// 0x2805fa0
	bool GiveModInstance(KSPlayerMod* Mod, KSPlayerState* ModInstigator, out KSPlayerModInstance* Instance, bool Unique, enum ModSource, KSCharacterFoundation* ModRecipient);// 0x2805db0
	void GiveModAttachment(const KSPlayerModAttachment* Attachment, const KSPlayerMod* TargetMod);// 0x2805cf0
	bool GiveMod(KSPlayerMod* Mod, KSPlayerState* ModInstigator, bool Unique, enum ModSource);// 0x2805b90
	KSPlayerState* GetPlayerStateOwner();// 0x2805730
	bool GetModInstancesOfType(enum Type, out KSPlayerModInstance*[] OutMods);// 0x28055a0
	bool GetModInstancesByModAsset(const KSPlayerMod* InModAsset, KSPlayerState* ModInstigator, out KSPlayerModInstance*[] OutMods);// 0x2805480
	bool GetModInstances(out KSPlayerModInstance*[] OutMods);// 0x28053c0
	bool GetGameModeMods(out KSModInst_Activated*[] OutMods, bool bIncludeChildMods);// 0x2805230
	bool GetActivatableMods(out KSModInst_Activated*[] OutMods, bool bIncludeChildMods);// 0x2805030
	bool AnyActivatableModsActive();// 0x2804850
	void AddDefaultPerSecondCharge();// 0x2804830
	bool ActivatableModAtIndexActive(int AbilityIndex);// 0x28047a0
	bool ActivatableGameModeModAtIndexActive(int AbilityIndex);// 0x2804710

--------------------------------
Class: KSModInst_Activated.KSPlayerModInstance.ActorComponent.Object
	bool bCanBecomeFullyChargedOnEndActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 1]
	bool bUsesAbilityMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e1, Size: 1]
	byte MovementMode;//[Offset: 0x1e2, Size: 1]
	byte CustomMovementMode;//[Offset: 0x1e3, Size: 1]
	KSTimerComponent* LockoutTimer;//[Offset: 0x1e8, Size: 1]
	bool bIsLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 1]
	MulticastInlineDelegateProperty OnModLocked;//[Size: 1]
	MulticastInlineDelegateProperty OnModLockoutTick;//[Size: 1]
	KSTimerComponent* SetupTimer;//[Offset: 0x238, Size: 1]
	MulticastInlineDelegateProperty OnBonusAbilityDurationReceived;//[Size: 1]
	float BonusAbilityDuration;//[Offset: 0x250, Size: 1]
	float LocalBonusAbilityDuration;//[Offset: 0x254, Size: 1]
	KSActionRestrictor SetupActionRestrictor;//[Offset: 0x258, Size: 1]
	int CurrentSetupRestrictor;//[Offset: 0x260, Size: 1]
	KSActionRestrictor RecoveryActionRestrictor;//[Offset: 0x264, Size: 1]
	bool bUseDownedActionRestrictors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c, Size: 1]
	KSActionRestrictor DownedSetupActionRestrictor;//[Offset: 0x26d, Size: 1]
	KSActionRestrictor DownedRecoveryActionRestrictor;//[Offset: 0x275, Size: 1]
	MulticastInlineDelegateProperty OnModActivated;//[Size: 1]
	KSPlayerMod_Activated* ActivateMod;//[Offset: 0x2a8, Size: 1]
	MulticastInlineDelegateProperty OnChargeChanged;//[Size: 1]
	bool bEndActivationOnNullCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bDelayChargeConsumption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	bool bConsumeChargeOnEndActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 1]
	MulticastInlineDelegateProperty OnModSetup;//[Size: 1]
	AkAudioEvent* ActivationSoundEvent;//[Offset: 0x2d8, Size: 1]
	AkAudioEvent* SpacialActivationSoundEvent;//[Offset: 0x2e0, Size: 1]
	AkAudioEvent* SetupSoundEvent;//[Offset: 0x2e8, Size: 1]
	AkAudioEvent* SpacialSetupSoundEvent;//[Offset: 0x2f0, Size: 1]
	AkAudioEvent* DeactivationSoundEvent;//[Offset: 0x2f8, Size: 1]
	bool bUnCrouchOnActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 1]
	bool bCanActivateWithoutRequiredCharge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	bool bCanAddPerSecondChargeWhileActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x302, Size: 1]
	MulticastInlineDelegateProperty OnModFailedToActivate;//[Size: 1]
	float CurrentCharge;//[Offset: 0x348, Size: 1]
	bool bDeactivateWhenWeaponFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x448, Size: 1]
	class KSWeapon[] WeaponsToIgnore;//[Offset: 0x450, Size: 1]
	bool bDeactivateWhenMacGuffinFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x460, Size: 1]
	class DamageType[] DamageTypesThatCancel;//[Offset: 0x468, Size: 1]
	MulticastInlineDelegateProperty OnModHoldChanged;//[Size: 1]
	int CurrentlyHeldId;//[Offset: 0x488, Size: 1]
	int LocalHeldId;//[Offset: 0x48c, Size: 1]
	bool bCurrentlyHeld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x490, Size: 1]
	bool bActivateOnInputRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x491, Size: 1]
	bool bActivatedByInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x492, Size: 1]
	KSModInst_ActivatedStateMachine* ActivatedStateMachine;//[Offset: 0x498, Size: 1]
	void UpdateChargeDirect(float DeltaCharge, bool bForce);// 0x27b6140
	void UpdateCharge(int Delta);// 0x27b60c0
	bool TryToCancel();// 0x27b6070
	bool TryToActivate();// 0x27b6040
	bool ShouldBotUseAbilityNow();// 0x27b5f50
	bool ShouldActivateOnInputRelease();// 0x27b5f20
	bool ShouldActivateByInput();// 0x2788c40
	void SetAbilityMovementMode(byte InMovementMode, byte InCustomMovementMode);// 0x27b5c90
	void SetAbilityMovementDisabled(bool bDisable);// 0x27b5c10
	void RefundCharge();// 0x27b5950
	void Recharge();// 0x27b5930
	void OnSetupComplete();// 0x27b5780
	void OnSetupActive(bool bIsTimerActive);// 0x27b56f0
	void OnSetup();// 0xe9bfc0
	void OnRep_SetupTimer();// 0x27b56d0
	void OnRep_LockoutTimer();// 0x27b56b0
	void OnRep_Locked();// 0x27b5690
	void OnRep_CurrentlyHeldId();// 0x27b5670
	void OnRep_CurrentCharge();// 0x2743930
	void OnRep_BonusAbilityDuration();// 0x27b5650
	void OnOwnerDownStateChanged(KSPlayerState* DownedPlayer);// 0x1fb4470
	void OnLockoutTimerTick(float Seconds);// 0x27b55d0
	void OnLockoutTimerActive(bool bIsTimerActive);// 0x27b5540
	void OnFullyCharged();// 0x27b5520
	void OnEndRecovery();// 0x2d74e00
	void OnEndActivationWarning();// 0x2d74e00
	void OnEndActivation();// 0x1f66a10
	void OnDownOther(KSCharacter* Other);// 0xe9c180
	void OnCancelSetup();// 0x1f66810
	void OnActivation();// 0x1fb3ab0
	void OnAbilityReleased();// 0x27b5500
	bool IsLocked();// 0x27b5420
	bool IsInSetup();// 0x27b5070
	bool IsInActivatableState(out enum OutAbilityFailureType);// 0x27b4fc0
	bool IsCharacterAbility();// 0x27b4f90
	bool IsActivated();// 0x27b4f60
	bool IsAbilityMovementDisabled();// 0x27b4f20
	void HandleWeaponFireStarted(KSWeapon* Weapon);// 0x27b4ea0
	void HandleSetupTimerComplete();// 0x27b4e80
	void HandleSetupTimerActive(bool bIsTimerActive);// 0x27b4df0
	void HandleRoundHasEnded(int RoundWinner, int MatchWinner);// 0x27b4d30
	void HandleCharacterOwnerTakeDamage(Actor* InActor, float DamageAmount, const DamageType* DamageTypeCDO, Controller* EventInstigator, Actor* DamageCauser);// 0x27b4ba0
	KSModInst_ActivatedStateMachine* GetStateMachine();// 0x27b4ac0
	KSActionRestrictor GetSetupActionRestrictor();// 0x27b4990
	int GetRequiredCharge();// 0x27b4860
	KSActionRestrictor GetRecoveryActionRestrictor();// 0x27b4820
	float GetPerSecondCharge();// 0x27b47f0
	int GetMaximumCharge();// 0x27b4360
	float GetLockoutTimeRemaining();// 0x27b4270
	KSPlayerMod_Activated* GetDisplayActivatedModAsset();// 0x27b36e0
	int GetDefaultCharge();// 0x27b36b0
	int GetCurrentCharge();// 0x27b3680
	float GetBonusDuration();// 0x27b3630
	KSPlayerMod_Activated* GetActivatedModAsset();// 0x27b3600
	float GetAbilitySetupDuration();// 0x27b35c0
	float GetAbilityRecoveryDuration();// 0x27b3580
	float GetAbilityDuration();// 0x27b3540
	void EndActivation();// 0x1fa1660
	void DownOtherTriggered(KSCharacter* Other);// 0x27b2a30
	void ConsumeChargeAmount(float Amount);// 0x27b29b0
	void ConsumeCharge();// 0x27b2990
	void ClientModFailedToActivate(enum AbilityFailureType);// 0x27b2910
	bool CanTryToCancel();// 0x27b2680
	bool CanActivateWhileDowned();// 0x27b2650
	bool CanActivateNow(out enum OutAbilityFailureType);// 0x27b25b0
	void BroadcastModActivated(bool bActive);// 0x27b2520
	void BroadcastEndRecovery();// 0xe9d980
	void BroadcastEndActivationWarning();// 0xe9c950
	void BroadcastCancel();// 0x27b2500
	void BeginActivation();// 0xe9c890
	void AwardBonusAbilityDuration(float BonusDuration);// 0x27b2480
	void AbilitySetupRequestTimeout();// 0x27b2460
	void AbilityActivationRequestTimeout();// 0x27b2440

--------------------------------
Class: KSModInst_ActivatedStateMachine.KSModInst_Activated.KSPlayerModInstance.ActorComponent.Object
	<FName,KSPlayerMod_Activated*> ManagedModAssets;//[Offset: 0x4a0, Size: 1]
	StateMachineModEntry[] ManagedMods;//[Offset: 0x4f0, Size: 1]
	KSModInst_Activated* CurrentActiveMod;//[Offset: 0x500, Size: 1]
	KSModInst_Activated* LocalActiveMod;//[Offset: 0x508, Size: 1]
	bool bChargeAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x510, Size: 1]
	bool bSharedDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x511, Size: 1]
	bool bDelayActivation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x512, Size: 1]
	StateMachineObjectEntry[] StateStorage;//[Offset: 0x518, Size: 1]
	MulticastInlineDelegateProperty OnStateStorageChangedDel;//[Size: 1]
	bool TryToSetAsActiveMod(FName Key);// 0x27bac00
	void RemoveFromStateStorage(StateMachineObjectEntry Entry);// 0x27baaa0
	void OnRep_StateStorage();// 0x27ba850
	void OnRep_ManagedModsChanged();// 0x27ba800
	void OnRep_CurrentActiveMod();// 0x27ba780
	void OnManagedModsChanged();// 0x2d74e00
	void OnActiveModFailedToActivate(KSModInst_Activated* AttemptedMod, enum AbilityFailureType);// 0x27ba330
	void OnActiveModChargeChanged(KSModInst_Activated* ChargingModInstance);// 0x27ba2b0
	bool IsUsingSharedDuration();// 0x27ba290
	bool GetStoredPlayerStates(FName Key, out KSPlayerState*[] OutReferences);// 0x27b9c90
	bool GetStateStorage(FName Key, out StateMachineObjectEntry[] OutReferences);// 0x27b9b90
	void GetManagedModInstances(out KSModInst_Activated*[] OutManagedMods);// 0x27b9ab0
	KSModInst_Activated* GetCurrentActiveMod();// 0xfa7620
	void ClearStateStorage(FName Key);// 0x27b9900
	void AddToStateStorage(out const StateMachineObjectEntry Entry);// 0x27b93f0
	void AddPlayerStateToStateStorage(FName Key, KSPlayerState* PlayerState);// 0x27b9330
	void ActivateStateMachine();// 0x27b9310

--------------------------------
Class: KSPlayerMod_Activated.KSPlayerMod.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool bIsCharacterAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0, Size: 1]
	int RequiredCharge;//[Offset: 0x3a4, Size: 1]
	int MaximumCharge;//[Offset: 0x3a8, Size: 1]
	int DefaultCharge;//[Offset: 0x3ac, Size: 1]
	bool bRemoveIfExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0, Size: 1]
	float RefundFactor;//[Offset: 0x3b4, Size: 1]
	bool bHasLockout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b8, Size: 1]
	float LockoutTime;//[Offset: 0x3bc, Size: 1]
	bool bCanActivateBeforeRoundStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 1]
	bool bShouldAutoActivateOnNewCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 1]
	bool bIgnoreNoFireZone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c2, Size: 1]
	bool bIgnoreWeaponFireCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c3, Size: 1]
	bool bEndOnDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4, Size: 1]
	bool bEndOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5, Size: 1]
	KSPlayerMod*[] BuffsGivenOnActivation;//[Offset: 0x3c8, Size: 1]
	bool bKeepsTeamAliveIfUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8, Size: 1]
	bool bKeepsTeamAliveIfActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9, Size: 1]
	float AbilitySetupDuration;//[Offset: 0x3dc, Size: 1]
	bool bSetupLagCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	float AbilityDuration;//[Offset: 0x3e4, Size: 1]
	float MaximumBonusDuration;//[Offset: 0x3e8, Size: 1]
	bool bCapBonusDuration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ec, Size: 1]
	float AbilityEndWarningTime;//[Offset: 0x3f0, Size: 1]
	float AbilityRecoveryDuration;//[Offset: 0x3f4, Size: 1]
	bool bSelectableNormally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8, Size: 1]
	bool bSelectableWhileDowned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9, Size: 1]
	float ChargePerSecond;//[Offset: 0x3fc, Size: 1]
	float ChargePerHundredPoints;//[Offset: 0x400, Size: 1]
	class CameraShake* CameraShake;//[Offset: 0x408, Size: 1]
	FText ActivateWhileDownedPromptText;//[Offset: 0x410, Size: 1]
	bool ShouldRemoveIfExhausted();// 0x27f4ce0
	bool ShouldCapBonusDuration();// 0x27f4c60
	int GetRequiredCharge();// 0x27f4920
	float GetRefundFactor();// 0x27f4900
	int GetMaximumCharge();// 0x27f47d0
	float GetMaximumBonusDuration();// 0x27f47b0
	int GetDefaultCharge();// 0x27f4680
	KSPlayerMod*[] GetBuffs();// 0x27f4650
	FText GetActivateWhileDownedPromptText();// 0x27f45a0
	float GetAbilitySetupDuration();// 0x27f4580
	float GetAbilityRecoveryDuration();// 0x27f4560
	float GetAbilityEndWarningTime();// 0x27f4540
	float GetAbilityDuration();// 0x27f4520

--------------------------------
Class: StateMachineModEntry
	FName Key;//[Offset: 0x0, Size: 1]
	KSModInst_Activated* ModInst;//[Offset: 0x8, Size: 1]

--------------------------------
Class: StateMachineObjectEntry
	FName Key;//[Offset: 0x0, Size: 1]
	Object* Entry;//[Offset: 0x8, Size: 1]
	int64 IntEntry;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSResourceManagerComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnResourceAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnResourceRemovedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnResourceValueChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnResourceFilledDel;//[Size: 1]
	MulticastInlineDelegateProperty OnResourceDepletedDel;//[Size: 1]
	KSResourceInfo[] StartingResources;//[Offset: 0x100, Size: 1]
	KSResourceInfoSerializerContainer ActiveResourceInfoContainer;//[Offset: 0x110, Size: 1]
	bool SpendResource(out const FName InResourceKeyName, float InSpentAmount);// 0x283c370
	bool SetResource(out const FName InResourceKeyName, float InSetAmount);// 0x283c280
	void Server_RemoveResource(const FName InResourceKeyName);// 0x283c170
	void Server_ForceUpdateResource(const FName InResourceKeyName);// 0x283c0e0
	void Server_AddNewResource(const KSResourceInfo InResourceInfo);// 0x283c060
	void RequestServerForceUpdateResource(out const FName InResourceKeyName);// 0x283bfd0
	void RemoveResource(out const FName InResourceKeyName);// 0x283bf40
	bool HasResource(out const FName InResourceKeyName);// 0x283bbb0
	bool HasAmountOfResource(out const FName InResourceKeyName, float CheckAmount);// 0x283b9c0
	bool GiveResource(out const FName InResourceKeyName, float InGivenAmount);// 0x283b810
	float GetResourceValue(out const FName InResourceKeyName);// 0x283b770
	void GetResourceInfo(out const FName InResourceKeyName, out KSResourceInfo OutResourceInfo);// 0x283b680
	float GetResourceFillPercent(out const FName InResourceKeyName);// 0x283b5e0
	bool FillResource(out const FName InResourceKeyName);// 0x283b410
	bool DepleteResource(out const FName InResourceKeyName);// 0x283b140
	void AddNewResource(out const KSResourceInfo InResourceInfo);// 0x283a610

--------------------------------
Class: KSResourceInfo
	FName ResourceKeyName;//[Offset: 0x0, Size: 1]
	enum ResourceReplicationType;//[Offset: 0x8, Size: 1]
	float CurrentResourceValue;//[Offset: 0xc, Size: 1]
	float LastLocalCurrentResourceValue;//[Offset: 0x10, Size: 1]
	float MinResourceValue;//[Offset: 0x14, Size: 1]
	float MaxResourceValue;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSResourceInfoSerializerContainer.FastArraySerializer
	KSResourceInfoSerializerItem[] ResourceInfoSerializerItems;//[Offset: 0x108, Size: 1]

--------------------------------
Class: KSResourceInfoSerializerItem.FastArraySerializerItem
	KSResourceInfo ResourceInfo;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSPollResults
	KSPollData PollFinalData;//[Offset: 0x0, Size: 1]
	FString PollName;//[Offset: 0x10, Size: 1]
	int TeamNum;//[Offset: 0x20, Size: 1]
	bool bPollPassed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: KSVehicleBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	PGame_PositionHistoryComponent* PositionHistoryComponent;//[Offset: 0xd00, Size: 1]
	MulticastInlineDelegateProperty OnStartVehicleDestruction;//[Size: 1]
	MulticastInlineDelegateProperty OnEndVehicleDestruction;//[Size: 1]
	SpringArmComponent* SpringArm;//[Offset: 0xd28, Size: 1]
	CameraComponent* MainCamera;//[Offset: 0xd30, Size: 1]
	float CameraBlendTime;//[Offset: 0xd38, Size: 1]
	float CameraXTurnRate;//[Offset: 0xd3c, Size: 1]
	float CameraYTurnRate;//[Offset: 0xd40, Size: 1]
	float CameraMinHorizontalAngle;//[Offset: 0xd44, Size: 1]
	float CameraMaxHorizontalAngle;//[Offset: 0xd48, Size: 1]
	float CameraMinVerticalAngle;//[Offset: 0xd4c, Size: 1]
	float CameraMaxVerticalAngle;//[Offset: 0xd50, Size: 1]
	KSSpecialEffect DefaultPPE;//[Offset: 0xd68, Size: 1]
	bool bDisplayDefaultPPE;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc0, Size: 1]
	bool bDisplayFadeInOnStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc1, Size: 1]
	float FadeInDuration;//[Offset: 0xdc4, Size: 1]
	SkinnableStaticMeshComponent* DestroyedMesh;//[Offset: 0xdc8, Size: 1]
	float MaxHealth;//[Offset: 0xdd0, Size: 1]
	bool bShouldDisplayFriendlyOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd4, Size: 1]
	KSVehicleDeathInfo DeathInfo;//[Offset: 0xdd8, Size: 1]
	class KSDamageTypeBase* InstantDeathDamageType;//[Offset: 0xdf8, Size: 1]
	Character* LastCharacterToDamageMe;//[Offset: 0xe00, Size: 1]
	bool bIsSelfDestructing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe09, Size: 1]
	class DamageType* KilledDamageTypeClass;//[Offset: 0xe10, Size: 1]
	MulticastInlineDelegateProperty OnVehicleDeathStateChangedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityOnePressed;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityOneReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityTwoPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityTwoReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityThreePressed;//[Size: 1]
	MulticastInlineDelegateProperty OnAbilityThreeReleased;//[Size: 1]
	FText VehicleDisplayName;//[Offset: 0xea0, Size: 1]
	bool bReportsDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb8, Size: 1]
	SoftObjectPath HudIconPath;//[Offset: 0xec0, Size: 1]
	bool bHidesWeaponReticule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 1]
	MulticastInlineDelegateProperty OnVehicleHoverChange;//[Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0xef0, Size: 1]
	FName[] ApparelObjectsToListenTo;//[Offset: 0xef8, Size: 1]
	FName[] SkeletalMeshKeywordList;//[Offset: 0xf08, Size: 1]
	FName DestroyedMeshKeyword;//[Offset: 0xf18, Size: 1]
	void Suicide();// 0x285c270
	void SetMaxHealth(float NewMaxHealth);// 0x285c0f0
	void ServerRequest_BroadcastOnAbilityTwoReleased();// 0x1fc3640
	void ServerRequest_BroadcastOnAbilityTwoPressed();// 0x1fc3580
	void ServerRequest_BroadcastOnAbilityThreeReleased();// 0x1fc3360
	void ServerRequest_BroadcastOnAbilityThreePressed();// 0x1fc36a0
	void ServerRequest_BroadcastOnAbilityOneReleased();// 0x1fc33e0
	void ServerRequest_BroadcastOnAbilityOnePressed();// 0x1fa48f0
	void OnViewTargetChanged(Actor* OldViewTarget, Actor* NewViewTarget);// 0x285ba70
	void OnRep_VehicleDeathState();// 0x1fc3280
	void MoveRight(float Value);// 0x285b930
	void MoveForward(float Value);// 0x285b8b0
	SoftObjectPath GetSoftHudIconAsPath();// 0x285b720
	enum GetDeathState();// 0x285b580
	void GamepadLookUp(float Value);// 0x285b500
	void GamepadLookRight(float Value);// 0x285b480
	bool CanReportDamage();// 0x2725640
	void BroadcastOnVehicleKilled(const KSCharacterFoundation* KillerCharacter);// 0x285b320
	void BroadcastOnStartVehicleDestruction();// 0x285b300
	void BroadcastOnEndVehicleDestruction();// 0x285b2e0
	void BroadcastOnAbilityTwoReleased();// 0x1fc3540
	void BroadcastOnAbilityTwoPressed();// 0x1fc36e0
	void BroadcastOnAbilityThreeReleased();// 0x1fc33c0
	void BroadcastOnAbilityThreePressed();// 0x1fc3660
	void BroadcastOnAbilityOneReleased();// 0x1fc3560
	void BroadcastOnAbilityOnePressed();// 0x1fa54e0
	void AbilityTwoReleased();// 0x1fc34e0
	void AbilityTwoPressed();// 0x1fc36c0
	void AbilityThreeReleased();// 0x1fa7340
	void AbilityThreePressed();// 0x1f7e6f0
	void AbilityOneReleased();// 0x1fc32c0
	void AbilityOnePressed();// 0x1fc3520

--------------------------------
Class: PGame_PositionHistoryComponent.ActorComponent.Object
	enum PositionRecordMode;//[Offset: 0xb0, Size: 1]
	bool ExtrapolateFromLastEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1, Size: 1]
	bool bAutoPopulateOnBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2, Size: 1]
	PrimitivePriority[] TrackedPrimitives;//[Offset: 0xc8, Size: 1]
	void RemoveTrackedPrimitive(PrimitiveComponent* InPrimitive);// 0xd94b80
	void AddTrackedPrimitive(PrimitiveComponent* InPrimitive, int Priority);// 0xd93370

--------------------------------
Class: PrimitivePriority
	PrimitiveComponent* Primitive;//[Offset: 0x0, Size: 1]
	int Priority;//[Offset: 0x8, Size: 1]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x208, Size: 1]
	Vector SocketOffset;//[Offset: 0x20c, Size: 1]
	Vector TargetOffset;//[Offset: 0x218, Size: 1]
	float ProbeSize;//[Offset: 0x224, Size: 1]
	byte ProbeChannel;//[Offset: 0x228, Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22c, Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22c, Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22c, Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22c, Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 1]
	float CameraLagSpeed;//[Offset: 0x230, Size: 1]
	float CameraRotationLagSpeed;//[Offset: 0x234, Size: 1]
	float CameraLagMaxTimeStep;//[Offset: 0x238, Size: 1]
	float CameraLagMaxDistance;//[Offset: 0x23c, Size: 1]
	bool IsCollisionFixApplied();// 0x46505c0
	Vector GetUnfixedCameraPosition();// 0x4650580
	Rotator GetTargetRotation();// 0x4650540

--------------------------------
Class: SkinnableStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bDelaySkinUpdatesUntilTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bSkinUpdateIsQueued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	FName StaticMeshKeyword;//[Offset: 0x4ec, Size: 1]
	StaticMesh* FailSafeStaticMesh;//[Offset: 0x4f8, Size: 1]
	MultiSkinObject* SkinObject;//[Offset: 0x500, Size: 1]
	bool bAllowMaterialSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508, Size: 1]
	<FName> MaterialSkinningPrefixes;//[Offset: 0x510, Size: 1]
	void SetStaticMeshKeyword(FName InKeyword, StaticMesh* InFailSafeStaticMesh);// 0xfa9280
	int SetPersistentVectorParameterOnAllMaterials(FName ParameterName, LinearColor ParameterValue, bool bForceNewOverride);// 0xfa8ed0
	int SetPersistentVectorParameter(int MaterialSlot, FName ParameterName, LinearColor ParameterValue, bool bForceNewOverride);// 0xfa8c60
	int SetPersistentTextureParameterOnAllMaterials(FName ParameterName, Texture* ParameterValue, bool bForceNewOverride);// 0xfa8a00
	int SetPersistentTextureParameter(int MaterialSlot, FName ParameterName, Texture* ParameterValue, bool bForceNewOverride);// 0xfa87c0
	int SetPersistentScalarParameterOnAllMaterials(FName ParameterName, float ParameterValue, bool bForceNewOverride);// 0xfa8570
	int SetPersistentScalarParameter(int MaterialSlot, FName ParameterName, float ParameterValue, bool bForceNewOverride);// 0xfa8310
	int SetPersistentMaterialOverrideOnAllSlots(MaterialInterface* MaterialInterface, bool bForceNewOverride);// 0xfa8100
	int SetPersistentMaterialOverride(int MaterialSlot, MaterialInterface* MaterialInterface, bool bForceNewOverride);// 0xfa7f40
	void RemovePersistentMaterialParameter(int ParameterId);// 0xfa7be0
	MultiSkinObject* GetSkinObject();// 0xfa7620
	bool ChangePersistentVectorOverrideById(int ParameterId, LinearColor ParameterValue);// 0xfa55f0
	bool ChangePersistentTextureOverrideById(int ParameterId, Texture* ParameterValue);// 0xfa5450
	bool ChangePersistentScalarOverrideById(int ParameterId, float ParameterValue);// 0xfa52c0
	bool ChangePersistentMaterialOverrideById(int ParameterId, MaterialInterface* MaterialInterface);// 0xfa5130

--------------------------------
Class: KSVehicleDeathInfo
	enum DeathState;//[Offset: 0x0, Size: 1]
	class DamageType* DamageType;//[Offset: 0x8, Size: 1]
	Vector DamageDirection;//[Offset: 0x10, Size: 1]
	float FinalBlowDamage;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: KSSpecialty.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int RequiredUnlockLevel;//[Offset: 0x280, Size: 1]
	Texture2D* DynamicPoseImage;//[Offset: 0x288, Size: 1]
	Texture2D* BannerIcon;//[Offset: 0x2b0, Size: 1]
	Texture2D* LeftBannerIcon;//[Offset: 0x2d8, Size: 1]
	Texture2D* RightBannerIcon;//[Offset: 0x300, Size: 1]
	Texture2D* SmallIcon;//[Offset: 0x328, Size: 1]
	KSPlayerMod*[] AvailableKillstreaks;//[Offset: 0x350, Size: 1]
	KSPlayerMod*[] AvailableAbilities;//[Offset: 0x360, Size: 1]
	KSWeaponAsset*[] AvailableGadgets;//[Offset: 0x370, Size: 1]
	KSWeaponAsset*[] AvailablePistols;//[Offset: 0x380, Size: 1]
	KSWeaponAttachment*[] AvailableWeaponAttachments;//[Offset: 0x390, Size: 1]
	enum RoleType;//[Offset: 0x3a0, Size: 1]
	KSPlayerMod*[] AutoEquippedMods;//[Offset: 0x3a8, Size: 1]
	PerkCategory* PerkSlotOneCategory;//[Offset: 0x3b8, Size: 1]
	PerkCategory* PerkSlotTwoCategory;//[Offset: 0x3e0, Size: 1]
	Texture2D* GetDynamicPoseImage(bool bAllowSyncLoad);// 0x2847f00

--------------------------------
Class: KSLoadoutClass.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	Texture2D* DynamicPoseImage;//[Offset: 0x280, Size: 1]
	LinearColor ThemeColorLight;//[Offset: 0x2a8, Size: 1]
	LinearColor ThemeColorDark;//[Offset: 0x2b8, Size: 1]
	PerkCategory*[] PerkCategories;//[Offset: 0x2c8, Size: 1]
	KSPlayerMod*[] AvailablePerks;//[Offset: 0x2d8, Size: 1]
	KSPlayerMod_Activated*[] AvailableAbilities;//[Offset: 0x2e8, Size: 1]
	KSWeaponAsset*[] AvailableGadgets;//[Offset: 0x2f8, Size: 1]
	bool CanUseGlobalGadgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	KSWeaponAsset*[] AvailablePistols;//[Offset: 0x310, Size: 1]
	bool CanUseGlobalPistols;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 1]
	KSPlayerMod*[] AutoEquippedMods;//[Offset: 0x328, Size: 1]
	Texture2D* GetDynamicPoseImage(bool bAllowSyncLoad);// 0x279aa10

--------------------------------
Class: KSScoreChangeList.SizedArraySerializer.ReplicatedLog
	KSScoreChangeItem[] Items;//[Offset: 0x78, Size: 1]

--------------------------------
Class: KSScoreChangeItem.ReplicatedLogItem
	KSScoreChangeEvent ScoreChange;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSCashChangeList.KSScoreChangeList.SizedArraySerializer.ReplicatedLog

--------------------------------
Class: KSCharacterGender
	enum Apparel;//[Offset: 0x0, Size: 1]
	enum Vocal;//[Offset: 0x1, Size: 1]

--------------------------------
Class: KSPollBase.Object
	enum PollAudience;//[Offset: 0x28, Size: 1]
	FText PollTitle;//[Offset: 0x30, Size: 1]
	FText PollSuccessfulMessage;//[Offset: 0x48, Size: 1]
	FText PollUnsuccessfulMessage;//[Offset: 0x60, Size: 1]
	FText AffirmativeOption;//[Offset: 0x78, Size: 1]
	FText NegativeOption;//[Offset: 0x90, Size: 1]
	FText AffirmativeOptionVoteCastMessage;//[Offset: 0xa8, Size: 1]
	FText NegativeOptionVoteCastMessage;//[Offset: 0xc0, Size: 1]
	float PollLengthInSeconds;//[Offset: 0xd8, Size: 1]
	void OnPollStarted(KSGameState* GameState, int TeamNum);// 0x281c7f0
	void OnPollPassed(KSGameState* GameState, int TeamNum);// 0x281c720
	void OnPollFailed(KSGameState* GameState, int TeamNum);// 0x281c650
	int GetNumberOfVotesToEnd(int VoterCount, bool bIsFullTeam);// 0x281b9c0
	bool CanPlayerProposeThisPoll(const KSPlayerState* Player);// 0x281b170
	bool CanGameProposeThisPoll(const KSGameState* GameState);// 0x2786520

--------------------------------
Class: KSAISnippet
	BehaviorTree* BehaviorTreeAsset;//[Offset: 0x0, Size: 1]
	GameplayTagContainer InjectTag;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSPlayerModInputBinding
	FName ActionName;//[Offset: 0x0, Size: 1]
	bool bListenForPress;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bListenForRelease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: HitReaction
	Vector WorldHitDirection;//[Offset: 0x0, Size: 1]
	float Damage;//[Offset: 0xc, Size: 1]
	float HitTime;//[Offset: 0x10, Size: 1]

--------------------------------
Class: FloatHitSpringState

--------------------------------
Class: MantleConfig
	FName MantleSequenceName;//[Offset: 0x0, Size: 1]
	AnimSequence* DefaultMantleSequence;//[Offset: 0x8, Size: 1]
	enum DistanceScaleMethod;//[Offset: 0x10, Size: 1]
	float IdealHeight;//[Offset: 0x14, Size: 1]
	float MaxHeight;//[Offset: 0x18, Size: 1]
	float DefaultMinHeight;//[Offset: 0x1c, Size: 1]
	float ShaveCutoffTime;//[Offset: 0x20, Size: 1]
	bool bHasDropSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	bool bUseOnJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25, Size: 1]
	bool bCanStartWhileFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26, Size: 1]
	float EarlyOutTime;//[Offset: 0x28, Size: 1]
	bool bCanEndWithStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c, Size: 1]
	bool bCanEndWithSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 1]
	bool bCanEndWithFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e, Size: 1]
	AnimSequence* CachedSequence;//[Offset: 0x78, Size: 1]

--------------------------------
Class: BoneMirrorPair
	BoneReference BoneOne;//[Offset: 0x0, Size: 1]
	BoneReference BoneTwo;//[Offset: 0x10, Size: 1]
	Vector RotationFlipAxis;//[Offset: 0x20, Size: 1]

--------------------------------
Class: BoneMirrorConfig
	BoneReference[] UnpairedMirrorBones;//[Offset: 0x0, Size: 1]
	BoneMirrorPair[] PairedMirrorBones;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AuxiliaryWeaponInfo
	FName AuxiliarySlot;//[Offset: 0x0, Size: 1]
	KSWeapon* ParentWeapon;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSEquipmentManagerComponent.ActorComponent.Object
	<GameplayTag,KSEquipment*> EquippedInventory;//[Offset: 0xb0, Size: 1]
	KSEquipment*[] SlotlessInventory;//[Offset: 0x150, Size: 1]
	GameplayTagContainer MultiUseEquipPoints;//[Offset: 0x160, Size: 1]
	interface class None* EquipmentManagerOwner;//[Offset: 0x180, Size: 1]
	MulticastInlineDelegateProperty OnEquipmentAddedDel;//[Size: 1]
	MulticastInlineDelegateProperty OnEquipmentRemovedDel;//[Size: 1]
	float EmoteCooldownExpireTime;//[Offset: 0x208, Size: 1]
	float QuipCooldownExpireTime;//[Offset: 0x20c, Size: 1]
	float CommunicationCooldownExpireTime;//[Offset: 0x210, Size: 1]
	float RadialMenuItemCooldownExpireTime;//[Offset: 0x214, Size: 1]
	void SetEquipmentContainerOwner(out const interface classNone InEquipmentContainerOwner);// 0x2753350
	KSEquipment* GetEquipmentByEquipPoint(out const GameplayTag InEquipPoint);// 0x27521c0

--------------------------------
Class: WeaponStateChangeRequest
	uint16 RequestID;//[Offset: 0x0, Size: 1]
	bool bChangeWeaponState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	enum PreviousState;//[Offset: 0x3, Size: 1]
	enum NextState;//[Offset: 0x4, Size: 1]
	bool bChangeWeaponAimMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	enum AimMode;//[Offset: 0x6, Size: 1]
	RandomStream RandomStream;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAimLockData.KSAimAssistDataBase.DataAsset.Object
	<enum,bool> RequireInputForAimLock;//[Offset: 0x38, Size: 1]
	<enum,CurveVector*> AimLockCurve;//[Offset: 0x88, Size: 1]
	<enum,CurveFloat*> AimLockDistanceCurve;//[Offset: 0xd8, Size: 1]
	KSAimAssistPropertyBool[] RequireInputOverride;//[Offset: 0x128, Size: 1]
	KSAimAssistPropertyCurveVector[] LockCurveOverride;//[Offset: 0x138, Size: 1]
	KSAimAssistPropertyCurveFloat[] DistanceCurveOverride;//[Offset: 0x148, Size: 1]
	<enum,bool> FullRequireInputForAimLock;//[Offset: 0x158, Size: 1]
	<enum,CurveVector*> FullAimLockCurve;//[Offset: 0x1a8, Size: 1]
	<enum,CurveFloat*> FullAimLockDistanceCurve;//[Offset: 0x1f8, Size: 1]

--------------------------------
Class: KSAimAssistDataBase.DataAsset.Object
	enum JoyConFallback;//[Offset: 0x30, Size: 1]
	enum JoyConADSFallback;//[Offset: 0x31, Size: 1]
	enum TouchFallback;//[Offset: 0x32, Size: 1]
	enum TouchADSFallback;//[Offset: 0x33, Size: 1]
	enum PCGamepadADSFallback;//[Offset: 0x34, Size: 1]

--------------------------------
Class: KSAimAssistPropertyBool
	enum InputType;//[Offset: 0x0, Size: 1]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: KSAimAssistPropertyCurveVector
	enum InputType;//[Offset: 0x0, Size: 1]
	CurveVector* Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAimAssistPropertyCurveFloat
	enum InputType;//[Offset: 0x0, Size: 1]
	CurveFloat* Value;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAimSnapData.KSAimAssistDataBase.DataAsset.Object
	<enum,Rotator> MaxAimSnapRotation;//[Offset: 0x38, Size: 1]
	<enum,CurveFloat*> AimSnapDistanceCurve;//[Offset: 0x88, Size: 1]
	<enum,CurveVector*> AimSnapCurve;//[Offset: 0xd8, Size: 1]

--------------------------------
Class: KSWeaponAssetDrop.KSItemDrop.Actor.Object
	MulticastInlineDelegateProperty OnProjectileSpawned;//[Size: 1]
	KSProjectile* ReturnProjectile;//[Offset: 0x3b8, Size: 1]
	KSWeaponComponent* WeaponComponent;//[Offset: 0x3c8, Size: 1]
	KSWeaponAsset* WeaponAsset;//[Offset: 0x3d0, Size: 1]
	KSEquipmentId WeaponComponentEquipmentId;//[Offset: 0x3d8, Size: 1]
	KSWeaponAsset* CachedWeaponAsset;//[Offset: 0x3e0, Size: 1]
	BundledAmmoInfo BundledAmmo;//[Offset: 0x4d0, Size: 1]
	KSWeaponDropAttachmentContainer AttachmentContainer;//[Offset: 0x4f0, Size: 1]
	bool bAttachWeaponComponentOnDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 1]
	KSEquipmentContainer EquipmentContainer;//[Offset: 0x620, Size: 1]
	float ReleasedCachedTimeSeconds;//[Offset: 0x848, Size: 1]
	float CosmeticZOffset;//[Offset: 0x84c, Size: 1]
	void SetBundledAmmoToDefault();// 0x287d500
	void OverrideDropAmmo(int ReserveAmmo, int AmmoInClip);// 0x287d420
	void OnReturnProjectileStopped(out const HitResult HitResult);// 0x287d360
	void OnRep_ReturnProjectile();// 0x287d340
	KSWeaponComponent* GetWeaponComponent();// 0x2757eb0
	KSWeaponAsset* GetWeaponAsset();// 0x2757900
	KSProjectile* GetReturnProjectile();// 0x2758050
	bool GetLabelInfoForFireModeType(out enum FireModeType);// 0x287c960
	bool GetLabelInfoForAmmoType(out enum AmmoType);// 0x287c8b0
	bool CanPickupReplenishAmmo();// 0x287c480
	void BroadcastPickupFailedInventoryFull(KSCharacter* Receiver);// 0x27ba970
	bool AddAttachment(KSWeaponAttachment* InAttachment);// 0x287c2c0

--------------------------------
Class: BundledAmmoInfo
	enum BundleType;//[Offset: 0x0, Size: 1]
	int ReserveAmmo;//[Offset: 0x4, Size: 1]
	int AmmoInClip;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSWeaponDropAttachmentContainer.FastArraySerializer
	KSWeaponDropAttachmentContainerEntry[] Attachments;//[Offset: 0x108, Size: 1]
	KSWeaponAssetDrop* Owner;//[Offset: 0x120, Size: 1]

--------------------------------
Class: KSWeaponDropAttachmentContainerEntry.FastArraySerializerItem
	KSWeaponAttachment* Attachment;//[Offset: 0x10, Size: 1]
	GameplayTag ReplicatedAttachPoint;//[Offset: 0x20, Size: 1]
	uint16 ExtraInfo;//[Offset: 0x34, Size: 1]

--------------------------------
Class: InterpCurveVector2D
	InterpCurvePointVector2D[] Points;//[Offset: 0x0, Size: 1]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 1]

--------------------------------
Class: InterpCurvePointVector2D
	float InVal;//[Offset: 0x0, Size: 1]
	Vector2D OutVal;//[Offset: 0x4, Size: 1]
	Vector2D ArriveTangent;//[Offset: 0xc, Size: 1]
	Vector2D LeaveTangent;//[Offset: 0x14, Size: 1]
	byte InterpMode;//[Offset: 0x1c, Size: 1]

--------------------------------
Class: WeaponStateGraph

--------------------------------
Class: RadialDamageParams
	float BaseDamage;//[Offset: 0x0, Size: 1]
	float MinimumDamage;//[Offset: 0x4, Size: 1]
	float InnerRadius;//[Offset: 0x8, Size: 1]
	float OuterRadius;//[Offset: 0xc, Size: 1]
	float DamageFalloff;//[Offset: 0x10, Size: 1]

--------------------------------
Class: PrefireSkipWindow
	float WindowDuration;//[Offset: 0x0, Size: 1]
	float WindowExpiration;//[Offset: 0x4, Size: 1]
	FString LungeMontageSequence;//[Offset: 0x8, Size: 1]
	FString TargetMontageSequence;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KickbackModule.Object
	InterpCurveVector2D MakeKickbackInstance(int ShotIndex, float AbsoluteMaxDuration);// 0x26af9f0
	float GetMaximumVerticalKick();// 0x26af8e0
	float GetMaximumHorizontalKick();// 0x26af8a0

--------------------------------
Class: ADSBlurValues
	bool AdsBlurDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float BlurDistance;//[Offset: 0x4, Size: 1]
	float MaskExponential;//[Offset: 0x8, Size: 1]
	float HardnessOfMask;//[Offset: 0xc, Size: 1]
	float SphereMaskRadius;//[Offset: 0x10, Size: 1]
	float SphereMaskScaleX;//[Offset: 0x14, Size: 1]
	float SphereMaskScaleY;//[Offset: 0x18, Size: 1]
	bool EnableCubeMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]
	float CubeMaskPosX;//[Offset: 0x20, Size: 1]
	float CubeMaskPosY;//[Offset: 0x24, Size: 1]
	float CubeMaskScaleX;//[Offset: 0x28, Size: 1]
	float CubeMaskScaleY;//[Offset: 0x2c, Size: 1]
	bool EnableCustomMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	Texture2D* CustomMaskTexture;//[Offset: 0x38, Size: 1]

--------------------------------
Class: DropItemParameters
	int OriginalOwnerId;//[Offset: 0x0, Size: 1]
	int OriginalOwnerTeamNum;//[Offset: 0x4, Size: 1]
	bool bIsPlayerDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bAllowAutoPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	int ObjectiveId;//[Offset: 0xc, Size: 1]
	KSWeaponAttachment*[] Attachments;//[Offset: 0x10, Size: 1]
	int Price;//[Offset: 0x20, Size: 1]
	enum DropPickupConfig;//[Offset: 0x24, Size: 1]
	GameplayTag[] ItemTags;//[Offset: 0x28, Size: 1]

--------------------------------
Class: DeferredViewTargetChangeInfo
	Actor* OldTarget;//[Offset: 0x0, Size: 1]
	Actor* NewTarget;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ClientContext
	FString InstallationUUID;//[Offset: 0x0, Size: 1]
	FString LoginSessionUUID;//[Offset: 0x10, Size: 1]
	FString ClientCurrentLanguage;//[Offset: 0x20, Size: 1]
	int ClientSelectedSiteId;//[Offset: 0x30, Size: 1]
	int DivertFromQueueId;//[Offset: 0x34, Size: 1]
	int DivertToQueueId;//[Offset: 0x38, Size: 1]
	enum QueueDivertType;//[Offset: 0x3c, Size: 1]
	float ShelteredMMAttemptTimeout;//[Offset: 0x40, Size: 1]
	float ShelteredMMLevelLimit;//[Offset: 0x44, Size: 1]
	int ForcedBotMatchLimit;//[Offset: 0x48, Size: 1]
	int MercyMatchLossesRequired;//[Offset: 0x4c, Size: 1]
	int SisterQueueId;//[Offset: 0x50, Size: 1]
	FString BuildVersion;//[Offset: 0x58, Size: 1]
	int ScreenResolution;//[Offset: 0x68, Size: 1]
	int ViewportSizeX;//[Offset: 0x6c, Size: 1]
	int ViewportSizeY;//[Offset: 0x70, Size: 1]
	float resolution_quality;//[Offset: 0x74, Size: 1]
	float cpu_benchmark_results;//[Offset: 0x78, Size: 1]
	float gpu_benchmark_results;//[Offset: 0x7c, Size: 1]
	FString DeviceModel;//[Offset: 0x80, Size: 1]
	FString CPUType;//[Offset: 0x90, Size: 1]
	int CPUCores;//[Offset: 0xa0, Size: 1]
	FString GPUType;//[Offset: 0xa8, Size: 1]
	int TotalRamMegabytes;//[Offset: 0xb8, Size: 1]
	int AvailableRamMegabytes;//[Offset: 0xbc, Size: 1]
	float CPUBenchmarkResults;//[Offset: 0xc0, Size: 1]
	float GPUBenchmarkResults;//[Offset: 0xc4, Size: 1]
	float ResolutionQuality;//[Offset: 0xc8, Size: 1]
	int GlobalQuality;//[Offset: 0xcc, Size: 1]
	int ViewDistanceQuality;//[Offset: 0xd0, Size: 1]
	int AntiAliasingQuality;//[Offset: 0xd4, Size: 1]
	int ShadowQuality;//[Offset: 0xd8, Size: 1]
	int PostProcessQuality;//[Offset: 0xdc, Size: 1]
	int TextureQuality;//[Offset: 0xe0, Size: 1]
	int EffectsQuality;//[Offset: 0xe4, Size: 1]
	int FoliageQuality;//[Offset: 0xe8, Size: 1]
	int ShadingQuality;//[Offset: 0xec, Size: 1]
	FString DesiredPlatforms;//[Offset: 0xf0, Size: 1]
	FString DesiredInputs;//[Offset: 0x100, Size: 1]

--------------------------------
Class: ClientInputTypeUse
	int16 InputTypeKbm;//[Offset: 0x0, Size: 1]
	int16 InputTypeGpad;//[Offset: 0x2, Size: 1]
	int16 InputTypeTouch;//[Offset: 0x4, Size: 1]
	int16 InputTypeOther;//[Offset: 0x6, Size: 1]

--------------------------------
Class: ClientStatistics
	float smoothed;//[Offset: 0x0, Size: 1]
	float Maximum;//[Offset: 0x4, Size: 1]
	float Minimum;//[Offset: 0x8, Size: 1]
	float average;//[Offset: 0xc, Size: 1]
	int SampleCount;//[Offset: 0x10, Size: 1]
	double DoublePrecisionSmoothed;//[Offset: 0x18, Size: 1]
	double DoublePrecisionAverage;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSPlayerShotListener.ActorComponent.Object
	MulticastInlineDelegateProperty MinimapShotNofify;//[Size: 1]
	FString[] EnemyShotPingWidgetPools;//[Offset: 0x118, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x128, Size: 1]
	void OnKSGameStateDestroyed(Actor* Actor);// 0x2814940
	void ClientRecieveShotInfo(KSClientShotInfo ShotInfo);// 0x2810620
	void Authority_ProcessShotInfo(KSGlobalShotInfo ShotInfo);// 0x28100e0

--------------------------------
Class: KSClientShotInfo
	Vector FiringLocation;//[Offset: 0x0, Size: 1]
	int UniqueId;//[Offset: 0xc, Size: 1]
	float FadeTime;//[Offset: 0x10, Size: 1]
	enum PingType;//[Offset: 0x14, Size: 1]

--------------------------------
Class: RenderThreadInputHandler.Object

--------------------------------
Class: KSGamepadLookSpeedManager.Object
	KSPlayerController* PlayerController;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KickbackPlayback
	float AccumulatedTime;//[Offset: 0x0, Size: 1]
	InterpCurveVector2D KickbackCurve;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSAimAssistComponent.ActorComponent.Object
	KSPlayerController* PlayerOwner;//[Offset: 0xb0, Size: 1]
	RankedAimAssistTarget[] AssistTargetStack;//[Offset: 0xb8, Size: 1]
	float CurrentTargetWeightStickiness;//[Offset: 0xc8, Size: 1]
	float ProjectionSpaceStackBoundary;//[Offset: 0xcc, Size: 1]
	bool bUseStackBoundaryFovScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 1]
	float FovBaseline;//[Offset: 0xd4, Size: 1]
	CurveFloat* AimAssistEffectivenessCurve;//[Offset: 0xd8, Size: 1]
	enum ActivationType;//[Offset: 0xe0, Size: 1]
	enum FrictionAllowedInputMode;//[Offset: 0xe1, Size: 1]
	enum LockAllowedInputMode;//[Offset: 0xe2, Size: 1]
	enum SnapAllowedInputMode;//[Offset: 0xe3, Size: 1]
	enum CorrectionAllowedInputMode;//[Offset: 0xe4, Size: 1]
	bool bAssistGadgets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec, Size: 1]
	bool bAimLockUsesTargetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed, Size: 1]
	bool bAimLockMeshSmoothCompensation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee, Size: 1]
	bool bAimLockUsesOwnVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xef, Size: 1]
	bool bComplexAimLockDeltaRotCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	bool bComplexLookLocationCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 1]
	float MaxAimLockEvaluationInterval;//[Offset: 0xf4, Size: 1]
	float KickbackIgnoreFactor;//[Offset: 0xf8, Size: 1]
	float CrossAxisWeaknessPoint;//[Offset: 0xfc, Size: 1]
	bool bOldLockValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100, Size: 1]
	Vector OldLockRelativeLocation;//[Offset: 0x104, Size: 1]
	Rotator OldInputRot;//[Offset: 0x110, Size: 1]
	Object* LastAimAssistTarget;//[Offset: 0x120, Size: 1]
	bool bLastTargetCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool bLastSelfCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	Vector2D LastLockAssistPosition;//[Offset: 0x12c, Size: 1]
	Vector2D LastAnchorScreenLocation;//[Offset: 0x134, Size: 1]
	float AimAssistVisibilityUpdatePeriod;//[Offset: 0x13c, Size: 1]
	float CrouchAnimTimeLength;//[Offset: 0x140, Size: 1]
	float CrouchAnimTimeLengthRemaining;//[Offset: 0x144, Size: 1]
	Vector2D ScaledScreenSpaceJukeDistanceThreshold;//[Offset: 0x148, Size: 1]
	static bool GetScaledProjectionBoundsForActor(PlayerController* Player, const Actor* InActor, out Box2D OutBounds);// 0x26cf2a0
	float GetProjectionSpaceStackBoundary();// 0x26cf270
	KSPlayerController* GetPlayerOwner();// 0x26af820
	static float GetAssistRingScreenSize(PlayerController* Player, float ProjectionSpaceSize);// 0x26cee50
	static bool GetActorScreenBoundsForActor(PlayerController* Player, const Actor* InActor, out Box2D OutBounds);// 0x26cece0

--------------------------------
Class: RankedAimAssistTarget
	KSAimAssistAnchorComponent* Anchor;//[Offset: 0x0, Size: 1]
	interface class None* Target;//[Offset: 0x8, Size: 1]
	float HeadWeight;//[Offset: 0x18, Size: 1]
	Vector2D BodyLocation;//[Offset: 0x1c, Size: 1]
	Vector2D HeadLocation;//[Offset: 0x24, Size: 1]
	Box2D ScaledProjectionBounds;//[Offset: 0x2c, Size: 1]
	float DistanceFromCamera;//[Offset: 0x40, Size: 1]
	int UpdateCount;//[Offset: 0x44, Size: 1]

--------------------------------
Class: KSAimAssistAnchorComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float AimAssistPriority;//[Offset: 0x450, Size: 1]

--------------------------------
Class: KSPingManager.ActorComponent.Object
	MulticastInlineDelegateProperty OnPingFailureDel;//[Size: 1]
	MulticastInlineDelegateProperty OnPingAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnPingRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnPingChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSentVoiceLineOnly;//[Size: 1]
	MulticastInlineDelegateProperty OnSelfPingAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnSelfPingRemoved;//[Size: 1]
	MulticastInlineDelegateProperty OnSelfPingChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnHoveredActorChanged;//[Size: 1]
	PingInfoChangeList ReplicatedPings;//[Offset: 0x140, Size: 1]
	PingInfo[] LocallyPredictedPings;//[Offset: 0x260, Size: 1]
	<enum,float> PingLifetimes;//[Offset: 0x270, Size: 1]
	<enum,class KSPingBeaconBase> PingBeaconTypes;//[Offset: 0x2c0, Size: 1]
	<enum,int> MaxPingsForType;//[Offset: 0x310, Size: 1]
	<enum,Vector_NetQuantize> PingIconOffsets;//[Offset: 0x360, Size: 1]
	enum ObjectPingMessage;//[Offset: 0x3b0, Size: 1]
	DataTable* ContextualPingTypesDT;//[Offset: 0x3b8, Size: 1]
	DataTable* ContextualPingMessagesDT;//[Offset: 0x3c0, Size: 1]
	bool bDisplaySelfPingsOnNameplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bWorldSelfPingsFollowPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	float MaxPingDistance;//[Offset: 0x418, Size: 1]
	KSPingBeaconBase*[] ActiveBeacons;//[Offset: 0x420, Size: 1]
	bool bAllowPingRemoval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430, Size: 1]
	<enum,AkAudioEvent*> PingAudioCues;//[Offset: 0x438, Size: 1]
	KSGameState_RoundGame* CachedRoundState;//[Offset: 0x490, Size: 1]
	KSPlayerController* CachedOwner;//[Offset: 0x498, Size: 1]
	KSTeamState* CachedTeam;//[Offset: 0x4a0, Size: 1]
	Actor* CachedHoveredActor;//[Offset: 0x4d0, Size: 1]
	class UserWidget* MinimapDisplayWidget;//[Offset: 0x4e0, Size: 1]
	class UserWidget* FullmapDisplayWidget;//[Offset: 0x508, Size: 1]
	class UserWidget* OverlayDisplayWidget;//[Offset: 0x530, Size: 1]
	void UpdateCachedHoveredActor(Actor* NewCachedHoveredActor);// 0x27e1e80
	void ServerSendVoiceLineOnly(enum PingMessage);// 0x27e1dd0
	void ServerRemovePing(int PingId, KSPlayerState* PingingPlayer);// 0x27e1cd0
	void ServerPingRequest(PingInfo PingInfo);// 0x27e1b90
	void ServerChangePing(int PingId, KSPlayerState* PingingPlayer, KSPlayerState* AcknowledgingPlayer);// 0x27e1a60
	void ResetCachedHoveredActor();// 0x27e1980
	void RemovePing(int PingId, KSPlayerState* PingingPlayer);// 0x27e1830
	bool RemoveInternalPingInfo(int NewPingId, KSPlayerState* NewCreatingPlayer);// 0x27e1770
	bool RemoveHoveredPing(int PingId, KSPlayerState* PingingPlayer);// 0x27e16b0
	void OnPingExpired(PingInfo ExpiringPing);// 0x27e1390
	bool IsThrottled();// 0x27e1140
	bool IsSelfPing(enum PingType);// 0x27e10b0
	bool IsInvisiblePingType(enum PingType);// 0x27e1020
	enum[] GetPingTypesToCheck(enum PingType);// 0x27e0dc0
	float GetPingLifetimes(enum PingType);// 0x27e0ca0
	bool GetPingInfoByIdAndPlayer(int PingId, KSPlayerState* PingingPlayer, out PingInfo OutPingInfo);// 0x27e0b00
	int GetPingIdForDisplayId(int DisplayId, KSPlayerState* CreatingPlayer);// 0x27e0a40
	int GetDisplayIdForPingId(int PingId, KSPlayerState* CreatingPlayer);// 0x27e07c0
	void GameRoundOver(KSGameState* GameState, out const RoundResult RoundResult);// 0x27e0460
	void ForceLocalRemovePing(int PingId, KSPlayerState* PingingPlayer);// 0x27e03a0
	bool DoesWorldSelfPingFollowPlayer();// 0x27e0370
	void ClientPingRejected(enum Reason, int PingId);// 0x27e02a0
	void ClearPingsOfType(enum PingType);// 0x27e0220
	void ClearAllPingsForPlayer();// 0x27e0200
	bool CheckIfPingable(Actor* ActorToCheck, KSCharacter* PlayerCharacter);// 0x27e0140
	bool CheckIfFriendlyCharacter(Actor* ActorToCheck, KSCharacter* PlayerCharacter);// 0x27e0080
	bool CheckIfEnemyCharacter(Actor* ActorToCheck, KSCharacter* PlayerCharacter);// 0x27dffc0
	bool CheckIfDeployable(Actor* ActorToCheck, KSCharacter* PlayerCharacter, bool bMustBeEnemyDeployable);// 0x27dfec0
	void ChangePing(int PingId, KSPlayerState* PingingPlayer, KSPlayerState* AcknowledgingPlayer);// 0x27dfdc0
	void AttemptRemovePing(int PingId, KSPlayerState* PingingPlayer);// 0x27dfd00
	void AttemptPing2D(Vector2D WorldLocation2D);// 0x27dfc80
	void AttemptManualPing(enum PingType, enum PingMessage, Actor* PingedActor, bool bRemoveOtherPingsOfType);// 0x27dfb30
	void AttemptContextualPing(bool DoubleClick);// 0x27dfaa0
	void AttemptCommunicationPing(enum PingType, enum PingMessage);// 0x27df9e0
	void AddPing(out const PingInfo PingInfo);// 0x27df8d0
	void AddInternalPingInfo(int NewPingId, int NewDisplayId, KSPlayerState* NewCreatingPlayer);// 0x27df7d0
	void AddHoveredPing(int PingId, KSPlayerState* PingingPlayer);// 0x27df710

--------------------------------
Class: PingInfoChangeList.FastArraySerializer
	PingInfoChangeItem[] Items;//[Offset: 0x108, Size: 1]

--------------------------------
Class: PingInfoChangeItem.FastArraySerializerItem
	PingInfo PingInfo;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSPingBeaconBase.Actor.Object
	DataTable* ContextualPingTypesDT;//[Offset: 0x220, Size: 1]
	KSPlayerState* PlayerOwner;//[Offset: 0x228, Size: 1]
	PingInfo BeaconPingInfo;//[Offset: 0x230, Size: 1]
	void SetupBeaconDisplay();// 0x2d74e00
	void PingRemoved(int PingId, KSPlayerState* OwningPlayer);// 0x27e15f0

--------------------------------
Class: KSGameState_RoundGame.KSGameState.PGame_GameState.GameState.GameStateBase.Info.Actor.Object
	ReplicatedRoundInfo RoundInfo;//[Offset: 0x1bb0, Size: 1]
	ReplicatedRoundInfo PreviousRoundInfo;//[Offset: 0x1bc8, Size: 1]
	float RoundEndFadeOutAtMatchTime;//[Offset: 0x1be0, Size: 1]
	float RoundEndFadeOutDelayTime;//[Offset: 0x1be4, Size: 1]
	float RoundEndFadeOutTime;//[Offset: 0x1be8, Size: 1]
	bool bUsingRoundDelayedGarbageCollection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bec, Size: 1]
	MulticastInlineDelegateProperty OnRoundInfoChangedDel;//[Size: 1]
	RoundResult RoundResult;//[Offset: 0x1c18, Size: 1]
	RoundResult[] AllRoundResults;//[Offset: 0x1c38, Size: 1]
	int TotalRounds;//[Offset: 0x1c48, Size: 1]
	int RoundsToWin;//[Offset: 0x1c4c, Size: 1]
	MulticastInlineDelegateProperty OnTotalRoundsSet;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundsToWinSet;//[Size: 1]
	RoundInitState RoundInitState;//[Offset: 0x1c70, Size: 1]
	MulticastInlineDelegateProperty OnRoundSetupDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundStartDel;//[Size: 1]
	MulticastInlineDelegateProperty OnRoundOverDel;//[Size: 1]
	int CashPerWinningPlayer;//[Offset: 0x1cf8, Size: 1]
	int[] ConsecutiveCashPerLosingPlayer;//[Offset: 0x1d00, Size: 1]
	int CashPerSurvivingPlayer;//[Offset: 0x1d18, Size: 1]
	enum SurvivorCashOverridesWinCash;//[Offset: 0x1d1c, Size: 1]
	enum SurvivorCashOverridesLossCash;//[Offset: 0x1d1d, Size: 1]
	int CashPerDeadPlayer;//[Offset: 0x1d20, Size: 1]
	enum DeadPlayerCashOverridesWinCash;//[Offset: 0x1d24, Size: 1]
	enum DeadPlayerCashOverridesLossCash;//[Offset: 0x1d25, Size: 1]
	float RoundEndCamPreDeathDuration;//[Offset: 0x1d28, Size: 1]
	float RoundEndCamPostDeathDuration;//[Offset: 0x1d2c, Size: 1]
	float RoundEndCamPreDeathDilation;//[Offset: 0x1d30, Size: 1]
	float RoundEndCamTimeDilation;//[Offset: 0x1d34, Size: 1]
	float EndOfMatchKillCamDelay;//[Offset: 0x1d38, Size: 1]
	void TryToReplayLastKill();// 0x1fc2ca0
	bool RoundHasStarted();// 0x277a310
	bool RoundHasEnded();// 0x277a2e0
	bool PreparingForNextRound();// 0x277a2b0
	void OnRep_TotalRounds();// 0x277a280
	void OnRep_RoundsToWin();// 0x277a250
	void OnRep_RoundResult();// 0x1fc2c80
	void OnRep_RoundInitState();// 0x1fa0140
	void OnRep_RoundInfo();// 0x1fc3860
	void OnMatchTimerUpdate(float TimeInWholeSeconds);// 0x277a1d0
	bool IsTieBreakerRound();// 0x277a1a0
	bool IsTeamAtMatchPoint(KSTeamState* Team);// 0x277a110
	bool IsRoundInProgress();// 0x277a0e0
	bool IsAtMatchPoint();// 0x2779fa0
	bool HasTriggeredRoundStart();// 0x2779f70
	bool HasTriggeredRoundSetup();// 0x2779f40
	bool HasTriggeredRoundOver();// 0x2779f10
	int GetWinsUntilVictory();// 0x2779e60
	int GetTotalRounds();// 0x2779c80
	int GetTeamWinsUntilVictory(KSTeamState* Team);// 0x2779bc0
	KSTeamState* GetRoundWinner();// 0x2779b50
	enum GetRoundTimerState();// 0x2773ba0
	void GetRoundTimer(out float OutRoundTimeRemaining, out float OutTotalRoundTime);// 0x2773ac0
	int GetRoundsToWin();// 0x2779b70
	FName GetRoundStateName();// 0x2779b30
	MatchPhase GetRoundState();// 0x2779b00
	float GetRoundStartTime();// 0x2779ae0
	int[] GetRoundResultWiningTeams();// 0x2779a60
	byte GetRoundNumber();// 0x2779a40
	<byte,int> GetCashToSpendEachRound();// 0x2779740
	int GetCashPerWinningPlayer();// 0x2779710
	int GetCashPerSurvivingPlayer();// 0x27796f0
	int GetCashPerLosingPlayer(int NumConsecutiveLosses);// 0x2779660
	int GetCashPerDeadPlayer();// 0x2779640
	RoundResult[] GetAllRoundResults();// 0x2779580

--------------------------------
Class: ReplicatedRoundInfo
	MatchPhase RoundState;//[Offset: 0x0, Size: 1]
	byte RoundNumber;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSRadialMenuManager.ActorComponent.Object
	KSPlayerController* CachedOwner;//[Offset: 0xb0, Size: 1]
	bool bThrottleQuipsAndComms;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8, Size: 1]
	int QuipsAndCommsAllowedBeforeThrottle;//[Offset: 0xbc, Size: 1]
	float QuipAndCommThrottleDetectionPeriod;//[Offset: 0xc0, Size: 1]
	float QuipAndCommThrottleCooldown;//[Offset: 0xc4, Size: 1]
	int CurrentQuipsAndCommsBeforeThrottle;//[Offset: 0xc8, Size: 1]
	bool bQuipsAndCommsCurrentlyThrottled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 1]
	bool IsThrottled(enum CosmeticSlot);// 0x2831960
	void IncreaseUseCount(enum CosmeticSlot);// 0x1f73f20
	void EndThrottle(enum CosmeticSlot);// 0x2831240
	void DecreaseUseCount(enum CosmeticSlot);// 0x28311c0

--------------------------------
Class: KSJobSelectionManager.ActorComponent.Object
	bool bJobManagerReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionManagerReady;//[Size: 1]
	MulticastInlineDelegateProperty OnJobSelectionAcknowledge;//[Size: 1]
	KSPlayerController* CachedOwner;//[Offset: 0xd8, Size: 1]
	KSJobSelectionComponent* CachedSelectionComponent;//[Offset: 0xe0, Size: 1]
	void ServerRequestSelectionState(const int ItemId, const enum State);// 0x2794f30
	bool RequestSelectionState(const int ItemId, const enum State);// 0x2794d50
	void PlayerTeamSet(KSPlayerState* PlayerState);// 0x2794cd0
	void PlayerStateSet(KSPlayerState* PlayerState);// 0x2794c50
	void JobSelectionComponentReady(KSJobSelectionComponent* InSelectionComponent);// 0x2794bd0
	bool IsReady();// 0x26df4e0
	KSJobSelectionComponent* GetJobSelectionComponent();// 0x27946f0
	void ClientAcknowledgeStateSelection(const int ItemId, bool bSuccess, enum RequestState);// 0x2793d80

--------------------------------
Class: KSMinimapRendererBase.Actor.Object
	bool IsLocationOnSquareMap(Vector InLocation);// 0x27b5380
	Vector2D GetNormalizedMapLocation(Vector InLocation);// 0x27b4750
	float GetMinimapWidth();// 0x27b44b0

--------------------------------
Class: TelemetrySettings
	bool bPingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bPacketLossEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bFPSEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bTelemetryFeatureActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]

--------------------------------
Class: KSMobileXpChangeEvent
	int Delta;//[Offset: 0x0, Size: 1]
	FText Reason;//[Offset: 0x8, Size: 1]
	bool bBonus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	KSPlayerState* Instigator;//[Offset: 0x24, Size: 1]

--------------------------------
Class: ScoreboardStats
	int userPlayerID;//[Offset: 0x0, Size: 1]
	int winTeamNum;//[Offset: 0x4, Size: 1]
	FString mapName;//[Offset: 0x8, Size: 1]
	SerializedMatchId MatchID;//[Offset: 0x18, Size: 1]
	int QueueId;//[Offset: 0x28, Size: 1]
	int GameMode;//[Offset: 0x2c, Size: 1]
	TeamStats[] teams;//[Offset: 0x30, Size: 1]
	PlayerEntryStats[] playerStats;//[Offset: 0x40, Size: 1]
	KSScoreboardStat[] StatOrder;//[Offset: 0x50, Size: 1]
	GameplayTag SortStat;//[Offset: 0x60, Size: 1]

--------------------------------
Class: TeamStats
	int TeamNum;//[Offset: 0x0, Size: 1]
	FString teamName;//[Offset: 0x8, Size: 1]
	int teamScore;//[Offset: 0x18, Size: 1]

--------------------------------
Class: PlayerEntryStats
	int PlayerId;//[Offset: 0x0, Size: 1]
	int64 netPlayerID;//[Offset: 0x8, Size: 1]
	FString PlayerName;//[Offset: 0x10, Size: 1]
	FString EOSProductUserId;//[Offset: 0x20, Size: 1]
	int TeamNum;//[Offset: 0x30, Size: 1]
	KSJobItem* PlayerJob;//[Offset: 0x38, Size: 1]
	bool IsBot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]
	bool IsDisconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 1]
	bool IsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42, Size: 1]
	PlayerMatchStatInfo timePlayed;//[Offset: 0x44, Size: 1]
	float[] StatData;//[Offset: 0x50, Size: 1]

--------------------------------
Class: PlayerRewardsSummaryReplicated
	int64[] ActivityKeys;//[Offset: 0x0, Size: 1]
	RewardProgress[] ActivityValues;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSVelocityCameraShake.KSCharacterCameraShake.CameraShake.Object
	float VelocityForMinShaking;//[Offset: 0x178, Size: 1]
	float VelocityForMaxShaking;//[Offset: 0x17c, Size: 1]

--------------------------------
Class: KSCharacterCameraShake.CameraShake.Object
	float ADSShakeScale;//[Offset: 0x158, Size: 1]
	KSCharacterFoundation* AttachedCharacterFoundation;//[Offset: 0x160, Size: 1]
	void StopShakeOnViewTargetChanged(PlayerController* NewController);// 0x2729970
	void StopShakeOnActorDestroyed(Actor* DestroyedActor);// 0xe8dfd0
	void StopShakeDynamic();// 0x2729950
	void OnAimStateChanged(enum NextAimState);// 0x2728940

--------------------------------
Class: KSOutOfBoundsComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnOutOfBoundsBeginDel;//[Size: 1]
	MulticastInlineDelegateProperty OnOutOfBoundsWarningEndDel;//[Size: 1]
	MulticastInlineDelegateProperty OnOutOfBoundsEndDel;//[Size: 1]
	KSOutOfBoundsInfo OutOfBoundsInfo;//[Offset: 0xe8, Size: 1]
	bool bLocalOutOfBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 1]
	KSOutOfBoundsManager* OutOfBoundsManager;//[Offset: 0xf8, Size: 1]
	KSFXCurveComponent* OutOfBoundsEffectCurve;//[Offset: 0x100, Size: 1]
	KSSpecialEffect OutOfBoundsPPEffect;//[Offset: 0x108, Size: 1]
	MaterialInterface* OutOfBoundsPPMaterial;//[Offset: 0x160, Size: 1]
	MaterialInstanceDynamic* OutOfBoundsPPMaterialInstance;//[Offset: 0x168, Size: 1]
	KSCharacterFoundation* CharacterFoundationOwner;//[Offset: 0x170, Size: 1]
	void OutOfBoundsWarningEnd();// 0x27cdc90
	void OutOfBoundsOverlapEnd();// 0x27cdc70
	void OutOfBoundsOverlapBegin(float WarningLength);// 0x27cdbf0
	void OnRep_OutOfBoundsInfo();// 0x1f73ab0
	void OnEndOutOfBounds();// 0x2d74e00
	void OnBeginOutOfBounds();// 0x2d74e00
	bool IsOutOfBounds(out float RemainingTime);// 0x27ccee0
	void EndOutOfBounds();// 0x27ccc10
	void BeginOutOfBounds(float WarningLength);// 0x27cc950

--------------------------------
Class: KSOutOfBoundsInfo
	bool bOutOfBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float WarningLength;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSPowerSlideInfo
	bool bIsInPowerSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	enum EndReason;//[Offset: 0x1, Size: 1]

--------------------------------
Class: KSObjectiveInfo
	int ID;//[Offset: 0x0, Size: 1]
	KSObjectiveState ObjectiveState;//[Offset: 0x8, Size: 1]
	KSObjectiveState PreviousObjectiveState;//[Offset: 0x30, Size: 1]
	delegate[] ObjectiveStateChangedCallbacks;//[Offset: 0x58, Size: 1]

--------------------------------
Class: KSObjectiveTimerInfo
	KSTimerComponent* ObjectiveTimer;//[Offset: 0x0, Size: 1]
	delegate[] ObjectiveTimerActiveCallbacks;//[Offset: 0x8, Size: 1]
	delegate[] ObjectiveTimerCompleteCallbacks;//[Offset: 0x18, Size: 1]
	delegate[] ObjectiveTimerTickCallbacks;//[Offset: 0x28, Size: 1]

--------------------------------
Class: KSObjectiveCaptureInfo
	float BaseCaptureTime;//[Offset: 0x0, Size: 1]
	float BaseRecaptureTime;//[Offset: 0x4, Size: 1]
	float CaptureRatePercentIncreasePerPlayer;//[Offset: 0x8, Size: 1]
	float FullCaptureDecayTime;//[Offset: 0xc, Size: 1]
	bool bPlayerMustBePresentToKeep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 1]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 1]

--------------------------------
Class: KSAutoPickupComponent.ActorComponent.Object
	float AutoPickupMinPickupTimeSinceCreation;//[Offset: 0xb0, Size: 1]
	float AutoPickupDistance;//[Offset: 0xb4, Size: 1]
	float AutoPickupQueryInterval;//[Offset: 0xb8, Size: 1]
	bool bActivateAutoPickups;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	<KSItem*,int> ItemPriorityMap;//[Offset: 0xc0, Size: 1]
	bool bAutoPickupClusivityEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	GameplayTagQuery ClusivityQuery;//[Offset: 0x118, Size: 1]
	void OnOwnerPossessionChanged(Controller* Controller);// 0x26e7870
	void OnAutoPickupPreferenceChanged(bool bAutoPickupEnabled);// 0x26e77e0

--------------------------------
Class: KSDamageRecord
	KSWeaponAsset*[] WeaponsUsed;//[Offset: 0x0, Size: 1]
	float TotalRecordedDamage;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSShotgunHitChangeList.ReplicatedLog
	KSShotgunHitChangeItem[] Items;//[Offset: 0x70, Size: 1]

--------------------------------
Class: KSShotgunHitChangeItem.ReplicatedLogItem
	CompressedShotgunHitData ShotgunHitData;//[Offset: 0x0, Size: 1]

--------------------------------
Class: CompressedShotgunHitData
	KSWeaponAsset_Shotgun* ShotgunAsset;//[Offset: 0x0, Size: 1]
	uint64 CompressedHitResults;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSWeaponAsset_Shotgun.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int PelletsPerShot;//[Offset: 0x9e8, Size: 1]
	float AimDownSightsAccuracy;//[Offset: 0x9ec, Size: 1]
	bool bUseSpreadPattern;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	Vector2D[] SpreadPattern;//[Offset: 0x9f8, Size: 1]
	float HitPercentageForHeadshot;//[Offset: 0xa08, Size: 1]
	CurveFloat* NonlinearPelletDamageCurve;//[Offset: 0xa10, Size: 1]
	void GetSpreadPattern(out Vector2D[] OutPattern);// 0x287d130
	int GetPelletsPerShot();// 0x287ccc0
	CurveFloat* GetNonlinearPelletDamageCurve();// 0x287cc20
	float GetHitPercentageForHeadshot();// 0x287c870
	float GetAimDownSightsAccuracy();// 0x287c540
	bool DoesUseSpreadPattern();// 0x2824c80

--------------------------------
Class: KSRepossessState
	bool bPendingRepossess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	int LockID;//[Offset: 0x4, Size: 1]
	Rotator ReturnToRotation;//[Offset: 0x8, Size: 1]
	bool bReturnCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 1]

--------------------------------
Class: SmoothedComponentInfo
	SceneComponent* Component;//[Offset: 0x0, Size: 1]
	Vector InitialTranslationOffset;//[Offset: 0x8, Size: 1]
	Quat InitialRotationOffset;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSSmoothingComponent.SceneComponent.ActorComponent.Object
	bool bSmoothTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x208, Size: 1]
	bool bSmoothRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 1]
	Vector TranslationOffset;//[Offset: 0x20c, Size: 1]
	Quat RotationOffset;//[Offset: 0x220, Size: 1]
	KSCharacter* CharacterOwner;//[Offset: 0x230, Size: 1]

--------------------------------
Class: KSCharacterCameraHandler.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnShoulderSwapChanged;//[Size: 1]
	KSSmoothingComponent* CameraRootComponent;//[Offset: 0x218, Size: 1]
	KSSpringArmComponent* MainCameraBoom;//[Offset: 0x220, Size: 1]
	CameraComponent* MainCameraComponent;//[Offset: 0x228, Size: 1]
	KSSpringArmComponent* SprintCameraBoom;//[Offset: 0x230, Size: 1]
	CameraComponent* SprintCameraComponent;//[Offset: 0x238, Size: 1]
	KSSpringArmComponent* TransitionCameraBoom;//[Offset: 0x240, Size: 1]
	CameraComponent* TransitionCameraComponent;//[Offset: 0x248, Size: 1]
	KSSpringArmComponent* ShoulderCameraBoom;//[Offset: 0x250, Size: 1]
	CameraComponent* ShoulderCameraComponent;//[Offset: 0x258, Size: 1]
	CameraComponent* FirstPersonCameraComponent;//[Offset: 0x260, Size: 1]
	KSSpringArmComponent* TabletCameraBoom;//[Offset: 0x268, Size: 1]
	CameraComponent* TabletCameraComponent;//[Offset: 0x270, Size: 1]
	KSSpringArmComponent* ActionCameraBoom1;//[Offset: 0x278, Size: 1]
	CameraComponent* ActionCameraComponent;//[Offset: 0x280, Size: 1]
	KSSpringArmComponent* SwimCameraBoom;//[Offset: 0x288, Size: 1]
	CameraComponent* SwimCameraComponent;//[Offset: 0x290, Size: 1]
	KSSpringArmComponent* MountedCameraBoom;//[Offset: 0x298, Size: 1]
	CameraComponent* MountedCameraComponent;//[Offset: 0x2a0, Size: 1]
	CameraComponent* ActiveCameraComponent;//[Offset: 0x2a8, Size: 1]
	CameraComponent* PendingCameraComponent;//[Offset: 0x2b8, Size: 1]
	enum CameraShoulder;//[Offset: 0x2c8, Size: 1]
	enum DesiredCameraShoulder;//[Offset: 0x2c9, Size: 1]
	float NextShoulderSwapTime;//[Offset: 0x2cc, Size: 1]
	float ShoulderSwapCooldownTime;//[Offset: 0x2d0, Size: 1]
	float AutoShoulderSwapTime;//[Offset: 0x2d4, Size: 1]
	FName MeshADSPitchPivotBoneName;//[Offset: 0x2d8, Size: 1]
	float CameraFocualThreshold;//[Offset: 0x2e0, Size: 1]
	float MinimumFocalPointMaintenanceDistance;//[Offset: 0x2e4, Size: 1]
	float AimSnapThrottleTime;//[Offset: 0x2e8, Size: 1]
	float ShoulderSwapTime;//[Offset: 0x2ec, Size: 1]
	float ZipLineShoulderCameraBoomLength;//[Offset: 0x2f0, Size: 1]
	float ZipLineShoulderBoomLengthChangeTime;//[Offset: 0x2f4, Size: 1]
	float CrouchCameraShiftInterpSpeed;//[Offset: 0x2f8, Size: 1]
	float CrouchCameraBoomLengthScale;//[Offset: 0x2fc, Size: 1]
	float SprintCameraChangeDuration;//[Offset: 0x300, Size: 1]
	float SprintOutCameraChangeDuration;//[Offset: 0x304, Size: 1]
	float AimDownSightsScopeInterpSpeed;//[Offset: 0x308, Size: 1]
	bool bMantainFocualPointOnCameraTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 1]
	bool bUseAdvancedFocalPointTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d, Size: 1]
	float ShoulderSwapProgress;//[Offset: 0x310, Size: 1]
	float ZiplineAOSCamVertOffset;//[Offset: 0x314, Size: 1]
	float CrouchAOSCamVertOffset;//[Offset: 0x318, Size: 1]
	float SwimCameraBoomFloatHeight;//[Offset: 0x31c, Size: 1]
	float ShoulderSwapBlendExponent;//[Offset: 0x320, Size: 1]
	bool bUseFocalPointDoubleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324, Size: 1]
	float FocalPointDoubleCheckAllowedBlockDistance;//[Offset: 0x328, Size: 1]
	bool bFocalPointMaintenanceEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c, Size: 1]
	Vector LastManualShoulderSwapLocation;//[Offset: 0x330, Size: 1]
	float LastShoulderSwapTimestamp;//[Offset: 0x33c, Size: 1]
	float CurrentShoulderSwapTime;//[Offset: 0x340, Size: 1]
	Rotator CameraTransitionRotationDelta;//[Offset: 0x344, Size: 1]
	Rotator CameraTransitionRotationDeltaRemaining;//[Offset: 0x350, Size: 1]
	float NextValidAimSnapTime;//[Offset: 0x35c, Size: 1]
	Actor* CameraPivotTargetActor;//[Offset: 0x360, Size: 1]
	bool bPivotCameraToActorNotLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36a, Size: 1]
	bool bTrackTargetAfterPivotingToIt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36b, Size: 1]
	KSAimAssistAnchorComponent* CachedSnapAnchor;//[Offset: 0x370, Size: 1]
	Rotator AppliedFocalPointCorrection;//[Offset: 0x378, Size: 1]
	CurveFloat* CameraPivotCurve;//[Offset: 0x3a8, Size: 1]
	float StandEmoteCameraVertOffset;//[Offset: 0x3b0, Size: 1]
	float CrouchEmoteCameraVertOffset;//[Offset: 0x3b4, Size: 1]
	float ProneEmoteCameraVertOffset;//[Offset: 0x3b8, Size: 1]
	float StandEmoteCameraInterpSpeed;//[Offset: 0x3bc, Size: 1]
	float CrouchEmoteCameraInterpSpeed;//[Offset: 0x3c0, Size: 1]
	float ProneEmoteCameraInterpSpeed;//[Offset: 0x3c4, Size: 1]
	bool bFixCameras;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c8, Size: 1]
	bool bCrouchAffectsCameras;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c9, Size: 1]
	Vector RelativeFocalPoint;//[Offset: 0x3e8, Size: 1]
	Rotator NonFocalPointRotation;//[Offset: 0x3f4, Size: 1]
	Rotator AppliedFocalPointYawRotation;//[Offset: 0x400, Size: 1]
	float CachedPrimaryWeaponFieldOfView;//[Offset: 0x41c, Size: 1]
	float CameraInterpSpeed;//[Offset: 0x438, Size: 1]
	float CurrentEmoteCameraVertOffset;//[Offset: 0x43c, Size: 1]
	float CurrentEmoteCameraInterpSpeed;//[Offset: 0x440, Size: 1]
	bool bUsingEmoteCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444, Size: 1]
	float CachedCameraFOV;//[Offset: 0x448, Size: 1]
	Vector2D CachedViewPortSize;//[Offset: 0x44c, Size: 1]
	float CachedHalfTanFOV;//[Offset: 0x454, Size: 1]
	void ServerChangeShoulderCamera(enum InShoulder, bool bAuto, bool bUseAutoTiming);// 0x27293a0
	void OnShoulderSwapChanged__DelegateSignature(KSCharacter* Character);// 0x2d74e00
	void OnRep_CameraShoulder();// 0x2728b00
	void OnRep_CameraPivotTargetActor();// 0x2728ae0
	bool DoesTransitionSupportFocalPoint(FName ActiveCamera, FName PendingCamera);// 0x2727f50

--------------------------------
Class: KSSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool bEnableSmoothLengthReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 1]
	float SmoothLengthReturnSpeed;//[Offset: 0x294, Size: 1]
	CurveFloat* SmoothingCurve;//[Offset: 0x298, Size: 1]
	CurveVector* OffsetCurve;//[Offset: 0x2a0, Size: 1]
	bool bRelativeTargetOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 1]
	KSCharacter* CharacterOwner;//[Offset: 0x2b0, Size: 1]

--------------------------------
Class: KSInitialInventoryItem
	GameplayTag EquipPoint;//[Offset: 0x0, Size: 1]
	KSItem* ItemAsset;//[Offset: 0x8, Size: 1]
	KSWeaponAttachment*[] Attachments;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSInitialAmmo
	enum AmmoType;//[Offset: 0x0, Size: 1]
	int AmmoCount;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSLootLockerItem
	KSWeaponAsset* WeaponAsset;//[Offset: 0x0, Size: 1]
	KSWeaponAttachment* Attachment1;//[Offset: 0x8, Size: 1]
	KSWeaponAttachment* Attachment2;//[Offset: 0x10, Size: 1]
	KSWeaponAttachment* Attachment3;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSSwapHandlerProfile.Object
	EquipPointDefinition[] EquipPointDefinitions;//[Offset: 0x28, Size: 1]

--------------------------------
Class: EquipPointDefinition
	GameplayTag EquipPoint;//[Offset: 0x0, Size: 1]
	GameplayTagQuery WeaponTypeQuery;//[Offset: 0x8, Size: 1]
	bool bCanSwapToManually;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 1]
	FName HandlerSubType;//[Offset: 0x54, Size: 1]

--------------------------------
Class: KSWeapon_Melee.KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	MulticastInlineDelegateProperty OnMeleeHit;//[Size: 1]
	MulticastInlineDelegateProperty OnProjectileSpawned;//[Size: 1]
	KSProjectile* Projectile;//[Offset: 0x8a0, Size: 1]
	KSProjectile* FakeProjectile;//[Offset: 0x8a8, Size: 1]
	KSWeaponAsset_Melee* MeleeWeaponAsset;//[Offset: 0x8b0, Size: 1]
	bool bMeleeSwinging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8, Size: 1]
	TimerHandle MeleeSwingingTimerHandle;//[Offset: 0x8c0, Size: 1]
	Actor*[] DamagedTargetsInSwing;//[Offset: 0x8c8, Size: 1]
	bool bIsInQuickMelee;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d8, Size: 1]
	bool ShouldThrowWeapon();// 0x286db00
	void OnRep_Projectile();// 0x286d240
	void OnOwnerAimStateChanged(enum WeaponStateChange);// 0x286d180
	void OnLungingChanged(bool Lunging);// 0x286d0f0
	void JumpToFire(enum PreviousState);// 0x286ce30
	void IncPrefireSkipWindow();// 0x286cb70
	KSProjectile* GetProjectile();// 0x286ca90
	void EndMeleeSwing();// 0x286c5a0
	void BeginMeleeSwing();// 0x286c540

--------------------------------
Class: KSWeapon_Aimed.KSWeapon.KSEquipment.Info.Actor.Object
	AimData CachedAim;//[Offset: 0x720, Size: 1]
	uint16 LastHitValidationRequestId;//[Offset: 0x770, Size: 1]
	<uint16,HitValidationRecoveryInfo> HitValidationRecoveryList;//[Offset: 0x778, Size: 1]
	bool bAimOverShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c8, Size: 1]
	float CachedAimBonus;//[Offset: 0x7cc, Size: 1]
	bool bApplyAccuracyServerSide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d0, Size: 1]
	float Range;//[Offset: 0x7fc, Size: 1]
	enum FiredReplicationFlags;//[Offset: 0x800, Size: 1]
	KSAimCorrectionData* AimAssistCorrectionData;//[Offset: 0x808, Size: 1]
	bool bAllowAimCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x810, Size: 1]
	float HeadAimCorrectionOffset;//[Offset: 0x814, Size: 1]
	float HeadAimCorrectionOffsetPC;//[Offset: 0x818, Size: 1]
	float HeadAimCorrectionRange;//[Offset: 0x81c, Size: 1]
	bool bAllowHipAimCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x820, Size: 1]
	float HeadHipAimCorrectionOffset;//[Offset: 0x824, Size: 1]
	float HeadHipMouseAimCorrectionOffset;//[Offset: 0x828, Size: 1]
	float HeadHipAimCorrectionRange;//[Offset: 0x82c, Size: 1]
	float ValidationSweepRadius;//[Offset: 0x830, Size: 1]
	float AimOriginOffsetLenience;//[Offset: 0x834, Size: 1]
	float AimOriginAngularLenience;//[Offset: 0x838, Size: 1]
	float MinimumShotDirCoincidence;//[Offset: 0x83c, Size: 1]
	float CosAngularLenience;//[Offset: 0x840, Size: 1]
	void ValidateReceivedAimData(out AimData ReceivedAim);// 0x286df90
	void ValidateHitWithAimData(out HitResult Hit, out const AimData ReceivedAim);// 0x286de60
	static AimData StaticDefaultGetAimFromOrigin(out const Transform InOrigin);// 0x286dca0
	static AimData StaticDefaultGetAim(KSWeaponAsset* InWeaponAsset, Actor* InWeaponOwner, enum InAimMode);// 0x286db60
	void ServerSetAimOverShoulder(bool bNewAimDownSights);// 0x286da40
	void ServerReFireWeaponAimed(const WeaponStateChangeRequest request, const AimData ReceivedAim);// 0x286d920
	void ServerProcessHits(const AimData ReceivedAim, const KSCompressedHit[] CompressedHits, uint16 RequestID);// 0x286d7a0
	void ServerFireWeaponAimedCompressed(const WeaponStateChangeRequest request, const AimData ReceivedAim, uint16 LastRequestId);// 0x286d630
	void ServerFireWeaponAimed(const WeaponStateChangeRequest request, const AimData ReceivedAim);// 0x286d510
	bool IsInOrTransitioningToAOS();// 0x286cd30
	bool IsInOrTransitioningToAlternate();// 0x286cd60
	bool IsInOrTransitioningToADS();// 0x286cd00
	bool IsAimingOverShoulder();// 0x286ccd0
	bool IsAimingDownSights();// 0x286cca0
	bool IsAimingAlternate();// 0x286cc70
	bool IsAiming();// 0x286cc40
	void InternalGetActorsToIgnore(out Actor*[] ActorsToIgnore);// 0x286cb90
	float GetRange();// 0x286cb30
	enum GetOwnerAimMode();// 0x286ca60
	float GetHeadAimCorrectionRange();// 0x286ca20
	float GetHeadAimCorrectionOffset(bool bMouse);// 0x286c980
	FullFireRepData GetFullFireRepData();// 0x286c8f0
	float GetCurrentAccuracy();// 0x286c7d0
	AimData GetCachedAim();// 0x286c710
	AimData GetAim();// 0x286c640
	Actor*[] GetActorsToIgnore();// 0x286c5c0
	void ApplyView(out const AimData InAim, out AimData OutAim);// 0x286c410
	bool ApplyAimAssist(out AimData InOutAim);// 0x286c350
	void ApplyAccuracy(out const AimData InAim, out AimData OutAim);// 0x286c220
	bool AllowAimCorrection();// 0x286c1f0

--------------------------------
Class: KSWeaponAsset_Melee.KSWeaponAsset_WithProjectile.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	Vector MeleeSphereOffset;//[Offset: 0xa68, Size: 1]
	float MeleeSphereRadius;//[Offset: 0xa74, Size: 1]
	float MeleeSwingActiveTimeSeconds;//[Offset: 0xa78, Size: 1]
	byte[] OverlapObjectTypes;//[Offset: 0xa80, Size: 1]
	byte TraceChannel;//[Offset: 0xa90, Size: 1]
	bool bSprintLunge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa91, Size: 1]
	float MaxLungeDistance;//[Offset: 0xa94, Size: 1]
	float MaxLungeDistanceCorrectionMultiplier;//[Offset: 0xa98, Size: 1]
	float MaxLungeDuration;//[Offset: 0xa9c, Size: 1]
	float LungeConeHalfAngle;//[Offset: 0xaa0, Size: 1]
	float LungeConeOriginDistanceOffset;//[Offset: 0xaa4, Size: 1]
	byte[] GetOverlapObjectTypes();// 0x287cc40
	byte GetMeleeTraceChannel();// 0x287cbb0
	float GetMeleeSwingActiveTimeSeconds();// 0x287cb80
	float GetMeleeSphereRadius();// 0x287cb50
	Vector GetMeleeSphereOffset();// 0x287cb10
	float GetMaxLungeDuration();// 0x287cae0
	float GetMaxLungeDistanceCorrectionMultiplier();// 0x287cab0
	float GetMaxLungeDistance();// 0x287ca80
	float GetLungeConeHalfAngle();// 0x287ca50

--------------------------------
Class: KSWeaponAsset_WithProjectile.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	class KSProjectile* ProjectileClass;//[Offset: 0x9e8, Size: 1]
	KSWeaponAsset* ProjectileWeaponAsset;//[Offset: 0xa10, Size: 1]
	KSProjectileWeaponInfo[] AdditionalProjectileWeaponInfos;//[Offset: 0xa38, Size: 1]
	float RadialDamageOriginOffsetDistance;//[Offset: 0xa48, Size: 1]
	float TimeToFullyCook;//[Offset: 0xa4c, Size: 1]
	CurveFloat* CookSpeedMultiplierCurve;//[Offset: 0xa50, Size: 1]
	CurveFloat* CookDamageMultiplierCurve;//[Offset: 0xa58, Size: 1]
	CurveFloat* BounceDamageMultiplierCurve;//[Offset: 0xa60, Size: 1]
	float GetTimeToFullyCook();// 0x287d220
	float GetRadialDamageOriginOffsetDistance();// 0x287d0e0
	KSProjectileWeaponInfo GetProjectileWeaponInfo(out const FName Key);// 0x287cfc0
	KSWeaponAsset* GetProjectileWeaponAsset();// 0x287cf20
	float GetProjectileRadius();// 0x287cef0
	float GetProjectileMaxSpeed();// 0x287cec0
	float GetProjectileMaxSimulationTimeStep();// 0x287ce90
	float GetProjectileMaxSimulationIterations();// 0x287ce60
	float GetProjectileInitialSpeed(float PitchAngle);// 0x287cdd0
	float GetProjectileGravityScale();// 0x287cda0
	class KSProjectile GetProjectileClass();// 0x287cd00
	float GetCookSpeedMultiplier(float TimeCooked);// 0x287c6a0
	float GetCookDamageMultiplier(float TimeCooked);// 0x287c610
	float GetBounceDamageMultiplier(int NumBounces);// 0x287c560

--------------------------------
Class: KSProjectileWeaponInfo
	FName Key;//[Offset: 0x0, Size: 1]
	class KSProjectile* SoftProjectileClass;//[Offset: 0x8, Size: 1]
	KSWeaponAsset* SoftWeaponAsset;//[Offset: 0x30, Size: 1]

--------------------------------
Class: HitValidationRecoveryInfo
	KSCompressedHit[] Hits;//[Offset: 0x0, Size: 1]
	AimData AimData;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSCompressedHit
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	float Time;//[Offset: 0x4, Size: 1]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x8, Size: 1]
	Vector_NetQuantize TraceStart;//[Offset: 0x14, Size: 1]
	Vector_NetQuantize TraceEnd;//[Offset: 0x20, Size: 1]
	PrimitiveComponent* Component;//[Offset: 0x2c, Size: 1]
	FName BoneName;//[Offset: 0x34, Size: 1]

--------------------------------
Class: KSAimCorrectionData.KSAimAssistDataBase.DataAsset.Object
	<enum,bool> AllowAimCorrection;//[Offset: 0x38, Size: 1]
	<enum,float> AimCorrectionOffset;//[Offset: 0x88, Size: 1]
	<enum,float> AimCorrectionRange;//[Offset: 0xd8, Size: 1]
	KSAimAssistPropertyBool[] AllowOverride;//[Offset: 0x128, Size: 1]
	KSAimAssistPropertyFloat[] OffsetOverride;//[Offset: 0x138, Size: 1]
	KSAimAssistPropertyFloat[] RangeOverride;//[Offset: 0x148, Size: 1]
	<enum,bool> FullAllowAimCorrection;//[Offset: 0x158, Size: 1]
	<enum,float> FullAimCorrectionOffset;//[Offset: 0x1a8, Size: 1]
	<enum,float> FullAimCorrectionRange;//[Offset: 0x1f8, Size: 1]

--------------------------------
Class: KSAimAssistPropertyFloat
	enum InputType;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSPendingWeaponChargeValueUpdate
	float MaxCharge;//[Offset: 0x0, Size: 1]
	float CurrentCharge;//[Offset: 0x4, Size: 1]
	float Timestamp;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSPendingWeaponStateUpdates
	uint32 BroadcastId;//[Offset: 0x0, Size: 1]
	uint16 nEquipmentId;//[Offset: 0x4, Size: 1]
	KSWeaponDataUpdateContainer UpdateData;//[Offset: 0x6, Size: 1]

--------------------------------
Class: KSAmmoDropAsset.KSLootItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	enum AmmoType;//[Offset: 0x2a0, Size: 1]
	enum GetAmmoType();// 0x26db520

--------------------------------
Class: KSLootItem.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int Amount;//[Offset: 0x280, Size: 1]
	bool bShareWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 1]
	bool ShouldShareWithTeam();// 0x27af010
	FText GetReasonText();// 0x27ae440
	int GetAmount();// 0x26df360

--------------------------------
Class: KSAmmoManager.FastArraySerializer
	Actor* Owner;//[Offset: 0x108, Size: 1]
	KSAmmoManagerEntry[] AmmoSupply;//[Offset: 0x110, Size: 1]
	KSAmmoTransactions[] UnverifiedAmmoTransactions;//[Offset: 0x120, Size: 1]

--------------------------------
Class: KSAmmoManagerEntry.FastArraySerializerItem
	enum AmmoType;//[Offset: 0xc, Size: 1]
	uint32 UpdateId;//[Offset: 0x10, Size: 1]
	int AmmoCount;//[Offset: 0x14, Size: 1]

--------------------------------
Class: KSAmmoTransactions
	uint64 TransactionId;//[Offset: 0x0, Size: 1]
	uint32 UpdateIdAtTimeOfTransaction;//[Offset: 0x8, Size: 1]
	enum AmmoType;//[Offset: 0xc, Size: 1]
	int AmmoDelta;//[Offset: 0x10, Size: 1]

--------------------------------
Class: AssistTag
	float ExpirationTime;//[Offset: 0x0, Size: 1]
	KSPlayerState* Assistant;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ReviveInfo
	bool bIsBeingRevived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bRemoteRevive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool bSelectedToRevive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bReviveGuaranteed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	KSPlayerState* Reviver;//[Offset: 0x8, Size: 1]
	KSCharacter* ReviverCharacter;//[Offset: 0x10, Size: 1]
	FName ReviveeOverrideMontage;//[Offset: 0x18, Size: 1]
	float ReviveProgress;//[Offset: 0x20, Size: 1]
	float ReviveRate;//[Offset: 0x24, Size: 1]
	float LocalReviveProgress;//[Offset: 0x28, Size: 1]
	byte RequestID;//[Offset: 0x2c, Size: 1]

--------------------------------
Class: KSFlashBangRecord
	enum FlashBangIntensity;//[Offset: 0x0, Size: 1]
	CurveFloat* IntensityCurve;//[Offset: 0x8, Size: 1]
	float TimeElapsed;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x208, Size: 1]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 1]
	float IntensityMultiplier;//[Offset: 0x214, Size: 1]
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x218, Size: 1]
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x220, Size: 1]
	MulticastInlineDelegateProperty OnForceFeedbackFinished;//[Size: 1]
	void Stop();// 0xe9c210
	void SetIntensityMultiplier(float NewIntensityMultiplier);// 0x4552e70
	void SetForceFeedbackEffect(ForceFeedbackEffect* NewForceFeedbackEffect);// 0x4552bf0
	void Play(float StartTime);// 0x452b000
	bool BP_GetAttenuationSettingsToApply(out ForceFeedbackAttenuationSettings OutAttenuationSettings);// 0x45525a0
	void AdjustAttenuation(out const ForceFeedbackAttenuationSettings InAttenuationSettings);// 0x45524a0

--------------------------------
Class: KSLungeInfo
	Actor* LungeTarget;//[Offset: 0x0, Size: 1]
	float MaxLungeDistance;//[Offset: 0x8, Size: 1]
	float MaxLungeDuration;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSZipLineInfo
	KSZipLine* Zipline;//[Offset: 0x0, Size: 1]
	bool bZipLineReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]

--------------------------------
Class: KSZipLine.Actor.Object
	KSCharacter*[] ZipLiners;//[Offset: 0x230, Size: 1]
	Vector ZipStart;//[Offset: 0x240, Size: 1]
	Vector ZipEnd;//[Offset: 0x24c, Size: 1]
	Vector ZipHangOffset;//[Offset: 0x258, Size: 1]
	float ZipSpeed;//[Offset: 0x264, Size: 1]
	bool bReadyToRide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	float CooldownTime;//[Offset: 0x26c, Size: 1]
	float MinimumInteractTime;//[Offset: 0x270, Size: 1]
	float InteractTime;//[Offset: 0x274, Size: 1]
	float LengthToEndToIgnore;//[Offset: 0x278, Size: 1]
	bool bUpline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27c, Size: 1]
	bool bForgivingInteractionAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27d, Size: 1]
	float AutoReleaseDistance;//[Offset: 0x280, Size: 1]
	float AutoReleaseSpeed;//[Offset: 0x284, Size: 1]
	float AutoReleasePitchAngle;//[Offset: 0x288, Size: 1]
	bool bSupportsPreHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28c, Size: 1]
	KSInteractableComponent* InteractableComponent;//[Offset: 0x290, Size: 1]
	void SetReadyToRide(bool bIsReadyToRide);// 0x2895960
	void OnPlayerZiplineCooldownEnd(KSCharacter* Character);// 0x2d74e00
	void OnPlayerStopZiplining(KSCharacter* Character);// 0x2d74e00
	void OnPlayerStartZiplining(KSCharacter* Character);// 0x2d74e00
	bool IsUpline();// 0x2895570
	float GetAutoReleaseDistance();// 0x26df360
	Vector ComputeAutoReleaseVelocity(Rotator CharRotation);// 0x28951f0

--------------------------------
Class: KSSprintCameraShake.KSVelocityCameraShake.KSCharacterCameraShake.CameraShake.Object
	void StopShakeOnStopSprint(bool NewSprint);// 0x284da30

--------------------------------
Class: ReplicatedViewInfo
	float Pitch;//[Offset: 0x0, Size: 1]
	float Yaw;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSDeathInfo
	enum DeathState;//[Offset: 0x0, Size: 1]
	class DamageType* DamageType;//[Offset: 0x8, Size: 1]
	Vector DamageDirection;//[Offset: 0x10, Size: 1]
	float FinalBlowDamage;//[Offset: 0x1c, Size: 1]
	bool bImmediateRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]

--------------------------------
Class: KSMantleInfo
	bool bIsMantling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool bVaultingOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	float ApproachDist;//[Offset: 0x4, Size: 1]
	float MantleHeight;//[Offset: 0x8, Size: 1]
	float ForwardDist;//[Offset: 0xc, Size: 1]
	float VaultDrop;//[Offset: 0x10, Size: 1]
	float MantleUpDuration;//[Offset: 0x14, Size: 1]
	float VaultAcrossDuration;//[Offset: 0x18, Size: 1]
	float VaultDownDuration;//[Offset: 0x1c, Size: 1]
	FName MantleName;//[Offset: 0x20, Size: 1]
	Vector WorldSpaceGrabLocation;//[Offset: 0x28, Size: 1]
	Vector WorldTowardsWallDir;//[Offset: 0x34, Size: 1]
	bool bFromStanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 1]

--------------------------------
Class: KSCharacterSocketInfo
	FName SocketName;//[Offset: 0x0, Size: 1]
	Transform RelativeTM;//[Offset: 0x10, Size: 1]
	KSCharacterSocketComponent* SocketComponent;//[Offset: 0x40, Size: 1]
	SceneComponent* ParentComponent;//[Offset: 0x48, Size: 1]
	FName ParentSocketName;//[Offset: 0x50, Size: 1]
	enum CrouchHandlingType;//[Offset: 0x58, Size: 1]
	Vector AdditiveCrouchOffset;//[Offset: 0x5c, Size: 1]

--------------------------------
Class: KSCharacterSocketComponent.SceneComponent.ActorComponent.Object
	FName SocketLookupName;//[Offset: 0x208, Size: 1]
	enum OffsetType;//[Offset: 0x210, Size: 1]
	enum CrouchingHandlingType;//[Offset: 0x211, Size: 1]
	Vector AdditiveCrouchOffset;//[Offset: 0x214, Size: 1]

--------------------------------
Class: KSCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnMoveModeChangedDynamic;//[Size: 1]
	float LastNetUpdateTime;//[Offset: 0x6a8, Size: 1]
	float MaxProxyForwardPredictionTime;//[Offset: 0x6ac, Size: 1]
	bool bCanEverSkipProxyPrediction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b2, Size: 1]
	int SkipProxyPredictionLOD;//[Offset: 0x6b4, Size: 1]
	float SkipProxySkydivePredictionDist;//[Offset: 0x6b8, Size: 1]
	bool bSkipProxyPredictionAfterSkydive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6bc, Size: 1]
	FindFloorResult LastFloor;//[Offset: 0x6c0, Size: 1]
	float SlowToCrouchTime;//[Offset: 0x760, Size: 1]
	float PostCrouchSlowTime;//[Offset: 0x76c, Size: 1]
	float CrouchCooldownTime;//[Offset: 0x778, Size: 1]
	float TeaBagPreventionCrouchCooldownTime;//[Offset: 0x77c, Size: 1]
	Vector SimulatedProxyVelocity;//[Offset: 0x784, Size: 1]
	bool bCanEverPowerSlide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790, Size: 1]
	float PowerSlideTurnFrictionMinAngle;//[Offset: 0x794, Size: 1]
	float PowerSlideTurnFrictionMaxAngle;//[Offset: 0x798, Size: 1]
	float MinimumStartPowerSlideSpeed;//[Offset: 0x79c, Size: 1]
	float MinimumPowerSlideSpeed;//[Offset: 0x7a0, Size: 1]
	float PowerSlideInitialSpeedBoost;//[Offset: 0x7a4, Size: 1]
	float PowerSlideLockoutTime;//[Offset: 0x7a8, Size: 1]
	float MinimumPowerSlideTime;//[Offset: 0x7ac, Size: 1]
	float PowerSlideMaxStepHeight;//[Offset: 0x7b0, Size: 1]
	InterpCurveFloat PowerSlideTurnDecelerationCurve;//[Offset: 0x7c0, Size: 1]
	InterpCurveFloat PowerSlideDecelerationCurve;//[Offset: 0x7d8, Size: 1]
	float PowerSlideResistDeceleration;//[Offset: 0x7f0, Size: 1]
	float MaxTimeAllowedGrappling;//[Offset: 0x810, Size: 1]
	float GrappleTotalImpulseToApply;//[Offset: 0x818, Size: 1]
	float MaxAllowedGrappleAngle;//[Offset: 0x820, Size: 1]
	float FallAimForgivenessPeriod;//[Offset: 0x830, Size: 1]
	float FallAimForgivenessEndTime;//[Offset: 0x834, Size: 1]
	float AutoVaultInputThreshold;//[Offset: 0x838, Size: 1]
	float AutoVaultDistanceFactor;//[Offset: 0x83c, Size: 1]
	float AutoVaultFacingThreshold;//[Offset: 0x840, Size: 1]
	float MinWalkingAcceleration;//[Offset: 0x844, Size: 1]
	float MaxSprintingSpeed;//[Offset: 0x848, Size: 1]
	float MaxWalkSpeedProne;//[Offset: 0x84c, Size: 1]
	float AimOverShoulderSpeedModifier;//[Offset: 0x850, Size: 1]
	float AimDownSightsSpeedModifier;//[Offset: 0x854, Size: 1]
	float StrafingSpeedFactor;//[Offset: 0x858, Size: 1]
	float ReverseSpeedFactor;//[Offset: 0x85c, Size: 1]
	bool bWantsToSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x860, Size: 1]
	bool bSprintIsHeld;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x860, Size: 1]
	bool bSprintIsToggledOn;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x860, Size: 1]
	bool bSprintInterrupted;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x860, Size: 1]
	bool bIsJumping;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x860, Size: 1]
	bool bCachedCharacterAllowAdditionalJumpRightNow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x860, Size: 1]
	bool bCachedCharacterAllowSprintingRightNow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x860, Size: 1]
	bool bCachedCharacterAllowPowerSlideRightNow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x860, Size: 1]
	bool bPreventAutoVaultWhileReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x861, Size: 1]
	bool bPreventAutoVaultWhileADS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x861, Size: 1]
	bool bPreventAutoVaultWhileCrouching;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x861, Size: 1]
	float CachedWeaponSpeedModifier;//[Offset: 0x864, Size: 1]
	float ReducedJumpZVelocity;//[Offset: 0x868, Size: 1]
	float ReducedJumpHeightWindow;//[Offset: 0x86c, Size: 1]
	bool bSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x870, Size: 1]
	float MinHardLandingHeight;//[Offset: 0x880, Size: 1]
	float HardLandingLockoutTime;//[Offset: 0x884, Size: 1]
	float FreefallLandingLockoutTime;//[Offset: 0x888, Size: 1]
	enum AimState;//[Offset: 0x88c, Size: 1]
	KSCharacterBase* KSCharacterOwner;//[Offset: 0x890, Size: 1]
	float MaxSprintingSwimSpeed;//[Offset: 0x898, Size: 1]
	float MaxSubmergedSwimSpeed;//[Offset: 0x89c, Size: 1]
	float SwimSurfaceAcceleration;//[Offset: 0x8a0, Size: 1]
	float SwimSubmergedAcceleration;//[Offset: 0x8a4, Size: 1]
	float MaxDownedSwimSpeed;//[Offset: 0x8a8, Size: 1]
	float SwimStrafingSpeedFactor;//[Offset: 0x8ac, Size: 1]
	float SwimReverseSpeedFactor;//[Offset: 0x8b0, Size: 1]
	float MaxSwimZSpeed;//[Offset: 0x8b4, Size: 1]
	float SwimZAcceleration;//[Offset: 0x8b8, Size: 1]
	float SurfaceSwimDepth;//[Offset: 0x8bc, Size: 1]
	float SubmergedSwimDepth;//[Offset: 0x8c0, Size: 1]
	float HardMaxSwimDepth;//[Offset: 0x8c4, Size: 1]
	float FallSpeedWaterDeflectionFactor;//[Offset: 0x8c8, Size: 1]
	float CrouchToSwimDepth;//[Offset: 0x8cc, Size: 1]
	MantleConfig[] MantleConfigs;//[Offset: 0x8d0, Size: 1]
	float m_fLedgeGrabDistance;//[Offset: 0x8f0, Size: 1]
	float m_fSprintLedgeGrabDistance;//[Offset: 0x8f4, Size: 1]
	float m_fLedgeGrabbableWallZ;//[Offset: 0x8f8, Size: 1]
	float m_fMaxLedgeCheckHeight;//[Offset: 0x8fc, Size: 1]
	float m_fMinLedgeCheckHeight;//[Offset: 0x900, Size: 1]
	float m_fSwimHeightBoost;//[Offset: 0x904, Size: 1]
	float m_fLedgeGrabbableZ;//[Offset: 0x908, Size: 1]
	float m_fVaultZSpeed;//[Offset: 0x90c, Size: 1]
	float m_fEnhancedZSpeed;//[Offset: 0x910, Size: 1]
	float m_fVaultLateralSpeed;//[Offset: 0x914, Size: 1]
	float m_fVaultFacingThreshold;//[Offset: 0x918, Size: 1]
	float m_fVaultVerticalCheckInterval;//[Offset: 0x91c, Size: 1]
	float m_fVaultHeadClearance;//[Offset: 0x920, Size: 1]
	float m_fMantleDownDistance;//[Offset: 0x924, Size: 1]
	float m_fVaultForwardDistance;//[Offset: 0x928, Size: 1]
	float m_fMantleMaxDistance;//[Offset: 0x92c, Size: 1]
	Vector m_vMantleLaunchVelocity;//[Offset: 0x930, Size: 1]
	float m_fVaultErrorForgiveness;//[Offset: 0x93c, Size: 1]
	float m_fVaultStepFactor;//[Offset: 0x940, Size: 1]
	float MantleStepHeightProxy;//[Offset: 0x944, Size: 1]
	bool bRequireJumpForVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x948, Size: 1]
	float MaximumVelocityPreserveHeight;//[Offset: 0x94c, Size: 1]
	float MinimumSpeedForFromJumpMantles;//[Offset: 0x950, Size: 1]
	bool bAllowMantleEarlyOutOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x954, Size: 1]
	bool bRestrictVaultingIntoCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x955, Size: 1]
	float VaultFromGroundTraceHeightAdjust;//[Offset: 0x958, Size: 1]
	bool bVaultDebugPrinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x994, Size: 1]
	MantleConfig CurrentMantleConfig;//[Offset: 0x998, Size: 1]
	InterpCurveFloat MantleClothSimCurve;//[Offset: 0xa88, Size: 1]
	float m_fPostSprintLockoutTime;//[Offset: 0xab0, Size: 1]
	float m_fRemainingPostSprintLockoutTime;//[Offset: 0xab4, Size: 1]
	float FreeFallClearanceHeight;//[Offset: 0xab8, Size: 1]
	float MinFreeFallSpeedZ;//[Offset: 0xabc, Size: 1]
	float DefaultFreeFallSpeedZ;//[Offset: 0xac0, Size: 1]
	float MaxFreeFallSpeedZ;//[Offset: 0xac4, Size: 1]
	float MinFreeFallForwardSpeed;//[Offset: 0xac8, Size: 1]
	float DefaultFreeFallForwardSpeed;//[Offset: 0xacc, Size: 1]
	float MaxFreeFallForwardSpeed;//[Offset: 0xad0, Size: 1]
	float MaxDiveForwardSpeed;//[Offset: 0xad4, Size: 1]
	float MaxFreeFallLateralSpeed;//[Offset: 0xad8, Size: 1]
	float MaxFreeFallLateralAcceleration;//[Offset: 0xadc, Size: 1]
	float MaxFreeFallReverseAcceleration;//[Offset: 0xae0, Size: 1]
	float FreeFallAirControl;//[Offset: 0xae4, Size: 1]
	float FreeFallDelay;//[Offset: 0xae8, Size: 1]
	bool bInFreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec, Size: 1]
	bool bWingsuitHasBeenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaed, Size: 1]
	float FreeFallBrakingAcceleration;//[Offset: 0xaf0, Size: 1]
	float FreeFallDiveThresholdAngle;//[Offset: 0xaf4, Size: 1]
	float FreeFallDiveForwardInputThreshold;//[Offset: 0xaf8, Size: 1]
	bool bWantsToEndFreeFallEarly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xafc, Size: 1]
	bool bIsFreeFallDiving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb10, Size: 1]
	Rotator LastYawRotation;//[Offset: 0xb14, Size: 1]
	float FreeFallYawAccumDeltaTime;//[Offset: 0xb20, Size: 1]
	float FreeFallYawTotalDeltaTime;//[Offset: 0xb24, Size: 1]
	float FreeFallDelayProgress;//[Offset: 0xb28, Size: 1]
	Actor* FreeFallHeightActor;//[Offset: 0xb2c, Size: 1]
	bool bUseFreeFallStartHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb34, Size: 1]
	float FreeFallNetSmoothTime;//[Offset: 0xb38, Size: 1]
	float PostFreeFallNetSmoothTimeRecoveryRate;//[Offset: 0xb3c, Size: 1]
	bool bWingsuitControls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41, Size: 1]
	float WingsuitGlideDragCoefficient;//[Offset: 0xb44, Size: 1]
	float WingsuitDiveDragCoefficient;//[Offset: 0xb48, Size: 1]
	float WingsuitGlideSurfaceArea;//[Offset: 0xb4c, Size: 1]
	float WingsuitDiveSurfaceArea;//[Offset: 0xb50, Size: 1]
	Vector CachedVelocityPreDodgeRoll;//[Offset: 0xb54, Size: 1]
	bool bCachedCharacterAllowDodgeRollRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb60, Size: 1]
	bool bStartDodgeRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb60, Size: 1]
	bool bWantsToDodgeRollOnLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb64, Size: 1]
	bool bShouldDodgeRollOnLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb65, Size: 1]
	uint32 MidairDodgeRollCountSinceLastGrounded;//[Offset: 0xb68, Size: 1]
	MulticastInlineDelegateProperty OnDodgeRollStyleChangedDel;//[Size: 1]
	enum DodgeRollStyle;//[Offset: 0xb80, Size: 1]
	float MaxDodgeRollSpeed;//[Offset: 0xb84, Size: 1]
	float DodgeRollDistance;//[Offset: 0xb88, Size: 1]
	bool bCanDodgeRollFromAimDownSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8c, Size: 1]
	float DodgeRollCooldownTime;//[Offset: 0xb90, Size: 1]
	float DodgeRollForgivenessPeriod;//[Offset: 0xb98, Size: 1]
	float DodgeRollForgivenessEndTime;//[Offset: 0xb9c, Size: 1]
	float DodgeRollAcceleration;//[Offset: 0xbb4, Size: 1]
	float BrakingDecelerationPostDodgeRoll;//[Offset: 0xbb8, Size: 1]
	bool bEnableBrakingDecelerationPostDodgeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbbc, Size: 1]
	InterpCurveFloat DodgeRollVelocityCurve;//[Offset: 0xbc0, Size: 1]
	InterpCurveFloat DodgeRollClothSimCurve;//[Offset: 0xbd8, Size: 1]
	bool bCachedCharacterAllowLungeRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbf0, Size: 1]
	float CurrentLungeDistance;//[Offset: 0xbf4, Size: 1]
	float MaxLungeDistance;//[Offset: 0xbf8, Size: 1]
	Actor* LungeTarget;//[Offset: 0xc00, Size: 1]
	float CurrentLungeDuration;//[Offset: 0xc08, Size: 1]
	float MaxLungeDuration;//[Offset: 0xc0c, Size: 1]
	float LungeAcceleration;//[Offset: 0xc10, Size: 1]
	float MaxLungeSpeed;//[Offset: 0xc14, Size: 1]
	float LungeStopLateralDistance;//[Offset: 0xc18, Size: 1]
	float LungeStopVerticalDistance;//[Offset: 0xc1c, Size: 1]
	float LungeAirControl;//[Offset: 0xc20, Size: 1]
	SplineComponent* FlightRecoverySplineComponent;//[Offset: 0xc40, Size: 1]
	float FlightRecoverySpeed;//[Offset: 0xc4c, Size: 1]
	bool bCachedCharacterAllowAbilityMoveRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc50, Size: 1]
	bool bStartAbilityMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc50, Size: 1]
	bool bCachedCharacterAllowZipLineRightNow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc58, Size: 1]
	bool bZiplineEndsEnforceDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 1]
	bool bAllowDodgeRollIntoZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 1]
	bool bRequireJumpForZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc62, Size: 1]
	bool bRequireDownwardMovementToZipline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc63, Size: 1]
	bool bAllowZiplineReverseViaDodgeRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 1]
	float ZiplineAcceleration;//[Offset: 0xc68, Size: 1]
	bool bEnableFriendlyNudging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6d, Size: 1]
	float MaxEmoteInterruptDistance;//[Offset: 0xc74, Size: 1]
	float MaxEmoteMovingInterruptDistance;//[Offset: 0xc78, Size: 1]
	float CachedMaxEmoteInteruptDistance;//[Offset: 0xc7c, Size: 1]
	bool bClientManuallyShoulderSwappedNearby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc80, Size: 1]
	bool TryToZipline();// 0x272b3c0
	void SetNotifyAfterDropshipLand();// 0x272b3a0
	void SetGrappleSpikeAnchor(Vector SpikePostion);// 0x272b310
	void SetDodgeRollStyle(enum InStyle);// 0x272b290
	void ResetPostFireSprintLockout();// 0x272b270
	void ResetMidairDodgeRollCount();// 0x272b250
	void OnDodgeRollStyleChanged__DelegateSignature(enum NewStyle);// 0x2d74e00
	void OnChangeMoveModeDynamic__DelegateSignature(byte PreviousMovementMode, int PreviousCustomMode, byte NewMovementMode, int NewCustomMode);// 0x2d74e00
	bool IsZipLining();// 0x272b220
	bool IsStandingStill();// 0x272b1f0
	bool IsSprintingWithVelocity();// 0x272b1c0
	bool IsSprinting();// 0x272b190
	bool IsInPowerSlide();// 0x272b170
	bool IsInGrapple();// 0x272b150
	bool IsFlightRecovery();// 0x272b120
	bool IsDowned();// 0x272b0f0
	bool IsDodgeRolling();// 0x272b0c0
	bool IsAimingOverShoulder();// 0x272b090
	bool IsAimingDownSights();// 0x272b060
	bool IsAimingAlternate();// 0x272b030
	bool IsAiming();// 0x272b000
	bool GetWantsToSprint();// 0x272afc0
	bool GetWantsToPowerSlide();// 0x272af90
	float GetProratedMaxSpeed();// 0x272af50
	enum GetDodgeRollStyle();// 0x272af30
	Vector FindPointAboveWater(Vector TestPoint);// 0x272ae80
	void ClientAdjustPositionZipline(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, Vector NewPreVaultLocation, float NewLastEvalTime, const KSZipLineInfo Zipline);// 0x272ab80
	void ClientAdjustPositionVault(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, Vector NewPreVaultLocation, float NewLastEvalTime);// 0x272a8c0
	void ClientAdjustPositionDodgeRoll(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, float NewDodgeDuration, float NewDodgeDirection);// 0x272a610
	bool CanDodgeRollInCurrentState();// 0x272a5e0
	void CancelDodgeRollIntoCrouch();// 0x1fdc750

--------------------------------
Class: KSTranslucencyMaterialInfo
	MaterialInstanceDynamic* TranslucencyMaterial;//[Offset: 0x0, Size: 1]
	bool bIsPersistentMaterialOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool bUpdateAllPersistentMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]
	KSSkeletalMeshComponent* SkeletalMesh;//[Offset: 0x10, Size: 1]
	int PersistentMaterialSlot;//[Offset: 0x18, Size: 1]
	FName[] ScalarParamNames;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSProp_Physical.Actor.Object
	StaticMeshComponent* StaticMesh;//[Offset: 0x220, Size: 1]
	AkAudioEvent* CollisionAkEvent;//[Offset: 0x228, Size: 1]
	float ImpactSoundThreshold;//[Offset: 0x230, Size: 1]

--------------------------------
Class: KSFootprintInfo
	TimerHandle FootprintTimerHandle;//[Offset: 0x0, Size: 1]
	PoolableDecalComponent* FootprintPoolableDecalComponent;//[Offset: 0x8, Size: 1]
	int FootprintInstancedMeshIndex;//[Offset: 0x10, Size: 1]
	int FootprintId;//[Offset: 0x14, Size: 1]
	Vector FootprintLocation;//[Offset: 0x18, Size: 1]
	Rotator FootprintRotation;//[Offset: 0x24, Size: 1]
	bool bRightFoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x4e8, Size: 1]
	int NumCustomDataFloats;//[Offset: 0x4f8, Size: 1]
	float[] PerInstanceSMCustomData;//[Offset: 0x500, Size: 1]
	int InstancingRandomSeed;//[Offset: 0x510, Size: 1]
	int InstanceStartCullDistance;//[Offset: 0x514, Size: 1]
	int InstanceEndCullDistance;//[Offset: 0x518, Size: 1]
	int[] InstanceReorderTable;//[Offset: 0x520, Size: 1]
	int NumPendingLightmaps;//[Offset: 0x578, Size: 1]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x580, Size: 1]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x456fbf0
	bool SetCustomDataValue(int InstanceIndex, int CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty);// 0x456faa0
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x456f9e0
	bool RemoveInstance(int InstanceIndex);// 0x456f920
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x456efd0
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x456f260
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x456f130
	int GetInstanceCount();// 0x456efa0
	void ClearInstances();// 0x1fdc3b0
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, out const Transform[] NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x456e5b0
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, out const Transform NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x456e380
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x456e2a0
	int AddInstance(out const Transform InstanceTransform);// 0x456e1c0

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: KSNavModifierComponent.NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	Vector ComponentBoundsOffset;//[Offset: 0x140, Size: 1]
	void UpdateNavigationMesh();// 0x27c9670
	void UpdateCachedBounds();// 0x27c9650
	void SetAreaClassAndCacheBounds(class NavArea NewAreaClass);// 0x27c8ef0

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe0, Size: 1]
	Vector FailsafeExtent;//[Offset: 0xe8, Size: 1]
	bool bIncludeAgentHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 1]
	void SetAreaClass(class NavArea NewAreaClass);// 0x474a7e0

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 1]
	Object* CachedNavParent;//[Offset: 0xd8, Size: 1]
	void SetNavigationRelevancy(bool bRelevant);// 0x474a860

--------------------------------
Class: KSVOComponent.ActorComponent.Object
	KSCharacter* CharacterOwner;//[Offset: 0xc8, Size: 1]
	float GlobalCooldownDuration;//[Offset: 0x110, Size: 1]
	<int,float> CooldownGroupMap;//[Offset: 0x118, Size: 1]
	float TimeNextEventCanPlayAfter;//[Offset: 0x168, Size: 1]
	delegate OnVOLineFinished;//[Offset: 0x16c, Size: 1]
	float VODuckingAmount;//[Offset: 0x17c, Size: 1]
	void TeamStateChanged(KSPlayerState* PlayerState);// 0x2860280
	void StopVO();// 0x2860240
	void ServerPostVO(KSVoicelineEvent VoicelineEvent);// 0x2860040
	void PostVOToServer(KSVoicelineEvent VoicelineEvent);// 0x285ff50
	void PostVO(KSVoicelineEvent VoicelineEvent);// 0x285fe60
	void PlayVO(const KSVoicelineEvent VoicelineEvent);// 0x285fd20
	void PlayerStateChanged(KSPlayerState* PlayerState);// 0x285fde0
	void OwnerPossessedBy(Controller* Controller);// 0x285fa50
	void OnReadyToPlay();// 0x285f9d0
	void ForcePlayVO(out const KSVoicelineEvent VoicelineEvent);// 0x285f680
	void FinishedLineCallback(enum in_eType, AkCallbackInfo* in_pCallbackInfo);// 0x285f5c0
	void ConditionalPlayVO(out const KSVoicelineEvent VoicelineEvent);// 0x285f4e0
	void BindToTeamStateEvents(KSTeamState* TeamState);// 0x285f3c0
	void BindToPlayerStateEvents(KSPlayerState* PlayerState);// 0x285f330
	void BindToPlayerControllerEvents(KSPlayerController* PlayerController);// 0x1f73780
	void BindToPingManagerEvents(KSPingManager* PingManager);// 0x2760790
	void BindToGameStateEvents(KSGameState* GameState);// 0x285f2a0
	void BindToEvents();// 0x1f6e6f0
	void BindToCharacterEvents(KSCharacter* Character);// 0xfcf9f0
	void BindToActivatableModEvents(KSModInst_Activated* ActivatableMod);// 0x2760700
	void AnnounceBombSpotted(bool Armed);// 0x2d74e00

--------------------------------
Class: KSVehicle.WheeledVehicle.Pawn.Actor.Object
	KSVehicleMovementComponent4W* KSVehicleMovementComponent;//[Offset: 0x298, Size: 1]
	KSVehicleSeatComponent*[] Seats;//[Offset: 0x2a0, Size: 1]
	<KSCharacter*,KSVehicleSeatComponent*> RiderMap;//[Offset: 0x2b0, Size: 1]
	MulticastInlineDelegateProperty OnVehicleSeatingChanged;//[Size: 1]
	FText VehicleName;//[Offset: 0x310, Size: 1]
	float TimeToGetIn;//[Offset: 0x328, Size: 1]
	float MaxSpeedToEnter;//[Offset: 0x32c, Size: 1]
	float MaxAngleFromVehicleToInteract;//[Offset: 0x330, Size: 1]
	float SwapToDriverSeatHoldTime;//[Offset: 0x334, Size: 1]
	KSCharacter* Driver;//[Offset: 0x338, Size: 1]
	KSRiderSeatPair[] Riders;//[Offset: 0x340, Size: 1]
	KSCharacter*[] Interacters;//[Offset: 0x350, Size: 1]
	bool PreventRiderSilhouette;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x361, Size: 1]
	float DetachedParachuteLinearDamping;//[Offset: 0x364, Size: 1]
	float TimeUntilParachuteDestroyed;//[Offset: 0x368, Size: 1]
	Vector ParachuteDetachImpulse;//[Offset: 0x36c, Size: 1]
	FName[] ParachuteImpulseBoneNames;//[Offset: 0x378, Size: 1]
	SkeletalMeshComponent* ParachuteMesh;//[Offset: 0x388, Size: 1]
	MulticastInlineDelegateProperty OnManualDetachmentAvailable;//[Size: 1]
	MulticastInlineDelegateProperty OnManualDetachmentUnavailable;//[Size: 1]
	FName[] ValidInteractionTypes;//[Offset: 0x3f0, Size: 1]
	SpringArmComponent* SpringArm;//[Offset: 0x400, Size: 1]
	CameraComponent* MainCamera;//[Offset: 0x408, Size: 1]
	float RiderCameraBlendTime;//[Offset: 0x428, Size: 1]
	float RiderCameraBlendExponent;//[Offset: 0x42c, Size: 1]
	float CameraXTurnRate;//[Offset: 0x430, Size: 1]
	float CameraYTurnRate;//[Offset: 0x434, Size: 1]
	float CameraDeadZoneRate;//[Offset: 0x438, Size: 1]
	float CameraMinHorizontalAngle;//[Offset: 0x43c, Size: 1]
	float CameraMaxHorizontalAngle;//[Offset: 0x440, Size: 1]
	float CameraMinVerticalAngle;//[Offset: 0x444, Size: 1]
	float CameraMaxVerticalAngle;//[Offset: 0x448, Size: 1]
	ReplicatedViewInfo ViewInfo;//[Offset: 0x44c, Size: 1]
	float MaxHealth;//[Offset: 0x454, Size: 1]
	float CurrentHealth;//[Offset: 0x458, Size: 1]
	float CurrentHealthStage;//[Offset: 0x460, Size: 1]
	MulticastInlineDelegateProperty OnVehicleHealthChanged;//[Size: 1]
	bool Destroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478, Size: 1]
	Vector LocalImpulsePosition;//[Offset: 0x47c, Size: 1]
	StaticMeshComponent* DestroyedMesh;//[Offset: 0x488, Size: 1]
	PrimitiveComponent*[] DamageableComponents;//[Offset: 0x490, Size: 1]
	<float,KSVehicleDestructionStage> HealthStages;//[Offset: 0x4a8, Size: 1]
	<enum,float> Vulnerabilities;//[Offset: 0x4f8, Size: 1]
	float DamageImpulseMultiplier;//[Offset: 0x548, Size: 1]
	KSWeaponAsset* DestructionDamageWeapon;//[Offset: 0x550, Size: 1]
	class DamageType* DestructionDamageTypeClass;//[Offset: 0x558, Size: 1]
	float MinSpeedToDamageHitPlayer;//[Offset: 0x5a0, Size: 1]
	float MaxSpeedToDamageHitPlayer;//[Offset: 0x5a4, Size: 1]
	float MinPlayerDamageMultiplier;//[Offset: 0x5a8, Size: 1]
	float MaxPlayerDamageMultiplier;//[Offset: 0x5ac, Size: 1]
	float PlayerDamageCooldown;//[Offset: 0x5b0, Size: 1]
	float MinSpeedForImpactDamage;//[Offset: 0x5b4, Size: 1]
	float MaxSpeedForImpactDamage;//[Offset: 0x5b8, Size: 1]
	float MinImpactDamage;//[Offset: 0x5bc, Size: 1]
	float MaxImpactDamage;//[Offset: 0x5c0, Size: 1]
	float VehicleDamageCooldown;//[Offset: 0x5c4, Size: 1]
	float MinImpactAngleFromVehicleUp;//[Offset: 0x5c8, Size: 1]
	float MaxImpactAngleFromVehicleUp;//[Offset: 0x5cc, Size: 1]
	float MinAngleToSlideCorrect;//[Offset: 0x5d0, Size: 1]
	float MaxAngleToSlideCorrect;//[Offset: 0x5d4, Size: 1]
	float MaxSlideCorrectionSpeed;//[Offset: 0x5d8, Size: 1]
	KSWeaponAsset* ImpactDamageWeapon;//[Offset: 0x5e8, Size: 1]
	class DamageType* ImpactDamageTypeClass;//[Offset: 0x5f0, Size: 1]
	CapsuleComponent* PlayerHitComponent;//[Offset: 0x5f8, Size: 1]
	void VehicleHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComponent, Vector NormalImpulse, out const HitResult Hit);// 0x285c390
	void VehicleFeatureReleased();// 0x1f9f720
	void VehicleFeaturePressed();// 0x1fa3ee0
	void VehicleFeature(bool Pressed);// 0x2d74e00
	void UseReleased();// 0x1fc2d00
	void UsePressed();// 0x1fc38a0
	void TurnCameraY(float Rate);// 0x285c310
	void TurnCameraX(float Rate);// 0x285c290
	void SwapReleased();// 0x1fc2d40
	void SwapPressed();// 0x1fc2d60
	void StopParachute();// 0x1fdc7f0
	void Steer(float Value);// 0x285c1f0
	void StartParachute();// 0x1fa44d0
	void ServerVehicleFeature(bool Pressed);// 0x285c030
	void ServerUpdateRotation(ReplicatedViewInfo NewViewInfo);// 0x285bf80
	void ServerHorn(bool Pressed);// 0x285bec0
	void ServerGetOut(KSCharacter* Rider);// 0x285be00
	void ServerGetInNextEmptySeat(KSCharacter* Rider);// 0x285bd40
	void ServerAirSpeed(float Value);// 0x285bc90
	void RiderDestroyed(Actor* DestroyedActor);// 0x285bc10
	void ResetVehicle(out const RoundInitState RoundInitState);// 0x285bb70
	void ResetInput();// 0x285bb50
	void ResetCameraRotations();// 0x285bb30
	void PlayHealthStageChange(out const KSVehicleDestructionStage Stage);// 0x2d74e00
	void OnRep_Riders();// 0x285ba50
	void OnRep_Driver();// 0x285ba10
	void OnRep_Destroyed();// 0x285b9f0
	void OnRep_CurrentHealthStage();// 0x285b9d0
	void OnRep_CurrentHealth();// 0x285b9b0
	void MoveForward(float Value);// 0x285b830
	void HornReleased();// 0x1fa44b0
	void HornPressed();// 0x1fc3d10
	void Horn(bool Pressed);// 0x2d74e00
	void HideParachute();// 0x285b7c0
	bool GetInHighestPriorityEmptySeat(KSCharacter* Rider);// 0x285b5a0
	KSCharacter* GetDriver();// 0x2705560
	void Explode();// 0x2d74e00
	void ExitPressed();// 0x1fc2de0
	void Deteriorate();// 0x285b440
	void BroadcastVehicleFeature(bool Pressed);// 0x285b3b0
	void BroadcastHorn(bool Pressed);// 0x285b250
	void Brake(float Value);// 0x285b1d0
	void AirSpeed(float Value);// 0x1fc2e40

--------------------------------
Class: WheeledVehicle.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x280, Size: 1]
	WheeledVehicleMovementComponent* VehicleMovement;//[Offset: 0x288, Size: 1]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140, Size: 1]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140, Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140, Size: 1]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x140, Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x140, Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x140, Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x144, Size: 1]
	float Mass;//[Offset: 0x148, Size: 1]
	WheelSetup[] WheelSetups;//[Offset: 0x150, Size: 1]
	float DragCoefficient;//[Offset: 0x160, Size: 1]
	float ChassisWidth;//[Offset: 0x164, Size: 1]
	float ChassisHeight;//[Offset: 0x168, Size: 1]
	float DragArea;//[Offset: 0x16c, Size: 1]
	float EstimatedMaxEngineSpeed;//[Offset: 0x170, Size: 1]
	float MaxEngineRPM;//[Offset: 0x174, Size: 1]
	float DebugDragMagnitude;//[Offset: 0x178, Size: 1]
	Vector InertiaTensorScale;//[Offset: 0x17c, Size: 1]
	float MinNormalizedTireLoad;//[Offset: 0x188, Size: 1]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x18c, Size: 1]
	float MaxNormalizedTireLoad;//[Offset: 0x190, Size: 1]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x194, Size: 1]
	float ThresholdLongitudinalSpeed;//[Offset: 0x198, Size: 1]
	int LowForwardSpeedSubStepCount;//[Offset: 0x19c, Size: 1]
	int HighForwardSpeedSubStepCount;//[Offset: 0x1a0, Size: 1]
	VehicleWheel*[] Wheels;//[Offset: 0x1a8, Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1d0, Size: 1]
	float RVOAvoidanceHeight;//[Offset: 0x1d4, Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x1d8, Size: 1]
	float RVOSteeringStep;//[Offset: 0x1dc, Size: 1]
	float RVOThrottleStep;//[Offset: 0x1e0, Size: 1]
	int AvoidanceUID;//[Offset: 0x1e4, Size: 1]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1e8, Size: 1]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1ec, Size: 1]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1f0, Size: 1]
	float AvoidanceWeight;//[Offset: 0x1f4, Size: 1]
	Vector PendingLaunchVelocity;//[Offset: 0x1f8, Size: 1]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x204, Size: 1]
	float RawSteeringInput;//[Offset: 0x21c, Size: 1]
	float RawThrottleInput;//[Offset: 0x220, Size: 1]
	float RawBrakeInput;//[Offset: 0x224, Size: 1]
	float SteeringInput;//[Offset: 0x228, Size: 1]
	float ThrottleInput;//[Offset: 0x22c, Size: 1]
	float BrakeInput;//[Offset: 0x230, Size: 1]
	float HandbrakeInput;//[Offset: 0x234, Size: 1]
	float IdleBrakeInput;//[Offset: 0x238, Size: 1]
	float StopThreshold;//[Offset: 0x23c, Size: 1]
	float WrongDirectionThreshold;//[Offset: 0x240, Size: 1]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x244, Size: 1]
	VehicleInputRate BrakeInputRate;//[Offset: 0x24c, Size: 1]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x254, Size: 1]
	VehicleInputRate SteeringInputRate;//[Offset: 0x25c, Size: 1]
	Controller* OverrideController;//[Offset: 0x288, Size: 1]
	void SetUseAutoGears(bool bUseAuto);// 0x1ff2d40
	void SetThrottleInput(float Throttle);// 0x1ff2cc0
	void SetTargetGear(int GearNum, bool bImmediate);// 0x1ff2c00
	void SetSteeringInput(float Steering);// 0x1ff2b80
	void SetHandbrakeInput(bool bNewHandbrake);// 0x1ff2a20
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x1ff2990
	void SetGroupsToIgnore(int GroupFlags);// 0x1ff2910
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x1ff2880
	void SetGroupsToAvoid(int GroupFlags);// 0x1ff2800
	void SetGearUp(bool bNewGearUp);// 0x1ff2770
	void SetGearDown(bool bNewGearDown);// 0x1ff26e0
	void SetBrakeInput(float Brake);// 0x1ff24c0
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x1ff2430
	void SetAvoidanceGroup(int GroupFlags);// 0x1ff23b0
	void SetAvoidanceEnabled(bool bEnable);// 0x1ff2320
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);// 0x1ff2150
	bool GetUseAutoGears();// 0x1ff20c0
	int GetTargetGear();// 0x1ff2090
	float GetForwardSpeed();// 0x1ff1fd0
	float GetEngineRotationSpeed();// 0x1ff1fa0
	float GetEngineMaxRotationSpeed();// 0x1ff1f70
	int GetCurrentGear();// 0x1ff1f40

--------------------------------
Class: WheelSetup
	class VehicleWheel* WheelClass;//[Offset: 0x0, Size: 1]
	FName BoneName;//[Offset: 0x8, Size: 1]
	Vector AdditionalOffset;//[Offset: 0x10, Size: 1]
	bool bDisableSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 1]

--------------------------------
Class: VehicleWheel.Object
	StaticMesh* CollisionMesh;//[Offset: 0x28, Size: 1]
	bool bDontCreateShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bAutoAdjustCollisionSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	Vector Offset;//[Offset: 0x34, Size: 1]
	float ShapeRadius;//[Offset: 0x40, Size: 1]
	float ShapeWidth;//[Offset: 0x44, Size: 1]
	float Mass;//[Offset: 0x48, Size: 1]
	float DampingRate;//[Offset: 0x4c, Size: 1]
	float SteerAngle;//[Offset: 0x50, Size: 1]
	bool bAffectedByHandbrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 1]
	TireType* TireType;//[Offset: 0x58, Size: 1]
	TireConfig* TireConfig;//[Offset: 0x60, Size: 1]
	float LatStiffMaxLoad;//[Offset: 0x68, Size: 1]
	float LatStiffValue;//[Offset: 0x6c, Size: 1]
	float LongStiffValue;//[Offset: 0x70, Size: 1]
	float SuspensionForceOffset;//[Offset: 0x74, Size: 1]
	float SuspensionMaxRaise;//[Offset: 0x78, Size: 1]
	float SuspensionMaxDrop;//[Offset: 0x7c, Size: 1]
	float SuspensionNaturalFrequency;//[Offset: 0x80, Size: 1]
	float SuspensionDampingRatio;//[Offset: 0x84, Size: 1]
	byte SweepType;//[Offset: 0x88, Size: 1]
	float MaxBrakeTorque;//[Offset: 0x8c, Size: 1]
	float MaxHandBrakeTorque;//[Offset: 0x90, Size: 1]
	WheeledVehicleMovementComponent* VehicleSim;//[Offset: 0x98, Size: 1]
	int WheelIndex;//[Offset: 0xa0, Size: 1]
	float DebugLongSlip;//[Offset: 0xa4, Size: 1]
	float DebugLatSlip;//[Offset: 0xa8, Size: 1]
	float DebugNormalizedTireLoad;//[Offset: 0xac, Size: 1]
	float DebugWheelTorque;//[Offset: 0xb4, Size: 1]
	float DebugLongForce;//[Offset: 0xb8, Size: 1]
	float DebugLatForce;//[Offset: 0xbc, Size: 1]
	Vector Location;//[Offset: 0xc0, Size: 1]
	Vector OldLocation;//[Offset: 0xcc, Size: 1]
	Vector Velocity;//[Offset: 0xd8, Size: 1]
	bool IsInAir();// 0x1ff2120
	float GetSuspensionOffset();// 0x1ff2060
	float GetSteerAngle();// 0x1ff2030
	float GetRotationAngle();// 0x1ff2000

--------------------------------
Class: TireConfig.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 1]
	TireConfigMaterialFriction[] TireFrictionScales;//[Offset: 0x38, Size: 1]

--------------------------------
Class: TireConfigMaterialFriction
	PhysicalMaterial* PhysicalMaterial;//[Offset: 0x0, Size: 1]
	float FrictionScale;//[Offset: 0x8, Size: 1]

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0, Size: 1]
	float ThrottleInput;//[Offset: 0x4, Size: 1]
	float BrakeInput;//[Offset: 0x8, Size: 1]
	float HandbrakeInput;//[Offset: 0xc, Size: 1]
	int CurrentGear;//[Offset: 0x10, Size: 1]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0, Size: 1]
	float FallRate;//[Offset: 0x4, Size: 1]

--------------------------------
Class: KSVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool ParachuteDeployed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x408, Size: 1]
	bool ParachuteDetached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x409, Size: 1]
	float SpeedToConsiderParachuteDeployment;//[Offset: 0x40c, Size: 1]
	float DistanceToDeployParachute;//[Offset: 0x410, Size: 1]
	float DistanceToDetachParachute;//[Offset: 0x414, Size: 1]
	float DistanceToAllowManualDetachment;//[Offset: 0x418, Size: 1]
	float TimeUntilParachuteDeployed;//[Offset: 0x41c, Size: 1]
	float ParachuteDownwardSpeed;//[Offset: 0x420, Size: 1]
	bool ManualDetachmentAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x424, Size: 1]
	float ReorientedPitch;//[Offset: 0x428, Size: 1]
	float TimeToReorientPitch;//[Offset: 0x42c, Size: 1]
	float FallingTurnSpeed;//[Offset: 0x430, Size: 1]
	float SlowFallingSpeed;//[Offset: 0x434, Size: 1]
	float DefaultFallingSpeed;//[Offset: 0x438, Size: 1]
	float FastFallingSpeed;//[Offset: 0x43c, Size: 1]
	float TimeToReachDesiredFallSpeed;//[Offset: 0x440, Size: 1]
	float AirSpeedInput;//[Offset: 0x444, Size: 1]
	float MaxAngleToPreventRoll;//[Offset: 0x448, Size: 1]
	void StopParachute();// 0x2860220
	void StartParachute();// 0x2860200
	void OnRep_ParachuteDeployed();// 0x285fa10
	void OnRep_ManualDetachmentAllowed();// 0x285f9f0
	void AttemptManualDetachment();// 0x285f200

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x290, Size: 1]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x330, Size: 1]
	float AckermannAccuracy;//[Offset: 0x34c, Size: 1]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x350, Size: 1]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x380, Size: 1]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0, Size: 1]
	float MaxRPM;//[Offset: 0x88, Size: 1]
	float MOI;//[Offset: 0x8c, Size: 1]
	float DampingRateFullThrottle;//[Offset: 0x90, Size: 1]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x94, Size: 1]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x98, Size: 1]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0, Size: 1]
	float FrontRearSplit;//[Offset: 0x4, Size: 1]
	float FrontLeftRightSplit;//[Offset: 0x8, Size: 1]
	float RearLeftRightSplit;//[Offset: 0xc, Size: 1]
	float CentreBias;//[Offset: 0x10, Size: 1]
	float FrontBias;//[Offset: 0x14, Size: 1]
	float RearBias;//[Offset: 0x18, Size: 1]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	float GearSwitchTime;//[Offset: 0x4, Size: 1]
	float GearAutoBoxLatency;//[Offset: 0x8, Size: 1]
	float FinalRatio;//[Offset: 0xc, Size: 1]
	VehicleGearData[] ForwardGears;//[Offset: 0x10, Size: 1]
	float ReverseGearRatio;//[Offset: 0x20, Size: 1]
	float NeutralGearUpRatio;//[Offset: 0x24, Size: 1]
	float ClutchStrength;//[Offset: 0x28, Size: 1]

--------------------------------
Class: VehicleGearData
	float Ratio;//[Offset: 0x0, Size: 1]
	float DownRatio;//[Offset: 0x4, Size: 1]
	float UpRatio;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSVehicleSeatComponent.SceneComponent.ActorComponent.Object
	float SeatPriority;//[Offset: 0x208, Size: 1]
	ReplicatedViewInfo MainCameraViewInfo;//[Offset: 0x20c, Size: 1]
	ReplicatedViewInfo AimCameraViewInfo;//[Offset: 0x214, Size: 1]
	FName AttachSocket;//[Offset: 0x234, Size: 1]
	AnimMontage* GetInSequence;//[Offset: 0x240, Size: 1]
	AnimMontage* GetOutSequence;//[Offset: 0x248, Size: 1]
	AnimSequence* IdleSequence;//[Offset: 0x250, Size: 1]
	AnimSequence* LeanOutSequence;//[Offset: 0x258, Size: 1]
	SpringArmComponent* GetSeatSpringArm();// 0x285f960

--------------------------------
Class: KSRiderSeatPair
	KSCharacter* Rider;//[Offset: 0x0, Size: 1]
	KSVehicleSeatComponent* Seat;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSVehicleDestructionStage
	ParticleSystem* StageVFX;//[Offset: 0x0, Size: 1]
	AkAudioEvent* StageSFX;//[Offset: 0x8, Size: 1]
	AkAudioEvent* StageEcho;//[Offset: 0x10, Size: 1]
	Transform StageEffectTransform;//[Offset: 0x20, Size: 1]
	float StageDeteriorationRate;//[Offset: 0x50, Size: 1]

--------------------------------
Class: KSApparelAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int Priority;//[Offset: 0x280, Size: 1]
	GameplayTag ApparelSlot;//[Offset: 0x284, Size: 1]
	GameplayTagContainer SlotsToOverride;//[Offset: 0x290, Size: 1]
	int AsyncLoadPriority;//[Offset: 0x2d8, Size: 1]
	int LocalPlayerAsyncLoadPriority;//[Offset: 0x2dc, Size: 1]
	GameplayTag GetSlot();// 0x26df3b0

--------------------------------
Class: AppliedApparelKey
	int ID;//[Offset: 0x0, Size: 1]

--------------------------------
Class: SkinObjectManagerComponent.ActorComponent.Object
	<FName,MultiSkinObject*> SkinObjects;//[Offset: 0xb0, Size: 1]
	<MultiSkinObject*> SkinObjectsSet;//[Offset: 0x100, Size: 1]

--------------------------------
Class: KSActiveEmotePropInfo
	Guid EmotePropGuid;//[Offset: 0x0, Size: 1]
	MeshComponent* SpawnedEmotePropMeshComponent;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSArmorComponent.ActorComponent.Object
	bool bAllowArmorStacking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 1]
	float AbsoluteMaximumDurability;//[Offset: 0xb4, Size: 1]
	class DamageType[] IgnoredDamageTypes;//[Offset: 0xb8, Size: 1]
	enum[] IgnoredDamageCategories;//[Offset: 0xc8, Size: 1]
	float Durability;//[Offset: 0xd8, Size: 1]
	float MaxDurability;//[Offset: 0xdc, Size: 1]
	KSEquippedArmor[] EquippedArmorList;//[Offset: 0xe0, Size: 1]
	void RepairArmor(float DurabilityToRepair);// 0x26dfd10
	bool RemoveArmor(const KSArmorAsset* Armor, bool bDropArmor);// 0x26dfc50
	void OnRep_DurabiltyUpdate();// 0x26df6d0
	bool IsArmorStackingAllowed();// 0x26df4e0
	bool IsAnyRepairableArmorEquipped();// 0x26df4b0
	float GetCurrentMaxDurability();// 0x26df320
	float GetCurrentDurability();// 0x26df300
	float GetAbsoluteMaximumDurability();// 0x26bbb70
	bool EquipArmor(const KSArmorAsset* Armor, out GiveItemParameters GiveParameters);// 0x26df140
	bool CanRepairArmor();// 0x26df0f0

--------------------------------
Class: KSArmorAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	float Durability;//[Offset: 0x280, Size: 1]
	float StartingDurability;//[Offset: 0x284, Size: 1]
	bool bArmorIsRepairable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]
	bool bArmorIsAlwaysStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289, Size: 1]
	bool bDestroyArmorOnBreak;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28a, Size: 1]
	bool ShouldDestroyArmorOnBreak();// 0xe953c0
	bool IsArmorRepairable();// 0xe95400
	bool IsArmorAlwaysStackable();// 0xe953e0
	float GetStartingDurability();// 0x26df3d0
	float GetMaxDurability();// 0x26df360

--------------------------------
Class: KSEquippedArmor
	KSArmorAsset* ArmorAsset;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSNudgeComponent.ActorComponent.Object
	class Actor[] NudgeClassFilters;//[Offset: 0xb0, Size: 1]
	float NudgeSpeed;//[Offset: 0xc0, Size: 1]
	float MaxNudgeDistance;//[Offset: 0xc4, Size: 1]
	Actor*[] CachedNudgingActors;//[Offset: 0xc8, Size: 1]
	void GetNudgingActors(out Actor*[] NudgingActors);// 0x27c8260
	Vector GetNudgeVectorWithActors(out const Actor*[] NudgingActors);// 0x27c8190
	Vector GetNudgeVector();// 0x27c8150

--------------------------------
Class: KSWeaponPropManagerComponent.ActorComponent.Object
	ActiveWeaponProp[] ActiveNamelessProps;//[Offset: 0x188, Size: 1]
	<PropIdentifier,ActiveWeaponProp> ActiveProps;//[Offset: 0x198, Size: 1]
	<PropIdentifier,LegacyWeaponProp> LegacyProps;//[Offset: 0x1e8, Size: 1]
	bool bAllowAnimNotifyStatesToCreatePropSpawners;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 1]

--------------------------------
Class: ActiveWeaponProp
	SkinnableSkeletalMeshComponent* MeshComp;//[Offset: 0x88, Size: 1]

--------------------------------
Class: PropIdentifier
	FName PropIdentifierName;//[Offset: 0x0, Size: 1]
	SkeletalMeshComponent* SkelMeshComp;//[Offset: 0x8, Size: 1]

--------------------------------
Class: LegacyWeaponProp
	LobbySkeletalPropInfo LegacyInfo;//[Offset: 0x10, Size: 1]
	SkinnableSkeletalMeshComponent* MeshComp;//[Offset: 0x98, Size: 1]

--------------------------------
Class: SkelPropManagerComponent.ActorComponent.Object
	ActiveSkelProp[] ActiveNamelessProps;//[Offset: 0x188, Size: 1]
	<PropIdentifier,ActiveSkelProp> ActiveProps;//[Offset: 0x198, Size: 1]
	bool bAllowSpawnerPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	float SpawnerPoolingLifespan;//[Offset: 0x1ec, Size: 1]

--------------------------------
Class: ActiveSkelProp
	SkinnableSkeletalMeshComponent* MeshComp;//[Offset: 0x80, Size: 1]

--------------------------------
Class: StaticPropManagerComponent.ActorComponent.Object
	ActiveStaticProp[] ActiveNamelessProps;//[Offset: 0x188, Size: 1]
	<PropIdentifier,ActiveStaticProp> ActiveProps;//[Offset: 0x198, Size: 1]
	bool bAllowSpawnerPooling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8, Size: 1]
	float SpawnerPoolingLifespan;//[Offset: 0x1ec, Size: 1]

--------------------------------
Class: ActiveStaticProp
	SkinnableStaticMeshComponent* MeshComp;//[Offset: 0x80, Size: 1]

--------------------------------
Class: KSWeaponAsset_Grenade.KSWeaponAsset_WithProjectile.KSWeaponAsset.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	bool bAllowCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa68, Size: 1]
	float MinimumCookTime;//[Offset: 0xa6c, Size: 1]
	float FuseTime;//[Offset: 0xa70, Size: 1]
	float MinHandRemainingFuse;//[Offset: 0xa74, Size: 1]
	bool bFuseTicksInHand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa78, Size: 1]
	class KSProjectile_Grenade* GrenadeClass;//[Offset: 0xa80, Size: 1]
	float GetMinimumCookTime();// 0x287c890
	float GetMinHandRemainingFuse();// 0x287cbf0
	float GetFuseTime();// 0x287c850
	bool GetFuseTicksInHand();// 0x287c830
	bool AllowCooking();// 0x287c350

--------------------------------
Class: KSProjectile_Grenade.KSProjectile.KSLagCompensatedActor.Actor.Object
	bool bBlocksTargeting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960, Size: 1]
	class UserWidget* OverlayWarningDisplayWidget;//[Offset: 0x968, Size: 1]
	MulticastInlineDelegateProperty OnGrenadeProximity;//[Size: 1]
	enum MarkerTeamVisibility;//[Offset: 0x9a0, Size: 1]
	bool bTakeOverOnStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a1, Size: 1]
	float RepFuseTimeRemaining;//[Offset: 0x9a4, Size: 1]
	float CurrentFuseTime;//[Offset: 0x9ac, Size: 1]
	TimerHandle FuseTimerHandle;//[Offset: 0x9b0, Size: 1]
	TimerHandle FuseCookPauseTimerHandle;//[Offset: 0x9b8, Size: 1]
	float ProximityWarningDelay;//[Offset: 0x9c0, Size: 1]
	bool bSetFuseOnBounce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0, Size: 1]
	float BounceFuseTime;//[Offset: 0x9d4, Size: 1]
	bool bSetFuseOnStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 1]
	float StoppedFuseTime;//[Offset: 0x9dc, Size: 1]
	bool bExplodesOnStopped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e0, Size: 1]
	SphereComponent* DetectionSphere;//[Offset: 0x9e8, Size: 1]
	bool bGeneratesTouchSenseEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 1]
	KSItemStimuliSourceComponent* StimuliSourceComponent;//[Offset: 0x9f8, Size: 1]
	void UnregisterTouchEvent(KSCharacter* KSCharacter);// 0x2825a40
	bool ShouldSetFuseOnStopped(out const HitResult HitResult);// 0x2825950
	bool ShouldExplodeOnStopped(out const HitResult HitResult);// 0x2825880
	bool ShouldExplodeOnBounce(out const HitResult HitResult, out const Vector ImpactVelocity);// 0x2d74e00
	bool ShouldBlockTargeting();// 0x2825860
	void SetOverlayWarningDisplayWidget(class UserWidget InWidget, const bool bForce);// 0x28256c0
	void SetFuseTime(float InFuseTime);// 0x2825640
	void RegisterTouchEvent(KSCharacter* KSCharacter);// 0x2825540
	void OnRep_FuseTimeRemaining();// 0x28253a0
	bool IsInProximityOfLocalCharacter();// 0x2824c80
	bool IsFuseActive();// 0x2824c50
	enum GetMarkerTeamVisibility();// 0x2824890
	float GetCurrentFuseTime();// 0x28247b0
	void FuseTimeExpired();// 0x1fc7530
	bool CanSeeProximityWarning(Controller* QueriedPlayer);// 0x28244f0
	void CallOnLocalViewTargetChanged(KSPlayerController* InController, Actor* OldViewTarget, Actor* NewViewTarget);// 0x28243f0

--------------------------------
Class: ShotgunHitData
	KSWeaponAsset_Shotgun* ShotgunAsset;//[Offset: 0x0, Size: 1]
	enum[] HitResults;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSDamageHistory
	Controller* DamageInstigator;//[Offset: 0x0, Size: 1]
	class DamageType* DamageType;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSWeaponAnimInstance.KSAnimInstance.SkinnedAnimInstance.AnimInstance.Object
	bool m_bIsReloading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 1]
	float m_fIKAlpha;//[Offset: 0x34c, Size: 1]
	float m_fIKBlendInTime;//[Offset: 0x350, Size: 1]
	float m_fIKBlendOutTime;//[Offset: 0x354, Size: 1]
	Vector m_vADSOffset;//[Offset: 0x358, Size: 1]
	bool m_bIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x364, Size: 1]
	float m_fMovingAlpha;//[Offset: 0x368, Size: 1]
	int m_nFireImpulseCounter;//[Offset: 0x36c, Size: 1]
	bool m_bFireImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x370, Size: 1]
	float m_fADSAlpha;//[Offset: 0x374, Size: 1]
	bool m_bIsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 1]
	float m_fLeadingPitch;//[Offset: 0x37c, Size: 1]
	float m_fLeadingYaw;//[Offset: 0x380, Size: 1]
	float m_fLeadingPitchADS;//[Offset: 0x384, Size: 1]
	float m_fLeadingYawADS;//[Offset: 0x388, Size: 1]
	WeaponLeadingInfo LeadingPitch;//[Offset: 0x38c, Size: 1]
	WeaponLeadingInfo LeadingYaw;//[Offset: 0x39c, Size: 1]
	WeaponLeadingInfo LeadingPitchADS;//[Offset: 0x3ac, Size: 1]
	WeaponLeadingInfo LeadingYawADS;//[Offset: 0x3bc, Size: 1]
	int m_LandImpulseCounter;//[Offset: 0x3d8, Size: 1]
	int m_JumpImpulseCounter;//[Offset: 0x3dc, Size: 1]
	bool m_bFoldIronSights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 1]
	int WeaponAnimIndex;//[Offset: 0x3e4, Size: 1]
	bool bPlayerCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 1]
	float TempPhoneFlip;//[Offset: 0x3ec, Size: 1]
	Rotator TargetBarrelRotation;//[Offset: 0x3f0, Size: 1]
	bool bEnableBarrelRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fc, Size: 1]
	bool bEnableRogueSelectPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fd, Size: 1]
	bool bEnableWalkInPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3fe, Size: 1]
	bool bNeedsWalkInStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ff, Size: 1]
	float WalkInStartTime;//[Offset: 0x400, Size: 1]
	void SetWeaponState(KSWeaponComponent* OwningWeaponComponent, enum OldState, enum NewState);// 0x2d74e00
	void SetScopeScaleAlpha(float NewAlpha);// 0x2d74e00
	void SetRevolverChamberRotatae(Rotator NewRevolverChamberRot);// 0x2d74e00
	void SetReactiveAdditiveAlpha(float NewAlpha);// 0x2d74e00
	void SetHideMagazine(const float HideMagazineAlpha);// 0x2d74e00
	void PlayFireAnimationBP();// 0x2d74e00
	void InitWeaponIsARevolver(bool bIsRevolver);// 0x2d74e00
	void InitSetWeaponState(enum NewWeaponState);// 0x2d74e00
	void InitSetUseWeaponAdditive(bool bUseAdditive);// 0x2d74e00
	void InitSetUseReactiveAdditive(bool bUseReactiveAdditive);// 0x2d74e00
	void InitSetScopeMeshScale(float NewAlpha, bool bIsMultiStageReload);// 0x2d74e00
	void InitSetHideMagazine(float HideMagazineAlpha);// 0x2d74e00
	void InitSetFoldingStock(bool bIsStockFolded, Rotator StockRotationTarget, Rotator StockAltRotationTarget);// 0x2d74e00

--------------------------------
Class: WeaponLeadingInfo
	float fMaxWeaponLeading;//[Offset: 0x0, Size: 1]
	float fWeaponLeadingSmoothingFactor;//[Offset: 0x4, Size: 1]
	float fWeaponLeadingInterpSpeed;//[Offset: 0x8, Size: 1]
	float fWeaponLeadingRecoverInterpSpeed;//[Offset: 0xc, Size: 1]

--------------------------------
Class: KSTranslucencyModifier
	Object* TranslucencySource;//[Offset: 0x0, Size: 1]
	float OpacityValue;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSCallToActionCondition.DataAsset.Object

--------------------------------
Class: ImageIconInfo.IconInfo.Object
	SoftObjectPath IconImage;//[Offset: 0x28, Size: 1]
	Texture2D* LegacyIconTexture;//[Offset: 0x40, Size: 1]

--------------------------------
Class: IconInfo.Object

--------------------------------
Class: IconReference
	FName IconType;//[Offset: 0x0, Size: 1]
	Texture2D* Icon;//[Offset: 0x8, Size: 1]
	SoftObjectPath IconPath;//[Offset: 0x30, Size: 1]
	Texture2D* LegacySoftTexture;//[Offset: 0x48, Size: 1]

--------------------------------
Class: ItemDisplayStat
	FName Name;//[Offset: 0x0, Size: 1]
	float Value;//[Offset: 0x8, Size: 1]
	ItemDisplayStatParams StatProperties;//[Offset: 0x10, Size: 1]

--------------------------------
Class: ItemDisplayStatParams.TableRowBase
	FText DisplayText;//[Offset: 0x8, Size: 1]
	float RangeMin;//[Offset: 0x20, Size: 1]
	float RangeMax;//[Offset: 0x24, Size: 1]
	bool ShowsBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool DecreasingStat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool WholeNumbersOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]

--------------------------------
Class: RestoreInfoInitParams
	enum BindType;//[Offset: 0x0, Size: 1]
	enum RestoreType;//[Offset: 0x1, Size: 1]
	bool bRestoreOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool bRestoreExhausted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool bIncludeDefaultCosmetics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]

--------------------------------
Class: PendingCosmeticInfo
	byte Slot;//[Offset: 0x0, Size: 1]
	KSWeaponAttachment* DesiredAttachment;//[Offset: 0x8, Size: 1]
	KSEquipmentId AttachmentId;//[Offset: 0x10, Size: 1]
	KSWeaponAttachmentCosmeticInst* CosmeticInstance;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSSupplyDropViewModelActor.Actor.Object
	void DisplayItem(KSSupplyDrop* SupplyDrop);// 0x2d74e00

--------------------------------
Class: KSSupplyDrop.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int[] SignificantVendorIds;//[Offset: 0x280, Size: 1]
	int VendorLootTableItemId;//[Offset: 0x290, Size: 1]
	int PrimaryLootTableItemId;//[Offset: 0x294, Size: 1]
	int PityVendorId;//[Offset: 0x298, Size: 1]
	int PityRedeemVendorId;//[Offset: 0x29c, Size: 1]
	int PityLootTableItemId;//[Offset: 0x2a0, Size: 1]
	class KSSupplyDropViewModelActor* KSSupplyDropViewModelActorClass;//[Offset: 0x2a8, Size: 1]
	MaterialInterface* SupplyDropBodyMIC;//[Offset: 0x2b0, Size: 1]
	MaterialInterface* SupplyDropScreenMIC;//[Offset: 0x2b8, Size: 1]
	AkAudioEvent* SupplyDropOpenSFX;//[Offset: 0x2c0, Size: 1]
	bool UseEpicAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 1]
	PUMG_StoreItem* GetPityItem(const Object* WorldContextObject);// 0x284cd00
	int GetNumContentsOwned(const Object* WorldContextObject);// 0x284cc70
	int GetNumContentsAvailable(const Object* WorldContextObject);// 0x284cbe0
	bool DoesOwnAllFirstListContents(const Object* WorldContextObject);// 0x284bad0
	bool CanPurchase(const Object* WorldContextObject);// 0x284ba10

--------------------------------
Class: KSLobbyCameraActor.CineCameraActor.CameraActor.Actor.Object
	FName CameraTag;//[Offset: 0x800, Size: 1]

--------------------------------
Class: CineCameraActor.CameraActor.Actor.Object
	CameraLookatTrackingSettings LookatTrackingSettings;//[Offset: 0x7a0, Size: 1]
	CineCameraComponent* GetCineCameraComponent();// 0x3c3b7e0

--------------------------------
Class: CineCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x7e0, Size: 1]
	CameraFilmbackSettings Filmback;//[Offset: 0x7ec, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x7f8, Size: 1]
	CameraFocusSettings FocusSettings;//[Offset: 0x810, Size: 1]
	float CurrentFocalLength;//[Offset: 0x868, Size: 1]
	float CurrentAperture;//[Offset: 0x86c, Size: 1]
	float CurrentFocusDistance;//[Offset: 0x870, Size: 1]
	NamedFilmbackPreset[] FilmbackPresets;//[Offset: 0x880, Size: 1]
	NamedLensPreset[] LensPresets;//[Offset: 0x890, Size: 1]
	FString DefaultFilmbackPresetName;//[Offset: 0x8a0, Size: 1]
	FString DefaultFilmbackPreset;//[Offset: 0x8b0, Size: 1]
	FString DefaultLensPresetName;//[Offset: 0x8c0, Size: 1]
	float DefaultLensFocalLength;//[Offset: 0x8d0, Size: 1]
	float DefaultLensFStop;//[Offset: 0x8d4, Size: 1]
	void SetLensPresetByName(FString InPresetName);// 0x3c3bc40
	void SetFilmbackPresetByName(FString InPresetName);// 0x3c3bba0
	void SetCurrentFocalLength(out const float InFocalLength);// 0x3c3bb00
	float GetVerticalFieldOfView();// 0x3c3bad0
	static NamedLensPreset[] GetLensPresetsCopy();// 0x3c3b9f0
	FString GetLensPresetName();// 0x3c3b970
	float GetHorizontalFieldOfView();// 0x3c3b940
	FString GetFilmbackPresetName();// 0x3c3b8c0
	FString GetDefaultFilmbackPresetName();// 0x3c3b800

--------------------------------
Class: CameraFilmbackSettings
	float SensorWidth;//[Offset: 0x0, Size: 1]
	float SensorHeight;//[Offset: 0x4, Size: 1]
	float SensorAspectRatio;//[Offset: 0x8, Size: 1]

--------------------------------
Class: CameraLensSettings
	float MinFocalLength;//[Offset: 0x0, Size: 1]
	float MaxFocalLength;//[Offset: 0x4, Size: 1]
	float MinFStop;//[Offset: 0x8, Size: 1]
	float MaxFStop;//[Offset: 0xc, Size: 1]
	float MinimumFocusDistance;//[Offset: 0x10, Size: 1]
	int DiaphragmBladeCount;//[Offset: 0x14, Size: 1]

--------------------------------
Class: NamedLensPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraLensSettings LensSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraFocusSettings
	enum FocusMethod;//[Offset: 0x0, Size: 1]
	float ManualFocusDistance;//[Offset: 0x4, Size: 1]
	CameraTrackingFocusSettings TrackingFocusSettings;//[Offset: 0x8, Size: 1]
	bool bDrawDebugFocusPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 1]
	Color DebugFocusPlaneColor;//[Offset: 0x44, Size: 1]
	bool bSmoothFocusChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 1]
	float FocusSmoothingInterpSpeed;//[Offset: 0x4c, Size: 1]
	float FocusOffset;//[Offset: 0x50, Size: 1]

--------------------------------
Class: CameraTrackingFocusSettings
	Actor* ActorToTrack;//[Offset: 0x0, Size: 1]
	Vector RelativeOffset;//[Offset: 0x28, Size: 1]
	bool bDrawDebugTrackingFocusPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 1]

--------------------------------
Class: NamedFilmbackPreset
	FString Name;//[Offset: 0x0, Size: 1]
	CameraFilmbackSettings FilmbackSettings;//[Offset: 0x10, Size: 1]

--------------------------------
Class: CameraLookatTrackingSettings
	bool bEnableLookAtTracking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bDrawDebugLookAtTrackingPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	float LookAtTrackingInterpSpeed;//[Offset: 0x4, Size: 1]
	Actor* ActorToTrack;//[Offset: 0x18, Size: 1]
	Vector RelativeOffset;//[Offset: 0x40, Size: 1]
	bool bAllowRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 1]

--------------------------------
Class: RogueScreenPreviewActor_C.KSJobSelectPrvwActor_RogueScrn.KSJobSelectPreviewActor_Lobby.KSJobSelectPreviewActor.Info.Actor.Object

--------------------------------
Class: KSJobSelectPrvwActor_RogueScrn.KSJobSelectPreviewActor_Lobby.KSJobSelectPreviewActor.Info.Actor.Object
	RogueScreenLoadoutComponent* RogueScreenLoadoutComponent;//[Offset: 0x5c8, Size: 1]

--------------------------------
Class: KSJobSelectPreviewActor_Lobby.KSJobSelectPreviewActor.Info.Actor.Object
	enum CharacterIndex;//[Offset: 0x428, Size: 1]
	bool bControlChildCharacterNameplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429, Size: 1]
	float ChildCharacterDefaultScaleOverride;//[Offset: 0x42c, Size: 1]
	KSPlayerInfo* WeakPlayerInfo;//[Offset: 0x430, Size: 1]
	bool bPlayerPendingPartyAccept;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x438, Size: 1]
	bool bAllowJobChangeOnPlayEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x439, Size: 1]
	bool bStopPlayingEmoteWhileLoadingNewEmote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43a, Size: 1]
	<enum,Vector> EmoteCameraPositionLocationOffsets;//[Offset: 0x440, Size: 1]
	<enum,float> EmoteCameraPositionScaleOverrides;//[Offset: 0x490, Size: 1]
	KSJobItem* FailSafeEmoteJob;//[Offset: 0x4e0, Size: 1]
	KSEmote* PendingEmote;//[Offset: 0x508, Size: 1]
	KSEquipmentId PendingEmoteComponentId;//[Offset: 0x520, Size: 1]
	KSEmoteCosmeticComponent* PendingEmoteComponent;//[Offset: 0x528, Size: 1]
	KSJobItem* PendingEmoteExpectedJob;//[Offset: 0x530, Size: 1]
	KSJobItem* ActiveEmoteExpectedJob;//[Offset: 0x558, Size: 1]
	KSEmoteCosmeticComponent* ActiveEmoteComponent;//[Offset: 0x580, Size: 1]
	Vector ChildCharacterDefaultLocation;//[Offset: 0x588, Size: 1]
	void StopActiveEmote();// 0x279e340
	bool SetPlayerInfo(KSPlayerInfo* InPlayerInfo);// 0x279e2b0
	void ReturnCharacterToIdle();// 0xd138f0
	bool PlayEmote(out const KSEmote* InEmote, out const KSJobItem* DesiredJob);// 0x279d5e0
	void OverrideActiveSkin(out const KSSkinBundle* InSkin);// 0x279d520
	bool IsPlayerPendingPartyAccept();// 0x279d050
	KSPlayerInfo* GetPlayerInfo();// 0x279bef0
	enum GetCharacterIndex();// 0x279a770
	void ClearPlayerInfo();// 0x2799210
	void ClearPendingEmote();// 0x27991f0
	void ClearActiveSkinOverride();// 0x1fa1680

--------------------------------
Class: RogueScreenLoadoutComponent.PreviewActorLoadoutComponent.ActorComponent.Object
	KSJobItem* CurrentJob;//[Offset: 0xb8, Size: 1]
	KSSkinBundle* OverrideSkin;//[Offset: 0xc0, Size: 1]
	<KSItem*,KSItem*> SkinMap;//[Offset: 0xc8, Size: 1]
	bool bBoundToLoadoutFactory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118, Size: 1]
	int LastLoadoutId;//[Offset: 0x11c, Size: 1]
	void LoadoutDeleted(int InLoadoutId);// 0x28a0970
	void LoadoutChanged(PUMG_Loadout* InLoadout);// 0x285f2a0

--------------------------------
Class: PreviewActorLoadoutComponent.ActorComponent.Object
	KSJobSelectPreviewActor* PreviewActorOwner;//[Offset: 0xb0, Size: 1]

--------------------------------
Class: MusicAudioPlayer_C.KSAudioPlayer.Info.Actor.Object
	void Append String to Event Array(FString AppendStringIn, out FString[] EventNameArrayIn, out FString[] EventNameArrayOut, FString[] TempArray, FString CurrentEntry, FString AppendString, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Array_Get_Item, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FString CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x2d74e00
	void PrependStringToEventArray(FString PrependStringIn, out FString[] EventNameArrayIn, out FString[] EventNameArrayOut, FString[] TempArray, FString CurrentEntry, FString PrependString, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_NotEqual_StrStr_ReturnValue, int Temp_int_Array_Index_Variable, FString CallFunc_Array_Get_Item, int Temp_int_Array_Index_Variable, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Array_Get_Item, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x2d74e00
	FString[] ComposeEventNamePriorityArray(FString EventName, KSAudioPlayerStateParameterData* CurrentStateParameters, KSAudioPlayerStateParameterData* StateParameters, FString[] EventPriorityArray, FString CallFunc_GetActiveMusicPack_ReturnValue, FString CallFunc_GetActivePlayerCharacter_ReturnValue, FString CallFunc_GetActiveMapLevel_ReturnValue, FString CallFunc_GetActiveGameMode_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FString[] CallFunc_PrependStringToEventArray_EventNameArrayOut, FString[] CallFunc_PrependStringToEventArray_EventNameArrayOut, FString[] CallFunc_PrependStringToEventArray_EventNameArrayOut, FString[] CallFunc_PrependStringToEventArray_EventNameArrayOut);// 0x2d74e00
	FString[] ComposeBankNamePriorityArray(FString BankPrefix, KSAudioPlayerStateParameterData* CurrentStateParameters, FString[] EventPriorityArray, KSAudioPlayerStateParameterData* StateParameters, FString CallFunc_GetActiveGameMode_ReturnValue, FString CallFunc_GetActiveMapLevel_ReturnValue, FString CallFunc_GetActivePlayerCharacter_ReturnValue, FString CallFunc_GetActiveMusicPack_ReturnValue, FString[] CallFunc_Append_String_to_Event_Array_EventNameArrayOut, FString[] CallFunc_Append_String_to_Event_Array_EventNameArrayOut, int CallFunc_Array_AddUnique_ReturnValue, FString[] CallFunc_Append_String_to_Event_Array_EventNameArrayOut, FString[] CallFunc_Append_String_to_Event_Array_EventNameArrayOut);// 0x2d74e00

--------------------------------
Class: BP_LobbyMode_C.PGame_GameModeBase.GameMode.GameModeBase.Info.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x3d0, Size: 1]

--------------------------------
Class: BP_LobbyState_C.GameState.GameStateBase.Info.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x290, Size: 1]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x298, Size: 1]
	KSEmoteMusicManager* EmoteMusicManager;//[Offset: 0x2a0, Size: 1]
	KSEmoteMusicManager* GetEmoteMusicManager();// 0x2d74e00
	void ReceiveBeginPlay();// 0x2d74e00
	void ExecuteUbergraph_BP_LobbyState(int EntryPoint, Transform CallFunc_MakeTransform_ReturnValue, bool CallFunc_IsDedicatedServer_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, EmoteSoundManager_C* CallFunc_FinishSpawningActor_ReturnValue);// 0x2d74e00

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: EmoteSoundManager_C.KSEmoteMusicManager.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x260, Size: 1]

--------------------------------
Class: TM_Test_MainMenu_P_C.LevelScriptActor.Actor.Object

--------------------------------
Class: LocalPlayerLobbyCharacter_C.LobbyMainCharacter_C.KSLobbyCharacter.KSCharacter.KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	FString PendingPlayerName;//[Offset: 0x3f78, Size: 1]
	KSItem* PendingAvatar;//[Offset: 0x3f88, Size: 1]
	bool PendingIsLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f90, Size: 1]
	bool NeedsToSetNameplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f91, Size: 1]

--------------------------------
Class: LobbyMainCharacter_C.KSLobbyCharacter.KSCharacter.KSCharacterBase.KSCharacterFoundation.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3ec0, Size: 1]
	byte LobbyProp01_Timeline__Direction_311B7F8B46533A11B70CFAA92E9DA987;//[Offset: 0x3ec8, Size: 1]
	TimelineComponent* LobbyProp01_Timeline;//[Offset: 0x3ed0, Size: 1]
	byte LobbyWeapon02_Timeline__Direction_6E3E791441C09FAF955C7099C1934001;//[Offset: 0x3ed8, Size: 1]
	TimelineComponent* LobbyWeapon02_Timeline;//[Offset: 0x3ee0, Size: 1]
	byte LobbyWeapon01_Timeline__Direction_A9FF0C36405CB79CE4A5609C33E7F935;//[Offset: 0x3ee8, Size: 1]
	TimelineComponent* LobbyWeapon01_Timeline;//[Offset: 0x3ef0, Size: 1]
	FName[] LobbyFidgetKeywordArray;//[Offset: 0x3ef8, Size: 1]
	Transform Transform Reset;//[Offset: 0x3f10, Size: 1]
	float Lobby Anim total duration;//[Offset: 0x3f40, Size: 1]
	TimerHandle Lobby Anim timer;//[Offset: 0x3f48, Size: 1]
	bool Loop montage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f50, Size: 1]
	int[] Current Persistent Material Override IDs;//[Offset: 0x3f58, Size: 1]
	enum Lobby Character Animation Pose;//[Offset: 0x3f68, Size: 1]
	float Lobby Anim Starting Time;//[Offset: 0x3f6c, Size: 1]
	bool HasInitializedNameplate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f70, Size: 1]
	bool Emote;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f71, Size: 1]
	bool Emote Queued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f72, Size: 1]
	bool Play Lobby Mont After Removing Persistent Overrides;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f73, Size: 1]
	void OnGenderChanged(const FName Temp_name_Variable, const FName Temp_name_Variable, KSCharacterGender CallFunc_GetGender_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2d74e00
	void InitializeNameplate(NewWBP_LobbyNameplate_C* Nameplate, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, PUMG_HUD* K2Node_DynamicCast_AsPUMG_HUD, bool K2Node_DynamicCast_bSuccess);// 0x2d74e00
	void Randomize Lobby Idle anim start(KSCharacterAnimInst* CallFunc_GetKSCharacterAnimInst_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_GetPlayLength_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue);// 0x2d74e00
	void Make Lobby Fidget Keyword Array(FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue, KSCharacterAnimInst* CallFunc_GetKSCharacterAnimInst_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void Parse Lobby Fidget Animation(out FName[] LobbyFidgetKeywordArray, out enum Lobby Character Animation Pose, bool Temp_bool_Variable, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_Variable, int CallFunc_Subtract_IntInt_ReturnValue, bool Temp_bool_Variable, int CallFunc_RandomIntegerInRange_ReturnValue, enum Temp_byte_Variable, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, byte CallFunc_MakeLiteralByte_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default);// 0x2d74e00
	void Get Montage Position of Lobby Characater(out float Position, KSAnimInstance* CallFunc_GetKSAnimInstance_ReturnValue, AnimInstance* CallFunc_GetAnimInstance_ReturnValue, AnimMontage* CallFunc_GetCurrentActiveMontage_ReturnValue, float CallFunc_Montage_GetPosition_ReturnValue);// 0x2d74e00
	void Init Body Apparel();// 0x2d74e00
	void LobbyWeapon01_Timeline__FinishedFunc();// 0x2d74e00
	void LobbyWeapon01_Timeline__UpdateFunc();// 0x2d74e00
	void LobbyWeapon02_Timeline__FinishedFunc();// 0x2d74e00
	void LobbyWeapon02_Timeline__UpdateFunc();// 0x2d74e00
	void LobbyProp01_Timeline__FinishedFunc();// 0x2d74e00
	void LobbyProp01_Timeline__UpdateFunc();// 0x2d74e00
	void OnNotifyEnd_AA177F3D4F176F58A7691D84D8C329C7(FName NotifyName, int MontageInstanceID);// 0x2d74e00
	void OnNotifyBegin_AA177F3D4F176F58A7691D84D8C329C7(FName NotifyName, int MontageInstanceID);// 0x2d74e00
	void OnInterrupted_AA177F3D4F176F58A7691D84D8C329C7(FName NotifyName, int MontageInstanceID);// 0x2d74e00
	void OnBlendOut_AA177F3D4F176F58A7691D84D8C329C7(FName NotifyName, int MontageInstanceID);// 0x2d74e00
	void OnCompleted_AA177F3D4F176F58A7691D84D8C329C7(FName NotifyName, int MontageInstanceID);// 0x2d74e00
	void StopRightPropEffect();// 0x2d74e00
	void PlayRightPropEffect(float Duration, FName MaterialParameter, CurveFloat* FloatCurve);// 0x2d74e00
	void StopLeftPropEffect();// 0x2d74e00
	void PlayLeftPropEffect(float Duration, FName MaterialParameter, CurveFloat* FloatCurve);// 0x2d74e00
	void StopScenePropEffect();// 0x2d74e00
	void PlayScenePropEffect(float Duration, FName MaterialParameter, CurveFloat* FloatCurve);// 0x2d74e00
	void ReceiveBeginPlay();// 0x2d74e00
	void Add Body Apparel As Parent(SkinnableSkeletalMeshComponent* Skinnable Mesh Component);// 0x2d74e00
	void PlayLobbyCharacterMontage();// 0x2d74e00
	void StopLobbyCharacterMontage();// 0x2d74e00
	void InitializeLobbyCharacterAnimation();// 0x2d74e00
	void UpdateSilhouette(float DeltaSeconds);// 0x2d74e00
	void Remove All Persistent Overrides();// 0x2d74e00
	void ExecuteUbergraph_LobbyMainCharacter(int EntryPoint, FName K2Node_CustomEvent_NotifyName, int K2Node_CustomEvent_MontageInstanceID, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, int K2Node_CustomEvent_MontageInstanceID, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, int K2Node_CustomEvent_MontageInstanceID, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, int K2Node_CustomEvent_MontageInstanceID, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_NotifyName, int K2Node_CustomEvent_MontageInstanceID, delegate K2Node_CreateDelegate_OutputDelegate, int Temp_int_Variable, FName Temp_name_Variable, enum Temp_byte_Variable, int Temp_int_Array_Index_Variable, float K2Node_CustomEvent_Duration, FName K2Node_CustomEvent_MaterialParameter, CurveFloat* K2Node_CustomEvent_FloatCurve, float CallFunc_GetPlaybackPosition_ReturnValue, float K2Node_CustomEvent_Duration, FName K2Node_CustomEvent_MaterialParameter, CurveFloat* K2Node_CustomEvent_FloatCurve, float CallFunc_GetFloatValue_ReturnValue, float K2Node_CustomEvent_Duration, FName K2Node_CustomEvent_MaterialParameter, CurveFloat* K2Node_CustomEvent_FloatCurve, float CallFunc_GetPlaybackPosition_ReturnValue, float CallFunc_GetPlaybackPosition_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, SkinnableSkeletalMeshComponent* K2Node_CustomEvent_Skinnable_Mesh_Component, bool CallFunc_IsValid_ReturnValue, MultiSkinObject* CallFunc_GetSkinObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, MultiSkinObject* CallFunc_GetBodyApparelSkinObject_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_SetPersistentScalarParameterOnAllMaterials_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, KSCharacterAnimInst* CallFunc_GetKSCharacterAnimInst_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_SetPersistentScalarParameterOnAllMaterials_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, bool CallFunc_GetSkinnedAnimMontage_bHasOverride, AnimMontage* CallFunc_GetSkinnedAnimMontage_ReturnValue, int CallFunc_SetPersistentScalarParameterOnAllMaterials_ReturnValue, AnimMontage* K2Node_Select_Default, int CallFunc_Array_Length_ReturnValue, enum CallFunc_Parse_Lobby_Fidget_Animation_Lobby_Character_Animation_Pose, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_CreateProxyObjectForPlayMontage_CreatedInstanceID, PlayMontageCallbackProxy* CallFunc_CreateProxyObjectForPlayMontage_ReturnValue, bool CallFunc_IsValid_ReturnValue, float K2Node_Event_DeltaSeconds, SkinnableSkeletalMeshComponent* K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, int CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2d74e00

--------------------------------
Class: NewWBP_LobbyNameplate_C.KSLobbyNameplateWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	KSAsyncImage* AvatarIcon;//[Offset: 0x530, Size: 1]
	Image* PartyLeader;//[Offset: 0x538, Size: 1]
	SizeBox* PartyLeaderIcon;//[Offset: 0x540, Size: 1]
	HorizontalBox* PlayerDisplay;//[Offset: 0x548, Size: 1]
	TextBlock* PlayerName;//[Offset: 0x550, Size: 1]
	TextBlock* ProgressNum;//[Offset: 0x558, Size: 1]
	HorizontalBox* RankedDisplayWrapper;//[Offset: 0x560, Size: 1]
	WBP_RankedIcon_C* RankedIcon;//[Offset: 0x568, Size: 1]
	VerticalBox* RankedProgress;//[Offset: 0x570, Size: 1]
	WBP_ProgressEarnedBar_C* RankedProgressBar;//[Offset: 0x578, Size: 1]
	TextBlock* TotalNum;//[Offset: 0x580, Size: 1]
	KSPartyDataFactory* PartyDataFactory;//[Offset: 0x588, Size: 1]
	int MaxNameLength;//[Offset: 0x590, Size: 1]
	KSPlayerInfo* StoredPlayerInfo;//[Offset: 0x598, Size: 1]
	KSQueueDataFactory* QueueDataFactory;//[Offset: 0x5a0, Size: 1]
	bool ShouldShowRankedXp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8, Size: 1]
	void UpdateRankedTotal(bool Index, int RequiredPlacementMatches, bool Temp_bool_Variable, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText K2Node_Select_Default);// 0x2d74e00
	void UpdatePlayerName(FText CallFunc_GetName_ReturnValue);// 0x2d74e00
	void UpdateRankedData(bool Temp_bool_Variable, enum Temp_byte_Variable, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetSelectedQueueId_ReturnValue, GameInstance* CallFunc_GetGameInstance_ReturnValue, enum Temp_byte_Variable, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, KSRankedManager* CallFunc_GetRankedManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, FString CallFunc_GetRankedSeasonKeyForQueue_OutKey, bool CallFunc_GetRankedSeasonKeyForQueue_ReturnValue, int CallFunc_GetRequiredPlacementMatches_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, int CallFunc_GetRankedLevel_ReturnValue, int CallFunc_GetRankedLevelProgress_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, enum K2Node_Select_Default, bool CallFunc_Greater_IntInt_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2d74e00
	void OnPartyUpdated();// 0x2d74e00
	void UpdateSelectedQueue(bool CallFunc_IsValid_ReturnValue, int CallFunc_GetSelectedQueueId_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsRankedQueue_ReturnValue);// 0x2d74e00
	void SetPlayerDisplayVisible(bool IsVisible, enum Temp_byte_Variable, bool CallFunc_Not_PreBool_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool Temp_bool_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void UpdatePartyLeaderIcon(enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, int64 CallFunc_GetPlayerId_ReturnValue, bool CallFunc_CheckPartyMemberIsLeader_ReturnValue, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default);// 0x2d74e00
	void SetPlayerInfo(KSPlayerInfo* playerinfo, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void OnPossession(PlayerState* PlayerState, KSCharacter* Character);// 0x2d74e00
	void OnHovered();// 0x2d74e00
	void OnUnhovered();// 0x2d74e00
	void Construct();// 0x2d74e00
	void SetName(FText InName);// 0x2d74e00
	void SetAvatar(KSItem* AvatarItem);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void OnInitialized();// 0x2d74e00
	void RefreshRankedData();// 0x2d74e00
	void HandleOnPartyMemberPromoted(int64 PlayerId);// 0x2d74e00
	void ExecuteUbergraph_NewWBP_LobbyNameplate(int EntryPoint, PlayerState* K2Node_Event_PlayerState, KSCharacter* K2Node_Event_Character, FText K2Node_CustomEvent_InName, KSItem* K2Node_CustomEvent_AvatarItem, bool CallFunc_IsValid_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Len_ReturnValue, FString CallFunc_GetSubstring_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool K2Node_Event_IsDesignTime, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, KSQueueDataFactory* CallFunc_GetKSQueueDataFactory_ReturnValue, KSPartyDataFactory* CallFunc_GetPartyDataFactory_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, int64 K2Node_CustomEvent_PlayerId);// 0x2d74e00

--------------------------------
Class: KSLobbyNameplateWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void SetupRankedManager();// 0x29daa00
	void RefreshRankedData();// 0x2d74e00

--------------------------------
Class: KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	bool bIsUIOnlyWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c8, Size: 1]
	bool bIsExclusiveMenuWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c9, Size: 1]
	int AmbientSoundRtpc;//[Offset: 0x4cc, Size: 1]
	TickAnimationManager* TickAnimations;//[Offset: 0x4d0, Size: 1]
	delegate ViewportEvent;//[Offset: 0x4d8, Size: 1]
	bool bSubstituteKillCamWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e8, Size: 1]
	bool bSubstituteKillCamOwningPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e9, Size: 1]
	bool bWantsKillCamCallbacks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ea, Size: 1]
	float OpacityWhenAiming;//[Offset: 0x508, Size: 1]
	bool DoesFadeOutWhenAiming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 1]
	float AimTransitionProgress;//[Offset: 0x510, Size: 1]
	void UpdateOpacityWhenAiming();// 0x2a2cf70
	void UnbindFromViewportSizeChange();// 0x2a2cf50
	void TriggerGlobalInvalidate();// 0x2a2cf30
	void StopTickAnimation(FName AnimName);// 0x2a2ceb0
	void SkipToEndTickAnimation(FName AnimName);// 0x2a2ce30
	bool ShouldUpdateOpacityWhenAiming();// 0x2888d10
	void SetPositionRTPC();// 0x2a2cd90
	void SetAllAnimationsPlaybackSpeed(float PlaybackSpeed);// 0x2a2cb60
	void ResumeTickAnimation(FName AnimName);// 0x2a2cae0
	void RemoveTickAnimation(FName AnimName);// 0x2a2ca60
	void PlayTickAnimation(FName AnimName);// 0x2a2c4b0
	void PauseTickAnimation(FName AnimName);// 0x2a2c430
	bool IsInKillCamPlayback();// 0x2a2c2b0
	void InitializeTickAnimations();// 0x2d74e00
	void HandleAimStateChange(enum NewAimState);// 0x2a2be70
	bool GetTickAnimationInfo(FName AnimName, out TickAnimationParams OutAnimParams);// 0x2a2bcc0
	PlayerController* GetNormalOwningPlayer();// 0x2a2bb80
	PlayerController* GetKillCamSpectatorController();// 0x27b3600
	PlayerController* GetActivePlayerController();// 0x2a2bb00
	void BlueprintPrepareKillCamPlayback();// 0x2d74e00
	void BlueprintFinishKillCamPlayback();// 0x2d74e00
	void BindToViewportSizeChange(out const delegate InViewportEvent);// 0x2a2b810
	void AddTickAnimation(FName AnimName, float Duration, out const delegate UpdateEvent, out const delegate FinishedEvent);// 0x2a2b680

--------------------------------
Class: TickAnimationManager.Object
	<FName,TickAnimationParams> AnimsByName;//[Offset: 0x28, Size: 1]
	void StopAnimation(FName AnimName);// 0x2a2e2d0
	void SkipToEndAnimation(FName AnimName);// 0x2a2e250
	void ResumeAnimation(FName AnimName);// 0x2a2e1d0
	void RemoveAnimation(FName AnimName);// 0x2a2e150
	void PlayAnimation(FName AnimName);// 0x2a2dfc0
	void PauseAnimation(FName AnimName);// 0x2a2df40
	bool GetAnimationInfo(FName AnimName, out TickAnimationParams OutAnimParams);// 0x2a2de30
	void ApplyTick(float DeltaTime);// 0x2a2dc60
	void AddAnimation(FName AnimName, float Duration, out const delegate UpdateEvent, out const delegate FinishedEvent);// 0x2a2dad0

--------------------------------
Class: TickAnimationParams
	float Duration;//[Offset: 0x0, Size: 1]
	delegate UpdateEvent;//[Offset: 0x4, Size: 1]
	delegate FinishedEvent;//[Offset: 0x14, Size: 1]
	bool IsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]
	float ElapsedTime;//[Offset: 0x28, Size: 1]

--------------------------------
Class: FormatArgumentData
	FString ArgumentName;//[Offset: 0x0, Size: 1]
	byte ArgumentValueType;//[Offset: 0x10, Size: 1]
	FText ArgumentValue;//[Offset: 0x18, Size: 1]
	int ArgumentValueInt;//[Offset: 0x30, Size: 1]
	float ArgumentValueFloat;//[Offset: 0x34, Size: 1]
	enum ArgumentValueGender;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSLobbyHUDNew.KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	MulticastInlineDelegateProperty OnMinuteTimerUpdate;//[Size: 1]
	KSQueueDataFactory* QueueDataFactory;//[Offset: 0x648, Size: 1]
	KSFriendDataFactory* FriendDataFactory;//[Offset: 0x650, Size: 1]
	KSPlayerQueryDataFactory* PlayerQueryDataFactory;//[Offset: 0x658, Size: 1]
	KSEMODataFactory* EMODataFactory;//[Offset: 0x660, Size: 1]
	KSPlayerWhoDataFactory* PlayerWhoDataFactory;//[Offset: 0x668, Size: 1]
	KSSimulmediaDataFactory* SimulmediaDataFactory;//[Offset: 0x670, Size: 1]
	KSMailCenterDataFactory* MailCenterDataFactory;//[Offset: 0x678, Size: 1]
	KSMediaPlayerWidget* CurrentMediaPlayerWidget;//[Offset: 0x680, Size: 1]
	MulticastInlineDelegateProperty OnTriggerBlockerChange;//[Size: 1]
	MulticastInlineDelegateProperty LobbyWidgetReady;//[Size: 1]
	float LoadingScreenFadeInDelay;//[Offset: 0x6cc, Size: 1]
	float LoadingScreenFadeInDuration;//[Offset: 0x6d0, Size: 1]
	void TransitionCamera(FName CameraTag, float BlendTime);// 0x29db380
	void ToggleDisablePartyLobbyCharacters(bool Disable);// 0x29db2f0
	void TestSetStoreRotationOverride(FString DateTime);// 0x29db210
	void TestPostMatchLobbyMobileWeapons(int Count, float ExpMultiplier);// 0x29db140
	void TestPostMatchLobbyMobileEasy(float ExpMultiplier);// 0x29db0c0
	void TestPostMatchLobbyMobile(int StartingMobileXp, int MobileSecondsPlayed, int MobileGunKills, int MobileGadgetKills, int MobileAbilityKills, int MobileMeleeKills, int MobileThrownKills);// 0x29daed0
	void TestPostMatchLobby(int PlayerXp, int RankedXp, int RogueXp, int ReputationEarned, int PlacementMatchNum, int BattlePassXp, int WeaponMasteryCount, int WeaponMasteryLevels, bool CategoryMasteryCanLevel, int MilestonesPerWeapon);// 0x29dac20
	void TestMediaPlayerUrl(FString MediaUrl, int WatchTimer);// 0x2d74e00
	void TestEventGrandPrizeAcquisition();// 0x29dac00
	void TestBattlePassAcquisition(int StartTier, int EndTier);// 0x29dab40
	void ShowPopupConfirmation(FText Message, enum MessageType);// 0x29daa20
	void ResetMobileProgressionCTA();// 0x29da960
	void ResetLobbyCharactersByIndex(enum[] IndicesToReset);// 0x29da880
	void ResetLobbyCharacters();// 0x29da860
	void OnStoreVendorsLoaded(int GroupId, out const int[] VendorIds);// 0x29da680
	void OnNotEnoughCurrency(PUMG_StorePurchaseRequest* PurchaseRequest);// 0x29da600
	bool IsPlayerMuted(PUMG_PlayerInfo* PlayerData);// 0x29da570
	void HandleSpecificPartyIdDataUpdated(int64 PlayerId);// 0x29da460
	void HandleSpecificPartyDataUpdated(PUMG_PartyMemberData PartyMember);// 0x29da330
	void HandleSpecificPartyDataAdded(PUMG_PartyMemberData PartyMember);// 0x29da330
	void HandlePartyMemberDataUpdated(out const PUMG_PartyMemberData PartyMember, int MemberIndex);// 0x29da1e0
	void HandlePartyEmoteMessageReceived(PUMG_PlayerInfo* Sender, KSEmote* SoftEmotePtr);// 0x29da0d0
	void HandlePartyDataUpdated();// 0x29da0b0
	void HandleMatchStatusUpdated(enum MatchStatus);// 0x2d74e00
	void HandleLoginUserChange();// 0xd94a20
	void HandleLoginStateChange(enum LoginState);// 0x29da030
	void HandleDenyPartyInvitation();// 0x29da010
	void HandleAcceptPartyInvitation();// 0x29d9f60
	KSSimulmediaDataFactory* GetSimulmediaDataFactory();// 0x29d9e30
	KSPlayerWhoDataFactory* GetPlayerWhoDataFactory();// 0x29d9df0
	KSPlayerQueryDataFactory* GetPlayerQueryDataFactory();// 0x29d9dd0
	KSMailCenterDataFactory* GetMailCenterDataFactory();// 0x29d9d00
	KSLobbyWidget* GetLobbyWidget();// 0x29d9b40
	bool GetLobbyCharacterByPosition(enum CharacterIndex, out KSLobbyCharacter* LobbyCharacter);// 0x29d9a70
	KSQueueDataFactory* GetKSQueueDataFactory();// 0x29d9a40
	KSJsonDataFactory* GetJsonDataFactory();// 0x29d9a00
	bool GetJobSelectPreviewActorByPosition(enum CharacterIndex, out KSJobSelectPreviewActor_Lobby* PreviewActor);// 0x29d9930
	KSFriendDataFactory* GetFriendDataFactory();// 0x29d98f0
	KSEMODataFactory* GetEMODataFactory();// 0x29d9800
	KSItem* GetDefaultPlayerAccountItem(enum ItemSlot);// 0x2d74e00
	bool GetCharacterIndexFromPartyIndex(int PartyMemberIndex, out enum OutCharIndex);// 0x29d9560
	void ForceMinuteTimerUpdate();// 0x29d9440
	void ForceEulaAccept();// 0x29d9420
	void FlushMobileTestData();// 0x29d9400
	void CreateInitialPlayerLoadout();// 0x29d92e0
	void CheckForExistingPenaltyTime();// 0x29d92c0
	void AddMobileTestData(int ActivityVendorID, int ProgressionAmount);// 0x29d9190

--------------------------------
Class: KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	MulticastInlineDelegateProperty OnPreferredSiteUpdated;//[Size: 1]
	PUMG_LoginDataFactory* LoginDataFactory;//[Offset: 0x5b0, Size: 1]
	KSSettingsDataFactory* SettingsFactory;//[Offset: 0x5b8, Size: 1]
	KSChatDataFactory* ChatDataFactory;//[Offset: 0x5c0, Size: 1]
	KSPartyDataFactory* PartyDataFactory;//[Offset: 0x5c8, Size: 1]
	KSNPEDataFactory* NPEDataFactory;//[Offset: 0x5d0, Size: 1]
	KSPlayerDataFactory* PlayerDataFactory;//[Offset: 0x5d8, Size: 1]
	bool bDisplayWatermark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 1]
	float WatermarkAlpha;//[Offset: 0x5e4, Size: 1]
	float WatermarkOffsetLeft;//[Offset: 0x5e8, Size: 1]
	float WatermarkOffsetTop;//[Offset: 0x5ec, Size: 1]
	float WatermarkOffsetRight;//[Offset: 0x5f0, Size: 1]
	float WatermarkOffsetBottom;//[Offset: 0x5f4, Size: 1]
	float WatermarkChangePositionTime;//[Offset: 0x5f8, Size: 1]
	DataTable* ColorPaletteDT;//[Offset: 0x600, Size: 1]
	DataTable* FontPaletteDT;//[Offset: 0x608, Size: 1]
	KSSettingsColorOptionsAsset* CrosshairColorOptions;//[Offset: 0x610, Size: 1]
	void UIX_ReportServer();// 0x29d19e0
	void TestChallengeNotification();// 0xd94a20
	void ShowErrorPopup(FText ErrorMsg);// 0x29d18b0
	bool ShouldShowCrossplayIconForPlayerState(KSPlayerState* PlayerState);// 0x29d1820
	bool ShouldShowCrossplayIconForPlayer(int64 PlayerId);// 0x29d1790
	void SetPreferredSiteId(int SiteId);// 0x29d12f0
	void SetDumpMarshalsOut(bool On);// 0x29d1090
	void SetDumpMarshalsIn(bool On);// 0x29d1000
	void SetDumpMarshals(bool On);// 0x29d0f70
	void PrintToLog(FText InText);// 0x29d0e30
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x29d0da0
	void OnInvalidVoucherAcquisition(PUMG_StoreItem* StoreItem);// 0x29d0b80
	bool MutePlayer(int64 PlayerId, bool Mute);// 0x29d0790
	void LogErrorMessage(FText ErrorMsg);// 0x29d06b0
	bool IsSamePortalAsLocalPlayer(int64 PlayerId);// 0x29d0620
	bool IsMuted(int64 PlayerId);// 0x29d0590
	void HandleOpenTextChat(bool BeginChatCommand);// 0x29d0380
	void HandleControllerDisconnect();// 0x29d0340
	KSUISessionManager* GetUISessionManager();// 0x29d0210
	void GetSiteList(out <int,FText> OutSiteIdToNameMap);// 0x29d00b0
	KSSettingsDataFactory* GetSettingsDataFactory();// 0x29d0080
	bool GetPreferredSiteId(out int OutSiteId);// 0x29cffe0
	KSPlayerDataFactory* GetPlayerDataFactory();// 0x29cffb0
	KSPartyDataFactory* GetPartyDataFactory();// 0x29cff80
	KSNPEDataFactory* GetNPEDataFactory();// 0x29cff50
	KSMercManager* GetMercManager();// 0x29cff20
	PUMG_LoginDataFactory* GetLoginDataFactory();// 0x29cfef0
	KSLoadoutDataFactory* GetLoadoutDataFactory();// 0x29cfec0
	KSStoreItemHelper* GetItemHelper();// 0x29cfe90
	bool GetFont(FName FontName, out SlateFontInfo ReturnFont);// 0x29cfd70
	PanelWidget*[] GetFocusableWidgetContainers();// 0x2d74e00
	bool GetColor(FName ColorName, out LinearColor ReturnColor);// 0x29cfc30
	KSChatDataFactory* GetChatDataFactory();// 0x29cfc00
	KSAcquisitionManager* GetAcquisitionManager();// 0x29cfbd0
	void EvaluateFocus();// 0x2d74e00
	void DisplayWatermark();// 0x2d74e00
	void ConfirmReportServer();// 0x29cf4c0
	void ApplySafeFrameScale(float SafeFrameScale);// 0x2d74e00

--------------------------------
Class: PUMG_LoginDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnLoginUserChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLoginStateChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnLoginError;//[Size: 1]
	MulticastInlineDelegateProperty OnControllerDisconnected;//[Size: 1]
	bool bAllowLoginDuringPartialInstall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	DataTable* ErrorMsgsDT;//[Offset: 0x88, Size: 1]
	bool bAttemptedDeferredInviteAutoLogin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 1]
	FString RefreshToken;//[Offset: 0xf8, Size: 1]
	bool bNeedsValidateDisplayName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	FString CustomDisplayName;//[Offset: 0x120, Size: 1]
	int MinCustomDisplayNameLength;//[Offset: 0x130, Size: 1]
	int MaxCustomDisplayNameLength;//[Offset: 0x134, Size: 1]
	FString CustomDisplayNameInvalidChars;//[Offset: 0x138, Size: 1]
	FString SavedCredentialPrefix;//[Offset: 0x148, Size: 1]
	FName NicknameOSS;//[Offset: 0x158, Size: 1]
	MulticastInlineDelegateProperty OnLoginWaitQueueMessage;//[Size: 1]
	bool UpdateControllers();// 0xe8e080
	void UIX_TriggerAutoLogin();// 0xe8e060
	void UIX_OnTwoFactorSubmit(FString AuthCode);// 0xe8def0
	void UIX_OnTwoFactorDecline();// 0xe8d670
	void UIX_OnSubmitLogin(FString UserName, FString password);// 0xe8dd80
	void UIX_OnSubmitConsoleLogin(int ControllerId);// 0xe8dd00
	void UIX_OnSubmitAutoLogin(int ControllerId);// 0xe8dd00
	void UIX_OnSignInWithGoogle(int ControllerId);// 0xe8dc80
	void UIX_OnSignInWithApple(int ControllerId);// 0xe8dc00
	void UIX_OnSignInAsGuest(int ControllerId);// 0xe8db80
	void UIX_OnPlayerCreate(FString PlayerName);// 0xe8daa0
	void UIX_OnLinkExistingAccount(FString UserName, FString password);// 0xe8d930
	void UIX_OnLinkDecline();// 0xe8d910
	void UIX_OnLinkCreateAccount(FString UserName, FString password, FString Email, bool bAcceptAgeReqs);// 0xe8d6d0
	void UIX_OnEulaDecline();// 0xe8d670
	void UIX_OnEulaAccept();// 0xe8d6b0
	void UIX_OnChangeUserAccount();// 0xe8d690
	void UIX_OnCancelLogin();// 0xe8d670
	void UIX_OnAccountCreate(FString UserName, FString password, FString Email, bool bAcceptAgeReqs);// 0xe8d430
	void TriggerAutoLogin();// 0xe8d1d0
	bool ShouldDisplayUsername();// 0xe8d1a0
	bool ShouldDisplayDisconnectError();// 0xe8d170
	void SetUserErrorDataTable(DataTable* ErrorMsgTable);// 0xe8d0f0
	void RecordLoginState(enum NewState);// 0xe8cee0
	void LoginEvent_ShowAgreements(bool bNeedsEULA, bool bNeedsTOS, bool bNeedsPP);// 0xe8cd60
	void LoginEvent_Queued(uint32 QueuePosition, uint32 QueueSize, uint32 queueEstimatedWait);// 0xe8cc60
	void LoginEvent_LoginRequested();// 0xe8cc40
	void LoginEvent_LoggedIn();// 0xe8cc20
	void LoginEvent_FailedClient(FText ErrorMsg);// 0xe8cb40
	void LoginEvent_Failed(uint32 ErrorMsgId);// 0xe8cac0
	static bool LoadEULAFile(out FString SaveText);// 0xe8ca10
	void HandleLoginComplete();// 0xe8c840
	void HandleControllerPairingChange(int ControllerIndex, int NewUserId, int OldUserId);// 0xe8c620
	void HandleControllerConnectionChange(bool IsConnection, int UserId, int ControllerIndex);// 0xe8c520
	static FString GetVersion();// 0xe8c4a0
	bool GetLastDisconnectReason(out FText ErrorMsg);// 0xe8bea0
	bool GetCurrentPlayerName(out FText NameText);// 0xe8bdc0
	bool GetCurrentPlayerId(out FText ID);// 0xe8bce0
	enum GetCurrentLoginState();// 0xe8bcc0
	enum CheckCustomPlayerName(FString InPlayerName);// 0xe8bb80

--------------------------------
Class: KSQueueDataFactory.PUMG_QueueDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnSetQueueId;//[Size: 1]
	MulticastInlineDelegateProperty OnQueueErrorRelevantStateChanged;//[Size: 1]
	int ChunksInstallingQueueId;//[Offset: 0x288, Size: 1]
	int DefaultQueueId;//[Offset: 0x28c, Size: 1]
	float CancelJoinMatchDelay;//[Offset: 0x294, Size: 1]
	MulticastInlineDelegateProperty OnSetQueueInputState;//[Size: 1]
	int64[] PreviousCustomMatchMemberIds;//[Offset: 0x2a8, Size: 1]
	int SelectedQueueId;//[Offset: 0x2b8, Size: 1]
	float TimeoutForQueueSwitch;//[Offset: 0x2bc, Size: 1]
	bool bWaitingOnLeaveForQueueSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 1]
	bool bWaitingOnJoinForQueueSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 1]
	int MaxRetriesForAlternateQueue;//[Offset: 0x2c4, Size: 1]
	float TimeBetweenRetriesForAlternateQueue;//[Offset: 0x2c8, Size: 1]
	float RetryingDisplayTime;//[Offset: 0x2cc, Size: 1]
	bool bRetryingViaAutoRejoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 1]
	bool AttemptRejoinMatchFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 1]
	int NumRetriesForAlternateQueue;//[Offset: 0x2e4, Size: 1]
	MapDetail[] MapInfos;//[Offset: 0x2e8, Size: 1]
	DataTable* QueueDetailDataTable;//[Offset: 0x2f8, Size: 1]
	void WithdrawAlternateQueue();// 0x29f9780
	void StopDisplayingRetrying();// 0x29f9680
	ClientQueueInfo[] SortQueues(ClientQueueInfo[] ClientCachedQueueInfo, bool IsAlphanumerical);// 0x29f9470
	bool SetSelectedQueueId(int QueueId);// 0x29f9330
	void SetPreviousCustomMatchMemberIds(int64[] PreviousMembers);// 0x29f9250
	void RetryJoinAlternateQueue(int QueueId);// 0x29f8e70
	bool QualifiesForShelteredMM(int QueueId, out const ClientQueueInfo QueueInfo, out bool RetryFlag);// 0x29f8c60
	bool QualifiesForMercyMatch(int QueueId, out const ClientQueueInfo QueueInfo, out bool RetryFlag);// 0x29f8a50
	bool QualifiesForForcedBots(int QueueId, out const ClientQueueInfo QueueInfo, out bool RetryFlag);// 0x29f8840
	bool QualifiesForBackfill(int QueueId);// 0x29f87b0
	void PopulateMapInfos();// 0x29f86d0
	void OnPartyMemberUpdate(PUMG_PartyMemberData Member);// 0x29f8470
	void OnPartyMemberEvent(int64 PlayerId);// 0x29f83f0
	void OnPartyEvent();// 0x29f83d0
	void OnInputStateChanged(byte InputState);// 0x29f8350
	bool JoinSelectedQueue();// 0x29f8310
	bool IsTutorialQueue(int QueueId);// 0x29f8280
	bool IsRankedQueue(int QueueId);// 0x29f81f0
	bool IsQueueAvailableOnPlatform(out const PUMG_ClientQueueInfo QueueInfo);// 0x29f8070
	bool IsCustomSpectateEnabled();// 0xe8d1a0
	void HandleShelteredMMTimeout(int QueueId);// 0x29f7f00
	void HandleQueueSwitchLeave(int QueueId);// 0x29f7e80
	void HandleQueueSwitchJoin(int QueueId);// 0x29f7e00
	void HandleQueueSwitchFinish(bool bSendNotify, bool bClearTimer);// 0x29f7d30
	void HandlePracticeDiversionTimeout(int QueueId);// 0x29f7cb0
	void HandleBackfillTimeout(int QueueId);// 0x29f7c30
	void HandleBackfillJoinMatchTimeout();// 0x29f7c10
	int GetSelectedShelteredQueueId();// 0x29f7b80
	int GetSelectedQueueId();// 0x29f7b50
	bool GetQueueInfoById(int QueueId, out ClientQueueInfo InClientQueueInfo);// 0x29f79a0
	int GetPenaltyTime();// 0x29f76f0
	bool GetMapRotationsByQueueId(int QueueId, out int[] MapIds);// 0x29f7560
	bool GetMapInfoById(int MapId, out MapDetail MapDetail);// 0x29f7410
	int GetLastJoinedQueueId();// 0x29f73e0
	ClientQueueInfo[] GetCustomQueues();// 0x29f7390
	bool GetCurrentCustomMatchInfo(out ClientQueueInfo InClientQueueInfo);// 0x29f7220
	float GetCancelJoinMatchDelay();// 0x29f7120
	KSActivity* GetActivityByGameplayTag(out const GameplayTag ActivityTag);// 0x29f7050
	static bool FormatQueueJoinErrorMessage(out const ClientQueueInfo Queue, enum Error, out FText OutErrorMessage);// 0x29f6d80
	enum CheckQueueJoinableById(int QueueId, bool allowHidden);// 0x29f6c50
	enum CheckQueueJoinable(out const ClientQueueInfo Queue, bool allowHidden);// 0x29f6a90

--------------------------------
Class: MapDetail
	int MapId;//[Offset: 0x0, Size: 1]
	FText mapName;//[Offset: 0x8, Size: 1]
	Texture2D* MapThumbnail;//[Offset: 0x20, Size: 1]

--------------------------------
Class: ClientQueueInfo.PUMG_ClientQueueInfo
	Texture2D* ItemIcon;//[Offset: 0x50, Size: 1]
	enum QueueType;//[Offset: 0x78, Size: 1]
	UIMapInfo[] MapRotationInfos;//[Offset: 0x80, Size: 1]
	MapDetail[] MapList;//[Offset: 0x90, Size: 1]
	int MaxPlayerPerSide;//[Offset: 0xa0, Size: 1]
	int SortOrder;//[Offset: 0xa4, Size: 1]
	FString SoloURL;//[Offset: 0xa8, Size: 1]
	int ShelteredMMQueueId;//[Offset: 0xb8, Size: 1]
	float ShelteredMMLevelLimit;//[Offset: 0xbc, Size: 1]
	float ShelteredMMAttemptTimeout;//[Offset: 0xc0, Size: 1]
	int ForcedBotMatchQueueId;//[Offset: 0xc4, Size: 1]
	int MercyMatchQueueId;//[Offset: 0xd0, Size: 1]
	int PracticeDiversionQueueId;//[Offset: 0xd8, Size: 1]
	float PracticeDiversionTimeout;//[Offset: 0xdc, Size: 1]
	bool UsesDeserterPenalty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 1]
	int RequiredOwnedJobsCount;//[Offset: 0xe4, Size: 1]

--------------------------------
Class: UIMapInfo.TableRowBase
	int[] MapIds;//[Offset: 0x8, Size: 1]
	FText DisplayName;//[Offset: 0x18, Size: 1]
	Texture2D* MapThumbnail;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSFriendDataFactory.PUMG_FriendDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnUpdateRecentlyPlayedPlayers;//[Size: 1]
	void OnEOMRewardsReceived(PlayerRewardsSummary PlayerRewardsSummary, ScoreboardStats ScoreboardStats);// 0x29c8970
	void KSUpdateRecentlyPlayedPlayers__DelegateSignature(KSFriendDataFactory* Source);// 0x2d74e00
	PUMG_PlayerInfo*[] GetSuggestedFriends_Info();// 0x29c83c0
	KSPlayerInfo*[] GetPlayersPlayedWithThisClientSession_Info();// 0x29c8310
	PUMG_PlayerInfo*[] GetPendingFriends_Info();// 0x29c8290
	PUMG_PlayerInfo*[] GetOnlineFriends_Info();// 0x29c8210
	PUMG_PlayerInfo*[] GetFriends_Info();// 0x29c7f50
	PUMG_PlayerInfo*[] GetFriendRequests_Info();// 0x29c7ed0

--------------------------------
Class: PUMG_FriendDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnFriendDataUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendAddSuccess;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendAddError;//[Size: 1]
	MulticastInlineDelegateProperty FriendInviteReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendAdded;//[Size: 1]
	MulticastInlineDelegateProperty OnFriendRejected;//[Size: 1]
	int OnlineFriends;//[Offset: 0x98, Size: 1]
	int TotalFriends;//[Offset: 0x9c, Size: 1]
	PUMG_FriendData[] CachedFriends;//[Offset: 0xa0, Size: 1]
	PUMG_FriendData[] CachedPendingFriends;//[Offset: 0xb0, Size: 1]
	PUMG_FriendData[] CachedFriendRequests;//[Offset: 0xc0, Size: 1]
	float FriendsListUpdatePollInterval;//[Offset: 0x100, Size: 1]
	TimerHandle FriendsListUpdatePollingTimerHandle;//[Offset: 0x108, Size: 1]
	bool IsFriendsListUpdatePollingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	void UIX_OnRemoveFriend(int64 PlayerId);// 0xe88450
	void UIX_OnRejectFriendRequest(int64 PlayerId);// 0xe883d0
	void UIX_OnCancelFriendRequest(int64 PlayerId);// 0xe88350
	void UIX_OnAddFriend(const PUMG_PlayerInfo* playerinfo);// 0xe882d0
	void UIX_OnAcceptFriendRequest(int64 PlayerId);// 0xe88250
	void SetEnableFriendsListUpdatePolling(bool InBool);// 0xe87b30
	void RequestUpdateFriendsList();// 0xe876a0
	bool IsCrossplaySocialEnabled();// 0xe87270
	void HandleFriendsListUpdatePolling();// 0xe87150
	void HandleCrossplaySettingChanged();// 0xe87130
	PUMG_FriendData[] GetPendingFriends();// 0xe86fd0
	PUMG_FriendData[] GetFriends();// 0xe86e30
	PUMG_FriendData[] GetFriendRequests();// 0xe86d40
	FText GetFriendName(int64 PlayerId);// 0xe86c50
	Texture2D* GetFriendAvatarTexture(PUMG_FriendData Friend);// 0xe86ae0
	bool GetEnableFriendsListUpdatePolling();// 0xe869f0
	void FriendRemoveResponse();// 0xe86920
	bool CheckAlreadyFriends(FString FriendName);// 0xe864c0

--------------------------------
Class: PUMG_FriendData
	PUMG_PlayerInfo* PlayerData;//[Offset: 0x0, Size: 1]
	FText StatusMessage;//[Offset: 0x8, Size: 1]
	bool Online;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 1]
	bool CanChallenge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21, Size: 1]
	bool CanSpectate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22, Size: 1]
	bool HasHRRelationship;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23, Size: 1]
	bool HasPortalRelationship;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 1]

--------------------------------
Class: KSPlayerQueryDataFactory.PUMG_DataFactory.Object
	TimerHandle CheckTimerHandle;//[Offset: 0x138, Size: 1]
	bool QueryPlayersByNameWithProfiles(out const FText PlayerName, delegate OnReponse, out KSPlayerQueryHandle OutHandle);// 0x29f2350
	bool QueryPlayersByName(out const FText PlayerName, delegate OnReponse, out KSPlayerQueryHandle OutHandle);// 0x29f21b0
	void OnTimeoutCheck();// 0x29f2110
	FText GetQueriedName(out const KSPlayerQueryHandle InHandle);// 0x29f0f30
	static FText GetPlayerQueryErrorMessage(enum Error);// 0x29f0e50
	void CancelQuery(out KSPlayerQueryHandle InHandle);// 0x29f0aa0

--------------------------------
Class: KSPlayerQueryHandle
	KSPlayerQueryDataFactory* Owner;//[Offset: 0x0, Size: 1]

--------------------------------
Class: KSEMODataFactory.PUMG_DataFactory.Object
	bool haveRecieveMatchReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 1]
	MulticastInlineDelegateProperty OnRewardsRecieved;//[Size: 1]
	MulticastInlineDelegateProperty OnProgressionRecieved;//[Size: 1]
	void SetupTestData(int PlayerXp, int RankedXp, int RogueXp, int ReputationEarned, int PlacementMatchNum, int BattlePassXp, int WeaponMasteryCount, int WeaponMasteryLevels, bool CategoryMasteryCanLevel, int MilestonesPerWeapon, int BonusPoints);// 0x29c4460
	void SetUpMobileTestData(int StartingMobileXp, int MobileSecondsPlayed, int MobileGunKills, int MobileGadgetKills, int MobileAbilityKills, int MobileMeleeKills, int MobileThrownKills);// 0x29c4270
	bool IsLocalPlayer(int64 PlayerId);// 0x29c3880
	void HandlePlayerRewardsEventTokens();// 0x29c3840
	void HandlePlayerRewards(PlayerRewardsSummary PlayerRewardSummary, bool bFakeTestData);// 0x29c36a0
	void HandleEOMDetail();// 0x29c3580
	ScoreboardStats GetScoreboardStats();// 0x29c33f0
	PlayerRewardsSummary GetPlayerRewardsSummary();// 0x29c32f0
	int GetLastMatchQueueId();// 0x29c31f0
	void FlushMobileProgressionData();// 0x29c3060
	bool FindReputationProgressionActivity(out KSActivityInstance* ReputationProgressionActivity);// 0x29c2fc0
	bool FindRankedProgressionActivity(out KSActivityInstance* RankedProgressionActivity);// 0x29c2f20
	bool FindPlayerXpProgressionActivity(out KSActivityInstance* PlayerXpProgressionActivity);// 0x29c2e80
	bool FindBattlePassProgressionActivity(out KSActivityInstance* BattlePassProgressionActivity);// 0x29c2d50
	void ComputeEOMResults();// 0x29c2cb0
	void AddMobileProgressionData(int ActivityVendorID, int ProgressionAmount);// 0x29c2bd0

--------------------------------
Class: KSPlayerWhoDataFactory.PUMG_PlayerWhoDataFactory.PUMG_DataFactory.Object
	void ClearSearchResults();// 0x29f0b60

--------------------------------
Class: PUMG_PlayerWhoDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnSearchByNameResultsUpdated;//[Size: 1]
	PUMG_PlayerInfo*[] CachedSearchByNameResults;//[Offset: 0x48, Size: 1]
	void UIX_SearchByNameForPlayer(FString PlayerName, bool bIncludeOfflinePlayers);// 0xe92260
	PUMG_PlayerInfo*[] GetSearchByNameResults();// 0xe91760

--------------------------------
Class: KSSettingsDataFactory.PUMG_SettingsDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnSettingsReceivedFromPlayerAccount;//[Size: 1]
	MulticastInlineDelegateProperty OnKeyBindSettingsApplied;//[Size: 1]
	MulticastInlineDelegateProperty OnKeyBindSettingsSaved;//[Size: 1]
	KSSettingPropertyId[] BoolSettingPropertyIds;//[Offset: 0x1b0, Size: 1]
	KSSettingPropertyId[] IntSettingPropertyIds;//[Offset: 0x210, Size: 1]
	KSSettingPropertyId[] FloatSettingPropertyIds;//[Offset: 0x270, Size: 1]
	KSSettingsMenuConfigAsset* KSSettingsMenuConfigAssetSoftObjectPtr;//[Offset: 0x330, Size: 1]
	KSSettingsMenuConfigAsset* KSSettingsMenuConfigAsset;//[Offset: 0x358, Size: 1]
	KSSettingsMenuConfigAsset* TouchSettingsConfigAssetPath;//[Offset: 0x360, Size: 1]
	KSSettingsMenuConfigAsset* TouchSettingsConfigAsset;//[Offset: 0x388, Size: 1]
	MulticastInlineDelegateProperty OnDisplayLanguageApplied;//[Size: 1]
	MulticastInlineDelegateProperty OnDisplayLanguageSaved;//[Size: 1]
	MulticastInlineDelegateProperty OnScreenResolutionApplied;//[Size: 1]
	MulticastInlineDelegateProperty OnScreenResolutionSaved;//[Size: 1]
	bool SetSelectedRegion(int SiteId);// 0x2a0ad00
	void SaveSettings();// 0x2a0a830
	void SaveSettingAsInt(FName Name);// 0x2a0a7b0
	void SaveSettingAsFloat(FName Name);// 0x2a0a730
	void SaveSettingAsBool(FName Name);// 0x2a0a6b0
	void SaveScreenResolution();// 0x2a0a690
	void SaveLanguage();// 0x2a0a670
	void SaveKeyBindings();// 0x2a0a650
	void RevertScreenResolution();// 0x2a0a300
	void RevertPlayerPreferences();// 0x2a0a2e0
	void RevertLanguageToDefault();// 0x2a0a2c0
	void RevertKeyBindings();// 0x2a0a2a0
	bool IsUserLoggedIn();// 0x2a098b0
	bool GetSettingAsInt_Legacy(FName Name, out int OutInt);// 0x2a091a0
	bool GetSettingAsFloat_Legacy(FName Name, out float OutFloat);// 0x2a090c0
	bool GetSettingAsBool_Legacy(FName Name, out bool OutBool);// 0x2a08fe0
	int GetSelectedRegion();// 0x2a08fb0
	IntPoint GetScreenResolution();// 0x2a08f70
	KSPlayerInput* GetKSPlayerInput();// 0x2a08dc0
	void GetDefaultKSInputActionKeys(out const FName Name, enum InputType, out KSInputActionKey[] OutKeys);// 0x2a08990
	void GetDefaultInputAxisKeys(out const FName Name, enum InputType, float Scale, out Key[] OutKeys);// 0x2a087c0
	void GetDefaultInputActionKeys(out const FName Name, enum InputType, out Key[] OutKeys);// 0x2a08640
	void GetCustomKSInputActionKeys(FName Name, enum InputType, out KSInputActionKey[] OutKeys);// 0x2a084d0
	void GetCustomInputAxisKeys(FName Name, enum InputType, float Scale, out Key[] OutKeys);// 0x2a08310
	void GetCustomInputActionKeys(FName Name, enum InputType, out Key[] OutKeys);// 0x2a081a0
	FString GetCurrentLanguage();// 0x2a08120
	FString[] GetAvailableLanguages();// 0x2a08040
	void BindSettingCallbacks_Legacy(FName Name, out const SettingDelegateStruct SettingDelegateStruct);// 0x2a07b90
	void ApplySettingAsInt(FName Name, int Value);// 0x2a07ad0
	void ApplySettingAsFloat(FName Name, float Value);// 0x2a07a00
	void ApplySettingAsBool(FName Name, bool Value);// 0x2a07930
	void ApplyScreenResolution(IntPoint ScreenResolution);// 0x2a078b0
	void ApplyLanguage(FString LanguageCulture);// 0x2a075e0

--------------------------------
Class: PUMG_SettingsDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnPopulateUserSettings;//[Size: 1]
	MulticastInlineDelegateProperty OnPopulateUserBindings;//[Size: 1]
	MulticastInlineDelegateProperty OnPopulateUserGPBindings;//[Size: 1]
	MulticastInlineDelegateProperty OnPostLogin;//[Size: 1]
	MulticastInlineDelegateProperty OnPostLogoff;//[Size: 1]
	MulticastInlineDelegateProperty OnSettingValueChanged;//[Size: 1]
	bool OnSettingChanged(FName SettingId, int SettingValue);// 0xe970f0
	void InitSettingsForPlayer();// 0xe8d1d0

--------------------------------
Class: KSPlayerInput.PGame_PlayerInput.PlayerInput.Object
	<FName,FString> SavedSettingsConfig;//[Offset: 0x1300, Size: 1]
	Vector2D GamepadLookAcceleration;//[Offset: 0x1444, Size: 1]
	float MinMouseSenseScaling;//[Offset: 0x144c, Size: 1]
	float MaxMouseSenseScaling;//[Offset: 0x1450, Size: 1]
	float TouchLookSensitivityADS;//[Offset: 0x1454, Size: 1]
	MulticastInlineDelegateProperty OnKeyMappingsUpdated;//[Size: 1]
	<FName,KSCustomInputActionKeyMappings> KSCustomActionKeyMappings;//[Offset: 0x1480, Size: 1]
	<FName,KSCustomInputAxisKeyMappings> KSCustomAxisKeyMappings;//[Offset: 0x1520, Size: 1]
	class KSAnalogStickFilter* KSLeftAnalogStickFilterClass;//[Offset: 0x15c0, Size: 1]
	class KSAnalogStickFilter* KSRightAnalogStickFilterClass;//[Offset: 0x15c8, Size: 1]
	KSAnalogStickFilter* LeftAnalogStickFilter;//[Offset: 0x15d0, Size: 1]
	KSAnalogStickFilter* RightAnalogStickFilter;//[Offset: 0x15e8, Size: 1]
	bool DoesInputTypeSupportChords(enum InputType);// 0x27f0370

--------------------------------
Class: PGame_PlayerInput.PlayerInput.Object
	float KeyMouseSwitchDelta;//[Offset: 0x12e0, Size: 1]
	float GamepadSwitchDelta;//[Offset: 0x12e8, Size: 1]

--------------------------------
Class: KSCustomInputActionKeyMappings
	KSInputActionKeyMapping[] KBM_Mappings;//[Offset: 0x0, Size: 1]
	KSInputActionKeyMapping[] GP_Mappings;//[Offset: 0x10, Size: 1]
	KSInputActionKeyMapping[] Touch_Mappings;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSInputActionKeyMapping
	InputActionKeyMapping Mapping;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x28, Size: 1]

--------------------------------
Class: InputActionKeyMapping
	FName ActionName;//[Offset: 0x0, Size: 1]
	bool bShift;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 1]
	bool bCtrl;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 1]
	bool bAlt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 1]
	bool bCmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 1]
	Key Key;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSCustomInputAxisKeyMappings
	<float,KSInputAxisKeyMappings> KBM_Mappings;//[Offset: 0x0, Size: 1]
	<float,KSInputAxisKeyMappings> GP_Mappings;//[Offset: 0x50, Size: 1]
	<float,KSInputAxisKeyMappings> Touch_Mappings;//[Offset: 0xa0, Size: 1]

--------------------------------
Class: KSInputAxisKeyMappings
	InputAxisKeyMapping[] InputAxisKeyMappings;//[Offset: 0x0, Size: 1]

--------------------------------
Class: InputAxisKeyMapping
	FName AxisName;//[Offset: 0x0, Size: 1]
	float Scale;//[Offset: 0x8, Size: 1]
	Key Key;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSAnalogStickFilter.Object
	enum StickType;//[Offset: 0x28, Size: 1]
	KSPlayerInput* PlayerInput;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSInputActionKey
	Key Key;//[Offset: 0x0, Size: 1]
	enum Type;//[Offset: 0x18, Size: 1]

--------------------------------
Class: SettingDelegateStruct
	delegate SettingApplied;//[Offset: 0x0, Size: 1]
	delegate SettingSaved;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSSettingPropertyId
	FName Name;//[Offset: 0x0, Size: 1]
	int ID;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSettingsMenuConfigAsset.DataAsset.Object
	KSSettingsPageConfigAsset*[] SettingsPageConfigs;//[Offset: 0x30, Size: 1]

--------------------------------
Class: KSSettingsPageConfigAsset.DataAsset.Object
	KSSettingsSectionConfigAsset*[] SettingsSectionConfigs;//[Offset: 0x30, Size: 1]
	FText PageName;//[Offset: 0x40, Size: 1]
	<FString,FText> HeadingByPlatform;//[Offset: 0x58, Size: 1]
	FText GetPageName();// 0x2a08d50

--------------------------------
Class: KSSettingsSectionConfigAsset.DataAsset.Object
	KSSettingsGroupConfig[] SettingsGroups;//[Offset: 0x30, Size: 1]
	FText Heading;//[Offset: 0x40, Size: 1]
	<FString,FText> HeadingByPlatform;//[Offset: 0x58, Size: 1]
	FText GetHeading();// 0x2a08d50

--------------------------------
Class: KSSettingsGroupConfig
	KSSettingsContainerConfigAsset* MainSettingContainerAsset;//[Offset: 0x0, Size: 1]
	KSSettingsContainerConfigAsset*[] SubSettingContainerAssets;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSettingsContainerConfigAsset.DataAsset.Object
	bool bIsAvailableOffline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 1]
	bool bRequires120HzDisplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31, Size: 1]
	KSAllowedPlatformTypes AllowedPlatformTypes;//[Offset: 0x32, Size: 1]
	KSRequiredInputTypes RequiredInputTypes;//[Offset: 0x3c, Size: 1]
	FString RequiredExperiment;//[Offset: 0x40, Size: 1]
	KSSwitchDockedModeSetting SwitchDockedModeSetting;//[Offset: 0x50, Size: 1]
	bool bUsePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52, Size: 1]
	class KSSettingsPreview* PreviewWidget;//[Offset: 0x58, Size: 1]
	KSSettingsWidgetConfig[] WidgetConfigs;//[Offset: 0x60, Size: 1]
	FText SettingName;//[Offset: 0x70, Size: 1]
	<FString,FText> SettingNameByPlatform;//[Offset: 0x88, Size: 1]
	FText SettingDescription;//[Offset: 0xd8, Size: 1]
	<FString,FText> SettingDescriptionByPlatform;//[Offset: 0xf0, Size: 1]
	FText GetSettingName();// 0x2a092c0
	FText GetSettingDescription();// 0x2a09280

--------------------------------
Class: KSAllowedPlatformTypes
	bool XboxOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool PS4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool Switch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]
	bool Windows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 1]
	bool Mac;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool Linux;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	bool IOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 1]
	bool Android;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 1]
	bool XSX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 1]
	bool PS5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 1]

--------------------------------
Class: KSRequiredInputTypes
	bool Gamepad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool Mouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]
	bool Touch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 1]

--------------------------------
Class: KSSwitchDockedModeSetting
	bool ShowDocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]
	bool ShowHandheld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 1]

--------------------------------
Class: KSSettingsPreview.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnPreviewValueChanged;//[Size: 1]
	KSSettingsInfoBase* SettingsInfo;//[Offset: 0x538, Size: 1]
	void HandleOnValueChanged(bool ChangedExternally);// 0x2a0eac0
	void HandleOnPreviewValueChanged();// 0x2a0eaa0

--------------------------------
Class: KSSettingsInfoBase.Object
	MulticastInlineDelegateProperty OnSettingValueChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnSettingPreviewChanged;//[Size: 1]
	bool bIsAutoApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 1]
	bool bIsAutoSaved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49, Size: 1]
	FText[] TextOptions;//[Offset: 0xd0, Size: 1]
	MulticastInlineDelegateProperty OnTextOptionsChanged;//[Size: 1]
	float MinValue;//[Offset: 0xf0, Size: 1]
	float MaxValue;//[Offset: 0xf4, Size: 1]
	bool bOverrideDisplayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 1]
	float MinDisplayValue;//[Offset: 0xfc, Size: 1]
	float MaxDisplayValue;//[Offset: 0x100, Size: 1]
	float StepValue;//[Offset: 0x104, Size: 1]
	bool bRoundValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 1]
	float RoundToNearest;//[Offset: 0x10c, Size: 1]
	bool bIsPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 1]
	void UpdateTextOptions(out const FText[] NewOptions);// 0x2a0ad90
	bool SetPreviewValueInt(int inInt);// 0x2a0ac70
	bool SetPreviewValueFloat(float InFloat);// 0x2a0abe0
	bool SetPreviewValueBool(bool InBool);// 0x2a0ab50
	bool SetDesiredValueKeyBind(KSKeyBind InKeyBind);// 0x2a0aa00
	bool SetDesiredValueInt(int inInt);// 0x2a0a970
	bool SetDesiredValueFloat(float InFloat);// 0x2a0a8e0
	bool SetDesiredValueBool(bool InBool);// 0x2a0a850
	bool SaveKeyBindValue(KSKeyBind InKeyBind);// 0x2a0a500
	bool SaveIntValue(int inInt);// 0x2a0a460
	bool SaveFloatValue(float InFloat);// 0x2a0a3d0
	bool SaveBoolValue(bool InBool);// 0xe91d60
	void Save();// 0x2a0a3b0
	float RoundToNearestValueFloat(float ValueToRound);// 0x2a0a320
	void RevertSettingToDefault();// 0x27b60a0
	void Revert();// 0x2a0a280
	void ResetPreview();// 0x2a0a260
	void OnValueKeyBindSaved(KSKeyBind SavedKeyBind);// 0x2a0a0e0
	void OnValueKeyBindApplied(KSKeyBind AppliedKeyBind);// 0x2a09f60
	void OnValueIntSaved(int SavedInt);// 0x2a09ed0
	void OnValueIntApplied(int AppliedInt);// 0x2a09e40
	void OnValueFloatSaved(float SavedFloat);// 0x2a09db0
	void OnValueFloatApplied(float AppliedFloat);// 0x2a09d20
	void OnValueBoolSaved(bool SavedBool);// 0x2a09c90
	void OnValueBoolApplied(bool AppliedBool);// 0x2a09c00
	bool IsValidValueKeyBind(KSKeyBind InKey);// 0x2a09ab0
	bool IsValidValueInt(int inInt);// 0x2a09a10
	bool IsValidValueFloat(float InFloat);// 0x2a09980
	bool IsValidValueBool(bool InBool);// 0x2a098e0
	bool IsDirty();// 0x2a09870
	void InitializeValue();// 0x26b68d0
	KSKeyBind GetValueKeyBind();// 0x2a096e0
	int GetValueInt();// 0x2a096b0
	float GetValueFloat();// 0x2a09680
	bool GetValueBool();// 0x2a09650
	FText[] GetTextOptions();// 0x2a09540
	FText GetTextOption(int Index);// 0x2a09350
	float GetStep();// 0x2a09330
	enum GetSettingType();// 0x2a09300
	float GetRoundToNearest();// 0x2a08f50
	bool GetRound();// 0x2858520
	int GetPreviewValueInt();// 0x2a08f20
	float GetPreviewValueFloat();// 0x2a08ee0
	bool GetPreviewValueBool();// 0x2a08eb0
	int GetNumTextOptions();// 0x26df300
	float GetMinDisplay();// 0x2a08e70
	float GetMin();// 0x2a08e50
	float GetMaxDisplay();// 0x2a08e10
	float GetMax();// 0x2a08df0
	KSHUDCommon* GetKSHUD();// 0x2a08d90
	bool GetIsPercent();// 0xe869f0
	KSKeyBind GetDirtyValueKeyBind();// 0x2a08bb0
	int GetDirtyValueInt();// 0x2a08b80
	float GetDirtyValueFloat();// 0x2a08b40
	bool GetDirtyValueBool();// 0x2a08b10
	KSKeyBind FixupInvalidKeyBind(KSKeyBind InKey);// 0x2a07e90
	int FixupInvalidInt(int inInt);// 0x2a07df0
	float FixupInvalidFloat(float InFloat);// 0x2a07d60
	bool FixupInvalidBool(bool InBool);// 0x2a07cc0
	bool CanRevert();// 0x2a07c80
	bool ApplyPreviewIntValue(int inInt);// 0x2a07810
	bool ApplyPreviewFloatValue(float InFloat);// 0x2a07780
	bool ApplyPreviewBoolValue(bool InBool);// 0x2a076e0
	void ApplyPreview();// 0x2a076c0
	bool ApplyKeyBindValue(KSKeyBind InKeyBind);// 0x2a07490
	bool ApplyIntValue(int inInt);// 0x2a073f0
	bool ApplyFloatValue(float InFloat);// 0x2a07360
	bool ApplyBoolValue(bool InBool);// 0x2a072c0
	void Apply();// 0x2a072a0

--------------------------------
Class: KSKeyBind
	Key Primary;//[Offset: 0x0, Size: 1]
	enum PrimaryInputActionType;//[Offset: 0x18, Size: 1]
	Key Secondary;//[Offset: 0x20, Size: 1]
	enum SecondaryInputActionType;//[Offset: 0x38, Size: 1]
	Key Gamepad;//[Offset: 0x40, Size: 1]
	Key Combo;//[Offset: 0x58, Size: 1]
	enum GamepadInputActionType;//[Offset: 0x70, Size: 1]

--------------------------------
Class: KSSettingsWidgetConfig
	class KSSettingsWidget* WidgetClass;//[Offset: 0x0, Size: 1]
	class KSSettingsInfoBase* SettingInfo;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSettingsWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	KSSettingsWidgetConfig WidgetConfig;//[Offset: 0x528, Size: 1]
	FText WidgetContainerTitle;//[Offset: 0x538, Size: 1]
	FText WidgetContainerDescription;//[Offset: 0x550, Size: 1]
	bool bHasPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x568, Size: 1]
	KSSettingsPreview* WidgetContainerPreviewWidget;//[Offset: 0x570, Size: 1]
	KSSettingsInfoBase* SettingsInfo;//[Offset: 0x578, Size: 1]
	void SaveSetting();// 0x2a0eff0
	void RevertSetting();// 0x2a0efd0
	void OnWidgetSettingsInfoSet();// 0x2d74e00
	void OnWidgetContainerTitleSet();// 0x2d74e00
	void OnWidgetContainerPreviewSet();// 0x2d74e00
	void OnWidgetContainerDescriptionSet();// 0x2d74e00
	void OnWidgetConfigSet();// 0x2d74e00
	void OnSettingsInfoValueChanged(bool bChangedExternally);// 0x2d74e00
	void OnInputAttached(bool bGamepadAttached, bool bMouseAttached);// 0x2d74e00
	bool IsSaved();// 0x2a0ebd0
	bool IsApplied();// 0x2a0eb70
	bool HasPreview();// 0x2a0eb50
	bool CanGamepadNavigate();// 0x2a0e7d0
	void ApplySetting();// 0x2a0e700

--------------------------------
Class: KSChatDataFactory.PUMG_ChatDataFactory.PUMG_DataFactory.Object

--------------------------------
Class: PUMG_ChatDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnChatMessageReceived;//[Size: 1]
	MulticastInlineDelegateProperty OnChatMessageRead;//[Size: 1]
	MulticastInlineDelegateProperty OnChatChannelJoined;//[Size: 1]
	MulticastInlineDelegateProperty OnChatChannelLeft;//[Size: 1]
	int[] ChatMessageIds;//[Offset: 0x78, Size: 1]
	int[] PendingChatMessageIds;//[Offset: 0x88, Size: 1]
	<int,PUMG_ChatData> ChatMessagesById;//[Offset: 0x98, Size: 1]
	int LastCreatedMessageId;//[Offset: 0xe8, Size: 1]
	int64[] m_FilteredPlayerIds;//[Offset: 0xf0, Size: 1]
	PUMG_ChatCommand[] ChatCommands;//[Offset: 0x100, Size: 1]
	void SetMaxMessageCount(int MaxMessageCount);// 0xe83450
	void SendChatToPlayer(FString Message, int64 TargetPlayerId);// 0xe83370
	void SendChatToChannel(FString Message, enum Channel);// 0xe83290
	bool RemovePlayerFilter(int64 PlayerId);// 0xe83200
	bool RemoveChatCommand(FString Command);// 0xe83150
	bool RemoveAllChatCommands(Object* Target);// 0xe830c0
	void QueueCheckPendingMessages();// 0xe83080
	void MarkMessageAsRead(int MessageId);// 0xe82f40
	void ListChatCommands();// 0xe82f20
	bool IsValidMessage(out const PUMG_ChatData Message);// 0xe82df0
	bool IsPlayerFilteredFromChat(int64 PlayerId);// 0xe82d60
	void HandleCommunicationSettingChanged();// 0xe82c70
	PUMG_ChatData GetMessage(int MessageId);// 0xe82b20
	int GetMaxMessageCount();// 0xe82af0
	enum GetChatPrivilegeStatus();// 0xe827c0
	void GetActiveChatChannels(bool IncludePersonalChannel, out PUMG_ActiveChatChannelData[] ActiveChatChatChannels);// 0xe81e00
	int FindChatCommandIndex(FString Command);// 0xe81d50
	bool ExecuteChatCommandLine(FString CommandLine);// 0xe81ca0
	void CheckPendingMessages();// 0xe81c80
	void BeginProcessingChatMessage(out PUMG_ChatData Message);// 0xe81b90
	void AddSystemMessage(out const FText Message);// 0xe81ac0
	bool AddPlayerFilter(int64 PlayerId);// 0xe81a30
	void AddGameMessage(out const FText Message, enum Channel);// 0xe81910
	bool AddChatCommand(FString Command, out const FText Desc, Object* Target, FString Function, FString Alias1, FString Alias2, FString Alias3, FString Alias4);// 0xe81600

--------------------------------
Class: PUMG_ChatData
	PUMG_PlayerInfo* Sender;//[Offset: 0x0, Size: 1]
	PUMG_PlayerInfo* Recipient;//[Offset: 0x8, Size: 1]
	FText Message;//[Offset: 0x10, Size: 1]
	bool IsOwnMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool IsSeen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	bool SystemMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 1]
	bool IsReplayedMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b, Size: 1]
	enum ChatChannel;//[Offset: 0x2c, Size: 1]
	enum ChatPhase;//[Offset: 0x2d, Size: 1]
	enum UserPrivilege;//[Offset: 0x2e, Size: 1]
	enum PortalTextFilterStatus;//[Offset: 0x2f, Size: 1]
	int MessageId;//[Offset: 0x30, Size: 1]
	int64 MctsMessageId;//[Offset: 0x38, Size: 1]

--------------------------------
Class: PUMG_ActiveChatChannelData
	enum ChatChannel;//[Offset: 0x0, Size: 1]
	PUMG_PlayerInfo* PersonalChannelPlayer;//[Offset: 0x8, Size: 1]

--------------------------------
Class: PUMG_ChatCommand
	FString Function;//[Offset: 0x0, Size: 1]
	FString[] Commands;//[Offset: 0x10, Size: 1]
	FText Desc;//[Offset: 0x20, Size: 1]
	Object* Target;//[Offset: 0x38, Size: 1]

--------------------------------
Class: KSPartyDataFactory.PUMG_PartyDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnEmoteMessageReceived;//[Size: 1]
	void SetSelectedQueueId(int QueueId);// 0x29eddc0
	void PlayEmoteInParty(KSEmote* Emote);// 0x29ed7a0
	int GetSelectedQueueId();// 0x29ecbe0
	int GetPartyMinimumLevel();// 0x29eca50
	int GetHighestDeserterPenaltySeconds();// 0x29ec7d0
	bool CanPartyQueueForRanked(FString RankedSeasonKey);// 0x29ec090
	void BroadcastPartyInvitationError(FText InvitationError);// 0x29ebfb0

--------------------------------
Class: KSNPEDataFactory.PUMG_DataFactory.Object
	void UIX_ClaimTutorialActivity();// 0x29e9200
	void UIX_ClaimRegionSelectedActivity();// 0x29e91e0
	void SkipTutorial();// 0x29e91c0
	bool ShouldForceTutorial();// 0x29e9100
	void QueueTutorial();// 0x29e8c00
	bool HasClaimedActivity(out const GameplayTag ActivityTag);// 0x29e8820
	KSQueueDataFactory* GetQueueDataFactory();// 0x29e81f0
	void ClaimActivity(out const GameplayTag ActivityTag);// 0x29e7ec0

--------------------------------
Class: KSPlayerDataFactory.PUMG_PlayerDataFactory.PUMG_DataFactory.Object
	KSPlayerStatsManager* PlayerStatsManager;//[Offset: 0xb0, Size: 1]
	MulticastInlineDelegateProperty OnPlayerLevelChanged;//[Size: 1]
	bool ShouldDisplayRankedLevel();// 0x29ede40
	void HandlePlayerRankIncremented(KSActivityInstance* ActivityInstance, int Count);// 0x29ed3c0
	void HandlePlayerRankChanged(KSActivityInstance* Activity, int Tier, int Count);// 0x29ed2c0
	void HandlePlayerLevelIncremented(KSActivityInstance* ActivityInstance, int Count);// 0x29ed200
	void HandlePlayerLevelChanged(KSActivityInstance* Activity, int Tier, int Count);// 0x29ed100
	int GetRankedLevel();// 0x29ecbb0
	float GetPlayerLevelPercent();// 0x29ecb80
	int GetPlayerLevel();// 0x29ecb50
	int GetPlayerId();// 0x29ecb30
	int GetPlatformXpProgressID();// 0x29ecb00
	bool GetOwnedJobsCount(out int OutOwnedJobsCount, bool bIncludeFreeRotation);// 0x29ec940
	KSCurrency* GetCurrencyItemByItemId(int CurrencyItemId);// 0x29ec740
	int GetCurrencyCountByItemId(int CurrencyItemId);// 0x29ec6b0

--------------------------------
Class: PUMG_PlayerDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnPlayerDataChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnPlayerRankChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnCrossplayChanged;//[Size: 1]
	int64 PlayerId;//[Offset: 0x68, Size: 1]
	FString PlayerName;//[Offset: 0x70, Size: 1]
	int Level;//[Offset: 0x80, Size: 1]
	int AvatarId;//[Offset: 0x84, Size: 1]
	int LastMMR;//[Offset: 0x88, Size: 1]
	int CurrentMMR;//[Offset: 0x8c, Size: 1]
	int BestMMR;//[Offset: 0x90, Size: 1]
	int CurrentWinRank;//[Offset: 0x94, Size: 1]
	int PreviousWinRank;//[Offset: 0x98, Size: 1]
	int CurrentWinPeak;//[Offset: 0x9c, Size: 1]
	int PreviousWinPeak;//[Offset: 0xa0, Size: 1]
	int CurrentWinStreak;//[Offset: 0xa4, Size: 1]
	int PreviousWinStreak;//[Offset: 0xa8, Size: 1]
	void OnSelectAvatar(int ItemId);// 0xe8db80
	Texture2D* GetAvatarIcon();// 0xe90f50

--------------------------------
Class: KSStoreItemHelper.PUMG_StoreItemHelper.Object
	int StoreVendorGroupId;//[Offset: 0x298, Size: 1]
	bool StoreVendorsLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c, Size: 1]
	MulticastInlineDelegateProperty OnStoreItemNewStatusChange;//[Size: 1]
	<int,PUMG_StoreItem*> ActiveStoreItems;//[Offset: 0x2b0, Size: 1]
	bool StoreHasUnseenItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 1]
	bool RedeemInactiveBoost(int InactiveBoostId);// 0x284d940
	bool RedeemDLCVoucher(PUMG_StoreItem* DLCVoucher);// 0x284d8b0
	void OnJsonLoaded(FString JsonName);// 0x284d730
	bool HasUnseenItems();// 0x284d710
	bool HasRecentlySeenItem(int LootId);// 0x284d680
	AccountConsumableDetails[] GetInactiveBoosts();// 0x284ca00
	bool GetBundleByLootId(const int BundleLootId, out PUMG_StoreItem* VoucherItem, out bool bIsOwned);// 0x284c250
	AccountConsumableDetails[] GetActiveBoosts();// 0x284bb60

--------------------------------
Class: AccountConsumableDetails
	KSItem* KSItem;//[Offset: 0x0, Size: 1]
	int QuantityOwned;//[Offset: 0x8, Size: 1]

--------------------------------
Class: KSSettingsColorOptionsAsset.DataAsset.Object
	ColorOptions[] ColorOptions;//[Offset: 0x30, Size: 1]

--------------------------------
Class: ColorOptions
	FText OptionName;//[Offset: 0x0, Size: 1]
	LinearColor OptionColor;//[Offset: 0x18, Size: 1]

--------------------------------
Class: KSSimulmediaDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnSimulmediaOpportunitiesUpdated;//[Size: 1]
	MulticastInlineDelegateProperty OnSimulmediaOpportunityStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnSimulmediaOpportunityCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnSimulmediaOpportunityUpdateFailed;//[Size: 1]
	bool IsSimulmediaEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 1]
	bool SimulmediaDisablePS4;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 1]
	bool SimulmediaDisablePS5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a, Size: 1]
	bool SimulmediaDisableXboxOne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b, Size: 1]
	bool SimulmediaDisableXSX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c, Size: 1]
	bool SimulmediaDisableWindows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d, Size: 1]
	bool SimulmediaDisableMac;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e, Size: 1]
	bool SimulmediaDisableLinux;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f, Size: 1]
	bool SimulmediaDisableSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 1]
	bool SimulmediaDisableIOS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81, Size: 1]
	bool SimulmediaDisableAndroid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82, Size: 1]
	void SubmitCompletedOpportunity(KSOpportunity InOpportunity);// 0x2a0f100
	void StartOpportunity(KSOpportunity InOpportunity);// 0x2a0f030
	void SetSimulmediaVisited();// 0x2a0f010
	void RefreshOpportunities();// 0x2a0efb0
	bool IsSimulmediaUnvisited();// 0x2a0ec00
	bool IsOpportunityAvailable();// 0x2a0eba0
	bool GetSimulmediaEnabled();// 0x2a0ea70
	KSItem* GetRewardItem(out int OutRewardQuantity);// 0x2a0e940
	bool GetNextOpportunity(out KSOpportunity Opportunity);// 0x2a0e870
	void AbortOpportunity(KSOpportunity InOpportunity, enum AbortReason, int AbortSeconds);// 0x2a0e5c0

--------------------------------
Class: KSOpportunity
	FString OpportunityId;//[Offset: 0x0, Size: 1]
	FString URL;//[Offset: 0x10, Size: 1]
	int DurationSeconds;//[Offset: 0x20, Size: 1]

--------------------------------
Class: KSMailCenterDataFactory.PUMG_DataFactory.Object
	MulticastInlineDelegateProperty OnMailMessageUpdated;//[Size: 1]
	void SetMailRead(KSMailMessage* Message);// 0x29da980
	bool IsMailRead(KSMailMessage* Message);// 0x29da4e0
	int GetUnreadMailCount();// 0x29d9e50
	KSMailMessage*[] GetMailMessages();// 0x29d9d20
	bool GetExpiredTime(const KSMailMessage* MailMessage, out DateTime OutExpiredTime);// 0x29d9820
	bool GetAcquiredTime(const KSMailMessage* MailMessage, out DateTime OutDateTime);// 0x29d9470
	FText DateTimetoText(out const DateTime InDateTime);// 0x29d9300

--------------------------------
Class: KSMailMessage.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	int DeleteLootID;//[Offset: 0x280, Size: 1]
	int ClaimableRewardLootId;//[Offset: 0x284, Size: 1]
	int ClaimableRewardVendorId;//[Offset: 0x288, Size: 1]
	bool IsClaimable();// 0x27aea30
	bool HasBeenClaimed(const Object* WorldContextObject);// 0x27ae970
	bool GetClaimableRewards(out PUMG_StoreItem*[] ClaimableRewardItems, const Object* WorldContextObject);// 0x27ae250
	void DeleteMessage();// 0x27ae100
	void ClaimRewardLoot(const Object* WorldContextObject);// 0x27ae080

--------------------------------
Class: KSMediaPlayerWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	DataTable* MediaPlayerPlaylistEntries;//[Offset: 0x528, Size: 1]
	bool bOnlyWatchFirstEntry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	void UIX_SkipEntry();// 0x29e43a0
	void OnShouldShowPromptChanged(bool bCanSkipEntry);// 0x2d74e00
	void OnReadyForPlayback(const PlatformMediaSource* PlatformMediaSource, const AkAudioEvent* PlayEvent, const AkAudioEvent* StopEvent);// 0x29e3ea0
	void OnEndLoadingMedia();// 0x2d74e00
	void OnBeginLoadingMedia();// 0x2d74e00
	bool IsCurrentEntrySkippable();// 0x29e3d90

--------------------------------
Class: PlatformMediaSource.MediaSource.Object
	MediaSource* MediaSource;//[Offset: 0x80, Size: 1]

--------------------------------
Class: MediaSource.Object
	bool Validate();// 0x3d93b30
	void SetMediaOptionString(out const FName Key, FString Value);// 0x3d945e0
	void SetMediaOptionInt64(out const FName Key, int64 Value);// 0x3d94510
	void SetMediaOptionFloat(out const FName Key, float Value);// 0x3d94440
	void SetMediaOptionBool(out const FName Key, bool Value);// 0x3d94370
	FString GetUrl();// 0xe91410

--------------------------------
Class: KSLobbyWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0, Size: 1]
	Object* FontMaterial;//[Offset: 0x8, Size: 1]
	FontOutlineSettings OutlineSettings;//[Offset: 0x10, Size: 1]
	FName TypefaceFontName;//[Offset: 0x40, Size: 1]
	int Size;//[Offset: 0x48, Size: 1]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0, Size: 1]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 1]
	bool bApplyOutlineToDropShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 1]
	Object* OutlineMaterial;//[Offset: 0x8, Size: 1]
	LinearColor OutlineColor;//[Offset: 0x10, Size: 1]

--------------------------------
Class: KSAsyncImage.PUMG_AsyncImage.Image.Widget.Visual.Object
	MaterialInstanceDynamic* MaterialToUse;//[Offset: 0x260, Size: 1]
	FName MaterialParameter;//[Offset: 0x268, Size: 1]
	void SetMaterialToUse(MaterialInstanceDynamic* InMID);// 0x26e02b0
	void SetBrushFromTextureOnItem(const PlatformInventoryItem* Item, Texture2D* Texture, bool bMatchSize);// 0x26e0150
	void SetBrushFromPathOnItem(const PlatformInventoryItem* Item, out const SoftObjectPath Path, bool bMatchSize);// 0x26e0020
	void SetBrushFromItemIcon(const PlatformInventoryItem* Item, bool bMatchSize);// 0x26dff50
	void SetBrushFromIconInfo(IconInfo* IconInfo, bool bMatchSize);// 0x26dfe80
	bool IsCurrentlyAsyncLoading();// 0x26df500

--------------------------------
Class: PUMG_AsyncImage.Image.Widget.Visual.Object
	Widget* WaitingWidget;//[Offset: 0x218, Size: 1]
	MulticastInlineDelegateProperty OnAsyncImageLoadStarted;//[Size: 1]
	MulticastInlineDelegateProperty OnAsyncImageLoadComplete;//[Size: 1]
	MulticastInlineDelegateProperty OnAsyncImageLoadCanceled;//[Size: 1]
	MulticastInlineDelegateProperty OnAsyncImageBrushChanged;//[Size: 1]
	void ShowWaitingWidget();// 0xe83550
	void SetWaitingWidget(Widget* InWaitingWidget);// 0xe834d0
	void HideWaitingWidget();// 0xe82d10

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0x110, Size: 1]
	delegate BrushDelegate;//[Offset: 0x198, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x1a8, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x1b8, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1cc, Size: 1]
	void SetOpacity(float InOpacity);// 0x3c14d90
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3c149e0
	void SetBrushTintColor(SlateColor TintColor);// 0x3c14860
	void SetBrushSize(Vector2D DesiredSize);// 0x3c147e0
	void SetBrushResourceObject(Object* ResourceObject);// 0x3c14760
	void SetBrushFromTextureDynamic(Texture2DDynamic* Texture, bool bMatchSize);// 0x3c14690
	void SetBrushFromTexture(Texture2D* Texture, bool bMatchSize);// 0x3c145c0
	void SetBrushFromSoftTexture(Texture2D* SoftTexture, bool bMatchSize);// 0x3c14490
	void SetBrushFromSoftPath(out const SoftObjectPath SoftPath, bool bMatchSize);// 0x3c14390
	void SetBrushFromSoftMaterial(MaterialInterface* SoftMaterial);// 0x3c142a0
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3c14210
	void SetBrushFromAtlasInterface(interface classNone AtlasRegion, bool bMatchSize);// 0x3c14120
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3c14090
	void SetBrush(out const SlateBrush InBrush);// 0x3c13f10
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3c13730

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float WidthOverride;//[Offset: 0x138, Size: 1]
	float HeightOverride;//[Offset: 0x13c, Size: 1]
	float MinDesiredWidth;//[Offset: 0x140, Size: 1]
	float MinDesiredHeight;//[Offset: 0x144, Size: 1]
	float MaxDesiredWidth;//[Offset: 0x148, Size: 1]
	float MaxDesiredHeight;//[Offset: 0x14c, Size: 1]
	float MinAspectRatio;//[Offset: 0x150, Size: 1]
	float MaxAspectRatio;//[Offset: 0x154, Size: 1]
	bool bOverride_WidthOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x158, Size: 1]
	bool bOverride_HeightOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x158, Size: 1]
	bool bOverride_MinDesiredWidth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x158, Size: 1]
	bool bOverride_MinDesiredHeight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x158, Size: 1]
	bool bOverride_MaxDesiredWidth;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x158, Size: 1]
	bool bOverride_MaxDesiredHeight;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x158, Size: 1]
	bool bOverride_MinAspectRatio;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x158, Size: 1]
	bool bOverride_MaxAspectRatio;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x158, Size: 1]
	void SetWidthOverride(float InWidthOverride);// 0x3c1eb90
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3c1e030
	void SetMinDesiredHeight(float InMinDesiredHeight);// 0x3c1df30
	void SetMinAspectRatio(float InMinAspectRatio);// 0x3c1deb0
	void SetMaxDesiredWidth(float InMaxDesiredWidth);// 0x3c1de30
	void SetMaxDesiredHeight(float InMaxDesiredHeight);// 0x3c1ddb0
	void SetMaxAspectRatio(float InMaxAspectRatio);// 0x3c1dd30
	void SetHeightOverride(float InHeightOverride);// 0x3c1db20
	void ClearWidthOverride();// 0x3c1c240
	void ClearMinDesiredWidth();// 0x3c1c220
	void ClearMinDesiredHeight();// 0x3c1c200
	void ClearMinAspectRatio();// 0x3c1c1e0
	void ClearMaxDesiredWidth();// 0x3c1c1c0
	void ClearMaxDesiredHeight();// 0x3c1c1a0
	void ClearMaxAspectRatio();// 0x3c1c180
	void ClearHeightOverride();// 0x3c1c160

--------------------------------
Class: ContentWidget.PanelWidget.Widget.Visual.Object
	PanelSlot* SetContent(Widget* Content);// 0x3c10030
	PanelSlot* GetContentSlot();// 0x3c0f870
	Widget* GetContent();// 0x3c0f840

--------------------------------
Class: HorizontalBox.PanelWidget.Widget.Visual.Object
	HorizontalBoxSlot* AddChildToHorizontalBox(Widget* Content);// 0x3c13050

--------------------------------
Class: HorizontalBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	SlateChildSize Size;//[Offset: 0x50, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3c152a0
	void SetSize(SlateChildSize InSize);// 0x3c15190
	void SetPadding(Margin InPadding);// 0x3c14e10
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3c14b50

--------------------------------
Class: SlateChildSize
	float Value;//[Offset: 0x0, Size: 1]
	byte SizeRule;//[Offset: 0x4, Size: 1]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x130, Size: 1]
	delegate TextDelegate;//[Offset: 0x148, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x158, Size: 1]
	delegate ColorAndOpacityDelegate;//[Offset: 0x180, Size: 1]
	SlateFontInfo Font;//[Offset: 0x190, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x1e0, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x268, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x270, Size: 1]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x280, Size: 1]
	float MinDesiredWidth;//[Offset: 0x290, Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x294, Size: 1]
	bool bAutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x295, Size: 1]
	bool bSimpleTextMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x296, Size: 1]
	void SetText(FText InText);// 0x3c22cd0
	void SetStrikeBrush(SlateBrush InStrikeBrush);// 0x3c22b50
	void SetShadowOffset(Vector2D InShadowOffset);// 0x3c228d0
	void SetShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3c22850
	void SetOpacity(float InOpacity);// 0x3c227d0
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3c224d0
	void SetFont(SlateFontInfo InFontInfo);// 0x3c21e40
	void SetColorAndOpacity(SlateColor InColorAndOpacity);// 0x3c21bd0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3c21b40
	FText GetText();// 0x3c21760
	MaterialInstanceDynamic* GetDynamicOutlineMaterial();// 0x3c21560
	MaterialInstanceDynamic* GetDynamicFontMaterial();// 0x3c21530

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x110, Size: 1]
	byte Justification;//[Offset: 0x113, Size: 1]
	enum WrappingPolicy;//[Offset: 0x114, Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x115, Size: 1]
	float WrapTextAt;//[Offset: 0x118, Size: 1]
	Margin Margin;//[Offset: 0x11c, Size: 1]
	float LineHeightPercentage;//[Offset: 0x12c, Size: 1]
	void SetJustification(byte InJustification);// 0x3c221c0

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 1]
	enum TextShapingMethod;//[Offset: 0x1, Size: 1]
	enum TextFlowDirection;//[Offset: 0x2, Size: 1]

--------------------------------
Class: WBP_RankedIcon_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WBP_AsyncIcon_C* RankedIcon;//[Offset: 0x240, Size: 1]
	RichTextBlock* RankedLabel;//[Offset: 0x248, Size: 1]
	ScaleBox* RankedLabelWrapper;//[Offset: 0x250, Size: 1]
	TextBlock* RankedLevel;//[Offset: 0x258, Size: 1]
	bool bDisplayRankName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 1]
	bool bHideRankLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x261, Size: 1]
	MulticastInlineDelegateProperty OnRankTierSet;//[Size: 1]
	void SetRankedTierTextByTier(FText RankedText, FText TempTierText);// 0x2d74e00
	void SetRankedLevel(int Level, byte TempRankTier, enum Temp_byte_Variable, Texture2D* CallFunc_GetRankedBadgeTextureByLevel_RankedBadgeTexture, Texture2D* CallFunc_GetRankedBadgeTextureByLevel_RankedBadgeSoftTexture, FText CallFunc_GetRankedTierAndDivisionTextByLevel_RankedTierRichText, FText CallFunc_GetRankedTierAndDivisionTextByLevel_RankedDivisionText, byte CallFunc_GetRankedTierAndDivisionByLevel_RankedTier, int CallFunc_GetRankedTierAndDivisionByLevel_Division, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_BooleanOR_ReturnValue, enum K2Node_Select_Default);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void Construct();// 0x2d74e00
	void ExecuteUbergraph_WBP_RankedIcon(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2d74e00
	void OnRankTierSet__DelegateSignature(byte RankTier);// 0x2d74e00

--------------------------------
Class: WBP_AsyncIcon_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	KSAsyncImage* Icon;//[Offset: 0x240, Size: 1]
	Throbber* LoadingThrobber;//[Offset: 0x248, Size: 1]
	MulticastInlineDelegateProperty OnIconUpdated;//[Size: 1]
	SlateBrush DefaultBrush;//[Offset: 0x260, Size: 1]
	void Set Brush From Icon Info(IconInfo* Icon Info, bool MatchSize);// 0x2d74e00
	void Set Brush from Path on Item(KSItem* Item, bool MatchSize, SoftObjectPath Path);// 0x2d74e00
	void SetBrushFromSoftPath(SoftObjectPath Soft Path, bool MatchSize);// 0x2d74e00
	void Set Brush from Texture on Item(KSItem* Item, bool MatchSize, Texture2D* Texture);// 0x2d74e00
	void Get Material(out MaterialInstanceDynamic* MaterialInstanceDynamic);// 0x2d74e00
	void SetMaterialToUse(MaterialInterface* Material, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2d74e00
	void ApplyDefaultBrush();// 0x2d74e00
	void SetBrushFromSoftTexture(Texture2D* Texture, bool MatchSize);// 0x2d74e00
	void SetBrushFromTexture(Texture2D* Texture, bool MatchSize);// 0x2d74e00
	void SetBrushFromItemIcon(PlatformInventoryItem* Item, bool MatchSize);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void Construct();// 0x2d74e00
	void OnStartLoad(PUMG_AsyncImage* Image);// 0x2d74e00
	void OnFinishLoad(PUMG_AsyncImage* Image);// 0x2d74e00
	void ExecuteUbergraph_WBP_AsyncIcon(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_AsyncImage* K2Node_CustomEvent_Image, PUMG_AsyncImage* K2Node_CustomEvent_Image, bool CallFunc_IsCurrentlyAsyncLoading_ReturnValue, Texture2D* CallFunc_GetBrushResourceAsTexture2D_ReturnValue, bool K2Node_Event_IsDesignTime, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2d74e00
	void OnIconUpdated__DelegateSignature(Texture2D* Texture);// 0x2d74e00

--------------------------------
Class: Throbber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x110, Size: 1]
	bool bAnimateHorizontally;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114, Size: 1]
	bool bAnimateVertically;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x115, Size: 1]
	bool bAnimateOpacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x116, Size: 1]
	SlateBrushAsset* PieceImage;//[Offset: 0x118, Size: 1]
	SlateBrush Image;//[Offset: 0x120, Size: 1]
	void SetNumberOfPieces(int InNumberOfPieces);// 0x3c22750
	void SetAnimateVertically(bool bInAnimateVertically);// 0x3c21ab0
	void SetAnimateOpacity(bool bInAnimateOpacity);// 0x3c21a20
	void SetAnimateHorizontally(bool bInAnimateHorizontally);// 0x3c21990

--------------------------------
Class: RichTextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0x130, Size: 1]
	DataTable* TextStyleSet;//[Offset: 0x148, Size: 1]
	class RichTextBlockDecorator[] DecoratorClasses;//[Offset: 0x150, Size: 1]
	bool bOverrideDefaultStyle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 1]
	TextBlockStyle DefaultTextStyleOverride;//[Offset: 0x168, Size: 1]
	float MinDesiredWidth;//[Offset: 0x3d0, Size: 1]
	RichTextBlockDecorator*[] InstanceDecorators;//[Offset: 0x640, Size: 1]
	void SetTextStyleSet(DataTable* NewTextStyleSet);// 0x3c1e910
	void SetText(out const FText InText);// 0x3c1e840
	void SetMinDesiredWidth(float InMinDesiredWidth);// 0x3c1dfb0
	void SetDefaultTextStyle(out const TextBlockStyle InDefaultTextStyle);// 0x3c1da70
	void SetDefaultStrikeBrush(out SlateBrush InStrikeBrush);// 0x3c1d8f0
	void SetDefaultShadowOffset(Vector2D InShadowOffset);// 0x3c1d870
	void SetDefaultShadowColorAndOpacity(LinearColor InShadowColorAndOpacity);// 0x3c1d7f0
	void SetDefaultFont(SlateFontInfo InFontInfo);// 0x3c1d6c0
	void SetDefaultColorAndOpacity(SlateColor InColorAndOpacity);// 0x3c1d5d0
	void SetAutoWrapText(bool InAutoTextWrap);// 0x3c1d4c0
	FText GetText();// 0x3c1c890
	RichTextBlockDecorator* GetDecoratorByClass(class RichTextBlockDecorator DecoratorClass);// 0x3c1c600
	void ClearAllDefaultStyleOverrides();// 0x3c1c140

--------------------------------
Class: RichTextBlockDecorator.Object

--------------------------------
Class: TextBlockStyle.SlateWidgetStyle
	SlateFontInfo Font;//[Offset: 0x8, Size: 1]
	SlateColor ColorAndOpacity;//[Offset: 0x58, Size: 1]
	Vector2D ShadowOffset;//[Offset: 0x80, Size: 1]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x88, Size: 1]
	SlateColor SelectedBackgroundColor;//[Offset: 0x98, Size: 1]
	LinearColor HighlightColor;//[Offset: 0xc0, Size: 1]
	SlateBrush HighlightShape;//[Offset: 0xd0, Size: 1]
	SlateBrush StrikeBrush;//[Offset: 0x158, Size: 1]
	SlateBrush UnderlineBrush;//[Offset: 0x1e0, Size: 1]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: ScaleBox.ContentWidget.PanelWidget.Widget.Visual.Object
	byte Stretch;//[Offset: 0x128, Size: 1]
	byte StretchDirection;//[Offset: 0x129, Size: 1]
	float UserSpecifiedScale;//[Offset: 0x12c, Size: 1]
	bool IgnoreInheritedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 1]
	void SetUserSpecifiedScale(float InUserSpecifiedScale);// 0x3c1e990
	void SetStretchDirection(byte InStretchDirection);// 0x3c1e7c0
	void SetStretch(byte InStretch);// 0x3c1e740
	void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);// 0x3c1dca0

--------------------------------
Class: VerticalBox.PanelWidget.Widget.Visual.Object
	VerticalBoxSlot* AddChildToVerticalBox(Widget* Content);// 0x3c2af60

--------------------------------
Class: VerticalBoxSlot.PanelSlot.Visual.Object
	SlateChildSize Size;//[Offset: 0x38, Size: 1]
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3c2c7f0
	void SetSize(SlateChildSize InSize);// 0x3c2c590
	void SetPadding(Margin InPadding);// 0x3c2c120
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3c2bba0

--------------------------------
Class: WBP_ProgressEarnedBar_C.KSProgressMeterWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x548, Size: 1]
	WidgetAnimation* OnLevelDown;//[Offset: 0x550, Size: 1]
	WidgetAnimation* OnLevelUp;//[Offset: 0x558, Size: 1]
	HorizontalBox* BarBackground;//[Offset: 0x560, Size: 1]
	Image* BarBackgroundImage;//[Offset: 0x568, Size: 1]
	Image* LevelUpAnimBar;//[Offset: 0x570, Size: 1]
	Overlay* ProgressBarBase;//[Offset: 0x578, Size: 1]
	HorizontalBox* ProgressBarFill;//[Offset: 0x580, Size: 1]
	HorizontalBox* ProgressBarFill_Bonus;//[Offset: 0x588, Size: 1]
	Image* xp_base;//[Offset: 0x590, Size: 1]
	Image* xp_base_tip;//[Offset: 0x598, Size: 1]
	Image* xp_progress;//[Offset: 0x5a0, Size: 1]
	Image* xp_progress_bonus;//[Offset: 0x5a8, Size: 1]
	PlayerProgression Progression;//[Offset: 0x5b0, Size: 1]
	int CurrentTierIndex;//[Offset: 0x720, Size: 1]
	MulticastInlineDelegateProperty OnLevelUpEvent;//[Size: 1]
	MulticastInlineDelegateProperty OnLevelDownEvent;//[Size: 1]
	SlateColor BaseColor;//[Offset: 0x748, Size: 1]
	SlateColor IncreaseColor;//[Offset: 0x770, Size: 1]
	SlateColor DecreaseColor;//[Offset: 0x798, Size: 1]
	AkAudioEvent* PlayRankProgressionSFX;//[Offset: 0x7c0, Size: 1]
	AkAudioEvent* StopRankProgressionSFX;//[Offset: 0x7c8, Size: 1]
	SlateColor BackgroundColor;//[Offset: 0x7d0, Size: 1]
	float Clamped Base Pct;//[Offset: 0x7f8, Size: 1]
	float Clamped Delta Pct;//[Offset: 0x7fc, Size: 1]
	SlateColor BonusIncreaseColor;//[Offset: 0x800, Size: 1]
	MulticastInlineDelegateProperty OnLerpUpdate;//[Size: 1]
	float AnimTimeInitial;//[Offset: 0x838, Size: 1]
	float AnimTimeFinal;//[Offset: 0x83c, Size: 1]
	bool ShowGradientTip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840, Size: 1]
	void GetProgressionFinalTier(out int Final Tier Index, int CallFunc_Array_LastIndex_ReturnValue);// 0x2d74e00
	void IsProgressionIncreasing(out bool Return Value, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2d74e00
	void IsOnFirstTier(out bool FinalTier, bool Temp_bool_Variable, int Temp_int_Variable, int CallFunc_GetProgressionFinalTier_Final_Tier_Index, bool CallFunc_IsProgressionIncreasing_Return_Value, int K2Node_Select_Default, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2d74e00
	void OnLevelDownAnimCompleted(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_InitializeAnimForTier_IsValid);// 0x2d74e00
	void IsOnFinalTier(out bool FinalTier, bool Temp_bool_Variable, int Temp_int_Variable, bool CallFunc_IsProgressionIncreasing_Return_Value, int CallFunc_GetProgressionFinalTier_Final_Tier_Index, int K2Node_Select_Default, bool CallFunc_EqualEqual_IntInt_ReturnValue);// 0x2d74e00
	void Set Fill Colors();// 0x2d74e00
	void OnLevelUpAnimCompleted(const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_InitializeAnimForTier_IsValid);// 0x2d74e00
	void InitializeAnimForTier(int Tier Index, out bool IsValid, bool CallFunc_IsProgressionIncreasing_Return_Value, float CallFunc_SelectFloat_ReturnValue, bool Temp_bool_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool CallFunc_IsOnFinalTier_FinalTier, float CallFunc_Conv_IntToFloat_ReturnValue, float K2Node_Select_Default, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, float CallFunc_NormalizeToRange_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x2d74e00
	void SetProgressionData(PlayerProgression Progression, int CallFunc_GetProgressionFinalTier_Final_Tier_Index, bool CallFunc_IsProgressionIncreasing_Return_Value, int CallFunc_SelectInt_ReturnValue, bool CallFunc_InitializeAnimForTier_IsValid);// 0x2d74e00
	void ApplyMeterPercentages(float BasePercent, float DeltaPercent);// 0x2d74e00
	void OnDeltaAnimationStarted();// 0x2d74e00
	void OnDeltaAnimationTicked();// 0x2d74e00
	void OnDeltaAnimationFinished(bool bLevelChange);// 0x2d74e00
	void Construct();// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void PlayNewLevelAnim(bool IsLevelUp);// 0x2d74e00
	void ExecuteUbergraph_WBP_ProgressEarnedBar(int EntryPoint, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, const FName Temp_name_Variable, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsProgressionIncreasing_Return_Value, float K2Node_Event_BasePercent, float K2Node_Event_DeltaPercent, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, enum K2Node_Select_Default, float CallFunc_FMax_ReturnValue, float CallFunc_FMin_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, float CallFunc_FMin_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, bool K2Node_Event_bLevelChange, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, ActivityTier CallFunc_Array_Get_Item, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsProgressionIncreasing_Return_Value, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsDesignTime, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, bool Temp_bool_Variable, CanvasPanelSlot* CallFunc_SlotAsCanvasSlot_ReturnValue, enum K2Node_Select_Default, Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, SlateColor K2Node_Select_Default, Vector2D CallFunc_MakeVector2D_ReturnValue, const delegate Temp_delegate_Variable, Anchors K2Node_MakeStruct_Anchors, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, bool K2Node_CustomEvent_IsLevelUp, WidgetAnimation* K2Node_Select_Default, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2d74e00
	void OnLerpUpdate__DelegateSignature(float CurrentLerpPercantage);// 0x2d74e00
	void OnLevelDownEvent__DelegateSignature(int NewLevel);// 0x2d74e00
	void OnLevelUpEvent__DelegateSignature(int NewLevel);// 0x2d74e00

--------------------------------
Class: KSProgressMeterWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void SetDeltaAnimationParams(float BasePercent, float DeltaPercent, float AnimTime);// 0x29f8f70
	void PlayDeltaAnimation(float StartDelay);// 0x29f8650
	void OnDeltaAnimationTicked();// 0x2d74e00
	void OnDeltaAnimationStarted();// 0x2d74e00
	void OnDeltaAnimationFinished(bool bLevelChange);// 0x2d74e00
	bool IsPlayingDeltaAnimation();// 0x29f8050
	void EnableDeltaAnimation();// 0x29f6d60
	void ApplyMeterPercentages_Raw(float BasePercent, float DeltaPercent);// 0x29f6940
	void ApplyMeterPercentages(float BasePercent, float DeltaPercent);// 0x2d74e00

--------------------------------
Class: PlayerProgression
	ActivityTier[] ProgressionTiers;//[Offset: 0x0, Size: 1]
	int StartingXPValue;//[Offset: 0x10, Size: 1]
	int EndingXPValue;//[Offset: 0x14, Size: 1]
	KSActivity* ActivityReference;//[Offset: 0x18, Size: 1]
	KSActivityInstance* ActivityInstanceReference;//[Offset: 0x20, Size: 1]
	<enum,float> ProgressionBySource;//[Offset: 0x28, Size: 1]
	<FString,float> ProgressionByEvent;//[Offset: 0x78, Size: 1]
	<FString,float> ProgressionByBooster;//[Offset: 0xc8, Size: 1]
	<FString,float> ExtraData;//[Offset: 0x118, Size: 1]
	byte ProgressionType;//[Offset: 0x168, Size: 1]

--------------------------------
Class: Overlay.PanelWidget.Widget.Visual.Object
	OverlaySlot* AddChildToOverlay(Widget* Content);// 0x3c183b0

--------------------------------
Class: OverlaySlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x40, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x50, Size: 1]
	byte VerticalAlignment;//[Offset: 0x51, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3c19870
	void SetPadding(Margin InPadding);// 0x3c192a0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3c19070

--------------------------------
Class: PlayMontageCallbackProxy.Object
	MulticastInlineDelegateProperty OnCompleted;//[Size: 1]
	MulticastInlineDelegateProperty OnBlendOut;//[Size: 1]
	MulticastInlineDelegateProperty OnInterrupted;//[Size: 1]
	MulticastInlineDelegateProperty OnNotifyBegin;//[Size: 1]
	MulticastInlineDelegateProperty OnNotifyEnd;//[Size: 1]
	void OnNotifyEndReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x3b074f0
	void OnNotifyBeginReceived(FName NotifyName, out const BranchingPointNotifyPayload BranchingPointNotifyPayload);// 0x3b07410
	void OnMontageEnded(AnimMontage* Montage, bool bInterrupted);// 0x3b07340
	void OnMontageBlendingOut(AnimMontage* Montage, bool bInterrupted);// 0x3b07270
	static PlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(SkeletalMeshComponent* InSkeletalMeshComponent, AnimMontage* MontageToPlay, out int CreatedInstanceID, float PlayRate, float StartingPosition, FName StartingSection);// 0x3b05c50

--------------------------------
Class: BranchingPointNotifyPayload

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xb0, Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148, Size: 1]
	void Stop();// 0x465b9f0
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x465b930
	void SetTimelineLengthMode(byte NewLengthMode);// 0x465b8b0
	void SetTimelineLength(float NewLength);// 0x465b830
	void SetPlayRate(float NewRate);// 0x465b6a0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x465b720
	void SetNewTime(float NewTime);// 0x465b620
	void SetLooping(bool bNewLooping);// 0x465b590
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x465b4d0
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x465b440
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x465b380
	void ReverseFromEnd();// 0x465b360
	void Reverse();// 0x465b340
	void PlayFromStart();// 0x465b320
	void Play();// 0x465b300
	void OnRep_Timeline();// 0x465b2e0
	bool IsReversing();// 0x465b2b0
	bool IsPlaying();// 0x465b280
	bool IsLooping();// 0x465b250
	float GetTimelineLength();// 0x465b220
	float GetPlayRate();// 0x465b110
	float GetPlaybackPosition();// 0x465b140
	bool GetIgnoreTimeDilation();// 0x465b0e0

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 1]
	float Length;//[Offset: 0x4, Size: 1]
	float PlayRate;//[Offset: 0x8, Size: 1]
	float Position;//[Offset: 0xc, Size: 1]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 1]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 1]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 1]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 1]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 1]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 1]
	Object* PropertySetObject;//[Offset: 0x70, Size: 1]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 1]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 1]
	delegate EventFunc;//[Offset: 0x4, Size: 1]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName VectorPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName FloatPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 1]
	delegate InterpFunc;//[Offset: 0x8, Size: 1]
	FName TrackName;//[Offset: 0x18, Size: 1]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 1]

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: LobbyPlayerController.PGame_PlayerController.PlayerController.Controller.Actor.Object
	class HUD* PendingHUDClass;//[Offset: 0x6b8, Size: 1]
	void UIX_FlushPressedKeys();// 0x1fdc7d0
	void LoadRoute(FName RouteName, bool ForceTransition);// 0x2895610
	void ClearDeserterPenalty();// 0x28951d0

--------------------------------
Class: BP_BrightLobbyHUD_C.BP_BrightLobbyHUDMinimal_C.KSLobbyHUDNew.KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x6e0, Size: 1]
	BrightLobbyWidget_C* LobbyWidget;//[Offset: 0x6e8, Size: 1]
	byte Loadout Slot Edit;//[Offset: 0x6f0, Size: 1]
	MulticastInlineDelegateProperty Loadout Slot Change;//[Size: 1]
	FName MatchLoadingRouteName;//[Offset: 0x708, Size: 1]
	FName[] ClearPendingRouteDataOnSwap;//[Offset: 0x710, Size: 1]
	bool Is in EOM View State(const FName[] K2Node_MakeArray_Array, FName CallFunc_GetCurrentTransitionRoute_Current_Route, FName CallFunc_Get_Current_View_Route_Current_Route, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2d74e00
	void Show Lobby Radial Select(bool CallFunc_IsVisible_ReturnValue);// 0x2d74e00
	KSItem* GetDefaultPlayerAccountItem(enum ItemSlot, PlatformInventoryItem* CallFunc_GetDefaultAccountItemForSlot_Default_Item, KSItem* K2Node_DynamicCast_AsKSItem, bool K2Node_DynamicCast_bSuccess);// 0x2d74e00
	void SetupQueueEvents(delegate K2Node_CreateDelegate_OutputDelegate, KSQueueDataFactory* CallFunc_GetKSQueueDataFactory_ReturnValue);// 0x2d74e00
	void CallRemoveTopViewRoute(bool ForceTransition, out bool ViewChanged, bool CallFunc_Remove_Top_View_Route_ViewChanged);// 0x2d74e00
	void CallAddViewRoute(FName RouteName, bool ClearRouteStack, bool ForceTransition, out bool ViewChanged, bool CallFunc_Add_View_Route_ViewChanged);// 0x2d74e00
	void SafeFrameSettingApplied();// 0x2d74e00
	void BindSettingCallbacks(delegate K2Node_CreateDelegate_OutputDelegate, SettingDelegateStruct K2Node_MakeStruct_SettingDelegateStruct);// 0x2d74e00
	void InternalAddViewRoute(FName RouteName, bool ClearRouteStack, bool ForceTransition, Object* Data, out bool ViewChanged, FName NewViewRoute, FName PreviousViewRoute, FName CallFunc_GetTopViewRoute_ReturnValue, bool CallFunc_AddViewRoute_ReturnValue);// 0x2d74e00
	void OnAcquisition(KSAcquisition* Acquisition, AcquisitionItemData* CallFunc_Array_Get_Item, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Array_IsValidIndex_ReturnValue, PUMG_StoreItemPrice*[] CallFunc_GetPrices_ReturnValue, PUMG_StoreItemPrice* CallFunc_Array_Get_Item, bool CallFunc_Array_IsValidIndex_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, PlatformInventoryItem* K2Node_DynamicCast_AsPlatform_Inventory_Item, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AddViewRoute_ReturnValue, bool CallFunc_AddViewRoute_ReturnValue, bool CallFunc_IsMobile_ReturnValue, bool CallFunc_AddViewRoute_ReturnValue, bool CallFunc_RemoveViewRoute_ReturnValue, FName CallFunc_Get_Current_View_Route_Current_Route, bool CallFunc_AddViewRoute_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_AddViewRoute_ReturnValue);// 0x2d74e00
	void SwapViewRoute(FName RouteName, FName SwapTargetRoute, bool ForceTransition, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_SwapViewRoute_ReturnValue);// 0x2d74e00
	void Remove Top View Route(bool ForceTransition, out bool ViewChanged, FName Temp_name_Variable, FName Temp_name_Variable, PUMG_LoginDataFactory* CallFunc_GetLoginDataFactory_ReturnValue, bool CallFunc_IsLoggedIn_ReturnValue, FName CallFunc_GetTopViewRoute_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, int CallFunc_GetViewRouteCount_ReturnValue, bool Temp_bool_Variable, bool CallFunc_EqualEqual_IntInt_ReturnValue, FName K2Node_Select_Default, bool CallFunc_Add_View_Route_ViewChanged, bool CallFunc_RemoveTopViewRoute_ReturnValue);// 0x2d74e00
	void Add View Route(FName RouteName, bool ClearRouteStack, bool ForceTransition, out bool ViewChanged, bool CallFunc_InternalAddViewRoute_ViewChanged);// 0x2d74e00
	void HandeEOMResults(bool ForceTransition, bool CallFunc_Is_in_EOM_View_State_ReturnValue, bool CallFunc_Add_View_Route_ViewChanged, KSEMODataFactory* CallFunc_GetEMODataFactory_ReturnValue);// 0x2d74e00
	void GetCurrentTransitionRoute(out FName Current Route, FName CallFunc_GetCurrentTransitionRoute_ReturnValue);// 0x2d74e00
	KSLobbyWidget* GetLobbyWidget();// 0x2d74e00
	void Focus Home Screen();// 0x2d74e00
	void Get Current View Route(out FName Current Route, FName CallFunc_GetCurrentRoute_ReturnValue);// 0x2d74e00
	void Focus Sticky Loadout Panel(Widget* CallFunc_SetFocusToThis_ReturnValue);// 0x2d74e00
	void Get Current Loadout Slot(out byte Current Loadout Slot);// 0x2d74e00
	void Cache Current Loadout Slot(byte Loadout Slot Edit);// 0x2d74e00
	void TempBootstrapFunctionality(delegate K2Node_CreateDelegate_OutputDelegate, KSAcquisitionManager* CallFunc_GetAcquisitionManager_ReturnValue);// 0x2d74e00
	void FallbackLogoutCleanup(int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PanelWidget*[] CallFunc_GetFocusableWidgetContainers_ReturnValue, int Temp_int_Array_Index_Variable, int CallFunc_Array_Length_ReturnValue, PanelWidget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_CanCloseOnLogout_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2d74e00
	PanelWidget*[] GetFocusableWidgetContainers(PanelWidget*[] CallFunc_GetFocusableWidgetContainers_ReturnValue, bool CallFunc_IsValid_ReturnValue, PanelWidget*[] K2Node_MakeArray_Array);// 0x2d74e00
	void Handle Login State Change(enum Login State, bool CallFunc_Add_View_Route_ViewChanged, FString CallFunc_GetEnumeratorUserFriendlyName_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Add_View_Route_ViewChanged, bool CallFunc_Add_View_Route_ViewChanged, bool CallFunc_Add_View_Route_ViewChanged, bool CallFunc_Add_View_Route_ViewChanged, bool CallFunc_Add_View_Route_ViewChanged, bool CallFunc_Add_View_Route_ViewChanged);// 0x2d74e00
	PUMG_PopupManager* GetPopupManager();// 0x2d74e00
	void Handle Party Invite Received(PUMG_PlayerInfo* Inviter);// 0x2d74e00
	void ReceiveBeginPlay();// 0x2d74e00
	void HandleOpenTextChat(bool BeginChatCommand);// 0x2d74e00
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x2d74e00
	void ApplySafeFrameScale(float SafeFrameScale);// 0x2d74e00
	void OnCustomQueueJoin();// 0x2d74e00
	void EvaluateFocus();// 0x2d74e00
	void HandleMatchStatusUpdated(enum MatchStatus);// 0x2d74e00
	void TestMediaPlayerUrl(FString MediaUrl, int WatchTimer);// 0x2d74e00
	void HandleRewardsReceived(PlayerRewardsSummary PlayerRewardsSummary, ScoreboardStats ScoreboardStats);// 0x2d74e00
	void ExecuteUbergraph_BP_BrightLobbyHUD(int EntryPoint, KSEMODataFactory* CallFunc_GetEMODataFactory_ReturnValue, float K2Node_Event_SafeFrameScale, bool CallFunc_IsValid_ReturnValue, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, PUMG_PlayerInfo* K2Node_Event_Player, bool CallFunc_IsValid_ReturnValue, bool CallFunc_RemoveRoute_ReturnValue, KSQueueDataFactory* CallFunc_GetKSQueueDataFactory_ReturnValue, ClientQueueInfo CallFunc_GetCurrentCustomMatchInfo_InClientQueueInfo, bool CallFunc_GetCurrentCustomMatchInfo_ReturnValue, bool CallFunc_Add_View_Route_ViewChanged, bool CallFunc_Not_PreBool_ReturnValue, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, bool CallFunc_ReplaceRoute_ReturnValue, enum K2Node_Event_MatchStatus, bool CallFunc_HasCurrentMatchId_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_BooleanAND_ReturnValue, FString K2Node_Event_MediaUrl, int K2Node_Event_WatchTimer, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, TestMediaPlayerParams_C* CallFunc_SpawnObject_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_PushRoute_ReturnValue, bool K2Node_Event_BeginChatCommand, PUMG_PlayerInfo* K2Node_CustomEvent_Inviter, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, FText CallFunc_GetName_ReturnValue, PlayerController* CallFunc_GetOwningPlayerController_ReturnValue, BrightLobbyWidget_C* CallFunc_Create_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_AddToPlayerScreen_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_LoginDataFactory* CallFunc_GetLoginDataFactory_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum CallFunc_GetCurrentLoginState_ReturnValue, KSPartyDataFactory* CallFunc_GetPartyDataFactory_ReturnValue, KSEMODataFactory* CallFunc_GetEMODataFactory_ReturnValue, PlayerRewardsSummary K2Node_CustomEvent_playerRewardsSummary, ScoreboardStats K2Node_CustomEvent_scoreBoardStats);// 0x2d74e00
	void Loadout Slot Change__DelegateSignature(byte Loadout Slot Edit);// 0x2d74e00

--------------------------------
Class: BP_BrightLobbyHUDMinimal_C.KSLobbyHUDNew.KSHUDCommon.PUMG_HUD.HUD.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x6d8, Size: 1]
	void CallRemoveTopViewRoute(bool ForceTransition, out bool ViewChanged);// 0x2d74e00
	void CallAddViewRoute(FName RouteName, bool ClearRouteStack, bool ForceTransition, out bool ViewChanged);// 0x2d74e00

--------------------------------
Class: BrightLobbyWidget_C.KSLobbyWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x530, Size: 1]
	PUMG_CanvasPanel* AlwaysPersistent;//[Offset: 0x538, Size: 1]
	PUMG_CanvasPanel* AlwaysVisibile;//[Offset: 0x540, Size: 1]
	Image* bkg;//[Offset: 0x548, Size: 1]
	Blocker_C* Blocker;//[Offset: 0x550, Size: 1]
	BrightLobbyHeader_C* BrightLobbyHeader;//[Offset: 0x558, Size: 1]
	PUMG_CanvasPanel* Content;//[Offset: 0x560, Size: 1]
	WBP_local_player_card_C* PlayerCard;//[Offset: 0x568, Size: 1]
	PUMG_CanvasPanel* PopupContent;//[Offset: 0x570, Size: 1]
	PopupManager_C* PopupManager;//[Offset: 0x578, Size: 1]
	PUMG_CanvasPanel* StickyContent;//[Offset: 0x580, Size: 1]
	PUMG_CanvasPanel* StickyContentTop;//[Offset: 0x588, Size: 1]
	WBP_TextChat_C* TextChat;//[Offset: 0x590, Size: 1]
	WBP_ToastNotification_Manager_C* ToastNotificationManager;//[Offset: 0x598, Size: 1]
	WBP_ActiveBoosterShelf_C* WBP_ActiveBoosterShelf;//[Offset: 0x5a0, Size: 1]
	WBP_Context_Bar_C* WBP_Context_Bar;//[Offset: 0x5a8, Size: 1]
	WBP_QueueTimer_v2_C* WBP_QueueTimer_v2;//[Offset: 0x5b0, Size: 1]
	WBP_RadialSelect_C* WBP_RadialSelect;//[Offset: 0x5b8, Size: 1]
	WBP_TopNavBar_C* WBP_TopNavBar;//[Offset: 0x5c0, Size: 1]
	WBP_VersionNumber_C* WBP_VersionNumber;//[Offset: 0x5c8, Size: 1]
	Vector2D Latest Viewport Size;//[Offset: 0x5d0, Size: 1]
	MulticastInlineDelegateProperty BackButtonClicked;//[Size: 1]
	StickyWidgetData[] StickyWidgets;//[Offset: 0x5e8, Size: 1]
	DataTable* LobbyViewTable;//[Offset: 0x5f8, Size: 1]
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent, Key CallFunc_GetKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue);// 0x2d74e00
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, Key CallFunc_GetKey_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue);// 0x2d74e00
	void SetErrorMessageDT(KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, PUMG_LoginDataFactory* CallFunc_GetLoginDataFactory_ReturnValue);// 0x2d74e00
	void UninitializeSubWidgets(PanelWidget* Container, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, KSWidget* K2Node_DynamicCast_AsKSWidget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2d74e00
	void InitializeSubWidgets(PanelWidget* Container, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, int Temp_int_Variable, int CallFunc_Add_IntInt_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, PanelWidget* K2Node_DynamicCast_AsPanel_Widget, bool K2Node_DynamicCast_bSuccess, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2d74e00
	void HidePersistentWidgets(int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2d74e00
	void UninitializeKSWidgets();// 0x2d74e00
	void InitializeKSWidgets();// 0x2d74e00
	void CreateStickyWidgetData(StickyWidgetData K2Node_MakeStruct_StickyWidgetData, StickyWidgetData K2Node_MakeStruct_StickyWidgetData, StickyWidgetData K2Node_MakeStruct_StickyWidgetData, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, StickyWidgetData K2Node_MakeStruct_StickyWidgetData, StickyWidgetData K2Node_MakeStruct_StickyWidgetData, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue, StickyWidgetData K2Node_MakeStruct_StickyWidgetData, StickyWidgetData K2Node_MakeStruct_StickyWidgetData, int CallFunc_Array_Add_ReturnValue, int CallFunc_Array_Add_ReturnValue);// 0x2d74e00
	void Set Safe Frame(float Scale);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void UninitializeWidget();// 0x2d74e00
	void OnShown();// 0x2d74e00
	void HandleSpecialRouteCases(FName CurrentRoute, FName LastRoute, enum Layer);// 0x2d74e00
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2d74e00
	void HandleOpenTextChat(bool BeginChatCommand);// 0x2d74e00
	void HandleOpenTextChatForCommand();// 0x2d74e00
	void HandleOpenTextChatForChat();// 0x2d74e00
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x2d74e00
	void HandleViewStateChangeStarted(FName CurrentRoute, FName NextRoute, enum Layer);// 0x2d74e00
	void DebugOnePress();// 0x2d74e00
	void DebugOneRelease();// 0x2d74e00
	void DebugTwoPress();// 0x2d74e00
	void DebugTwoRelease();// 0x2d74e00
	void ExecuteUbergraph_BrightLobbyWidget(int EntryPoint, bool Temp_bool_Variable, DataTable* Temp_object_Variable, bool Temp_bool_Variable, bool CallFunc_BooleanAND_ReturnValue, PUMG_ViewManager* CallFunc_SpawnObject_ReturnValue, PUMG_HUD* K2Node_Event_hud, FName K2Node_CustomEvent_CurrentRoute, FName K2Node_CustomEvent_LastRoute, enum K2Node_CustomEvent_Layer, DataTable* Temp_object_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool K2Node_CustomEvent_BeginChatCommand, PUMG_PlayerInfo* K2Node_CustomEvent_Player, FName K2Node_CustomEvent_CurrentRoute, FName K2Node_CustomEvent_NextRoute, enum K2Node_CustomEvent_Layer, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, CanvasPanel*[] K2Node_MakeArray_Array, delegate K2Node_CreateDelegate_OutputDelegate, bool Temp_bool_Variable, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, enum Temp_byte_Variable, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, FName CallFunc_GetCurrentRoute_ReturnValue, bool K2Node_SwitchName_CmpSuccess, bool K2Node_SwitchName_CmpSuccess, bool CallFunc_AddViewRoute_ReturnValue, bool Temp_bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_AllowCheats_ReturnValue, enum K2Node_Select_Default, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, bool CallFunc_DoesDataTableRowExist_ReturnValue, bool CallFunc_IsMobile_ReturnValue, DataTable* K2Node_Select_Default);// 0x2d74e00
	void BackButtonClicked__DelegateSignature();// 0x2d74e00

--------------------------------
Class: PUMG_CanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	void PlaceWidgetUnder(UserWidget* BottomWidget, UserWidget* TopWidget);// 0xe82fc0

--------------------------------
Class: Blocker_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Button* Closer;//[Offset: 0x530, Size: 1]
	Image* Image;//[Offset: 0x538, Size: 1]
	PUMG_UnsafeZone* PUMG_UnsafeZone;//[Offset: 0x540, Size: 1]
	PUMG_Widget* Target;//[Offset: 0x548, Size: 1]
	bool ClickToClose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	void BndEvt__Closer_K2Node_ComponentBoundEvent_10_OnButtonClickedEvent__DelegateSignature();// 0x2d74e00
	void Bind(PUMG_Widget* Widget, bool ClickToClose);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void HandleBlockerChange(bool Show, UserWidget* InWidget);// 0x2d74e00
	void ExecuteUbergraph_Blocker(int EntryPoint, PUMG_HUD* K2Node_Event_hud, bool CallFunc_NavigateBack_ReturnValue, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, bool K2Node_CustomEvent_Show, UserWidget* K2Node_CustomEvent_InWidget, PUMG_Widget* K2Node_DynamicCast_AsPUMG_Widget, bool K2Node_DynamicCast_bSuccess, PanelWidget* CallFunc_GetParent_ReturnValue, PUMG_CanvasPanel* K2Node_DynamicCast_AsPUMG_Canvas_Panel, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_Widget* K2Node_CustomEvent_Widget, bool K2Node_CustomEvent_ClickToClose);// 0x2d74e00

--------------------------------
Class: Button.ContentWidget.PanelWidget.Widget.Visual.Object
	SlateWidgetStyleAsset* Style;//[Offset: 0x128, Size: 1]
	ButtonStyle WidgetStyle;//[Offset: 0x130, Size: 1]
	LinearColor ColorAndOpacity;//[Offset: 0x3a8, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x3b8, Size: 1]
	byte ClickMethod;//[Offset: 0x3c8, Size: 1]
	byte TouchMethod;//[Offset: 0x3c9, Size: 1]
	byte PressMethod;//[Offset: 0x3ca, Size: 1]
	bool IsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cb, Size: 1]
	bool bAllowTouchFallthrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3cc, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnReleased;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	void SetTouchMethod(byte InTouchMethod);// 0x3c0cb90
	void SetStyle(out const ButtonStyle InStyle);// 0x3c0cab0
	void SetPressMethod(byte InPressMethod);// 0x3c0c930
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3c0bca0
	void SetClickMethod(byte InClickMethod);// 0x3c0bc20
	void SetBackgroundColor(LinearColor InBackgroundColor);// 0x3c0b6a0
	bool IsPressed();// 0x3c0b410

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x28, Size: 1]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8, Size: 1]
	SlateBrush Hovered;//[Offset: 0x90, Size: 1]
	SlateBrush Pressed;//[Offset: 0x118, Size: 1]
	SlateBrush Disabled;//[Offset: 0x1a0, Size: 1]
	Margin NormalPadding;//[Offset: 0x228, Size: 1]
	Margin PressedPadding;//[Offset: 0x238, Size: 1]
	SlateSound PressedSlateSound;//[Offset: 0x248, Size: 1]
	SlateSound HoveredSlateSound;//[Offset: 0x260, Size: 1]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0, Size: 1]

--------------------------------
Class: PUMG_UnsafeZone.SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object

--------------------------------
Class: SafeZone.ContentWidget.PanelWidget.Widget.Visual.Object
	bool PadLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 1]
	bool PadRight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129, Size: 1]
	bool PadTop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12a, Size: 1]
	bool PadBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b, Size: 1]
	void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);// 0x3c1e510

--------------------------------
Class: BrightLobbyHeader_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	enum[] LoggedOutStates;//[Offset: 0x530, Size: 1]
	PUMG_LoginDataFactory* LoginDataFactory;//[Offset: 0x540, Size: 1]
	void HandleLobbyStartMenuInputAction();// 0x2d74e00
	void StartShowSequence(FName FromRoute, FName ToRoute);// 0x2d74e00
	void StartHideSequence(FName FromRoute, FName ToRoute);// 0x2d74e00
	void ExecuteUbergraph_BrightLobbyHeader(int EntryPoint, FName K2Node_Event_FromRoute, FName K2Node_Event_ToRoute, BP_BrightLobbyHUD_C* K2Node_DynamicCast_AsBP_Bright_Lobby_HUD, bool K2Node_DynamicCast_bSuccess, FName[] K2Node_MakeArray_Array, bool CallFunc_Add_View_Route_ViewChanged, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, FName K2Node_Event_FromRoute, FName K2Node_Event_ToRoute, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2d74e00

--------------------------------
Class: WBP_local_player_card_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x530, Size: 1]
	Image* AvatarShade;//[Offset: 0x538, Size: 1]
	Image* BackgroundFill;//[Offset: 0x540, Size: 1]
	SizeBox* IconSizer;//[Offset: 0x548, Size: 1]
	CircularThrobber* PendingPurchaseThrobber;//[Offset: 0x550, Size: 1]
	WBP_PlayerIdentity_Avatar_C* PlayerAvatar;//[Offset: 0x558, Size: 1]
	WBP_PlayerIdentity_PlayerLevel_C* PlayerLevel;//[Offset: 0x560, Size: 1]
	TextBlock* PlayerName;//[Offset: 0x568, Size: 1]
	Image* PlayerNameShade;//[Offset: 0x570, Size: 1]
	TextBlock* RBCount;//[Offset: 0x578, Size: 1]
	Image* RBIcon;//[Offset: 0x580, Size: 1]
	SizeBox* RBIconSizer;//[Offset: 0x588, Size: 1]
	WidgetSwitcher* RBSwitcher;//[Offset: 0x590, Size: 1]
	WidgetSwitcher* RepSwitcher;//[Offset: 0x598, Size: 1]
	TextBlock* ReputationCount;//[Offset: 0x5a0, Size: 1]
	Image* ReputationIcon;//[Offset: 0x5a8, Size: 1]
	HorizontalBox* ReputationWrapper;//[Offset: 0x5b0, Size: 1]
	HorizontalBox* RogueBucksWrapper;//[Offset: 0x5b8, Size: 1]
	Throbber* Throbber;//[Offset: 0x5c0, Size: 1]
	Throbber* Throbber;//[Offset: 0x5c8, Size: 1]
	KSPlayerDataFactory* PlayerDataFactory;//[Offset: 0x5d0, Size: 1]
	Texture2D*[] AvatarOptions;//[Offset: 0x5d8, Size: 1]
	KSLoadoutDataFactory* LoadoutDataFactory;//[Offset: 0x5e8, Size: 1]
	void UpdatePendingPurchaseWarning(bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, KSStoreItemHelper* CallFunc_GetItemHelper_ReturnValue, bool CallFunc_HasPendingPurchase_ReturnValue, enum K2Node_Select_Default);// 0x2d74e00
	void SetPlayerAvatar(PlatformInventoryItem* CallFunc_GetDefaultAccountItemForSlot_Default_Item, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, PUMG_PlayerInfo* CallFunc_GetLocalPlayerInfo_ReturnValue, KSPlayerInfo* K2Node_DynamicCast_AsKSPlayer_Info, bool K2Node_DynamicCast_bSuccess, KSItem* CallFunc_GetEquippedAccountItem_EquippedItem, bool CallFunc_GetEquippedAccountItem_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue);// 0x2d74e00
	void SetPlayerCurrency(int CallFunc_GetCurrencyCountByItemId_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, int CallFunc_GetCurrencyCountByItemId_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue);// 0x2d74e00
	void SetPlayerLevel(int CallFunc_GetPlayerLevel_ReturnValue);// 0x2d74e00
	void SetPlayerInfo(int CallFunc_GetPlayerLevel_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void UninitializeWidget();// 0x2d74e00
	void ExecuteUbergraph_WBP_local_player_card(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_HUD* K2Node_Event_hud, BP_BrightLobbyHUD_C* K2Node_DynamicCast_AsBP_Bright_Lobby_HUD, bool K2Node_DynamicCast_bSuccess, KSStoreItemHelper* CallFunc_GetItemHelper_ReturnValue, KSPlayerDataFactory* CallFunc_GetPlayerDataFactory_ReturnValue, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, BP_BrightLobbyHUD_C* K2Node_DynamicCast_AsBP_Bright_Lobby_HUD, bool K2Node_DynamicCast_bSuccess, KSStoreItemHelper* CallFunc_GetItemHelper_ReturnValue, KSPlayerDataFactory* CallFunc_GetPlayerDataFactory_ReturnValue, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2d74e00

--------------------------------
Class: CircularThrobber.Widget.Visual.Object
	int NumberOfPieces;//[Offset: 0x110, Size: 1]
	float Period;//[Offset: 0x114, Size: 1]
	float Radius;//[Offset: 0x118, Size: 1]
	SlateBrushAsset* PieceImage;//[Offset: 0x120, Size: 1]
	SlateBrush Image;//[Offset: 0x128, Size: 1]
	bool bEnableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 1]
	void SetRadius(float InRadius);// 0x3c0c9b0
	void SetPeriod(float InPeriod);// 0x3c0c830
	void SetNumberOfPieces(int InNumberOfPieces);// 0x3c0c450

--------------------------------
Class: WBP_PlayerIdentity_Avatar_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	WBP_AsyncIcon_C* AvatarIcon;//[Offset: 0x528, Size: 1]
	void SetAvatarFromPath(SoftObjectPath Icon Path);// 0x2d74e00
	void SetAvatar(Texture2D* Texture);// 0x2d74e00

--------------------------------
Class: WBP_PlayerIdentity_PlayerLevel_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x528, Size: 1]
	WidgetSwitcher* LevelLoadingSwitcher;//[Offset: 0x530, Size: 1]
	TextBlock* PlayerLevelText;//[Offset: 0x538, Size: 1]
	Throbber* PlayerLevelThrobber;//[Offset: 0x540, Size: 1]
	WBP_BoxStroke_C* WBP_BoxStroke;//[Offset: 0x548, Size: 1]
	void SetThrobber();// 0x2d74e00
	void SetPlayerLevelExplicit(int NewLevel, FText CallFunc_Conv_IntToText_ReturnValue);// 0x2d74e00

--------------------------------
Class: WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex;//[Offset: 0x128, Size: 1]
	void SetActiveWidgetIndex(int Index);// 0x3c37640
	void SetActiveWidget(Widget* Widget);// 0x3c14210
	Widget* GetWidgetAtIndex(int Index);// 0x3c375b0
	int GetNumWidgets();// 0x3c37580
	int GetActiveWidgetIndex();// 0x3c37550
	Widget* GetActiveWidget();// 0x3c37520

--------------------------------
Class: WBP_BoxStroke_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	Image* Image_E;//[Offset: 0x240, Size: 1]
	Image* Image_N;//[Offset: 0x248, Size: 1]
	Image* Image_S;//[Offset: 0x250, Size: 1]
	Image* Image_W;//[Offset: 0x258, Size: 1]
	SizeBox* SB_E;//[Offset: 0x260, Size: 1]
	SizeBox* SB_N;//[Offset: 0x268, Size: 1]
	SizeBox* SB_S;//[Offset: 0x270, Size: 1]
	SizeBox* SB_W;//[Offset: 0x278, Size: 1]
	float StrokeSize;//[Offset: 0x280, Size: 1]
	LinearColor StrokeColor;//[Offset: 0x284, Size: 1]
	void SetStrokeColor(LinearColor NewColor);// 0x2d74e00
	void SetStrokeSize(float NewSize);// 0x2d74e00
	void ApplyStrokeColor();// 0x2d74e00
	void ApplyStrokeSize(Margin K2Node_MakeStruct_Margin, SizeBoxSlot* CallFunc_SlotAsSizeBoxSlot_ReturnValue, SizeBoxSlot* CallFunc_SlotAsSizeBoxSlot_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void Construct();// 0x2d74e00
	void ExecuteUbergraph_WBP_BoxStroke(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2d74e00

--------------------------------
Class: SizeBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x38, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x58, Size: 1]
	byte VerticalAlignment;//[Offset: 0x59, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3c1ea90
	void SetPadding(Margin InPadding);// 0x3c1e250
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3c1dc20

--------------------------------
Class: PopupManager_C.PUMG_PopupManager.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5e8, Size: 1]
	WidgetAnimation* OnShow;//[Offset: 0x5f0, Size: 1]
	Overlay* BackfillRewardWrapper;//[Offset: 0x5f8, Size: 1]
	Image* background;//[Offset: 0x600, Size: 1]
	HorizontalBox* ButtonContainer;//[Offset: 0x608, Size: 1]
	SizeBox* ContentBox;//[Offset: 0x610, Size: 1]
	VerticalBox* ContentVertBox;//[Offset: 0x618, Size: 1]
	RichTextBlock* DescRichText;//[Offset: 0x620, Size: 1]
	TextBlock* HeaderText;//[Offset: 0x628, Size: 1]
	Image* Image;//[Offset: 0x630, Size: 1]
	Image* Image;//[Offset: 0x638, Size: 1]
	PUMG_UnsafeZone* PUMG_UnsafeZone;//[Offset: 0x640, Size: 1]
	Image* Shadow;//[Offset: 0x648, Size: 1]
	WBP_StandardButton_02_C* StandardButton_02;//[Offset: 0x650, Size: 1]
	WBP_StandardButton_02_C* StandardButton_02_C;//[Offset: 0x658, Size: 1]
	TextBlock* SubheaderText;//[Offset: 0x660, Size: 1]
	EditableTextBox* TextEntry;//[Offset: 0x668, Size: 1]
	TextBlock* Warning;//[Offset: 0x670, Size: 1]
	WBP_panel_bevel_C* WBP_panel_bevel_C;//[Offset: 0x678, Size: 1]
	int CurrentPopupId;//[Offset: 0x680, Size: 1]
	WBP_StandardButton_02_C*[] Buttons;//[Offset: 0x688, Size: 1]
	byte CurrentInputState;//[Offset: 0x698, Size: 1]
	bool BackHeldOnShown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 1]
	FName[] ActionMapKeysToAllow;//[Offset: 0x6a0, Size: 1]
	Key[] KeysToAllowDownUp;//[Offset: 0x6b0, Size: 1]
	AkAudioEvent* CancelClickPopupManSFX;//[Offset: 0x6c0, Size: 1]
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent, Key CallFunc_GetKey_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, EventReply CallFunc_Handled_ReturnValue, EventReply CallFunc_OnKeyUp_ReturnValue);// 0x2d74e00
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, bool CallFunc_IsVisible_ReturnValue, Key CallFunc_GetKey_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, EventReply CallFunc_OnKeyDown_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x2d74e00
	void SetupSubHeaderText(FText NewSubHeaderText, enum Temp_byte_Variable, bool CallFunc_TextIsEmpty_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void SetupButtons(out PUMG_PopupButtonConfig[] ButtonInfo, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, SlateChildSize K2Node_MakeStruct_SlateChildSize, Margin K2Node_MakeStruct_Margin, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_PopupButtonConfig CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, WBP_StandardButton_02_C* CallFunc_Array_Get_Item, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, WBP_StandardButton_02_C* CallFunc_Create_ReturnValue, int CallFunc_Array_Add_ReturnValue, HorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue);// 0x2d74e00
	void SetupTextEntry(bool HasTextEntry, FText DefaultEntryText, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void SetupWarningText(FText NewWarningText, bool Temp_bool_Variable, bool CallFunc_TextIsEmpty_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void SetupDescription(FText NewDescText, bool Temp_bool_Variable, bool CallFunc_TextIsEmpty_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void SetupHeader(FText NewHeaderText, bool Temp_bool_Variable, bool CallFunc_TextIsEmpty_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	bool NavigateBack();// 0x2d74e00
	void Construct();// 0x2d74e00
	void ShowPopup(PUMG_PopupConfig popupData);// 0x2d74e00
	void HidePopup();// 0x2d74e00
	void ButtonPressed(Widget* Index);// 0x2d74e00
	void InitializeWidgetNavigation();// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void BndEvt__CancelButton_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature(Widget* Widget);// 0x2d74e00
	void HandleCancelButtonClicked(Widget* InIndex);// 0x2d74e00
	void OnShown();// 0x2d74e00
	void OnHide();// 0x2d74e00
	void OnBackButton();// 0x2d74e00
	void ExecuteUbergraph_PopupManager(int EntryPoint, PUMG_PopupConfig K2Node_Event_popupData, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, Widget* K2Node_CustomEvent_Index, WBP_StandardButton_02_C* K2Node_DynamicCast_AsWBP_Standard_Button_02, bool K2Node_DynamicCast_bSuccess, enum Temp_byte_Variable, PUMG_HUD* K2Node_Event_hud, Widget* K2Node_ComponentBoundEvent_Widget, bool Temp_bool_Variable, AkAudioEvent* Temp_object_Variable, enum K2Node_Select_Default, bool Temp_bool_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Widget* K2Node_CustomEvent_InIndex, Key CallFunc_GetGamepadCancelButton_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsInputKeyDown_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, bool CallFunc_WasInputKeyJustReleased_ReturnValue, bool CallFunc_IsInputKeyDown_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, int CallFunc_Array_Find_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FName[] K2Node_MakeArray_Array, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLobbyHUD_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, FName CallFunc_PopOverrideRoute_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, Widget* CallFunc_SetFocusToThis_ReturnValue, bool CallFunc_IsValid_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, AkAudioEvent* K2Node_Select_Default, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue);// 0x2d74e00

--------------------------------
Class: WBP_StandardButton_02_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* OnClick;//[Offset: 0x530, Size: 1]
	WidgetAnimation* Highlight;//[Offset: 0x538, Size: 1]
	Image* BackgroundImage;//[Offset: 0x540, Size: 1]
	TextBlock* ButtonText;//[Offset: 0x548, Size: 1]
	Image* Click;//[Offset: 0x550, Size: 1]
	Image* Image;//[Offset: 0x558, Size: 1]
	Button* LoadoutButton;//[Offset: 0x560, Size: 1]
	SizeBox* TextSizeWrapper;//[Offset: 0x568, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	AkAudioEvent* ClickStandardButton_02SFX;//[Offset: 0x5a0, Size: 1]
	FText DefaultButtonText;//[Offset: 0x5a8, Size: 1]
	float DefaultWidth;//[Offset: 0x5c0, Size: 1]
	AkAudioEvent* HoverStandardButton_02SFX;//[Offset: 0x5c8, Size: 1]
	byte ButtonFontStyle;//[Offset: 0x5d0, Size: 1]
	void SetDefaultDisplay(byte Temp_byte_Variable, bool CallFunc_GetFontByName_HasFound, SlateFontInfo CallFunc_GetFontByName_FontInfo, bool CallFunc_GetFontByName_HasFound, SlateFontInfo CallFunc_GetFontByName_FontInfo, bool CallFunc_GetFontByName_HasFound, SlateFontInfo CallFunc_GetFontByName_FontInfo, SlateFontInfo K2Node_Select_Default);// 0x2d74e00
	void SetWidth(float InWidth);// 0x2d74e00
	void SetButtonText(FText ButtonText);// 0x2d74e00
	bool NavigateConfirm();// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void Construct();// 0x2d74e00
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2d74e00
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x2d74e00
	void BndEvt__LoadoutButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x2d74e00
	void GamepadHover();// 0x2d74e00
	void GamepadUnhover();// 0x2d74e00
	void GamepadConfirm();// 0x2d74e00
	void Do Hover();// 0x2d74e00
	void Do Unhover();// 0x2d74e00
	void ExecuteUbergraph_WBP_StandardButton_02(int EntryPoint, bool CallFunc_IsMobile_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, bool K2Node_Event_IsDesignTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2d74e00
	void OnUnhovered__DelegateSignature(Widget* Widget);// 0x2d74e00
	void OnHovered__DelegateSignature(Widget* Widget);// 0x2d74e00
	void OnClicked__DelegateSignature(Widget* Widget);// 0x2d74e00

--------------------------------
Class: EditableTextBox.Widget.Visual.Object
	FText Text;//[Offset: 0x110, Size: 1]
	delegate TextDelegate;//[Offset: 0x128, Size: 1]
	EditableTextBoxStyle WidgetStyle;//[Offset: 0x138, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x928, Size: 1]
	FText HintText;//[Offset: 0x930, Size: 1]
	delegate HintTextDelegate;//[Offset: 0x948, Size: 1]
	SlateFontInfo Font;//[Offset: 0x958, Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x9a8, Size: 1]
	LinearColor BackgroundColor;//[Offset: 0x9b8, Size: 1]
	LinearColor ReadOnlyForegroundColor;//[Offset: 0x9c8, Size: 1]
	bool IsReadOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d8, Size: 1]
	bool IsPassword;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d9, Size: 1]
	float MinimumDesiredWidth;//[Offset: 0x9dc, Size: 1]
	Margin Padding;//[Offset: 0x9e0, Size: 1]
	bool IsCaretMovedWhenGainFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f0, Size: 1]
	bool SelectAllTextWhenFocused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f1, Size: 1]
	bool RevertTextOnEscape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f2, Size: 1]
	bool ClearKeyboardFocusOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f3, Size: 1]
	bool SelectAllTextOnCommit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f4, Size: 1]
	bool AllowContextMenu;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9f5, Size: 1]
	byte KeyboardType;//[Offset: 0x9f6, Size: 1]
	VirtualKeyboardOptions VirtualKeyboardOptions;//[Offset: 0x9f7, Size: 1]
	enum VirtualKeyboardTrigger;//[Offset: 0x9f8, Size: 1]
	enum VirtualKeyboardDismissAction;//[Offset: 0x9f9, Size: 1]
	byte Justification;//[Offset: 0x9fa, Size: 1]
	ShapedTextOptions ShapedTextOptions;//[Offset: 0x9fb, Size: 1]
	MulticastInlineDelegateProperty OnTextChanged;//[Size: 1]
	MulticastInlineDelegateProperty OnTextCommitted;//[Size: 1]
	void SetText(FText InText);// 0x3c10e70
	void SetJustification(byte InJustification);// 0x3c10850
	void SetIsReadOnly(bool bReadOnly);// 0x3c10740
	void SetIsPassword(bool bIsPassword);// 0x3c10620
	void SetHintText(FText InText);// 0x3c10310
	void SetError(FText InError);// 0x3c10150
	void OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x2d74e00
	void OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x2d74e00
	bool HasError();// 0x3c0fc20
	FText GetText();// 0x3c0fb50
	void ClearError();// 0x3c0f310

--------------------------------
Class: EditableTextBoxStyle.SlateWidgetStyle
	SlateBrush BackgroundImageNormal;//[Offset: 0x8, Size: 1]
	SlateBrush BackgroundImageHovered;//[Offset: 0x90, Size: 1]
	SlateBrush BackgroundImageFocused;//[Offset: 0x118, Size: 1]
	SlateBrush BackgroundImageReadOnly;//[Offset: 0x1a0, Size: 1]
	Margin Padding;//[Offset: 0x228, Size: 1]
	SlateFontInfo Font;//[Offset: 0x238, Size: 1]
	SlateColor ForegroundColor;//[Offset: 0x288, Size: 1]
	SlateColor BackgroundColor;//[Offset: 0x2b0, Size: 1]
	SlateColor ReadOnlyForegroundColor;//[Offset: 0x2d8, Size: 1]
	Margin HScrollBarPadding;//[Offset: 0x300, Size: 1]
	Margin VScrollBarPadding;//[Offset: 0x310, Size: 1]
	ScrollBarStyle ScrollBarStyle;//[Offset: 0x320, Size: 1]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8, Size: 1]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x90, Size: 1]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x118, Size: 1]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1a0, Size: 1]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x228, Size: 1]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2b0, Size: 1]
	SlateBrush NormalThumbImage;//[Offset: 0x338, Size: 1]
	SlateBrush HoveredThumbImage;//[Offset: 0x3c0, Size: 1]
	SlateBrush DraggedThumbImage;//[Offset: 0x448, Size: 1]

--------------------------------
Class: VirtualKeyboardOptions
	bool bEnableAutocorrect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 1]

--------------------------------
Class: WBP_panel_bevel_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]
	Image* Image;//[Offset: 0x240, Size: 1]
	Image* Image;//[Offset: 0x248, Size: 1]

--------------------------------
Class: WBP_TextChat_C.KSTextChatWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x568, Size: 1]
	WBP_TextChat_ChatWindow_C* ChatWindow;//[Offset: 0x570, Size: 1]
	Button* ClickCatcher;//[Offset: 0x578, Size: 1]
	WBP_TextChat_Input_C* TextInput;//[Offset: 0x580, Size: 1]
	bool IsEditingActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	float ChatMessageAutoHideDelay;//[Offset: 0x58c, Size: 1]
	PUMG_ActiveChatChannelData CachedCurrentChannel;//[Offset: 0x590, Size: 1]
	bool NeedToClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a0, Size: 1]
	Key[] CancelKeys;//[Offset: 0x5a8, Size: 1]
	bool WaitForCancelReleaseToClearFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	void IsTextChatEnabled(out bool IsEnabled, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetTextChatEnabled_ReturnValue);// 0x2d74e00
	void HandleTextChatEnabledApplied(bool Value, FText CallFunc_GetEmptyText_ReturnValue);// 0x2d74e00
	void AddCancelKey(Key Key, bool CallFunc_EqualEqual_KeyKey_ReturnValue, int CallFunc_Array_AddUnique_ReturnValue);// 0x2d74e00
	void ConsumeCancelInputReleased();// 0x2d74e00
	void IsAnyCancelKeyDown(out bool AnyKeyDown, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, Key CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_IsInputKeyDown_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2d74e00
	void AddAllCancelKeys(out FName[] Actions, int Temp_int_Loop_Counter_Variable, int CallFunc_Array_Length_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, FName CallFunc_Array_Get_Item, Key[] CallFunc_GetAllButtonsForActionMapping_Buttons, bool CallFunc_GetAllButtonsForActionMapping_ReturnValue, Key[] CallFunc_GetAllButtonsForActionMapping_Buttons, bool CallFunc_GetAllButtonsForActionMapping_ReturnValue, Key CallFunc_Array_Get_Item, Key CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, Key CallFunc_GetGamepadCancelButton_ReturnValue);// 0x2d74e00
	void ProcessDelayedFocusClear(bool CallFunc_IsAnyCancelKeyDown_AnyKeyDown);// 0x2d74e00
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue);// 0x2d74e00
	void HandleSubmitTextInput(FText Text, FText CallFunc_GetEmptyText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue);// 0x2d74e00
	bool CanChatInChannel(enum Channel, enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool K2Node_Select_Default);// 0x2d74e00
	void GetDefaultChannel(out enum DefaultChannel, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_IsLobbyHUD_ReturnValue, enum K2Node_Select_Default);// 0x2d74e00
	void HandleChannelChanged(out PUMG_ActiveChatChannelData ChannelData);// 0x2d74e00
	void HandleChatMessage(out PUMG_ChatData Message, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue);// 0x2d74e00
	void DisableInputListeners();// 0x2d74e00
	void EnableInputListeners(FName[] K2Node_MakeArray_Array, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2d74e00
	void ConsumeCancelInputPressed(FText CallFunc_GetEmptyText_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2d74e00
	void SetUIFocus(bool IsFocused, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, Widget* CallFunc_SetFocusToThis_ReturnValue);// 0x2d74e00
	void DisplayTextChat(int NewLocalVar, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_IsVisible_ReturnValue, int CallFunc_PostEvent_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue);// 0x2d74e00
	void FinishTextChat(out FText InputText, bool ShouldSubmitText, bool WaitForCancelRelease);// 0x2d74e00
	void StartTextChat(bool BeginChatCommand, int NewLocalVar, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsTextChatEnabled_IsEnabled);// 0x2d74e00
	void Construct();// 0x2d74e00
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2d74e00
	void OpenTextChat(bool BeginChatCommand);// 0x2d74e00
	void OnTextCommitted(out const FText Text, byte CommitMethod);// 0x2d74e00
	void InitializeWidgetNavigation();// 0x2d74e00
	void HandleChatMessageReceived(out const PUMG_ChatData ReceivedMessage);// 0x2d74e00
	void OnChannelChanged(out const PUMG_ActiveChatChannelData ChatChannelData);// 0x2d74e00
	void HandleChatChannelJoined(enum Channel);// 0x2d74e00
	void HandleChatChannelLeft(enum Channel);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void OnCancelButtonPressed(Key Key);// 0x2d74e00
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x2d74e00
	void HandleCloseTextChat();// 0x2d74e00
	void HandleTextChatEnabledChanged();// 0x2d74e00
	void ShowTextChat();// 0x2d74e00
	void OnRadialMenuItemUse(RadialMenuItemEventInfo EventInfo);// 0x2d74e00
	void PingAdded(out const PingInfo PingInfo);// 0x2d74e00
	void ExecuteUbergraph_WBP_TextChat(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const PUMG_ActiveChatChannelData K2Node_CustomEvent_ChatChannelData, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_Event_Channel, enum K2Node_Event_Channel, bool CallFunc_SetChatChannel_ReturnValue, enum CallFunc_GetDefaultChannel_DefaultChannel, PUMG_HUD* K2Node_Event_hud, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSSettingsDataFactory* CallFunc_GetSettingsDataFactory_ReturnValue, enum CallFunc_GetDefaultChannel_DefaultChannel, bool CallFunc_SetChatChannel_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue, bool CallFunc_CanChatInChannel_ReturnValue, const PUMG_ChatData K2Node_Event_ReceivedMessage, Key K2Node_CustomEvent_Key, bool CallFunc_EqualEqual_KeyKey_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_GetEmptyText_ReturnValue, PUMG_PlayerInfo* K2Node_Event_Player, int64 CallFunc_GetPlayerId_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetChatChannelToPlayer_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_GetEmptyText_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FText CallFunc_GetEmptyText_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, SettingDelegateStruct K2Node_MakeStruct_SettingDelegateStruct, bool CallFunc_IsTextChatEnabled_IsEnabled, bool CallFunc_IsTextChatEnabled_IsEnabled, bool CallFunc_IsTextChatEnabled_IsEnabled, KSGameState* CallFunc_GetKSGameState_ReturnValue, RadialMenuItemEventInfo K2Node_CustomEvent_EventInfo, bool CallFunc_IsValid_ReturnValue, FText CallFunc_GetItemName_ReturnValue, enum CallFunc_GetCosmeticSlot_ReturnValue, FText CallFunc_FormatTextWithPlayerName_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_BooleanAND_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, KSPlayerState* K2Node_DynamicCast_AsKSPlayer_State, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_ShouldPlayCosmeticLocally_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, PUMG_ActiveChatChannelData CallFunc_GetCurrentChatChannel_ReturnValue, const FText K2Node_CustomEvent_Text, byte K2Node_CustomEvent_CommitMethod, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool K2Node_Event_BeginChatCommand, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, bool CallFunc_IsOnlyASpectator_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsTextChatEnabled_IsEnabled, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, const PingInfo K2Node_CustomEvent_PingInfo, KSPingManager* CallFunc_GetPingManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, FText CallFunc_FormatTextWithParameterArray_ReturnValue, FText CallFunc_FormatTextWithPlayerName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, int CallFunc_Len_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, enum CallFunc_IsFriendlyWithController_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_EqualEqual_ByteByte_ReturnValue);// 0x2d74e00

--------------------------------
Class: KSTextChatWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	enum[] RadialMenuItemsToShowInChat;//[Offset: 0x528, Size: 1]
	bool ActiveChatChannelsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538, Size: 1]
	PUMG_ActiveChatChannelData[] ActiveChatChannels;//[Offset: 0x540, Size: 1]
	int CurrentChatChannelIndex;//[Offset: 0x550, Size: 1]
	MulticastInlineDelegateProperty OnCurrentChatChannelChanged;//[Size: 1]
	void Whisper(FString PlayerName, FString Message);// 0x2a191c0
	void Unblock(FString PlayerName);// 0x2a166d0
	void UIX_SubmitTextInput(FString Message);// 0x2a190a0
	void UIX_SendMessageToPlayer(FString Message, const int64 PlayerId);// 0x2a18fc0
	void UIX_SendMessageToChannel(FString Message, enum Channel);// 0x2a18ee0
	void UIX_MarkMessageAsRead(int MessageIndex);// 0x2a18e60
	void UIX_ExecuteChatCommandLine(FString CommandLine);// 0x2a18dc0
	void ToggleDND();// 0x2a18cb0
	void ShowTextChat();// 0x29c3a00
	bool SetChatChannelToPlayer(int64 PlayerId);// 0x2a189f0
	bool SetChatChannel(enum Channel, int64 PersonalChannelPlayerId);// 0x2a18930
	void Reply(FString Message);// 0x2a18890
	void ProcessMessageOnClient(out const FText Message, enum Channel);// 0x2a18690
	void PreviousChatChannel();// 0x2a18670
	void OpenTextChatToPlayer(PUMG_PlayerInfo* Player);// 0x29ec320
	void OpenTextChat(bool BeginChatCommand);// 0x1fae140
	void NextChatChannel();// 0x2a18080
	bool IsActiveChatChannel(enum Channel);// 0x2a17ff0
	void HandleChatMessageReceived(out const PUMG_ChatData ReceivedMessage);// 0x2a17400
	void HandleChatMessageRead(out const PUMG_ChatData ReadMessage);// 0x2a17310
	void HandleChatChannelLeft(enum Channel);// 0x29e8740
	void HandleChatChannelJoined(enum Channel);// 0x2a17290
	PUMG_ActiveChatChannelData GetCurrentChatChannel();// 0x2a16e10
	KSChatDataFactory* GetChatDataFactory();// 0x2a16de0
	PUMG_ActiveChatChannelData[] GetActiveChatChannels();// 0x2a16d20
	bool CanChatInChannel(enum Channel);// 0x2a16770
	void Block(FString PlayerName);// 0x2a166d0

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 1]
	bool bUseDynamicResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x80, Size: 1]
	uint32 ResolutionSizeY;//[Offset: 0x84, Size: 1]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x88, Size: 1]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x8c, Size: 1]
	int WindowPosX;//[Offset: 0x90, Size: 1]
	int WindowPosY;//[Offset: 0x94, Size: 1]
	int FullscreenMode;//[Offset: 0x98, Size: 1]
	int LastConfirmedFullscreenMode;//[Offset: 0x9c, Size: 1]
	int PreferredFullscreenMode;//[Offset: 0xa0, Size: 1]
	uint32 Version;//[Offset: 0xa4, Size: 1]
	int AudioQualityLevel;//[Offset: 0xa8, Size: 1]
	int LastConfirmedAudioQualityLevel;//[Offset: 0xac, Size: 1]
	float FrameRateLimit;//[Offset: 0xb0, Size: 1]
	int DesiredScreenWidth;//[Offset: 0xb8, Size: 1]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc, Size: 1]
	int DesiredScreenHeight;//[Offset: 0xc0, Size: 1]
	int LastUserConfirmedDesiredScreenWidth;//[Offset: 0xc4, Size: 1]
	int LastUserConfirmedDesiredScreenHeight;//[Offset: 0xc8, Size: 1]
	float LastRecommendedScreenWidth;//[Offset: 0xcc, Size: 1]
	float LastRecommendedScreenHeight;//[Offset: 0xd0, Size: 1]
	float LastCPUBenchmarkResult;//[Offset: 0xd4, Size: 1]
	float LastGPUBenchmarkResult;//[Offset: 0xd8, Size: 1]
	float[] LastCPUBenchmarkSteps;//[Offset: 0xe0, Size: 1]
	float[] LastGPUBenchmarkSteps;//[Offset: 0xf0, Size: 1]
	float LastGPUBenchmarkMultiplier;//[Offset: 0x100, Size: 1]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104, Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0x108, Size: 1]
	MulticastInlineDelegateProperty OnGameUserSettingsUINeedsUpdate;//[Size: 1]
	void ValidateSettings();// 0x2729950
	bool SupportsNGXDLSS();// 0x4564ef0
	bool SupportsNGX();// 0x4564ec0
	bool SupportsHDRDisplayOutput();// 0x4564e90
	void SetVSyncEnabled(bool bEnable);// 0x4564d00
	void SetVisualEffectQuality(int Value);// 0x4564e10
	void SetViewDistanceQuality(int Value);// 0x4564d90
	void SetToDefaults();// 0x4564ce0
	void SetTextureQuality(int Value);// 0x4564c60
	void SetShadowQuality(int Value);// 0x4564be0
	void SetShadingQuality(int Value);// 0x4564b60
	void SetScreenResolution(IntPoint Resolution);// 0x4564ae0
	void SetResolutionScaleValueEx(float NewScaleValue);// 0x4564a60
	void SetResolutionScaleValue(int NewScaleValue);// 0x45649e0
	void SetResolutionScaleNormalized(float NewScaleNormalized);// 0x4564960
	void SetPostProcessingQuality(int Value);// 0x45648e0
	void SetOverallScalabilityLevel(int Value);// 0x4564850
	void SetFullscreenMode(byte InFullscreenMode);// 0x45647d0
	void SetFrameRateLimit(float NewLimit);// 0x4564750
	void SetFoliageQuality(int Value);// 0x45646d0
	void SetDynamicResolutionEnabled(bool bEnable);// 0x4564640
	void SetBenchmarkFallbackValues();// 0x4564620
	void SetAudioQualityLevel(int QualityLevel);// 0x45645a0
	void SetAntiAliasingQuality(int Value);// 0x4564520
	void SaveSettings();// 0x4539760
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);// 0x4564420
	void RevertVideoMode();// 0x4564400
	void ResetToCurrentSettings();// 0x28956e0
	void NGXDriverUpdateRequired(out bool DriverOutOfDate, out int MinDriverVersionMajor, out int MinDriverVersionMinor);// 0x45642d0
	void LoadSettings(bool bForceReload);// 0x4564240
	bool IsVSyncEnabled();// 0x4564210
	bool IsVSyncDirty();// 0x45641e0
	bool IsScreenResolutionDirty();// 0x45641b0
	bool IsHDREnabled();// 0x4564180
	bool IsFullscreenModeDirty();// 0x4564150
	bool IsDynamicResolutionEnabled();// 0x4564120
	bool IsDynamicResolutionDirty();// 0x45640f0
	bool IsDirty();// 0x45640c0
	int GetVisualEffectQuality();// 0x4564060
	int GetViewDistanceQuality();// 0x4564030
	int GetTextureQuality();// 0x4564000
	static int GetSyncInterval();// 0x4563fd0
	int GetShadowQuality();// 0x4563fa0
	int GetShadingQuality();// 0x4563f70
	IntPoint GetScreenResolution();// 0x4563ef0
	float GetResolutionScaleNormalized();// 0x4563ec0
	void GetResolutionScaleInformationEx(out float CurrentScaleNormalized, out float CurrentScaleValue, out float MinScaleValue, out float MaxScaleValue);// 0x4563d20
	void GetResolutionScaleInformation(out float CurrentScaleNormalized, out int CurrentScaleValue, out int MinScaleValue, out int MaxScaleValue);// 0x4563b80
	float GetRecommendedResolutionScale();// 0x4563b40
	byte GetPreferredFullscreenMode();// 0x4563b10
	int GetPostProcessingQuality();// 0x4563ae0
	int GetOverallScalabilityLevel();// 0x4563970
	IntPoint GetLastConfirmedScreenResolution();// 0x4563930
	byte GetLastConfirmedFullscreenMode();// 0x4563900
	static GameUserSettings* GetGameUserSettings();// 0x45638d0
	byte GetFullscreenMode();// 0x45638a0
	float GetFrameRateLimit();// 0x4563870
	static int GetFramePace();// 0x4563840
	int GetFoliageQuality();// 0x4563810
	IntPoint GetDesktopResolution();// 0x45637d0
	static IntPoint GetDefaultWindowPosition();// 0x4563790
	static byte GetDefaultWindowMode();// 0x4563760
	float GetDefaultResolutionScale();// 0x4563720
	static IntPoint GetDefaultResolution();// 0x45636e0
	int GetCurrentHDRDisplayNits();// 0x45636b0
	int GetAudioQualityLevel();// 0x3a9a280
	int GetAntiAliasingQuality();// 0x201a590
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);// 0x45635f0
	void ConfirmVideoMode();// 0x2847ca0
	void ApplySettings(bool bCheckForCommandLineOverrides);// 0x45633c0
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);// 0x4563330
	void ApplyNonResolutionSettings();// 0x27b60a0
	void ApplyHardwareBenchmarkResults();// 0x4563310

--------------------------------
Class: KSGameUserSettings.GameUserSettings.Object
	int SettingsVersionMajor;//[Offset: 0x158, Size: 1]
	int SettingsVersionMinor;//[Offset: 0x15c, Size: 1]
	enum GamepadIconSet;//[Offset: 0x160, Size: 1]
	IntPoint DefaultScreenResolution;//[Offset: 0x164, Size: 1]
	IntPoint SavedScreenResolution;//[Offset: 0x16c, Size: 1]
	FString SavedDisplayLanguage;//[Offset: 0x1d8, Size: 1]
	int LastJoinedQueuePrimaryId;//[Offset: 0x1e8, Size: 1]
	int SavedSelectedRegion;//[Offset: 0x1ec, Size: 1]
	int LastWhatsNewVersion;//[Offset: 0x1f0, Size: 1]
	int[] SavedTransientAcquisitionIds;//[Offset: 0x1f8, Size: 1]
	int[] SavedReadMailMessageIds;//[Offset: 0x208, Size: 1]
	<FName> SavedViewedNewsPanelIds;//[Offset: 0x218, Size: 1]
	int SavedChallengeVersionId;//[Offset: 0x268, Size: 1]
	<int> SavedViewedChallengeIds;//[Offset: 0x270, Size: 1]
	<int> SavedRecentlySeenStoreItemLootIds;//[Offset: 0x2c0, Size: 1]
	<int> SavedSeenAcquiredItemIds;//[Offset: 0x310, Size: 1]
	<int,int> SavedSeenSlotUnlockItemMap;//[Offset: 0x360, Size: 1]
	<int> SavedPinnedJobIds;//[Offset: 0x3b0, Size: 1]
	<FName,FString> SavedSettingsConfig;//[Offset: 0x400, Size: 1]
	<FName> SavedLocalActions;//[Offset: 0x450, Size: 1]
	MulticastInlineDelegateProperty OnGamepadIconSetSettingsApplied;//[Size: 1]
	MulticastInlineDelegateProperty OnLocalSettingSaved;//[Size: 1]
	MulticastInlineDelegateProperty OnSettingApplied;//[Size: 1]
	void SaveLocalAction(out const FName Name);// 0x277a340
	bool IsLocalActionSaved(out const FName Name);// 0x2779fd0
	bool GetVoiceChatEnabled();// 0x2779e30
	bool GetUseQuickCast();// 0x2779ca0
	bool GetTextChatEnabled();// 0x2779c50
	float GetSafeFrameScale();// 0x2779b90
	bool GetQuipsEnabled();// 0x2779a10
	enum GetMuteMode();// 0x27799e0
	enum GetCrosshairSize();// 0x27798f0
	bool GetCommunicationsEnabled();// 0x27798c0
	enum GetColorCorrection();// 0x2779890

--------------------------------
Class: WBP_TextChat_ChatWindow_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* LoseFocus;//[Offset: 0x530, Size: 1]
	WidgetAnimation* GainFocus;//[Offset: 0x538, Size: 1]
	Image* Backer;//[Offset: 0x540, Size: 1]
	Overlay* BackerWrapper;//[Offset: 0x548, Size: 1]
	Button* CloseBtn;//[Offset: 0x550, Size: 1]
	VerticalBox* MessageList;//[Offset: 0x558, Size: 1]
	ScrollBox* Scroll;//[Offset: 0x560, Size: 1]
	int ScrollToBottomFrameDelay;//[Offset: 0x568, Size: 1]
	bool IsCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56c, Size: 1]
	WBP_TextChat_C* TextChatWidget;//[Offset: 0x570, Size: 1]
	MulticastInlineDelegateProperty OnCloseButtonClicked;//[Size: 1]
	void GetMaxChatMessages(out int MaxChatMessages, KSChatDataFactory* CallFunc_GetChatDataFactory_ReturnValue, int CallFunc_GetMaxMessageCount_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void SetCollapsed(bool Collapsed, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, int Temp_int_Variable, float K2Node_Select_Default, int CallFunc_Add_IntInt_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, WBP_TextChat_ChatEntry_C* K2Node_DynamicCast_AsWBP_Text_Chat_Chat_Entry, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2d74e00
	void AddChatMessage(out PUMG_ChatData ChatData, WBP_TextChat_ChatEntry_C* CallFunc_Create_ReturnValue, int CallFunc_GetMaxChatMessages_MaxChatMessages, bool CallFunc_RemoveChildAt_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue);// 0x2d74e00
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x2d74e00
	void BndEvt__CloseBtn_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void HandleInputStateChanged(byte InputState);// 0x2d74e00
	void ExecuteUbergraph_WBP_TextChat_ChatWindow(int EntryPoint, bool Temp_bool_Variable, enum Temp_byte_Variable, int Temp_int_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, Geometry K2Node_Event_MyGeometry, float K2Node_Event_InDeltaTime, enum Temp_byte_Variable, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, PUMG_HUD* K2Node_Event_hud, bool Temp_bool_Variable, byte CallFunc_GetCurrentInputState_ReturnValue, enum K2Node_Select_Default, byte K2Node_CustomEvent_InputState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void OnCloseButtonClicked__DelegateSignature();// 0x2d74e00

--------------------------------
Class: WBP_TextChat_ChatEntry_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* FadeOut;//[Offset: 0x240, Size: 1]
	WidgetAnimation* Show;//[Offset: 0x248, Size: 1]
	Button* NameButton;//[Offset: 0x250, Size: 1]
	TextBlock* NameText;//[Offset: 0x258, Size: 1]
	CanvasPanel* Panel;//[Offset: 0x260, Size: 1]
	TextBlock* Text;//[Offset: 0x268, Size: 1]
	PUMG_ChatData ChatDataCopy;//[Offset: 0x270, Size: 1]
	bool IsWindowCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 1]
	bool IsInitialShowFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b1, Size: 1]
	float ChatMessageDisplayDuration;//[Offset: 0x2b4, Size: 1]
	void HandleInitialSpawn(TimerHandle CallFunc_K2_SetTimer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void InitialShowFinished(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2d74e00
	void SetWindowCollapsed(bool Collapsed);// 0x2d74e00
	void SetTextWithoutPlayer(FText Text, enum Channel, FText CallFunc_GetEmptyText_ReturnValue);// 0x2d74e00
	void SetTextWithPlayer(FText Text, PUMG_PlayerInfo* Sender, PUMG_PlayerInfo* Recipient, bool IsOwnMessage, enum Channel, FText Temp_text_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FText Temp_text_Variable, bool Temp_bool_Variable, FText CallFunc_GetText_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FText CallFunc_GetName_ReturnValue, FText CallFunc_GetName_ReturnValue, const FText K2Node_Select_Default, FText CallFunc_GetName_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue, bool Temp_bool_Variable, FText K2Node_Select_Default, FString CallFunc_Conv_TextToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2d74e00
	void Construct();// 0x2d74e00
	void ExecuteUbergraph_WBP_TextChat_ChatEntry(int EntryPoint);// 0x2d74e00

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0x128, Size: 1]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x350, Size: 1]
	SlateWidgetStyleAsset* Style;//[Offset: 0x820, Size: 1]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x828, Size: 1]
	byte Orientation;//[Offset: 0x830, Size: 1]
	enum ScrollBarVisibility;//[Offset: 0x831, Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x832, Size: 1]
	Vector2D ScrollbarThickness;//[Offset: 0x834, Size: 1]
	Margin ScrollbarPadding;//[Offset: 0x83c, Size: 1]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84c, Size: 1]
	bool AlwaysShowScrollbarTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84d, Size: 1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84e, Size: 1]
	bool bAnimateWheelScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84f, Size: 1]
	enum NavigationDestination;//[Offset: 0x850, Size: 1]
	float NavigationScrollPadding;//[Offset: 0x854, Size: 1]
	enum ScrollWhenFocusChanges;//[Offset: 0x858, Size: 1]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x859, Size: 1]
	float WheelScrollMultiplier;//[Offset: 0x85c, Size: 1]
	MulticastInlineDelegateProperty OnUserScrolled;//[Size: 1]
	void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);// 0x3c1eb10
	void SetScrollOffset(float NewScrollOffset);// 0x3c1e360
	void SetScrollBarVisibility(enum NewScrollBarVisibility);// 0x3c1e2e0
	void SetScrollbarThickness(out const Vector2D NewScrollbarThickness);// 0x3c1e480
	void SetScrollbarPadding(out const Margin NewScrollbarPadding);// 0x3c1e3e0
	void SetOrientation(byte NewOrientation);// 0x3c1e0b0
	void SetConsumeMouseWheel(enum NewConsumeMouseWheel);// 0x3c1d550
	void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);// 0x3c1d430
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);// 0x3c1d3a0
	void SetAllowOverscroll(bool NewAllowOverscroll);// 0x3c1d310
	void ScrollWidgetIntoView(Widget* WidgetToFind, bool AnimateScroll, enum ScrollDestination, float Padding);// 0x3c1d1c0
	void ScrollToStart();// 0x3c1d1a0
	void ScrollToEnd();// 0x3c1d180
	float GetViewOffsetFraction();// 0x3c1c930
	float GetScrollOffsetOfEnd();// 0x3c1c860
	float GetScrollOffset();// 0x3c1c830
	void EndInertialScrolling();// 0x3c1c260

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8, Size: 1]
	SlateBrush BottomShadowBrush;//[Offset: 0x90, Size: 1]
	SlateBrush LeftShadowBrush;//[Offset: 0x118, Size: 1]
	SlateBrush RightShadowBrush;//[Offset: 0x1a0, Size: 1]

--------------------------------
Class: WBP_TextChat_Input_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* background;//[Offset: 0x530, Size: 1]
	BackgroundBlur* Blur;//[Offset: 0x538, Size: 1]
	Button* Button;//[Offset: 0x540, Size: 1]
	Overlay* ChannelOverlay;//[Offset: 0x548, Size: 1]
	TextBlock* ChannelText;//[Offset: 0x550, Size: 1]
	Image* GamepadFocus;//[Offset: 0x558, Size: 1]
	HorizontalBox* HorizontalLayout;//[Offset: 0x560, Size: 1]
	KSEditableTextBox* Input;//[Offset: 0x568, Size: 1]
	Button* OpenChatButton;//[Offset: 0x570, Size: 1]
	CanvasPanel* ParentPanel;//[Offset: 0x578, Size: 1]
	SizeBox* PromptContainer;//[Offset: 0x580, Size: 1]
	WBP_ControllerPrompt_C* PromptIcon;//[Offset: 0x588, Size: 1]
	TextBlock* PromptText;//[Offset: 0x590, Size: 1]
	MulticastInlineDelegateProperty OnTabPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnCancelPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnLeftPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnRightPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnUpPressed;//[Size: 1]
	MulticastInlineDelegateProperty OnDownPressed;//[Size: 1]
	WBP_TextChat_C* TextChatWidget;//[Offset: 0x5f8, Size: 1]
	bool IsEngaged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 1]
	FText PreviousText;//[Offset: 0x608, Size: 1]
	bool IsPromptActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620, Size: 1]
	void SetPromptActionActive(bool IsActive, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default);// 0x2d74e00
	void UpdateGamepadFocus(byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2d74e00
	void HandleInputStateChange(byte InputState);// 0x2d74e00
	void SetEngaged(bool Engaged, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, bool Temp_bool_Variable, enum Temp_byte_Variable, FText CallFunc_GetText_ReturnValue, FText CallFunc_GetEmptyText_ReturnValue, bool CallFunc_NotEqual_TextText_ReturnValue, bool CallFunc_EqualEqual_TextText_ReturnValue, FText CallFunc_GetEmptyText_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, FText CallFunc_GetText_ReturnValue, enum Temp_byte_Variable, float K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, enum K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsTextChatEnabled_IsEnabled, bool CallFunc_IsLobbyHUD_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2d74e00
	void UpdateHintText(byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, FText CallFunc_GetHintText_ReturnValue);// 0x2d74e00
	FText GetHintText(FText Temp_text_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, FText Temp_text_Variable, byte Temp_byte_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, FText K2Node_Select_Default, FText K2Node_Select_Default, FText K2Node_Select_Default, FText K2Node_Select_Default);// 0x2d74e00
	void SetCurrentChannel(enum Channel, PUMG_PlayerInfo* PersonalChannelPlayer, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, FText CallFunc_GetTextChatChannelName_Name, const delegate Temp_delegate_Variable, FString CallFunc_Conv_TextToString_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, FString CallFunc_Concat_StrStr_ReturnValue, int CallFunc_PostEvent_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2d74e00
	EventReply On_Input_KeyDown(out const Geometry MyGeometry, out const KeyEvent InKeyEvent, Key CallFunc_GetKey_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, bool CallFunc_HasKeyboardFocus_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, Key CallFunc_GetGamepadConfirmButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void BndEvt__Button_66_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void OnViewStateChanged(FName CurrentRoute, FName PreviousRoute, enum Layer);// 0x2d74e00
	void BndEvt__Input_K2Node_ComponentBoundEvent_1_OnEditableTextBoxChangedEvent__DelegateSignature(out const FText Text);// 0x2d74e00
	void BndEvt__Input_K2Node_ComponentBoundEvent_2_OnEditableTextBoxCommittedEvent__DelegateSignature(out const FText Text, byte CommitMethod);// 0x2d74e00
	void ExecuteUbergraph_WBP_TextChat_Input(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_Event_IsDesignTime, LobbyPlayerController* K2Node_DynamicCast_AsLobby_Player_Controller, bool K2Node_DynamicCast_bSuccess, PUMG_HUD* K2Node_Event_hud, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, FName K2Node_CustomEvent_CurrentRoute, FName K2Node_CustomEvent_PreviousRoute, enum K2Node_CustomEvent_Layer, FName CallFunc_GetCurrentRoute_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchName_CmpSuccess, const FText K2Node_ComponentBoundEvent_Text, const FText K2Node_ComponentBoundEvent_Text, byte K2Node_ComponentBoundEvent_CommitMethod, bool CallFunc_IsPlatformType_ReturnValue);// 0x2d74e00
	void OnDownPressed__DelegateSignature();// 0x2d74e00
	void OnUpPressed__DelegateSignature();// 0x2d74e00
	void OnRightPressed__DelegateSignature();// 0x2d74e00
	void OnLeftPressed__DelegateSignature();// 0x2d74e00
	void OnCancelPressed__DelegateSignature(Key Key);// 0x2d74e00
	void OnTabPressed__DelegateSignature();// 0x2d74e00

--------------------------------
Class: BackgroundBlur.ContentWidget.PanelWidget.Widget.Visual.Object
	Margin Padding;//[Offset: 0x128, Size: 1]
	byte HorizontalAlignment;//[Offset: 0x138, Size: 1]
	byte VerticalAlignment;//[Offset: 0x139, Size: 1]
	bool bApplyAlphaToBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a, Size: 1]
	float BlurStrength;//[Offset: 0x13c, Size: 1]
	bool bOverrideAutoRadiusCalculation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 1]
	int BlurRadius;//[Offset: 0x144, Size: 1]
	SlateBrush LowQualityFallbackBrush;//[Offset: 0x148, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3c0cc10
	void SetPadding(Margin InPadding);// 0x3c0c560
	void SetLowQualityFallbackBrush(out const SlateBrush InBrush);// 0x3c0c1d0
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3c0be20
	void SetBlurStrength(float InStrength);// 0x3c0b7a0
	void SetBlurRadius(int InBlurRadius);// 0x3c0b720
	void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);// 0x3c0b580

--------------------------------
Class: KSEditableTextBox.EditableTextBox.Widget.Visual.Object
	delegate OnKeyDown;//[Offset: 0xa30, Size: 1]

--------------------------------
Class: WBP_ControllerPrompt_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	Image* Prompt;//[Offset: 0x530, Size: 1]
	byte PromptType;//[Offset: 0x538, Size: 1]
	FName ActionName;//[Offset: 0x53c, Size: 1]
	Key Button;//[Offset: 0x548, Size: 1]
	void SetButtonPrompt(Key Button);// 0x2d74e00
	void SetIsCancel();// 0x2d74e00
	void SetIsConfirm();// 0x2d74e00
	void SetPromptFromButton(Key Button, Texture2D* CallFunc_GetIconForGamepadButton_Icon);// 0x2d74e00
	void UpdateFromSetValues(Key Temp_struct_Variable, bool Temp_bool_Variable, Key CallFunc_GetGamepadCancelButton_ReturnValue, Key CallFunc_GetGamepadButtonForAction_Button, bool CallFunc_GetGamepadButtonForAction_ReturnValue, Key CallFunc_GetGamepadConfirmButton_ReturnValue, Key K2Node_Select_Default, bool K2Node_SwitchEnum_CmpSuccess);// 0x2d74e00
	void SetInputAction(FName ActionName);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void Construct();// 0x2d74e00
	void ExecuteUbergraph_WBP_ControllerPrompt(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2d74e00

--------------------------------
Class: WBP_ToastNotification_Manager_C.KSToastNotificationWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x568, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x570, Size: 1]
	VerticalBox* ChallengeNotificationContainer;//[Offset: 0x578, Size: 1]
	VerticalBox* NotificationContainer;//[Offset: 0x580, Size: 1]
	FText[] LocalizeTexts;//[Offset: 0x588, Size: 1]
	bool CanDisplaySocialToasts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x598, Size: 1]
	void PushAwardsEarnedInMatch(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, ToastData[] CallFunc_GetPostMatchToasts_ReturnValue, int CallFunc_Array_Length_ReturnValue, ToastData CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue);// 0x2d74e00
	void DisplayChallengeToast(WBP_Toast2_C* Toast, PanelSlot* CallFunc_AddChild_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate);// 0x2d74e00
	void DisplayToast(WBP_ToastNotifcation_Entry_C* Toast, delegate K2Node_CreateDelegate_OutputDelegate, Margin K2Node_MakeStruct_Margin, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PanelSlot* CallFunc_AddChild_ReturnValue);// 0x2d74e00
	void OnToastNotificationReceived(ToastData ToastData);// 0x2d74e00
	void HandleToastNotificationRemove(KSWidget* ToastNotification);// 0x2d74e00
	void OnToastIntroAnimFinished();// 0x2d74e00
	void Construct();// 0x2d74e00
	void HandleChallengeToastNotificationRemove(KSWidget* ToastNotification);// 0x2d74e00
	void ExecuteUbergraph_WBP_ToastNotification_Manager(int EntryPoint, ToastData K2Node_Event_ToastData, WBP_ToastNotifcation_Entry_C* CallFunc_Create_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, KSWidget* K2Node_CustomEvent_ToastNotification, WBP_Toast2_C* CallFunc_Create_ReturnValue, bool CallFunc_RemoveChild_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSWidget* K2Node_CustomEvent_ToastNotification, bool CallFunc_RemoveChild_ReturnValue);// 0x2d74e00

--------------------------------
Class: KSToastNotificationWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnToastReceived;//[Size: 1]
	int MaxToastNotification;//[Offset: 0x538, Size: 1]
	int CurrentToastCount;//[Offset: 0x53c, Size: 1]
	bool IsBusy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x540, Size: 1]
	ToastData[] ToastQueue;//[Offset: 0x548, Size: 1]
	ToastData[] PostMatchToasts;//[Offset: 0x558, Size: 1]
	void TestDisplayChallengeNotification();// 0xd94a20
	void StoreToastQueue(ToastData ToastNotification);// 0x2a18b20
	void ShowToastNotification();// 0x2a18b00
	void OnWeaponMilestoneCompleted(KSActivityInstance* Activity, int Tier, int Count);// 0x2a18550
	void OnToastNotificationReceived(ToastData ToastData);// 0x2d74e00
	void OnChallengeCompleted(KSActivityInstance* Activity);// 0x2a18260
	void OnAwardsCompleted(KSActivityInstance* Activity);// 0x2a18160
	void NotifyToastShown();// 0x2a180c0
	void NotifyToastHidden();// 0x2a180a0
	void HandlePartyMemberPromoted(int64 PlayerId);// 0x2a17e70
	void HandlePartyMemberLeftGeneric();// 0x2a17e50
	void HandlePartyMemberLeft(PUMG_PartyMemberData PartyMemberData);// 0x2a17d20
	void HandlePartyMemberKick(int64 PlayerId);// 0x2a17ca0
	void HandlePartyMemberAdded(PUMG_PartyMemberData PartyMemberData);// 0x2a17b70
	void HandlePartyLocalPlayerLeft();// 0x2a17b50
	void HandlePartyInviteSent(FText PlayerName);// 0x2a17a70
	void HandlePartyInviteRejected();// 0x2a17a50
	void HandlePartyInviteReceived(PUMG_PlayerInfo* PartyInviter);// 0x2a179d0
	void HandlePartyInviteError(FText PlayerName);// 0x2a178f0
	void HandlePartyInviteAccepted();// 0x2a178d0
	void HandlePartyDisbanded();// 0x2a178b0
	void HandleFriendRejected(FText PlayerName);// 0x2a177d0
	void HandleFriendInviteReceived(PUMG_FriendData PlayerData);// 0x2a176b0
	void HandleFriendAddSuccess(FString PlayerName);// 0x2a174f0
	void HandleFriendAdded(FText PlayerName);// 0x2a175d0
	KSWeaponMasteryManager* GetWeaponMasteryManager();// 0x2a17260
	ToastData[] GetPostMatchToasts();// 0x2a17030
	KSPlayerChallengesManager* GetPlayerChallengesManager();// 0x2a17000
	KSAwardsManager* GetPlayerAwardsManager();// 0x2a16fd0
	KSPartyDataFactory* GetPartyDataFactory();// 0x29eca20
	bool GetNext(out ToastData NextToastNotification);// 0x2a16e90
	KSFriendDataFactory* GetFriendDataFactory();// 0x2a12d40
	KSEventChallengesManager* GetEventChallengesManager();// 0x2a16e60
	KSBattlePassProgressionManager* GetBattlePassProgressionManager();// 0x2a16db0
	void CreatePlayerLevelUpToasts(KSActivityInstance* PlayerLevelActivityInstance, ActivityTier TierObtained);// 0x2a16ae0
	void CreateMercMasteryLevelUpToasts(KSActivityInstance* MercMasteryActivityInstance, ActivityTier TierObtained);// 0x2a169c0
	void CreateEventChallengeCompleteToasts(KSActivityInstance* EventChallengeActivityInstance);// 0x2a16940
	void CreateBoostActivationToastBySpentItem(PlatformInventoryItem* SpentItem);// 0x2a168c0
	void CreateBoostActivationToastByAcquisition(PUMG_StoreItem* AcquisitionItem);// 0x2a16840
	void ClearPostMatchQueue();// 0x2a16820
	void ClearNotificationQueue();// 0x2a16800

--------------------------------
Class: ToastData
	enum ToastCategory;//[Offset: 0x0, Size: 1]
	FText Title;//[Offset: 0x8, Size: 1]
	FText Message;//[Offset: 0x20, Size: 1]
	PUMG_StoreItem* Reward;//[Offset: 0x38, Size: 1]
	PlatformInventoryItem* OptionalItemValue;//[Offset: 0x40, Size: 1]
	int OptionalIntValue;//[Offset: 0x48, Size: 1]
	KSActivity* OptionalActivityValue;//[Offset: 0x50, Size: 1]

--------------------------------
Class: WBP_Toast2_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* Waiting;//[Offset: 0x530, Size: 1]
	WidgetAnimation* Outro;//[Offset: 0x538, Size: 1]
	WidgetAnimation* Intro;//[Offset: 0x540, Size: 1]
	SizeBox* 1pxBar;//[Offset: 0x548, Size: 1]
	SizeBox* 1pxBar;//[Offset: 0x550, Size: 1]
	TextBlock* AchievementDetails;//[Offset: 0x558, Size: 1]
	TextBlock* AchievementName;//[Offset: 0x560, Size: 1]
	TextBlock* AchievementType;//[Offset: 0x568, Size: 1]
	Image* Back;//[Offset: 0x570, Size: 1]
	Image* BottomBar;//[Offset: 0x578, Size: 1]
	Image* EdgeGlowBottom;//[Offset: 0x580, Size: 1]
	Image* EdgeGlowTop;//[Offset: 0x588, Size: 1]
	Image* Gradient;//[Offset: 0x590, Size: 1]
	Image* HeaderBar;//[Offset: 0x598, Size: 1]
	Image* IconBack;//[Offset: 0x5a0, Size: 1]
	WidgetSwitcher* IconSwitcher;//[Offset: 0x5a8, Size: 1]
	WBP_RogueMasteryPortrait_C* MasteryPortrait;//[Offset: 0x5b0, Size: 1]
	SizeBox* PlayerLevel;//[Offset: 0x5b8, Size: 1]
	TextBlock* PlayerLevelText;//[Offset: 0x5c0, Size: 1]
	WBP_AsyncIcon_C* ToastIcon;//[Offset: 0x5c8, Size: 1]
	Image* TopBar;//[Offset: 0x5d0, Size: 1]
	MulticastInlineDelegateProperty OnRemoveToastNotification;//[Size: 1]
	MulticastInlineDelegateProperty FinishedOutroAnimation;//[Size: 1]
	ToastData ToastData;//[Offset: 0x5f8, Size: 1]
	WidgetAnimation* NewVar;//[Offset: 0x650, Size: 1]
	float WaitDuration;//[Offset: 0x658, Size: 1]
	float DEFAULT_WAIT_DURATION;//[Offset: 0x65c, Size: 1]
	void DisplayWeaponMasteryToast(SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetFormattedNameDisplay_ReturnValue);// 0x2d74e00
	void DisplayEventMissionToast(GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, KSEventChallengesManager* CallFunc_GetEventChallengesManager_ReturnValue, bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsPremiumChallenge_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetFormattedNameDisplay_ReturnValue);// 0x2d74e00
	void DisplayPlayerLevelUp(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Format_ReturnValue);// 0x2d74e00
	void DisplayBoostActivation(bool CallFunc_IsValid_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, const GameplayTagContainer CallFunc_GetCollectionContainer_ReturnValue, FText CallFunc_GetItemName_ReturnValue, SlateColor CallFunc_GetRarityHighlightColorByTag_RarityColor, SlateColor CallFunc_GetRarityColorByTag_RarityColor, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetName_ReturnValue);// 0x2d74e00
	void DisplayBattlePassUnlock(FText CallFunc_GetItemName_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemDescription_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlatformInventoryItem* CallFunc_GetInventoryItem_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, PlatformInventoryItem* K2Node_DynamicCast_AsPlatform_Inventory_Item, bool K2Node_DynamicCast_bSuccess, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemName_ReturnValue, FText CallFunc_GetItemType_ItemType);// 0x2d74e00
	void DisplayAwardUnlock(FText CallFunc_GetItemName_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemDescription_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, PlatformInventoryItem* CallFunc_GetInventoryItem_ReturnValue, Object* CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue, PlatformInventoryItem* K2Node_DynamicCast_AsPlatform_Inventory_Item, bool K2Node_DynamicCast_bSuccess, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemName_ReturnValue, FText CallFunc_GetItemType_ItemType);// 0x2d74e00
	void DisplayItemUnlock(SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetItemName_ReturnValue, FText CallFunc_GetItemType_ItemType);// 0x2d74e00
	void DisplayMercMasteryLevelUp(FormatArgumentData K2Node_MakeStruct_FormatArgumentData, KSJobItem* K2Node_DynamicCast_AsKSJob_Item, bool K2Node_DynamicCast_bSuccess, FText CallFunc_GetItemName_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2d74e00
	void DisplayChallengeAchievement(bool CallFunc_GetColorByName_HasFound, LinearColor CallFunc_GetColorByName_Color, GameplayTag CallFunc_MakeLiteralGameplayTag_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_MatchesTag_ReturnValue, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, FText CallFunc_GetFormattedNameDisplay_ReturnValue);// 0x2d74e00
	void OnOutroFinished();// 0x2d74e00
	void OnWaitingFinished(const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2d74e00
	void OnIntroFinished(delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_SafeDivide_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2d74e00
	void SetRarityTint(LinearColor RarityBase, LinearColor RarityHighlight);// 0x2d74e00
	void Construct();// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void ExecuteUbergraph_WBP_Toast2(int EntryPoint, bool Temp_bool_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, bool K2Node_Event_IsDesignTime, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, AkAudioEvent* K2Node_Select_Default, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue);// 0x2d74e00
	void FinishedOutroAnimation__DelegateSignature();// 0x2d74e00
	void OnRemoveToastNotification__DelegateSignature(KSWidget* ToastWidget);// 0x2d74e00

--------------------------------
Class: WBP_RogueMasteryPortrait_C.UserWidget.Widget.Visual.Object
	KSAsyncImage* JobIcon;//[Offset: 0x238, Size: 1]
	Image* MasteryBorder_1to4;//[Offset: 0x240, Size: 1]
	Image* MasteryBorder_5to9;//[Offset: 0x248, Size: 1]
	Image* MasteryBorder_Max;//[Offset: 0x250, Size: 1]
	WidgetSwitcher* MasteryFrameSwitcher;//[Offset: 0x258, Size: 1]
	WBP_RogueMasteryIcon_C* MasteryIcon;//[Offset: 0x260, Size: 1]
	KSPlayerState* PlayerOwner;//[Offset: 0x268, Size: 1]
	KSJobItem* JobItem;//[Offset: 0x270, Size: 1]
	KSPersistentPlayerData* PersistentPlayerOwner;//[Offset: 0x278, Size: 1]
	void Has Player Owner(out bool Return Value, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2d74e00
	void GetOwnerJobMasteryLevel(out int Mastery Level, int CallFunc_GetJobMasteryLevel_ReturnValue, bool CallFunc_IsValid_ReturnValue, int CallFunc_GetJobMasteryLevel_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void GetOwnerJob(out KSJobItem* Job, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void MatchesBoundPlayer(KSPlayerState* PlayerState, KSPersistentPlayerData* PersistentData, out bool Return Value, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_EqualEqual_ObjectObject_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2d74e00
	void ClearPreviousOwner(delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void SetPersistentPlayerOwner(KSPersistentPlayerData* PlayerData, bool CallFunc_MatchesBoundPlayer_Return_Value, bool CallFunc_Not_PreBool_ReturnValue, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue);// 0x2d74e00
	void SetMasteryLevelExplicit(int MasteryLevel);// 0x2d74e00
	void SetMasteryFrameToLevel(int MasteryLevel, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_GreaterEqual_IntInt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_Variable, bool Temp_bool_Variable, Widget* K2Node_Select_Default, Widget* K2Node_Select_Default);// 0x2d74e00
	void OnJobMasteryLevelUpdated(int CallFunc_GetOwnerJobMasteryLevel_Mastery_Level, KSJobItem* CallFunc_GetOwnerJob_Job, bool CallFunc_IsValid_ReturnValue, KSActivityInstance* CallFunc_GetJobMasteryActivityInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Has_Player_Owner_Return_Value);// 0x2d74e00
	void SetJobPortraitFromSoftTexture(Texture2D* SoftTexture);// 0x2d74e00
	void Set Mastery Frame(bool CallFunc_IsValid_ReturnValue, KSActivityInstance* CallFunc_GetJobMasteryActivityInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, ActivityTier CallFunc_GetProgressTier_ReturnValue);// 0x2d74e00
	void SetPlayerOwner(KSPlayerState* PlayerState, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_MatchesBoundPlayer_Return_Value, bool CallFunc_IsValid_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, KSJobItem* CallFunc_GetJob_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue);// 0x2d74e00
	void SetJobInformation(KSJobItem* JobItem, Texture2D* CallFunc_GetSoftJobDiamondPortrait_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00

--------------------------------
Class: WBP_RogueMasteryIcon_C.UserWidget.Widget.Visual.Object
	Image* background;//[Offset: 0x238, Size: 1]
	WidgetSwitcher* BadgeSwitcher;//[Offset: 0x240, Size: 1]
	TextBlock* MasteryLevel;//[Offset: 0x248, Size: 1]
	Image* MaxMastery;//[Offset: 0x250, Size: 1]
	SizeBox* MaxMasteryWrapper;//[Offset: 0x258, Size: 1]
	Overlay* RegularMastery;//[Offset: 0x260, Size: 1]
	void SetMasteryLevelExplicit(int CurrentLevel, bool CallFunc_GreaterEqual_IntInt_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool Temp_bool_Variable, Widget* K2Node_Select_Default);// 0x2d74e00
	void SetMasteryLevelForJob(KSJobItem* JobItem, KSActivityInstance* CallFunc_GetJobMasteryActivityInstance_ReturnValue, int CallFunc_GetCurrentRogueMasteryLevel_MasteryLevel, int CallFunc_GetCurrentRogueMasteryLevel_CurrentXPProgress, int CallFunc_GetCurrentRogueMasteryLevel_XPRequiredForLevel, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00

--------------------------------
Class: WBP_ToastNotifcation_Entry_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* OffsetY;//[Offset: 0x530, Size: 1]
	WidgetAnimation* Outro;//[Offset: 0x538, Size: 1]
	WidgetAnimation* Wait;//[Offset: 0x540, Size: 1]
	WidgetAnimation* Intro;//[Offset: 0x548, Size: 1]
	Image* AnimFade;//[Offset: 0x550, Size: 1]
	Image* AnimSwatch;//[Offset: 0x558, Size: 1]
	Image* ColorSwatch;//[Offset: 0x560, Size: 1]
	Image* Glow;//[Offset: 0x568, Size: 1]
	Image* Icon;//[Offset: 0x570, Size: 1]
	TextBlock* Message;//[Offset: 0x578, Size: 1]
	ToastData ToastData;//[Offset: 0x580, Size: 1]
	MulticastInlineDelegateProperty OnRemoveToastNotification;//[Size: 1]
	MulticastInlineDelegateProperty FinishedIntroAnimation;//[Size: 1]
	AkAudioEvent* SFXErrorToast;//[Offset: 0x5f8, Size: 1]
	AkAudioEvent* SFXFriendToast;//[Offset: 0x600, Size: 1]
	AkAudioEvent* SFXInfoToast;//[Offset: 0x608, Size: 1]
	AkAudioEvent* SFXPartyToast;//[Offset: 0x610, Size: 1]
	AkAudioEvent* SFXBoostActivationToast;//[Offset: 0x618, Size: 1]
	void SetViewStyle(enum ToastCategory, bool K2Node_SwitchEnum_CmpSuccess, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor, SlateColor K2Node_MakeStruct_SlateColor);// 0x2d74e00
	void PlayOutroAnimation();// 0x2d74e00
	void HandleOutroAnimFinished();// 0x2d74e00
	void PlayWaitAnimation();// 0x2d74e00
	void Construct();// 0x2d74e00
	void ExecuteUbergraph_WBP_ToastNotifcation_Entry(int EntryPoint, enum Temp_byte_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, AkAudioEvent* Temp_object_Variable, const delegate Temp_delegate_Variable, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, AkAudioEvent* K2Node_Select_Default, int CallFunc_PostEvent_ReturnValue);// 0x2d74e00
	void FinishedIntroAnimation__DelegateSignature();// 0x2d74e00
	void OnRemoveToastNotification__DelegateSignature(KSWidget* ToastWidget);// 0x2d74e00

--------------------------------
Class: WBP_ActiveBoosterShelf_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* Hover;//[Offset: 0x530, Size: 1]
	HorizontalBox* ActiveBoostContainer;//[Offset: 0x538, Size: 1]
	Image* Bottom;//[Offset: 0x540, Size: 1]
	Button* HitTarget;//[Offset: 0x548, Size: 1]
	Image* Middle;//[Offset: 0x550, Size: 1]
	CanvasPanel* Root;//[Offset: 0x558, Size: 1]
	Image* Top;//[Offset: 0x560, Size: 1]
	WBP_ActiveBoosterEntry_C* WBP_ActiveBoosterEntry;//[Offset: 0x568, Size: 1]
	WBP_ActiveBoosterEntry_C* WBP_ActiveBoosterEntry;//[Offset: 0x570, Size: 1]
	WBP_ActiveBoosterEntry_C* WBP_ActiveBoosterEntry;//[Offset: 0x578, Size: 1]
	void RefreshActiveBoosts(WBP_ActiveBoosterEntry_C* CallFunc_Create_ReturnValue, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, enum Temp_byte_Variable, bool CallFunc_HasAnyChildren_ReturnValue, enum Temp_byte_Variable, HorizontalBoxSlot* CallFunc_AddChildToHorizontalBox_ReturnValue, bool Temp_bool_Variable, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, enum K2Node_Select_Default, KSStoreItemHelper* CallFunc_GetItemHelper_ReturnValue, AccountConsumableDetails[] CallFunc_GetActiveBoosts_ReturnValue, AccountConsumableDetails CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue);// 0x2d74e00
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2d74e00
	void OnShown();// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void OnAcquisition(KSAcquisition* Acquisition);// 0x2d74e00
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x2d74e00
	void BndEvt__HitTarget_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x2d74e00
	void ExecuteUbergraph_WBP_ActiveBoosterShelf(int EntryPoint, float CallFunc_GetAnimationCurrentTime_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, BP_BrightLobbyHUD_C* K2Node_DynamicCast_AsBP_Bright_Lobby_HUD, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Add_View_Route_ViewChanged, PUMG_HUD* K2Node_Event_hud, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSAcquisitionManager* CallFunc_GetAcquisitionManager_ReturnValue, KSAcquisition* K2Node_CustomEvent_Acquisition, bool CallFunc_EqualEqual_ByteByte_ReturnValue, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, float CallFunc_GetAnimationCurrentTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2d74e00

--------------------------------
Class: WBP_ActiveBoosterEntry_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* GlowPulse;//[Offset: 0x240, Size: 1]
	Image* BGGradient;//[Offset: 0x248, Size: 1]
	WBP_AsyncIcon_C* BonusIcon;//[Offset: 0x250, Size: 1]
	VerticalBox* BoostDescriptionContainer;//[Offset: 0x258, Size: 1]
	SizeBox* BoosterIconSize;//[Offset: 0x260, Size: 1]
	Image* BoosterShine;//[Offset: 0x268, Size: 1]
	RichTextBlock* DescRichText;//[Offset: 0x270, Size: 1]
	TextBlock* EventName;//[Offset: 0x278, Size: 1]
	TextBlock* EventTimeRemaining;//[Offset: 0x280, Size: 1]
	Image* TimeRemainingIcon;//[Offset: 0x288, Size: 1]
	SizeBox* TimeRemainingIconWrapper;//[Offset: 0x290, Size: 1]
	bool isCompactView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298, Size: 1]
	void FormatForRankedBoost(int ItemQuantity, out FText DisplayText, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2d74e00
	void FormatForGlobalBoost(int ItemQuantity, out FText DisplayText, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_FCeil_ReturnValue, Timespan CallFunc_MakeTimespan_ReturnValue, FText CallFunc_GetFormattedTimeSpan_Text);// 0x2d74e00
	void SetDisplayType(Margin K2Node_MakeStruct_Margin, Margin K2Node_MakeStruct_Margin, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, HorizontalBoxSlot* CallFunc_SlotAsHorizontalBoxSlot_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void Construct();// 0x2d74e00
	void Set Item Properties(AccountConsumableDetails Item Details);// 0x2d74e00
	void ExecuteUbergraph_WBP_ActiveBoosterEntry(int EntryPoint, enum Temp_byte_Variable, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool K2Node_Event_IsDesignTime, AccountConsumableDetails K2Node_CustomEvent_Item_Details, FText CallFunc_FormatForRankedBoost_DisplayText, FText CallFunc_FormatForGlobalBoost_DisplayText, SoftObjectPath CallFunc_GetSoftItemIconAsPath_ReturnValue, KSCurrency* K2Node_DynamicCast_AsKSCurrency, bool K2Node_DynamicCast_bSuccess, KSBoost* K2Node_DynamicCast_AsKSBoost, bool K2Node_DynamicCast_bSuccess, Texture2D* CallFunc_GetSoftCurrencySmallIcon_ReturnValue, FString CallFunc_Conv_SoftObjectReferenceToString_ReturnValue, SoftObjectPath CallFunc_MakeSoftObjectPath_ReturnValue, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, FText K2Node_Select_Default, FText CallFunc_GetItemDescription_ReturnValue, enum K2Node_Select_Default, FText CallFunc_GetItemName_ReturnValue, LinearColor Temp_struct_Variable, LinearColor Temp_struct_Variable, enum Temp_byte_Variable, SoftObjectPath K2Node_Select_Default, LinearColor K2Node_Select_Default);// 0x2d74e00

--------------------------------
Class: KSBoost.KSCurrency.KSItem.PlatformInventoryItem.PrimaryDataAsset.DataAsset.Object
	enum BoostCategory;//[Offset: 0x300, Size: 1]
	bool IsActiveBooster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x301, Size: 1]
	FString[] BonusProgressionKeys;//[Offset: 0x308, Size: 1]
	FText BoostCategoryText;//[Offset: 0x318, Size: 1]
	FText DurationCategoryText;//[Offset: 0x330, Size: 1]
	FText AcquisitionTitleText;//[Offset: 0x348, Size: 1]
	FText AcquisitionDescriptionText;//[Offset: 0x360, Size: 1]

--------------------------------
Class: WBP_Context_Bar_C.PUMG_ContextBar.PUMG_Widget.UserWidget.Widget.Visual.Object
	WidgetAnimation* MobileLayout;//[Offset: 0x528, Size: 1]
	Image* FooterBG;//[Offset: 0x530, Size: 1]
	Image* FooterBG;//[Offset: 0x538, Size: 1]
	bool CanCloseOnLogout();// 0x2d74e00

--------------------------------
Class: PUMG_ContextBar.PUMG_Widget.UserWidget.Widget.Visual.Object
	class PUMG_ContextBarPrompt* PromptWidgetClass;//[Offset: 0x4c8, Size: 1]
	Margin LeftPromptMargin;//[Offset: 0x4d0, Size: 1]
	Margin CenterPromptMargin;//[Offset: 0x4e0, Size: 1]
	Margin RightPromptMargin;//[Offset: 0x4f0, Size: 1]
	HorizontalBox* LeftContainer;//[Offset: 0x500, Size: 1]
	HorizontalBox* CenterContainer;//[Offset: 0x508, Size: 1]
	HorizontalBox* RightContainer;//[Offset: 0x510, Size: 1]
	PUMG_ContextBarPrompt*[] PromptPool;//[Offset: 0x518, Size: 1]
	void RefreshContextBar();// 0xe830a0

--------------------------------
Class: PUMG_ContextBarPrompt.PUMG_Widget.UserWidget.Widget.Visual.Object
	ContextActionData* ContextActionData;//[Offset: 0x4c8, Size: 1]
	bool IsPoolable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d0, Size: 1]
	void OnInputStateChanged(byte InputState);// 0x2d74e00
	void OnContextActionUpdated(ContextActionData* InData);// 0x2d74e00
	void HandleInputStateChanged(byte InputState);// 0xe82c90
	ContextActionData* GetContextActionData();// 0xe827f0

--------------------------------
Class: WBP_QueueTimer_v2_C.KSQueueTimerWidgetBase.KSQueueWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x538, Size: 1]
	WidgetAnimation* Hover;//[Offset: 0x540, Size: 1]
	TextBlock* ButtonText;//[Offset: 0x548, Size: 1]
	Border* CancelBg;//[Offset: 0x550, Size: 1]
	HorizontalBox* CancelContainer;//[Offset: 0x558, Size: 1]
	Button* CancelQueueButton;//[Offset: 0x560, Size: 1]
	WBP_KeyCallout_C* CancelQueueGamepad;//[Offset: 0x568, Size: 1]
	Overlay* Container;//[Offset: 0x570, Size: 1]
	Border* ContentBkg;//[Offset: 0x578, Size: 1]
	HorizontalBox* HorizontalBox;//[Offset: 0x580, Size: 1]
	TextBlock* StatusLabel;//[Offset: 0x588, Size: 1]
	DataTable* ColorPalette;//[Offset: 0x590, Size: 1]
	KSQueueDataFactory* QueueDataFactory;//[Offset: 0x598, Size: 1]
	void UpdateCancelButton(enum Temp_byte_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum CallFunc_GetCurrentTimerState_ReturnValue, bool CallFunc_GetQueuePermissions_CanControl, bool CallFunc_GetQueuePermissions_CanQueue, bool K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, enum K2Node_Select_Default);// 0x2d74e00
	void SetNeutralLabel(FText InText);// 0x2d74e00
	void GetColorFromPalette(FName RowName, out LinearColor LinearColor, FString CallFunc_BuildString_Name_ReturnValue, ColorPaletteInfo CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue);// 0x2d74e00
	void UpdatePenaltyTime(bool Temp_bool_Variable, int CallFunc_GetQueueTime_PartHours_ReturnValue, int CallFunc_GetQueueTime_PartMins_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, int CallFunc_GetQueueTime_PartHours_ReturnValue, FText CallFunc_Format_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, LinearColor CallFunc_GetColorFromPalette_LinearColor, SlateColor K2Node_MakeStruct_SlateColor, int CallFunc_GetQueueTime_PartMins_ReturnValue, int CallFunc_GetQueueTime_PartSecs_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FText CallFunc_MakeLiteralText_ReturnValue, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue, FText K2Node_Select_Default);// 0x2d74e00
	void UpdateStatusLabel(enum CallFunc_GetCurrentTimerState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2d74e00
	void HandleInputStateChanged(byte InputState, bool Temp_bool_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void SetGamepadCallout(Key CallFunc_GetGamepadButtonForAction_Button, bool CallFunc_GetGamepadButtonForAction_ReturnValue);// 0x2d74e00
	void UpdateQueueTime(ClientQueueInfo CallFunc_GetCurrentCustomMatchInfo_InClientQueueInfo, bool CallFunc_GetCurrentCustomMatchInfo_ReturnValue, int CallFunc_GetQueueTime_PartSecs_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, int CallFunc_GetQueueTime_PartMins_ReturnValue, FText CallFunc_MakeLiteralText_ReturnValue, FText CallFunc_Conv_IntToText_ReturnValue, FormatArgumentData K2Node_MakeStruct_FormatArgumentData, FormatArgumentData[] K2Node_MakeArray_Array, FText CallFunc_Format_ReturnValue);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void CancelQueue();// 0x2d74e00
	void BndEvt__CancelQueueButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x2d74e00
	void BndEvt__CancelQueueButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x2d74e00
	void BndEvt__CancelQueueButton_K2Node_ComponentBoundEvent_5_OnButtonClickedEvent__DelegateSignature();// 0x2d74e00
	void OnUpdateQueueTime(float TimeSecs);// 0x2d74e00
	void OnUpdateQueueTimerState(enum State);// 0x2d74e00
	void OnControlQueuePermissionUpdate(bool CanControl);// 0x2d74e00
	void StartShowSequence(FName FromRoute, FName ToRoute);// 0x2d74e00
	void StartHideSequence(FName FromRoute, FName ToRoute);// 0x2d74e00
	void Construct();// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void ExecuteUbergraph_WBP_QueueTimer_v2(int EntryPoint, PUMG_HUD* K2Node_Event_hud, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, KSQueueDataFactory* CallFunc_GetKSQueueDataFactory_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, bool CallFunc_UIX_AttemptCancelQueue_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, float K2Node_Event_TimeSecs, enum K2Node_Event_State, bool K2Node_Event_CanControl, const delegate Temp_delegate_Variable, FName K2Node_Event_FromRoute, FName K2Node_Event_ToRoute, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, const delegate Temp_delegate_Variable, delegate K2Node_CreateDelegate_OutputDelegate, const AkExternalSourceInfo[] Temp_struct_Variable, int CallFunc_PostEvent_ReturnValue, FName K2Node_Event_FromRoute, FName K2Node_Event_ToRoute, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x2d74e00

--------------------------------
Class: KSQueueTimerWidgetBase.KSQueueWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void OnUpdateQueueTimerState(enum State);// 0x2d74e00
	void OnUpdateQueueTime(float TimeSecs);// 0x2d74e00
	float GetQueueTime_TotalSecs();// 0x29fcf50
	int GetQueueTime_PartSecs();// 0x29fcf10
	int GetQueueTime_PartMins();// 0x29fceb0
	int GetQueueTime_PartHours();// 0x29fce70
	enum GetCurrentTimerState();// 0x29f8050

--------------------------------
Class: KSQueueWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	void UpdateQueueSelection();// 0x27aee00
	void UpdateQueuePermissions();// 0x29fe720
	bool UIX_AttemptRejoinMatch();// 0x29fe5f0
	bool UIX_AttemptLeaveMatch();// 0x29fe5c0
	bool UIX_AttemptJoinSelectedQueue();// 0x29fe590
	bool UIX_AttemptCancelQueue();// 0x29fe560
	void SetupReadyForQueueing();// 0x29fe3f0
	void SetupBindings();// 0x29fe3b0
	bool SetCurrentlySelectedQueue(int QueueId);// 0x29fe0a0
	void ReceiveMatchStatusUpdate(enum CurrentMatchStatus);// 0x29fdfa0
	void OnSelectedQueueUpdate(ClientQueueInfo CurrentSelectedQueue);// 0x29fdce0
	void OnQueueStateUpdate(enum CurrentMatchStatus);// 0x29e8740
	void OnQueuePermissionUpdate(bool CanQueue);// 0x29fda30
	void OnControlQueuePermissionUpdate(bool CanControl);// 0x29fd960
	bool IsValidQueue(int QueueId);// 0x29fd700
	void HandleSelectedQueueIdSet();// 0x29fd5b0
	void HandlePartyMemberRemoved(int64 PartyMemberId);// 0x29fd530
	void HandlePartyMemberDataUpdated(PUMG_PartyMemberData PartyMember);// 0x29fd2d0
	void HandleMatchStatusUpdate(enum MatchStatus);// 0x29fd190
	void HandleConfirmLeaveQueue();// 0x29fd0f0
	QueueSection[] GetQueueSections(ClientQueueInfo[] ClientCachedQueueInfo);// 0x29fcbf0
	ClientQueueInfo[] GetQueues();// 0x29fd000
	void GetQueuePermissions(out bool CanControl, out bool CanQueue);// 0x29fcb10
	bool GetQueueInfoById(int QueueId, out ClientQueueInfo QueueInfo);// 0x29fc7b0
	KSQueueDataFactory* GetQueueDataFactory();// 0x29fc750
	KSPlayerDataFactory* GetPlayerDataFactory();// 0x29fc720
	PUMG_PartyDataFactory* GetPartyDataFactory();// 0x29fc6c0
	ClientQueueInfo GetCurrentlySelectedQueue();// 0x29fc0f0

--------------------------------
Class: ColorPaletteInfo.TableRowBase
	LinearColor LinearColor;//[Offset: 0x8, Size: 1]

--------------------------------
Class: QueueSection
	enum QueueSectionType;//[Offset: 0x0, Size: 1]
	ClientQueueInfo[] AssociatedQueues;//[Offset: 0x8, Size: 1]

--------------------------------
Class: Border.ContentWidget.PanelWidget.Widget.Visual.Object
	byte HorizontalAlignment;//[Offset: 0x128, Size: 1]
	byte VerticalAlignment;//[Offset: 0x129, Size: 1]
	bool bShowEffectWhenDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12a, Size: 1]
	LinearColor ContentColorAndOpacity;//[Offset: 0x12c, Size: 1]
	delegate ContentColorAndOpacityDelegate;//[Offset: 0x13c, Size: 1]
	Margin Padding;//[Offset: 0x14c, Size: 1]
	SlateBrush background;//[Offset: 0x160, Size: 1]
	delegate BackgroundDelegate;//[Offset: 0x1e8, Size: 1]
	LinearColor BrushColor;//[Offset: 0x1f8, Size: 1]
	delegate BrushColorDelegate;//[Offset: 0x208, Size: 1]
	Vector2D DesiredSizeScale;//[Offset: 0x218, Size: 1]
	bool bFlipForRightToLeftFlowDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 1]
	delegate OnMouseButtonDownEvent;//[Offset: 0x224, Size: 1]
	delegate OnMouseButtonUpEvent;//[Offset: 0x234, Size: 1]
	delegate OnMouseMoveEvent;//[Offset: 0x244, Size: 1]
	delegate OnMouseDoubleClickEvent;//[Offset: 0x254, Size: 1]
	void SetVerticalAlignment(byte InVerticalAlignment);// 0x3c0cd10
	void SetPadding(Margin InPadding);// 0x3c0c680
	void SetHorizontalAlignment(byte InHorizontalAlignment);// 0x3c0bf20
	void SetDesiredSizeScale(Vector2D InScale);// 0x3c0bda0
	void SetContentColorAndOpacity(LinearColor InContentColorAndOpacity);// 0x3c0bd20
	void SetBrushFromTexture(Texture2D* Texture);// 0x3c0bb20
	void SetBrushFromMaterial(MaterialInterface* Material);// 0x3c0baa0
	void SetBrushFromAsset(SlateBrushAsset* Asset);// 0x3c0ba20
	void SetBrushColor(LinearColor InBrushColor);// 0x3c0b9a0
	void SetBrush(out const SlateBrush InBrush);// 0x3c0b820
	MaterialInstanceDynamic* GetDynamicMaterial();// 0x3c0afd0

--------------------------------
Class: WBP_KeyCallout_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WBP_AsyncIcon_C* CalloutIcon;//[Offset: 0x240, Size: 1]
	Key Key;//[Offset: 0x248, Size: 1]
	FName KeyBind;//[Offset: 0x260, Size: 1]
	bool DisplayKeybind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 1]
	bool SecondaryKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x269, Size: 1]
	bool FallbackToDefaults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26a, Size: 1]
	bool GamepadDoubleTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26b, Size: 1]
	void SetKeybind(FName KeyBind);// 0x2d74e00
	void UpdateKeyDisplay(PlayerController* CallFunc_GetPlayerController_ReturnValue, Key CallFunc_GetKeyForBinding_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon, bool CallFunc_IsValid_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void SetKey(Key Key);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void ExecuteUbergraph_WBP_KeyCallout(int EntryPoint, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_Event_IsDesignTime, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess);// 0x2d74e00

--------------------------------
Class: WBP_RadialSelect_C.KSRadialSelectionWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x5c8, Size: 1]
	WidgetAnimation* WheelCycle_Left;//[Offset: 0x5d0, Size: 1]
	WidgetAnimation* WheelCycle_Generic;//[Offset: 0x5d8, Size: 1]
	WidgetAnimation* WheelCycle_Right;//[Offset: 0x5e0, Size: 1]
	WidgetAnimation* Show;//[Offset: 0x5e8, Size: 1]
	TextBlock* ActiveRadialMenuText;//[Offset: 0x5f0, Size: 1]
	Image* BGGradientLeft;//[Offset: 0x5f8, Size: 1]
	Image* BGGradientRight;//[Offset: 0x600, Size: 1]
	Image* BGImage;//[Offset: 0x608, Size: 1]
	BackgroundBlur* BlurVolume;//[Offset: 0x610, Size: 1]
	Image* CursorImg;//[Offset: 0x618, Size: 1]
	WBP_InputCallout_C* CycleLeftInputCallout;//[Offset: 0x620, Size: 1]
	HorizontalBox* CycleLeftPanel;//[Offset: 0x628, Size: 1]
	Overlay* CycleLeftPanelWrapper;//[Offset: 0x630, Size: 1]
	TextBlock* CycleLeftText;//[Offset: 0x638, Size: 1]
	WBP_InputCallout_C* CycleRightInputCallout;//[Offset: 0x640, Size: 1]
	HorizontalBox* CycleRightPanel;//[Offset: 0x648, Size: 1]
	Overlay* CycleRightPanelWrapper;//[Offset: 0x650, Size: 1]
	TextBlock* CycleRightText;//[Offset: 0x658, Size: 1]
	CanvasPanel* DividerContainer;//[Offset: 0x660, Size: 1]
	CanvasPanel* IconContainer;//[Offset: 0x668, Size: 1]
	Image* Image;//[Offset: 0x670, Size: 1]
	Image* Image;//[Offset: 0x678, Size: 1]
	Image* Image;//[Offset: 0x680, Size: 1]
	Image* Image;//[Offset: 0x688, Size: 1]
	TextBlock* RadialItemNameText;//[Offset: 0x690, Size: 1]
	SizeBox* RadialItemNameWrapper;//[Offset: 0x698, Size: 1]
	CanvasPanel* SelectorGroup;//[Offset: 0x6a0, Size: 1]
	HorizontalBox* SelectPrompt;//[Offset: 0x6a8, Size: 1]
	WBP_InputCallout_C* SelectPromptCallout;//[Offset: 0x6b0, Size: 1]
	WBP_InputCallout_C* ToggleBackInputCallout;//[Offset: 0x6b8, Size: 1]
	HorizontalBox* ToggleBackPrompt;//[Offset: 0x6c0, Size: 1]
	Border* TogglePromptContainer;//[Offset: 0x6c8, Size: 1]
	WBP_RadialMenuEntry_C* WBP_RadialMenuEntry;//[Offset: 0x6d0, Size: 1]
	WBP_RadialMenuEntry_C* WBP_RadialMenuEntry;//[Offset: 0x6d8, Size: 1]
	WBP_RadialMenuEntry_Divider_C* WBP_RadialMenuEntry_Divider;//[Offset: 0x6e0, Size: 1]
	WBP_RadialMenuHighlight_C* WBP_RadialMenuHighlight;//[Offset: 0x6e8, Size: 1]
	Image* WheelBg;//[Offset: 0x6f0, Size: 1]
	enum[] VisibleTextCosmeticSlots;//[Offset: 0x6f8, Size: 1]
	bool ActivatedItemSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x708, Size: 1]
	AkAudioEvent* CycleMenusSFX;//[Offset: 0x710, Size: 1]
	AkAudioEvent* HoverOptionsSFX;//[Offset: 0x718, Size: 1]
	AkAudioEvent* OpenMenusSFX;//[Offset: 0x720, Size: 1]
	AkAudioEvent* CloseMenusSFX;//[Offset: 0x728, Size: 1]
	WBP_InputCallout_C* HoldConfirmInputCallout;//[Offset: 0x730, Size: 1]
	AkAudioEvent* HoverOptionsRumbleSFX;//[Offset: 0x738, Size: 1]
	DataTable* ContextualPingTypesDT;//[Offset: 0x740, Size: 1]
	DataTable* ContextualPingMessagesDT;//[Offset: 0x748, Size: 1]
	void SetupSelectorForActivationMode(int CallFunc_Array_Length_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2d74e00
	void IsItemUsable(KSItem* KSItem, out bool Return Value, bool CallFunc_IsInEmoteOnlyMode_ReturnValue, bool CallFunc_IsValid_ReturnValue, const GameplayTagContainer CallFunc_GetCollectionContainer_ReturnValue, bool CallFunc_HasTag_ReturnValue);// 0x2d74e00
	void SetHoverForAllEntries(WBP_RadialMenuEntry_C* New Hovered Entry, int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Widget*[] CallFunc_GetAllChildren_ReturnValue, int CallFunc_Array_Length_ReturnValue, Widget* CallFunc_Array_Get_Item, bool CallFunc_Less_IntInt_ReturnValue, WBP_RadialMenuEntry_C* K2Node_DynamicCast_AsWBP_Radial_Menu_Entry, bool K2Node_DynamicCast_bSuccess, bool CallFunc_EqualEqual_ObjectObject_ReturnValue);// 0x2d74e00
	void GetRadialEntryByIndex(int Index, out WBP_RadialMenuEntry_C* Entry, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, bool CallFunc_Greater_IntInt_ReturnValue, WBP_RadialMenuEntry_C* K2Node_DynamicCast_AsWBP_Radial_Menu_Entry, bool K2Node_DynamicCast_bSuccess);// 0x2d74e00
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent, Key CallFunc_GetGamepadCancelButton_ReturnValue, Key CallFunc_GetKey_ReturnValue, Key CallFunc_GetGamepadConfirmButton_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, Key[] K2Node_MakeArray_Array, bool CallFunc_Array_Contains_ReturnValue, EventReply CallFunc_Handled_ReturnValue);// 0x2d74e00
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent, Key CallFunc_GetKey_ReturnValue, EventReply CallFunc_Handled_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue, bool CallFunc_BooleanOR_ReturnValue);// 0x2d74e00
	void GetRadialItemData(int Item Index, out KSItem* KSItem, bool CallFunc_IsLobbyHUD_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, GameplayTag[] CallFunc_GetGameplayTagsForCosmeticSlot_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, PlayerController* CallFunc_GetNormalOwningPlayer_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, KSEquipmentManagerComponent* CallFunc_GetEquipmentManagerComponent_ReturnValue, KSJobItem* CallFunc_GetPreferredJob_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSEquipment* CallFunc_GetEquipmentByEquipPoint_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSItem* CallFunc_GetKSItem_ReturnValue, KSMercManager* CallFunc_GetMercManager_ReturnValue, KSItem* CallFunc_GetEquippedCosmeticItemBySlot_CosmeticItem, bool CallFunc_GetEquippedCosmeticItemBySlot_ReturnValue);// 0x2d74e00
	bool NavigateConfirm(bool CallFunc_IsLobbyHUD_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue);// 0x2d74e00
	bool NavigateBack(bool CallFunc_IsLobbyHUD_ReturnValue);// 0x2d74e00
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent, bool CallFunc_IsLobbyHUD_ReturnValue, Key CallFunc_PointerEvent_GetEffectingButton_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, EventReply CallFunc_Handled_ReturnValue, EventReply CallFunc_Unhandled_ReturnValue);// 0x2d74e00
	void SetRadialItemName(int Index, enum Temp_byte_Variable, bool CallFunc_IsLobbyHUD_ReturnValue, enum Temp_byte_Variable, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, bool Temp_bool_Variable, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, FText CallFunc_MakeLiteralText_ReturnValue, KSLoadoutDataFactory* CallFunc_GetLoadoutDataFactory_ReturnValue, KSMercManager* CallFunc_GetMercManager_ReturnValue, KSJobItem* CallFunc_GetPreferredJob_ReturnValue, KSItem* CallFunc_GetEquippedCosmeticItemBySlot_CosmeticItem, bool CallFunc_GetEquippedCosmeticItemBySlot_ReturnValue, FText CallFunc_GetItemName_ReturnValue, PlayerController* CallFunc_GetNormalOwningPlayer_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, FText CallFunc_Get_Radial_Item_Name_from_Player_Controller_RadialItemName, bool CallFunc_EqualEqual_TextText_ReturnValue, enum K2Node_Select_Default);// 0x2d74e00
	void SetupInputCallout(WBP_InputCallout_C* InputCallout, PUMG_HUD* HUD, byte InputState);// 0x2d74e00
	bool IsSelectorVisible(bool CallFunc_IsVisible_ReturnValue);// 0x2d74e00
	void ShowRadialMenuCycle(bool Show);// 0x2d74e00
	void Get Radial Item Name from Player Controller(int Index, KSPlayerController* KSPlayerController, out FText RadialItemName, GameplayTag[] SelectedSlots, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, GameplayTag[] CallFunc_GetGameplayTagsForCosmeticSlot_ReturnValue, FText CallFunc_GetRadialItemNameByEquipPoint_ReturnValue);// 0x2d74e00
	void GetTextForCosmeticSlot(enum CosmeticSlot, out FText Text, bool K2Node_SwitchEnum_CmpSuccess);// 0x2d74e00
	void SetRadialMenuNames(enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, FText CallFunc_GetTextForCosmeticSlot_Text, enum CallFunc_GetContiguousCosmeticSlotMenu_ReturnValue, FText CallFunc_GetTextForCosmeticSlot_Text, enum CallFunc_GetContiguousCosmeticSlotMenu_ReturnValue, FText CallFunc_GetTextForCosmeticSlot_Text);// 0x2d74e00
	float GetDeadZone(bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, byte CallFunc_GetCurrentInputState_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, float K2Node_Select_Default);// 0x2d74e00
	void RefreshOptions(WBP_RadialMenuEntry_C* CreatedRadialEntryWidget, KSItem* FoundRadialEntryItem, bool UseQuipSettings, bool UseContextualPingSettings, bool ShouldShowSmallText, GameplayTag[] CosmeticSlots, KSQuip* K2Node_DynamicCast_AsKSQuip, bool K2Node_DynamicCast_bSuccess, KSCommunication* K2Node_DynamicCast_AsKSCommunication, bool K2Node_DynamicCast_bSuccess, LinearColor CallFunc_GetPingColorByType_PingColor, bool CallFunc_GetPingColorByType_ReturnValue, Texture2D* CallFunc_GetPingIconByMessage_PingIcon, bool CallFunc_GetPingIconByMessage_ReturnValue, int Temp_int_Loop_Counter_Variable, int Temp_int_Array_Index_Variable, int CallFunc_Add_IntInt_ReturnValue, KSItem* CallFunc_GetRadialItemData_KSItem, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsItemUsable_Return_Value, bool CallFunc_Not_PreBool_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, int CallFunc_Array_Length_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool Temp_bool_Variable, int CallFunc_GetOptionsCount_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, int CallFunc_GetOptionsCount_ReturnValue, float CallFunc_Multiply_IntFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, WBP_RadialMenuEntry_Divider_C* CallFunc_Create_ReturnValue, int CallFunc_GetOptionsCount_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, float CallFunc_Divide_FloatFloat_ReturnValue, WBP_RadialMenuEntry_C* CallFunc_Create_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, Anchors K2Node_MakeStruct_Anchors, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, Texture2D* Temp_softobject_Variable, LinearColor K2Node_Select_Default, Texture2D* K2Node_Select_Default, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue, CanvasPanelSlot* CallFunc_AddChildToCanvas_ReturnValue);// 0x2d74e00
	int GetOptionsCount(int Slots, enum CallFunc_GetActiveCosmeticSlotMenu_ReturnValue, GameplayTag[] CallFunc_GetGameplayTagsForCosmeticSlot_ReturnValue, int CallFunc_Array_Length_ReturnValue);// 0x2d74e00
	float GetWheelSize(float CallFunc_GetUMG_DPI_Scaling_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void HideSelector();// 0x2d74e00
	void ShowSelector();// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void RadialOptionUnhover();// 0x2d74e00
	void RadialOptionSelected(int Index);// 0x2d74e00
	void RadialOptionHovered(int Index);// 0x2d74e00
	void TraceSelectionCursor(float Radius, float Angle);// 0x2d74e00
	void Handle Equipment Change(KSEquipment* AddedEquipment);// 0x2d74e00
	void ChangeToNewRadialMenu();// 0x2d74e00
	void OnCycledMenus(bool bCycledRight);// 0x2d74e00
	void SetupForRadialWheelMode();// 0x2d74e00
	void InitializeWidgetNavigation();// 0x2d74e00
	void Handle View State Changed(FName CurrentRoute, FName PreviousRoute, enum Layer);// 0x2d74e00
	void NetMulticast_PlayCinematicEmote(KSLobbyCharacter* Character, KSEmote* Emote);// 0x2d74e00
	void Server_PlayCinematicEmote(KSLobbyCharacter* Character, KSEmote* Emote);// 0x2d74e00
	void ExecuteUbergraph_WBP_RadialSelect(int EntryPoint, const AkExternalSourceInfo[] Temp_struct_Variable, int K2Node_Event_Index, int K2Node_Event_Index, KSItem* CallFunc_GetRadialItemData_KSItem, KSItem* CallFunc_GetRadialItemData_KSItem, bool CallFunc_IsItemUsable_Return_Value, bool CallFunc_IsItemUsable_Return_Value, KSEmote* K2Node_DynamicCast_AsKSEmote, bool K2Node_DynamicCast_bSuccess, WBP_RadialMenuEntry_C* CallFunc_GetRadialEntryByIndex_Entry, float CallFunc_Conv_IntToFloat_ReturnValue, KSItem* CallFunc_GetRadialItemData_KSItem, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_IsItemUsable_Return_Value, KSEmote* K2Node_DynamicCast_AsKSEmote, bool K2Node_DynamicCast_bSuccess, int CallFunc_GetOptionsCount_ReturnValue, float K2Node_Event_Radius, float K2Node_Event_Angle, float CallFunc_Conv_IntToFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_GetDeadZone_ReturnValue, PlayerController* CallFunc_GetNormalOwningPlayer_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, float CallFunc_FClamp_ReturnValue, bool CallFunc_ActivateRadialMenuItem_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, Vector2D CallFunc_GetRotated2D_ReturnValue, KSEquipment* K2Node_CustomEvent_AddedEquipment, PUMG_HUD* K2Node_Event_hud, byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_Event_IsDesignTime, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, bool K2Node_Event_bCycledRight, const delegate Temp_delegate_Variable, bool K2Node_SwitchEnum_CmpSuccess, int CallFunc_GetLastHoveredIndex_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, Widget* CallFunc_SetFocusToThis_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const AkExternalSourceInfo[] Temp_struct_Variable, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, KSPartyDataFactory* CallFunc_GetPartyDataFactory_ReturnValue, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue, bool CallFunc_IsLobbyHUD_ReturnValue, PlayerController* CallFunc_GetLocalPlayerController_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, const AkExternalSourceInfo[] Temp_struct_Variable, byte CallFunc_GetCurrentInputState_ReturnValue, FName K2Node_CustomEvent_CurrentRoute, FName K2Node_CustomEvent_PreviousRoute, enum K2Node_CustomEvent_Layer, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_IsSelectorActive_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, const delegate Temp_delegate_Variable, PlayerController* CallFunc_GetNormalOwningPlayer_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, int CallFunc_PostEvent_ReturnValue, KSEquipmentManagerComponent* CallFunc_GetEquipmentManagerComponent_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, const delegate Temp_delegate_Variable, const AkExternalSourceInfo[] Temp_struct_Variable, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, int CallFunc_PostEvent_ReturnValue, KSPlayerController* K2Node_DynamicCast_AsKSPlayer_Controller, bool K2Node_DynamicCast_bSuccess, KSLobbyCharacter* K2Node_CustomEvent_Character, KSEmote* K2Node_CustomEvent_Emote, KSLobbyCharacter* K2Node_CustomEvent_Character, KSEmote* K2Node_CustomEvent_Emote, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue);// 0x2d74e00

--------------------------------
Class: KSRadialSelectionWidgetBase.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	GameplayTag[] EmoteSlots;//[Offset: 0x528, Size: 1]
	GameplayTag[] QuipSlots;//[Offset: 0x538, Size: 1]
	GameplayTag[] CommunicationSlots;//[Offset: 0x548, Size: 1]
	GameplayTag[] SpraySlots;//[Offset: 0x558, Size: 1]
	FName[] AdditionalInputsToDisableOnOpen;//[Offset: 0x568, Size: 1]
	enum[] RadialMenuCosmeticSlots;//[Offset: 0x578, Size: 1]
	bool bCycleBetweenMenusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	bool bCanOpenWheelInMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x589, Size: 1]
	enum RadialWheelActivationMode;//[Offset: 0x591, Size: 1]
	void UpdateLastSelectedIndex(int NewIndex);// 0x29fe6a0
	void UpdateLastHoveredIndex(int NewHoveredIndex);// 0x29fe620
	void TraceSelectionCursor(float Radius, float Angle);// 0x2d74e00
	void ShowSelector();// 0x2d74e00
	void SetupForRadialWheelMode();// 0x29cc9e0
	void RadialOptionUnhover();// 0x2d74e00
	void RadialOptionSelected(int Index);// 0x2d74e00
	void RadialOptionHovered(int Index);// 0x2d74e00
	void OpenSpecifiedRadialMenu(enum CosmeticSlot);// 0x29fde40
	void OnRadialMenuUseLastSelection(enum ButtonCosmeticSlot);// 0x29fdc60
	void OnRadialMenuReleased(enum ButtonCosmeticSlot, bool bIsContextualPingHold);// 0x29fdb90
	void OnRadialMenuPressed(enum ButtonCosmeticSlot, bool bIsContextualPingHold);// 0x29fdac0
	void OnRadialMenuForceClosed();// 0x29fbe90
	void OnCycleMenusRight();// 0x29fda10
	void OnCycleMenusLeft();// 0x29fd9f0
	void OnCycledMenus(bool bCycledRight);// 0x29ba180
	void OnCinematicSubLevelEnabled(FString CinematicSubLevelName);// 0x29fd8c0
	void OnCinematicSubLevelDisabled(FString CinematicSubLevelName);// 0x29fd820
	bool IsSelectorVisible();// 0x2d74e00
	bool IsSelectorActive();// 0x29fd6d0
	bool IsLobbyHUD();// 0x29fd680
	bool IsInFullControlMode();// 0x29fd650
	bool IsInEmoteOnlyMode();// 0x29fd620
	bool IsCycleBetweenMenusEnabled();// 0x29fd5f0
	void InitializeTracking();// 0x29fd5d0
	void HideSelector();// 0x2d74e00
	void HandleOnShowPopup();// 0x29fbe90
	void HandleInputStateChanged(byte NewInputState);// 0x29fd110
	float GetWheelSize();// 0x2d74e00
	enum GetRadialWheelActivationMode();// 0x29fd0a0
	int GetOptionsCount();// 0x2d74e00
	int GetLastSelectedIndexForCosmeticSlot(enum CosmeticSlot);// 0x29fc550
	int GetLastHoveredIndex();// 0x29fc520
	enum GetInitialRadialMenu();// 0x29fc4f0
	GameplayTag[] GetGameplayTagsForCosmeticSlot(enum CosmeticSlot);// 0x29fc420
	float GetDeadZone();// 0x2d74e00
	enum GetContiguousCosmeticSlotMenu(bool bRightSide);// 0x29fc060
	enum GetActiveCosmeticSlotMenu();// 0x29fc030
	void DummyFunction();// 0xd94a20
	void ChangeToNewRadialMenu();// 0x2d74e00
	void ButtonClicked();// 0x29fbeb0
	void BackPressed();// 0x29fbe90
	bool ActivateRadialMenuItem(int Index, KSPlayerController* PlayerController);// 0x29fbdd0

--------------------------------
Class: WBP_RadialMenuEntry_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	TextBlock* BigItemNameText;//[Offset: 0x240, Size: 1]
	Image* DisabledIcon;//[Offset: 0x248, Size: 1]
	WidgetSwitcher* DisplayTypeSwitcher;//[Offset: 0x250, Size: 1]
	Overlay* HoverOverlay;//[Offset: 0x258, Size: 1]
	TextBlock* ItemNameText;//[Offset: 0x260, Size: 1]
	WBP_AsyncIcon_C* WBP_AsyncIcon;//[Offset: 0x268, Size: 1]
	void SetHoverOverlay(bool IsShowingHover, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void SetDisabled(bool IsDisabled, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default, float Temp_float_Variable, float Temp_float_Variable, LinearColor Temp_struct_Variable, float K2Node_Select_Default, LinearColor Temp_struct_Variable, bool Temp_bool_Variable, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, LinearColor K2Node_Select_Default, SlateColor K2Node_MakeStruct_SlateColor, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void ShowBigTextInsteadOfIcon(bool ShowBigText);// 0x2d74e00
	void SetEmpty();// 0x2d74e00
	void SetIconColor(LinearColor LinearColor);// 0x2d74e00
	void SetIconFromSoftTexture(Texture2D* Texture);// 0x2d74e00
	void Set IconAndName(KSItem* Item, bool ShowSmallText, FText CallFunc_GetItemName_ReturnValue);// 0x2d74e00
	void SetRotation(float Angle, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x2d74e00
	void OnInitialized();// 0x2d74e00
	void ExecuteUbergraph_WBP_RadialMenuEntry(int EntryPoint, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00

--------------------------------
Class: WBP_InputCallout_C.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x4c8, Size: 1]
	TextBlock* ComboText;//[Offset: 0x4d0, Size: 1]
	Image* MeterBkg;//[Offset: 0x4d8, Size: 1]
	SizeBox* PrimaryBox;//[Offset: 0x4e0, Size: 1]
	WBP_KeyCallout_C* PrimaryImage;//[Offset: 0x4e8, Size: 1]
	TextBlock* PrimaryPrompt;//[Offset: 0x4f0, Size: 1]
	WidgetSwitcher* PrimarySwitcher;//[Offset: 0x4f8, Size: 1]
	Image* ProgressCircle;//[Offset: 0x500, Size: 1]
	SizeBox* SecondaryBox;//[Offset: 0x508, Size: 1]
	WBP_KeyCallout_C* SecondaryImage;//[Offset: 0x510, Size: 1]
	TextBlock* SecondaryPrompt;//[Offset: 0x518, Size: 1]
	WidgetSwitcher* SecondarySwitcher;//[Offset: 0x520, Size: 1]
	FName[] ActionNames;//[Offset: 0x528, Size: 1]
	FName KBM_Name;//[Offset: 0x538, Size: 1]
	FName GP_Name;//[Offset: 0x540, Size: 1]
	FName M_Name;//[Offset: 0x548, Size: 1]
	bool IsGamepadDoubleTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 1]
	Key SecondaryKey;//[Offset: 0x558, Size: 1]
	Key PrimaryKey;//[Offset: 0x570, Size: 1]
	bool bFallbackToDefaultInputs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x588, Size: 1]
	void PropogateDefaultSettings();// 0x2d74e00
	void GetActionKeys(KSSettingsDataFactory* KSSettingsDataFactory, FName Name, byte InputType, out Key PrimaryButton, out Key SecondaryButton, bool bFoundCustomInputs, Key OutButton2, Key OutButton1, Key[] ActionKeys, Key CallFunc_GetGamepadConfirmButton_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, Key CallFunc_GetGamepadCancelButton_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Array_IsValidIndex_ReturnValue, bool CallFunc_Key_IsGamepadKey_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, byte Temp_byte_Variable, enum K2Node_Select_Default, bool CallFunc_BooleanAND_ReturnValue, Key[] CallFunc_GetDefaultInputActionKeys_OutKeys, Key[] CallFunc_GetCustomInputActionKeys_OutKeys);// 0x2d74e00
	void UpdateComboIndicator(bool Temp_bool_Variable, byte Temp_byte_Variable, byte Temp_byte_Variable, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, FText Temp_text_Variable, bool Temp_bool_Variable, FText Temp_text_Variable, Key K2Node_MakeStruct_Key, bool CallFunc_EqualEqual_KeyKey_ReturnValue, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, byte K2Node_Select_Default, enum K2Node_Select_Default, OverlaySlot* CallFunc_SlotAsOverlaySlot_ReturnValue, bool CallFunc_EqualEqual_KeyKey_ReturnValue, bool CallFunc_Key_IsGamepadKey_ReturnValue, FText K2Node_Select_Default, FText K2Node_Select_Default);// 0x2d74e00
	void IsValidActionNameForCurrentInput(FName Name, out bool Valid, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x2d74e00
	void ResetHoldProgress(MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2d74e00
	void SetHoldProgress(float HoldProgress, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2d74e00
	void SetSecondaryKey(Key Button, Texture2D* CallFunc_GetIconForGamepadButton_Icon, FText CallFunc_Key_GetDisplayName_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void SetPrimaryKey(Key Button, FText CallFunc_Key_GetDisplayName_ReturnValue, Texture2D* CallFunc_GetIconForGamepadButton_Icon, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void OnKeyBindSettingChanged(FName KeyBindName);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void ModeChange(byte InputState);// 0x2d74e00
	void SetActionName(FName KeyBoardAction, FName GamepadAction, FName MobileAction);// 0x2d74e00
	void RemoveActionName(FName Action);// 0x2d74e00
	void ClearAllActionName();// 0x2d74e00
	void ExecuteUbergraph_WBP_InputCallout(int EntryPoint, byte K2Node_CustomEvent_InputState, delegate K2Node_CreateDelegate_OutputDelegate, bool K2Node_SwitchEnum_CmpSuccess, FName K2Node_CustomEvent_KeyBoardAction, FName K2Node_CustomEvent_GamepadAction, FName K2Node_CustomEvent_MobileAction, FName K2Node_CustomEvent_Action, Key K2Node_MakeStruct_Key, PUMG_HUD* K2Node_Event_hud, KSHUDCommon* K2Node_DynamicCast_AsKSHUDCommon, bool K2Node_DynamicCast_bSuccess, byte CallFunc_GetCurrentInputState_ReturnValue, KSSettingsDataFactory* CallFunc_GetSettingsDataFactory_ReturnValue, FName K2Node_CustomEvent_KeyBindName, bool CallFunc_IsValidActionNameForCurrentInput_Valid, byte CallFunc_GetCurrentInputState_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, bool Temp_bool_Variable, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_NotEqual_NameName_ReturnValue, enum Temp_byte_Variable, bool CallFunc_NotEqual_NameName_ReturnValue, enum Temp_byte_Variable, PlayerController* CallFunc_GetPlayerController_ReturnValue, Key CallFunc_GetKeyForBinding_ReturnValue, bool CallFunc_Key_IsValid_ReturnValue, PlayerController* CallFunc_GetPlayerController_ReturnValue, Key CallFunc_GetKeyForBinding_ReturnValue, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, KSHUDCommon* CallFunc_GetHUDCommon_HUD_Common, byte CallFunc_GetCurrentInputState_ReturnValue, enum Temp_byte_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, Key CallFunc_GetButtonForActionMapping_Button, bool CallFunc_GetButtonForActionMapping_ReturnValue, byte Temp_byte_Variable, Key K2Node_Select_Default, enum K2Node_Select_Default);// 0x2d74e00

--------------------------------
Class: WBP_RadialMenuEntry_Divider_C.UserWidget.Widget.Visual.Object
	Image* Image;//[Offset: 0x238, Size: 1]

--------------------------------
Class: WBP_RadialMenuHighlight_C.UserWidget.Widget.Visual.Object
	WBP_RadialMenuEntry_Divider_Highlight_C* DividerLeft;//[Offset: 0x238, Size: 1]
	WBP_RadialMenuEntry_Divider_Highlight_C* DividerRight;//[Offset: 0x240, Size: 1]
	Image* Highlight;//[Offset: 0x248, Size: 1]
	void SetDisabledAppearance(bool IsDisabled, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, float K2Node_Select_Default, MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2d74e00
	MaterialInstanceDynamic* GetHighlightMat(MaterialInstanceDynamic* CallFunc_GetDynamicMaterial_ReturnValue);// 0x2d74e00
	void SetPosition(float Position, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, MaterialInstanceDynamic* CallFunc_GetHighlightMat_ReturnValue, float CallFunc_K2_GetScalarParameterValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x2d74e00
	void SetWidth(float Width, MaterialInstanceDynamic* CallFunc_GetHighlightMat_ReturnValue, float CallFunc_K2_GetScalarParameterValue_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue);// 0x2d74e00

--------------------------------
Class: WBP_RadialMenuEntry_Divider_Highlight_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WBP_AsyncIcon_C* WBP_AsyncIcon;//[Offset: 0x240, Size: 1]
	void SetDisabledAppearance(bool IsDisabled, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, float K2Node_Select_Default, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void OnInitialized();// 0x2d74e00
	void ExecuteUbergraph_WBP_RadialMenuEntry_Divider_Highlight(int EntryPoint, MaterialInstanceDynamic* CallFunc_Get_Material_MaterialInstanceDynamic, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00

--------------------------------
Class: WBP_TopNavBar_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x530, Size: 1]
	WBP_TopNavButton_C* BattlePassNav;//[Offset: 0x538, Size: 1]
	Image* DisableOverlay;//[Offset: 0x540, Size: 1]
	WBP_TopNavButton_C* EventNav;//[Offset: 0x548, Size: 1]
	WidgetSwitcher* GamepadLeftBumperSwitcher;//[Offset: 0x550, Size: 1]
	WidgetSwitcher* GamepadRightBumperSwitcher;//[Offset: 0x558, Size: 1]
	WBP_TopNavButton_C* HomeNav;//[Offset: 0x560, Size: 1]
	WBP_TopNavButton_C* LoadoutNav;//[Offset: 0x568, Size: 1]
	Image* logo;//[Offset: 0x570, Size: 1]
	SizeBox* LogoContainer;//[Offset: 0x578, Size: 1]
	WBP_TopNavButton_C* MobileArmoryNav;//[Offset: 0x580, Size: 1]
	HorizontalBox* NavigationContainer;//[Offset: 0x588, Size: 1]
	WBP_TopNavButton_C* ProfileNav;//[Offset: 0x590, Size: 1]
	WBP_KeyCallout_C* RightBumperIcon;//[Offset: 0x598, Size: 1]
	WBP_TopNavButton_C* StoreNav;//[Offset: 0x5a0, Size: 1]
	Overlay* TopBarContainer;//[Offset: 0x5a8, Size: 1]
	WBP_TopNavButton_C* WeaponsNav;//[Offset: 0x5b0, Size: 1]
	bool IsDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	FName HideAnimName;//[Offset: 0x5bc, Size: 1]
	FName ShowAnimName;//[Offset: 0x5c4, Size: 1]
	FName ArmoryTabSeen;//[Offset: 0x5cc, Size: 1]
	FName CurrentEventSeen;//[Offset: 0x5d4, Size: 1]
	void UpdateCurrentEvent(GameInstance* CallFunc_GetGameInstance_ReturnValue, bool CallFunc_IsValid_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, KSEventChallengesManager* CallFunc_GetEventChallengesManager_ReturnValue, FText CallFunc_GetItemName_ReturnValue, KSNarrativeEvent* CallFunc_GetFirstActiveNarrativeEvent_ReturnValue);// 0x2d74e00
	void UpdateCurrentEventTabVisibility(bool CallFunc_ShouldUseMobileLayout_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsActive_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2d74e00
	void UpdateCurrentEventNewIndicator(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FName CallFunc_GetCallToActionTag_Tag, bool CallFunc_GetCallToActionTag_ReturnValue, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess, bool CallFunc_ShouldDisplayCallToAction_ReturnValue);// 0x2d74e00
	void UpdateArmoryNewIndicator(GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsLocalActionSaved_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue);// 0x2d74e00
	void Check Experiments();// 0x2d74e00
	void UpdateBattlePassTabVisibility(GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, KSBattlePassProgressionManager* CallFunc_GetBattlePassProgressionManager_ReturnValue, bool CallFunc_ShouldDisplayBattlePass_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void OnHasNewStoreItems(bool HasNew);// 0x2d74e00
	void HandleViewRouteChanged(FName CurrentRoute, FName NextRoute, enum Layer, bool K2Node_SwitchEnum_CmpSuccess, int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, WBP_TopNavButton_C* K2Node_DynamicCast_AsWBP_Top_Nav_Button, bool K2Node_DynamicCast_bSuccess, bool CallFunc_NotEqual_NameName_ReturnValue, bool CallFunc_Array_Contains_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue);// 0x2d74e00
	void HandleInputStateChanged(byte InputState, bool Temp_bool_Variable, bool CallFunc_EqualEqual_ByteByte_ReturnValue, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void HandleNavRight(bool NextIsTarget, bool Temp_bool_Variable, bool CallFunc_IsAnyChunkInstalling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_GetChildrenCount_ReturnValue, WBP_TopNavButton_C* K2Node_DynamicCast_AsWBP_Top_Nav_Button, bool K2Node_DynamicCast_bSuccess, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_IsDisabled_Disabled, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_IsActive_Active, bool CallFunc_BooleanAND_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2d74e00
	void HandleNavLeft(bool NextIsTarget, bool Temp_bool_Variable, bool CallFunc_IsAnyChunkInstalling_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, WBP_TopNavButton_C* K2Node_DynamicCast_AsWBP_Top_Nav_Button, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsActive_Active, bool CallFunc_IsVisible_ReturnValue, bool CallFunc_IsDisabled_Disabled, bool CallFunc_Not_PreBool_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x2d74e00
	void InitializeNavButtons(int Temp_int_Variable, int CallFunc_GetChildrenCount_ReturnValue, Widget* CallFunc_GetChildAt_ReturnValue, int CallFunc_Subtract_IntInt_ReturnValue, KSWidget* K2Node_DynamicCast_AsKSWidget, bool K2Node_DynamicCast_bSuccess, bool CallFunc_LessEqual_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue);// 0x2d74e00
	void StartShowAnim();// 0x2d74e00
	void InitializeTickAnimations();// 0x2d74e00
	void ShowTopBarFinished();// 0x2d74e00
	void ShowTopBarAnim(float ElapsedTime, float ElapsedAlpha);// 0x2d74e00
	void InitHideAnimation();// 0x2d74e00
	void HideTopBarFinished();// 0x2d74e00
	void HideTopBarAnim(float ElapsedTime, float ElapsedAlpha);// 0x2d74e00
	void StartHideAnim();// 0x2d74e00
	void DisableTopBar(bool IsDisable);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void Construct();// 0x2d74e00
	void StartShowSequence(FName FromRoute, FName ToRoute);// 0x2d74e00
	void StartHideSequence(FName FromRoute, FName ToRoute);// 0x2d74e00
	void Handle Login State Changed(enum LoginState);// 0x2d74e00
	void OnLocalSettingSaved_Event(FName SettingName);// 0x2d74e00
	void OnPromptCycleAction(bool bNext);// 0x2d74e00
	void Event Challenges Ready();// 0x2d74e00
	void ExecuteUbergraph_WBP_TopNavBar(int EntryPoint, float K2Node_CustomEvent_ElapsedTime, float K2Node_CustomEvent_ElapsedAlpha, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Subtract_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, float K2Node_CustomEvent_ElapsedTime, float K2Node_CustomEvent_ElapsedAlpha, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector2D CallFunc_MakeVector2D_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetShowAnimDefaultTime_ShowAnimTime, delegate K2Node_CreateDelegate_OutputDelegate, float CallFunc_GetHideAnimDefaultTime_HideAnimTime, bool K2Node_CustomEvent_IsDisable, PUMG_HUD* K2Node_Event_hud, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, PUMG_LoginDataFactory* CallFunc_GetLoginDataFactory_ReturnValue, KSStoreItemHelper* CallFunc_GetItemHelper_ReturnValue, enum CallFunc_GetCurrentLoginState_ReturnValue, bool CallFunc_HasUnseenItems_ReturnValue, byte CallFunc_GetCurrentInputState_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_Event_FromRoute, FName K2Node_Event_ToRoute, FName K2Node_Event_FromRoute, FName K2Node_Event_ToRoute, bool CallFunc_IsAnyChunkInstalling_ReturnValue, enum Temp_byte_Variable, delegate K2Node_CreateDelegate_OutputDelegate, GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, delegate K2Node_CreateDelegate_OutputDelegate, KSEventChallengesManager* CallFunc_GetEventChallengesManager_ReturnValue, KSBattlePassProgressionManager* CallFunc_GetBattlePassProgressionManager_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, enum K2Node_CustomEvent_LoginState, bool K2Node_SwitchEnum_CmpSuccess, enum Temp_byte_Variable, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, FName K2Node_CustomEvent_SettingName, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess, bool Temp_bool_Variable, enum K2Node_Select_Default, bool CallFunc_EqualEqual_NameName_ReturnValue, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, bool K2Node_CustomEvent_bNext, enum Temp_byte_Variable, PUMG_InputManager* CallFunc_GetInputManager_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, enum Temp_byte_Variable, bool Temp_bool_Variable, enum K2Node_Select_Default);// 0x2d74e00

--------------------------------
Class: WBP_TopNavButton_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	CanvasPanel* NewIndicator;//[Offset: 0x530, Size: 1]
	WBP_CallToAction_C* WBP_CallToAction;//[Offset: 0x538, Size: 1]
	WBP_navtab_C* WBP_main_nav_tab;//[Offset: 0x540, Size: 1]
	FText Message;//[Offset: 0x548, Size: 1]
	MulticastInlineDelegateProperty OnClicked;//[Size: 1]
	MulticastInlineDelegateProperty OnHovered;//[Size: 1]
	MulticastInlineDelegateProperty OnUnhovered;//[Size: 1]
	FName TargetViewState;//[Offset: 0x590, Size: 1]
	FName[] RelatedViewStates;//[Offset: 0x598, Size: 1]
	MulticastInlineDelegateProperty OnNonRouteClicked;//[Size: 1]
	bool UsesBattlePassColoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b8, Size: 1]
	bool bIsFirstTab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b9, Size: 1]
	FName BattlePassCTAName;//[Offset: 0x5bc, Size: 1]
	bool UsesHolidayColoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c4, Size: 1]
	KSEvent* RelatedEvent;//[Offset: 0x5c8, Size: 1]
	void SetNewIndicator(bool Visible, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void IsDisabled(out bool Disabled, bool CallFunc_IsDisabled_ReturnValue);// 0x2d74e00
	void IsActive(out bool Active, bool CallFunc_IsSelected_ReturnValue);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void SetMessage(FText Message);// 0x2d74e00
	void Construct();// 0x2d74e00
	void DisableButton(bool IsDisabled);// 0x2d74e00
	void SetActive(bool IsActive);// 0x2d74e00
	void GamepadConfirm();// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void NavTabSelected(KSNavTabWidget* SelectedNavTab);// 0x2d74e00
	void ExecuteUbergraph_WBP_TopNavButton(int EntryPoint, bool CallFunc_NotEqual_NameName_ReturnValue, bool K2Node_CustomEvent_IsDisabled, bool K2Node_CustomEvent_IsActive, PUMG_HUD* K2Node_Event_hud, FText K2Node_CustomEvent_Message, bool K2Node_Event_IsDesignTime, KSNavTabWidget* K2Node_CustomEvent_SelectedNavTab, GameUserSettings* CallFunc_GetGameUserSettings_ReturnValue, KSGameUserSettings* K2Node_DynamicCast_AsKSGame_User_Settings, bool K2Node_DynamicCast_bSuccess, bool CallFunc_AddViewRoute_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void OnNonRouteClicked__DelegateSignature(KSWidget* ButtonClicked);// 0x2d74e00
	void OnUnhovered__DelegateSignature();// 0x2d74e00
	void OnHovered__DelegateSignature();// 0x2d74e00
	void OnClicked__DelegateSignature(FName TargetViewState);// 0x2d74e00

--------------------------------
Class: KSNavTabWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	MulticastInlineDelegateProperty OnNavTabSelected;//[Size: 1]
	MulticastInlineDelegateProperty OnNavTabUnselected;//[Size: 1]
	bool bSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548, Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x549, Size: 1]
	FText NavText;//[Offset: 0x550, Size: 1]
	void UnselectNavTab();// 0x29d65b0
	void SetSelected(bool bNewSelected);// 0x29ba460
	void SetDisabled(bool bNewDisabled);// 0x29ba180
	void SelectNavTab();// 0x29b6740
	bool IsSelected();// 0x29b5770
	bool IsDisabled();// 0x29b5750

--------------------------------
Class: WBP_CallToAction_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	WidgetAnimation* CTAAnim;//[Offset: 0x240, Size: 1]
	WBP_AdditiveImage_C* AdditiveBlur_Pulse;//[Offset: 0x248, Size: 1]
	Image* BlurFar;//[Offset: 0x250, Size: 1]
	Image* BlurNear;//[Offset: 0x258, Size: 1]
	Image* Square;//[Offset: 0x260, Size: 1]
	Image* Stroke;//[Offset: 0x268, Size: 1]
	void StopCTAAnim();// 0x2d74e00
	void PlayCTAAnim(UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void Construct();// 0x2d74e00
	void ExecuteUbergraph_WBP_CallToAction(int EntryPoint, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool K2Node_Event_IsDesignTime);// 0x2d74e00

--------------------------------
Class: WBP_AdditiveImage_C.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x238, Size: 1]
	Image* Texture;//[Offset: 0x240, Size: 1]
	SlateBrush DefaultBrush;//[Offset: 0x248, Size: 1]
	MaterialInterface* BrushMaterial;//[Offset: 0x2d0, Size: 1]
	FName ParameterName;//[Offset: 0x2d8, Size: 1]
	void SetAdditiveMaterial(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Texture2D* CallFunc_GetBrushResourceAsTexture2D_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void Construct();// 0x2d74e00
	void ExecuteUbergraph_WBP_AdditiveImage(int EntryPoint, bool K2Node_Event_IsDesignTime);// 0x2d74e00

--------------------------------
Class: WBP_navtab_C.KSNavTabWidget.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x568, Size: 1]
	WidgetAnimation* Unhover;//[Offset: 0x570, Size: 1]
	WidgetAnimation* Selected;//[Offset: 0x578, Size: 1]
	WidgetAnimation* Hovered;//[Offset: 0x580, Size: 1]
	Image* BackFill;//[Offset: 0x588, Size: 1]
	Image* BackFill_Free;//[Offset: 0x590, Size: 1]
	Image* BackFill_Holiday;//[Offset: 0x598, Size: 1]
	Image* BackFill_Premium;//[Offset: 0x5a0, Size: 1]
	Image* BottomEdge;//[Offset: 0x5a8, Size: 1]
	Image* BottomEdge_Free;//[Offset: 0x5b0, Size: 1]
	Image* BottomEdge_Holiday;//[Offset: 0x5b8, Size: 1]
	Image* BottomEdge_Premium;//[Offset: 0x5c0, Size: 1]
	Overlay* Container;//[Offset: 0x5c8, Size: 1]
	Image* DividerLeft;//[Offset: 0x5d0, Size: 1]
	Image* DividerRight;//[Offset: 0x5d8, Size: 1]
	Image* LockIcon;//[Offset: 0x5e0, Size: 1]
	Image* LockIcon;//[Offset: 0x5e8, Size: 1]
	Image* LockIcon;//[Offset: 0x5f0, Size: 1]
	Image* LockIcon;//[Offset: 0x5f8, Size: 1]
	Image* SelectedGradient;//[Offset: 0x600, Size: 1]
	Image* SelectedGradient_Free;//[Offset: 0x608, Size: 1]
	Image* SelectedGradient_Holiday;//[Offset: 0x610, Size: 1]
	Image* SelectedGradient_Premium;//[Offset: 0x618, Size: 1]
	Image* SnowMaterial;//[Offset: 0x620, Size: 1]
	Button* TabButton;//[Offset: 0x628, Size: 1]
	WidgetSwitcher* TabColorSwitcher;//[Offset: 0x630, Size: 1]
	TextBlock* text_TabFree;//[Offset: 0x638, Size: 1]
	TextBlock* text_TabHoliday;//[Offset: 0x640, Size: 1]
	TextBlock* text_TabPremium;//[Offset: 0x648, Size: 1]
	TextBlock* text_TabStandard;//[Offset: 0x650, Size: 1]
	class UserWidget* CalloutClass;//[Offset: 0x658, Size: 1]
	Widget* CalloutWidget;//[Offset: 0x680, Size: 1]
	byte CalloutWidget_HorizontalAlignment;//[Offset: 0x688, Size: 1]
	byte CalloutWidget_VerticalAlignment;//[Offset: 0x689, Size: 1]
	Margin CalloutWidget_Padding;//[Offset: 0x68c, Size: 1]
	AkAudioEvent* HoverSubscreenNavTabSFX;//[Offset: 0x6a0, Size: 1]
	AkAudioEvent* ClickSubscreenNavTabSFX;//[Offset: 0x6a8, Size: 1]
	bool UsesBattlePassColoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 1]
	bool UsesHolidayColoring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b1, Size: 1]
	void SetIsFirstTab(bool IsFirstTab, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void SetSelected(bool bNewSelected, float CallFunc_GetAnimationCurrentTime_ReturnValue, float CallFunc_GetEndTime_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue);// 0x2d74e00
	void SetDisabled(bool bNewDisabled, enum Temp_byte_Variable, bool Temp_bool_Variable, float Temp_float_Variable, float Temp_float_Variable, bool Temp_bool_Variable, float K2Node_Select_Default, enum Temp_byte_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, enum K2Node_Select_Default, bool Temp_bool_Variable, enum K2Node_Select_Default);// 0x2d74e00
	void TryCreateCalloutWidget(out bool Created, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, HUD* CallFunc_GetHUD_ReturnValue, PUMG_HUD* K2Node_DynamicCast_AsPUMG_HUD, bool K2Node_DynamicCast_bSuccess, KSWidget* K2Node_DynamicCast_AsKSWidget, bool K2Node_DynamicCast_bSuccess, class Object CallFunc_LoadClassAsset_Blocking_ReturnValue, class UserWidget K2Node_ClassDynamicCast_AsUser_Widget, bool K2Node_ClassDynamicCast_bSuccess, bool CallFunc_IsValidSoftClassReference_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UserWidget* CallFunc_Create_ReturnValue, bool CallFunc_IsValid_ReturnValue, PanelSlot* CallFunc_AddChild_ReturnValue, OverlaySlot* K2Node_DynamicCast_AsOverlay_Slot, bool K2Node_DynamicCast_bSuccess);// 0x2d74e00
	void SetShowCallout(bool Show, bool Temp_bool_Variable, enum Temp_byte_Variable, enum Temp_byte_Variable, bool CallFunc_TryCreateCalloutWidget_Created, bool CallFunc_IsValid_ReturnValue, enum K2Node_Select_Default);// 0x2d74e00
	void SettingsSubScreenNavTabClickedSFX();// 0x2d74e00
	void SettingsSubScreenNavTabHoveredSFX();// 0x2d74e00
	void Construct();// 0x2d74e00
	void BndEvt__TabButton_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();// 0x2d74e00
	void BndEvt__TabButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();// 0x2d74e00
	void BndEvt__TabButton_K2Node_ComponentBoundEvent_2_OnButtonHoverEvent__DelegateSignature();// 0x2d74e00
	void SetButtonText(FText ButtonText);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void SelectNavTab();// 0x2d74e00
	void UnselectNavTab();// 0x2d74e00
	void Handle View State Changed(FName CurrentRoute, FName PreviousRoute, enum Layer);// 0x2d74e00
	void ExecuteUbergraph_WBP_navtab(int EntryPoint, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, PlayerController* CallFunc_GetOwningPlayer_ReturnValue, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, FText K2Node_CustomEvent_ButtonText, PUMG_HUD* K2Node_Event_hud, bool K2Node_Event_IsDesignTime, bool CallFunc_TryCreateCalloutWidget_Created, bool CallFunc_RemoveChild_ReturnValue, bool CallFunc_TryCreateCalloutWidget_Created, UMGSequencePlayer* CallFunc_PlayAnimation_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_TextIsEmpty_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, GameInstance* CallFunc_GetGameInstance_ReturnValue, KSGameInstance* K2Node_DynamicCast_AsKSGame_Instance, bool K2Node_DynamicCast_bSuccess, KSBattlePassProgressionManager* CallFunc_GetBattlePassProgressionManager_ReturnValue, const delegate Temp_delegate_Variable, bool CallFunc_HasPremiumBattlePass_ReturnValue, bool CallFunc_IsValid_ReturnValue, const AkExternalSourceInfo[] Temp_struct_Variable, const delegate Temp_delegate_Variable, int CallFunc_PostEvent_ReturnValue, int CallFunc_PostEvent_ReturnValue, PUMG_ViewManager* CallFunc_GetViewManager_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, FName K2Node_CustomEvent_CurrentRoute, FName K2Node_CustomEvent_PreviousRoute, enum K2Node_CustomEvent_Layer);// 0x2d74e00

--------------------------------
Class: WBP_VersionNumber_C.KSWidget.PUMG_Widget.UserWidget.Widget.Visual.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x528, Size: 1]
	WidgetAnimation* MobileLayout;//[Offset: 0x530, Size: 1]
	TextBlock* VersionDisplay;//[Offset: 0x538, Size: 1]
	void Set Version Text(KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess, PUMG_LoginDataFactory* CallFunc_GetLoginDataFactory_ReturnValue, FString CallFunc_GetVersion_ReturnValue, FText CallFunc_Conv_StringToText_ReturnValue);// 0x2d74e00
	void PreConstruct(bool IsDesignTime);// 0x2d74e00
	void InitializeWidget(PUMG_HUD* HUD);// 0x2d74e00
	void ExecuteUbergraph_WBP_VersionNumber(int EntryPoint, bool K2Node_Event_IsDesignTime, PUMG_HUD* K2Node_Event_hud, KSLobbyHUDNew* K2Node_DynamicCast_AsKSLobby_HUDNew, bool K2Node_DynamicCast_bSuccess);// 0x2d74e00

--------------------------------
Class: TestMediaPlayerParams_C.Object
	FString URL;//[Offset: 0x28, Size: 1]
	int Timer;//[Offset: 0x38, Size: 1]

--------------------------------
